
build/BLDC_4_ChibiOS.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x4>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f001 f9da 	bl	800d410 <__core_init>
 800c05c:	f005 fb90 	bl	8011780 <__early_init>
 800c060:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800c064:	491b      	ldr	r1, [pc, #108]	; (800c0d4 <endfiniloop+0x8>)
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <endfiniloop+0xc>)

0800c068 <msloop>:
 800c068:	4291      	cmp	r1, r2
 800c06a:	bf3c      	itt	cc
 800c06c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c070:	e7fa      	bcc.n	800c068 <msloop>
 800c072:	491a      	ldr	r1, [pc, #104]	; (800c0dc <endfiniloop+0x10>)
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <endfiniloop+0x4>)

0800c076 <psloop>:
 800c076:	4291      	cmp	r1, r2
 800c078:	bf3c      	itt	cc
 800c07a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07e:	e7fa      	bcc.n	800c076 <psloop>
 800c080:	4917      	ldr	r1, [pc, #92]	; (800c0e0 <endfiniloop+0x14>)
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <endfiniloop+0x18>)
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <endfiniloop+0x1c>)

0800c086 <dloop>:
 800c086:	429a      	cmp	r2, r3
 800c088:	bf3e      	ittt	cc
 800c08a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08e:	f842 0b04 	strcc.w	r0, [r2], #4
 800c092:	e7f8      	bcc.n	800c086 <dloop>
 800c094:	2000      	movs	r0, #0
 800c096:	4915      	ldr	r1, [pc, #84]	; (800c0ec <endfiniloop+0x20>)
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <endfiniloop+0x24>)

0800c09a <bloop>:
 800c09a:	4291      	cmp	r1, r2
 800c09c:	bf3c      	itt	cc
 800c09e:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a2:	e7fa      	bcc.n	800c09a <bloop>
 800c0a4:	f001 f9bc 	bl	800d420 <__late_init>
 800c0a8:	4c12      	ldr	r4, [pc, #72]	; (800c0f4 <endfiniloop+0x28>)
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <endfiniloop+0x2c>)

0800c0ac <initloop>:
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	da03      	bge.n	800c0b8 <endinitloop>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	4788      	blx	r1
 800c0b6:	e7f9      	b.n	800c0ac <initloop>

0800c0b8 <endinitloop>:
 800c0b8:	f005 fc1a 	bl	80118f0 <main>
 800c0bc:	4c0f      	ldr	r4, [pc, #60]	; (800c0fc <endfiniloop+0x30>)
 800c0be:	4d10      	ldr	r5, [pc, #64]	; (800c100 <endfiniloop+0x34>)

0800c0c0 <finiloop>:
 800c0c0:	42ac      	cmp	r4, r5
 800c0c2:	da03      	bge.n	800c0cc <endfiniloop>
 800c0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c8:	4788      	blx	r1
 800c0ca:	e7f9      	b.n	800c0c0 <finiloop>

0800c0cc <endfiniloop>:
 800c0cc:	f001 b9b0 	b.w	800d430 <__default_exit>
 800c0d0:	20001000 	.word	0x20001000
 800c0d4:	20000000 	.word	0x20000000
 800c0d8:	20000800 	.word	0x20000800
 800c0dc:	20000800 	.word	0x20000800
 800c0e0:	080310e8 	.word	0x080310e8
 800c0e4:	20001000 	.word	0x20001000
 800c0e8:	20001a3c 	.word	0x20001a3c
 800c0ec:	20001a40 	.word	0x20001a40
 800c0f0:	200126d0 	.word	0x200126d0
 800c0f4:	0800c000 	.word	0x0800c000
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f001 fc84 	bl	800da40 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f001 fbb2 	bl	800d8a0 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f092 0f00 	teq	r2, #0
 800c42a:	bf14      	ite	ne
 800c42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c430:	4770      	bxeq	lr
 800c432:	b530      	push	{r4, r5, lr}
 800c434:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c440:	e720      	b.n	800c284 <__adddf3+0x138>
 800c442:	bf00      	nop

0800c444 <__aeabi_ul2d>:
 800c444:	ea50 0201 	orrs.w	r2, r0, r1
 800c448:	bf08      	it	eq
 800c44a:	4770      	bxeq	lr
 800c44c:	b530      	push	{r4, r5, lr}
 800c44e:	f04f 0500 	mov.w	r5, #0
 800c452:	e00a      	b.n	800c46a <__aeabi_l2d+0x16>

0800c454 <__aeabi_l2d>:
 800c454:	ea50 0201 	orrs.w	r2, r0, r1
 800c458:	bf08      	it	eq
 800c45a:	4770      	bxeq	lr
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c462:	d502      	bpl.n	800c46a <__aeabi_l2d+0x16>
 800c464:	4240      	negs	r0, r0
 800c466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c46a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c46e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c476:	f43f aedc 	beq.w	800c232 <__adddf3+0xe6>
 800c47a:	f04f 0203 	mov.w	r2, #3
 800c47e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c482:	bf18      	it	ne
 800c484:	3203      	addne	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c492:	f1c2 0320 	rsb	r3, r2, #32
 800c496:	fa00 fc03 	lsl.w	ip, r0, r3
 800c49a:	fa20 f002 	lsr.w	r0, r0, r2
 800c49e:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4a2:	ea40 000e 	orr.w	r0, r0, lr
 800c4a6:	fa21 f102 	lsr.w	r1, r1, r2
 800c4aa:	4414      	add	r4, r2
 800c4ac:	e6c1      	b.n	800c232 <__adddf3+0xe6>
 800c4ae:	bf00      	nop

0800c4b0 <__aeabi_dmul>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4be:	bf1d      	ittte	ne
 800c4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4c4:	ea94 0f0c 	teqne	r4, ip
 800c4c8:	ea95 0f0c 	teqne	r5, ip
 800c4cc:	f000 f8de 	bleq	800c68c <__aeabi_dmul+0x1dc>
 800c4d0:	442c      	add	r4, r5
 800c4d2:	ea81 0603 	eor.w	r6, r1, r3
 800c4d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4e2:	bf18      	it	ne
 800c4e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f0:	d038      	beq.n	800c564 <__aeabi_dmul+0xb4>
 800c4f2:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4f6:	f04f 0500 	mov.w	r5, #0
 800c4fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c502:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c506:	f04f 0600 	mov.w	r6, #0
 800c50a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c50e:	f09c 0f00 	teq	ip, #0
 800c512:	bf18      	it	ne
 800c514:	f04e 0e01 	orrne.w	lr, lr, #1
 800c518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c51c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c524:	d204      	bcs.n	800c530 <__aeabi_dmul+0x80>
 800c526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c52a:	416d      	adcs	r5, r5
 800c52c:	eb46 0606 	adc.w	r6, r6, r6
 800c530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c53c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c548:	bf88      	it	hi
 800c54a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c54e:	d81e      	bhi.n	800c58e <__aeabi_dmul+0xde>
 800c550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c554:	bf08      	it	eq
 800c556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c55a:	f150 0000 	adcs.w	r0, r0, #0
 800c55e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c568:	ea46 0101 	orr.w	r1, r6, r1
 800c56c:	ea40 0002 	orr.w	r0, r0, r2
 800c570:	ea81 0103 	eor.w	r1, r1, r3
 800c574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c578:	bfc2      	ittt	gt
 800c57a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c57e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c582:	bd70      	popgt	{r4, r5, r6, pc}
 800c584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c588:	f04f 0e00 	mov.w	lr, #0
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f300 80ab 	bgt.w	800c6e8 <__aeabi_dmul+0x238>
 800c592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c596:	bfde      	ittt	le
 800c598:	2000      	movle	r0, #0
 800c59a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c59e:	bd70      	pople	{r4, r5, r6, pc}
 800c5a0:	f1c4 0400 	rsb	r4, r4, #0
 800c5a4:	3c20      	subs	r4, #32
 800c5a6:	da35      	bge.n	800c614 <__aeabi_dmul+0x164>
 800c5a8:	340c      	adds	r4, #12
 800c5aa:	dc1b      	bgt.n	800c5e4 <__aeabi_dmul+0x134>
 800c5ac:	f104 0414 	add.w	r4, r4, #20
 800c5b0:	f1c4 0520 	rsb	r5, r4, #32
 800c5b4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5b8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5bc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5c0:	ea40 0002 	orr.w	r0, r0, r2
 800c5c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5d0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5d4:	eb42 0106 	adc.w	r1, r2, r6
 800c5d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5dc:	bf08      	it	eq
 800c5de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f1c4 040c 	rsb	r4, r4, #12
 800c5e8:	f1c4 0520 	rsb	r5, r4, #32
 800c5ec:	fa00 f304 	lsl.w	r3, r0, r4
 800c5f0:	fa20 f005 	lsr.w	r0, r0, r5
 800c5f4:	fa01 f204 	lsl.w	r2, r1, r4
 800c5f8:	ea40 0002 	orr.w	r0, r0, r2
 800c5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c604:	f141 0100 	adc.w	r1, r1, #0
 800c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c60c:	bf08      	it	eq
 800c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f1c4 0520 	rsb	r5, r4, #32
 800c618:	fa00 f205 	lsl.w	r2, r0, r5
 800c61c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c620:	fa20 f304 	lsr.w	r3, r0, r4
 800c624:	fa01 f205 	lsl.w	r2, r1, r5
 800c628:	ea43 0302 	orr.w	r3, r3, r2
 800c62c:	fa21 f004 	lsr.w	r0, r1, r4
 800c630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c634:	fa21 f204 	lsr.w	r2, r1, r4
 800c638:	ea20 0002 	bic.w	r0, r0, r2
 800c63c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c644:	bf08      	it	eq
 800c646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f094 0f00 	teq	r4, #0
 800c650:	d10f      	bne.n	800c672 <__aeabi_dmul+0x1c2>
 800c652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c656:	0040      	lsls	r0, r0, #1
 800c658:	eb41 0101 	adc.w	r1, r1, r1
 800c65c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c660:	bf08      	it	eq
 800c662:	3c01      	subeq	r4, #1
 800c664:	d0f7      	beq.n	800c656 <__aeabi_dmul+0x1a6>
 800c666:	ea41 0106 	orr.w	r1, r1, r6
 800c66a:	f095 0f00 	teq	r5, #0
 800c66e:	bf18      	it	ne
 800c670:	4770      	bxne	lr
 800c672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c676:	0052      	lsls	r2, r2, #1
 800c678:	eb43 0303 	adc.w	r3, r3, r3
 800c67c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c680:	bf08      	it	eq
 800c682:	3d01      	subeq	r5, #1
 800c684:	d0f7      	beq.n	800c676 <__aeabi_dmul+0x1c6>
 800c686:	ea43 0306 	orr.w	r3, r3, r6
 800c68a:	4770      	bx	lr
 800c68c:	ea94 0f0c 	teq	r4, ip
 800c690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c694:	bf18      	it	ne
 800c696:	ea95 0f0c 	teqne	r5, ip
 800c69a:	d00c      	beq.n	800c6b6 <__aeabi_dmul+0x206>
 800c69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6a0:	bf18      	it	ne
 800c6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6a6:	d1d1      	bne.n	800c64c <__aeabi_dmul+0x19c>
 800c6a8:	ea81 0103 	eor.w	r1, r1, r3
 800c6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6b0:	f04f 0000 	mov.w	r0, #0
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ba:	bf06      	itte	eq
 800c6bc:	4610      	moveq	r0, r2
 800c6be:	4619      	moveq	r1, r3
 800c6c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6c4:	d019      	beq.n	800c6fa <__aeabi_dmul+0x24a>
 800c6c6:	ea94 0f0c 	teq	r4, ip
 800c6ca:	d102      	bne.n	800c6d2 <__aeabi_dmul+0x222>
 800c6cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6d0:	d113      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6d2:	ea95 0f0c 	teq	r5, ip
 800c6d6:	d105      	bne.n	800c6e4 <__aeabi_dmul+0x234>
 800c6d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6dc:	bf1c      	itt	ne
 800c6de:	4610      	movne	r0, r2
 800c6e0:	4619      	movne	r1, r3
 800c6e2:	d10a      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6e4:	ea81 0103 	eor.w	r1, r1, r3
 800c6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c702:	bd70      	pop	{r4, r5, r6, pc}

0800c704 <__aeabi_ddiv>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c712:	bf1d      	ittte	ne
 800c714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c718:	ea94 0f0c 	teqne	r4, ip
 800c71c:	ea95 0f0c 	teqne	r5, ip
 800c720:	f000 f8a7 	bleq	800c872 <__aeabi_ddiv+0x16e>
 800c724:	eba4 0405 	sub.w	r4, r4, r5
 800c728:	ea81 0e03 	eor.w	lr, r1, r3
 800c72c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c734:	f000 8088 	beq.w	800c848 <__aeabi_ddiv+0x144>
 800c738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c73c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c74c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c75c:	429d      	cmp	r5, r3
 800c75e:	bf08      	it	eq
 800c760:	4296      	cmpeq	r6, r2
 800c762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c76a:	d202      	bcs.n	800c772 <__aeabi_ddiv+0x6e>
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c772:	1ab6      	subs	r6, r6, r2
 800c774:	eb65 0503 	sbc.w	r5, r5, r3
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c77e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c786:	ebb6 0e02 	subs.w	lr, r6, r2
 800c78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c78e:	bf22      	ittt	cs
 800c790:	1ab6      	subcs	r6, r6, r2
 800c792:	4675      	movcs	r5, lr
 800c794:	ea40 000c 	orrcs.w	r0, r0, ip
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c79e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7a6:	bf22      	ittt	cs
 800c7a8:	1ab6      	subcs	r6, r6, r2
 800c7aa:	4675      	movcs	r5, lr
 800c7ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7be:	bf22      	ittt	cs
 800c7c0:	1ab6      	subcs	r6, r6, r2
 800c7c2:	4675      	movcs	r5, lr
 800c7c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7c8:	085b      	lsrs	r3, r3, #1
 800c7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7d6:	bf22      	ittt	cs
 800c7d8:	1ab6      	subcs	r6, r6, r2
 800c7da:	4675      	movcs	r5, lr
 800c7dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7e0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7e4:	d018      	beq.n	800c818 <__aeabi_ddiv+0x114>
 800c7e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c7f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c7fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c7fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c802:	d1c0      	bne.n	800c786 <__aeabi_ddiv+0x82>
 800c804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c808:	d10b      	bne.n	800c822 <__aeabi_ddiv+0x11e>
 800c80a:	ea41 0100 	orr.w	r1, r1, r0
 800c80e:	f04f 0000 	mov.w	r0, #0
 800c812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c816:	e7b6      	b.n	800c786 <__aeabi_ddiv+0x82>
 800c818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c81c:	bf04      	itt	eq
 800c81e:	4301      	orreq	r1, r0
 800c820:	2000      	moveq	r0, #0
 800c822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c826:	bf88      	it	hi
 800c828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c82c:	f63f aeaf 	bhi.w	800c58e <__aeabi_dmul+0xde>
 800c830:	ebb5 0c03 	subs.w	ip, r5, r3
 800c834:	bf04      	itt	eq
 800c836:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c83e:	f150 0000 	adcs.w	r0, r0, #0
 800c842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c84c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c854:	bfc2      	ittt	gt
 800c856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c85a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c85e:	bd70      	popgt	{r4, r5, r6, pc}
 800c860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c864:	f04f 0e00 	mov.w	lr, #0
 800c868:	3c01      	subs	r4, #1
 800c86a:	e690      	b.n	800c58e <__aeabi_dmul+0xde>
 800c86c:	ea45 0e06 	orr.w	lr, r5, r6
 800c870:	e68d      	b.n	800c58e <__aeabi_dmul+0xde>
 800c872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c876:	ea94 0f0c 	teq	r4, ip
 800c87a:	bf08      	it	eq
 800c87c:	ea95 0f0c 	teqeq	r5, ip
 800c880:	f43f af3b 	beq.w	800c6fa <__aeabi_dmul+0x24a>
 800c884:	ea94 0f0c 	teq	r4, ip
 800c888:	d10a      	bne.n	800c8a0 <__aeabi_ddiv+0x19c>
 800c88a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c88e:	f47f af34 	bne.w	800c6fa <__aeabi_dmul+0x24a>
 800c892:	ea95 0f0c 	teq	r5, ip
 800c896:	f47f af25 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c89a:	4610      	mov	r0, r2
 800c89c:	4619      	mov	r1, r3
 800c89e:	e72c      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8a0:	ea95 0f0c 	teq	r5, ip
 800c8a4:	d106      	bne.n	800c8b4 <__aeabi_ddiv+0x1b0>
 800c8a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8aa:	f43f aefd 	beq.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	e722      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8b8:	bf18      	it	ne
 800c8ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8be:	f47f aec5 	bne.w	800c64c <__aeabi_dmul+0x19c>
 800c8c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8c6:	f47f af0d 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c8ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8ce:	f47f aeeb 	bne.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8d2:	e712      	b.n	800c6fa <__aeabi_dmul+0x24a>
	...

0800c8e0 <__gedf2>:
 800c8e0:	f04f 3cff 	mov.w	ip, #4294967295
 800c8e4:	e006      	b.n	800c8f4 <__cmpdf2+0x4>
 800c8e6:	bf00      	nop

0800c8e8 <__ledf2>:
 800c8e8:	f04f 0c01 	mov.w	ip, #1
 800c8ec:	e002      	b.n	800c8f4 <__cmpdf2+0x4>
 800c8ee:	bf00      	nop

0800c8f0 <__cmpdf2>:
 800c8f0:	f04f 0c01 	mov.w	ip, #1
 800c8f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800c8f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c8fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c904:	bf18      	it	ne
 800c906:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800c90a:	d01b      	beq.n	800c944 <__cmpdf2+0x54>
 800c90c:	b001      	add	sp, #4
 800c90e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800c912:	bf0c      	ite	eq
 800c914:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800c918:	ea91 0f03 	teqne	r1, r3
 800c91c:	bf02      	ittt	eq
 800c91e:	ea90 0f02 	teqeq	r0, r2
 800c922:	2000      	moveq	r0, #0
 800c924:	4770      	bxeq	lr
 800c926:	f110 0f00 	cmn.w	r0, #0
 800c92a:	ea91 0f03 	teq	r1, r3
 800c92e:	bf58      	it	pl
 800c930:	4299      	cmppl	r1, r3
 800c932:	bf08      	it	eq
 800c934:	4290      	cmpeq	r0, r2
 800c936:	bf2c      	ite	cs
 800c938:	17d8      	asrcs	r0, r3, #31
 800c93a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800c93e:	f040 0001 	orr.w	r0, r0, #1
 800c942:	4770      	bx	lr
 800c944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c94c:	d102      	bne.n	800c954 <__cmpdf2+0x64>
 800c94e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c952:	d107      	bne.n	800c964 <__cmpdf2+0x74>
 800c954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c95c:	d1d6      	bne.n	800c90c <__cmpdf2+0x1c>
 800c95e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c962:	d0d3      	beq.n	800c90c <__cmpdf2+0x1c>
 800c964:	f85d 0b04 	ldr.w	r0, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop

0800c96c <__aeabi_cdrcmple>:
 800c96c:	4684      	mov	ip, r0
 800c96e:	4610      	mov	r0, r2
 800c970:	4662      	mov	r2, ip
 800c972:	468c      	mov	ip, r1
 800c974:	4619      	mov	r1, r3
 800c976:	4663      	mov	r3, ip
 800c978:	e000      	b.n	800c97c <__aeabi_cdcmpeq>
 800c97a:	bf00      	nop

0800c97c <__aeabi_cdcmpeq>:
 800c97c:	b501      	push	{r0, lr}
 800c97e:	f7ff ffb7 	bl	800c8f0 <__cmpdf2>
 800c982:	2800      	cmp	r0, #0
 800c984:	bf48      	it	mi
 800c986:	f110 0f00 	cmnmi.w	r0, #0
 800c98a:	bd01      	pop	{r0, pc}

0800c98c <__aeabi_dcmpeq>:
 800c98c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c990:	f7ff fff4 	bl	800c97c <__aeabi_cdcmpeq>
 800c994:	bf0c      	ite	eq
 800c996:	2001      	moveq	r0, #1
 800c998:	2000      	movne	r0, #0
 800c99a:	f85d fb08 	ldr.w	pc, [sp], #8
 800c99e:	bf00      	nop

0800c9a0 <__aeabi_dcmplt>:
 800c9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9a4:	f7ff ffea 	bl	800c97c <__aeabi_cdcmpeq>
 800c9a8:	bf34      	ite	cc
 800c9aa:	2001      	movcc	r0, #1
 800c9ac:	2000      	movcs	r0, #0
 800c9ae:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9b2:	bf00      	nop

0800c9b4 <__aeabi_dcmple>:
 800c9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9b8:	f7ff ffe0 	bl	800c97c <__aeabi_cdcmpeq>
 800c9bc:	bf94      	ite	ls
 800c9be:	2001      	movls	r0, #1
 800c9c0:	2000      	movhi	r0, #0
 800c9c2:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9c6:	bf00      	nop

0800c9c8 <__aeabi_dcmpge>:
 800c9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9cc:	f7ff ffce 	bl	800c96c <__aeabi_cdrcmple>
 800c9d0:	bf94      	ite	ls
 800c9d2:	2001      	movls	r0, #1
 800c9d4:	2000      	movhi	r0, #0
 800c9d6:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9da:	bf00      	nop

0800c9dc <__aeabi_dcmpgt>:
 800c9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9e0:	f7ff ffc4 	bl	800c96c <__aeabi_cdrcmple>
 800c9e4:	bf34      	ite	cc
 800c9e6:	2001      	movcc	r0, #1
 800c9e8:	2000      	movcs	r0, #0
 800c9ea:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9ee:	bf00      	nop

0800c9f0 <__aeabi_dcmpun>:
 800c9f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c9f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c9f8:	d102      	bne.n	800ca00 <__aeabi_dcmpun+0x10>
 800c9fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c9fe:	d10a      	bne.n	800ca16 <__aeabi_dcmpun+0x26>
 800ca00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ca04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ca08:	d102      	bne.n	800ca10 <__aeabi_dcmpun+0x20>
 800ca0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ca0e:	d102      	bne.n	800ca16 <__aeabi_dcmpun+0x26>
 800ca10:	f04f 0000 	mov.w	r0, #0
 800ca14:	4770      	bx	lr
 800ca16:	f04f 0001 	mov.w	r0, #1
 800ca1a:	4770      	bx	lr
 800ca1c:	0000      	movs	r0, r0
	...

0800ca20 <__aeabi_d2iz>:
 800ca20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ca28:	d215      	bcs.n	800ca56 <__aeabi_d2iz+0x36>
 800ca2a:	d511      	bpl.n	800ca50 <__aeabi_d2iz+0x30>
 800ca2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ca30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ca34:	d912      	bls.n	800ca5c <__aeabi_d2iz+0x3c>
 800ca36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ca3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ca42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ca46:	fa23 f002 	lsr.w	r0, r3, r2
 800ca4a:	bf18      	it	ne
 800ca4c:	4240      	negne	r0, r0
 800ca4e:	4770      	bx	lr
 800ca50:	f04f 0000 	mov.w	r0, #0
 800ca54:	4770      	bx	lr
 800ca56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ca5a:	d105      	bne.n	800ca68 <__aeabi_d2iz+0x48>
 800ca5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ca60:	bf08      	it	eq
 800ca62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ca66:	4770      	bx	lr
 800ca68:	f04f 0000 	mov.w	r0, #0
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop

0800ca70 <__aeabi_d2f>:
 800ca70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800ca78:	bf24      	itt	cs
 800ca7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800ca7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800ca82:	d90d      	bls.n	800caa0 <__aeabi_d2f+0x30>
 800ca84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ca88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800ca8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800ca90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ca94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800ca98:	bf08      	it	eq
 800ca9a:	f020 0001 	biceq.w	r0, r0, #1
 800ca9e:	4770      	bx	lr
 800caa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800caa4:	d121      	bne.n	800caea <__aeabi_d2f+0x7a>
 800caa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800caaa:	bfbc      	itt	lt
 800caac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800cab0:	4770      	bxlt	lr
 800cab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800caba:	f1c2 0218 	rsb	r2, r2, #24
 800cabe:	f1c2 0c20 	rsb	ip, r2, #32
 800cac2:	fa10 f30c 	lsls.w	r3, r0, ip
 800cac6:	fa20 f002 	lsr.w	r0, r0, r2
 800caca:	bf18      	it	ne
 800cacc:	f040 0001 	orrne.w	r0, r0, #1
 800cad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800cad8:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cadc:	ea40 000c 	orr.w	r0, r0, ip
 800cae0:	fa23 f302 	lsr.w	r3, r3, r2
 800cae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cae8:	e7cc      	b.n	800ca84 <__aeabi_d2f+0x14>
 800caea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800caee:	d107      	bne.n	800cb00 <__aeabi_d2f+0x90>
 800caf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800caf4:	bf1e      	ittt	ne
 800caf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800cafa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800cafe:	4770      	bxne	lr
 800cb00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800cb04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800cb08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop

0800cb10 <memcpy>:
 800cb10:	4684      	mov	ip, r0
 800cb12:	ea41 0300 	orr.w	r3, r1, r0
 800cb16:	f013 0303 	ands.w	r3, r3, #3
 800cb1a:	d16d      	bne.n	800cbf8 <memcpy+0xe8>
 800cb1c:	3a40      	subs	r2, #64	; 0x40
 800cb1e:	d341      	bcc.n	800cba4 <memcpy+0x94>
 800cb20:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb24:	f840 3b04 	str.w	r3, [r0], #4
 800cb28:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb2c:	f840 3b04 	str.w	r3, [r0], #4
 800cb30:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb34:	f840 3b04 	str.w	r3, [r0], #4
 800cb38:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb3c:	f840 3b04 	str.w	r3, [r0], #4
 800cb40:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb44:	f840 3b04 	str.w	r3, [r0], #4
 800cb48:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb4c:	f840 3b04 	str.w	r3, [r0], #4
 800cb50:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb54:	f840 3b04 	str.w	r3, [r0], #4
 800cb58:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb5c:	f840 3b04 	str.w	r3, [r0], #4
 800cb60:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb64:	f840 3b04 	str.w	r3, [r0], #4
 800cb68:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb6c:	f840 3b04 	str.w	r3, [r0], #4
 800cb70:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb74:	f840 3b04 	str.w	r3, [r0], #4
 800cb78:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb7c:	f840 3b04 	str.w	r3, [r0], #4
 800cb80:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb84:	f840 3b04 	str.w	r3, [r0], #4
 800cb88:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb8c:	f840 3b04 	str.w	r3, [r0], #4
 800cb90:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb94:	f840 3b04 	str.w	r3, [r0], #4
 800cb98:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb9c:	f840 3b04 	str.w	r3, [r0], #4
 800cba0:	3a40      	subs	r2, #64	; 0x40
 800cba2:	d2bd      	bcs.n	800cb20 <memcpy+0x10>
 800cba4:	3230      	adds	r2, #48	; 0x30
 800cba6:	d311      	bcc.n	800cbcc <memcpy+0xbc>
 800cba8:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbac:	f840 3b04 	str.w	r3, [r0], #4
 800cbb0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbb4:	f840 3b04 	str.w	r3, [r0], #4
 800cbb8:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbbc:	f840 3b04 	str.w	r3, [r0], #4
 800cbc0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbc4:	f840 3b04 	str.w	r3, [r0], #4
 800cbc8:	3a10      	subs	r2, #16
 800cbca:	d2ed      	bcs.n	800cba8 <memcpy+0x98>
 800cbcc:	320c      	adds	r2, #12
 800cbce:	d305      	bcc.n	800cbdc <memcpy+0xcc>
 800cbd0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbd4:	f840 3b04 	str.w	r3, [r0], #4
 800cbd8:	3a04      	subs	r2, #4
 800cbda:	d2f9      	bcs.n	800cbd0 <memcpy+0xc0>
 800cbdc:	3204      	adds	r2, #4
 800cbde:	d008      	beq.n	800cbf2 <memcpy+0xe2>
 800cbe0:	07d2      	lsls	r2, r2, #31
 800cbe2:	bf1c      	itt	ne
 800cbe4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cbe8:	f800 3b01 	strbne.w	r3, [r0], #1
 800cbec:	d301      	bcc.n	800cbf2 <memcpy+0xe2>
 800cbee:	880b      	ldrh	r3, [r1, #0]
 800cbf0:	8003      	strh	r3, [r0, #0]
 800cbf2:	4660      	mov	r0, ip
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	2a08      	cmp	r2, #8
 800cbfa:	d313      	bcc.n	800cc24 <memcpy+0x114>
 800cbfc:	078b      	lsls	r3, r1, #30
 800cbfe:	d08d      	beq.n	800cb1c <memcpy+0xc>
 800cc00:	f010 0303 	ands.w	r3, r0, #3
 800cc04:	d08a      	beq.n	800cb1c <memcpy+0xc>
 800cc06:	f1c3 0304 	rsb	r3, r3, #4
 800cc0a:	1ad2      	subs	r2, r2, r3
 800cc0c:	07db      	lsls	r3, r3, #31
 800cc0e:	bf1c      	itt	ne
 800cc10:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cc14:	f800 3b01 	strbne.w	r3, [r0], #1
 800cc18:	d380      	bcc.n	800cb1c <memcpy+0xc>
 800cc1a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800cc1e:	f820 3b02 	strh.w	r3, [r0], #2
 800cc22:	e77b      	b.n	800cb1c <memcpy+0xc>
 800cc24:	3a04      	subs	r2, #4
 800cc26:	d3d9      	bcc.n	800cbdc <memcpy+0xcc>
 800cc28:	3a01      	subs	r2, #1
 800cc2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc2e:	f800 3b01 	strb.w	r3, [r0], #1
 800cc32:	d2f9      	bcs.n	800cc28 <memcpy+0x118>
 800cc34:	780b      	ldrb	r3, [r1, #0]
 800cc36:	7003      	strb	r3, [r0, #0]
 800cc38:	784b      	ldrb	r3, [r1, #1]
 800cc3a:	7043      	strb	r3, [r0, #1]
 800cc3c:	788b      	ldrb	r3, [r1, #2]
 800cc3e:	7083      	strb	r3, [r0, #2]
 800cc40:	4660      	mov	r0, ip
 800cc42:	4770      	bx	lr
	...
 800cc50:	eba2 0003 	sub.w	r0, r2, r3
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop

0800cc58 <strcmp>:
 800cc58:	7802      	ldrb	r2, [r0, #0]
 800cc5a:	780b      	ldrb	r3, [r1, #0]
 800cc5c:	2a01      	cmp	r2, #1
 800cc5e:	bf28      	it	cs
 800cc60:	429a      	cmpcs	r2, r3
 800cc62:	d1f5      	bne.n	800cc50 <memcpy+0x140>
 800cc64:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800cc68:	ea40 0401 	orr.w	r4, r0, r1
 800cc6c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cc70:	f06f 0c00 	mvn.w	ip, #0
 800cc74:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800cc78:	b312      	cbz	r2, 800ccc0 <strcmp+0x68>
 800cc7a:	ea80 0401 	eor.w	r4, r0, r1
 800cc7e:	f014 0f07 	tst.w	r4, #7
 800cc82:	d16a      	bne.n	800cd5a <strcmp+0x102>
 800cc84:	f000 0407 	and.w	r4, r0, #7
 800cc88:	f020 0007 	bic.w	r0, r0, #7
 800cc8c:	f004 0503 	and.w	r5, r4, #3
 800cc90:	f021 0107 	bic.w	r1, r1, #7
 800cc94:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800cc98:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800cc9c:	f014 0f04 	tst.w	r4, #4
 800cca0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800cca4:	fa0c f405 	lsl.w	r4, ip, r5
 800cca8:	ea62 0204 	orn	r2, r2, r4
 800ccac:	ea66 0604 	orn	r6, r6, r4
 800ccb0:	d00a      	beq.n	800ccc8 <strcmp+0x70>
 800ccb2:	ea63 0304 	orn	r3, r3, r4
 800ccb6:	4662      	mov	r2, ip
 800ccb8:	ea67 0704 	orn	r7, r7, r4
 800ccbc:	4666      	mov	r6, ip
 800ccbe:	e003      	b.n	800ccc8 <strcmp+0x70>
 800ccc0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800ccc4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800ccc8:	fa82 f54c 	uadd8	r5, r2, ip
 800cccc:	ea82 0406 	eor.w	r4, r2, r6
 800ccd0:	faa4 f48c 	sel	r4, r4, ip
 800ccd4:	bb6c      	cbnz	r4, 800cd32 <strcmp+0xda>
 800ccd6:	fa83 f54c 	uadd8	r5, r3, ip
 800ccda:	ea83 0507 	eor.w	r5, r3, r7
 800ccde:	faa5 f58c 	sel	r5, r5, ip
 800cce2:	b995      	cbnz	r5, 800cd0a <strcmp+0xb2>
 800cce4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800cce8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800ccec:	fa82 f54c 	uadd8	r5, r2, ip
 800ccf0:	ea82 0406 	eor.w	r4, r2, r6
 800ccf4:	faa4 f48c 	sel	r4, r4, ip
 800ccf8:	fa83 f54c 	uadd8	r5, r3, ip
 800ccfc:	ea83 0507 	eor.w	r5, r3, r7
 800cd00:	faa5 f58c 	sel	r5, r5, ip
 800cd04:	4325      	orrs	r5, r4
 800cd06:	d0db      	beq.n	800ccc0 <strcmp+0x68>
 800cd08:	b99c      	cbnz	r4, 800cd32 <strcmp+0xda>
 800cd0a:	ba2d      	rev	r5, r5
 800cd0c:	fab5 f485 	clz	r4, r5
 800cd10:	f024 0407 	bic.w	r4, r4, #7
 800cd14:	fa27 f104 	lsr.w	r1, r7, r4
 800cd18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd1c:	fa23 f304 	lsr.w	r3, r3, r4
 800cd20:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800cd24:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800cd28:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800cd2c:	eba0 0001 	sub.w	r0, r0, r1
 800cd30:	4770      	bx	lr
 800cd32:	ba24      	rev	r4, r4
 800cd34:	fab4 f484 	clz	r4, r4
 800cd38:	f024 0407 	bic.w	r4, r4, #7
 800cd3c:	fa26 f104 	lsr.w	r1, r6, r4
 800cd40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd44:	fa22 f204 	lsr.w	r2, r2, r4
 800cd48:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800cd4c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800cd50:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800cd54:	eba0 0001 	sub.w	r0, r0, r1
 800cd58:	4770      	bx	lr
 800cd5a:	f014 0f03 	tst.w	r4, #3
 800cd5e:	d13c      	bne.n	800cdda <strcmp+0x182>
 800cd60:	f010 0403 	ands.w	r4, r0, #3
 800cd64:	d128      	bne.n	800cdb8 <strcmp+0x160>
 800cd66:	f850 2b08 	ldr.w	r2, [r0], #8
 800cd6a:	f851 3b08 	ldr.w	r3, [r1], #8
 800cd6e:	fa82 f54c 	uadd8	r5, r2, ip
 800cd72:	ea82 0503 	eor.w	r5, r2, r3
 800cd76:	faa5 f58c 	sel	r5, r5, ip
 800cd7a:	b95d      	cbnz	r5, 800cd94 <strcmp+0x13c>
 800cd7c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800cd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd84:	fa82 f54c 	uadd8	r5, r2, ip
 800cd88:	ea82 0503 	eor.w	r5, r2, r3
 800cd8c:	faa5 f58c 	sel	r5, r5, ip
 800cd90:	2d00      	cmp	r5, #0
 800cd92:	d0e8      	beq.n	800cd66 <strcmp+0x10e>
 800cd94:	ba2d      	rev	r5, r5
 800cd96:	fab5 f485 	clz	r4, r5
 800cd9a:	f024 0407 	bic.w	r4, r4, #7
 800cd9e:	fa23 f104 	lsr.w	r1, r3, r4
 800cda2:	fa22 f204 	lsr.w	r2, r2, r4
 800cda6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800cdaa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800cdae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800cdb2:	eba0 0001 	sub.w	r0, r0, r1
 800cdb6:	4770      	bx	lr
 800cdb8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800cdbc:	f020 0003 	bic.w	r0, r0, #3
 800cdc0:	f850 2b08 	ldr.w	r2, [r0], #8
 800cdc4:	f021 0103 	bic.w	r1, r1, #3
 800cdc8:	f851 3b08 	ldr.w	r3, [r1], #8
 800cdcc:	fa0c f404 	lsl.w	r4, ip, r4
 800cdd0:	ea62 0204 	orn	r2, r2, r4
 800cdd4:	ea63 0304 	orn	r3, r3, r4
 800cdd8:	e7c9      	b.n	800cd6e <strcmp+0x116>
 800cdda:	f010 0403 	ands.w	r4, r0, #3
 800cdde:	d01a      	beq.n	800ce16 <strcmp+0x1be>
 800cde0:	eba1 0104 	sub.w	r1, r1, r4
 800cde4:	f020 0003 	bic.w	r0, r0, #3
 800cde8:	07e4      	lsls	r4, r4, #31
 800cdea:	f850 2b04 	ldr.w	r2, [r0], #4
 800cdee:	d006      	beq.n	800cdfe <strcmp+0x1a6>
 800cdf0:	d20f      	bcs.n	800ce12 <strcmp+0x1ba>
 800cdf2:	788b      	ldrb	r3, [r1, #2]
 800cdf4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800cdf8:	1ae4      	subs	r4, r4, r3
 800cdfa:	d106      	bne.n	800ce0a <strcmp+0x1b2>
 800cdfc:	b12b      	cbz	r3, 800ce0a <strcmp+0x1b2>
 800cdfe:	78cb      	ldrb	r3, [r1, #3]
 800ce00:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800ce04:	1ae4      	subs	r4, r4, r3
 800ce06:	d100      	bne.n	800ce0a <strcmp+0x1b2>
 800ce08:	b91b      	cbnz	r3, 800ce12 <strcmp+0x1ba>
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f85d 4b10 	ldr.w	r4, [sp], #16
 800ce10:	4770      	bx	lr
 800ce12:	f101 0104 	add.w	r1, r1, #4
 800ce16:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce1a:	07cc      	lsls	r4, r1, #31
 800ce1c:	f021 0103 	bic.w	r1, r1, #3
 800ce20:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce24:	d848      	bhi.n	800ceb8 <strcmp+0x260>
 800ce26:	d224      	bcs.n	800ce72 <strcmp+0x21a>
 800ce28:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800ce2c:	fa82 f54c 	uadd8	r5, r2, ip
 800ce30:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800ce34:	faa5 f58c 	sel	r5, r5, ip
 800ce38:	d10a      	bne.n	800ce50 <strcmp+0x1f8>
 800ce3a:	b965      	cbnz	r5, 800ce56 <strcmp+0x1fe>
 800ce3c:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce40:	ea84 0402 	eor.w	r4, r4, r2
 800ce44:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800ce48:	d10e      	bne.n	800ce68 <strcmp+0x210>
 800ce4a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce4e:	e7eb      	b.n	800ce28 <strcmp+0x1d0>
 800ce50:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ce54:	e055      	b.n	800cf02 <strcmp+0x2aa>
 800ce56:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800ce5a:	d14d      	bne.n	800cef8 <strcmp+0x2a0>
 800ce5c:	7808      	ldrb	r0, [r1, #0]
 800ce5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800ce62:	f1c0 0000 	rsb	r0, r0, #0
 800ce66:	4770      	bx	lr
 800ce68:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800ce6c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800ce70:	e047      	b.n	800cf02 <strcmp+0x2aa>
 800ce72:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800ce76:	fa82 f54c 	uadd8	r5, r2, ip
 800ce7a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800ce7e:	faa5 f58c 	sel	r5, r5, ip
 800ce82:	d10a      	bne.n	800ce9a <strcmp+0x242>
 800ce84:	b965      	cbnz	r5, 800cea0 <strcmp+0x248>
 800ce86:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce8a:	ea84 0402 	eor.w	r4, r4, r2
 800ce8e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800ce92:	d10c      	bne.n	800ceae <strcmp+0x256>
 800ce94:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce98:	e7eb      	b.n	800ce72 <strcmp+0x21a>
 800ce9a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ce9e:	e030      	b.n	800cf02 <strcmp+0x2aa>
 800cea0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800cea4:	d128      	bne.n	800cef8 <strcmp+0x2a0>
 800cea6:	880b      	ldrh	r3, [r1, #0]
 800cea8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ceac:	e029      	b.n	800cf02 <strcmp+0x2aa>
 800ceae:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ceb2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800ceb6:	e024      	b.n	800cf02 <strcmp+0x2aa>
 800ceb8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800cebc:	fa82 f54c 	uadd8	r5, r2, ip
 800cec0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800cec4:	faa5 f58c 	sel	r5, r5, ip
 800cec8:	d10a      	bne.n	800cee0 <strcmp+0x288>
 800ceca:	b965      	cbnz	r5, 800cee6 <strcmp+0x28e>
 800cecc:	f851 3b04 	ldr.w	r3, [r1], #4
 800ced0:	ea84 0402 	eor.w	r4, r4, r2
 800ced4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800ced8:	d109      	bne.n	800ceee <strcmp+0x296>
 800ceda:	f850 2b04 	ldr.w	r2, [r0], #4
 800cede:	e7eb      	b.n	800ceb8 <strcmp+0x260>
 800cee0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800cee4:	e00d      	b.n	800cf02 <strcmp+0x2aa>
 800cee6:	f015 0fff 	tst.w	r5, #255	; 0xff
 800ceea:	d105      	bne.n	800cef8 <strcmp+0x2a0>
 800ceec:	680b      	ldr	r3, [r1, #0]
 800ceee:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800cef2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cef6:	e004      	b.n	800cf02 <strcmp+0x2aa>
 800cef8:	f04f 0000 	mov.w	r0, #0
 800cefc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800cf00:	4770      	bx	lr
 800cf02:	ba12      	rev	r2, r2
 800cf04:	ba1b      	rev	r3, r3
 800cf06:	fa82 f44c 	uadd8	r4, r2, ip
 800cf0a:	ea82 0403 	eor.w	r4, r2, r3
 800cf0e:	faa4 f58c 	sel	r5, r4, ip
 800cf12:	fab5 f485 	clz	r4, r5
 800cf16:	fa02 f204 	lsl.w	r2, r2, r4
 800cf1a:	fa03 f304 	lsl.w	r3, r3, r4
 800cf1e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800cf22:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800cf26:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800cf2a:	4770      	bx	lr
 800cf2c:	0000      	movs	r0, r0
	...

0800cf30 <strlen>:
 800cf30:	f890 f000 	pld	[r0]
 800cf34:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 800cf38:	f020 0107 	bic.w	r1, r0, #7
 800cf3c:	f06f 0c00 	mvn.w	ip, #0
 800cf40:	f010 0407 	ands.w	r4, r0, #7
 800cf44:	f891 f020 	pld	[r1, #32]
 800cf48:	f040 8049 	bne.w	800cfde <strlen+0xae>
 800cf4c:	f04f 0400 	mov.w	r4, #0
 800cf50:	f06f 0007 	mvn.w	r0, #7
 800cf54:	e9d1 2300 	ldrd	r2, r3, [r1]
 800cf58:	f891 f040 	pld	[r1, #64]	; 0x40
 800cf5c:	f100 0008 	add.w	r0, r0, #8
 800cf60:	fa82 f24c 	uadd8	r2, r2, ip
 800cf64:	faa4 f28c 	sel	r2, r4, ip
 800cf68:	fa83 f34c 	uadd8	r3, r3, ip
 800cf6c:	faa2 f38c 	sel	r3, r2, ip
 800cf70:	bb4b      	cbnz	r3, 800cfc6 <strlen+0x96>
 800cf72:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800cf76:	fa82 f24c 	uadd8	r2, r2, ip
 800cf7a:	f100 0008 	add.w	r0, r0, #8
 800cf7e:	faa4 f28c 	sel	r2, r4, ip
 800cf82:	fa83 f34c 	uadd8	r3, r3, ip
 800cf86:	faa2 f38c 	sel	r3, r2, ip
 800cf8a:	b9e3      	cbnz	r3, 800cfc6 <strlen+0x96>
 800cf8c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800cf90:	fa82 f24c 	uadd8	r2, r2, ip
 800cf94:	f100 0008 	add.w	r0, r0, #8
 800cf98:	faa4 f28c 	sel	r2, r4, ip
 800cf9c:	fa83 f34c 	uadd8	r3, r3, ip
 800cfa0:	faa2 f38c 	sel	r3, r2, ip
 800cfa4:	b97b      	cbnz	r3, 800cfc6 <strlen+0x96>
 800cfa6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800cfaa:	f101 0120 	add.w	r1, r1, #32
 800cfae:	fa82 f24c 	uadd8	r2, r2, ip
 800cfb2:	f100 0008 	add.w	r0, r0, #8
 800cfb6:	faa4 f28c 	sel	r2, r4, ip
 800cfba:	fa83 f34c 	uadd8	r3, r3, ip
 800cfbe:	faa2 f38c 	sel	r3, r2, ip
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0c6      	beq.n	800cf54 <strlen+0x24>
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	bf04      	itt	eq
 800cfca:	3004      	addeq	r0, #4
 800cfcc:	461a      	moveq	r2, r3
 800cfce:	ba12      	rev	r2, r2
 800cfd0:	fab2 f282 	clz	r2, r2
 800cfd4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 800cfd8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800cfdc:	4770      	bx	lr
 800cfde:	e9d1 2300 	ldrd	r2, r3, [r1]
 800cfe2:	f004 0503 	and.w	r5, r4, #3
 800cfe6:	f1c4 0000 	rsb	r0, r4, #0
 800cfea:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800cfee:	f014 0f04 	tst.w	r4, #4
 800cff2:	f891 f040 	pld	[r1, #64]	; 0x40
 800cff6:	fa0c f505 	lsl.w	r5, ip, r5
 800cffa:	ea62 0205 	orn	r2, r2, r5
 800cffe:	bf1c      	itt	ne
 800d000:	ea63 0305 	ornne	r3, r3, r5
 800d004:	4662      	movne	r2, ip
 800d006:	f04f 0400 	mov.w	r4, #0
 800d00a:	e7a9      	b.n	800cf60 <strlen+0x30>
 800d00c:	0000      	movs	r0, r0
	...

0800d010 <memchr>:
 800d010:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d014:	2a10      	cmp	r2, #16
 800d016:	db2b      	blt.n	800d070 <memchr+0x60>
 800d018:	f010 0f07 	tst.w	r0, #7
 800d01c:	d008      	beq.n	800d030 <memchr+0x20>
 800d01e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d022:	3a01      	subs	r2, #1
 800d024:	428b      	cmp	r3, r1
 800d026:	d02d      	beq.n	800d084 <memchr+0x74>
 800d028:	f010 0f07 	tst.w	r0, #7
 800d02c:	b342      	cbz	r2, 800d080 <memchr+0x70>
 800d02e:	d1f6      	bne.n	800d01e <memchr+0xe>
 800d030:	b4f0      	push	{r4, r5, r6, r7}
 800d032:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800d036:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800d03a:	f022 0407 	bic.w	r4, r2, #7
 800d03e:	f07f 0700 	mvns.w	r7, #0
 800d042:	2300      	movs	r3, #0
 800d044:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800d048:	3c08      	subs	r4, #8
 800d04a:	ea85 0501 	eor.w	r5, r5, r1
 800d04e:	ea86 0601 	eor.w	r6, r6, r1
 800d052:	fa85 f547 	uadd8	r5, r5, r7
 800d056:	faa3 f587 	sel	r5, r3, r7
 800d05a:	fa86 f647 	uadd8	r6, r6, r7
 800d05e:	faa5 f687 	sel	r6, r5, r7
 800d062:	b98e      	cbnz	r6, 800d088 <memchr+0x78>
 800d064:	d1ee      	bne.n	800d044 <memchr+0x34>
 800d066:	bcf0      	pop	{r4, r5, r6, r7}
 800d068:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d06c:	f002 0207 	and.w	r2, r2, #7
 800d070:	b132      	cbz	r2, 800d080 <memchr+0x70>
 800d072:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d076:	3a01      	subs	r2, #1
 800d078:	ea83 0301 	eor.w	r3, r3, r1
 800d07c:	b113      	cbz	r3, 800d084 <memchr+0x74>
 800d07e:	d1f8      	bne.n	800d072 <memchr+0x62>
 800d080:	2000      	movs	r0, #0
 800d082:	4770      	bx	lr
 800d084:	3801      	subs	r0, #1
 800d086:	4770      	bx	lr
 800d088:	2d00      	cmp	r5, #0
 800d08a:	bf06      	itte	eq
 800d08c:	4635      	moveq	r5, r6
 800d08e:	3803      	subeq	r0, #3
 800d090:	3807      	subne	r0, #7
 800d092:	f015 0f01 	tst.w	r5, #1
 800d096:	d107      	bne.n	800d0a8 <memchr+0x98>
 800d098:	3001      	adds	r0, #1
 800d09a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800d09e:	bf02      	ittt	eq
 800d0a0:	3001      	addeq	r0, #1
 800d0a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800d0a6:	3001      	addeq	r0, #1
 800d0a8:	bcf0      	pop	{r4, r5, r6, r7}
 800d0aa:	3801      	subs	r0, #1
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop

0800d0b0 <__aeabi_d2uiz>:
 800d0b0:	004a      	lsls	r2, r1, #1
 800d0b2:	d211      	bcs.n	800d0d8 <__aeabi_d2uiz+0x28>
 800d0b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800d0b8:	d211      	bcs.n	800d0de <__aeabi_d2uiz+0x2e>
 800d0ba:	d50d      	bpl.n	800d0d8 <__aeabi_d2uiz+0x28>
 800d0bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800d0c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800d0c4:	d40e      	bmi.n	800d0e4 <__aeabi_d2uiz+0x34>
 800d0c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d0ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d0d2:	fa23 f002 	lsr.w	r0, r3, r2
 800d0d6:	4770      	bx	lr
 800d0d8:	f04f 0000 	mov.w	r0, #0
 800d0dc:	4770      	bx	lr
 800d0de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800d0e2:	d102      	bne.n	800d0ea <__aeabi_d2uiz+0x3a>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	4770      	bx	lr
 800d0ea:	f04f 0000 	mov.w	r0, #0
 800d0ee:	4770      	bx	lr

0800d0f0 <__aeabi_uldivmod>:
 800d0f0:	b953      	cbnz	r3, 800d108 <__aeabi_uldivmod+0x18>
 800d0f2:	b94a      	cbnz	r2, 800d108 <__aeabi_uldivmod+0x18>
 800d0f4:	2900      	cmp	r1, #0
 800d0f6:	bf08      	it	eq
 800d0f8:	2800      	cmpeq	r0, #0
 800d0fa:	bf1c      	itt	ne
 800d0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800d100:	f04f 30ff 	movne.w	r0, #4294967295
 800d104:	f000 b97c 	b.w	800d400 <__aeabi_idiv0>
 800d108:	f1ad 0c08 	sub.w	ip, sp, #8
 800d10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800d110:	f000 f806 	bl	800d120 <__udivmoddi4>
 800d114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d11c:	b004      	add	sp, #16
 800d11e:	4770      	bx	lr

0800d120 <__udivmoddi4>:
 800d120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d124:	468c      	mov	ip, r1
 800d126:	460d      	mov	r5, r1
 800d128:	4604      	mov	r4, r0
 800d12a:	9e08      	ldr	r6, [sp, #32]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d151      	bne.n	800d1d4 <__udivmoddi4+0xb4>
 800d130:	428a      	cmp	r2, r1
 800d132:	4617      	mov	r7, r2
 800d134:	d96d      	bls.n	800d212 <__udivmoddi4+0xf2>
 800d136:	fab2 fe82 	clz	lr, r2
 800d13a:	f1be 0f00 	cmp.w	lr, #0
 800d13e:	d00b      	beq.n	800d158 <__udivmoddi4+0x38>
 800d140:	f1ce 0c20 	rsb	ip, lr, #32
 800d144:	fa01 f50e 	lsl.w	r5, r1, lr
 800d148:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d14c:	fa02 f70e 	lsl.w	r7, r2, lr
 800d150:	ea4c 0c05 	orr.w	ip, ip, r5
 800d154:	fa00 f40e 	lsl.w	r4, r0, lr
 800d158:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800d15c:	0c25      	lsrs	r5, r4, #16
 800d15e:	fbbc f8fa 	udiv	r8, ip, sl
 800d162:	fa1f f987 	uxth.w	r9, r7
 800d166:	fb0a cc18 	mls	ip, sl, r8, ip
 800d16a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800d16e:	fb08 f309 	mul.w	r3, r8, r9
 800d172:	42ab      	cmp	r3, r5
 800d174:	d90a      	bls.n	800d18c <__udivmoddi4+0x6c>
 800d176:	19ed      	adds	r5, r5, r7
 800d178:	f108 32ff 	add.w	r2, r8, #4294967295
 800d17c:	f080 8123 	bcs.w	800d3c6 <__udivmoddi4+0x2a6>
 800d180:	42ab      	cmp	r3, r5
 800d182:	f240 8120 	bls.w	800d3c6 <__udivmoddi4+0x2a6>
 800d186:	f1a8 0802 	sub.w	r8, r8, #2
 800d18a:	443d      	add	r5, r7
 800d18c:	1aed      	subs	r5, r5, r3
 800d18e:	b2a4      	uxth	r4, r4
 800d190:	fbb5 f0fa 	udiv	r0, r5, sl
 800d194:	fb0a 5510 	mls	r5, sl, r0, r5
 800d198:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d19c:	fb00 f909 	mul.w	r9, r0, r9
 800d1a0:	45a1      	cmp	r9, r4
 800d1a2:	d909      	bls.n	800d1b8 <__udivmoddi4+0x98>
 800d1a4:	19e4      	adds	r4, r4, r7
 800d1a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1aa:	f080 810a 	bcs.w	800d3c2 <__udivmoddi4+0x2a2>
 800d1ae:	45a1      	cmp	r9, r4
 800d1b0:	f240 8107 	bls.w	800d3c2 <__udivmoddi4+0x2a2>
 800d1b4:	3802      	subs	r0, #2
 800d1b6:	443c      	add	r4, r7
 800d1b8:	eba4 0409 	sub.w	r4, r4, r9
 800d1bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	2e00      	cmp	r6, #0
 800d1c4:	d061      	beq.n	800d28a <__udivmoddi4+0x16a>
 800d1c6:	fa24 f40e 	lsr.w	r4, r4, lr
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6034      	str	r4, [r6, #0]
 800d1ce:	6073      	str	r3, [r6, #4]
 800d1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d4:	428b      	cmp	r3, r1
 800d1d6:	d907      	bls.n	800d1e8 <__udivmoddi4+0xc8>
 800d1d8:	2e00      	cmp	r6, #0
 800d1da:	d054      	beq.n	800d286 <__udivmoddi4+0x166>
 800d1dc:	2100      	movs	r1, #0
 800d1de:	e886 0021 	stmia.w	r6, {r0, r5}
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e8:	fab3 f183 	clz	r1, r3
 800d1ec:	2900      	cmp	r1, #0
 800d1ee:	f040 808e 	bne.w	800d30e <__udivmoddi4+0x1ee>
 800d1f2:	42ab      	cmp	r3, r5
 800d1f4:	d302      	bcc.n	800d1fc <__udivmoddi4+0xdc>
 800d1f6:	4282      	cmp	r2, r0
 800d1f8:	f200 80fa 	bhi.w	800d3f0 <__udivmoddi4+0x2d0>
 800d1fc:	1a84      	subs	r4, r0, r2
 800d1fe:	eb65 0503 	sbc.w	r5, r5, r3
 800d202:	2001      	movs	r0, #1
 800d204:	46ac      	mov	ip, r5
 800d206:	2e00      	cmp	r6, #0
 800d208:	d03f      	beq.n	800d28a <__udivmoddi4+0x16a>
 800d20a:	e886 1010 	stmia.w	r6, {r4, ip}
 800d20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d212:	b912      	cbnz	r2, 800d21a <__udivmoddi4+0xfa>
 800d214:	2701      	movs	r7, #1
 800d216:	fbb7 f7f2 	udiv	r7, r7, r2
 800d21a:	fab7 fe87 	clz	lr, r7
 800d21e:	f1be 0f00 	cmp.w	lr, #0
 800d222:	d134      	bne.n	800d28e <__udivmoddi4+0x16e>
 800d224:	1beb      	subs	r3, r5, r7
 800d226:	0c3a      	lsrs	r2, r7, #16
 800d228:	fa1f fc87 	uxth.w	ip, r7
 800d22c:	2101      	movs	r1, #1
 800d22e:	fbb3 f8f2 	udiv	r8, r3, r2
 800d232:	0c25      	lsrs	r5, r4, #16
 800d234:	fb02 3318 	mls	r3, r2, r8, r3
 800d238:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800d23c:	fb0c f308 	mul.w	r3, ip, r8
 800d240:	42ab      	cmp	r3, r5
 800d242:	d907      	bls.n	800d254 <__udivmoddi4+0x134>
 800d244:	19ed      	adds	r5, r5, r7
 800d246:	f108 30ff 	add.w	r0, r8, #4294967295
 800d24a:	d202      	bcs.n	800d252 <__udivmoddi4+0x132>
 800d24c:	42ab      	cmp	r3, r5
 800d24e:	f200 80d1 	bhi.w	800d3f4 <__udivmoddi4+0x2d4>
 800d252:	4680      	mov	r8, r0
 800d254:	1aed      	subs	r5, r5, r3
 800d256:	b2a3      	uxth	r3, r4
 800d258:	fbb5 f0f2 	udiv	r0, r5, r2
 800d25c:	fb02 5510 	mls	r5, r2, r0, r5
 800d260:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800d264:	fb0c fc00 	mul.w	ip, ip, r0
 800d268:	45a4      	cmp	ip, r4
 800d26a:	d907      	bls.n	800d27c <__udivmoddi4+0x15c>
 800d26c:	19e4      	adds	r4, r4, r7
 800d26e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d272:	d202      	bcs.n	800d27a <__udivmoddi4+0x15a>
 800d274:	45a4      	cmp	ip, r4
 800d276:	f200 80b8 	bhi.w	800d3ea <__udivmoddi4+0x2ca>
 800d27a:	4618      	mov	r0, r3
 800d27c:	eba4 040c 	sub.w	r4, r4, ip
 800d280:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800d284:	e79d      	b.n	800d1c2 <__udivmoddi4+0xa2>
 800d286:	4631      	mov	r1, r6
 800d288:	4630      	mov	r0, r6
 800d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28e:	f1ce 0420 	rsb	r4, lr, #32
 800d292:	fa05 f30e 	lsl.w	r3, r5, lr
 800d296:	fa07 f70e 	lsl.w	r7, r7, lr
 800d29a:	fa20 f804 	lsr.w	r8, r0, r4
 800d29e:	0c3a      	lsrs	r2, r7, #16
 800d2a0:	fa25 f404 	lsr.w	r4, r5, r4
 800d2a4:	ea48 0803 	orr.w	r8, r8, r3
 800d2a8:	fbb4 f1f2 	udiv	r1, r4, r2
 800d2ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800d2b0:	fb02 4411 	mls	r4, r2, r1, r4
 800d2b4:	fa1f fc87 	uxth.w	ip, r7
 800d2b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800d2bc:	fb01 f30c 	mul.w	r3, r1, ip
 800d2c0:	42ab      	cmp	r3, r5
 800d2c2:	fa00 f40e 	lsl.w	r4, r0, lr
 800d2c6:	d909      	bls.n	800d2dc <__udivmoddi4+0x1bc>
 800d2c8:	19ed      	adds	r5, r5, r7
 800d2ca:	f101 30ff 	add.w	r0, r1, #4294967295
 800d2ce:	f080 808a 	bcs.w	800d3e6 <__udivmoddi4+0x2c6>
 800d2d2:	42ab      	cmp	r3, r5
 800d2d4:	f240 8087 	bls.w	800d3e6 <__udivmoddi4+0x2c6>
 800d2d8:	3902      	subs	r1, #2
 800d2da:	443d      	add	r5, r7
 800d2dc:	1aeb      	subs	r3, r5, r3
 800d2de:	fa1f f588 	uxth.w	r5, r8
 800d2e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2e6:	fb02 3310 	mls	r3, r2, r0, r3
 800d2ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800d2ee:	fb00 f30c 	mul.w	r3, r0, ip
 800d2f2:	42ab      	cmp	r3, r5
 800d2f4:	d907      	bls.n	800d306 <__udivmoddi4+0x1e6>
 800d2f6:	19ed      	adds	r5, r5, r7
 800d2f8:	f100 38ff 	add.w	r8, r0, #4294967295
 800d2fc:	d26f      	bcs.n	800d3de <__udivmoddi4+0x2be>
 800d2fe:	42ab      	cmp	r3, r5
 800d300:	d96d      	bls.n	800d3de <__udivmoddi4+0x2be>
 800d302:	3802      	subs	r0, #2
 800d304:	443d      	add	r5, r7
 800d306:	1aeb      	subs	r3, r5, r3
 800d308:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800d30c:	e78f      	b.n	800d22e <__udivmoddi4+0x10e>
 800d30e:	f1c1 0720 	rsb	r7, r1, #32
 800d312:	fa22 f807 	lsr.w	r8, r2, r7
 800d316:	408b      	lsls	r3, r1
 800d318:	fa05 f401 	lsl.w	r4, r5, r1
 800d31c:	ea48 0303 	orr.w	r3, r8, r3
 800d320:	fa20 fe07 	lsr.w	lr, r0, r7
 800d324:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800d328:	40fd      	lsrs	r5, r7
 800d32a:	ea4e 0e04 	orr.w	lr, lr, r4
 800d32e:	fbb5 f9fc 	udiv	r9, r5, ip
 800d332:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800d336:	fb0c 5519 	mls	r5, ip, r9, r5
 800d33a:	fa1f f883 	uxth.w	r8, r3
 800d33e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800d342:	fb09 f408 	mul.w	r4, r9, r8
 800d346:	42ac      	cmp	r4, r5
 800d348:	fa02 f201 	lsl.w	r2, r2, r1
 800d34c:	fa00 fa01 	lsl.w	sl, r0, r1
 800d350:	d908      	bls.n	800d364 <__udivmoddi4+0x244>
 800d352:	18ed      	adds	r5, r5, r3
 800d354:	f109 30ff 	add.w	r0, r9, #4294967295
 800d358:	d243      	bcs.n	800d3e2 <__udivmoddi4+0x2c2>
 800d35a:	42ac      	cmp	r4, r5
 800d35c:	d941      	bls.n	800d3e2 <__udivmoddi4+0x2c2>
 800d35e:	f1a9 0902 	sub.w	r9, r9, #2
 800d362:	441d      	add	r5, r3
 800d364:	1b2d      	subs	r5, r5, r4
 800d366:	fa1f fe8e 	uxth.w	lr, lr
 800d36a:	fbb5 f0fc 	udiv	r0, r5, ip
 800d36e:	fb0c 5510 	mls	r5, ip, r0, r5
 800d372:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800d376:	fb00 f808 	mul.w	r8, r0, r8
 800d37a:	45a0      	cmp	r8, r4
 800d37c:	d907      	bls.n	800d38e <__udivmoddi4+0x26e>
 800d37e:	18e4      	adds	r4, r4, r3
 800d380:	f100 35ff 	add.w	r5, r0, #4294967295
 800d384:	d229      	bcs.n	800d3da <__udivmoddi4+0x2ba>
 800d386:	45a0      	cmp	r8, r4
 800d388:	d927      	bls.n	800d3da <__udivmoddi4+0x2ba>
 800d38a:	3802      	subs	r0, #2
 800d38c:	441c      	add	r4, r3
 800d38e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800d392:	eba4 0408 	sub.w	r4, r4, r8
 800d396:	fba0 8902 	umull	r8, r9, r0, r2
 800d39a:	454c      	cmp	r4, r9
 800d39c:	46c6      	mov	lr, r8
 800d39e:	464d      	mov	r5, r9
 800d3a0:	d315      	bcc.n	800d3ce <__udivmoddi4+0x2ae>
 800d3a2:	d012      	beq.n	800d3ca <__udivmoddi4+0x2aa>
 800d3a4:	b156      	cbz	r6, 800d3bc <__udivmoddi4+0x29c>
 800d3a6:	ebba 030e 	subs.w	r3, sl, lr
 800d3aa:	eb64 0405 	sbc.w	r4, r4, r5
 800d3ae:	fa04 f707 	lsl.w	r7, r4, r7
 800d3b2:	40cb      	lsrs	r3, r1
 800d3b4:	431f      	orrs	r7, r3
 800d3b6:	40cc      	lsrs	r4, r1
 800d3b8:	6037      	str	r7, [r6, #0]
 800d3ba:	6074      	str	r4, [r6, #4]
 800d3bc:	2100      	movs	r1, #0
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	e6f8      	b.n	800d1b8 <__udivmoddi4+0x98>
 800d3c6:	4690      	mov	r8, r2
 800d3c8:	e6e0      	b.n	800d18c <__udivmoddi4+0x6c>
 800d3ca:	45c2      	cmp	sl, r8
 800d3cc:	d2ea      	bcs.n	800d3a4 <__udivmoddi4+0x284>
 800d3ce:	ebb8 0e02 	subs.w	lr, r8, r2
 800d3d2:	eb69 0503 	sbc.w	r5, r9, r3
 800d3d6:	3801      	subs	r0, #1
 800d3d8:	e7e4      	b.n	800d3a4 <__udivmoddi4+0x284>
 800d3da:	4628      	mov	r0, r5
 800d3dc:	e7d7      	b.n	800d38e <__udivmoddi4+0x26e>
 800d3de:	4640      	mov	r0, r8
 800d3e0:	e791      	b.n	800d306 <__udivmoddi4+0x1e6>
 800d3e2:	4681      	mov	r9, r0
 800d3e4:	e7be      	b.n	800d364 <__udivmoddi4+0x244>
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	e778      	b.n	800d2dc <__udivmoddi4+0x1bc>
 800d3ea:	3802      	subs	r0, #2
 800d3ec:	443c      	add	r4, r7
 800d3ee:	e745      	b.n	800d27c <__udivmoddi4+0x15c>
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	e708      	b.n	800d206 <__udivmoddi4+0xe6>
 800d3f4:	f1a8 0802 	sub.w	r8, r8, #2
 800d3f8:	443d      	add	r5, r7
 800d3fa:	e72b      	b.n	800d254 <__udivmoddi4+0x134>
 800d3fc:	0000      	movs	r0, r0
	...

0800d400 <__aeabi_idiv0>:
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
	...

0800d410 <__core_init>:
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
	...

0800d420 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
	...

0800d430 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800d430:	e7fe      	b.n	800d430 <__default_exit>
 800d432:	bf00      	nop
	...

0800d440 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800d440:	e7fe      	b.n	800d440 <_unhandled_exception>
 800d442:	bf00      	nop
	...

0800d450 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800d450:	e7fe      	b.n	800d450 <_idle_thread>
 800d452:	bf00      	nop
	...

0800d460 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800d460:	4b20      	ldr	r3, [pc, #128]	; (800d4e4 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800d462:	4a21      	ldr	r2, [pc, #132]	; (800d4e8 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800d464:	4821      	ldr	r0, [pc, #132]	; (800d4ec <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800d466:	b5f0      	push	{r4, r5, r6, r7, lr}
  SCB->VTOR = CORTEX_VTOR_INIT;
 800d468:	2400      	movs	r4, #0
 800d46a:	609c      	str	r4, [r3, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d46c:	68d9      	ldr	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800d46e:	4e20      	ldr	r6, [pc, #128]	; (800d4f0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800d470:	4d20      	ldr	r5, [pc, #128]	; (800d4f4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800d472:	f64f 07ff 	movw	r7, #63743	; 0xf8ff
 800d476:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 800d478:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800d47a:	60da      	str	r2, [r3, #12]
 800d47c:	68f2      	ldr	r2, [r6, #12]
 800d47e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d482:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800d484:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800d486:	2120      	movs	r1, #32
 800d488:	f042 0201 	orr.w	r2, r2, #1
 800d48c:	2610      	movs	r6, #16
 800d48e:	6002      	str	r2, [r0, #0]
void chSysInit(void) {
 800d490:	b083      	sub	sp, #12
 800d492:	77de      	strb	r6, [r3, #31]
 800d494:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
  _scheduler_init();
 800d498:	f000 f902 	bl	800d6a0 <_scheduler_init>
  _vt_init();
 800d49c:	f000 f880 	bl	800d5a0 <_vt_init>
  _tm_init();
 800d4a0:	f000 fb66 	bl	800db70 <_tm_init>
  _core_init();
 800d4a4:	f000 fe64 	bl	800e170 <_core_init>
  _heap_init();
 800d4a8:	f000 feaa 	bl	800e200 <_heap_init>
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	2140      	movs	r1, #64	; 0x40
 800d4b0:	f000 fa06 	bl	800d8c0 <_thread_init>
 800d4b4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800d4b8:	2201      	movs	r2, #1
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800d4ba:	6198      	str	r0, [r3, #24]
  currp->p_state = CH_STATE_CURRENT;
 800d4bc:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d4be:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800d4c2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	490c      	ldr	r1, [pc, #48]	; (800d4f8 <chSysInit+0x98>)
 800d4c8:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800d4ca:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800d4ce:	9400      	str	r4, [sp, #0]
 800d4d0:	4b0a      	ldr	r3, [pc, #40]	; (800d4fc <chSysInit+0x9c>)
 800d4d2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800d4d6:	f000 fa4b 	bl	800d970 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800d4da:	4b09      	ldr	r3, [pc, #36]	; (800d500 <chSysInit+0xa0>)
 800d4dc:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800d4de:	b003      	add	sp, #12
 800d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	e000ed00 	.word	0xe000ed00
 800d4e8:	05fa0300 	.word	0x05fa0300
 800d4ec:	e0001000 	.word	0xe0001000
 800d4f0:	e000edf0 	.word	0xe000edf0
 800d4f4:	20001a70 	.word	0x20001a70
 800d4f8:	0802ea10 	.word	0x0802ea10
 800d4fc:	0800d451 	.word	0x0800d451
 800d500:	0802ea00 	.word	0x0802ea00
	...

0800d510 <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 800d510:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800d512:	4b01      	ldr	r3, [pc, #4]	; (800d518 <chSysHalt+0x8>)
 800d514:	62d8      	str	r0, [r3, #44]	; 0x2c
 800d516:	e7fe      	b.n	800d516 <chSysHalt+0x6>
 800d518:	20001a40 	.word	0x20001a40
 800d51c:	00000000 	.word	0x00000000

0800d520 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800d522:	4d13      	ldr	r5, [pc, #76]	; (800d570 <chSysTimerHandlerI+0x50>)
 800d524:	69aa      	ldr	r2, [r5, #24]
 800d526:	7fd3      	ldrb	r3, [r2, #31]
 800d528:	b10b      	cbz	r3, 800d52e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800d52a:	3b01      	subs	r3, #1
 800d52c:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800d52e:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800d530:	69eb      	ldr	r3, [r5, #28]
 800d532:	4e10      	ldr	r6, [pc, #64]	; (800d574 <chSysTimerHandlerI+0x54>)
 800d534:	3101      	adds	r1, #1
 800d536:	6211      	str	r1, [r2, #32]
  ch.vtlist.vt_systime++;
 800d538:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800d53a:	42b3      	cmp	r3, r6
  ch.vtlist.vt_systime++;
 800d53c:	f102 0201 	add.w	r2, r2, #1
 800d540:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800d542:	d013      	beq.n	800d56c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800d544:	689c      	ldr	r4, [r3, #8]
 800d546:	3c01      	subs	r4, #1
 800d548:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800d54a:	b97c      	cbnz	r4, 800d56c <chSysTimerHandlerI+0x4c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d54c:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800d54e:	681a      	ldr	r2, [r3, #0]
      fn = vtp->vt_func;
 800d550:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800d552:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800d554:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800d556:	61ea      	str	r2, [r5, #28]
 800d558:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800d55c:	6918      	ldr	r0, [r3, #16]
 800d55e:	4788      	blx	r1
 800d560:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800d564:	69eb      	ldr	r3, [r5, #28]
 800d566:	689a      	ldr	r2, [r3, #8]
 800d568:	2a00      	cmp	r2, #0
 800d56a:	d0f0      	beq.n	800d54e <chSysTimerHandlerI+0x2e>
 800d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56e:	bf00      	nop
 800d570:	20001a40 	.word	0x20001a40
 800d574:	20001a5c 	.word	0x20001a5c
	...

0800d580 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800d580:	4a03      	ldr	r2, [pc, #12]	; (800d590 <chSysPolledDelayX+0x10>)
 800d582:	6851      	ldr	r1, [r2, #4]
 800d584:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 800d586:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800d588:	4298      	cmp	r0, r3
 800d58a:	d8fb      	bhi.n	800d584 <chSysPolledDelayX+0x4>
  }
}
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	e0001000 	.word	0xe0001000
	...

0800d5a0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800d5a0:	4b05      	ldr	r3, [pc, #20]	; (800d5b8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800d5a6:	f103 021c 	add.w	r2, r3, #28
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800d5aa:	2100      	movs	r1, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 800d5ac:	6258      	str	r0, [r3, #36]	; 0x24
  ch.vtlist.vt_systime = (systime_t)0;
 800d5ae:	6299      	str	r1, [r3, #40]	; 0x28
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800d5b0:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800d5b2:	621a      	str	r2, [r3, #32]
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	20001a40 	.word	0x20001a40
 800d5bc:	00000000 	.word	0x00000000

0800d5c0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800d5c0:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800d5c2:	4e0d      	ldr	r6, [pc, #52]	; (800d5f8 <chVTDoSetI+0x38>)
 800d5c4:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800d5c6:	68a5      	ldr	r5, [r4, #8]
  vtp->vt_par = par;
 800d5c8:	6103      	str	r3, [r0, #16]
  while (p->vt_delta < delta) {
 800d5ca:	42a9      	cmp	r1, r5
  vtp->vt_func = vtfunc;
 800d5cc:	60c2      	str	r2, [r0, #12]
  while (p->vt_delta < delta) {
 800d5ce:	d904      	bls.n	800d5da <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800d5d0:	6824      	ldr	r4, [r4, #0]
    delta -= p->vt_delta;
 800d5d2:	1b49      	subs	r1, r1, r5
  while (p->vt_delta < delta) {
 800d5d4:	68a5      	ldr	r5, [r4, #8]
 800d5d6:	428d      	cmp	r5, r1
 800d5d8:	d3fa      	bcc.n	800d5d0 <chVTDoSetI+0x10>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800d5da:	6863      	ldr	r3, [r4, #4]
 800d5dc:	6043      	str	r3, [r0, #4]
  vtp->vt_next = p;
 800d5de:	6004      	str	r4, [r0, #0]
  vtp->vt_prev->vt_next = vtp;
 800d5e0:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800d5e2:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800d5e4:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800d5e6:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_delta -= delta;
 800d5ec:	1a59      	subs	r1, r3, r1
 800d5ee:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800d5f0:	6272      	str	r2, [r6, #36]	; 0x24
}
 800d5f2:	bc70      	pop	{r4, r5, r6}
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	20001a40 	.word	0x20001a40
 800d5fc:	00000000 	.word	0x00000000

0800d600 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d600:	6803      	ldr	r3, [r0, #0]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800d602:	6841      	ldr	r1, [r0, #4]
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d604:	689a      	ldr	r2, [r3, #8]
void chVTDoResetI(virtual_timer_t *vtp) {
 800d606:	b430      	push	{r4, r5}
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d608:	6885      	ldr	r5, [r0, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800d60a:	4c06      	ldr	r4, [pc, #24]	; (800d624 <chVTDoResetI+0x24>)
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d60c:	442a      	add	r2, r5
 800d60e:	609a      	str	r2, [r3, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 800d610:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800d612:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800d614:	2200      	movs	r2, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 800d616:	f04f 33ff 	mov.w	r3, #4294967295
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800d61a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800d61c:	60c2      	str	r2, [r0, #12]
  ch.vtlist.vt_delta = (systime_t)-1;
 800d61e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800d620:	bc30      	pop	{r4, r5}
 800d622:	4770      	bx	lr
 800d624:	20001a40 	.word	0x20001a40
	...

0800d630 <wakeup>:
 800d630:	2320      	movs	r3, #32
 800d632:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800d636:	7f03      	ldrb	r3, [r0, #28]
 800d638:	2b07      	cmp	r3, #7
 800d63a:	d80e      	bhi.n	800d65a <wakeup+0x2a>
 800d63c:	e8df f003 	tbb	[pc, r3]
 800d640:	240d0d28 	.word	0x240d0d28
 800d644:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800d648:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800d64a:	6893      	ldr	r3, [r2, #8]
 800d64c:	3301      	adds	r3, #1
 800d64e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800d650:	e890 000c 	ldmia.w	r0, {r2, r3}
 800d654:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800d656:	6802      	ldr	r2, [r0, #0]
 800d658:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800d65a:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 800d65c:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800d65e:	f04f 34ff 	mov.w	r4, #4294967295
 800d662:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d664:	4b0c      	ldr	r3, [pc, #48]	; (800d698 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800d666:	6244      	str	r4, [r0, #36]	; 0x24
  tp->p_state = CH_STATE_READY;
 800d668:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800d66a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d66c:	689a      	ldr	r2, [r3, #8]
 800d66e:	428a      	cmp	r2, r1
 800d670:	d2fb      	bcs.n	800d66a <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	6042      	str	r2, [r0, #4]
  tp->p_next = cp;
 800d676:	6003      	str	r3, [r0, #0]
 800d678:	2100      	movs	r1, #0
  tp->p_prev->p_next = tp;
 800d67a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800d67c:	6058      	str	r0, [r3, #4]
 800d67e:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800d682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d686:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 800d688:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]
    break;
 800d68e:	e7e4      	b.n	800d65a <wakeup+0x2a>
 800d690:	2300      	movs	r3, #0
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	4770      	bx	lr
 800d698:	20001a40 	.word	0x20001a40
 800d69c:	00000000 	.word	0x00000000

0800d6a0 <_scheduler_init>:
  tqp->p_next = (thread_t *)tqp;
 800d6a0:	4b03      	ldr	r3, [pc, #12]	; (800d6b0 <_scheduler_init+0x10>)
  ch.rlist.r_prio = NOPRIO;
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d6a6:	605b      	str	r3, [r3, #4]
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800d6a8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800d6aa:	615b      	str	r3, [r3, #20]
  ch.rlist.r_prio = NOPRIO;
 800d6ac:	609a      	str	r2, [r3, #8]
 800d6ae:	4770      	bx	lr
 800d6b0:	20001a40 	.word	0x20001a40
	...

0800d6c0 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d6c4:	4b08      	ldr	r3, [pc, #32]	; (800d6e8 <chSchReadyI+0x28>)
thread_t *chSchReadyI(thread_t *tp) {
 800d6c6:	b410      	push	{r4}
 800d6c8:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 800d6ca:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800d6cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d6ce:	689a      	ldr	r2, [r3, #8]
 800d6d0:	428a      	cmp	r2, r1
 800d6d2:	d2fb      	bcs.n	800d6cc <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 800d6d8:	6023      	str	r3, [r4, #0]
}
 800d6da:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 800d6dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d6de:	605c      	str	r4, [r3, #4]
}
 800d6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	20001a40 	.word	0x20001a40
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <chSchGoSleepS>:
  otp = currp;
 800d6f0:	4b08      	ldr	r3, [pc, #32]	; (800d714 <chSchGoSleepS+0x24>)
 800d6f2:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 800d6f4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 800d6f6:	b410      	push	{r4}
  otp->p_state = newstate;
 800d6f8:	7708      	strb	r0, [r1, #28]
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d6fa:	2004      	movs	r0, #4
 800d6fc:	77c8      	strb	r0, [r1, #31]
  tqp->p_next = tp->p_next;
 800d6fe:	6810      	ldr	r0, [r2, #0]
 800d700:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 800d702:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d704:	6043      	str	r3, [r0, #4]
 800d706:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800d708:	4610      	mov	r0, r2
}
 800d70a:	f85d 4b04 	ldr.w	r4, [sp], #4
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d70e:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800d710:	f7fe bcfe 	b.w	800c110 <_port_switch>
 800d714:	20001a40 	.word	0x20001a40
	...

0800d720 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800d720:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800d722:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800d724:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800d726:	d012      	beq.n	800d74e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800d728:	4c0c      	ldr	r4, [pc, #48]	; (800d75c <chSchGoSleepTimeoutS+0x3c>)
 800d72a:	4a0d      	ldr	r2, [pc, #52]	; (800d760 <chSchGoSleepTimeoutS+0x40>)
 800d72c:	69a3      	ldr	r3, [r4, #24]
 800d72e:	4605      	mov	r5, r0
 800d730:	a801      	add	r0, sp, #4
 800d732:	f7ff ff45 	bl	800d5c0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800d736:	4628      	mov	r0, r5
 800d738:	f7ff ffda 	bl	800d6f0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800d73c:	9b04      	ldr	r3, [sp, #16]
 800d73e:	b113      	cbz	r3, 800d746 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800d740:	a801      	add	r0, sp, #4
 800d742:	f7ff ff5d 	bl	800d600 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800d746:	69a3      	ldr	r3, [r4, #24]
}
 800d748:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d74a:	b007      	add	sp, #28
 800d74c:	bd30      	pop	{r4, r5, pc}
 800d74e:	4c03      	ldr	r4, [pc, #12]	; (800d75c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 800d750:	f7ff ffce 	bl	800d6f0 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 800d754:	69a3      	ldr	r3, [r4, #24]
}
 800d756:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d758:	b007      	add	sp, #28
 800d75a:	bd30      	pop	{r4, r5, pc}
 800d75c:	20001a40 	.word	0x20001a40
 800d760:	0800d631 	.word	0x0800d631
	...

0800d770 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d770:	4b14      	ldr	r3, [pc, #80]	; (800d7c4 <chSchWakeupS+0x54>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800d772:	b470      	push	{r4, r5, r6}
 800d774:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 800d776:	699d      	ldr	r5, [r3, #24]
  ntp->p_u.rdymsg = msg;
 800d778:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->p_prio <= currp->p_prio) {
 800d77a:	68a8      	ldr	r0, [r5, #8]
 800d77c:	68a1      	ldr	r1, [r4, #8]
 800d77e:	4281      	cmp	r1, r0
  tp->p_state = CH_STATE_READY;
 800d780:	f04f 0200 	mov.w	r2, #0
  if (ntp->p_prio <= currp->p_prio) {
 800d784:	d80b      	bhi.n	800d79e <chSchWakeupS+0x2e>
  tp->p_state = CH_STATE_READY;
 800d786:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 800d788:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d78a:	689a      	ldr	r2, [r3, #8]
 800d78c:	4291      	cmp	r1, r2
 800d78e:	d9fb      	bls.n	800d788 <chSchWakeupS+0x18>
  tp->p_prev = cp->p_prev;
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 800d794:	6023      	str	r3, [r4, #0]
  tp->p_prev->p_next = tp;
 800d796:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d798:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800d79a:	bc70      	pop	{r4, r5, r6}
 800d79c:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 800d79e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d7a0:	461a      	mov	r2, r3
    cp = cp->p_next;
 800d7a2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d7a4:	6891      	ldr	r1, [r2, #8]
 800d7a6:	4288      	cmp	r0, r1
 800d7a8:	d9fb      	bls.n	800d7a2 <chSchWakeupS+0x32>
  tp->p_prev = cp->p_prev;
 800d7aa:	6850      	ldr	r0, [r2, #4]
 800d7ac:	6068      	str	r0, [r5, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800d7ae:	2601      	movs	r6, #1
  tp->p_next = cp;
 800d7b0:	602a      	str	r2, [r5, #0]
  tp->p_prev->p_next = tp;
 800d7b2:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 800d7b4:	6055      	str	r5, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800d7b6:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4620      	mov	r0, r4
    setcurrp(ntp);
 800d7bc:	619c      	str	r4, [r3, #24]
}
 800d7be:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 800d7c0:	f7fe bca6 	b.w	800c110 <_port_switch>
 800d7c4:	20001a40 	.word	0x20001a40
	...

0800d7d0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d7d0:	4a08      	ldr	r2, [pc, #32]	; (800d7f4 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800d7d2:	6993      	ldr	r3, [r2, #24]
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d7d4:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d7d6:	7fda      	ldrb	r2, [r3, #31]
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d7d8:	6888      	ldr	r0, [r1, #8]
  tprio_t p2 = currp->p_prio;
 800d7da:	689b      	ldr	r3, [r3, #8]
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d7dc:	b922      	cbnz	r2, 800d7e8 <chSchIsPreemptionRequired+0x18>
 800d7de:	4298      	cmp	r0, r3
 800d7e0:	bf34      	ite	cc
 800d7e2:	2000      	movcc	r0, #0
 800d7e4:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800d7e6:	4770      	bx	lr
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d7e8:	4298      	cmp	r0, r3
 800d7ea:	bf94      	ite	ls
 800d7ec:	2000      	movls	r0, #0
 800d7ee:	2001      	movhi	r0, #1
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20001a40 	.word	0x20001a40
	...

0800d800 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800d800:	4a0e      	ldr	r2, [pc, #56]	; (800d83c <chSchDoRescheduleBehind+0x3c>)
  thread_t *tp = tqp->p_next;
 800d802:	6810      	ldr	r0, [r2, #0]
void chSchDoRescheduleBehind(void) {
 800d804:	b4f0      	push	{r4, r5, r6, r7}
  tqp->p_next = tp->p_next;
 800d806:	6803      	ldr	r3, [r0, #0]
  otp = currp;
 800d808:	6994      	ldr	r4, [r2, #24]
 800d80a:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d80c:	2701      	movs	r7, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d80e:	2604      	movs	r6, #4
  tp->p_state = CH_STATE_READY;
 800d810:	2500      	movs	r5, #0
  if (otp->p_prio == IDLEPRIO) {
 800d812:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d814:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 800d816:	7707      	strb	r7, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d818:	6190      	str	r0, [r2, #24]
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d81a:	77e6      	strb	r6, [r4, #31]
  tp->p_state = CH_STATE_READY;
 800d81c:	7725      	strb	r5, [r4, #28]
 800d81e:	e000      	b.n	800d822 <chSchDoRescheduleBehind+0x22>
 800d820:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d822:	689a      	ldr	r2, [r3, #8]
 800d824:	4291      	cmp	r1, r2
 800d826:	d9fb      	bls.n	800d820 <chSchDoRescheduleBehind+0x20>
  tp->p_prev = cp->p_prev;
 800d828:	685a      	ldr	r2, [r3, #4]
 800d82a:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 800d82c:	6023      	str	r3, [r4, #0]
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800d82e:	4621      	mov	r1, r4
  tp->p_prev->p_next = tp;
 800d830:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d832:	605c      	str	r4, [r3, #4]
}
 800d834:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(currp, otp);
 800d836:	f7fe bc6b 	b.w	800c110 <_port_switch>
 800d83a:	bf00      	nop
 800d83c:	20001a40 	.word	0x20001a40

0800d840 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800d840:	4a0d      	ldr	r2, [pc, #52]	; (800d878 <chSchDoRescheduleAhead+0x38>)
  thread_t *tp = tqp->p_next;
 800d842:	6810      	ldr	r0, [r2, #0]
void chSchDoRescheduleAhead(void) {
 800d844:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 800d846:	6803      	ldr	r3, [r0, #0]
  otp = currp;
 800d848:	6994      	ldr	r4, [r2, #24]
 800d84a:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d84c:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 800d84e:	2500      	movs	r5, #0
  if (otp->p_prio == IDLEPRIO) {
 800d850:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d852:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 800d854:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d856:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 800d858:	7725      	strb	r5, [r4, #28]
 800d85a:	e000      	b.n	800d85e <chSchDoRescheduleAhead+0x1e>
 800d85c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	4291      	cmp	r1, r2
 800d862:	d3fb      	bcc.n	800d85c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	6062      	str	r2, [r4, #4]
  otp->p_next = cp;
 800d868:	6023      	str	r3, [r4, #0]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800d86a:	4621      	mov	r1, r4
  otp->p_prev->p_next = otp;
 800d86c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800d86e:	605c      	str	r4, [r3, #4]
}
 800d870:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 800d872:	f7fe bc4d 	b.w	800c110 <_port_switch>
 800d876:	bf00      	nop
 800d878:	20001a40 	.word	0x20001a40
 800d87c:	00000000 	.word	0x00000000

0800d880 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800d880:	4b04      	ldr	r3, [pc, #16]	; (800d894 <chSchRescheduleS+0x14>)
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 800d886:	6892      	ldr	r2, [r2, #8]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d800      	bhi.n	800d890 <chSchRescheduleS+0x10>
 800d88e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800d890:	f7ff bfd6 	b.w	800d840 <chSchDoRescheduleAhead>
 800d894:	20001a40 	.word	0x20001a40
	...

0800d8a0 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800d8a0:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <chSchDoReschedule+0x10>)
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	7fdb      	ldrb	r3, [r3, #31]
 800d8a6:	b10b      	cbz	r3, 800d8ac <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800d8a8:	f7ff bfca 	b.w	800d840 <chSchDoRescheduleAhead>
    chSchDoRescheduleBehind();
 800d8ac:	f7ff bfa8 	b.w	800d800 <chSchDoRescheduleBehind>
 800d8b0:	20001a40 	.word	0x20001a40
	...

0800d8c0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800d8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d8c2:	4c0f      	ldr	r4, [pc, #60]	; (800d900 <_thread_init+0x40>)
  tp->p_realprio = prio;
 800d8c4:	6401      	str	r1, [r0, #64]	; 0x40
  REG_INSERT(tp);
 800d8c6:	6965      	ldr	r5, [r4, #20]
  tp->p_prio = prio;
 800d8c8:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800d8ca:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d8cc:	2200      	movs	r2, #0
  tp->p_state = CH_STATE_WTSTART;
 800d8ce:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d8d0:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d8d4:	f04f 0e04 	mov.w	lr, #4
  tp->p_refs = (trefs_t)1;
 800d8d8:	2701      	movs	r7, #1
  list_init(&tp->p_waiting);
 800d8da:	f100 0628 	add.w	r6, r0, #40	; 0x28
  REG_INSERT(tp);
 800d8de:	6145      	str	r5, [r0, #20]
 800d8e0:	6104      	str	r4, [r0, #16]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d8e2:	f880 e01f 	strb.w	lr, [r0, #31]
  tp->p_refs = (trefs_t)1;
 800d8e6:	7787      	strb	r7, [r0, #30]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d8e8:	7742      	strb	r2, [r0, #29]
  tp->p_mtxlist = NULL;
 800d8ea:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->p_epending = (eventmask_t)0;
 800d8ec:	6382      	str	r2, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d8ee:	6202      	str	r2, [r0, #32]
  tp->p_name = NULL;
 800d8f0:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800d8f2:	6128      	str	r0, [r5, #16]
 800d8f4:	6160      	str	r0, [r4, #20]
  tlp->p_next = (thread_t *)tlp;
 800d8f6:	6286      	str	r6, [r0, #40]	; 0x28
  tqp->p_next = (thread_t *)tqp;
 800d8f8:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d8fa:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20001a40 	.word	0x20001a40
	...

0800d910 <chThdCreateI>:

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d910:	3964      	subs	r1, #100	; 0x64
                       tprio_t prio, tfunc_t pf, void *arg) {
 800d912:	b5f0      	push	{r4, r5, r6, r7, lr}
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d914:	4401      	add	r1, r0
  REG_INSERT(tp);
 800d916:	4e12      	ldr	r6, [pc, #72]	; (800d960 <chThdCreateI+0x50>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d918:	4d12      	ldr	r5, [pc, #72]	; (800d964 <chThdCreateI+0x54>)
  REG_INSERT(tp);
 800d91a:	6977      	ldr	r7, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d91c:	60c1      	str	r1, [r0, #12]
 800d91e:	640b      	str	r3, [r1, #64]	; 0x40
 800d920:	9b05      	ldr	r3, [sp, #20]
 800d922:	644b      	str	r3, [r1, #68]	; 0x44
  tp->p_state = CH_STATE_WTSTART;
 800d924:	2302      	movs	r3, #2
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d926:	660d      	str	r5, [r1, #96]	; 0x60
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d928:	f04f 0e04 	mov.w	lr, #4
  tp->p_prio = prio;
 800d92c:	6082      	str	r2, [r0, #8]
  tp->p_realprio = prio;
 800d92e:	6402      	str	r2, [r0, #64]	; 0x40
  tp->p_state = CH_STATE_WTSTART;
 800d930:	7703      	strb	r3, [r0, #28]
  queue_init(&tp->p_msgqueue);
 800d932:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d936:	2300      	movs	r3, #0
  tp->p_refs = (trefs_t)1;
 800d938:	2501      	movs	r5, #1
  list_init(&tp->p_waiting);
 800d93a:	f100 0128 	add.w	r1, r0, #40	; 0x28
  REG_INSERT(tp);
 800d93e:	6106      	str	r6, [r0, #16]
 800d940:	6147      	str	r7, [r0, #20]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d942:	f880 e01f 	strb.w	lr, [r0, #31]
  tp->p_refs = (trefs_t)1;
 800d946:	7785      	strb	r5, [r0, #30]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d948:	7743      	strb	r3, [r0, #29]
  tp->p_mtxlist = NULL;
 800d94a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tp->p_epending = (eventmask_t)0;
 800d94c:	6383      	str	r3, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d94e:	6203      	str	r3, [r0, #32]
  tp->p_name = NULL;
 800d950:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 800d952:	6138      	str	r0, [r7, #16]
  tlp->p_next = (thread_t *)tlp;
 800d954:	6281      	str	r1, [r0, #40]	; 0x28
 800d956:	6170      	str	r0, [r6, #20]
  tqp->p_next = (thread_t *)tqp;
 800d958:	62c2      	str	r2, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d95a:	6302      	str	r2, [r0, #48]	; 0x30

  return _thread_init(tp, prio);
}
 800d95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95e:	bf00      	nop
 800d960:	20001a40 	.word	0x20001a40
 800d964:	0800c129 	.word	0x0800c129
	...

0800d970 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	461d      	mov	r5, r3
 800d974:	4604      	mov	r4, r0
 800d976:	2320      	movs	r3, #32
 800d978:	f383 8811 	msr	BASEPRI, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d97c:	3964      	subs	r1, #100	; 0x64
 800d97e:	4401      	add	r1, r0
  REG_INSERT(tp);
 800d980:	4e13      	ldr	r6, [pc, #76]	; (800d9d0 <chThdCreateStatic+0x60>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d982:	4b14      	ldr	r3, [pc, #80]	; (800d9d4 <chThdCreateStatic+0x64>)
  REG_INSERT(tp);
 800d984:	6977      	ldr	r7, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d986:	60c1      	str	r1, [r0, #12]
 800d988:	640d      	str	r5, [r1, #64]	; 0x40
 800d98a:	9d06      	ldr	r5, [sp, #24]
 800d98c:	644d      	str	r5, [r1, #68]	; 0x44
 800d98e:	660b      	str	r3, [r1, #96]	; 0x60
  tp->p_state = CH_STATE_WTSTART;
 800d990:	2502      	movs	r5, #2
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d992:	2304      	movs	r3, #4
  tp->p_prio = prio;
 800d994:	6082      	str	r2, [r0, #8]
  tp->p_realprio = prio;
 800d996:	6402      	str	r2, [r0, #64]	; 0x40
  tp->p_state = CH_STATE_WTSTART;
 800d998:	7705      	strb	r5, [r0, #28]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d99a:	77c3      	strb	r3, [r0, #31]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d99c:	2500      	movs	r5, #0
  queue_init(&tp->p_msgqueue);
 800d99e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  list_init(&tp->p_waiting);
 800d9a2:	f100 0228 	add.w	r2, r0, #40	; 0x28
  tp->p_refs = (trefs_t)1;
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	7781      	strb	r1, [r0, #30]
  REG_INSERT(tp);
 800d9aa:	6106      	str	r6, [r0, #16]
 800d9ac:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d9ae:	7745      	strb	r5, [r0, #29]
  tp->p_mtxlist = NULL;
 800d9b0:	63c5      	str	r5, [r0, #60]	; 0x3c
  tp->p_epending = (eventmask_t)0;
 800d9b2:	6385      	str	r5, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d9b4:	6205      	str	r5, [r0, #32]
  tp->p_name = NULL;
 800d9b6:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d9b8:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800d9ba:	6138      	str	r0, [r7, #16]
  tlp->p_next = (thread_t *)tlp;
 800d9bc:	6282      	str	r2, [r0, #40]	; 0x28
  tqp->p_next = (thread_t *)tqp;
 800d9be:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d9c0:	6303      	str	r3, [r0, #48]	; 0x30
 800d9c2:	6170      	str	r0, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800d9c4:	f7ff fed4 	bl	800d770 <chSchWakeupS>
 800d9c8:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9d0:	20001a40 	.word	0x20001a40
 800d9d4:	0800c129 	.word	0x0800c129
	...

0800d9e0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800d9e0:	b508      	push	{r3, lr}
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	2320      	movs	r3, #32
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800d9ea:	2008      	movs	r0, #8
 800d9ec:	f7ff fe98 	bl	800d720 <chSchGoSleepTimeoutS>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	bd08      	pop	{r3, pc}
	...

0800da00 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800da00:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800da02:	4b0e      	ldr	r3, [pc, #56]	; (800da3c <chThdExitS+0x3c>)
 800da04:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800da06:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800da08:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800da0a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800da0e:	429d      	cmp	r5, r3
 800da10:	d007      	beq.n	800da22 <chThdExitS+0x22>
  tlp->p_next = tp->p_next;
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff fe52 	bl	800d6c0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800da1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->p_waiting)) {
 800da1e:	42ab      	cmp	r3, r5
 800da20:	d1f7      	bne.n	800da12 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800da22:	7f63      	ldrb	r3, [r4, #29]
 800da24:	079b      	lsls	r3, r3, #30
 800da26:	d104      	bne.n	800da32 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800da28:	6963      	ldr	r3, [r4, #20]
 800da2a:	6922      	ldr	r2, [r4, #16]
 800da2c:	611a      	str	r2, [r3, #16]
 800da2e:	6922      	ldr	r2, [r4, #16]
 800da30:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800da32:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800da34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800da38:	f7ff be5a 	b.w	800d6f0 <chSchGoSleepS>
 800da3c:	20001a40 	.word	0x20001a40

0800da40 <chThdExit>:
 800da40:	2320      	movs	r3, #32
 800da42:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 800da46:	f7ff bfdb 	b.w	800da00 <chThdExitS>
 800da4a:	bf00      	nop
 800da4c:	0000      	movs	r0, r0
	...

0800da50 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800da50:	b510      	push	{r4, lr}
  return ch.rlist.r_current;
 800da52:	4c05      	ldr	r4, [pc, #20]	; (800da68 <chThdSuspendS+0x18>)
 800da54:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800da56:	6003      	str	r3, [r0, #0]
msg_t chThdSuspendS(thread_reference_t *trp) {
 800da58:	4602      	mov	r2, r0
  tp->p_u.wttrp = trp;
 800da5a:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800da5c:	2003      	movs	r0, #3
 800da5e:	f7ff fe47 	bl	800d6f0 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 800da62:	69a3      	ldr	r3, [r4, #24]
}
 800da64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800da66:	bd10      	pop	{r4, pc}
 800da68:	20001a40 	.word	0x20001a40
 800da6c:	00000000 	.word	0x00000000

0800da70 <chThdSuspendTimeoutS>:
 800da70:	4b05      	ldr	r3, [pc, #20]	; (800da88 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 800da72:	4602      	mov	r2, r0
 800da74:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 800da76:	b121      	cbz	r1, 800da82 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 800da78:	6003      	str	r3, [r0, #0]
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800da7a:	2003      	movs	r0, #3
  tp->p_u.wttrp = trp;
 800da7c:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800da7e:	f7ff be4f 	b.w	800d720 <chSchGoSleepTimeoutS>
}
 800da82:	f04f 30ff 	mov.w	r0, #4294967295
 800da86:	4770      	bx	lr
 800da88:	20001a40 	.word	0x20001a40
 800da8c:	00000000 	.word	0x00000000

0800da90 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800da90:	6803      	ldr	r3, [r0, #0]
 800da92:	b12b      	cbz	r3, 800daa0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800da94:	2200      	movs	r2, #0
 800da96:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800da98:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 800da9a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800da9c:	f7ff be10 	b.w	800d6c0 <chSchReadyI>
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
	...

0800dab0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800dab0:	b169      	cbz	r1, 800dace <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800dab2:	4b08      	ldr	r3, [pc, #32]	; (800dad4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800dab4:	b410      	push	{r4}
 800dab6:	4602      	mov	r2, r0
  tp->p_prev = tqp->p_prev;
 800dab8:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800daba:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800dabc:	2004      	movs	r0, #4
 800dabe:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800dac2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800dac4:	6053      	str	r3, [r2, #4]
}
 800dac6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800daca:	f7ff be29 	b.w	800d720 <chSchGoSleepTimeoutS>
}
 800dace:	f04f 30ff 	mov.w	r0, #4294967295
 800dad2:	4770      	bx	lr
 800dad4:	20001a40 	.word	0x20001a40
	...

0800dae0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800dae0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800dae2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800dae4:	4298      	cmp	r0, r3
 800dae6:	d00b      	beq.n	800db00 <chThdDequeueAllI+0x20>
 800dae8:	4604      	mov	r4, r0
 800daea:	460d      	mov	r5, r1
  tqp->p_next = tp->p_next;
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	6022      	str	r2, [r4, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800daf0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800daf2:	6054      	str	r4, [r2, #4]
  tp->p_u.rdymsg = msg;
 800daf4:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800daf6:	f7ff fde3 	bl	800d6c0 <chSchReadyI>
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	429c      	cmp	r4, r3
 800dafe:	d1f5      	bne.n	800daec <chThdDequeueAllI+0xc>
 800db00:	bd38      	pop	{r3, r4, r5, pc}
 800db02:	bf00      	nop
	...

0800db10 <chTMStartMeasurementX>:
 800db10:	4b01      	ldr	r3, [pc, #4]	; (800db18 <chTMStartMeasurementX+0x8>)
 800db12:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800db14:	6083      	str	r3, [r0, #8]
 800db16:	4770      	bx	lr
 800db18:	e0001000 	.word	0xe0001000
 800db1c:	00000000 	.word	0x00000000

0800db20 <chTMStopMeasurementX>:
 800db20:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800db22:	4a10      	ldr	r2, [pc, #64]	; (800db64 <chTMStopMeasurementX+0x44>)
 800db24:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 800db26:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800db28:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800db2a:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800db2c:	6f96      	ldr	r6, [r2, #120]	; 0x78
  if (tmp->last > tmp->worst) {
 800db2e:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 800db30:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800db34:	1bdb      	subs	r3, r3, r7
 800db36:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 800db38:	18e4      	adds	r4, r4, r3
 800db3a:	f145 0500 	adc.w	r5, r5, #0
  tmp->n++;
 800db3e:	3101      	adds	r1, #1
  if (tmp->last > tmp->worst) {
 800db40:	4293      	cmp	r3, r2
  tmp->n++;
 800db42:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800db44:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800db46:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 800db4a:	d805      	bhi.n	800db58 <chTMStopMeasurementX+0x38>
  else if (tmp->last < tmp->best) {
 800db4c:	6802      	ldr	r2, [r0, #0]
 800db4e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800db50:	bf38      	it	cc
 800db52:	6003      	strcc	r3, [r0, #0]
}
 800db54:	bcf0      	pop	{r4, r5, r6, r7}
 800db56:	4770      	bx	lr
    tmp->worst = tmp->last;
 800db58:	6043      	str	r3, [r0, #4]
}
 800db5a:	bcf0      	pop	{r4, r5, r6, r7}
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	e0001000 	.word	0xe0001000
 800db64:	20001a40 	.word	0x20001a40
	...

0800db70 <_tm_init>:
void _tm_init(void) {
 800db70:	b5d0      	push	{r4, r6, r7, lr}
  ch.tm.offset = (rtcnt_t)0;
 800db72:	4c0c      	ldr	r4, [pc, #48]	; (800dba4 <_tm_init+0x34>)
void _tm_init(void) {
 800db74:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 800db76:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 800db78:	f04f 32ff 	mov.w	r2, #4294967295
  chTMStartMeasurementX(&tm);
 800db7c:	4668      	mov	r0, sp
  tmp->cumulative = (rttime_t)0;
 800db7e:	2600      	movs	r6, #0
 800db80:	2700      	movs	r7, #0
  ch.tm.offset = (rtcnt_t)0;
 800db82:	67a3      	str	r3, [r4, #120]	; 0x78
  tmp->worst      = (rtcnt_t)0;
 800db84:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800db86:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800db88:	9303      	str	r3, [sp, #12]
  tmp->best       = (rtcnt_t)-1;
 800db8a:	9200      	str	r2, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 800db8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  chTMStartMeasurementX(&tm);
 800db90:	f7ff ffbe 	bl	800db10 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800db94:	4668      	mov	r0, sp
 800db96:	f7ff ffc3 	bl	800db20 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800db9a:	9b02      	ldr	r3, [sp, #8]
 800db9c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800db9e:	b006      	add	sp, #24
 800dba0:	bdd0      	pop	{r4, r6, r7, pc}
 800dba2:	bf00      	nop
 800dba4:	20001a40 	.word	0x20001a40
	...

0800dbb0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	2320      	movs	r3, #32
 800dbb4:	f383 8811 	msr	BASEPRI, r3
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 800dbb8:	7f83      	ldrb	r3, [r0, #30]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	7783      	strb	r3, [r0, #30]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 800dbc6:	b913      	cbnz	r3, 800dbce <chThdRelease+0x1e>
 800dbc8:	7f03      	ldrb	r3, [r0, #28]
 800dbca:	2b0f      	cmp	r3, #15
 800dbcc:	d000      	beq.n	800dbd0 <chThdRelease+0x20>
 800dbce:	4770      	bx	lr
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 800dbd0:	7f43      	ldrb	r3, [r0, #29]
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d002      	beq.n	800dbe0 <chThdRelease+0x30>
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d007      	beq.n	800dbee <chThdRelease+0x3e>
 800dbde:	4770      	bx	lr
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800dbe0:	6943      	ldr	r3, [r0, #20]
 800dbe2:	6902      	ldr	r2, [r0, #16]
 800dbe4:	611a      	str	r2, [r3, #16]
 800dbe6:	6902      	ldr	r2, [r0, #16]
 800dbe8:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 800dbea:	f000 bb19 	b.w	800e220 <chHeapFree>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800dbee:	6943      	ldr	r3, [r0, #20]
 800dbf0:	6902      	ldr	r2, [r0, #16]
 800dbf2:	611a      	str	r2, [r3, #16]
 800dbf4:	6902      	ldr	r2, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 800dbf6:	6c40      	ldr	r0, [r0, #68]	; 0x44
      REG_REMOVE(tp);
 800dbf8:	6153      	str	r3, [r2, #20]
      chPoolFree(tp->p_mpool, tp);
 800dbfa:	f000 bb81 	b.w	800e300 <chPoolFree>
 800dbfe:	bf00      	nop

0800dc00 <chRegFirstThread>:
 800dc00:	2320      	movs	r3, #32
 800dc02:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800dc06:	4b04      	ldr	r3, [pc, #16]	; (800dc18 <chRegFirstThread+0x18>)
 800dc08:	6918      	ldr	r0, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 800dc0a:	7f83      	ldrb	r3, [r0, #30]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	7783      	strb	r3, [r0, #30]
 800dc10:	2300      	movs	r3, #0
 800dc12:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 800dc16:	4770      	bx	lr
 800dc18:	20001a40 	.word	0x20001a40
 800dc1c:	00000000 	.word	0x00000000

0800dc20 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 800dc20:	b510      	push	{r4, lr}
 800dc22:	2320      	movs	r3, #32
 800dc24:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 800dc28:	4b07      	ldr	r3, [pc, #28]	; (800dc48 <chRegNextThread+0x28>)
  ntp = tp->p_newer;
 800dc2a:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 800dc2c:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 800dc2e:	bf1d      	ittte	ne
 800dc30:	7fa3      	ldrbne	r3, [r4, #30]
 800dc32:	3301      	addne	r3, #1
 800dc34:	77a3      	strbne	r3, [r4, #30]
    ntp = NULL;
 800dc36:	2400      	moveq	r4, #0
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800dc3e:	f7ff ffb7 	bl	800dbb0 <chThdRelease>
#endif

  return ntp;
}
 800dc42:	4620      	mov	r0, r4
 800dc44:	bd10      	pop	{r4, pc}
 800dc46:	bf00      	nop
 800dc48:	20001a40 	.word	0x20001a40
 800dc4c:	00000000 	.word	0x00000000

0800dc50 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800dc50:	2300      	movs	r3, #0
  tqp->p_next = (thread_t *)tqp;
 800dc52:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800dc54:	6040      	str	r0, [r0, #4]
 800dc56:	6083      	str	r3, [r0, #8]
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	0000      	movs	r0, r0
	...

0800dc60 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800dc60:	4b30      	ldr	r3, [pc, #192]	; (800dd24 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800dc62:	6882      	ldr	r2, [r0, #8]
void chMtxLockS(mutex_t *mp) {
 800dc64:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800dc66:	699c      	ldr	r4, [r3, #24]
  if (mp->m_owner != NULL) {
 800dc68:	2a00      	cmp	r2, #0
 800dc6a:	d055      	beq.n	800dd18 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800dc6c:	68a1      	ldr	r1, [r4, #8]
 800dc6e:	6893      	ldr	r3, [r2, #8]
 800dc70:	428b      	cmp	r3, r1
 800dc72:	4605      	mov	r5, r0
 800dc74:	d206      	bcs.n	800dc84 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800dc76:	7f13      	ldrb	r3, [r2, #28]
        tp->p_prio = ctp->p_prio;
 800dc78:	6091      	str	r1, [r2, #8]
        switch (tp->p_state) {
 800dc7a:	2b06      	cmp	r3, #6
 800dc7c:	d033      	beq.n	800dce6 <chMtxLockS+0x86>
 800dc7e:	2b07      	cmp	r3, #7
 800dc80:	d01d      	beq.n	800dcbe <chMtxLockS+0x5e>
 800dc82:	b19b      	cbz	r3, 800dcac <chMtxLockS+0x4c>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
 800dc84:	462b      	mov	r3, r5
 800dc86:	e003      	b.n	800dc90 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800dc88:	6899      	ldr	r1, [r3, #8]
 800dc8a:	68a2      	ldr	r2, [r4, #8]
 800dc8c:	4291      	cmp	r1, r2
 800dc8e:	d302      	bcc.n	800dc96 <chMtxLockS+0x36>
    cp = cp->p_next;
 800dc90:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800dc92:	429d      	cmp	r5, r3
 800dc94:	d1f8      	bne.n	800dc88 <chMtxLockS+0x28>
  tp->p_prev = cp->p_prev;
 800dc96:	685a      	ldr	r2, [r3, #4]
 800dc98:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 800dc9a:	6023      	str	r3, [r4, #0]
  tp->p_prev->p_next = tp;
 800dc9c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800dc9e:	605c      	str	r4, [r3, #4]
      ctp->p_u.wtmtxp = mp;
 800dca0:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800dca2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 800dca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 800dca8:	f7ff bd22 	b.w	800d6f0 <chSchGoSleepS>
  tp->p_prev->p_next = tp->p_next;
 800dcac:	e892 000a 	ldmia.w	r2, {r1, r3}
 800dcb0:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800dcb2:	6811      	ldr	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	604b      	str	r3, [r1, #4]
 800dcb8:	f7ff fd02 	bl	800d6c0 <chSchReadyI>
          break;
 800dcbc:	e7e2      	b.n	800dc84 <chMtxLockS+0x24>
  tp->p_prev->p_next = tp->p_next;
 800dcbe:	e892 0009 	ldmia.w	r2, {r0, r3}
 800dcc2:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800dcc4:	6810      	ldr	r0, [r2, #0]
 800dcc6:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800dcc8:	6a56      	ldr	r6, [r2, #36]	; 0x24
 800dcca:	4633      	mov	r3, r6
 800dccc:	e002      	b.n	800dcd4 <chMtxLockS+0x74>
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800dcce:	6898      	ldr	r0, [r3, #8]
 800dcd0:	4288      	cmp	r0, r1
 800dcd2:	d302      	bcc.n	800dcda <chMtxLockS+0x7a>
    cp = cp->p_next;
 800dcd4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800dcd6:	429e      	cmp	r6, r3
 800dcd8:	d1f9      	bne.n	800dcce <chMtxLockS+0x6e>
  tp->p_prev = cp->p_prev;
 800dcda:	6859      	ldr	r1, [r3, #4]
 800dcdc:	6051      	str	r1, [r2, #4]
  tp->p_next = cp;
 800dcde:	6013      	str	r3, [r2, #0]
  tp->p_prev->p_next = tp;
 800dce0:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800dce2:	605a      	str	r2, [r3, #4]
 800dce4:	e7ce      	b.n	800dc84 <chMtxLockS+0x24>
  tp->p_prev->p_next = tp->p_next;
 800dce6:	e892 0009 	ldmia.w	r2, {r0, r3}
 800dcea:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800dcec:	6810      	ldr	r0, [r2, #0]
 800dcee:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800dcf0:	6a56      	ldr	r6, [r2, #36]	; 0x24
 800dcf2:	4633      	mov	r3, r6
 800dcf4:	e002      	b.n	800dcfc <chMtxLockS+0x9c>
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800dcf6:	6898      	ldr	r0, [r3, #8]
 800dcf8:	4288      	cmp	r0, r1
 800dcfa:	d302      	bcc.n	800dd02 <chMtxLockS+0xa2>
    cp = cp->p_next;
 800dcfc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800dcfe:	429e      	cmp	r6, r3
 800dd00:	d1f9      	bne.n	800dcf6 <chMtxLockS+0x96>
  tp->p_prev = cp->p_prev;
 800dd02:	6859      	ldr	r1, [r3, #4]
 800dd04:	6051      	str	r1, [r2, #4]
  tp->p_next = cp;
 800dd06:	6013      	str	r3, [r2, #0]
  tp->p_prev->p_next = tp;
 800dd08:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800dd0a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800dd0c:	68b2      	ldr	r2, [r6, #8]
      while (tp->p_prio < ctp->p_prio) {
 800dd0e:	68a1      	ldr	r1, [r4, #8]
 800dd10:	6893      	ldr	r3, [r2, #8]
 800dd12:	428b      	cmp	r3, r1
 800dd14:	d3af      	bcc.n	800dc76 <chMtxLockS+0x16>
 800dd16:	e7b5      	b.n	800dc84 <chMtxLockS+0x24>
    mp->m_next = ctp->p_mtxlist;
 800dd18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd1a:	60c3      	str	r3, [r0, #12]
    mp->m_owner = ctp;
 800dd1c:	6084      	str	r4, [r0, #8]
    ctp->p_mtxlist = mp;
 800dd1e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dd20:	bd70      	pop	{r4, r5, r6, pc}
 800dd22:	bf00      	nop
 800dd24:	20001a40 	.word	0x20001a40
	...

0800dd30 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 800dd30:	b508      	push	{r3, lr}
 800dd32:	2320      	movs	r3, #32
 800dd34:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800dd38:	f7ff ff92 	bl	800dc60 <chMtxLockS>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	bd08      	pop	{r3, pc}
	...

0800dd50 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 800dd50:	4b17      	ldr	r3, [pc, #92]	; (800ddb0 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 800dd52:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800dd54:	699d      	ldr	r5, [r3, #24]
 800dd56:	2320      	movs	r3, #32
 800dd58:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800dd5c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800dd5e:	68c3      	ldr	r3, [r0, #12]
 800dd60:	63eb      	str	r3, [r5, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800dd62:	4284      	cmp	r4, r0
 800dd64:	d01d      	beq.n	800dda2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 800dd66:	6c29      	ldr	r1, [r5, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800dd68:	b14b      	cbz	r3, 800dd7e <chMtxUnlock+0x2e>
 800dd6a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d003      	beq.n	800dd78 <chMtxUnlock+0x28>
 800dd70:	6892      	ldr	r2, [r2, #8]
 800dd72:	4291      	cmp	r1, r2
 800dd74:	bf38      	it	cc
 800dd76:	4611      	movcc	r1, r2
            (lmp->m_queue.p_next->p_prio > newprio)) {
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 800dd78:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1f5      	bne.n	800dd6a <chMtxUnlock+0x1a>
 800dd7e:	4603      	mov	r3, r0
  tqp->p_next = tp->p_next;
 800dd80:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800dd82:	6be6      	ldr	r6, [r4, #60]	; 0x3c
      ctp->p_prio = newprio;
 800dd84:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800dd86:	4620      	mov	r0, r4
 800dd88:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800dd8a:	6053      	str	r3, [r2, #4]
      mp->m_owner = tp;
 800dd8c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800dd8e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 800dd90:	63e3      	str	r3, [r4, #60]	; 0x3c
      (void) chSchReadyI(tp);
 800dd92:	f7ff fc95 	bl	800d6c0 <chSchReadyI>
      chSchRescheduleS();
 800dd96:	f7ff fd73 	bl	800d880 <chSchRescheduleS>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	60a3      	str	r3, [r4, #8]
 800dda6:	2300      	movs	r3, #0
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	bd70      	pop	{r4, r5, r6, pc}
 800ddae:	bf00      	nop
 800ddb0:	20001a40 	.word	0x20001a40
	...

0800ddc0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 800ddc0:	b430      	push	{r4, r5}
 800ddc2:	2420      	movs	r4, #32
 800ddc4:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 800ddc8:	4d06      	ldr	r5, [pc, #24]	; (800dde4 <chEvtRegisterMaskWithFlags+0x24>)
  elp->el_next     = esp->es_next;
 800ddca:	6804      	ldr	r4, [r0, #0]
  elp->el_listener = currp;
 800ddcc:	69ad      	ldr	r5, [r5, #24]
  elp->el_next     = esp->es_next;
 800ddce:	600c      	str	r4, [r1, #0]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800ddd0:	2400      	movs	r4, #0
  esp->es_next     = elp;
 800ddd2:	6001      	str	r1, [r0, #0]
  elp->el_listener = currp;
 800ddd4:	604d      	str	r5, [r1, #4]
  elp->el_events   = events;
 800ddd6:	608a      	str	r2, [r1, #8]
  elp->el_wflags   = wflags;
 800ddd8:	610b      	str	r3, [r1, #16]
  elp->el_flags    = (eventflags_t)0;
 800ddda:	60cc      	str	r4, [r1, #12]
 800dddc:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
}
 800dde0:	bc30      	pop	{r4, r5}
 800dde2:	4770      	bx	lr
 800dde4:	20001a40 	.word	0x20001a40
	...

0800ddf0 <chEvtUnregister>:
 800ddf0:	2320      	movs	r3, #32
 800ddf2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	e002      	b.n	800de00 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 800ddfa:	428b      	cmp	r3, r1
 800ddfc:	d007      	beq.n	800de0e <chEvtUnregister+0x1e>
 800ddfe:	461a      	mov	r2, r3
  while (p->el_next != (event_listener_t *)esp) {
 800de00:	6813      	ldr	r3, [r2, #0]
 800de02:	4298      	cmp	r0, r3
 800de04:	d1f9      	bne.n	800ddfa <chEvtUnregister+0xa>
 800de06:	2300      	movs	r3, #0
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	4770      	bx	lr
      p->el_next = elp->el_next;
 800de0e:	680b      	ldr	r3, [r1, #0]
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	2300      	movs	r3, #0
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	0000      	movs	r0, r0
	...

0800de20 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800de20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800de22:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 800de24:	4319      	orrs	r1, r3
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800de26:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 800de28:	6381      	str	r1, [r0, #56]	; 0x38
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800de2a:	d009      	beq.n	800de40 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800de2c:	2a0b      	cmp	r2, #11
 800de2e:	d000      	beq.n	800de32 <chEvtSignalI+0x12>
 800de30:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800de32:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800de34:	438b      	bics	r3, r1
 800de36:	d1fb      	bne.n	800de30 <chEvtSignalI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800de3c:	f7ff bc40 	b.w	800d6c0 <chSchReadyI>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800de40:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800de42:	4219      	tst	r1, r3
 800de44:	d1f8      	bne.n	800de38 <chEvtSignalI+0x18>
 800de46:	4770      	bx	lr
	...

0800de50 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800de50:	b570      	push	{r4, r5, r6, lr}
  elp = esp->es_next;
 800de52:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 800de54:	42a0      	cmp	r0, r4
 800de56:	d00f      	beq.n	800de78 <chEvtBroadcastFlagsI+0x28>
 800de58:	4606      	mov	r6, r0
 800de5a:	460d      	mov	r5, r1
    elp->el_flags |= flags;
 800de5c:	68e3      	ldr	r3, [r4, #12]
 800de5e:	432b      	orrs	r3, r5
 800de60:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800de62:	b115      	cbz	r5, 800de6a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800de64:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 800de66:	4213      	tst	r3, r2
 800de68:	d003      	beq.n	800de72 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 800de6a:	68a1      	ldr	r1, [r4, #8]
 800de6c:	6860      	ldr	r0, [r4, #4]
 800de6e:	f7ff ffd7 	bl	800de20 <chEvtSignalI>
    elp = elp->el_next;
 800de72:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800de74:	42a6      	cmp	r6, r4
 800de76:	d1f1      	bne.n	800de5c <chEvtBroadcastFlagsI+0xc>
 800de78:	bd70      	pop	{r4, r5, r6, pc}
 800de7a:	bf00      	nop
 800de7c:	0000      	movs	r0, r0
	...

0800de80 <chEvtSignal>:
void chEvtSignal(thread_t *tp, eventmask_t events) {
 800de80:	b508      	push	{r3, lr}
 800de82:	2320      	movs	r3, #32
 800de84:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 800de88:	f7ff ffca 	bl	800de20 <chEvtSignalI>
  chSchRescheduleS();
 800de8c:	f7ff fcf8 	bl	800d880 <chSchRescheduleS>
 800de90:	2300      	movs	r3, #0
 800de92:	f383 8811 	msr	BASEPRI, r3
 800de96:	bd08      	pop	{r3, pc}
	...

0800dea0 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800dea0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800dea2:	4b0c      	ldr	r3, [pc, #48]	; (800ded4 <chEvtWaitAny+0x34>)
 800dea4:	699d      	ldr	r5, [r3, #24]
 800dea6:	2320      	movs	r3, #32
 800dea8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800deac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800deae:	ea13 0400 	ands.w	r4, r3, r0
 800deb2:	d106      	bne.n	800dec2 <chEvtWaitAny+0x22>
 800deb4:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 800deb6:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800deb8:	200a      	movs	r0, #10
 800deba:	f7ff fc19 	bl	800d6f0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800debe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800dec0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 800dec2:	ea23 0304 	bic.w	r3, r3, r4
 800dec6:	63ab      	str	r3, [r5, #56]	; 0x38
 800dec8:	2300      	movs	r3, #0
 800deca:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800dece:	4620      	mov	r0, r4
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	bf00      	nop
 800ded4:	20001a40 	.word	0x20001a40
	...

0800dee0 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800dee0:	4b10      	ldr	r3, [pc, #64]	; (800df24 <chEvtWaitAnyTimeout+0x44>)
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
 800dee2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800dee4:	699e      	ldr	r6, [r3, #24]
 800dee6:	2320      	movs	r3, #32
 800dee8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800deec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800deee:	ea13 0500 	ands.w	r5, r3, r0
 800def2:	d10e      	bne.n	800df12 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 800def4:	b919      	cbnz	r1, 800defe <chEvtWaitAnyTimeout+0x1e>
 800def6:	f385 8811 	msr	BASEPRI, r5
  }
  ctp->p_epending &= ~m;
  chSysUnlock();

  return m;
}
 800defa:	4628      	mov	r0, r5
 800defc:	bd70      	pop	{r4, r5, r6, pc}
    ctp->p_u.ewmask = events;
 800defe:	6270      	str	r0, [r6, #36]	; 0x24
 800df00:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 800df02:	200a      	movs	r0, #10
 800df04:	f7ff fc0c 	bl	800d720 <chSchGoSleepTimeoutS>
 800df08:	2800      	cmp	r0, #0
 800df0a:	dbf4      	blt.n	800def6 <chEvtWaitAnyTimeout+0x16>
    m = ctp->p_epending & events;
 800df0c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800df0e:	ea04 0503 	and.w	r5, r4, r3
  ctp->p_epending &= ~m;
 800df12:	ea23 0305 	bic.w	r3, r3, r5
 800df16:	63b3      	str	r3, [r6, #56]	; 0x38
 800df18:	2300      	movs	r3, #0
 800df1a:	f383 8811 	msr	BASEPRI, r3
}
 800df1e:	4628      	mov	r0, r5
 800df20:	bd70      	pop	{r4, r5, r6, pc}
 800df22:	bf00      	nop
 800df24:	20001a40 	.word	0x20001a40
	...

0800df30 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800df30:	b430      	push	{r4, r5}
 800df32:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800df34:	6204      	str	r4, [r0, #32]
  iqp->q_counter = 0;
 800df36:	2500      	movs	r5, #0
  iqp->q_top     = bp + size;
 800df38:	440a      	add	r2, r1
  iqp->q_counter = 0;
 800df3a:	6085      	str	r5, [r0, #8]
  iqp->q_top     = bp + size;
 800df3c:	6102      	str	r2, [r0, #16]
  tqp->p_next = (thread_t *)tqp;
 800df3e:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800df40:	6040      	str	r0, [r0, #4]
  iqp->q_buffer  = bp;
 800df42:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 800df44:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 800df46:	6141      	str	r1, [r0, #20]
  iqp->q_notify  = infy;
 800df48:	61c3      	str	r3, [r0, #28]
}
 800df4a:	bc30      	pop	{r4, r5}
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop

0800df50 <chIQResetI>:

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800df50:	2100      	movs	r1, #0
  iqp->q_rdptr = iqp->q_buffer;
 800df52:	68c2      	ldr	r2, [r0, #12]
  iqp->q_counter = 0;
 800df54:	6081      	str	r1, [r0, #8]
  iqp->q_rdptr = iqp->q_buffer;
 800df56:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 800df58:	6142      	str	r2, [r0, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800df5a:	f06f 0101 	mvn.w	r1, #1
 800df5e:	f7ff bdbf 	b.w	800dae0 <chThdDequeueAllI>
 800df62:	bf00      	nop
	...

0800df70 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	2320      	movs	r3, #32
 800df74:	460e      	mov	r6, r1
 800df76:	4604      	mov	r4, r0
 800df78:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800df7c:	69c3      	ldr	r3, [r0, #28]
 800df7e:	b12b      	cbz	r3, 800df8c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800df80:	4798      	blx	r3
 800df82:	e003      	b.n	800df8c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800df84:	f7ff fd94 	bl	800dab0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800df88:	2800      	cmp	r0, #0
 800df8a:	db15      	blt.n	800dfb8 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800df8c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800df8e:	4631      	mov	r1, r6
 800df90:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 800df92:	2d00      	cmp	r5, #0
 800df94:	d0f6      	beq.n	800df84 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800df96:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800df98:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800df9a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800df9c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800df9e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800dfa0:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 800dfa2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800dfa4:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 800dfa6:	bf28      	it	cs
 800dfa8:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800dfaa:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800dfac:	bf28      	it	cs
 800dfae:	61a3      	strcs	r3, [r4, #24]
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	f385 8811 	msr	BASEPRI, r5
      return msg;
 800dfbc:	bd70      	pop	{r4, r5, r6, pc}
 800dfbe:	bf00      	nop

0800dfc0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	4689      	mov	r9, r1
 800dfca:	4693      	mov	fp, r2
 800dfcc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800dfce:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800dfd2:	2720      	movs	r7, #32
 800dfd4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800dfd8:	2600      	movs	r6, #0
 800dfda:	9701      	str	r7, [sp, #4]
 800dfdc:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800dfde:	f1b8 0f00 	cmp.w	r8, #0
 800dfe2:	d005      	beq.n	800dff0 <chIQReadTimeout+0x30>
      nfy(iqp);
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	47c0      	blx	r8
 800dfe8:	e002      	b.n	800dff0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800dfea:	f7ff fd61 	bl	800dab0 <chThdEnqueueTimeoutS>
 800dfee:	b9e0      	cbnz	r0, 800e02a <chIQReadTimeout+0x6a>
 800dff0:	68a7      	ldr	r7, [r4, #8]
 800dff2:	4629      	mov	r1, r5
 800dff4:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 800dff6:	2f00      	cmp	r7, #0
 800dff8:	d0f7      	beq.n	800dfea <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800dffa:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 800dffc:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800dffe:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 800e000:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800e002:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 800e004:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800e006:	7813      	ldrb	r3, [r2, #0]
 800e008:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	69a2      	ldr	r2, [r4, #24]
 800e010:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800e012:	bf24      	itt	cs
 800e014:	68e3      	ldrcs	r3, [r4, #12]
 800e016:	61a3      	strcs	r3, [r4, #24]
 800e018:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800e01c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800e01e:	45b3      	cmp	fp, r6
 800e020:	d005      	beq.n	800e02e <chIQReadTimeout+0x6e>
 800e022:	9b01      	ldr	r3, [sp, #4]
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	e7d9      	b.n	800dfde <chIQReadTimeout+0x1e>
 800e02a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800e02e:	4630      	mov	r0, r6
 800e030:	b003      	add	sp, #12
 800e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e036:	bf00      	nop
	...

0800e040 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800e040:	b430      	push	{r4, r5}
 800e042:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800e044:	6204      	str	r4, [r0, #32]
  oqp->q_top     = bp + size;
 800e046:	188d      	adds	r5, r1, r2
 800e048:	6105      	str	r5, [r0, #16]
  tqp->p_next = (thread_t *)tqp;
 800e04a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800e04c:	6040      	str	r0, [r0, #4]
  oqp->q_counter = size;
 800e04e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 800e050:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 800e052:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800e054:	6141      	str	r1, [r0, #20]
  oqp->q_notify  = onfy;
 800e056:	61c3      	str	r3, [r0, #28]
}
 800e058:	bc30      	pop	{r4, r5}
 800e05a:	4770      	bx	lr
 800e05c:	0000      	movs	r0, r0
	...

0800e060 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 800e060:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800e062:	6902      	ldr	r2, [r0, #16]
  oqp->q_rdptr = oqp->q_buffer;
 800e064:	68c4      	ldr	r4, [r0, #12]
 800e066:	6184      	str	r4, [r0, #24]
  oqp->q_counter = chQSizeX(oqp);
 800e068:	1b12      	subs	r2, r2, r4
  oqp->q_wrptr = oqp->q_buffer;
 800e06a:	6144      	str	r4, [r0, #20]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800e06c:	f06f 0101 	mvn.w	r1, #1
  oqp->q_counter = chQSizeX(oqp);
 800e070:	6082      	str	r2, [r0, #8]
}
 800e072:	f85d 4b04 	ldr.w	r4, [sp], #4
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800e076:	f7ff bd33 	b.w	800dae0 <chThdDequeueAllI>
 800e07a:	bf00      	nop
 800e07c:	0000      	movs	r0, r0
	...

0800e080 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	4604      	mov	r4, r0
 800e084:	460f      	mov	r7, r1
 800e086:	4616      	mov	r6, r2
 800e088:	2320      	movs	r3, #32
 800e08a:	f383 8811 	msr	BASEPRI, r3
 800e08e:	e003      	b.n	800e098 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800e090:	f7ff fd0e 	bl	800dab0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800e094:	2800      	cmp	r0, #0
 800e096:	db19      	blt.n	800e0cc <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800e098:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800e09a:	4631      	mov	r1, r6
 800e09c:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800e09e:	2d00      	cmp	r5, #0
 800e0a0:	d0f6      	beq.n	800e090 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800e0a2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 800e0a4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800e0a6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800e0a8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800e0aa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800e0ac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800e0ae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	6962      	ldr	r2, [r4, #20]
 800e0b4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800e0b6:	bf24      	itt	cs
 800e0b8:	68e3      	ldrcs	r3, [r4, #12]
 800e0ba:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800e0bc:	69e3      	ldr	r3, [r4, #28]
 800e0be:	b10b      	cbz	r3, 800e0c4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4798      	blx	r3
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800e0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0cc:	f385 8811 	msr	BASEPRI, r5
      return msg;
 800e0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d2:	bf00      	nop
	...

0800e0e0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	460d      	mov	r5, r1
 800e0ea:	4616      	mov	r6, r2
 800e0ec:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800e0ee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800e0f2:	f04f 0920 	mov.w	r9, #32
 800e0f6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800e0fa:	2700      	movs	r7, #0
 800e0fc:	46ba      	mov	sl, r7
 800e0fe:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800e100:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800e104:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 800e106:	b303      	cbz	r3, 800e14a <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 800e108:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 800e10a:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800e10c:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 800e10e:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800e110:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 800e112:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800e114:	782b      	ldrb	r3, [r5, #0]
 800e116:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800e118:	6923      	ldr	r3, [r4, #16]
 800e11a:	6961      	ldr	r1, [r4, #20]
 800e11c:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800e11e:	bf24      	itt	cs
 800e120:	68e3      	ldrcs	r3, [r4, #12]
 800e122:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 800e124:	f1b8 0f00 	cmp.w	r8, #0
 800e128:	d000      	beq.n	800e12c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800e12a:	47c0      	blx	r8
 800e12c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800e130:	3e01      	subs	r6, #1
    w++;
 800e132:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800e136:	d012      	beq.n	800e15e <chOQWriteTimeout+0x7e>
 800e138:	f389 8811 	msr	BASEPRI, r9
 800e13c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800e13e:	465d      	mov	r5, fp
 800e140:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 800e144:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1de      	bne.n	800e108 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800e14a:	9901      	ldr	r1, [sp, #4]
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	4620      	mov	r0, r4
 800e150:	f7ff fcae 	bl	800dab0 <chThdEnqueueTimeoutS>
 800e154:	9b00      	ldr	r3, [sp, #0]
 800e156:	2800      	cmp	r0, #0
 800e158:	d0d1      	beq.n	800e0fe <chOQWriteTimeout+0x1e>
 800e15a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 800e15e:	4638      	mov	r0, r7
 800e160:	b003      	add	sp, #12
 800e162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e166:	bf00      	nop
	...

0800e170 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800e170:	4a05      	ldr	r2, [pc, #20]	; (800e188 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800e172:	4b06      	ldr	r3, [pc, #24]	; (800e18c <_core_init+0x1c>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800e174:	4806      	ldr	r0, [pc, #24]	; (800e190 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800e176:	4907      	ldr	r1, [pc, #28]	; (800e194 <_core_init+0x24>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800e178:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800e17c:	f023 0307 	bic.w	r3, r3, #7
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800e180:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800e182:	600b      	str	r3, [r1, #0]
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	200126d7 	.word	0x200126d7
 800e18c:	20020000 	.word	0x20020000
 800e190:	20001c9c 	.word	0x20001c9c
 800e194:	20001c98 	.word	0x20001c98
	...

0800e1a0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800e1a0:	b410      	push	{r4}
 800e1a2:	2320      	movs	r3, #32
 800e1a4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800e1a8:	4c09      	ldr	r4, [pc, #36]	; (800e1d0 <chCoreAlloc+0x30>)
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <chCoreAlloc+0x34>)
 800e1ac:	6822      	ldr	r2, [r4, #0]
 800e1ae:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 800e1b0:	1dc3      	adds	r3, r0, #7
 800e1b2:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 800e1b6:	1a89      	subs	r1, r1, r2
 800e1b8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800e1ba:	bf9d      	ittte	ls
 800e1bc:	189b      	addls	r3, r3, r2
 800e1be:	6023      	strls	r3, [r4, #0]

  return p;
 800e1c0:	4610      	movls	r0, r2
    return NULL;
 800e1c2:	2000      	movhi	r0, #0
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f383 8811 	msr	BASEPRI, r3
}
 800e1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20001c9c 	.word	0x20001c9c
 800e1d4:	20001c98 	.word	0x20001c98
	...

0800e1e0 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 800e1e0:	4a02      	ldr	r2, [pc, #8]	; (800e1ec <chCoreGetStatusX+0xc>)
 800e1e2:	4b03      	ldr	r3, [pc, #12]	; (800e1f0 <chCoreGetStatusX+0x10>)
 800e1e4:	6810      	ldr	r0, [r2, #0]
 800e1e6:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 800e1e8:	1ac0      	subs	r0, r0, r3
 800e1ea:	4770      	bx	lr
 800e1ec:	20001c98 	.word	0x20001c98
 800e1f0:	20001c9c 	.word	0x20001c9c
	...

0800e200 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800e200:	4b04      	ldr	r3, [pc, #16]	; (800e214 <_heap_init+0x14>)
 800e202:	4a05      	ldr	r2, [pc, #20]	; (800e218 <_heap_init+0x18>)
 800e204:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800e206:	f103 0010 	add.w	r0, r3, #16
  default_heap.h_free.h.u.next = NULL;
 800e20a:	2200      	movs	r2, #0
 800e20c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800e20e:	60da      	str	r2, [r3, #12]
  chMtxObjectInit(&default_heap.h_mtx);
 800e210:	f7ff bd1e 	b.w	800dc50 <chMtxObjectInit>
 800e214:	20001ca0 	.word	0x20001ca0
 800e218:	0800e1a1 	.word	0x0800e1a1
 800e21c:	00000000 	.word	0x00000000

0800e220 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 800e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 800e222:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 800e226:	f105 0710 	add.w	r7, r5, #16
void chHeapFree(void *p) {
 800e22a:	4606      	mov	r6, r0
  hp = (union heap_header *)p - 1;
 800e22c:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->h_free;
 800e230:	3508      	adds	r5, #8
  H_LOCK(heapp);
 800e232:	4638      	mov	r0, r7
 800e234:	f7ff fd7c 	bl	800dd30 <chMtxLock>
  qp = &heapp->h_free;
 800e238:	462b      	mov	r3, r5
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800e23a:	42ab      	cmp	r3, r5
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800e23c:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800e23e:	d001      	beq.n	800e244 <chHeapFree+0x24>
 800e240:	42a3      	cmp	r3, r4
 800e242:	d202      	bcs.n	800e24a <chHeapFree+0x2a>
 800e244:	b11a      	cbz	r2, 800e24e <chHeapFree+0x2e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800e246:	4294      	cmp	r4, r2
 800e248:	d301      	bcc.n	800e24e <chHeapFree+0x2e>
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
 800e24a:	4613      	mov	r3, r2
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");
 800e24c:	e7f5      	b.n	800e23a <chHeapFree+0x1a>
      hp->h.u.next = qp->h.u.next;
 800e24e:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800e252:	601c      	str	r4, [r3, #0]
      if (LIMIT(hp) == hp->h.u.next) {
 800e254:	e916 0005 	ldmdb	r6, {r0, r2}
 800e258:	18b1      	adds	r1, r6, r2
 800e25a:	4281      	cmp	r1, r0
 800e25c:	d00a      	beq.n	800e274 <chHeapFree+0x54>
      if ((LIMIT(qp) == hp)) {
 800e25e:	6859      	ldr	r1, [r3, #4]
 800e260:	f101 0208 	add.w	r2, r1, #8
 800e264:	441a      	add	r2, r3
 800e266:	4294      	cmp	r4, r2
 800e268:	d013      	beq.n	800e292 <chHeapFree+0x72>
  }
  H_UNLOCK(heapp);
 800e26a:	4638      	mov	r0, r7

  return;
}
 800e26c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 800e270:	f7ff bd6e 	b.w	800dd50 <chMtxUnlock>
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 800e274:	6849      	ldr	r1, [r1, #4]
 800e276:	f102 0008 	add.w	r0, r2, #8
 800e27a:	4401      	add	r1, r0
 800e27c:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 800e280:	58b2      	ldr	r2, [r6, r2]
 800e282:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((LIMIT(qp) == hp)) {
 800e286:	6859      	ldr	r1, [r3, #4]
 800e288:	f101 0208 	add.w	r2, r1, #8
 800e28c:	441a      	add	r2, r3
 800e28e:	4294      	cmp	r4, r2
 800e290:	d1eb      	bne.n	800e26a <chHeapFree+0x4a>
        qp->h.size += hp->h.size + sizeof(union heap_header);
 800e292:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e296:	3208      	adds	r2, #8
 800e298:	4411      	add	r1, r2
 800e29a:	6059      	str	r1, [r3, #4]
        qp->h.u.next = hp->h.u.next;
 800e29c:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800e2a0:	601a      	str	r2, [r3, #0]
  H_UNLOCK(heapp);
 800e2a2:	4638      	mov	r0, r7
}
 800e2a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 800e2a8:	f7ff bd52 	b.w	800dd50 <chMtxUnlock>
 800e2ac:	0000      	movs	r0, r0
	...

0800e2b0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 800e2b0:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 800e2b2:	4c0f      	ldr	r4, [pc, #60]	; (800e2f0 <chHeapStatus+0x40>)
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	bf18      	it	ne
 800e2b8:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800e2ba:	f104 0510 	add.w	r5, r4, #16
 800e2be:	4628      	mov	r0, r5
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 800e2c0:	460e      	mov	r6, r1
  H_LOCK(heapp);
 800e2c2:	f7ff fd35 	bl	800dd30 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 800e2c6:	68a3      	ldr	r3, [r4, #8]
 800e2c8:	b173      	cbz	r3, 800e2e8 <chHeapStatus+0x38>
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800e2ce:	6858      	ldr	r0, [r3, #4]
  while (qp->h.u.next != NULL) {
 800e2d0:	681b      	ldr	r3, [r3, #0]
    n++;
 800e2d2:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 800e2d4:	4402      	add	r2, r0
  while (qp->h.u.next != NULL) {
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1f9      	bne.n	800e2ce <chHeapStatus+0x1e>
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 800e2da:	b106      	cbz	r6, 800e2de <chHeapStatus+0x2e>
    *sizep = sz;
 800e2dc:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f7ff fd36 	bl	800dd50 <chMtxUnlock>

  return n;
}
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
  sz = 0;
 800e2e8:	461a      	mov	r2, r3
  n = 0;
 800e2ea:	461c      	mov	r4, r3
 800e2ec:	e7f5      	b.n	800e2da <chHeapStatus+0x2a>
 800e2ee:	bf00      	nop
 800e2f0:	20001ca0 	.word	0x20001ca0
	...

0800e300 <chPoolFree>:
 800e300:	2320      	movs	r3, #32
 800e302:	f383 8811 	msr	BASEPRI, r3
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800e306:	6803      	ldr	r3, [r0, #0]
 800e308:	600b      	str	r3, [r1, #0]
 800e30a:	2300      	movs	r3, #0
  mp->mp_next = php;
 800e30c:	6001      	str	r1, [r0, #0]
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	4770      	bx	lr
	...

0800e320 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 800e320:	b480      	push	{r7}
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800e322:	4a09      	ldr	r2, [pc, #36]	; (800e348 <SVC_Handler+0x28>)
 800e324:	6853      	ldr	r3, [r2, #4]
 800e326:	f023 0301 	bic.w	r3, r3, #1
void SVC_Handler(void) {
 800e32a:	af00      	add	r7, sp, #0
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800e32c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800e32e:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800e332:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800e334:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800e338:	2300      	movs	r3, #0
 800e33a:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	e000ef30 	.word	0xe000ef30
 800e34c:	00000000 	.word	0x00000000

0800e350 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800e350:	b598      	push	{r3, r4, r7, lr}
 800e352:	2320      	movs	r3, #32
 800e354:	af00      	add	r7, sp, #0
 800e356:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800e35a:	4b11      	ldr	r3, [pc, #68]	; (800e3a0 <_port_irq_epilogue+0x50>)
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800e362:	d102      	bne.n	800e36a <_port_irq_epilogue+0x1a>
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	bd98      	pop	{r3, r4, r7, pc}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800e36a:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800e36e:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800e372:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <_port_irq_epilogue+0x54>)
    ctxp->xpsr = (regarm_t)0x01000000;
 800e374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	f844 3c08 	str.w	r3, [r4, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 800e37e:	f844 2c4c 	str.w	r2, [r4, #-76]
    ctxp--;
 800e382:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800e386:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800e38a:	f7ff fa21 	bl	800d7d0 <chSchIsPreemptionRequired>
 800e38e:	b118      	cbz	r0, 800e398 <_port_irq_epilogue+0x48>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <_port_irq_epilogue+0x58>)
 800e392:	f844 3c50 	str.w	r3, [r4, #-80]
 800e396:	bd98      	pop	{r3, r4, r7, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800e398:	4b04      	ldr	r3, [pc, #16]	; (800e3ac <_port_irq_epilogue+0x5c>)
 800e39a:	f844 3c50 	str.w	r3, [r4, #-80]
 800e39e:	bd98      	pop	{r3, r4, r7, pc}
 800e3a0:	e000ed00 	.word	0xe000ed00
 800e3a4:	e000ef30 	.word	0xe000ef30
 800e3a8:	0800c139 	.word	0x0800c139
 800e3ac:	0800c13c 	.word	0x0800c13c

0800e3b0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800e3b0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800e3b2:	f001 f905 	bl	800f5c0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800e3b6:	480b      	ldr	r0, [pc, #44]	; (800e3e4 <halInit+0x34>)
 800e3b8:	f001 fc4a 	bl	800fc50 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800e3bc:	f000 f820 	bl	800e400 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800e3c0:	f000 f8a6 	bl	800e510 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800e3c4:	f000 f91c 	bl	800e600 <icuInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 800e3c8:	f000 fb22 	bl	800ea10 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 800e3cc:	f000 fb30 	bl	800ea30 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800e3d0:	f000 fb6e 	bl	800eab0 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800e3d4:	f000 fa0c 	bl	800e7f0 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800e3d8:	f003 f9da 	bl	8011790 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800e3dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 800e3e0:	f000 b806 	b.w	800e3f0 <stInit>
 800e3e4:	0802eba0 	.word	0x0802eba0
	...

0800e3f0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800e3f0:	f001 b98e 	b.w	800f710 <st_lld_init>
	...

0800e400 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800e400:	f001 baf6 	b.w	800f9f0 <can_lld_init>
	...

0800e410 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800e410:	b4f0      	push	{r4, r5, r6, r7}

  canp->state    = CAN_STOP;
 800e412:	2201      	movs	r2, #1
  canp->config   = NULL;
 800e414:	2300      	movs	r3, #0
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800e416:	f100 0718 	add.w	r7, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800e41a:	f100 061c 	add.w	r6, r0, #28
  osalEventObjectInit(&canp->error_event);
 800e41e:	f100 0520 	add.w	r5, r0, #32
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800e422:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800e426:	f100 0128 	add.w	r1, r0, #40	; 0x28
  canp->state    = CAN_STOP;
 800e42a:	7002      	strb	r2, [r0, #0]
  canp->config   = NULL;
 800e42c:	6043      	str	r3, [r0, #4]
  osalThreadQueueObjectInit(&canp->txqueue);
 800e42e:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800e432:	f100 0310 	add.w	r3, r0, #16
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800e436:	6187      	str	r7, [r0, #24]
 800e438:	61c6      	str	r6, [r0, #28]
 800e43a:	6205      	str	r5, [r0, #32]
 800e43c:	6244      	str	r4, [r0, #36]	; 0x24
 800e43e:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_next = (thread_t *)tqp;
 800e440:	6082      	str	r2, [r0, #8]
  tqp->p_prev = (thread_t *)tqp;
 800e442:	60c2      	str	r2, [r0, #12]
  tqp->p_next = (thread_t *)tqp;
 800e444:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800e446:	6143      	str	r3, [r0, #20]
#endif
}
 800e448:	bcf0      	pop	{r4, r5, r6, r7}
 800e44a:	4770      	bx	lr
 800e44c:	0000      	movs	r0, r0
	...

0800e450 <canStart>:
 * @param[in] config    pointer to the @p CANConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void canStart(CANDriver *canp, const CANConfig *config) {
 800e450:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800e452:	2320      	movs	r3, #32
 800e454:	4604      	mov	r4, r0
 800e456:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 800e45a:	2302      	movs	r3, #2
 800e45c:	7003      	strb	r3, [r0, #0]
  canp->config = config;
 800e45e:	6041      	str	r1, [r0, #4]

  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);
 800e460:	f001 fade 	bl	800fa20 <can_lld_start>

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 800e464:	2303      	movs	r3, #3
 800e466:	7023      	strb	r3, [r4, #0]
 800e468:	2300      	movs	r3, #0
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	bd10      	pop	{r4, pc}

0800e470 <canTransmit>:
 * @api
 */
msg_t canTransmit(CANDriver *canp,
                  canmbx_t mailbox,
                  const CANTxFrame *ctfp,
                  systime_t timeout) {
 800e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	461f      	mov	r7, r3
 800e476:	4604      	mov	r4, r0
 800e478:	460d      	mov	r5, r1
 800e47a:	4690      	mov	r8, r2
 800e47c:	2320      	movs	r3, #32
 800e47e:	f383 8811 	msr	BASEPRI, r3
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");
  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
 800e482:	f100 0608 	add.w	r6, r0, #8
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 800e486:	7823      	ldrb	r3, [r4, #0]
 800e488:	2b04      	cmp	r3, #4
 800e48a:	4629      	mov	r1, r5
 800e48c:	4620      	mov	r0, r4
 800e48e:	d002      	beq.n	800e496 <canTransmit+0x26>
 800e490:	f001 fafe 	bl	800fa90 <can_lld_is_tx_empty>
 800e494:	b950      	cbnz	r0, 800e4ac <canTransmit+0x3c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800e496:	4639      	mov	r1, r7
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff fb09 	bl	800dab0 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d0f1      	beq.n	800e486 <canTransmit+0x16>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f383 8811 	msr	BASEPRI, r3
      osalSysUnlock();
      return msg;
 800e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4642      	mov	r2, r8
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	f001 fb0d 	bl	800fad0 <can_lld_transmit>
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	f380 8811 	msr	BASEPRI, r0
  osalSysUnlock();
  return MSG_OK;
}
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e4c0 <canReceive>:
 * @api
 */
msg_t canReceive(CANDriver *canp,
                 canmbx_t mailbox,
                 CANRxFrame *crfp,
                 systime_t timeout) {
 800e4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c4:	461f      	mov	r7, r3
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	460d      	mov	r5, r1
 800e4ca:	4690      	mov	r8, r2
 800e4cc:	2320      	movs	r3, #32
 800e4ce:	f383 8811 	msr	BASEPRI, r3
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");
  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
 800e4d2:	f100 0610 	add.w	r6, r0, #16
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 800e4d6:	7823      	ldrb	r3, [r4, #0]
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	4629      	mov	r1, r5
 800e4dc:	4620      	mov	r0, r4
 800e4de:	d002      	beq.n	800e4e6 <canReceive+0x26>
 800e4e0:	f001 fb36 	bl	800fb50 <can_lld_is_rx_nonempty>
 800e4e4:	b950      	cbnz	r0, 800e4fc <canReceive+0x3c>
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f7ff fae1 	bl	800dab0 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d0f1      	beq.n	800e4d6 <canReceive+0x16>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f383 8811 	msr	BASEPRI, r3
      osalSysUnlock();
      return msg;
 800e4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  can_lld_receive(canp, mailbox, crfp);
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	4642      	mov	r2, r8
 800e500:	4629      	mov	r1, r5
 800e502:	f001 fb45 	bl	800fb90 <can_lld_receive>
 800e506:	2000      	movs	r0, #0
 800e508:	f380 8811 	msr	BASEPRI, r0
  osalSysUnlock();
  return MSG_OK;
}
 800e50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e510 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800e510:	f001 be1e 	b.w	8010150 <i2c_lld_init>
	...

0800e520 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800e520:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800e522:	2300      	movs	r3, #0
  i2cp->state  = I2C_STOP;
 800e524:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800e526:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800e528:	300c      	adds	r0, #12
 800e52a:	f7ff bb91 	b.w	800dc50 <chMtxObjectInit>
 800e52e:	bf00      	nop

0800e530 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 800e530:	b510      	push	{r4, lr}
 800e532:	2320      	movs	r3, #32
 800e534:	4604      	mov	r4, r0
 800e536:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800e53a:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 800e53c:	f001 fe20 	bl	8010180 <i2c_lld_start>
  i2cp->state = I2C_READY;
 800e540:	2302      	movs	r3, #2
 800e542:	7023      	strb	r3, [r4, #0]
 800e544:	2300      	movs	r3, #0
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	bd10      	pop	{r4, pc}
 800e54c:	0000      	movs	r0, r0
	...

0800e550 <i2cStop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cStop(I2CDriver *i2cp) {
 800e550:	b510      	push	{r4, lr}
 800e552:	2320      	movs	r3, #32
 800e554:	4604      	mov	r4, r0
 800e556:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(i2cp != NULL);
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2c_lld_stop(i2cp);
 800e55a:	f001 fec9 	bl	80102f0 <i2c_lld_stop>
  i2cp->state = I2C_STOP;
 800e55e:	2301      	movs	r3, #1
 800e560:	7023      	strb	r3, [r4, #0]
 800e562:	2300      	movs	r3, #0
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	bf00      	nop
 800e56c:	0000      	movs	r0, r0
	...

0800e570 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
 800e570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e572:	b085      	sub	sp, #20
 800e574:	4604      	mov	r4, r0
 800e576:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e578:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800e57a:	f04f 0e20 	mov.w	lr, #32
 800e57e:	f38e 8811 	msr	BASEPRI, lr

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 800e582:	f04f 0e03 	mov.w	lr, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800e586:	9601      	str	r6, [sp, #4]
  i2cp->errors = I2C_NO_ERROR;
 800e588:	2500      	movs	r5, #0
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800e58a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e58c:	9702      	str	r7, [sp, #8]
 800e58e:	9600      	str	r6, [sp, #0]
  i2cp->errors = I2C_NO_ERROR;
 800e590:	6085      	str	r5, [r0, #8]
  i2cp->state = I2C_ACTIVE_TX;
 800e592:	f880 e000 	strb.w	lr, [r0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800e596:	f001 ff33 	bl	8010400 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800e59a:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 800e59c:	bf0c      	ite	eq
 800e59e:	2305      	moveq	r3, #5
  }
  else {
    i2cp->state = I2C_READY;
 800e5a0:	2302      	movne	r3, #2
 800e5a2:	7023      	strb	r3, [r4, #0]
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800e5aa:	b005      	add	sp, #20
 800e5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ae:	bf00      	nop

0800e5b0 <i2cMasterReceiveTimeout>:
 */
msg_t i2cMasterReceiveTimeout(I2CDriver *i2cp,
                              i2caddr_t addr,
                              uint8_t *rxbuf,
                              size_t rxbytes,
                              systime_t timeout){
 800e5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	9f08      	ldr	r7, [sp, #32]
 800e5b8:	2520      	movs	r5, #32
 800e5ba:	f385 8811 	msr	BASEPRI, r5
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800e5be:	2600      	movs	r6, #0
  i2cp->state = I2C_ACTIVE_RX;
 800e5c0:	2504      	movs	r5, #4
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 800e5c2:	9700      	str	r7, [sp, #0]
  i2cp->errors = I2C_NO_ERROR;
 800e5c4:	6086      	str	r6, [r0, #8]
  i2cp->state = I2C_ACTIVE_RX;
 800e5c6:	7005      	strb	r5, [r0, #0]
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 800e5c8:	f001 feda 	bl	8010380 <i2c_lld_master_receive_timeout>
  if (rdymsg == MSG_TIMEOUT) {
 800e5cc:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 800e5ce:	bf0c      	ite	eq
 800e5d0:	2305      	moveq	r3, #5
  }
  else {
    i2cp->state = I2C_READY;
 800e5d2:	2302      	movne	r3, #2
 800e5d4:	7023      	strb	r3, [r4, #0]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800e5dc:	b003      	add	sp, #12
 800e5de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5e0 <i2cAcquireBus>:
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 800e5e0:	300c      	adds	r0, #12
 800e5e2:	f7ff bba5 	b.w	800dd30 <chMtxLock>
 800e5e6:	bf00      	nop
	...

0800e5f0 <i2cReleaseBus>:
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	f7ff bbad 	b.w	800dd50 <chMtxUnlock>
 800e5f6:	bf00      	nop
	...

0800e600 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800e600:	f002 bdce 	b.w	80111a0 <icu_lld_init>
	...

0800e610 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800e610:	2201      	movs	r2, #1
  icup->config = NULL;
 800e612:	2300      	movs	r3, #0
  icup->state  = ICU_STOP;
 800e614:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800e616:	6043      	str	r3, [r0, #4]
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	0000      	movs	r0, r0
	...

0800e620 <icuStart>:
 * @param[in] icup      pointer to the @p ICUDriver object
 * @param[in] config    pointer to the @p ICUConfig object
 *
 * @api
 */
void icuStart(ICUDriver *icup, const ICUConfig *config) {
 800e620:	b510      	push	{r4, lr}
 800e622:	2320      	movs	r3, #32
 800e624:	4604      	mov	r4, r0
 800e626:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 800e62a:	6041      	str	r1, [r0, #4]
  icu_lld_start(icup);
 800e62c:	f002 fdc8 	bl	80111c0 <icu_lld_start>
  icup->state = ICU_READY;
 800e630:	2302      	movs	r3, #2
 800e632:	7023      	strb	r3, [r4, #0]
 800e634:	2300      	movs	r3, #0
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	bd10      	pop	{r4, pc}
 800e63c:	0000      	movs	r0, r0
	...

0800e640 <icuStop>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStop(ICUDriver *icup) {
 800e640:	b510      	push	{r4, lr}
 800e642:	2320      	movs	r3, #32
 800e644:	4604      	mov	r4, r0
 800e646:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icu_lld_stop(icup);
 800e64a:	f002 fe19 	bl	8011280 <icu_lld_stop>
  icup->state = ICU_STOP;
 800e64e:	2301      	movs	r3, #1
 800e650:	7023      	strb	r3, [r4, #0]
 800e652:	2300      	movs	r3, #0
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	bf00      	nop
 800e65c:	0000      	movs	r0, r0
	...

0800e660 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 800e660:	b510      	push	{r4, lr}
 800e662:	2320      	movs	r3, #32
 800e664:	4604      	mov	r4, r0
 800e666:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 800e66a:	f002 fe29 	bl	80112c0 <icu_lld_start_capture>
 800e66e:	2303      	movs	r3, #3
 800e670:	7023      	strb	r3, [r4, #0]
 800e672:	2300      	movs	r3, #0
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	bd10      	pop	{r4, pc}
 800e67a:	bf00      	nop
 800e67c:	0000      	movs	r0, r0
	...

0800e680 <icuEnableNotifications>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuEnableNotifications(ICUDriver *icup) {
 800e680:	b508      	push	{r3, lr}
 800e682:	2320      	movs	r3, #32
 800e684:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800e688:	f002 fe2a 	bl	80112e0 <icu_lld_enable_notifications>
 800e68c:	2300      	movs	r3, #0
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	bd08      	pop	{r3, pc}
	...

0800e6a0 <onotify>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 800e6a0:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 800e6a2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800e6a4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800e6a8:	6813      	ldr	r3, [r2, #0]
 800e6aa:	7819      	ldrb	r1, [r3, #0]
 800e6ac:	2904      	cmp	r1, #4
 800e6ae:	d000      	beq.n	800e6b2 <onotify+0x12>
 800e6b0:	bd10      	pop	{r4, pc}
 800e6b2:	7a21      	ldrb	r1, [r4, #8]
 800e6b4:	2902      	cmp	r1, #2
 800e6b6:	d1fb      	bne.n	800e6b0 <onotify+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800e6b8:	7911      	ldrb	r1, [r2, #4]
 800e6ba:	891a      	ldrh	r2, [r3, #8]
 800e6bc:	2301      	movs	r3, #1
 800e6be:	408b      	lsls	r3, r1
 800e6c0:	401a      	ands	r2, r3
 800e6c2:	d1f5      	bne.n	800e6b0 <onotify+0x10>
  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800e6c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e6c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e6ca:	1a1b      	subs	r3, r3, r0
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800e6cc:	1a5b      	subs	r3, r3, r1
 800e6ce:	d0ef      	beq.n	800e6b0 <onotify+0x10>
 800e6d0:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 800e6d4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800e6d8:	7911      	ldrb	r1, [r2, #4]
 800e6da:	6810      	ldr	r0, [r2, #0]
 800e6dc:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800e6e0:	f000 fa4e 	bl	800eb80 <usbPrepareQueuedTransmit>
 800e6e4:	2320      	movs	r3, #32
 800e6e6:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800e6ea:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    }
  }
}
 800e6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800e6f2:	7919      	ldrb	r1, [r3, #4]
 800e6f4:	6818      	ldr	r0, [r3, #0]
 800e6f6:	f000 ba6b 	b.w	800ebd0 <usbStartTransmitI>
 800e6fa:	bf00      	nop
 800e6fc:	0000      	movs	r0, r0
	...

0800e700 <inotify>:
static void inotify(io_queue_t *qp) {
 800e700:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = qGetLink(qp);
 800e702:	6a04      	ldr	r4, [r0, #32]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800e704:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800e708:	6813      	ldr	r3, [r2, #0]
 800e70a:	7819      	ldrb	r1, [r3, #0]
 800e70c:	2904      	cmp	r1, #4
 800e70e:	d000      	beq.n	800e712 <inotify+0x12>
 800e710:	bd38      	pop	{r3, r4, r5, pc}
 800e712:	7a21      	ldrb	r1, [r4, #8]
 800e714:	2902      	cmp	r1, #2
 800e716:	d1fb      	bne.n	800e710 <inotify+0x10>
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800e718:	7950      	ldrb	r0, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800e71a:	8959      	ldrh	r1, [r3, #10]
 800e71c:	2201      	movs	r2, #1
 800e71e:	4082      	lsls	r2, r0
 800e720:	400a      	ands	r2, r1
 800e722:	d1f5      	bne.n	800e710 <inotify+0x10>
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800e724:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800e728:	69a1      	ldr	r1, [r4, #24]
 800e72a:	69e0      	ldr	r0, [r4, #28]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	6965      	ldr	r5, [r4, #20]
 800e730:	8a5b      	ldrh	r3, [r3, #18]
 800e732:	1a41      	subs	r1, r0, r1
 800e734:	1b49      	subs	r1, r1, r5
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800e736:	428b      	cmp	r3, r1
 800e738:	d8ea      	bhi.n	800e710 <inotify+0x10>
 800e73a:	f382 8811 	msr	BASEPRI, r2
      n = (n / maxsize) * maxsize;
 800e73e:	fbb1 f1f3 	udiv	r1, r1, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 800e742:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800e746:	fb03 f301 	mul.w	r3, r3, r1
 800e74a:	6810      	ldr	r0, [r2, #0]
 800e74c:	7951      	ldrb	r1, [r2, #5]
 800e74e:	f104 020c 	add.w	r2, r4, #12
 800e752:	f000 fa05 	bl	800eb60 <usbPrepareQueuedReceive>
 800e756:	2320      	movs	r3, #32
 800e758:	f383 8811 	msr	BASEPRI, r3
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800e75c:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800e760:	7959      	ldrb	r1, [r3, #5]
 800e762:	6818      	ldr	r0, [r3, #0]
}
 800e764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800e768:	f000 ba1a 	b.w	800eba0 <usbStartReceiveI>
 800e76c:	0000      	movs	r0, r0
	...

0800e770 <readt>:
  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 800e770:	300c      	adds	r0, #12
 800e772:	f7ff bc25 	b.w	800dfc0 <chIQReadTimeout>
 800e776:	bf00      	nop
	...

0800e780 <read>:
  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 800e780:	300c      	adds	r0, #12
 800e782:	f04f 33ff 	mov.w	r3, #4294967295
 800e786:	f7ff bc1b 	b.w	800dfc0 <chIQReadTimeout>
 800e78a:	bf00      	nop
 800e78c:	0000      	movs	r0, r0
	...

0800e790 <writet>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 800e790:	3030      	adds	r0, #48	; 0x30
 800e792:	f7ff bca5 	b.w	800e0e0 <chOQWriteTimeout>
 800e796:	bf00      	nop
	...

0800e7a0 <write>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 800e7a0:	3030      	adds	r0, #48	; 0x30
 800e7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a6:	f7ff bc9b 	b.w	800e0e0 <chOQWriteTimeout>
 800e7aa:	bf00      	nop
 800e7ac:	0000      	movs	r0, r0
	...

0800e7b0 <gett>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 800e7b0:	300c      	adds	r0, #12
 800e7b2:	f7ff bbdd 	b.w	800df70 <chIQGetTimeout>
 800e7b6:	bf00      	nop
	...

0800e7c0 <get>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 800e7c0:	300c      	adds	r0, #12
 800e7c2:	f04f 31ff 	mov.w	r1, #4294967295
 800e7c6:	f7ff bbd3 	b.w	800df70 <chIQGetTimeout>
 800e7ca:	bf00      	nop
 800e7cc:	0000      	movs	r0, r0
	...

0800e7d0 <putt>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 800e7d0:	3030      	adds	r0, #48	; 0x30
 800e7d2:	f7ff bc55 	b.w	800e080 <chOQPutTimeout>
 800e7d6:	bf00      	nop
	...

0800e7e0 <put>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 800e7e0:	3030      	adds	r0, #48	; 0x30
 800e7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e6:	f7ff bc4b 	b.w	800e080 <chOQPutTimeout>
 800e7ea:	bf00      	nop
 800e7ec:	0000      	movs	r0, r0
	...

0800e7f0 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
	...

0800e800 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800e800:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 800e802:	4603      	mov	r3, r0
 800e804:	4a0e      	ldr	r2, [pc, #56]	; (800e840 <sduObjectInit+0x40>)
 800e806:	f843 2b04 	str.w	r2, [r3], #4
void sduObjectInit(SerialUSBDriver *sdup) {
 800e80a:	b082      	sub	sp, #8
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800e80c:	2201      	movs	r2, #1
void sduObjectInit(SerialUSBDriver *sdup) {
 800e80e:	4604      	mov	r4, r0
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800e810:	9000      	str	r0, [sp, #0]
 800e812:	f100 0154 	add.w	r1, r0, #84	; 0x54
 800e816:	6043      	str	r3, [r0, #4]
  sdup->state = SDU_STOP;
 800e818:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800e81a:	4b0a      	ldr	r3, [pc, #40]	; (800e844 <sduObjectInit+0x44>)
 800e81c:	300c      	adds	r0, #12
 800e81e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e822:	f7ff fb85 	bl	800df30 <chIQObjectInit>
  oqObjectInit(&sdup->oqueue, sdup->ob, SERIAL_USB_BUFFERS_SIZE, onotify, sdup);
 800e826:	9400      	str	r4, [sp, #0]
 800e828:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800e82c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e830:	4b05      	ldr	r3, [pc, #20]	; (800e848 <sduObjectInit+0x48>)
 800e832:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e836:	f7ff fc03 	bl	800e040 <chOQObjectInit>
}
 800e83a:	b002      	add	sp, #8
 800e83c:	bd10      	pop	{r4, pc}
 800e83e:	bf00      	nop
 800e840:	0802ea30 	.word	0x0802ea30
 800e844:	0800e701 	.word	0x0800e701
 800e848:	0800e6a1 	.word	0x0800e6a1
 800e84c:	00000000 	.word	0x00000000

0800e850 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 800e850:	680b      	ldr	r3, [r1, #0]
 800e852:	2220      	movs	r2, #32
 800e854:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800e858:	790a      	ldrb	r2, [r1, #4]
 800e85a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e85e:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800e860:	794a      	ldrb	r2, [r1, #5]
 800e862:	3209      	adds	r2, #9
 800e864:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 800e868:	798a      	ldrb	r2, [r1, #6]
 800e86a:	b112      	cbz	r2, 800e872 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800e86c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e870:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 800e872:	2302      	movs	r3, #2
 800e874:	7203      	strb	r3, [r0, #8]
  sdup->config = config;
 800e876:	f8c0 1254 	str.w	r1, [r0, #596]	; 0x254
 800e87a:	2300      	movs	r3, #0
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
	...

0800e890 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800e890:	b570      	push	{r4, r5, r6, lr}
  USBDriver *usbp = sdup->config->usbp;
 800e892:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  iqResetI(&sdup->iqueue);
 800e896:	f100 060c 	add.w	r6, r0, #12
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800e89a:	4604      	mov	r4, r0
  iqResetI(&sdup->iqueue);
 800e89c:	4630      	mov	r0, r6
  USBDriver *usbp = sdup->config->usbp;
 800e89e:	681d      	ldr	r5, [r3, #0]
  iqResetI(&sdup->iqueue);
 800e8a0:	f7ff fb56 	bl	800df50 <chIQResetI>
  oqResetI(&sdup->oqueue);
 800e8a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e8a8:	f7ff fbda 	bl	800e060 <chOQResetI>
  chEvtBroadcastFlagsI(esp, flags);
 800e8ac:	1d20      	adds	r0, r4, #4
 800e8ae:	2101      	movs	r1, #1
 800e8b0:	f7ff face 	bl	800de50 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800e8b4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800e8b8:	7959      	ldrb	r1, [r3, #5]
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800e8ba:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800e8be:	4628      	mov	r0, r5
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800e8c0:	68db      	ldr	r3, [r3, #12]
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800e8c2:	4632      	mov	r2, r6
 800e8c4:	8a5b      	ldrh	r3, [r3, #18]
 800e8c6:	f000 f94b 	bl	800eb60 <usbPrepareQueuedReceive>
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800e8ca:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	7959      	ldrb	r1, [r3, #5]
}
 800e8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800e8d6:	f000 b963 	b.w	800eba0 <usbStartReceiveI>
 800e8da:	bf00      	nop
 800e8dc:	0000      	movs	r0, r0
	...

0800e8e0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800e8e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e8e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8e8:	2b20      	cmp	r3, #32
 800e8ea:	d001      	beq.n	800e8f0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800e8ec:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800e8ee:	4770      	bx	lr
    switch (usbp->setup[1]) {
 800e8f0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800e8f4:	2b21      	cmp	r3, #33	; 0x21
 800e8f6:	d003      	beq.n	800e900 <sduRequestsHook+0x20>
 800e8f8:	2b22      	cmp	r3, #34	; 0x22
 800e8fa:	d009      	beq.n	800e910 <sduRequestsHook+0x30>
 800e8fc:	2b20      	cmp	r3, #32
 800e8fe:	d1f5      	bne.n	800e8ec <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800e900:	4b06      	ldr	r3, [pc, #24]	; (800e91c <sduRequestsHook+0x3c>)
 800e902:	6383      	str	r3, [r0, #56]	; 0x38
 800e904:	2207      	movs	r2, #7
 800e906:	2300      	movs	r3, #0
 800e908:	63c2      	str	r2, [r0, #60]	; 0x3c
 800e90a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800e90c:	2001      	movs	r0, #1
 800e90e:	4770      	bx	lr
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e910:	2300      	movs	r3, #0
 800e912:	6383      	str	r3, [r0, #56]	; 0x38
 800e914:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e916:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800e918:	2001      	movs	r0, #1
 800e91a:	4770      	bx	lr
 800e91c:	20001000 	.word	0x20001000

0800e920 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800e920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800e922:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800e926:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800e928:	b1bc      	cbz	r4, 800e95a <sduDataTransmitted+0x3a>
 800e92a:	460e      	mov	r6, r1
 800e92c:	4605      	mov	r5, r0
 800e92e:	2720      	movs	r7, #32
 800e930:	f387 8811 	msr	BASEPRI, r7
 800e934:	2108      	movs	r1, #8
 800e936:	1d20      	adds	r0, r4, #4
 800e938:	f7ff fa8a 	bl	800de50 <chEvtBroadcastFlagsI>
  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800e93c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e93e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e940:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e942:	1a5b      	subs	r3, r3, r1

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800e944:	1a9b      	subs	r3, r3, r2
 800e946:	d110      	bne.n	800e96a <sduDataTransmitted+0x4a>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800e948:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	695a      	ldr	r2, [r3, #20]
 800e950:	6852      	ldr	r2, [r2, #4]
 800e952:	b91a      	cbnz	r2, 800e95c <sduDataTransmitted+0x3c>
 800e954:	2300      	movs	r3, #0
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800e95c:	8a1b      	ldrh	r3, [r3, #16]
 800e95e:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800e960:	4013      	ands	r3, r2
 800e962:	d1f7      	bne.n	800e954 <sduDataTransmitted+0x34>
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	e002      	b.n	800e970 <sduDataTransmitted+0x50>
 800e96a:	2200      	movs	r2, #0
 800e96c:	f382 8811 	msr	BASEPRI, r2
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800e970:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800e974:	4631      	mov	r1, r6
 800e976:	4628      	mov	r0, r5
 800e978:	f000 f902 	bl	800eb80 <usbPrepareQueuedTransmit>
 800e97c:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 800e980:	4631      	mov	r1, r6
 800e982:	4628      	mov	r0, r5
 800e984:	f000 f924 	bl	800ebd0 <usbStartTransmitI>
 800e988:	e7e4      	b.n	800e954 <sduDataTransmitted+0x34>
 800e98a:	bf00      	nop
 800e98c:	0000      	movs	r0, r0
	...

0800e990 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800e994:	f101 0309 	add.w	r3, r1, #9
 800e998:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800e99c:	b1be      	cbz	r6, 800e9ce <sduDataReceived+0x3e>
 800e99e:	4680      	mov	r8, r0
 800e9a0:	460f      	mov	r7, r1
 800e9a2:	f04f 0920 	mov.w	r9, #32
 800e9a6:	f389 8811 	msr	BASEPRI, r9
 800e9aa:	2104      	movs	r1, #4
 800e9ac:	1870      	adds	r0, r6, r1
 800e9ae:	f7ff fa4f 	bl	800de50 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 800e9b2:	eb08 0387 	add.w	r3, r8, r7, lsl #2
  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800e9b6:	69f5      	ldr	r5, [r6, #28]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	69b4      	ldr	r4, [r6, #24]
 800e9bc:	6972      	ldr	r2, [r6, #20]
 800e9be:	8a5b      	ldrh	r3, [r3, #18]
 800e9c0:	1b2c      	subs	r4, r5, r4
 800e9c2:	1aa4      	subs	r4, r4, r2
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800e9c4:	42a3      	cmp	r3, r4
 800e9c6:	d904      	bls.n	800e9d2 <sduDataReceived+0x42>
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f382 8811 	msr	BASEPRI, r2
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 800e9d8:	fbb4 f4f3 	udiv	r4, r4, r3
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 800e9dc:	f106 020c 	add.w	r2, r6, #12
 800e9e0:	fb03 f304 	mul.w	r3, r3, r4
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	4640      	mov	r0, r8
 800e9e8:	f000 f8ba 	bl	800eb60 <usbPrepareQueuedReceive>
 800e9ec:	f389 8811 	msr	BASEPRI, r9

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	4640      	mov	r0, r8
 800e9f4:	f000 f8d4 	bl	800eba0 <usbStartReceiveI>
 800e9f8:	e7e6      	b.n	800e9c8 <sduDataReceived+0x38>
 800e9fa:	bf00      	nop
 800e9fc:	0000      	movs	r0, r0
	...

0800ea00 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
	...

0800ea10 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 800ea10:	f002 bb4e 	b.w	80110b0 <spi_lld_init>
	...

0800ea20 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 800ea20:	2300      	movs	r3, #0
  spip->state = SPI_STOP;
 800ea22:	2201      	movs	r2, #1
 800ea24:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 800ea26:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800ea28:	6083      	str	r3, [r0, #8]
  chMtxObjectInit(mp);
 800ea2a:	300c      	adds	r0, #12
 800ea2c:	f7ff b910 	b.w	800dc50 <chMtxObjectInit>

0800ea30 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 800ea30:	f002 bd6e 	b.w	8011510 <uart_lld_init>
	...

0800ea40 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 800ea40:	2300      	movs	r3, #0
  uartp->state   = UART_STOP;
 800ea42:	2201      	movs	r2, #1
 800ea44:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 800ea46:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 800ea48:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800ea4a:	6043      	str	r3, [r0, #4]
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop

0800ea50 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 800ea50:	b510      	push	{r4, lr}
 800ea52:	2320      	movs	r3, #32
 800ea54:	4604      	mov	r4, r0
 800ea56:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 800ea5a:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 800ea5c:	f002 fd80 	bl	8011560 <uart_lld_start>
  uartp->state = UART_READY;
 800ea60:	2302      	movs	r3, #2
 800ea62:	7023      	strb	r3, [r4, #0]
 800ea64:	2300      	movs	r3, #0
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	bd10      	pop	{r4, pc}
 800ea6c:	0000      	movs	r0, r0
	...

0800ea70 <uartStop>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @api
 */
void uartStop(UARTDriver *uartp) {
 800ea70:	b510      	push	{r4, lr}
 800ea72:	2320      	movs	r3, #32
 800ea74:	4604      	mov	r4, r0
 800ea76:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uart_lld_stop(uartp);
 800ea7a:	f002 fe21 	bl	80116c0 <uart_lld_stop>
  uartp->state = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 800ea7e:	2300      	movs	r3, #0
  uartp->state = UART_STOP;
 800ea80:	2201      	movs	r2, #1
 800ea82:	7022      	strb	r2, [r4, #0]
  uartp->txstate = UART_TX_IDLE;
 800ea84:	7063      	strb	r3, [r4, #1]
  uartp->rxstate = UART_RX_IDLE;
 800ea86:	70a3      	strb	r3, [r4, #2]
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	bd10      	pop	{r4, pc}
 800ea8e:	bf00      	nop

0800ea90 <uartStartSend>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void uartStartSend(UARTDriver *uartp, size_t n, const void *txbuf) {
 800ea90:	b510      	push	{r4, lr}
 800ea92:	2320      	movs	r3, #32
 800ea94:	4604      	mov	r4, r0
 800ea96:	f383 8811 	msr	BASEPRI, r3
             
  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");

  uart_lld_start_send(uartp, n, txbuf);
 800ea9a:	f002 fe41 	bl	8011720 <uart_lld_start_send>
  uartp->txstate = UART_TX_ACTIVE;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	7063      	strb	r3, [r4, #1]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	bd10      	pop	{r4, pc}
 800eaaa:	bf00      	nop
 800eaac:	0000      	movs	r0, r0
	...

0800eab0 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800eab0:	f001 bef6 	b.w	80108a0 <usb_lld_init>
	...

0800eac0 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800eac0:	2300      	movs	r3, #0
  usbp->state        = USB_STOP;
 800eac2:	2201      	movs	r2, #1
 800eac4:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800eac6:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800eac8:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800eaca:	6283      	str	r3, [r0, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 800eacc:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800eace:	62c3      	str	r3, [r0, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 800ead0:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800ead2:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800ead4:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800ead6:	8143      	strh	r3, [r0, #10]
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	0000      	movs	r0, r0
	...

0800eae0 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	2320      	movs	r3, #32
 800eae6:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800eaea:	2500      	movs	r5, #0
  usbp->config = config;
 800eaec:	6041      	str	r1, [r0, #4]
    usbp->epc[i] = NULL;
 800eaee:	60c5      	str	r5, [r0, #12]
 800eaf0:	6105      	str	r5, [r0, #16]
 800eaf2:	6145      	str	r5, [r0, #20]
 800eaf4:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 800eaf6:	f001 feeb 	bl	80108d0 <usb_lld_start>
  usbp->state = USB_READY;
 800eafa:	2302      	movs	r3, #2
 800eafc:	7023      	strb	r3, [r4, #0]
 800eafe:	f385 8811 	msr	BASEPRI, r5
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
	...

0800eb10 <usbStop>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @api
 */
void usbStop(USBDriver *usbp) {
 800eb10:	b510      	push	{r4, lr}
 800eb12:	2320      	movs	r3, #32
 800eb14:	4604      	mov	r4, r0
 800eb16:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY) ||
                (usbp->state == USB_SELECTED) || (usbp->state == USB_ACTIVE),
                "invalid state");
  usb_lld_stop(usbp);
 800eb1a:	f001 ff51 	bl	80109c0 <usb_lld_stop>
  usbp->state = USB_STOP;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	7023      	strb	r3, [r4, #0]
 800eb22:	2300      	movs	r3, #0
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	bd10      	pop	{r4, pc}
 800eb2a:	bf00      	nop
 800eb2c:	0000      	movs	r0, r0
	...

0800eb30 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800eb30:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
 800eb32:	b410      	push	{r4}
  if (epcp->in_state != NULL) {
 800eb34:	b12b      	cbz	r3, 800eb42 <usbInitEndpointI+0x12>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800eb36:	2400      	movs	r4, #0
 800eb38:	601c      	str	r4, [r3, #0]
 800eb3a:	605c      	str	r4, [r3, #4]
 800eb3c:	609c      	str	r4, [r3, #8]
 800eb3e:	60dc      	str	r4, [r3, #12]
 800eb40:	611c      	str	r4, [r3, #16]
  }
  if (epcp->out_state != NULL) {
 800eb42:	6993      	ldr	r3, [r2, #24]
 800eb44:	b12b      	cbz	r3, 800eb52 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800eb46:	2400      	movs	r4, #0
 800eb48:	601c      	str	r4, [r3, #0]
 800eb4a:	605c      	str	r4, [r3, #4]
 800eb4c:	609c      	str	r4, [r3, #8]
 800eb4e:	60dc      	str	r4, [r3, #12]
 800eb50:	611c      	str	r4, [r3, #16]
  }

  usbp->epc[ep] = epcp;
 800eb52:	eb00 0381 	add.w	r3, r0, r1, lsl #2

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 800eb56:	f85d 4b04 	ldr.w	r4, [sp], #4
  usbp->epc[ep] = epcp;
 800eb5a:	60da      	str	r2, [r3, #12]
  usb_lld_init_endpoint(usbp, ep);
 800eb5c:	f001 bfd0 	b.w	8010b00 <usb_lld_init_endpoint>

0800eb60 <usbPrepareQueuedReceive>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
 800eb60:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800eb62:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  osp->rxqueued           = true;
 800eb66:	2601      	movs	r6, #1
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800eb68:	68e4      	ldr	r4, [r4, #12]
 800eb6a:	69a4      	ldr	r4, [r4, #24]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800eb6c:	2500      	movs	r5, #0
  osp->mode.queue.rxqueue = iqp;
 800eb6e:	60e2      	str	r2, [r4, #12]
  osp->rxsize             = n;
 800eb70:	6063      	str	r3, [r4, #4]
  osp->rxqueued           = true;
 800eb72:	7026      	strb	r6, [r4, #0]
  osp->rxcnt              = 0;
 800eb74:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_receive(usbp, ep);
}
 800eb76:	bc70      	pop	{r4, r5, r6}
  usb_lld_prepare_receive(usbp, ep);
 800eb78:	f002 b8aa 	b.w	8010cd0 <usb_lld_prepare_receive>
 800eb7c:	0000      	movs	r0, r0
	...

0800eb80 <usbPrepareQueuedTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
 800eb80:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800eb82:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  isp->txqueued           = true;
 800eb86:	2601      	movs	r6, #1
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800eb88:	68e4      	ldr	r4, [r4, #12]
 800eb8a:	6964      	ldr	r4, [r4, #20]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800eb8c:	2500      	movs	r5, #0
  isp->mode.queue.txqueue = oqp;
 800eb8e:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 800eb90:	6063      	str	r3, [r4, #4]
  isp->txqueued           = true;
 800eb92:	7026      	strb	r6, [r4, #0]
  isp->txcnt              = 0;
 800eb94:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 800eb96:	bc70      	pop	{r4, r5, r6}
  usb_lld_prepare_transmit(usbp, ep);
 800eb98:	f002 b90a 	b.w	8010db0 <usb_lld_prepare_transmit>
 800eb9c:	0000      	movs	r0, r0
	...

0800eba0 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800eba0:	2201      	movs	r2, #1
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 800eba2:	b570      	push	{r4, r5, r6, lr}
  if (usbGetReceiveStatusI(usbp, ep)) {
 800eba4:	fa02 f301 	lsl.w	r3, r2, r1
 800eba8:	8944      	ldrh	r4, [r0, #10]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	ea14 0603 	ands.w	r6, r4, r3
 800ebb0:	d001      	beq.n	800ebb6 <usbStartReceiveI+0x16>
    return true;
 800ebb2:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800ebb6:	4323      	orrs	r3, r4
 800ebb8:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
 800ebba:	f002 fa11 	bl	8010fe0 <usb_lld_start_out>
  return false;
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	bd70      	pop	{r4, r5, r6, pc}
 800ebc2:	bf00      	nop
	...

0800ebd0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800ebd0:	2201      	movs	r2, #1
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 800ebd2:	b570      	push	{r4, r5, r6, lr}
  if (usbGetTransmitStatusI(usbp, ep)) {
 800ebd4:	fa02 f301 	lsl.w	r3, r2, r1
 800ebd8:	8904      	ldrh	r4, [r0, #8]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	ea14 0603 	ands.w	r6, r4, r3
 800ebe0:	d001      	beq.n	800ebe6 <usbStartTransmitI+0x16>
    return true;
 800ebe2:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800ebe6:	4323      	orrs	r3, r4
 800ebe8:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
 800ebea:	f002 fa09 	bl	8011000 <usb_lld_start_in>
  return false;
 800ebee:	4630      	mov	r0, r6
 800ebf0:	bd70      	pop	{r4, r5, r6, pc}
 800ebf2:	bf00      	nop
	...

0800ec00 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800ec00:	2200      	movs	r2, #0
  usbp->state         = USB_READY;
 800ec02:	2102      	movs	r1, #2
 800ec04:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800ec06:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800ec0a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800ec0e:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800ec12:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 800ec14:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800ec16:	60c2      	str	r2, [r0, #12]
 800ec18:	6102      	str	r2, [r0, #16]
 800ec1a:	6142      	str	r2, [r0, #20]
 800ec1c:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800ec1e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800ec22:	f001 bef5 	b.w	8010a10 <usb_lld_reset>
 800ec26:	bf00      	nop
	...

0800ec30 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800ec30:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800ec32:	2300      	movs	r3, #0
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800ec34:	4604      	mov	r4, r0
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800ec36:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800ec3a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800ec3e:	f002 f837 	bl	8010cb0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d036      	beq.n	800ecb8 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d032      	beq.n	800ecb8 <_usb_ep0setup+0x88>
 800ec52:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ec54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 800ec58:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800ec5c:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800ec60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800ec64:	42aa      	cmp	r2, r5
 800ec66:	bf2c      	ite	cs
 800ec68:	462a      	movcs	r2, r5
    usbp->ep0n = max;
 800ec6a:	63e2      	strcc	r2, [r4, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800ec6c:	0619      	lsls	r1, r3, #24
 800ec6e:	f100 80ab 	bmi.w	800edc8 <_usb_ep0setup+0x198>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800ec72:	2a00      	cmp	r2, #0
 800ec74:	f000 808b 	beq.w	800ed8e <_usb_ep0setup+0x15e>
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ec78:	68e3      	ldr	r3, [r4, #12]
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800ec7a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ec7c:	699b      	ldr	r3, [r3, #24]
  osp->rxqueued           = false;
 800ec7e:	2000      	movs	r0, #0
      usbp->ep0state = USB_EP0_RX;
 800ec80:	2104      	movs	r1, #4
 800ec82:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800ec86:	4601      	mov	r1, r0
  osp->mode.linear.rxbuf  = buf;
 800ec88:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800ec8a:	605a      	str	r2, [r3, #4]
  osp->rxqueued           = false;
 800ec8c:	7018      	strb	r0, [r3, #0]
  osp->rxcnt              = 0;
 800ec8e:	6098      	str	r0, [r3, #8]
  usb_lld_prepare_receive(usbp, ep);
 800ec90:	4620      	mov	r0, r4
 800ec92:	f002 f81d 	bl	8010cd0 <usb_lld_prepare_receive>
 800ec96:	2320      	movs	r3, #32
 800ec98:	f383 8811 	msr	BASEPRI, r3
  if (usbGetReceiveStatusI(usbp, ep)) {
 800ec9c:	8963      	ldrh	r3, [r4, #10]
 800ec9e:	f013 0101 	ands.w	r1, r3, #1
 800eca2:	d105      	bne.n	800ecb0 <_usb_ep0setup+0x80>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800eca4:	f043 0301 	orr.w	r3, r3, #1
 800eca8:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f002 f998 	bl	8010fe0 <usb_lld_start_out>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	f383 8811 	msr	BASEPRI, r3
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800ecb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ecbc:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	d011      	beq.n	800ece8 <_usb_ep0setup+0xb8>
      usb_lld_stall_in(usbp, 0);
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f002 f9c2 	bl	8011050 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800eccc:	2100      	movs	r1, #0
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f002 f9ae 	bl	8011030 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800ecd4:	6863      	ldr	r3, [r4, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	b113      	cbz	r3, 800ece0 <_usb_ep0setup+0xb0>
 800ecda:	2105      	movs	r1, #5
 800ecdc:	4620      	mov	r0, r4
 800ecde:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800ece0:	2306      	movs	r3, #6
 800ece2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800ece6:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 800ece8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ecec:	f003 057f 	and.w	r5, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 800ecf0:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ecf4:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800ecf8:	f000 80ef 	beq.w	800eeda <_usb_ep0setup+0x2aa>
 800ecfc:	d916      	bls.n	800ed2c <_usb_ep0setup+0xfc>
 800ecfe:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800ed02:	f000 80d1 	beq.w	800eea8 <_usb_ep0setup+0x278>
 800ed06:	d92f      	bls.n	800ed68 <_usb_ep0setup+0x138>
 800ed08:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800ed0c:	d076      	beq.n	800edfc <_usb_ep0setup+0x1cc>
 800ed0e:	f640 4202 	movw	r2, #3074	; 0xc02
 800ed12:	4295      	cmp	r5, r2
 800ed14:	f000 80f3 	beq.w	800eefe <_usb_ep0setup+0x2ce>
 800ed18:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ed1c:	d1d2      	bne.n	800ecc4 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800ed1e:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800ed22:	2501      	movs	r5, #1
 800ed24:	6426      	str	r6, [r4, #64]	; 0x40
 800ed26:	63a2      	str	r2, [r4, #56]	; 0x38
 800ed28:	63e5      	str	r5, [r4, #60]	; 0x3c
 800ed2a:	e795      	b.n	800ec58 <_usb_ep0setup+0x28>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ed2c:	2d02      	cmp	r5, #2
 800ed2e:	f000 80a4 	beq.w	800ee7a <_usb_ep0setup+0x24a>
 800ed32:	f240 8098 	bls.w	800ee66 <_usb_ep0setup+0x236>
 800ed36:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ed3a:	f000 8085 	beq.w	800ee48 <_usb_ep0setup+0x218>
 800ed3e:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800ed42:	d1bf      	bne.n	800ecc4 <_usb_ep0setup+0x94>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800ed44:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1bb      	bne.n	800ecc4 <_usb_ep0setup+0x94>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800ed4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ed50:	f013 010f 	ands.w	r1, r3, #15
 800ed54:	d015      	beq.n	800ed82 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800ed56:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800ed58:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800ed5a:	f100 80f7 	bmi.w	800ef4c <_usb_ep0setup+0x31c>
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800ed5e:	f002 f987 	bl	8011070 <usb_lld_clear_out>
 800ed62:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ed66:	e00c      	b.n	800ed82 <_usb_ep0setup+0x152>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ed68:	f240 3302 	movw	r3, #770	; 0x302
 800ed6c:	429d      	cmp	r5, r3
 800ed6e:	d058      	beq.n	800ee22 <_usb_ep0setup+0x1f2>
 800ed70:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800ed74:	d1a6      	bne.n	800ecc4 <_usb_ep0setup+0x94>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800ed76:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800ed7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ed7e:	f000 80d3 	beq.w	800ef28 <_usb_ep0setup+0x2f8>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800ed82:	2300      	movs	r3, #0
 800ed84:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed86:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ed88:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800ed8a:	0613      	lsls	r3, r2, #24
 800ed8c:	d42a      	bmi.n	800ede4 <_usb_ep0setup+0x1b4>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ed8e:	68e3      	ldr	r3, [r4, #12]
 800ed90:	695a      	ldr	r2, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800ed92:	2105      	movs	r1, #5
  isp->txqueued           = false;
 800ed94:	2300      	movs	r3, #0
      usbp->ep0state = USB_EP0_SENDING_STS;
 800ed96:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_transmit(usbp, ep);
 800ed9a:	4619      	mov	r1, r3
  isp->txqueued           = false;
 800ed9c:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 800ed9e:	60d3      	str	r3, [r2, #12]
  isp->txsize             = n;
 800eda0:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 800eda2:	6093      	str	r3, [r2, #8]
  usb_lld_prepare_transmit(usbp, ep);
 800eda4:	4620      	mov	r0, r4
 800eda6:	f002 f803 	bl	8010db0 <usb_lld_prepare_transmit>
 800edaa:	2320      	movs	r3, #32
 800edac:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800edb0:	8923      	ldrh	r3, [r4, #8]
 800edb2:	f013 0101 	ands.w	r1, r3, #1
 800edb6:	f47f af7b 	bne.w	800ecb0 <_usb_ep0setup+0x80>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800edba:	f043 0301 	orr.w	r3, r3, #1
 800edbe:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800edc0:	4620      	mov	r0, r4
 800edc2:	f002 f91d 	bl	8011000 <usb_lld_start_in>
 800edc6:	e773      	b.n	800ecb0 <_usb_ep0setup+0x80>
    if (usbp->ep0n != 0U) {
 800edc8:	b162      	cbz	r2, 800ede4 <_usb_ep0setup+0x1b4>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800edca:	68e3      	ldr	r3, [r4, #12]
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800edcc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800edce:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
 800edd0:	2000      	movs	r0, #0
      usbp->ep0state = USB_EP0_TX;
 800edd2:	2101      	movs	r1, #1
 800edd4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_transmit(usbp, ep);
 800edd8:	4601      	mov	r1, r0
  isp->mode.linear.txbuf  = buf;
 800edda:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800eddc:	605a      	str	r2, [r3, #4]
  isp->txqueued           = false;
 800edde:	7018      	strb	r0, [r3, #0]
  isp->txcnt              = 0;
 800ede0:	6098      	str	r0, [r3, #8]
 800ede2:	e7df      	b.n	800eda4 <_usb_ep0setup+0x174>
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ede4:	68e3      	ldr	r3, [r4, #12]
 800ede6:	699a      	ldr	r2, [r3, #24]
      usbp->ep0state = USB_EP0_WAITING_STS;
 800ede8:	2103      	movs	r1, #3
  osp->rxqueued           = false;
 800edea:	2300      	movs	r3, #0
      usbp->ep0state = USB_EP0_WAITING_STS;
 800edec:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800edf0:	4619      	mov	r1, r3
  osp->rxqueued           = false;
 800edf2:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800edf4:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800edf6:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800edf8:	6093      	str	r3, [r2, #8]
 800edfa:	e749      	b.n	800ec90 <_usb_ep0setup+0x60>
    usbp->configuration = usbp->setup[2];
 800edfc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee00:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f040 8081 	bne.w	800ef0c <_usb_ep0setup+0x2dc>
      usbp->state = USB_SELECTED;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	7023      	strb	r3, [r4, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800ee0e:	6863      	ldr	r3, [r4, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d0b5      	beq.n	800ed82 <_usb_ep0setup+0x152>
 800ee16:	2102      	movs	r1, #2
 800ee18:	4620      	mov	r0, r4
 800ee1a:	4798      	blx	r3
 800ee1c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ee20:	e7af      	b.n	800ed82 <_usb_ep0setup+0x152>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800ee22:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f47f af4c 	bne.w	800ecc4 <_usb_ep0setup+0x94>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800ee2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ee30:	f013 010f 	ands.w	r1, r3, #15
 800ee34:	d0a5      	beq.n	800ed82 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800ee36:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800ee38:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800ee3a:	f100 808c 	bmi.w	800ef56 <_usb_ep0setup+0x326>
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800ee3e:	f002 f8f7 	bl	8011030 <usb_lld_stall_out>
 800ee42:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ee46:	e79c      	b.n	800ed82 <_usb_ep0setup+0x152>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800ee48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	f47f af39 	bne.w	800ecc4 <_usb_ep0setup+0x94>
      usbp->status &= ~2U;
 800ee52:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800ee56:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 800ee58:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800ee5c:	63e6      	str	r6, [r4, #60]	; 0x3c
 800ee5e:	6426      	str	r6, [r4, #64]	; 0x40
      usbp->status &= ~2U;
 800ee60:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800ee64:	e791      	b.n	800ed8a <_usb_ep0setup+0x15a>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ee66:	2d00      	cmp	r5, #0
 800ee68:	d146      	bne.n	800eef8 <_usb_ep0setup+0x2c8>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800ee6a:	2002      	movs	r0, #2
 800ee6c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800ee70:	6425      	str	r5, [r4, #64]	; 0x40
 800ee72:	63a2      	str	r2, [r4, #56]	; 0x38
 800ee74:	63e0      	str	r0, [r4, #60]	; 0x3c
 800ee76:	4605      	mov	r5, r0
 800ee78:	e6ee      	b.n	800ec58 <_usb_ep0setup+0x28>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800ee7a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800ee7e:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800ee82:	4620      	mov	r0, r4
 800ee84:	f001 010f 	and.w	r1, r1, #15
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800ee88:	d143      	bne.n	800ef12 <_usb_ep0setup+0x2e2>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800ee8a:	f001 fef1 	bl	8010c70 <usb_lld_get_status_out>
 800ee8e:	2801      	cmp	r0, #1
 800ee90:	d043      	beq.n	800ef1a <_usb_ep0setup+0x2ea>
 800ee92:	2802      	cmp	r0, #2
 800ee94:	f47f af16 	bne.w	800ecc4 <_usb_ep0setup+0x94>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800ee98:	4b31      	ldr	r3, [pc, #196]	; (800ef60 <_usb_ep0setup+0x330>)
 800ee9a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ee9c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800ee9e:	6426      	str	r6, [r4, #64]	; 0x40
 800eea0:	4605      	mov	r5, r0
 800eea2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eea6:	e6d7      	b.n	800ec58 <_usb_ep0setup+0x28>
  hw |= (uint16_t)*p << 8U;
 800eea8:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800eeac:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 800eeae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800eeb2:	684d      	ldr	r5, [r1, #4]
 800eeb4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800eeb8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800eebc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800eec0:	4620      	mov	r0, r4
 800eec2:	47a8      	blx	r5
    if (dp == NULL) {
 800eec4:	2800      	cmp	r0, #0
 800eec6:	f43f aefd 	beq.w	800ecc4 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800eeca:	6843      	ldr	r3, [r0, #4]
 800eecc:	6805      	ldr	r5, [r0, #0]
 800eece:	63e5      	str	r5, [r4, #60]	; 0x3c
 800eed0:	63a3      	str	r3, [r4, #56]	; 0x38
 800eed2:	6426      	str	r6, [r4, #64]	; 0x40
 800eed4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eed8:	e6be      	b.n	800ec58 <_usb_ep0setup+0x28>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800eeda:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eede:	2b01      	cmp	r3, #1
 800eee0:	f47f aef0 	bne.w	800ecc4 <_usb_ep0setup+0x94>
      usbp->status |= 2U;
 800eee4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800eee8:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 800eeea:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800eeee:	63e6      	str	r6, [r4, #60]	; 0x3c
 800eef0:	6426      	str	r6, [r4, #64]	; 0x40
      usbp->status |= 2U;
 800eef2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800eef6:	e748      	b.n	800ed8a <_usb_ep0setup+0x15a>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800eef8:	2d01      	cmp	r5, #1
 800eefa:	f47f aee3 	bne.w	800ecc4 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800eefe:	4a19      	ldr	r2, [pc, #100]	; (800ef64 <_usb_ep0setup+0x334>)
 800ef00:	63a2      	str	r2, [r4, #56]	; 0x38
 800ef02:	2502      	movs	r5, #2
 800ef04:	2200      	movs	r2, #0
 800ef06:	63e5      	str	r5, [r4, #60]	; 0x3c
 800ef08:	6422      	str	r2, [r4, #64]	; 0x40
 800ef0a:	e6a5      	b.n	800ec58 <_usb_ep0setup+0x28>
      usbp->state = USB_ACTIVE;
 800ef0c:	2304      	movs	r3, #4
 800ef0e:	7023      	strb	r3, [r4, #0]
 800ef10:	e77d      	b.n	800ee0e <_usb_ep0setup+0x1de>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800ef12:	f001 febd 	bl	8010c90 <usb_lld_get_status_in>
 800ef16:	2801      	cmp	r0, #1
 800ef18:	d1bb      	bne.n	800ee92 <_usb_ep0setup+0x262>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800ef1a:	4b13      	ldr	r3, [pc, #76]	; (800ef68 <_usb_ep0setup+0x338>)
 800ef1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ef1e:	63e5      	str	r5, [r4, #60]	; 0x3c
 800ef20:	6426      	str	r6, [r4, #64]	; 0x40
 800ef22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ef26:	e697      	b.n	800ec58 <_usb_ep0setup+0x28>
  usbp->address = usbp->setup[2];
 800ef28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ef2c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800ef30:	4620      	mov	r0, r4
 800ef32:	f001 fdd5 	bl	8010ae0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800ef36:	6863      	ldr	r3, [r4, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	b113      	cbz	r3, 800ef42 <_usb_ep0setup+0x312>
 800ef3c:	2101      	movs	r1, #1
 800ef3e:	4620      	mov	r0, r4
 800ef40:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800ef42:	2303      	movs	r3, #3
 800ef44:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ef48:	7023      	strb	r3, [r4, #0]
 800ef4a:	e71a      	b.n	800ed82 <_usb_ep0setup+0x152>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800ef4c:	f002 f8a0 	bl	8011090 <usb_lld_clear_in>
 800ef50:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ef54:	e715      	b.n	800ed82 <_usb_ep0setup+0x152>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800ef56:	f002 f87b 	bl	8011050 <usb_lld_stall_in>
 800ef5a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ef5e:	e710      	b.n	800ed82 <_usb_ep0setup+0x152>
 800ef60:	0802ea50 	.word	0x0802ea50
 800ef64:	0802ea70 	.word	0x0802ea70
 800ef68:	0802ea60 	.word	0x0802ea60
 800ef6c:	00000000 	.word	0x00000000

0800ef70 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800ef70:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800ef74:	b510      	push	{r4, lr}
 800ef76:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 800ef78:	2b06      	cmp	r3, #6
 800ef7a:	d815      	bhi.n	800efa8 <_usb_ep0in+0x38>
 800ef7c:	e8df f003 	tbb	[pc, r3]
 800ef80:	041c3b04 	.word	0x041c3b04
 800ef84:	1504      	.short	0x1504
 800ef86:	04          	.byte	0x04
 800ef87:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800ef88:	2100      	movs	r1, #0
 800ef8a:	f002 f861 	bl	8011050 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4620      	mov	r0, r4
 800ef92:	f002 f84d 	bl	8011030 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800ef96:	6863      	ldr	r3, [r4, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	b113      	cbz	r3, 800efa2 <_usb_ep0in+0x32>
 800ef9c:	2105      	movs	r1, #5
 800ef9e:	4620      	mov	r0, r4
 800efa0:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800efa2:	2306      	movs	r3, #6
 800efa4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800efa8:	bd10      	pop	{r4, pc}
    if (usbp->ep0endcb != NULL) {
 800efaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800efac:	b103      	cbz	r3, 800efb0 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 800efae:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800efb0:	2300      	movs	r3, #0
 800efb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800efb6:	bd10      	pop	{r4, pc}
 800efb8:	68c3      	ldr	r3, [r0, #12]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800efba:	699a      	ldr	r2, [r3, #24]
    usbp->ep0state = USB_EP0_WAITING_STS;
 800efbc:	2103      	movs	r1, #3
  osp->rxqueued           = false;
 800efbe:	2300      	movs	r3, #0
    usbp->ep0state = USB_EP0_WAITING_STS;
 800efc0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800efc4:	4620      	mov	r0, r4
 800efc6:	4619      	mov	r1, r3
  osp->rxqueued           = false;
 800efc8:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800efca:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800efcc:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800efce:	6093      	str	r3, [r2, #8]
  usb_lld_prepare_receive(usbp, ep);
 800efd0:	f001 fe7e 	bl	8010cd0 <usb_lld_prepare_receive>
 800efd4:	2320      	movs	r3, #32
 800efd6:	f383 8811 	msr	BASEPRI, r3
  if (usbGetReceiveStatusI(usbp, ep)) {
 800efda:	8963      	ldrh	r3, [r4, #10]
 800efdc:	f013 0101 	ands.w	r1, r3, #1
 800efe0:	d105      	bne.n	800efee <_usb_ep0in+0x7e>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800efe2:	f043 0301 	orr.w	r3, r3, #1
 800efe6:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800efe8:	4620      	mov	r0, r4
 800efea:	f001 fff9 	bl	8010fe0 <usb_lld_start_out>
 800efee:	2300      	movs	r3, #0
 800eff0:	f383 8811 	msr	BASEPRI, r3
 800eff4:	bd10      	pop	{r4, pc}
  hw |= (uint16_t)*p << 8U;
 800eff6:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800effa:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 800effe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 800f000:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 800f004:	4293      	cmp	r3, r2
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800f006:	68c3      	ldr	r3, [r0, #12]
    if ((usbp->ep0n < max) &&
 800f008:	d9d7      	bls.n	800efba <_usb_ep0in+0x4a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800f00a:	8a18      	ldrh	r0, [r3, #16]
 800f00c:	fbb2 f1f0 	udiv	r1, r2, r0
 800f010:	fb00 2211 	mls	r2, r0, r1, r2
    if ((usbp->ep0n < max) &&
 800f014:	2a00      	cmp	r2, #0
 800f016:	d1d0      	bne.n	800efba <_usb_ep0in+0x4a>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f018:	695b      	ldr	r3, [r3, #20]
  usb_lld_prepare_transmit(usbp, ep);
 800f01a:	4611      	mov	r1, r2
  isp->txqueued           = false;
 800f01c:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800f01e:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800f020:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800f022:	609a      	str	r2, [r3, #8]
  usb_lld_prepare_transmit(usbp, ep);
 800f024:	4620      	mov	r0, r4
 800f026:	f001 fec3 	bl	8010db0 <usb_lld_prepare_transmit>
 800f02a:	2320      	movs	r3, #32
 800f02c:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800f030:	8923      	ldrh	r3, [r4, #8]
 800f032:	f013 0101 	ands.w	r1, r3, #1
 800f036:	d105      	bne.n	800f044 <_usb_ep0in+0xd4>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800f038:	f043 0301 	orr.w	r3, r3, #1
 800f03c:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800f03e:	4620      	mov	r0, r4
 800f040:	f001 ffde 	bl	8011000 <usb_lld_start_in>
 800f044:	2300      	movs	r3, #0
 800f046:	f383 8811 	msr	BASEPRI, r3
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800f04a:	2302      	movs	r3, #2
 800f04c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800f050:	bd10      	pop	{r4, pc}
 800f052:	bf00      	nop
	...

0800f060 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800f060:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800f064:	2a06      	cmp	r2, #6
 800f066:	d80c      	bhi.n	800f082 <_usb_ep0out+0x22>
 800f068:	2301      	movs	r3, #1
 800f06a:	4093      	lsls	r3, r2
 800f06c:	f013 0f67 	tst.w	r3, #103	; 0x67
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800f070:	b510      	push	{r4, lr}
 800f072:	4604      	mov	r4, r0
 800f074:	d112      	bne.n	800f09c <_usb_ep0out+0x3c>
 800f076:	f013 0208 	ands.w	r2, r3, #8
 800f07a:	d103      	bne.n	800f084 <_usb_ep0out+0x24>
 800f07c:	06db      	lsls	r3, r3, #27
 800f07e:	d41e      	bmi.n	800f0be <_usb_ep0out+0x5e>
 800f080:	bd10      	pop	{r4, pc}
 800f082:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800f084:	68c3      	ldr	r3, [r0, #12]
 800f086:	699b      	ldr	r3, [r3, #24]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1f8      	bne.n	800f080 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800f08e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f090:	b103      	cbz	r3, 800f094 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 800f092:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800f094:	2300      	movs	r3, #0
 800f096:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800f09a:	bd10      	pop	{r4, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800f09c:	2100      	movs	r1, #0
 800f09e:	f001 ffd7 	bl	8011050 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f001 ffc3 	bl	8011030 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800f0aa:	6863      	ldr	r3, [r4, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	b113      	cbz	r3, 800f0b6 <_usb_ep0out+0x56>
 800f0b0:	2105      	movs	r1, #5
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800f0b6:	2306      	movs	r3, #6
 800f0b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800f0bc:	bd10      	pop	{r4, pc}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f0be:	68c3      	ldr	r3, [r0, #12]
 800f0c0:	695b      	ldr	r3, [r3, #20]
    usbp->ep0state = USB_EP0_SENDING_STS;
 800f0c2:	2105      	movs	r1, #5
 800f0c4:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  isp->txqueued           = false;
 800f0c8:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800f0ca:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800f0cc:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800f0ce:	609a      	str	r2, [r3, #8]
  usb_lld_prepare_transmit(usbp, ep);
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	f001 fe6d 	bl	8010db0 <usb_lld_prepare_transmit>
 800f0d6:	2320      	movs	r3, #32
 800f0d8:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800f0dc:	8923      	ldrh	r3, [r4, #8]
 800f0de:	f013 0101 	ands.w	r1, r3, #1
 800f0e2:	d003      	beq.n	800f0ec <_usb_ep0out+0x8c>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f383 8811 	msr	BASEPRI, r3
 800f0ea:	bd10      	pop	{r4, pc}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800f0ec:	f043 0301 	orr.w	r3, r3, #1
 800f0f0:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f001 ff84 	bl	8011000 <usb_lld_start_in>
 800f0f8:	e7f4      	b.n	800f0e4 <_usb_ep0out+0x84>
 800f0fa:	bf00      	nop
 800f0fc:	0000      	movs	r0, r0
	...

0800f100 <nvicEnableVector>:
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800f100:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800f102:	b410      	push	{r4}
 800f104:	009b      	lsls	r3, r3, #2
  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800f106:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800f10a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800f10e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800f112:	0109      	lsls	r1, r1, #4
 800f114:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800f118:	f000 001f 	and.w	r0, r0, #31
 800f11c:	2201      	movs	r2, #1
  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800f11e:	b2c9      	uxtb	r1, r1
 800f120:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800f124:	fa02 f000 	lsl.w	r0, r2, r0
 800f128:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
}
 800f12c:	f85d 4b04 	ldr.w	r4, [sp], #4
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800f130:	6018      	str	r0, [r3, #0]
}
 800f132:	4770      	bx	lr
	...

0800f140 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800f140:	4908      	ldr	r1, [pc, #32]	; (800f164 <nvicDisableVector+0x24>)
 800f142:	0943      	lsrs	r3, r0, #5
void nvicDisableVector(uint32_t n) {
 800f144:	b410      	push	{r4}
  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800f146:	3320      	adds	r3, #32
 800f148:	f000 041f 	and.w	r4, r0, #31
 800f14c:	2201      	movs	r2, #1
  NVIC->IP[n]        = 0;
 800f14e:	4408      	add	r0, r1
  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800f150:	40a2      	lsls	r2, r4
  NVIC->IP[n]        = 0;
 800f152:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800f154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n]        = 0;
 800f158:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
}
 800f15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	e000e100 	.word	0xe000e100
	...

0800f170 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800f170:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800f174:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800f178:	0109      	lsls	r1, r1, #4
 800f17a:	b2c9      	uxtb	r1, r1
 800f17c:	7601      	strb	r1, [r0, #24]
 800f17e:	4770      	bx	lr

0800f180 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800f180:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800f182:	4b07      	ldr	r3, [pc, #28]	; (800f1a0 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800f184:	4a07      	ldr	r2, [pc, #28]	; (800f1a4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800f186:	6819      	ldr	r1, [r3, #0]
 800f188:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800f18c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800f18e:	6813      	ldr	r3, [r2, #0]
 800f190:	b10b      	cbz	r3, 800f196 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800f192:	6850      	ldr	r0, [r2, #4]
 800f194:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800f196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800f19a:	f7ff b8d9 	b.w	800e350 <_port_irq_epilogue>
 800f19e:	bf00      	nop
 800f1a0:	40026000 	.word	0x40026000
 800f1a4:	20001cc0 	.word	0x20001cc0
	...

0800f1b0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800f1b0:	4b08      	ldr	r3, [pc, #32]	; (800f1d4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800f1b2:	4809      	ldr	r0, [pc, #36]	; (800f1d8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800f1b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 800f1b6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800f1b8:	0989      	lsrs	r1, r1, #6
 800f1ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector70) {
 800f1be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6;
 800f1c0:	018c      	lsls	r4, r1, #6
 800f1c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800f1c4:	b10a      	cbz	r2, 800f1ca <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800f1c6:	68c0      	ldr	r0, [r0, #12]
 800f1c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f1ce:	f7ff b8bf 	b.w	800e350 <_port_irq_epilogue>
 800f1d2:	bf00      	nop
 800f1d4:	40026000 	.word	0x40026000
 800f1d8:	20001cc0 	.word	0x20001cc0
 800f1dc:	00000000 	.word	0x00000000

0800f1e0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800f1e0:	4b08      	ldr	r3, [pc, #32]	; (800f204 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800f1e2:	4809      	ldr	r0, [pc, #36]	; (800f208 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800f1e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 800f1e6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800f1e8:	0c09      	lsrs	r1, r1, #16
 800f1ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector74) {
 800f1ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16;
 800f1f0:	040c      	lsls	r4, r1, #16
 800f1f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800f1f4:	b10a      	cbz	r2, 800f1fa <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800f1f6:	6940      	ldr	r0, [r0, #20]
 800f1f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f1fe:	f7ff b8a7 	b.w	800e350 <_port_irq_epilogue>
 800f202:	bf00      	nop
 800f204:	40026000 	.word	0x40026000
 800f208:	20001cc0 	.word	0x20001cc0
 800f20c:	00000000 	.word	0x00000000

0800f210 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800f210:	4b08      	ldr	r3, [pc, #32]	; (800f234 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800f212:	4809      	ldr	r0, [pc, #36]	; (800f238 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800f214:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 800f216:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800f218:	0d89      	lsrs	r1, r1, #22
 800f21a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector78) {
 800f21e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22;
 800f220:	058c      	lsls	r4, r1, #22
 800f222:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800f224:	b10a      	cbz	r2, 800f22a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800f226:	69c0      	ldr	r0, [r0, #28]
 800f228:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f22e:	f7ff b88f 	b.w	800e350 <_port_irq_epilogue>
 800f232:	bf00      	nop
 800f234:	40026000 	.word	0x40026000
 800f238:	20001cc0 	.word	0x20001cc0
 800f23c:	00000000 	.word	0x00000000

0800f240 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800f240:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800f242:	4b07      	ldr	r3, [pc, #28]	; (800f260 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800f244:	4807      	ldr	r0, [pc, #28]	; (800f264 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800f246:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 800f248:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800f24a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800f24e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800f250:	b10a      	cbz	r2, 800f256 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800f252:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f254:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800f25a:	f7ff b879 	b.w	800e350 <_port_irq_epilogue>
 800f25e:	bf00      	nop
 800f260:	40026000 	.word	0x40026000
 800f264:	20001cc0 	.word	0x20001cc0
	...

0800f270 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800f270:	4b08      	ldr	r3, [pc, #32]	; (800f294 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800f272:	4809      	ldr	r0, [pc, #36]	; (800f298 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800f274:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 800f276:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800f278:	0989      	lsrs	r1, r1, #6
 800f27a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector80) {
 800f27e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6;
 800f280:	018c      	lsls	r4, r1, #6
 800f282:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800f284:	b10a      	cbz	r2, 800f28a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800f286:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f288:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f28e:	f7ff b85f 	b.w	800e350 <_port_irq_epilogue>
 800f292:	bf00      	nop
 800f294:	40026000 	.word	0x40026000
 800f298:	20001cc0 	.word	0x20001cc0
 800f29c:	00000000 	.word	0x00000000

0800f2a0 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800f2a0:	4b08      	ldr	r3, [pc, #32]	; (800f2c4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800f2a2:	4809      	ldr	r0, [pc, #36]	; (800f2c8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800f2a4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 800f2a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800f2a8:	0c09      	lsrs	r1, r1, #16
 800f2aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector84) {
 800f2ae:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16;
 800f2b0:	040c      	lsls	r4, r1, #16
 800f2b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800f2b4:	b10a      	cbz	r2, 800f2ba <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800f2b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f2b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f2be:	f7ff b847 	b.w	800e350 <_port_irq_epilogue>
 800f2c2:	bf00      	nop
 800f2c4:	40026000 	.word	0x40026000
 800f2c8:	20001cc0 	.word	0x20001cc0
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800f2d0:	4b08      	ldr	r3, [pc, #32]	; (800f2f4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800f2d2:	4809      	ldr	r0, [pc, #36]	; (800f2f8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800f2d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 800f2d6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800f2d8:	0d89      	lsrs	r1, r1, #22
 800f2da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(VectorFC) {
 800f2de:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22;
 800f2e0:	058c      	lsls	r4, r1, #22
 800f2e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800f2e4:	b10a      	cbz	r2, 800f2ea <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800f2e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f2e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f2ee:	f7ff b82f 	b.w	800e350 <_port_irq_epilogue>
 800f2f2:	bf00      	nop
 800f2f4:	40026000 	.word	0x40026000
 800f2f8:	20001cc0 	.word	0x20001cc0
 800f2fc:	00000000 	.word	0x00000000

0800f300 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800f300:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800f302:	4b07      	ldr	r3, [pc, #28]	; (800f320 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800f304:	4807      	ldr	r0, [pc, #28]	; (800f324 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800f306:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 800f308:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800f30a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800f30e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800f310:	b10a      	cbz	r2, 800f316 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800f312:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800f314:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800f31a:	f7ff b819 	b.w	800e350 <_port_irq_epilogue>
 800f31e:	bf00      	nop
 800f320:	40026400 	.word	0x40026400
 800f324:	20001cc0 	.word	0x20001cc0
	...

0800f330 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800f330:	4b08      	ldr	r3, [pc, #32]	; (800f354 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800f332:	4809      	ldr	r0, [pc, #36]	; (800f358 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800f334:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 800f336:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800f338:	0989      	lsrs	r1, r1, #6
 800f33a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector124) {
 800f33e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6;
 800f340:	018c      	lsls	r4, r1, #6
 800f342:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800f344:	b10a      	cbz	r2, 800f34a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800f346:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800f348:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f34e:	f7fe bfff 	b.w	800e350 <_port_irq_epilogue>
 800f352:	bf00      	nop
 800f354:	40026400 	.word	0x40026400
 800f358:	20001cc0 	.word	0x20001cc0
 800f35c:	00000000 	.word	0x00000000

0800f360 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800f360:	4b08      	ldr	r3, [pc, #32]	; (800f384 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800f362:	4809      	ldr	r0, [pc, #36]	; (800f388 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800f364:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 800f366:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800f368:	0c09      	lsrs	r1, r1, #16
 800f36a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector128) {
 800f36e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16;
 800f370:	040c      	lsls	r4, r1, #16
 800f372:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800f374:	b10a      	cbz	r2, 800f37a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800f376:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800f378:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f37e:	f7fe bfe7 	b.w	800e350 <_port_irq_epilogue>
 800f382:	bf00      	nop
 800f384:	40026400 	.word	0x40026400
 800f388:	20001cc0 	.word	0x20001cc0
 800f38c:	00000000 	.word	0x00000000

0800f390 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800f390:	4b08      	ldr	r3, [pc, #32]	; (800f3b4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800f392:	4809      	ldr	r0, [pc, #36]	; (800f3b8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800f394:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 800f396:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800f398:	0d89      	lsrs	r1, r1, #22
 800f39a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector12C) {
 800f39e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22;
 800f3a0:	058c      	lsls	r4, r1, #22
 800f3a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800f3a4:	b10a      	cbz	r2, 800f3aa <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800f3a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800f3a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f3ae:	f7fe bfcf 	b.w	800e350 <_port_irq_epilogue>
 800f3b2:	bf00      	nop
 800f3b4:	40026400 	.word	0x40026400
 800f3b8:	20001cc0 	.word	0x20001cc0
 800f3bc:	00000000 	.word	0x00000000

0800f3c0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800f3c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800f3c2:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800f3c4:	4807      	ldr	r0, [pc, #28]	; (800f3e4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800f3c6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 800f3c8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800f3ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800f3ce:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800f3d0:	b10a      	cbz	r2, 800f3d6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800f3d2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800f3d4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800f3da:	f7fe bfb9 	b.w	800e350 <_port_irq_epilogue>
 800f3de:	bf00      	nop
 800f3e0:	40026400 	.word	0x40026400
 800f3e4:	20001cc0 	.word	0x20001cc0
	...

0800f3f0 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800f3f0:	4b08      	ldr	r3, [pc, #32]	; (800f414 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800f3f2:	4809      	ldr	r0, [pc, #36]	; (800f418 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800f3f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 800f3f6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800f3f8:	0989      	lsrs	r1, r1, #6
 800f3fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector150) {
 800f3fe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6;
 800f400:	018c      	lsls	r4, r1, #6
 800f402:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800f404:	b10a      	cbz	r2, 800f40a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800f406:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f408:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f40e:	f7fe bf9f 	b.w	800e350 <_port_irq_epilogue>
 800f412:	bf00      	nop
 800f414:	40026400 	.word	0x40026400
 800f418:	20001cc0 	.word	0x20001cc0
 800f41c:	00000000 	.word	0x00000000

0800f420 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800f420:	4b08      	ldr	r3, [pc, #32]	; (800f444 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800f422:	4809      	ldr	r0, [pc, #36]	; (800f448 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800f424:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 800f426:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800f428:	0c09      	lsrs	r1, r1, #16
 800f42a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector154) {
 800f42e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16;
 800f430:	040c      	lsls	r4, r1, #16
 800f432:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800f434:	b10a      	cbz	r2, 800f43a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800f436:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800f438:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f43e:	f7fe bf87 	b.w	800e350 <_port_irq_epilogue>
 800f442:	bf00      	nop
 800f444:	40026400 	.word	0x40026400
 800f448:	20001cc0 	.word	0x20001cc0
 800f44c:	00000000 	.word	0x00000000

0800f450 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800f450:	4b08      	ldr	r3, [pc, #32]	; (800f474 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800f452:	4809      	ldr	r0, [pc, #36]	; (800f478 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800f454:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 800f456:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800f458:	0d89      	lsrs	r1, r1, #22
 800f45a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector158) {
 800f45e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22;
 800f460:	058c      	lsls	r4, r1, #22
 800f462:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800f464:	b10a      	cbz	r2, 800f46a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800f466:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800f468:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800f46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f46e:	f7fe bf6f 	b.w	800e350 <_port_irq_epilogue>
 800f472:	bf00      	nop
 800f474:	40026400 	.word	0x40026400
 800f478:	20001cc0 	.word	0x20001cc0
 800f47c:	00000000 	.word	0x00000000

0800f480 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800f480:	490e      	ldr	r1, [pc, #56]	; (800f4bc <dmaInit+0x3c>)
 800f482:	4a0f      	ldr	r2, [pc, #60]	; (800f4c0 <dmaInit+0x40>)
 800f484:	480f      	ldr	r0, [pc, #60]	; (800f4c4 <dmaInit+0x44>)
 800f486:	2300      	movs	r3, #0
void dmaInit(void) {
 800f488:	b410      	push	{r4}
  dma_streams_mask = 0;
 800f48a:	600b      	str	r3, [r1, #0]
 800f48c:	4c0e      	ldr	r4, [pc, #56]	; (800f4c8 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800f48e:	4619      	mov	r1, r3
 800f490:	e001      	b.n	800f496 <dmaInit+0x16>
 800f492:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800f496:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800f498:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800f49c:	3301      	adds	r3, #1
 800f49e:	2b10      	cmp	r3, #16
 800f4a0:	f102 020c 	add.w	r2, r2, #12
 800f4a4:	d1f5      	bne.n	800f492 <dmaInit+0x12>
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800f4a6:	4909      	ldr	r1, [pc, #36]	; (800f4cc <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800f4a8:	4a09      	ldr	r2, [pc, #36]	; (800f4d0 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800f4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  DMA1->LIFCR = 0xFFFFFFFF;
 800f4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b2:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 800f4b4:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800f4b6:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800f4b8:	60d3      	str	r3, [r2, #12]
}
 800f4ba:	4770      	bx	lr
 800f4bc:	20001d40 	.word	0x20001d40
 800f4c0:	0802ea8c 	.word	0x0802ea8c
 800f4c4:	40026010 	.word	0x40026010
 800f4c8:	20001cc0 	.word	0x20001cc0
 800f4cc:	40026000 	.word	0x40026000
 800f4d0:	40026400 	.word	0x40026400
	...

0800f4e0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800f4e2:	4f20      	ldr	r7, [pc, #128]	; (800f564 <dmaStreamAllocate+0x84>)
 800f4e4:	7a46      	ldrb	r6, [r0, #9]
 800f4e6:	f8d7 e000 	ldr.w	lr, [r7]
 800f4ea:	2401      	movs	r4, #1
 800f4ec:	fa04 f506 	lsl.w	r5, r4, r6
 800f4f0:	ea15 0f0e 	tst.w	r5, lr
 800f4f4:	d131      	bne.n	800f55a <dmaStreamAllocate+0x7a>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800f4f6:	4c1c      	ldr	r4, [pc, #112]	; (800f568 <dmaStreamAllocate+0x88>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800f4f8:	ea45 050e 	orr.w	r5, r5, lr
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800f4fc:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800f500:	f015 0fff 	tst.w	r5, #255	; 0xff
  dma_streams_mask |= (1 << dmastp->selfindex);
 800f504:	603d      	str	r5, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800f506:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800f50a:	f8ce 3004 	str.w	r3, [lr, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800f50e:	d004      	beq.n	800f51a <dmaStreamAllocate+0x3a>
    rccEnableDMA1(FALSE);
 800f510:	4c16      	ldr	r4, [pc, #88]	; (800f56c <dmaStreamAllocate+0x8c>)
 800f512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f518:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800f51a:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800f51e:	d116      	bne.n	800f54e <dmaStreamAllocate+0x6e>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800f520:	6805      	ldr	r5, [r0, #0]
 800f522:	682b      	ldr	r3, [r5, #0]
 800f524:	f023 031f 	bic.w	r3, r3, #31
 800f528:	602b      	str	r3, [r5, #0]
 800f52a:	682c      	ldr	r4, [r5, #0]
 800f52c:	f014 0401 	ands.w	r4, r4, #1
 800f530:	d1fb      	bne.n	800f52a <dmaStreamAllocate+0x4a>
 800f532:	7a07      	ldrb	r7, [r0, #8]
 800f534:	6846      	ldr	r6, [r0, #4]
 800f536:	233d      	movs	r3, #61	; 0x3d
 800f538:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800f53a:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 800f53c:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800f53e:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800f540:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800f542:	b162      	cbz	r2, 800f55e <dmaStreamAllocate+0x7e>
    nvicEnableVector(dmastp->vector, priority);
 800f544:	7a80      	ldrb	r0, [r0, #10]
 800f546:	f7ff fddb 	bl	800f100 <nvicEnableVector>

  return FALSE;
 800f54a:	4620      	mov	r0, r4
 800f54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rccEnableDMA2(FALSE);
 800f54e:	4c07      	ldr	r4, [pc, #28]	; (800f56c <dmaStreamAllocate+0x8c>)
 800f550:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f556:	6323      	str	r3, [r4, #48]	; 0x30
 800f558:	e7e2      	b.n	800f520 <dmaStreamAllocate+0x40>
    return TRUE;
 800f55a:	4620      	mov	r0, r4
 800f55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return FALSE;
 800f55e:	4610      	mov	r0, r2
}
 800f560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f562:	bf00      	nop
 800f564:	20001d40 	.word	0x20001d40
 800f568:	20001cc0 	.word	0x20001cc0
 800f56c:	40023800 	.word	0x40023800

0800f570 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 800f570:	b510      	push	{r4, lr}
 800f572:	4604      	mov	r4, r0
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1 << dmastp->selfindex)) != 0,
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 800f574:	7a80      	ldrb	r0, [r0, #10]
 800f576:	f7ff fde3 	bl	800f140 <nvicDisableVector>

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 800f57a:	490c      	ldr	r1, [pc, #48]	; (800f5ac <dmaStreamRelease+0x3c>)
 800f57c:	7a60      	ldrb	r0, [r4, #9]
 800f57e:	680b      	ldr	r3, [r1, #0]
 800f580:	2201      	movs	r2, #1
 800f582:	4082      	lsls	r2, r0
 800f584:	ea23 0302 	bic.w	r3, r3, r2

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 800f588:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 800f58c:	600b      	str	r3, [r1, #0]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 800f58e:	d104      	bne.n	800f59a <dmaStreamRelease+0x2a>
    rccDisableDMA1(FALSE);
 800f590:	4907      	ldr	r1, [pc, #28]	; (800f5b0 <dmaStreamRelease+0x40>)
 800f592:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800f594:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800f598:	630a      	str	r2, [r1, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0)
 800f59a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800f59e:	d104      	bne.n	800f5aa <dmaStreamRelease+0x3a>
    rccDisableDMA2(FALSE);
 800f5a0:	4a03      	ldr	r2, [pc, #12]	; (800f5b0 <dmaStreamRelease+0x40>)
 800f5a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f5a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800f5a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f5aa:	bd10      	pop	{r4, pc}
 800f5ac:	20001d40 	.word	0x20001d40
 800f5b0:	40023800 	.word	0x40023800
	...

0800f5c0 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800f5c0:	4b17      	ldr	r3, [pc, #92]	; (800f620 <hal_lld_init+0x60>)
 800f5c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f5c6:	691a      	ldr	r2, [r3, #16]
 800f5c8:	2200      	movs	r2, #0
void hal_lld_init(void) {
 800f5ca:	b410      	push	{r4}
  rccResetAHB1(~0);
 800f5cc:	6119      	str	r1, [r3, #16]
 800f5ce:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800f5d0:	6958      	ldr	r0, [r3, #20]
 800f5d2:	6159      	str	r1, [r3, #20]
 800f5d4:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800f5d6:	6a18      	ldr	r0, [r3, #32]
  PWR->CR |= PWR_CR_DBP;
 800f5d8:	4c12      	ldr	r4, [pc, #72]	; (800f624 <hal_lld_init+0x64>)
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800f5da:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800f5de:	6218      	str	r0, [r3, #32]
 800f5e0:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800f5e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f5e4:	6259      	str	r1, [r3, #36]	; 0x24
 800f5e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800f5e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f5ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800f5ee:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 800f5f0:	6821      	ldr	r1, [r4, #0]
 800f5f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f5f6:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800f5f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f5fa:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800f5fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f602:	d003      	beq.n	800f60c <hal_lld_init+0x4c>
    RCC->BDCR = RCC_BDCR_BDRST;
 800f604:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800f608:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800f60a:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800f60c:	4a05      	ldr	r2, [pc, #20]	; (800f624 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800f60e:	f85d 4b04 	ldr.w	r4, [sp], #4
  PWR->CSR &= ~PWR_CSR_BRE;
 800f612:	6853      	ldr	r3, [r2, #4]
 800f614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f618:	6053      	str	r3, [r2, #4]
  dmaInit();
 800f61a:	f7ff bf31 	b.w	800f480 <dmaInit>
 800f61e:	bf00      	nop
 800f620:	40023800 	.word	0x40023800
 800f624:	40007000 	.word	0x40007000
	...

0800f630 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800f630:	4a2a      	ldr	r2, [pc, #168]	; (800f6dc <stm32_clock_init+0xac>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800f632:	4b2b      	ldr	r3, [pc, #172]	; (800f6e0 <stm32_clock_init+0xb0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800f634:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 800f638:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800f63c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800f63e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800f640:	6813      	ldr	r3, [r2, #0]
 800f642:	f043 0301 	orr.w	r3, r3, #1
 800f646:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800f648:	6813      	ldr	r3, [r2, #0]
 800f64a:	0799      	lsls	r1, r3, #30
 800f64c:	d5fc      	bpl.n	800f648 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800f64e:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800f650:	4922      	ldr	r1, [pc, #136]	; (800f6dc <stm32_clock_init+0xac>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800f652:	f023 0303 	bic.w	r3, r3, #3
 800f656:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800f658:	6893      	ldr	r3, [r2, #8]
 800f65a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800f65c:	688b      	ldr	r3, [r1, #8]
 800f65e:	f013 030c 	ands.w	r3, r3, #12
 800f662:	d1fb      	bne.n	800f65c <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800f664:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800f666:	481d      	ldr	r0, [pc, #116]	; (800f6dc <stm32_clock_init+0xac>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800f668:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800f66c:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800f66e:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 800f670:	680b      	ldr	r3, [r1, #0]
 800f672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f676:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800f678:	6803      	ldr	r3, [r0, #0]
 800f67a:	039b      	lsls	r3, r3, #14
 800f67c:	d5fc      	bpl.n	800f678 <stm32_clock_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800f67e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800f680:	4a16      	ldr	r2, [pc, #88]	; (800f6dc <stm32_clock_init+0xac>)
  RCC->CSR |= RCC_CSR_LSION;
 800f682:	f043 0301 	orr.w	r3, r3, #1
 800f686:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800f688:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800f68a:	0799      	lsls	r1, r3, #30
 800f68c:	d5fc      	bpl.n	800f688 <stm32_clock_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800f68e:	4b15      	ldr	r3, [pc, #84]	; (800f6e4 <stm32_clock_init+0xb4>)
 800f690:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800f692:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800f694:	4912      	ldr	r1, [pc, #72]	; (800f6e0 <stm32_clock_init+0xb0>)
  RCC->CR |= RCC_CR_PLLON;
 800f696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f69a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800f69c:	684b      	ldr	r3, [r1, #4]
 800f69e:	045a      	lsls	r2, r3, #17
 800f6a0:	d5fc      	bpl.n	800f69c <stm32_clock_init+0x6c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800f6a2:	490e      	ldr	r1, [pc, #56]	; (800f6dc <stm32_clock_init+0xac>)
 800f6a4:	680b      	ldr	r3, [r1, #0]
 800f6a6:	019b      	lsls	r3, r3, #6
 800f6a8:	d5fc      	bpl.n	800f6a4 <stm32_clock_init+0x74>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800f6aa:	4b0f      	ldr	r3, [pc, #60]	; (800f6e8 <stm32_clock_init+0xb8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800f6ac:	4a0f      	ldr	r2, [pc, #60]	; (800f6ec <stm32_clock_init+0xbc>)
 800f6ae:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800f6b0:	f240 7205 	movw	r2, #1797	; 0x705
 800f6b4:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800f6b6:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800f6b8:	4a08      	ldr	r2, [pc, #32]	; (800f6dc <stm32_clock_init+0xac>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800f6ba:	f043 0302 	orr.w	r3, r3, #2
 800f6be:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800f6c0:	6893      	ldr	r3, [r2, #8]
 800f6c2:	f003 030c 	and.w	r3, r3, #12
 800f6c6:	2b08      	cmp	r3, #8
 800f6c8:	d1fa      	bne.n	800f6c0 <stm32_clock_init+0x90>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800f6ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800f6cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f6d0:	6453      	str	r3, [r2, #68]	; 0x44
 800f6d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f6d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f6d8:	6653      	str	r3, [r2, #100]	; 0x64
 800f6da:	4770      	bx	lr
 800f6dc:	40023800 	.word	0x40023800
 800f6e0:	40007000 	.word	0x40007000
 800f6e4:	07405408 	.word	0x07405408
 800f6e8:	40023c00 	.word	0x40023c00
 800f6ec:	38089400 	.word	0x38089400

0800f6f0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800f6f0:	b508      	push	{r3, lr}
 800f6f2:	2320      	movs	r3, #32
 800f6f4:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 800f6f8:	f7fd ff12 	bl	800d520 <chSysTimerHandlerI>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800f702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800f706:	f7fe be23 	b.w	800e350 <_port_irq_epilogue>
 800f70a:	bf00      	nop
 800f70c:	0000      	movs	r0, r0
	...

0800f710 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f710:	4b05      	ldr	r3, [pc, #20]	; (800f728 <st_lld_init+0x18>)
 800f712:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 800f716:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f718:	2207      	movs	r2, #7
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f71a:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800f71c:	6098      	str	r0, [r3, #8]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f71e:	2108      	movs	r1, #8
 800f720:	200b      	movs	r0, #11
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f722:	601a      	str	r2, [r3, #0]
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f724:	f7ff bd24 	b.w	800f170 <nvicSetSystemHandlerPriority>
 800f728:	e000e010 	.word	0xe000e010
 800f72c:	00000000 	.word	0x00000000

0800f730 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800f730:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800f732:	4c43      	ldr	r4, [pc, #268]	; (800f840 <can_lld_set_filters+0x110>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800f734:	4d43      	ldr	r5, [pc, #268]	; (800f844 <can_lld_set_filters+0x114>)
  rccEnableCAN1(FALSE);
 800f736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f73c:	6423      	str	r3, [r4, #64]	; 0x40
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800f73e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800f742:	0c1b      	lsrs	r3, r3, #16
 800f744:	041b      	lsls	r3, r3, #16
 800f746:	f043 0301 	orr.w	r3, r3, #1
 800f74a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f74e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  if (num > 0) {
 800f752:	2900      	cmp	r1, #0
 800f754:	d05a      	beq.n	800f80c <can_lld_set_filters+0xdc>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800f75c:	4618      	mov	r0, r3
    CAN1->FM1R = 0;
 800f75e:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
      CAN1->sFilterRegister[i].FR1 = 0;
 800f762:	461c      	mov	r4, r3
    CAN1->FS1R = 0;
 800f764:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800f768:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800f76c:	00c3      	lsls	r3, r0, #3
 800f76e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f772:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800f776:	3001      	adds	r0, #1
 800f778:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800f77a:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800f77e:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800f782:	d1f3      	bne.n	800f76c <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800f784:	4d2f      	ldr	r5, [pc, #188]	; (800f844 <can_lld_set_filters+0x114>)
 800f786:	2600      	movs	r6, #0
      fmask = 1 << cfp->filter;
 800f788:	2701      	movs	r7, #1
 800f78a:	6813      	ldr	r3, [r2, #0]
      if (cfp->mode)
 800f78c:	7910      	ldrb	r0, [r2, #4]
 800f78e:	00dc      	lsls	r4, r3, #3
 800f790:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800f794:	f010 0f01 	tst.w	r0, #1
 800f798:	f504 44c8 	add.w	r4, r4, #25600	; 0x6400
    for (i = 0; i < num; i++) {
 800f79c:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800f7a0:	fa07 f303 	lsl.w	r3, r7, r3
      if (cfp->mode)
 800f7a4:	d005      	beq.n	800f7b2 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800f7a6:	f8d5 e204 	ldr.w	lr, [r5, #516]	; 0x204
 800f7aa:	ea43 0e0e 	orr.w	lr, r3, lr
 800f7ae:	f8c5 e204 	str.w	lr, [r5, #516]	; 0x204
      if (cfp->scale)
 800f7b2:	f010 0f02 	tst.w	r0, #2
 800f7b6:	d005      	beq.n	800f7c4 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800f7b8:	f8d5 e20c 	ldr.w	lr, [r5, #524]	; 0x20c
 800f7bc:	ea43 0e0e 	orr.w	lr, r3, lr
 800f7c0:	f8c5 e20c 	str.w	lr, [r5, #524]	; 0x20c
      if (cfp->assignment)
 800f7c4:	0740      	lsls	r0, r0, #29
 800f7c6:	d504      	bpl.n	800f7d2 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800f7c8:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800f7cc:	4318      	orrs	r0, r3
 800f7ce:	f8c5 0214 	str.w	r0, [r5, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800f7d2:	6890      	ldr	r0, [r2, #8]
 800f7d4:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800f7d8:	68d0      	ldr	r0, [r2, #12]
 800f7da:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800f7de:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 800f7e2:	42b1      	cmp	r1, r6
      CAN1->FA1R |= fmask;
 800f7e4:	ea43 0300 	orr.w	r3, r3, r0
      cfp++;
 800f7e8:	f102 0210 	add.w	r2, r2, #16
      CAN1->FA1R |= fmask;
 800f7ec:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 800f7f0:	d1cb      	bne.n	800f78a <can_lld_set_filters+0x5a>
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800f7f2:	4914      	ldr	r1, [pc, #80]	; (800f844 <can_lld_set_filters+0x114>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800f7f4:	4a12      	ldr	r2, [pc, #72]	; (800f840 <can_lld_set_filters+0x110>)
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800f7f6:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800f7fa:	f023 0301 	bic.w	r3, r3, #1
 800f7fe:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  rccDisableCAN1(FALSE);
 800f802:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f804:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f808:	6413      	str	r3, [r2, #64]	; 0x40
 800f80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f80c:	00c2      	lsls	r2, r0, #3
 800f80e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->FS1R = 1 | (1 << can2sb);
 800f812:	2301      	movs	r3, #1
 800f814:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800f818:	4083      	lsls	r3, r0
 800f81a:	f043 0301 	orr.w	r3, r3, #1
    CAN1->sFilterRegister[0].FR1 = 0;
 800f81e:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800f822:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800f826:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800f82a:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
    CAN1->FM1R = 0;
 800f82e:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    CAN1->FFA1R = 0;
 800f832:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    CAN1->FS1R = 1 | (1 << can2sb);
 800f836:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800f83a:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 800f83e:	e7d8      	b.n	800f7f2 <can_lld_set_filters+0xc2>
 800f840:	40023800 	.word	0x40023800
 800f844:	40006400 	.word	0x40006400
	...

0800f850 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800f850:	b510      	push	{r4, lr}
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800f852:	4c0c      	ldr	r4, [pc, #48]	; (800f884 <Vector8C+0x34>)
 800f854:	490c      	ldr	r1, [pc, #48]	; (800f888 <Vector8C+0x38>)
 800f856:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f858:	2320      	movs	r3, #32
 800f85a:	6091      	str	r1, [r2, #8]
 800f85c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800f860:	2100      	movs	r1, #0
 800f862:	f104 0008 	add.w	r0, r4, #8
 800f866:	f7fe f93b 	bl	800dae0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800f86a:	f104 001c 	add.w	r0, r4, #28
 800f86e:	2101      	movs	r1, #1
 800f870:	f7fe faee 	bl	800de50 <chEvtBroadcastFlagsI>
 800f874:	2300      	movs	r3, #0
 800f876:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800f87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800f87e:	f7fe bd67 	b.w	800e350 <_port_irq_epilogue>
 800f882:	bf00      	nop
 800f884:	20001d44 	.word	0x20001d44
 800f888:	00010101 	.word	0x00010101
 800f88c:	00000000 	.word	0x00000000

0800f890 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800f890:	b538      	push	{r3, r4, r5, lr}
  rf0r = canp->can->RF0R;
 800f892:	4d16      	ldr	r5, [pc, #88]	; (800f8ec <Vector90+0x5c>)
 800f894:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f896:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800f898:	07a2      	lsls	r2, r4, #30
 800f89a:	d111      	bne.n	800f8c0 <Vector90+0x30>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800f89c:	06e3      	lsls	r3, r4, #27
 800f89e:	d50b      	bpl.n	800f8b8 <Vector90+0x28>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800f8a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f8a2:	2110      	movs	r1, #16
 800f8a4:	60d9      	str	r1, [r3, #12]
 800f8a6:	2320      	movs	r3, #32
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	4810      	ldr	r0, [pc, #64]	; (800f8f0 <Vector90+0x60>)
 800f8ae:	f7fe facf 	bl	800de50 <chEvtBroadcastFlagsI>
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800f8b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800f8bc:	f7fe bd48 	b.w	800e350 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800f8c0:	695a      	ldr	r2, [r3, #20]
 800f8c2:	f022 0202 	bic.w	r2, r2, #2
 800f8c6:	615a      	str	r2, [r3, #20]
 800f8c8:	2320      	movs	r3, #32
 800f8ca:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	f105 0010 	add.w	r0, r5, #16
 800f8d4:	f7fe f904 	bl	800dae0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800f8d8:	f105 0018 	add.w	r0, r5, #24
 800f8dc:	2101      	movs	r1, #1
 800f8de:	f7fe fab7 	bl	800de50 <chEvtBroadcastFlagsI>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	e7d8      	b.n	800f89c <Vector90+0xc>
 800f8ea:	bf00      	nop
 800f8ec:	20001d44 	.word	0x20001d44
 800f8f0:	20001d64 	.word	0x20001d64
	...

0800f900 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800f900:	b538      	push	{r3, r4, r5, lr}
  rf1r = canp->can->RF1R;
 800f902:	4d16      	ldr	r5, [pc, #88]	; (800f95c <Vector94+0x5c>)
 800f904:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f906:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800f908:	07a2      	lsls	r2, r4, #30
 800f90a:	d111      	bne.n	800f930 <Vector94+0x30>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800f90c:	06e3      	lsls	r3, r4, #27
 800f90e:	d50b      	bpl.n	800f928 <Vector94+0x28>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800f910:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f912:	2110      	movs	r1, #16
 800f914:	6119      	str	r1, [r3, #16]
 800f916:	2320      	movs	r3, #32
 800f918:	f383 8811 	msr	BASEPRI, r3
 800f91c:	4810      	ldr	r0, [pc, #64]	; (800f960 <Vector94+0x60>)
 800f91e:	f7fe fa97 	bl	800de50 <chEvtBroadcastFlagsI>
 800f922:	2300      	movs	r3, #0
 800f924:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800f928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800f92c:	f7fe bd10 	b.w	800e350 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800f930:	695a      	ldr	r2, [r3, #20]
 800f932:	f022 0210 	bic.w	r2, r2, #16
 800f936:	615a      	str	r2, [r3, #20]
 800f938:	2320      	movs	r3, #32
 800f93a:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800f93e:	2100      	movs	r1, #0
 800f940:	f105 0010 	add.w	r0, r5, #16
 800f944:	f7fe f8cc 	bl	800dae0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800f948:	f105 0018 	add.w	r0, r5, #24
 800f94c:	2102      	movs	r1, #2
 800f94e:	f7fe fa7f 	bl	800de50 <chEvtBroadcastFlagsI>
 800f952:	2300      	movs	r3, #0
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	e7d8      	b.n	800f90c <Vector94+0xc>
 800f95a:	bf00      	nop
 800f95c:	20001d44 	.word	0x20001d44
 800f960:	20001d64 	.word	0x20001d64
	...

0800f970 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800f970:	b538      	push	{r3, r4, r5, lr}
  msr = canp->can->MSR;
 800f972:	4d1b      	ldr	r5, [pc, #108]	; (800f9e0 <Vector98+0x70>)
 800f974:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f976:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800f978:	221c      	movs	r2, #28
 800f97a:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 800f97c:	0722      	lsls	r2, r4, #28
 800f97e:	d41d      	bmi.n	800f9bc <Vector98+0x4c>
  if (msr & CAN_MSR_ERRI) {
 800f980:	0763      	lsls	r3, r4, #29
 800f982:	d517      	bpl.n	800f9b4 <Vector98+0x44>
    uint32_t esr = canp->can->ESR;
 800f984:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f986:	6993      	ldr	r3, [r2, #24]
    canp->can->ESR &= ~CAN_ESR_LEC;
 800f988:	6991      	ldr	r1, [r2, #24]
 800f98a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800f98e:	6191      	str	r1, [r2, #24]
    if ((esr & CAN_ESR_LEC) > 0)
 800f990:	f013 0f70 	tst.w	r3, #112	; 0x70
    flags = (eventflags_t)(esr & 7);
 800f994:	f003 0107 	and.w	r1, r3, #7
      flags |= CAN_FRAMING_ERROR;
 800f998:	bf18      	it	ne
 800f99a:	f041 0108 	orrne.w	r1, r1, #8
 800f99e:	2220      	movs	r2, #32
 800f9a0:	f382 8811 	msr	BASEPRI, r2
 800f9a4:	480f      	ldr	r0, [pc, #60]	; (800f9e4 <Vector98+0x74>)
 800f9a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f9aa:	f7fe fa51 	bl	800de50 <chEvtBroadcastFlagsI>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800f9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800f9b8:	f7fe bcca 	b.w	800e350 <_port_irq_epilogue>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800f9bc:	681a      	ldr	r2, [r3, #0]
    canp->state = CAN_READY;
 800f9be:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800f9c0:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 800f9c4:	2103      	movs	r1, #3
 800f9c6:	f800 1b28 	strb.w	r1, [r0], #40
 800f9ca:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	f381 8811 	msr	BASEPRI, r1
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	f7fe fa3c 	bl	800de50 <chEvtBroadcastFlagsI>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	e7cf      	b.n	800f980 <Vector98+0x10>
 800f9e0:	20001d44 	.word	0x20001d44
 800f9e4:	20001d64 	.word	0x20001d64
	...

0800f9f0 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800f9f0:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800f9f2:	4c06      	ldr	r4, [pc, #24]	; (800fa0c <can_lld_init+0x1c>)
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f7fe fd0b 	bl	800e410 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800f9fa:	2200      	movs	r2, #0
  CAND1.can = CAN1;
 800f9fc:	4b04      	ldr	r3, [pc, #16]	; (800fa10 <can_lld_init+0x20>)
 800f9fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800fa00:	4611      	mov	r1, r2
 800fa02:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800fa04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800fa08:	f7ff be92 	b.w	800f730 <can_lld_set_filters>
 800fa0c:	20001d44 	.word	0x20001d44
 800fa10:	40006400 	.word	0x40006400
	...

0800fa20 <can_lld_start>:
 */
void can_lld_start(CANDriver *canp) {

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
 800fa20:	4b18      	ldr	r3, [pc, #96]	; (800fa84 <can_lld_start+0x64>)
 800fa22:	4298      	cmp	r0, r3
void can_lld_start(CANDriver *canp) {
 800fa24:	b510      	push	{r4, lr}
 800fa26:	4604      	mov	r4, r0
  if (&CAND1 == canp) {
 800fa28:	d015      	beq.n	800fa56 <can_lld_start+0x36>
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 800fa2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 800fa30:	685a      	ldr	r2, [r3, #4]
 800fa32:	07d1      	lsls	r1, r2, #31
 800fa34:	d407      	bmi.n	800fa46 <can_lld_start+0x26>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800fa36:	2101      	movs	r1, #1
 800fa38:	2008      	movs	r0, #8
 800fa3a:	f7fd fe71 	bl	800d720 <chSchGoSleepTimeoutS>
 800fa3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	07d2      	lsls	r2, r2, #31
 800fa44:	d5f7      	bpl.n	800fa36 <can_lld_start+0x16>
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 800fa46:	6862      	ldr	r2, [r4, #4]
  canp->can->MCR = canp->config->mcr;

  /* Interrupt sources initialization.*/
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800fa48:	490f      	ldr	r1, [pc, #60]	; (800fa88 <can_lld_start+0x68>)
  canp->can->BTR = canp->config->btr;
 800fa4a:	6850      	ldr	r0, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 800fa4c:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 800fa4e:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 800fa50:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800fa52:	6159      	str	r1, [r3, #20]
 800fa54:	bd10      	pop	{r4, pc}
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800fa56:	210b      	movs	r1, #11
 800fa58:	2013      	movs	r0, #19
 800fa5a:	f7ff fb51 	bl	800f100 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800fa5e:	210b      	movs	r1, #11
 800fa60:	2014      	movs	r0, #20
 800fa62:	f7ff fb4d 	bl	800f100 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800fa66:	210b      	movs	r1, #11
 800fa68:	2015      	movs	r0, #21
 800fa6a:	f7ff fb49 	bl	800f100 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800fa6e:	210b      	movs	r1, #11
 800fa70:	2016      	movs	r0, #22
 800fa72:	f7ff fb45 	bl	800f100 <nvicEnableVector>
    rccEnableCAN1(FALSE);
 800fa76:	4a05      	ldr	r2, [pc, #20]	; (800fa8c <can_lld_start+0x6c>)
 800fa78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fa7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa7e:	6413      	str	r3, [r2, #64]	; 0x40
 800fa80:	e7d3      	b.n	800fa2a <can_lld_start+0xa>
 800fa82:	bf00      	nop
 800fa84:	20001d44 	.word	0x20001d44
 800fa88:	00018f5b 	.word	0x00018f5b
 800fa8c:	40023800 	.word	0x40023800

0800fa90 <can_lld_is_tx_empty>:
 *
 * @notapi
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 800fa90:	2903      	cmp	r1, #3
 800fa92:	d81a      	bhi.n	800faca <can_lld_is_tx_empty+0x3a>
 800fa94:	e8df f001 	tbb	[pc, r1]
 800fa98:	02070c11 	.word	0x02070c11
  case 1:
    return (canp->can->TSR & CAN_TSR_TME0) != 0;
  case 2:
    return (canp->can->TSR & CAN_TSR_TME1) != 0;
  case 3:
    return (canp->can->TSR & CAN_TSR_TME2) != 0;
 800fa9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fa9e:	6898      	ldr	r0, [r3, #8]
 800faa0:	f3c0 7000 	ubfx	r0, r0, #28, #1
 800faa4:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME1) != 0;
 800faa6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800faa8:	6898      	ldr	r0, [r3, #8]
 800faaa:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 800faae:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME0) != 0;
 800fab0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fab2:	6898      	ldr	r0, [r3, #8]
 800fab4:	f3c0 6080 	ubfx	r0, r0, #26, #1
 800fab8:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 800faba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 800fac2:	bf14      	ite	ne
 800fac4:	2001      	movne	r0, #1
 800fac6:	2000      	moveq	r0, #0
 800fac8:	4770      	bx	lr
  default:
    return FALSE;
 800faca:	2000      	movs	r0, #0
  }
}
 800facc:	4770      	bx	lr
 800face:	bf00      	nop

0800fad0 <can_lld_transmit>:
                      const CANTxFrame *ctfp) {
  uint32_t tir;
  CAN_TxMailBox_TypeDef *tmbp;

  /* Pointer to a free transmission mailbox.*/
  switch (mailbox) {
 800fad0:	2903      	cmp	r1, #3
 800fad2:	d839      	bhi.n	800fb48 <can_lld_transmit+0x78>
 800fad4:	e8df f001 	tbb	[pc, r1]
 800fad8:	021e342c 	.word	0x021e342c
    break;
  case 2:
    tmbp = &canp->can->sTxMailBox[1];
    break;
  case 3:
    tmbp = &canp->can->sTxMailBox[2];
 800fadc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fade:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
  default:
    return;
  }

  /* Preparing the message.*/
  if (ctfp->IDE)
 800fae2:	7810      	ldrb	r0, [r2, #0]
                      const CANTxFrame *ctfp) {
 800fae4:	b410      	push	{r4}
  if (ctfp->IDE)
 800fae6:	0684      	lsls	r4, r0, #26
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 800fae8:	f3c0 1300 	ubfx	r3, r0, #4, #1
  if (ctfp->IDE)
 800faec:	d51b      	bpl.n	800fb26 <can_lld_transmit+0x56>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 800faee:	6854      	ldr	r4, [r2, #4]
 800faf0:	005b      	lsls	r3, r3, #1
 800faf2:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 800faf6:	f043 0304 	orr.w	r3, r3, #4
          CAN_TI0R_IDE;
  else
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
  tmbp->TDTR = ctfp->DLC;
 800fafa:	f000 000f 	and.w	r0, r0, #15
 800fafe:	6048      	str	r0, [r1, #4]
  tmbp->TDLR = ctfp->data32[0];
 800fb00:	6890      	ldr	r0, [r2, #8]
 800fb02:	6088      	str	r0, [r1, #8]
  tmbp->TDHR = ctfp->data32[1];
 800fb04:	68d2      	ldr	r2, [r2, #12]
 800fb06:	60ca      	str	r2, [r1, #12]
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 800fb08:	f043 0301 	orr.w	r3, r3, #1
 800fb0c:	600b      	str	r3, [r1, #0]
}
 800fb0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb12:	4770      	bx	lr
    tmbp = &canp->can->sTxMailBox[1];
 800fb14:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if (ctfp->IDE)
 800fb16:	7810      	ldrb	r0, [r2, #0]
                      const CANTxFrame *ctfp) {
 800fb18:	b410      	push	{r4}
  if (ctfp->IDE)
 800fb1a:	0684      	lsls	r4, r0, #26
    tmbp = &canp->can->sTxMailBox[1];
 800fb1c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 800fb20:	f3c0 1300 	ubfx	r3, r0, #4, #1
  if (ctfp->IDE)
 800fb24:	d4e3      	bmi.n	800faee <can_lld_transmit+0x1e>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 800fb26:	8894      	ldrh	r4, [r2, #4]
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
 800fb2e:	e7e4      	b.n	800fafa <can_lld_transmit+0x2a>
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 800fb30:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fb32:	688b      	ldr	r3, [r1, #8]
 800fb34:	f3c3 6301 	ubfx	r3, r3, #24, #2
 800fb38:	3318      	adds	r3, #24
 800fb3a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    break;
 800fb3e:	e7d0      	b.n	800fae2 <can_lld_transmit+0x12>
    tmbp = &canp->can->sTxMailBox[0];
 800fb40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fb42:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    break;
 800fb46:	e7cc      	b.n	800fae2 <can_lld_transmit+0x12>
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	0000      	movs	r0, r0
	...

0800fb50 <can_lld_is_rx_nonempty>:
 *
 * @notapi
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 800fb50:	2901      	cmp	r1, #1
 800fb52:	d011      	beq.n	800fb78 <can_lld_is_rx_nonempty+0x28>
 800fb54:	d30a      	bcc.n	800fb6c <can_lld_is_rx_nonempty+0x1c>
 800fb56:	2902      	cmp	r1, #2
 800fb58:	d106      	bne.n	800fb68 <can_lld_is_rx_nonempty+0x18>
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
  case 1:
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
  case 2:
    return (canp->can->RF1R & CAN_RF1R_FMP1) != 0;
 800fb5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb5c:	6918      	ldr	r0, [r3, #16]
 800fb5e:	f010 0003 	ands.w	r0, r0, #3
 800fb62:	bf18      	it	ne
 800fb64:	2001      	movne	r0, #1
 800fb66:	4770      	bx	lr
  default:
    return FALSE;
 800fb68:	2000      	movs	r0, #0
  }
}
 800fb6a:	4770      	bx	lr
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800fb6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb6e:	68da      	ldr	r2, [r3, #12]
 800fb70:	0792      	lsls	r2, r2, #30
 800fb72:	d0f3      	beq.n	800fb5c <can_lld_is_rx_nonempty+0xc>
 800fb74:	2001      	movs	r0, #1
 800fb76:	4770      	bx	lr
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
 800fb78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb7a:	68d8      	ldr	r0, [r3, #12]
 800fb7c:	f010 0003 	ands.w	r0, r0, #3
 800fb80:	bf18      	it	ne
 800fb82:	2001      	movne	r0, #1
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
	...

0800fb90 <can_lld_receive>:
 *
 * @notapi
 */
void can_lld_receive(CANDriver *canp,
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
 800fb90:	b410      	push	{r4}
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
 800fb92:	bb61      	cbnz	r1, 800fbee <can_lld_receive+0x5e>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 800fb94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb96:	68d9      	ldr	r1, [r3, #12]
 800fb98:	0788      	lsls	r0, r1, #30
 800fb9a:	d02f      	beq.n	800fbfc <can_lld_receive+0x6c>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800fb9c:	f8d3 01b0 	ldr.w	r0, [r3, #432]	; 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800fba0:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800fba4:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 800fba8:	60d4      	str	r4, [r2, #12]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800fbaa:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 800fbae:	6114      	str	r4, [r2, #16]

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800fbb0:	2420      	movs	r4, #32
 800fbb2:	60dc      	str	r4, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 800fbb4:	68dc      	ldr	r4, [r3, #12]
 800fbb6:	07a4      	lsls	r4, r4, #30
 800fbb8:	d03d      	beq.n	800fc36 <can_lld_receive+0xa6>
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 800fbba:	7913      	ldrb	r3, [r2, #4]
 800fbbc:	0844      	lsrs	r4, r0, #1
 800fbbe:	f364 1304 	bfi	r3, r4, #4, #1
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 800fbc2:	0884      	lsrs	r4, r0, #2
 800fbc4:	f364 1345 	bfi	r3, r4, #5, #1
 800fbc8:	7113      	strb	r3, [r2, #4]
  if (crfp->IDE)
 800fbca:	069b      	lsls	r3, r3, #26
 800fbcc:	d52d      	bpl.n	800fc2a <can_lld_receive+0x9a>
    crfp->EID = rir >> 3;
 800fbce:	6893      	ldr	r3, [r2, #8]
 800fbd0:	08c0      	lsrs	r0, r0, #3
 800fbd2:	f360 031c 	bfi	r3, r0, #0, #29
 800fbd6:	6093      	str	r3, [r2, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800fbd8:	7913      	ldrb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
  crfp->TIME = (uint16_t)(rdtr >> 16);
}
 800fbda:	f85d 4b04 	ldr.w	r4, [sp], #4
  crfp->FMI = (uint8_t)(rdtr >> 8);
 800fbde:	0a08      	lsrs	r0, r1, #8
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800fbe0:	f361 0303 	bfi	r3, r1, #0, #4
  crfp->TIME = (uint16_t)(rdtr >> 16);
 800fbe4:	0c09      	lsrs	r1, r1, #16
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800fbe6:	7113      	strb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 800fbe8:	7010      	strb	r0, [r2, #0]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 800fbea:	8051      	strh	r1, [r2, #2]
}
 800fbec:	4770      	bx	lr
  switch (mailbox) {
 800fbee:	2901      	cmp	r1, #1
 800fbf0:	d026      	beq.n	800fc40 <can_lld_receive+0xb0>
 800fbf2:	2902      	cmp	r1, #2
 800fbf4:	d026      	beq.n	800fc44 <can_lld_receive+0xb4>
}
 800fbf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbfa:	4770      	bx	lr
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 800fbfc:	6919      	ldr	r1, [r3, #16]
 800fbfe:	0789      	lsls	r1, r1, #30
 800fc00:	d0f9      	beq.n	800fbf6 <can_lld_receive+0x66>
    rir  = canp->can->sFIFOMailBox[1].RIR;
 800fc02:	f8d3 01c0 	ldr.w	r0, [r3, #448]	; 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 800fc06:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 800fc0a:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
 800fc0e:	60d4      	str	r4, [r2, #12]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 800fc10:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
 800fc14:	6114      	str	r4, [r2, #16]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 800fc16:	2420      	movs	r4, #32
 800fc18:	611c      	str	r4, [r3, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 800fc1a:	691c      	ldr	r4, [r3, #16]
 800fc1c:	07a4      	lsls	r4, r4, #30
 800fc1e:	d1cc      	bne.n	800fbba <can_lld_receive+0x2a>
      canp->can->IER |= CAN_IER_FMPIE1;
 800fc20:	695c      	ldr	r4, [r3, #20]
 800fc22:	f044 0410 	orr.w	r4, r4, #16
 800fc26:	615c      	str	r4, [r3, #20]
 800fc28:	e7c7      	b.n	800fbba <can_lld_receive+0x2a>
    crfp->SID = rir >> 21;
 800fc2a:	8913      	ldrh	r3, [r2, #8]
 800fc2c:	0d40      	lsrs	r0, r0, #21
 800fc2e:	f360 030a 	bfi	r3, r0, #0, #11
 800fc32:	8113      	strh	r3, [r2, #8]
 800fc34:	e7d0      	b.n	800fbd8 <can_lld_receive+0x48>
      canp->can->IER |= CAN_IER_FMPIE0;
 800fc36:	695c      	ldr	r4, [r3, #20]
 800fc38:	f044 0402 	orr.w	r4, r4, #2
 800fc3c:	615c      	str	r4, [r3, #20]
 800fc3e:	e7bc      	b.n	800fbba <can_lld_receive+0x2a>
 800fc40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fc42:	e7ab      	b.n	800fb9c <can_lld_receive+0xc>
 800fc44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fc46:	e7dc      	b.n	800fc02 <can_lld_receive+0x72>
	...

0800fc50 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800fc52:	4d65      	ldr	r5, [pc, #404]	; (800fde8 <_pal_lld_init+0x198>)
  gpiop->OTYPER  = config->otyper;
 800fc54:	4c65      	ldr	r4, [pc, #404]	; (800fdec <_pal_lld_init+0x19c>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800fc56:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 800fc58:	4965      	ldr	r1, [pc, #404]	; (800fdf0 <_pal_lld_init+0x1a0>)
 800fc5a:	4a66      	ldr	r2, [pc, #408]	; (800fdf4 <_pal_lld_init+0x1a4>)
 800fc5c:	4b66      	ldr	r3, [pc, #408]	; (800fdf8 <_pal_lld_init+0x1a8>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800fc5e:	f240 1eff 	movw	lr, #511	; 0x1ff
 800fc62:	ea47 070e 	orr.w	r7, r7, lr
 800fc66:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800fc68:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800fc6a:	ea46 060e 	orr.w	r6, r6, lr
 800fc6e:	652e      	str	r6, [r5, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800fc70:	6845      	ldr	r5, [r0, #4]
 800fc72:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800fc74:	6885      	ldr	r5, [r0, #8]
 800fc76:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800fc78:	68c5      	ldr	r5, [r0, #12]
 800fc7a:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800fc7c:	6905      	ldr	r5, [r0, #16]
 800fc7e:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800fc80:	6945      	ldr	r5, [r0, #20]
 800fc82:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800fc84:	6985      	ldr	r5, [r0, #24]
 800fc86:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800fc88:	6805      	ldr	r5, [r0, #0]
 800fc8a:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800fc8c:	6a04      	ldr	r4, [r0, #32]
 800fc8e:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800fc90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fc92:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800fc94:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fc96:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800fc98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800fc9a:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800fc9c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800fc9e:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800fca0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800fca2:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800fca4:	69c4      	ldr	r4, [r0, #28]
 800fca6:	600c      	str	r4, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800fca8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800fcaa:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800fcac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800fcae:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800fcb0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800fcb2:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800fcb4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800fcb6:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800fcb8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fcba:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800fcbc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800fcbe:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800fcc0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fcc2:	6011      	str	r1, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800fcc4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800fcc6:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800fcc8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800fcca:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800fccc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800fcce:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800fcd0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800fcd2:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800fcd4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800fcd6:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800fcd8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800fcda:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800fcdc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800fcde:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800fce0:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800fce2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800fce6:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800fce8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800fcec:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800fcee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800fcf2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800fcf6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800fcfa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800fcfe:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800fd02:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800fd06:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800fd0a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800fd0c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800fd10:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800fd14:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800fd18:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800fd1c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800fd20:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800fd24:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800fd28:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800fd2c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800fd30:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800fd34:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800fd38:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800fd3c:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800fd40:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800fd44:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
 800fd48:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800fd4c:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800fd50:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800fd52:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800fd56:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800fd58:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800fd5c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800fd5e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800fd62:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800fd64:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800fd68:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800fd6a:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800fd6e:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800fd70:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800fd74:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800fd76:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800fd7a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800fd7e:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800fd82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800fd86:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800fd8a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800fd8e:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800fd92:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800fd96:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800fd9a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800fd9e:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800fda2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800fda6:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800fdaa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800fdae:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800fdb2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800fdb6:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800fdba:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800fdbe:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800fdc2:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800fdc6:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800fdca:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800fdce:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800fdd2:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800fdd6:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800fdda:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800fdde:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800fde2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
 800fde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fde8:	40023800 	.word	0x40023800
 800fdec:	40020000 	.word	0x40020000
 800fdf0:	40020400 	.word	0x40020400
 800fdf4:	40020800 	.word	0x40020800
 800fdf8:	40020c00 	.word	0x40020c00
 800fdfc:	00000000 	.word	0x00000000

0800fe00 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800fe04:	f04f 0c0f 	mov.w	ip, #15
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800fe08:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800fe0c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800fe10:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800fe14:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t bit     = 0;
 800fe18:	2400      	movs	r4, #0
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800fe1a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800fe1e:	f04f 0901 	mov.w	r9, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800fe22:	f04f 0803 	mov.w	r8, #3
 800fe26:	e030      	b.n	800fe8a <_pal_lld_setgroupmode+0x8a>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800fe28:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800fe2c:	ea2b 0303 	bic.w	r3, fp, r3
 800fe30:	ea43 030a 	orr.w	r3, r3, sl
 800fe34:	6203      	str	r3, [r0, #32]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800fe36:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 800fe38:	fa09 fa04 	lsl.w	sl, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800fe3c:	ea23 030a 	bic.w	r3, r3, sl
 800fe40:	433b      	orrs	r3, r7
 800fe42:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 800fe44:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800fe46:	f8d0 a008 	ldr.w	sl, [r0, #8]
      m2 = 3 << (bit * 2);
 800fe4a:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800fe4e:	43db      	mvns	r3, r3
 800fe50:	ea0a 0a03 	and.w	sl, sl, r3
 800fe54:	ea4a 0a06 	orr.w	sl, sl, r6
 800fe58:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800fe5c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800fe60:	ea03 0a0a 	and.w	sl, r3, sl
 800fe64:	ea4a 0a05 	orr.w	sl, sl, r5
 800fe68:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800fe6c:	f8d0 a000 	ldr.w	sl, [r0]
 800fe70:	ea03 030a 	and.w	r3, r3, sl
 800fe74:	ea43 030e 	orr.w	r3, r3, lr
 800fe78:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800fe7a:	0849      	lsrs	r1, r1, #1
 800fe7c:	d019      	beq.n	800feb2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800fe7e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800fe80:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800fe82:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800fe84:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800fe88:	3401      	adds	r4, #1
      altrmask = altr << ((bit & 7) * 4);
 800fe8a:	f004 0307 	and.w	r3, r4, #7
 800fe8e:	009b      	lsls	r3, r3, #2
    if ((mask & 1) != 0) {
 800fe90:	f011 0f01 	tst.w	r1, #1
      altrmask = altr << ((bit & 7) * 4);
 800fe94:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 800fe98:	fa0c f303 	lsl.w	r3, ip, r3
    if ((mask & 1) != 0) {
 800fe9c:	d0ed      	beq.n	800fe7a <_pal_lld_setgroupmode+0x7a>
      if (bit < 8)
 800fe9e:	2c07      	cmp	r4, #7
 800fea0:	d9c2      	bls.n	800fe28 <_pal_lld_setgroupmode+0x28>
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800fea2:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800fea6:	ea2b 0303 	bic.w	r3, fp, r3
 800feaa:	ea43 030a 	orr.w	r3, r3, sl
 800feae:	6243      	str	r3, [r0, #36]	; 0x24
 800feb0:	e7c1      	b.n	800fe36 <_pal_lld_setgroupmode+0x36>
 800feb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb6:	bf00      	nop
	...

0800fec0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800fec0:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 800fec8:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800feca:	d112      	bne.n	800fef2 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800fecc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800fece:	680a      	ldr	r2, [r1, #0]
 800fed0:	6813      	ldr	r3, [r2, #0]
 800fed2:	f023 031f 	bic.w	r3, r3, #31
 800fed6:	6013      	str	r3, [r2, #0]
 800fed8:	6813      	ldr	r3, [r2, #0]
 800feda:	07db      	lsls	r3, r3, #31
 800fedc:	d4fc      	bmi.n	800fed8 <i2c_lld_serve_tx_end_irq+0x18>
 800fede:	7a08      	ldrb	r0, [r1, #8]
 800fee0:	684a      	ldr	r2, [r1, #4]
 800fee2:	233d      	movs	r3, #61	; 0x3d
 800fee4:	4083      	lsls	r3, r0
 800fee6:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800fee8:	6863      	ldr	r3, [r4, #4]
 800feea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800feee:	6063      	str	r3, [r4, #4]
 800fef0:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 800fef2:	4802      	ldr	r0, [pc, #8]	; (800fefc <i2c_lld_serve_tx_end_irq+0x3c>)
 800fef4:	f7fd fb0c 	bl	800d510 <chSysHalt>
 800fef8:	e7e8      	b.n	800fecc <i2c_lld_serve_tx_end_irq+0xc>
 800fefa:	bf00      	nop
 800fefc:	0802eb40 	.word	0x0802eb40

0800ff00 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800ff00:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 800ff08:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800ff0a:	d125      	bne.n	800ff58 <i2c_lld_serve_rx_end_irq+0x58>
  dmaStreamDisable(i2cp->dmarx);
 800ff0c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800ff0e:	6813      	ldr	r3, [r2, #0]
 800ff10:	6819      	ldr	r1, [r3, #0]
 800ff12:	f021 011f 	bic.w	r1, r1, #31
 800ff16:	6019      	str	r1, [r3, #0]
 800ff18:	681c      	ldr	r4, [r3, #0]
 800ff1a:	f014 0401 	ands.w	r4, r4, #1
 800ff1e:	d1fb      	bne.n	800ff18 <i2c_lld_serve_rx_end_irq+0x18>
 800ff20:	7a11      	ldrb	r1, [r2, #8]
 800ff22:	6852      	ldr	r2, [r2, #4]
 800ff24:	233d      	movs	r3, #61	; 0x3d
 800ff26:	408b      	lsls	r3, r1
 800ff28:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 800ff2a:	686b      	ldr	r3, [r5, #4]
 800ff2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff30:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 800ff32:	682b      	ldr	r3, [r5, #0]
 800ff34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff38:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800ff3a:	682b      	ldr	r3, [r5, #0]
 800ff3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	2320      	movs	r3, #32
 800ff44:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800ff48:	f106 001c 	add.w	r0, r6, #28
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	f7fd fd9f 	bl	800da90 <chThdResumeI>
 800ff52:	f384 8811 	msr	BASEPRI, r4
 800ff56:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 800ff58:	4801      	ldr	r0, [pc, #4]	; (800ff60 <i2c_lld_serve_rx_end_irq+0x60>)
 800ff5a:	f7fd fad9 	bl	800d510 <chSysHalt>
 800ff5e:	e7d5      	b.n	800ff0c <i2c_lld_serve_rx_end_irq+0xc>
 800ff60:	0802eb40 	.word	0x0802eb40
	...

0800ff70 <VectorC4>:
  I2C_TypeDef *dp = i2cp->i2c;
 800ff70:	483a      	ldr	r0, [pc, #232]	; (801005c <VectorC4+0xec>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ff72:	4a3b      	ldr	r2, [pc, #236]	; (8010060 <VectorC4+0xf0>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800ff74:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 800ff76:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800ff78:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800ff7a:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ff7c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ff80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ff84:	4293      	cmp	r3, r2
 800ff86:	d04c      	beq.n	8010022 <VectorC4+0xb2>
 800ff88:	d81e      	bhi.n	800ffc8 <VectorC4+0x58>
 800ff8a:	3a07      	subs	r2, #7
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d03c      	beq.n	801000a <VectorC4+0x9a>
 800ff90:	3201      	adds	r2, #1
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d110      	bne.n	800ffb8 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ff96:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800ff98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ff9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800ff9e:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ffa0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	f042 0201 	orr.w	r2, r2, #1
 800ffa8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800ffaa:	6862      	ldr	r2, [r4, #4]
 800ffac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ffb0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d94b      	bls.n	8010050 <VectorC4+0xe0>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800ffb8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800ffbc:	bf18      	it	ne
 800ffbe:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ffc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800ffc4:	f7fe b9c4 	b.w	800e350 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ffc8:	4a26      	ldr	r2, [pc, #152]	; (8010064 <VectorC4+0xf4>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d012      	beq.n	800fff4 <VectorC4+0x84>
 800ffce:	3202      	adds	r2, #2
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d1f1      	bne.n	800ffb8 <VectorC4+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800ffd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	685e      	ldr	r6, [r3, #4]
 800ffda:	b33e      	cbz	r6, 801002c <VectorC4+0xbc>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ffdc:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 800ffde:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ffe0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 800ffe4:	f042 0201 	orr.w	r2, r2, #1
 800ffe8:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ffea:	6023      	str	r3, [r4, #0]
}
 800ffec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800fff0:	f7fe b9ae 	b.w	800e350 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800fff4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800fff6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800fff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800fffc:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800fffe:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8010000:	6813      	ldr	r3, [r2, #0]
 8010002:	f043 0301 	orr.w	r3, r3, #1
 8010006:	6013      	str	r3, [r2, #0]
 8010008:	e7d6      	b.n	800ffb8 <VectorC4+0x48>
    if ((i2cp->addr >> 8) > 0) { 
 801000a:	8c03      	ldrh	r3, [r0, #32]
 801000c:	0a1a      	lsrs	r2, r3, #8
 801000e:	d00b      	beq.n	8010028 <VectorC4+0xb8>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8010010:	f003 0301 	and.w	r3, r3, #1
 8010014:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8010018:	f002 0206 	and.w	r2, r2, #6
 801001c:	4313      	orrs	r3, r2
 801001e:	6123      	str	r3, [r4, #16]
 8010020:	e7ca      	b.n	800ffb8 <VectorC4+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8010022:	8c03      	ldrh	r3, [r0, #32]
 8010024:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	e7c5      	b.n	800ffb8 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 801002c:	6863      	ldr	r3, [r4, #4]
 801002e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010032:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8010034:	6823      	ldr	r3, [r4, #0]
 8010036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801003a:	6023      	str	r3, [r4, #0]
 801003c:	2320      	movs	r3, #32
 801003e:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8010042:	301c      	adds	r0, #28
 8010044:	4631      	mov	r1, r6
 8010046:	f7fd fd23 	bl	800da90 <chThdResumeI>
 801004a:	f386 8811 	msr	BASEPRI, r6
 801004e:	e7b3      	b.n	800ffb8 <VectorC4+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 8010050:	6823      	ldr	r3, [r4, #0]
 8010052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010056:	6023      	str	r3, [r4, #0]
 8010058:	e7ae      	b.n	800ffb8 <VectorC4+0x48>
 801005a:	bf00      	nop
 801005c:	20001d74 	.word	0x20001d74
 8010060:	00030008 	.word	0x00030008
 8010064:	00070082 	.word	0x00070082
	...

08010070 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8010070:	4833      	ldr	r0, [pc, #204]	; (8010140 <VectorC8+0xd0>)
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8010072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8010074:	6b44      	ldr	r4, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 8010076:	6b07      	ldr	r7, [r0, #48]	; 0x30
  uint16_t sr = I2CD2.i2c->SR1;
 8010078:	6965      	ldr	r5, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 801007a:	683a      	ldr	r2, [r7, #0]

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 801007c:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
 8010080:	43db      	mvns	r3, r3
 8010082:	6163      	str	r3, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8010084:	6813      	ldr	r3, [r2, #0]
 8010086:	f023 031f 	bic.w	r3, r3, #31
 801008a:	6013      	str	r3, [r2, #0]
  uint16_t sr = I2CD2.i2c->SR1;
 801008c:	b2a9      	uxth	r1, r5
  dmaStreamDisable(i2cp->dmatx);
 801008e:	6813      	ldr	r3, [r2, #0]
 8010090:	07db      	lsls	r3, r3, #31
 8010092:	d4fc      	bmi.n	801008e <VectorC8+0x1e>
 8010094:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8010096:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8010098:	687f      	ldr	r7, [r7, #4]
 801009a:	233d      	movs	r3, #61	; 0x3d
 801009c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 801009e:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 80100a0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80100a2:	6813      	ldr	r3, [r2, #0]
 80100a4:	f023 031f 	bic.w	r3, r3, #31
 80100a8:	6013      	str	r3, [r2, #0]
 80100aa:	6813      	ldr	r3, [r2, #0]
 80100ac:	07df      	lsls	r7, r3, #31
 80100ae:	d4fc      	bmi.n	80100aa <VectorC8+0x3a>
 80100b0:	7a37      	ldrb	r7, [r6, #8]
 80100b2:	6872      	ldr	r2, [r6, #4]
 80100b4:	233d      	movs	r3, #61	; 0x3d
 80100b6:	40bb      	lsls	r3, r7
 80100b8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80100ba:	f411 7380 	ands.w	r3, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 80100be:	bf18      	it	ne
 80100c0:	2301      	movne	r3, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80100c2:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 80100c4:	6083      	str	r3, [r0, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80100c6:	bf44      	itt	mi
 80100c8:	f043 0302 	orrmi.w	r3, r3, #2
 80100cc:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80100ce:	054a      	lsls	r2, r1, #21
 80100d0:	d50a      	bpl.n	80100e8 <VectorC8+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80100d2:	6862      	ldr	r2, [r4, #4]
 80100d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80100d8:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80100da:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80100dc:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80100e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100e4:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80100e6:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80100e8:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 80100ea:	bf44      	itt	mi
 80100ec:	f043 0308 	orrmi.w	r3, r3, #8
 80100f0:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80100f2:	044e      	lsls	r6, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 80100f4:	bf44      	itt	mi
 80100f6:	f043 0320 	orrmi.w	r3, r3, #32
 80100fa:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80100fc:	04cc      	lsls	r4, r1, #19
 80100fe:	d513      	bpl.n	8010128 <VectorC8+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 8010100:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8010104:	0429      	lsls	r1, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8010106:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8010108:	d416      	bmi.n	8010138 <VectorC8+0xc8>
 801010a:	2320      	movs	r3, #32
 801010c:	f383 8811 	msr	BASEPRI, r3
 8010110:	f06f 0101 	mvn.w	r1, #1
 8010114:	480b      	ldr	r0, [pc, #44]	; (8010144 <VectorC8+0xd4>)
 8010116:	f7fd fcbb 	bl	800da90 <chThdResumeI>
 801011a:	2300      	movs	r3, #0
 801011c:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8010120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8010124:	f7fe b914 	b.w	800e350 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8010128:	042a      	lsls	r2, r5, #16
 801012a:	d405      	bmi.n	8010138 <VectorC8+0xc8>
  if (i2cp->errors != I2C_NO_ERROR)
 801012c:	2b00      	cmp	r3, #0
 801012e:	d1ec      	bne.n	801010a <VectorC8+0x9a>
}
 8010130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8010134:	f7fe b90c 	b.w	800e350 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 8010138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801013c:	6083      	str	r3, [r0, #8]
 801013e:	e7e4      	b.n	801010a <VectorC8+0x9a>
 8010140:	20001d74 	.word	0x20001d74
 8010144:	20001d90 	.word	0x20001d90
	...

08010150 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8010150:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 8010152:	4c07      	ldr	r4, [pc, #28]	; (8010170 <i2c_lld_init+0x20>)
 8010154:	4620      	mov	r0, r4
 8010156:	f7fe f9e3 	bl	800e520 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 801015a:	4b06      	ldr	r3, [pc, #24]	; (8010174 <i2c_lld_init+0x24>)
  I2CD2.i2c    = I2C2;
 801015c:	4a06      	ldr	r2, [pc, #24]	; (8010178 <i2c_lld_init+0x28>)
 801015e:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD2.thread = NULL;
 8010160:	2100      	movs	r1, #0
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 8010162:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD2.thread = NULL;
 8010166:	61e1      	str	r1, [r4, #28]
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 8010168:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 801016a:	6322      	str	r2, [r4, #48]	; 0x30
 801016c:	bd10      	pop	{r4, pc}
 801016e:	bf00      	nop
 8010170:	20001d74 	.word	0x20001d74
 8010174:	0802ea98 	.word	0x0802ea98
 8010178:	40005800 	.word	0x40005800
 801017c:	00000000 	.word	0x00000000

08010180 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8010180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8010182:	7803      	ldrb	r3, [r0, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8010184:	6b45      	ldr	r5, [r0, #52]	; 0x34
  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8010186:	f240 4256 	movw	r2, #1110	; 0x456
 801018a:	6282      	str	r2, [r0, #40]	; 0x28
  if (i2cp->state == I2C_STOP) {
 801018c:	2b01      	cmp	r3, #1
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 801018e:	f240 4216 	movw	r2, #1046	; 0x416
void i2c_lld_start(I2CDriver *i2cp) {
 8010192:	4604      	mov	r4, r0
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8010194:	6242      	str	r2, [r0, #36]	; 0x24
  if (i2cp->state == I2C_STOP) {
 8010196:	d03c      	beq.n	8010212 <i2c_lld_start+0x92>
  I2C_TypeDef *dp = i2cp->i2c;
 8010198:	462b      	mov	r3, r5
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 801019a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 801019c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801019e:	6860      	ldr	r0, [r4, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80101a0:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80101a2:	f8d2 e000 	ldr.w	lr, [r2]
  int32_t clock_speed = i2cp->config->clock_speed;
 80101a6:	6841      	ldr	r1, [r0, #4]
  if (clock_speed <= 100000) {
 80101a8:	4e46      	ldr	r6, [pc, #280]	; (80102c4 <i2c_lld_start+0x144>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80101aa:	f105 0210 	add.w	r2, r5, #16
 80101ae:	60ba      	str	r2, [r7, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80101b0:	f44f 6410 	mov.w	r4, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80101b4:	f8ce 2008 	str.w	r2, [lr, #8]
  dp->CR1 = I2C_CR1_SWRST;
 80101b8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
 80101bc:	2200      	movs	r2, #0
  dp->CR1 = I2C_CR1_SWRST;
 80101be:	602f      	str	r7, [r5, #0]
  dp->CR1 = 0;
 80101c0:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80101c2:	606c      	str	r4, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80101c4:	685c      	ldr	r4, [r3, #4]
 80101c6:	f64f 77c0 	movw	r7, #65472	; 0xffc0
 80101ca:	403c      	ands	r4, r7
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80101cc:	7a07      	ldrb	r7, [r0, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80101ce:	605c      	str	r4, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80101d0:	685c      	ldr	r4, [r3, #4]
  if (clock_speed <= 100000) {
 80101d2:	42b1      	cmp	r1, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80101d4:	f044 042a 	orr.w	r4, r4, #42	; 0x2a
 80101d8:	605c      	str	r4, [r3, #4]
  if (clock_speed <= 100000) {
 80101da:	dd49      	ble.n	8010270 <i2c_lld_start+0xf0>
  else if (clock_speed <= 400000) {
 80101dc:	4c3a      	ldr	r4, [pc, #232]	; (80102c8 <i2c_lld_start+0x148>)
 80101de:	42a1      	cmp	r1, r4
 80101e0:	dc07      	bgt.n	80101f2 <i2c_lld_start+0x72>
    if (duty == FAST_DUTY_CYCLE_2) {
 80101e2:	2f02      	cmp	r7, #2
 80101e4:	d063      	beq.n	80102ae <i2c_lld_start+0x12e>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 80101e6:	2f03      	cmp	r7, #3
 80101e8:	d054      	beq.n	8010294 <i2c_lld_start+0x114>
 80101ea:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80101ee:	210d      	movs	r1, #13
 80101f0:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 80101f2:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 80101f4:	7801      	ldrb	r1, [r0, #0]
  regCR1 = dp->CR1;
 80101f6:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 80101f8:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 80101fa:	b292      	uxth	r2, r2
  switch (opmode) {
 80101fc:	d044      	beq.n	8010288 <i2c_lld_start+0x108>
 80101fe:	2903      	cmp	r1, #3
 8010200:	d03f      	beq.n	8010282 <i2c_lld_start+0x102>
 8010202:	2901      	cmp	r1, #1
 8010204:	d030      	beq.n	8010268 <i2c_lld_start+0xe8>
  dp->CR1 = regCR1;
 8010206:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	f043 0301 	orr.w	r3, r3, #1
 801020e:	602b      	str	r3, [r5, #0]
 8010210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&I2CD2 == i2cp) {
 8010212:	4b2e      	ldr	r3, [pc, #184]	; (80102cc <i2c_lld_start+0x14c>)
 8010214:	4298      	cmp	r0, r3
 8010216:	d1bf      	bne.n	8010198 <i2c_lld_start+0x18>
      rccResetI2C2();
 8010218:	4e2d      	ldr	r6, [pc, #180]	; (80102d0 <i2c_lld_start+0x150>)
      b = dmaStreamAllocate(i2cp->dmarx,
 801021a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      rccResetI2C2();
 801021c:	6a33      	ldr	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 801021e:	4a2d      	ldr	r2, [pc, #180]	; (80102d4 <i2c_lld_start+0x154>)
      rccResetI2C2();
 8010220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010224:	2100      	movs	r1, #0
 8010226:	6233      	str	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8010228:	4623      	mov	r3, r4
      rccResetI2C2();
 801022a:	6231      	str	r1, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 801022c:	2105      	movs	r1, #5
 801022e:	f7ff f957 	bl	800f4e0 <dmaStreamAllocate>
      b = dmaStreamAllocate(i2cp->dmatx,
 8010232:	4a29      	ldr	r2, [pc, #164]	; (80102d8 <i2c_lld_start+0x158>)
 8010234:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010236:	4623      	mov	r3, r4
 8010238:	2105      	movs	r1, #5
 801023a:	f7ff f951 	bl	800f4e0 <dmaStreamAllocate>
      rccEnableI2C2(FALSE);
 801023e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8010240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010244:	6433      	str	r3, [r6, #64]	; 0x40
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8010246:	2105      	movs	r1, #5
 8010248:	2021      	movs	r0, #33	; 0x21
 801024a:	f7fe ff59 	bl	800f100 <nvicEnableVector>
      nvicEnableVector(I2C2_ER_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 801024e:	2105      	movs	r1, #5
 8010250:	2022      	movs	r0, #34	; 0x22
 8010252:	f7fe ff55 	bl	800f100 <nvicEnableVector>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8010256:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010258:	4820      	ldr	r0, [pc, #128]	; (80102dc <i2c_lld_start+0x15c>)
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 801025a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801025c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 801025e:	4301      	orrs	r1, r0
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8010260:	4302      	orrs	r2, r0
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8010262:	6261      	str	r1, [r4, #36]	; 0x24
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8010264:	62a2      	str	r2, [r4, #40]	; 0x28
 8010266:	e798      	b.n	801019a <i2c_lld_start+0x1a>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8010268:	f022 020a 	bic.w	r2, r2, #10
 801026c:	b292      	uxth	r2, r2
 801026e:	e7ca      	b.n	8010206 <i2c_lld_start+0x86>
    dp->TRISE = I2C_CLK_FREQ + 1;
 8010270:	242b      	movs	r4, #43	; 0x2b
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8010272:	0049      	lsls	r1, r1, #1
 8010274:	4a1a      	ldr	r2, [pc, #104]	; (80102e0 <i2c_lld_start+0x160>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 8010276:	621c      	str	r4, [r3, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8010278:	fbb2 f2f1 	udiv	r2, r2, r1
 801027c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8010280:	e7b7      	b.n	80101f2 <i2c_lld_start+0x72>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8010282:	f042 020a 	orr.w	r2, r2, #10
 8010286:	e7be      	b.n	8010206 <i2c_lld_start+0x86>
 8010288:	f022 0208 	bic.w	r2, r2, #8
 801028c:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 801028e:	f042 0202 	orr.w	r2, r2, #2
 8010292:	e7b8      	b.n	8010206 <i2c_lld_start+0x86>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8010294:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8010298:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801029c:	4a10      	ldr	r2, [pc, #64]	; (80102e0 <i2c_lld_start+0x160>)
 801029e:	fbb2 f2f1 	udiv	r2, r2, r1
 80102a2:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 80102a6:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 80102aa:	b292      	uxth	r2, r2
 80102ac:	e79f      	b.n	80101ee <i2c_lld_start+0x6e>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80102ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80102b2:	4a0b      	ldr	r2, [pc, #44]	; (80102e0 <i2c_lld_start+0x160>)
 80102b4:	fbb2 f2f1 	udiv	r2, r2, r1
 80102b8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80102bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80102c0:	b292      	uxth	r2, r2
 80102c2:	e794      	b.n	80101ee <i2c_lld_start+0x6e>
 80102c4:	000186a0 	.word	0x000186a0
 80102c8:	00061a80 	.word	0x00061a80
 80102cc:	20001d74 	.word	0x20001d74
 80102d0:	40023800 	.word	0x40023800
 80102d4:	0800ff01 	.word	0x0800ff01
 80102d8:	0800fec1 	.word	0x0800fec1
 80102dc:	0e030000 	.word	0x0e030000
 80102e0:	0280de80 	.word	0x0280de80
	...

080102f0 <i2c_lld_stop>:
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 80102f0:	7803      	ldrb	r3, [r0, #0]
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d02f      	beq.n	8010356 <i2c_lld_stop+0x66>
  dmaStreamDisable(i2cp->dmatx);
 80102f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
  I2C_TypeDef *dp = i2cp->i2c;
 80102f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 80102fa:	680a      	ldr	r2, [r1, #0]
void i2c_lld_stop(I2CDriver *i2cp) {
 80102fc:	b570      	push	{r4, r5, r6, lr}
  dp->CR1 = 0;
 80102fe:	2400      	movs	r4, #0
  dp->CR1 = I2C_CR1_SWRST;
 8010300:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8010304:	601d      	str	r5, [r3, #0]
  dp->CR1 = 0;
 8010306:	601c      	str	r4, [r3, #0]
  dp->CR2 = 0;
 8010308:	605c      	str	r4, [r3, #4]
  dp->SR1 = 0;
 801030a:	615c      	str	r4, [r3, #20]
  dmaStreamDisable(i2cp->dmatx);
 801030c:	6813      	ldr	r3, [r2, #0]
 801030e:	f023 031f 	bic.w	r3, r3, #31
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	6813      	ldr	r3, [r2, #0]
 8010316:	07dc      	lsls	r4, r3, #31
 8010318:	d4fc      	bmi.n	8010314 <i2c_lld_stop+0x24>
 801031a:	7a0e      	ldrb	r6, [r1, #8]
  dmaStreamDisable(i2cp->dmarx);
 801031c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 801031e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(i2cp->dmarx);
 8010320:	682a      	ldr	r2, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8010322:	233d      	movs	r3, #61	; 0x3d
 8010324:	40b3      	lsls	r3, r6
 8010326:	6023      	str	r3, [r4, #0]
  dmaStreamDisable(i2cp->dmarx);
 8010328:	6813      	ldr	r3, [r2, #0]
 801032a:	f023 031f 	bic.w	r3, r3, #31
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	6813      	ldr	r3, [r2, #0]
 8010332:	07db      	lsls	r3, r3, #31
 8010334:	d4fc      	bmi.n	8010330 <i2c_lld_stop+0x40>
 8010336:	4604      	mov	r4, r0
 8010338:	7a28      	ldrb	r0, [r5, #8]
 801033a:	686a      	ldr	r2, [r5, #4]
 801033c:	233d      	movs	r3, #61	; 0x3d
 801033e:	4083      	lsls	r3, r0
 8010340:	6013      	str	r3, [r2, #0]

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
    dmaStreamRelease(i2cp->dmatx);
 8010342:	4608      	mov	r0, r1
 8010344:	f7ff f914 	bl	800f570 <dmaStreamRelease>
    dmaStreamRelease(i2cp->dmarx);
 8010348:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801034a:	f7ff f911 	bl	800f570 <dmaStreamRelease>
      rccDisableI2C1(FALSE);
    }
#endif

#if STM32_I2C_USE_I2C2
    if (&I2CD2 == i2cp) {
 801034e:	4b08      	ldr	r3, [pc, #32]	; (8010370 <i2c_lld_stop+0x80>)
 8010350:	429c      	cmp	r4, r3
 8010352:	d001      	beq.n	8010358 <i2c_lld_stop+0x68>
 8010354:	bd70      	pop	{r4, r5, r6, pc}
 8010356:	4770      	bx	lr
      nvicDisableVector(I2C2_EV_IRQn);
 8010358:	2021      	movs	r0, #33	; 0x21
 801035a:	f7fe fef1 	bl	800f140 <nvicDisableVector>
      nvicDisableVector(I2C2_ER_IRQn);
 801035e:	2022      	movs	r0, #34	; 0x22
 8010360:	f7fe feee 	bl	800f140 <nvicDisableVector>
      rccDisableI2C2(FALSE);
 8010364:	4a03      	ldr	r2, [pc, #12]	; (8010374 <i2c_lld_stop+0x84>)
 8010366:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010368:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801036c:	6413      	str	r3, [r2, #64]	; 0x40
      nvicDisableVector(I2C3_ER_IRQn);
      rccDisableI2C3(FALSE);
    }
#endif
  }
}
 801036e:	e7f1      	b.n	8010354 <i2c_lld_stop+0x64>
 8010370:	20001d74 	.word	0x20001d74
 8010374:	40023800 	.word	0x40023800
	...

08010380 <i2c_lld_master_receive_timeout>:

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 1 -> receive.*/
  i2cp->addr = (addr << 1) | 0x01;
 8010380:	0049      	lsls	r1, r1, #1
                                     systime_t timeout) {
 8010382:	b5f0      	push	{r4, r5, r6, r7, lr}
  i2cp->addr = (addr << 1) | 0x01;
 8010384:	f041 0101 	orr.w	r1, r1, #1
  i2cp->errors = I2C_NO_ERROR;
 8010388:	2500      	movs	r5, #0
  i2cp->addr = (addr << 1) | 0x01;
 801038a:	8401      	strh	r1, [r0, #32]
  I2C_TypeDef *dp = i2cp->i2c;
 801038c:	6b44      	ldr	r4, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 801038e:	6085      	str	r5, [r0, #8]
                                     systime_t timeout) {
 8010390:	f8dd e014 	ldr.w	lr, [sp, #20]
 8010394:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8010398:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 801039a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801039c:	6837      	ldr	r7, [r6, #0]
  return ch.vtlist.vt_systime;
 801039e:	4e14      	ldr	r6, [pc, #80]	; (80103f0 <i2c_lld_master_receive_timeout+0x70>)
 80103a0:	6039      	str	r1, [r7, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80103a2:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80103a4:	607b      	str	r3, [r7, #4]
 80103a6:	462a      	mov	r2, r5
 80103a8:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 80103aa:	2520      	movs	r5, #32
 80103ac:	e001      	b.n	80103b2 <i2c_lld_master_receive_timeout+0x32>
 80103ae:	f382 8811 	msr	BASEPRI, r2
 80103b2:	f385 8811 	msr	BASEPRI, r5
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80103b6:	69a3      	ldr	r3, [r4, #24]
 80103b8:	0799      	lsls	r1, r3, #30
 80103ba:	d402      	bmi.n	80103c2 <i2c_lld_master_receive_timeout+0x42>
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	059b      	lsls	r3, r3, #22
 80103c0:	d507      	bpl.n	80103d2 <i2c_lld_master_receive_timeout+0x52>
 80103c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return (bool)((time - start) < (end - start));
 80103c4:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 80103c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80103ca:	d3f0      	bcc.n	80103ae <i2c_lld_master_receive_timeout+0x2e>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80103d2:	6863      	ldr	r3, [r4, #4]
 80103d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80103d8:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  return chThdSuspendTimeoutS(trp, timeout);
 80103e0:	4671      	mov	r1, lr
 80103e2:	6023      	str	r3, [r4, #0]
 80103e4:	301c      	adds	r0, #28
}
 80103e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80103ea:	f7fd bb41 	b.w	800da70 <chThdSuspendTimeoutS>
 80103ee:	bf00      	nop
 80103f0:	20001a40 	.word	0x20001a40
	...

08010400 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8010400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8010404:	0049      	lsls	r1, r1, #1
  i2cp->errors = I2C_NO_ERROR;
 8010406:	2500      	movs	r5, #0
                                      systime_t timeout) {
 8010408:	4616      	mov	r6, r2
 801040a:	aa07      	add	r2, sp, #28
  i2cp->addr = (addr << 1);
 801040c:	8401      	strh	r1, [r0, #32]
                                      systime_t timeout) {
 801040e:	469c      	mov	ip, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8010410:	6b44      	ldr	r4, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 8010412:	6085      	str	r5, [r0, #8]
                                      systime_t timeout) {
 8010414:	e892 4104 	ldmia.w	r2, {r2, r8, lr}
 8010418:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 801041c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 801041e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8010420:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8010422:	683f      	ldr	r7, [r7, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8010424:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010426:	600b      	str	r3, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8010428:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 801042c:	60ce      	str	r6, [r1, #12]
  return ch.vtlist.vt_systime;
 801042e:	4e16      	ldr	r6, [pc, #88]	; (8010488 <i2c_lld_master_transmit_timeout+0x88>)
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8010430:	f8c1 c004 	str.w	ip, [r1, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8010434:	f8c7 9000 	str.w	r9, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8010438:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 801043a:	f8c7 8004 	str.w	r8, [r7, #4]
 801043e:	462a      	mov	r2, r5
 8010440:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8010442:	2520      	movs	r5, #32
 8010444:	e001      	b.n	801044a <i2c_lld_master_transmit_timeout+0x4a>
 8010446:	f382 8811 	msr	BASEPRI, r2
 801044a:	f385 8811 	msr	BASEPRI, r5
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 801044e:	69a3      	ldr	r3, [r4, #24]
 8010450:	0799      	lsls	r1, r3, #30
 8010452:	d402      	bmi.n	801045a <i2c_lld_master_transmit_timeout+0x5a>
 8010454:	6823      	ldr	r3, [r4, #0]
 8010456:	059b      	lsls	r3, r3, #22
 8010458:	d508      	bpl.n	801046c <i2c_lld_master_transmit_timeout+0x6c>
 801045a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return (bool)((time - start) < (end - start));
 801045c:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 801045e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010462:	d3f0      	bcc.n	8010446 <i2c_lld_master_transmit_timeout+0x46>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 8010464:	f04f 30ff 	mov.w	r0, #4294967295
 8010468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 801046c:	6863      	ldr	r3, [r4, #4]
 801046e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010472:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 8010474:	6823      	ldr	r3, [r4, #0]
 8010476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801047a:	4671      	mov	r1, lr
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	301c      	adds	r0, #28
}
 8010480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010484:	f7fd baf4 	b.w	800da70 <chThdSuspendTimeoutS>
 8010488:	20001a40 	.word	0x20001a40
 801048c:	00000000 	.word	0x00000000

08010490 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ch.rlist.r_current->p_name = name;
 8010494:	4ba8      	ldr	r3, [pc, #672]	; (8010738 <usb_lld_pump+0x2a8>)
 8010496:	49a9      	ldr	r1, [pc, #676]	; (801073c <usb_lld_pump+0x2ac>)
 8010498:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 801049a:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801049c:	6191      	str	r1, [r2, #24]
void usb_lld_pump(void *p) {
 801049e:	b087      	sub	sp, #28
 80104a0:	2320      	movs	r3, #32
 80104a2:	f383 8811 	msr	BASEPRI, r3
 80104a6:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80104aa:	9305      	str	r3, [sp, #20]
 80104ac:	4681      	mov	r9, r0
 80104ae:	46ba      	mov	sl, r7
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 80104b0:	f899 3000 	ldrb.w	r3, [r9]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d006      	beq.n	80104c6 <usb_lld_pump+0x36>
 80104b8:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 80104bc:	b963      	cbnz	r3, 80104d8 <usb_lld_pump+0x48>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 80104be:	f8da 3014 	ldr.w	r3, [sl, #20]
 80104c2:	06db      	lsls	r3, r3, #27
 80104c4:	d408      	bmi.n	80104d8 <usb_lld_pump+0x48>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 80104c6:	f8da 3018 	ldr.w	r3, [sl, #24]
  return chThdSuspendS(trp);
 80104ca:	9805      	ldr	r0, [sp, #20]
 80104cc:	f043 0310 	orr.w	r3, r3, #16
 80104d0:	f8ca 3018 	str.w	r3, [sl, #24]
 80104d4:	f7fd fabc 	bl	800da50 <chThdSuspendS>
 80104d8:	2600      	movs	r6, #0
 80104da:	f386 8811 	msr	BASEPRI, r6
 80104de:	46b3      	mov	fp, r6

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 80104e0:	f8da 3014 	ldr.w	r3, [sl, #20]
 80104e4:	f013 0310 	ands.w	r3, r3, #16
 80104e8:	d035      	beq.n	8010556 <usb_lld_pump+0xc6>
  sts = usbp->otg->GRXSTSP;
 80104ea:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80104ee:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80104f0:	f403 12f0 	and.w	r2, r3, #1966080	; 0x1e0000
 80104f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80104f8:	d043      	beq.n	8010582 <usb_lld_pump+0xf2>
 80104fa:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80104fe:	d1ef      	bne.n	80104e0 <usb_lld_pump+0x50>
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8010500:	f003 020f 	and.w	r2, r3, #15
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8010504:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8010508:	f3c3 130a 	ubfx	r3, r3, #4, #11
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 801050c:	68d2      	ldr	r2, [r2, #12]
  n = (n + 3) / 4;
 801050e:	3303      	adds	r3, #3
  while (n) {
 8010510:	089b      	lsrs	r3, r3, #2
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8010512:	6a12      	ldr	r2, [r2, #32]
  while (n) {
 8010514:	d0e4      	beq.n	80104e0 <usb_lld_pump+0x50>
    uint32_t w = *fifop;
 8010516:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  while (n) {
 801051a:	1e5c      	subs	r4, r3, #1
    uint32_t w = *fifop;
 801051c:	6808      	ldr	r0, [r1, #0]
      *((PACKED_VAR uint32_t *)buf) = w;
 801051e:	f842 0b04 	str.w	r0, [r2], #4
  max = (max + 3) / 4;
 8010522:	f04f 0502 	mov.w	r5, #2
  while (n) {
 8010526:	d0db      	beq.n	80104e0 <usb_lld_pump+0x50>
    if (max) {
 8010528:	2d01      	cmp	r5, #1
    uint32_t w = *fifop;
 801052a:	6808      	ldr	r0, [r1, #0]
    if (max) {
 801052c:	d009      	beq.n	8010542 <usb_lld_pump+0xb2>
 801052e:	4623      	mov	r3, r4
  while (n) {
 8010530:	1e5c      	subs	r4, r3, #1
      max--;
 8010532:	f04f 0501 	mov.w	r5, #1
      *((PACKED_VAR uint32_t *)buf) = w;
 8010536:	f842 0b04 	str.w	r0, [r2], #4
  while (n) {
 801053a:	d0d1      	beq.n	80104e0 <usb_lld_pump+0x50>
    if (max) {
 801053c:	2d01      	cmp	r5, #1
    uint32_t w = *fifop;
 801053e:	6808      	ldr	r0, [r1, #0]
    if (max) {
 8010540:	d1f5      	bne.n	801052e <usb_lld_pump+0x9e>
  while (n) {
 8010542:	3b02      	subs	r3, #2
 8010544:	d0cc      	beq.n	80104e0 <usb_lld_pump+0x50>
 8010546:	3b01      	subs	r3, #1
    uint32_t w = *fifop;
 8010548:	680a      	ldr	r2, [r1, #0]
  while (n) {
 801054a:	d1fc      	bne.n	8010546 <usb_lld_pump+0xb6>
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 801054c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010550:	f013 0310 	ands.w	r3, r3, #16
 8010554:	d1c9      	bne.n	80104ea <usb_lld_pump+0x5a>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 8010556:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
      epmask = (1 << ep);
 801055a:	2101      	movs	r1, #1
 801055c:	fa01 f10b 	lsl.w	r1, r1, fp
      if (usbp->txpending & epmask) {
 8010560:	4211      	tst	r1, r2
      epmask = (1 << ep);
 8010562:	9103      	str	r1, [sp, #12]
      if (usbp->txpending & epmask) {
 8010564:	d174      	bne.n	8010650 <usb_lld_pump+0x1c0>
 8010566:	f10b 0301 	add.w	r3, fp, #1
 801056a:	9302      	str	r3, [sp, #8]
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 801056c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8010570:	f89d b008 	ldrb.w	fp, [sp, #8]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	459b      	cmp	fp, r3
 8010578:	d9b2      	bls.n	80104e0 <usb_lld_pump+0x50>
 801057a:	2320      	movs	r3, #32
 801057c:	f383 8811 	msr	BASEPRI, r3
 8010580:	e796      	b.n	80104b0 <usb_lld_pump+0x20>
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8010582:	f003 050f 	and.w	r5, r3, #15
 8010586:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 801058a:	f3c3 140a 	ubfx	r4, r3, #4, #11
    if (usbp->epc[ep]->out_state->rxqueued) {
 801058e:	68eb      	ldr	r3, [r5, #12]
 8010590:	6998      	ldr	r0, [r3, #24]
 8010592:	7803      	ldrb	r3, [r0, #0]
 8010594:	bb1b      	cbnz	r3, 80105de <usb_lld_pump+0x14e>
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8010596:	1d02      	adds	r2, r0, #4
 8010598:	ca2c      	ldmia	r2, {r2, r3, r5}
  max = (max + 3) / 4;
 801059a:	1cd6      	adds	r6, r2, #3
  n = (n + 3) / 4;
 801059c:	1ce2      	adds	r2, r4, #3
  max = (max + 3) / 4;
 801059e:	1af6      	subs	r6, r6, r3
  while (n) {
 80105a0:	0892      	lsrs	r2, r2, #2
  max = (max + 3) / 4;
 80105a2:	ea4f 0696 	mov.w	r6, r6, lsr #2
  while (n) {
 80105a6:	d015      	beq.n	80105d4 <usb_lld_pump+0x144>
    uint32_t w = *fifop;
 80105a8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80105ac:	f8d1 e000 	ldr.w	lr, [r1]
    if (max) {
 80105b0:	b15e      	cbz	r6, 80105ca <usb_lld_pump+0x13a>
 80105b2:	1b96      	subs	r6, r2, r6
 80105b4:	46b4      	mov	ip, r6
 80105b6:	462f      	mov	r7, r5
 80105b8:	4676      	mov	r6, lr
 80105ba:	46e6      	mov	lr, ip
  while (n) {
 80105bc:	3a01      	subs	r2, #1
      *((PACKED_VAR uint32_t *)buf) = w;
 80105be:	f847 6b04 	str.w	r6, [r7], #4
  while (n) {
 80105c2:	d007      	beq.n	80105d4 <usb_lld_pump+0x144>
    if (max) {
 80105c4:	4572      	cmp	r2, lr
    uint32_t w = *fifop;
 80105c6:	680e      	ldr	r6, [r1, #0]
    if (max) {
 80105c8:	d1f8      	bne.n	80105bc <usb_lld_pump+0x12c>
  while (n) {
 80105ca:	3a01      	subs	r2, #1
 80105cc:	d002      	beq.n	80105d4 <usb_lld_pump+0x144>
 80105ce:	3a01      	subs	r2, #1
    uint32_t w = *fifop;
 80105d0:	680e      	ldr	r6, [r1, #0]
  while (n) {
 80105d2:	d1fc      	bne.n	80105ce <usb_lld_pump+0x13e>
      usbp->epc[ep]->out_state->mode.linear.rxbuf += cnt;
 80105d4:	4425      	add	r5, r4
 80105d6:	60c5      	str	r5, [r0, #12]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80105d8:	4423      	add	r3, r4
 80105da:	6083      	str	r3, [r0, #8]
 80105dc:	e780      	b.n	80104e0 <usb_lld_pump+0x50>
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
 80105de:	68c0      	ldr	r0, [r0, #12]
  while (ntogo > 0) {
 80105e0:	b324      	cbz	r4, 801062c <usb_lld_pump+0x19c>
 80105e2:	6942      	ldr	r2, [r0, #20]
 80105e4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80105e8:	4627      	mov	r7, r4
    if (nw > 0) {
 80105ea:	2f03      	cmp	r7, #3
 80105ec:	d906      	bls.n	80105fc <usb_lld_pump+0x16c>
      if (iqp->q_wrptr >= iqp->q_top) {
 80105ee:	6903      	ldr	r3, [r0, #16]
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d803      	bhi.n	80105fc <usb_lld_pump+0x16c>
        iqp->q_wrptr = iqp->q_buffer;
 80105f4:	68c2      	ldr	r2, [r0, #12]
 80105f6:	6142      	str	r2, [r0, #20]
    if (nw > 0) {
 80105f8:	2f03      	cmp	r7, #3
 80105fa:	d8f8      	bhi.n	80105ee <usb_lld_pump+0x15e>
    w = *fifop;
 80105fc:	f8d1 e000 	ldr.w	lr, [r1]
 8010600:	2300      	movs	r3, #0
      *iqp->q_wrptr++ = (uint8_t)(w >> (i * 8));
 8010602:	fa2e f603 	lsr.w	r6, lr, r3
 8010606:	f102 0c01 	add.w	ip, r2, #1
 801060a:	f8c0 c014 	str.w	ip, [r0, #20]
 801060e:	7016      	strb	r6, [r2, #0]
      if (iqp->q_wrptr >= iqp->q_top)
 8010610:	6902      	ldr	r2, [r0, #16]
 8010612:	6946      	ldr	r6, [r0, #20]
 8010614:	4296      	cmp	r6, r2
        iqp->q_wrptr = iqp->q_buffer;
 8010616:	bf24      	itt	cs
 8010618:	68c2      	ldrcs	r2, [r0, #12]
 801061a:	6142      	strcs	r2, [r0, #20]
    while ((ntogo > 0) && (i < 4)) {
 801061c:	3f01      	subs	r7, #1
 801061e:	f103 0308 	add.w	r3, r3, #8
 8010622:	d003      	beq.n	801062c <usb_lld_pump+0x19c>
 8010624:	2b20      	cmp	r3, #32
 8010626:	6942      	ldr	r2, [r0, #20]
 8010628:	d1eb      	bne.n	8010602 <usb_lld_pump+0x172>
 801062a:	e7de      	b.n	80105ea <usb_lld_pump+0x15a>
 801062c:	2320      	movs	r3, #32
 801062e:	f383 8811 	msr	BASEPRI, r3
  iqp->q_counter += n;
 8010632:	6883      	ldr	r3, [r0, #8]
 8010634:	4423      	add	r3, r4
 8010636:	6083      	str	r3, [r0, #8]
  chThdDequeueAllI(tqp, msg);
 8010638:	2100      	movs	r1, #0
 801063a:	f7fd fa51 	bl	800dae0 <chThdDequeueAllI>
  chSchRescheduleS();
 801063e:	f7fd f91f 	bl	800d880 <chSchRescheduleS>
 8010642:	2300      	movs	r3, #0
 8010644:	f383 8811 	msr	BASEPRI, r3
 8010648:	68eb      	ldr	r3, [r5, #12]
 801064a:	6998      	ldr	r0, [r3, #24]
 801064c:	6883      	ldr	r3, [r0, #8]
 801064e:	e7c3      	b.n	80105d8 <usb_lld_pump+0x148>
 8010650:	2220      	movs	r2, #32
 8010652:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8010656:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 801065a:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 801065e:	9803      	ldr	r0, [sp, #12]
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8010660:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 8010664:	ea22 0200 	bic.w	r2, r2, r0
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8010668:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 801066c:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 8010670:	f383 8811 	msr	BASEPRI, r3
 8010674:	eb09 068b 	add.w	r6, r9, fp, lsl #2
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 8010678:	68f5      	ldr	r5, [r6, #12]
 801067a:	6968      	ldr	r0, [r5, #20]
 801067c:	6881      	ldr	r1, [r0, #8]
 801067e:	6842      	ldr	r2, [r0, #4]
 8010680:	428a      	cmp	r2, r1
 8010682:	f240 80bf 	bls.w	8010804 <usb_lld_pump+0x374>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8010686:	f8d9 4050 	ldr.w	r4, [r9, #80]	; 0x50
    if (n > usbp->epc[ep]->in_maxsize)
 801068a:	8a2d      	ldrh	r5, [r5, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 801068c:	ea4f 174b 	mov.w	r7, fp, lsl #5
 8010690:	eb04 0e07 	add.w	lr, r4, r7
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8010694:	1a52      	subs	r2, r2, r1
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8010696:	f8de 1918 	ldr.w	r1, [lr, #2328]	; 0x918
 801069a:	9701      	str	r7, [sp, #4]
 801069c:	4295      	cmp	r5, r2
 801069e:	bf28      	it	cs
 80106a0:	4615      	movcs	r5, r2
 80106a2:	b28a      	uxth	r2, r1
 80106a4:	ebb5 0f82 	cmp.w	r5, r2, lsl #2
 80106a8:	f200 809f 	bhi.w	80107ea <usb_lld_pump+0x35a>
 80106ac:	f10b 0201 	add.w	r2, fp, #1
 80106b0:	9202      	str	r2, [sp, #8]
  chThdDequeueAllI(tqp, msg);
 80106b2:	9304      	str	r3, [sp, #16]
 80106b4:	ea4f 3802 	mov.w	r8, r2, lsl #12
    if (usbp->epc[ep]->in_state->txqueued) {
 80106b8:	7803      	ldrb	r3, [r0, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d140      	bne.n	8010740 <usb_lld_pump+0x2b0>
  otg_do_push(fifop, (uint8_t *)buf, (n + 3) / 4);
 80106be:	1ceb      	adds	r3, r5, #3
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80106c0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  while (n > 0) {
 80106c4:	089b      	lsrs	r3, r3, #2
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80106c6:	4444      	add	r4, r8
  while (n > 0) {
 80106c8:	bf18      	it	ne
 80106ca:	4672      	movne	r2, lr
 80106cc:	d004      	beq.n	80106d8 <usb_lld_pump+0x248>
    *fifop = *((PACKED_VAR uint32_t *)buf);
 80106ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80106d2:	6021      	str	r1, [r4, #0]
  while (n > 0) {
 80106d4:	3b01      	subs	r3, #1
 80106d6:	d1fa      	bne.n	80106ce <usb_lld_pump+0x23e>
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
 80106d8:	eb0e 0305 	add.w	r3, lr, r5
 80106dc:	60c3      	str	r3, [r0, #12]
    usbp->epc[ep]->in_state->txcnt += n;
 80106de:	68f1      	ldr	r1, [r6, #12]
 80106e0:	6948      	ldr	r0, [r1, #20]
 80106e2:	6883      	ldr	r3, [r0, #8]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80106e4:	6842      	ldr	r2, [r0, #4]
    usbp->epc[ep]->in_state->txcnt += n;
 80106e6:	441d      	add	r5, r3
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80106e8:	42aa      	cmp	r2, r5
    usbp->epc[ep]->in_state->txcnt += n;
 80106ea:	6085      	str	r5, [r0, #8]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80106ec:	d97b      	bls.n	80107e6 <usb_lld_pump+0x356>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80106ee:	9b01      	ldr	r3, [sp, #4]
 80106f0:	f8d9 4050 	ldr.w	r4, [r9, #80]	; 0x50
    if (n > usbp->epc[ep]->in_maxsize)
 80106f4:	8a09      	ldrh	r1, [r1, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80106f6:	eb04 0e03 	add.w	lr, r4, r3
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80106fa:	1b55      	subs	r5, r2, r5
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80106fc:	f8de 3918 	ldr.w	r3, [lr, #2328]	; 0x918
 8010700:	428d      	cmp	r5, r1
 8010702:	bf28      	it	cs
 8010704:	460d      	movcs	r5, r1
 8010706:	b29b      	uxth	r3, r3
 8010708:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 801070c:	d9d4      	bls.n	80106b8 <usb_lld_pump+0x228>
      return FALSE;
 801070e:	2200      	movs	r2, #0
 8010710:	2320      	movs	r3, #32
 8010712:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8010716:	f8da 3008 	ldr.w	r3, [sl, #8]
 801071a:	f043 0301 	orr.w	r3, r3, #1
 801071e:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 8010722:	b92a      	cbnz	r2, 8010730 <usb_lld_pump+0x2a0>
          otgp->DIEPEMPMSK |= epmask;
 8010724:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8010728:	9a03      	ldr	r2, [sp, #12]
 801072a:	431a      	orrs	r2, r3
 801072c:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 8010730:	2300      	movs	r3, #0
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	e719      	b.n	801056c <usb_lld_pump+0xdc>
 8010738:	20001a40 	.word	0x20001a40
 801073c:	0802eb90 	.word	0x0802eb90
      otg_fifo_write_from_queue(usbp->otg->FIFO[ep],
 8010740:	4444      	add	r4, r8
 8010742:	68c0      	ldr	r0, [r0, #12]
  while (ntogo > 0) {
 8010744:	b1fd      	cbz	r5, 8010786 <usb_lld_pump+0x2f6>
 8010746:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801074a:	4629      	mov	r1, r5
    if (nw > 0) {
 801074c:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 8010750:	d028      	beq.n	80107a4 <usb_lld_pump+0x314>
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 8010752:	6983      	ldr	r3, [r0, #24]
 8010754:	ebbe 0203 	subs.w	r2, lr, r3
 8010758:	bf48      	it	mi
 801075a:	3203      	addmi	r2, #3
 801075c:	1097      	asrs	r7, r2, #2
      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
 801075e:	4567      	cmp	r7, ip
 8010760:	bf28      	it	cs
 8010762:	4667      	movcs	r7, ip
 8010764:	00ba      	lsls	r2, r7, #2
 8010766:	1a89      	subs	r1, r1, r2
  while (n > 0) {
 8010768:	2f00      	cmp	r7, #0
 801076a:	d03a      	beq.n	80107e2 <usb_lld_pump+0x352>
 801076c:	441a      	add	r2, r3
    *fifop = *((PACKED_VAR uint32_t *)buf);
 801076e:	f853 7b04 	ldr.w	r7, [r3], #4
 8010772:	6027      	str	r7, [r4, #0]
  while (n > 0) {
 8010774:	4293      	cmp	r3, r2
 8010776:	d1fa      	bne.n	801076e <usb_lld_pump+0x2de>
      if (oqp->q_rdptr >= oqp->q_top) {
 8010778:	4596      	cmp	lr, r2
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
 801077a:	6182      	str	r2, [r0, #24]
      if (oqp->q_rdptr >= oqp->q_top) {
 801077c:	d82c      	bhi.n	80107d8 <usb_lld_pump+0x348>
        oqp->q_rdptr = oqp->q_buffer;
 801077e:	68c3      	ldr	r3, [r0, #12]
 8010780:	6183      	str	r3, [r0, #24]
  while (ntogo > 0) {
 8010782:	2900      	cmp	r1, #0
 8010784:	d1e2      	bne.n	801074c <usb_lld_pump+0x2bc>
 8010786:	2320      	movs	r3, #32
 8010788:	f383 8811 	msr	BASEPRI, r3
  oqp->q_counter += n;
 801078c:	6883      	ldr	r3, [r0, #8]
 801078e:	442b      	add	r3, r5
 8010790:	6083      	str	r3, [r0, #8]
 8010792:	2100      	movs	r1, #0
 8010794:	f7fd f9a4 	bl	800dae0 <chThdDequeueAllI>
  chSchRescheduleS();
 8010798:	f7fd f872 	bl	800d880 <chSchRescheduleS>
 801079c:	9b04      	ldr	r3, [sp, #16]
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	e79c      	b.n	80106de <usb_lld_pump+0x24e>
 80107a4:	6982      	ldr	r2, [r0, #24]
  while (n > 0) {
 80107a6:	2300      	movs	r3, #0
 80107a8:	461f      	mov	r7, r3
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 80107aa:	f102 0c01 	add.w	ip, r2, #1
 80107ae:	f8c0 c018 	str.w	ip, [r0, #24]
 80107b2:	7812      	ldrb	r2, [r2, #0]
      if (oqp->q_rdptr >= oqp->q_top)
 80107b4:	45e6      	cmp	lr, ip
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 80107b6:	fa02 f203 	lsl.w	r2, r2, r3
 80107ba:	ea47 0702 	orr.w	r7, r7, r2
        oqp->q_rdptr = oqp->q_buffer;
 80107be:	bf9c      	itt	ls
 80107c0:	68c2      	ldrls	r2, [r0, #12]
 80107c2:	6182      	strls	r2, [r0, #24]
    while ((ntogo > 0) && (i < 4)) {
 80107c4:	3901      	subs	r1, #1
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 80107c6:	f103 0308 	add.w	r3, r3, #8
    while ((ntogo > 0) && (i < 4)) {
 80107ca:	d008      	beq.n	80107de <usb_lld_pump+0x34e>
 80107cc:	2b20      	cmp	r3, #32
 80107ce:	d001      	beq.n	80107d4 <usb_lld_pump+0x344>
 80107d0:	6982      	ldr	r2, [r0, #24]
 80107d2:	e7ea      	b.n	80107aa <usb_lld_pump+0x31a>
    *fifop = w;
 80107d4:	6027      	str	r7, [r4, #0]
 80107d6:	e7b9      	b.n	801074c <usb_lld_pump+0x2bc>
    if (ntogo <= 0)
 80107d8:	2900      	cmp	r1, #0
 80107da:	d1e4      	bne.n	80107a6 <usb_lld_pump+0x316>
 80107dc:	e7d3      	b.n	8010786 <usb_lld_pump+0x2f6>
    *fifop = w;
 80107de:	6027      	str	r7, [r4, #0]
 80107e0:	e7d1      	b.n	8010786 <usb_lld_pump+0x2f6>
  while (n > 0) {
 80107e2:	461a      	mov	r2, r3
 80107e4:	e7c8      	b.n	8010778 <usb_lld_pump+0x2e8>
      return TRUE;
 80107e6:	2201      	movs	r2, #1
 80107e8:	e792      	b.n	8010710 <usb_lld_pump+0x280>
 80107ea:	2320      	movs	r3, #32
 80107ec:	f383 8811 	msr	BASEPRI, r3
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 80107f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80107f4:	f10b 0201 	add.w	r2, fp, #1
 80107f8:	f043 0301 	orr.w	r3, r3, #1
 80107fc:	9202      	str	r2, [sp, #8]
 80107fe:	f8ca 3008 	str.w	r3, [sl, #8]
 8010802:	e78f      	b.n	8010724 <usb_lld_pump+0x294>
 8010804:	2320      	movs	r3, #32
 8010806:	f383 8811 	msr	BASEPRI, r3
 801080a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801080e:	f10b 0201 	add.w	r2, fp, #1
 8010812:	f043 0301 	orr.w	r3, r3, #1
 8010816:	9202      	str	r2, [sp, #8]
 8010818:	f8ca 3008 	str.w	r3, [sl, #8]
 801081c:	e788      	b.n	8010730 <usb_lld_pump+0x2a0>
 801081e:	bf00      	nop

08010820 <otg_disable_ep.isra.0>:
static void otg_disable_ep(USBDriver *usbp) {
 8010820:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8010822:	2400      	movs	r4, #0
 8010824:	f8d1 e008 	ldr.w	lr, [r1, #8]
      otgp->ie[i].DIEPCTL = 0;
 8010828:	4625      	mov	r5, r4
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 801082a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 801082e:	f04f 37ff 	mov.w	r7, #4294967295
 8010832:	e014      	b.n	801085e <otg_disable_ep.isra.0+0x3e>
      otgp->ie[i].DIEPCTL = 0;
 8010834:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8010838:	18c2      	adds	r2, r0, r3
 801083a:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 801083e:	f8c2 7908 	str.w	r7, [r2, #2312]	; 0x908
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
 8010842:	f8d1 6b00 	ldr.w	r6, [r1, #2816]	; 0xb00
 8010846:	2e00      	cmp	r6, #0
 8010848:	db17      	blt.n	801087a <otg_disable_ep.isra.0+0x5a>
      otgp->oe[i].DOEPCTL = 0;
 801084a:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 801084e:	4403      	add	r3, r0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8010850:	3401      	adds	r4, #1
 8010852:	4574      	cmp	r4, lr
    otgp->oe[i].DOEPTSIZ = 0;
 8010854:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8010858:	f8c3 7b08 	str.w	r7, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 801085c:	d814      	bhi.n	8010888 <otg_disable_ep.isra.0+0x68>
 801085e:	0163      	lsls	r3, r4, #5
 8010860:	18c1      	adds	r1, r0, r3
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
 8010862:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8010866:	2a00      	cmp	r2, #0
 8010868:	dae4      	bge.n	8010834 <otg_disable_ep.isra.0+0x14>
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 801086a:	f8c1 c900 	str.w	ip, [r1, #2304]	; 0x900
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
 801086e:	460e      	mov	r6, r1
 8010870:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 8010874:	0792      	lsls	r2, r2, #30
 8010876:	d5fb      	bpl.n	8010870 <otg_disable_ep.isra.0+0x50>
 8010878:	e7de      	b.n	8010838 <otg_disable_ep.isra.0+0x18>
      otgp->oe[i].DOEPCTL = DOEPCTL_EPDIS;
 801087a:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
 801087e:	f8d2 1b08 	ldr.w	r1, [r2, #2824]	; 0xb08
 8010882:	06c9      	lsls	r1, r1, #27
 8010884:	d5fb      	bpl.n	801087e <otg_disable_ep.isra.0+0x5e>
 8010886:	e7e2      	b.n	801084e <otg_disable_ep.isra.0+0x2e>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8010888:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801088c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 8010890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010892:	bf00      	nop
	...

080108a0 <usb_lld_init>:
void usb_lld_init(void) {
 80108a0:	b510      	push	{r4, lr}
  usbObjectInit(&USBD1);
 80108a2:	4c06      	ldr	r4, [pc, #24]	; (80108bc <usb_lld_init+0x1c>)
 80108a4:	4620      	mov	r0, r4
 80108a6:	f7fe f90b 	bl	800eac0 <usbObjectInit>
  USBD1.otg       = OTG_FS;
 80108aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 80108ae:	4a04      	ldr	r2, [pc, #16]	; (80108c0 <usb_lld_init+0x20>)
  USBD1.otg       = OTG_FS;
 80108b0:	6523      	str	r3, [r4, #80]	; 0x50
  USBD1.wait      = NULL;
 80108b2:	2300      	movs	r3, #0
  USBD1.otgparams = &fsparams;
 80108b4:	6562      	str	r2, [r4, #84]	; 0x54
  USBD1.wait      = NULL;
 80108b6:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.tr = NULL;
 80108b8:	6663      	str	r3, [r4, #100]	; 0x64
 80108ba:	bd10      	pop	{r4, pc}
 80108bc:	20001db0 	.word	0x20001db0
 80108c0:	0802eb80 	.word	0x0802eb80
	...

080108d0 <usb_lld_start>:
  if (usbp->state == USB_STOP) {
 80108d0:	7803      	ldrb	r3, [r0, #0]
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d000      	beq.n	80108d8 <usb_lld_start+0x8>
 80108d6:	4770      	bx	lr
void usb_lld_start(USBDriver *usbp) {
 80108d8:	b570      	push	{r4, r5, r6, lr}
    if (&USBD1 == usbp) {
 80108da:	4b31      	ldr	r3, [pc, #196]	; (80109a0 <usb_lld_start+0xd0>)
  stm32_otg_t *otgp = usbp->otg;
 80108dc:	6d06      	ldr	r6, [r0, #80]	; 0x50
    if (&USBD1 == usbp) {
 80108de:	4298      	cmp	r0, r3
void usb_lld_start(USBDriver *usbp) {
 80108e0:	b082      	sub	sp, #8
 80108e2:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
 80108e4:	bf18      	it	ne
 80108e6:	4634      	movne	r4, r6
    if (&USBD1 == usbp) {
 80108e8:	d03a      	beq.n	8010960 <usb_lld_start+0x90>
    usbp->txpending = 0;
 80108ea:	2300      	movs	r3, #0
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 80108ec:	482d      	ldr	r0, [pc, #180]	; (80109a4 <usb_lld_start+0xd4>)
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80108ee:	492e      	ldr	r1, [pc, #184]	; (80109a8 <usb_lld_start+0xd8>)
    usbp->txpending = 0;
 80108f0:	65eb      	str	r3, [r5, #92]	; 0x5c
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 80108f2:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 80108f6:	60f0      	str	r0, [r6, #12]
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80108f8:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
  chSysPolledDelayX(cycles);
 80108fc:	2020      	movs	r0, #32
    otgp->PCGCCTL = 0;
 80108fe:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 8010902:	63b2      	str	r2, [r6, #56]	; 0x38
 8010904:	f7fc fe3c 	bl	800d580 <chSysPolledDelayX>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8010908:	2301      	movs	r3, #1
 801090a:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 801090c:	6923      	ldr	r3, [r4, #16]
 801090e:	07db      	lsls	r3, r3, #31
 8010910:	d4fc      	bmi.n	801090c <usb_lld_start+0x3c>
 8010912:	200c      	movs	r0, #12
 8010914:	f7fc fe34 	bl	800d580 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8010918:	6923      	ldr	r3, [r4, #16]
 801091a:	2b00      	cmp	r3, #0
 801091c:	dafc      	bge.n	8010918 <usb_lld_start+0x48>
    otgp->GAHBCFG = 0;
 801091e:	2400      	movs	r4, #0
 8010920:	60b4      	str	r4, [r6, #8]
    otg_disable_ep(usbp);
 8010922:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8010924:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8010926:	f7ff ff7b 	bl	8010820 <otg_disable_ep.isra.0>
    if (usbp->config->sof_cb == NULL)
 801092a:	686b      	ldr	r3, [r5, #4]
    otgp->DIEPMSK  = 0;
 801092c:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
    if (usbp->config->sof_cb == NULL)
 8010930:	68db      	ldr	r3, [r3, #12]
    otgp->DOEPMSK  = 0;
 8010932:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8010936:	f8c6 481c 	str.w	r4, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 801093a:	b16b      	cbz	r3, 8010958 <usb_lld_start+0x88>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 801093c:	f243 0308 	movw	r3, #12296	; 0x3008
 8010940:	61b3      	str	r3, [r6, #24]
    if (usbp->tr == NULL) {
 8010942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */
 8010944:	f04f 32ff 	mov.w	r2, #4294967295
 8010948:	6172      	str	r2, [r6, #20]
    if (usbp->tr == NULL) {
 801094a:	b1d3      	cbz	r3, 8010982 <usb_lld_start+0xb2>
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 801094c:	68b3      	ldr	r3, [r6, #8]
 801094e:	f043 0301 	orr.w	r3, r3, #1
 8010952:	60b3      	str	r3, [r6, #8]
}
 8010954:	b002      	add	sp, #8
 8010956:	bd70      	pop	{r4, r5, r6, pc}
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 8010958:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801095c:	61b3      	str	r3, [r6, #24]
 801095e:	e7f0      	b.n	8010942 <usb_lld_start+0x72>
      rccEnableOTG_FS(FALSE);
 8010960:	4b12      	ldr	r3, [pc, #72]	; (80109ac <usb_lld_start+0xdc>)
 8010962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010968:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 801096a:	695a      	ldr	r2, [r3, #20]
 801096c:	2000      	movs	r0, #0
 801096e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010972:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8010974:	210e      	movs	r1, #14
      rccResetOTG_FS();
 8010976:	6158      	str	r0, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8010978:	2043      	movs	r0, #67	; 0x43
 801097a:	f7fe fbc1 	bl	800f100 <nvicEnableVector>
 801097e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8010980:	e7b3      	b.n	80108ea <usb_lld_start+0x1a>
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 8010982:	4b0b      	ldr	r3, [pc, #44]	; (80109b0 <usb_lld_start+0xe0>)
 8010984:	9500      	str	r5, [sp, #0]
 8010986:	2202      	movs	r2, #2
 8010988:	f44f 7106 	mov.w	r1, #536	; 0x218
 801098c:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8010990:	f7fc ffbe 	bl	800d910 <chThdCreateI>
 8010994:	6668      	str	r0, [r5, #100]	; 0x64
  return chSchReadyI(tp);
 8010996:	f7fc fe93 	bl	800d6c0 <chSchReadyI>
      chSchRescheduleS();
 801099a:	f7fc ff71 	bl	800d880 <chSchRescheduleS>
 801099e:	e7d5      	b.n	801094c <usb_lld_start+0x7c>
 80109a0:	20001db0 	.word	0x20001db0
 80109a4:	40001440 	.word	0x40001440
 80109a8:	02200003 	.word	0x02200003
 80109ac:	40023800 	.word	0x40023800
 80109b0:	08010491 	.word	0x08010491
	...

080109c0 <usb_lld_stop>:
void usb_lld_stop(USBDriver *usbp) {
 80109c0:	b538      	push	{r3, r4, r5, lr}
  if (usbp->state != USB_STOP) {
 80109c2:	7803      	ldrb	r3, [r0, #0]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d00e      	beq.n	80109e6 <usb_lld_stop+0x26>
  stm32_otg_t *otgp = usbp->otg;
 80109c8:	6d05      	ldr	r5, [r0, #80]	; 0x50
    otg_disable_ep(usbp);
 80109ca:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80109cc:	4604      	mov	r4, r0
 80109ce:	4628      	mov	r0, r5
 80109d0:	f7ff ff26 	bl	8010820 <otg_disable_ep.isra.0>
    if (&USBD1 == usbp) {
 80109d4:	4a09      	ldr	r2, [pc, #36]	; (80109fc <usb_lld_stop+0x3c>)
    usbp->txpending = 0;
 80109d6:	2300      	movs	r3, #0
    if (&USBD1 == usbp) {
 80109d8:	4294      	cmp	r4, r2
    usbp->txpending = 0;
 80109da:	65e3      	str	r3, [r4, #92]	; 0x5c
    otgp->DAINTMSK   = 0;
 80109dc:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    otgp->GAHBCFG    = 0;
 80109e0:	60ab      	str	r3, [r5, #8]
    otgp->GCCFG      = 0;
 80109e2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (&USBD1 == usbp) {
 80109e4:	d000      	beq.n	80109e8 <usb_lld_stop+0x28>
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
      nvicDisableVector(STM32_OTG1_NUMBER);
 80109e8:	2043      	movs	r0, #67	; 0x43
 80109ea:	f7fe fba9 	bl	800f140 <nvicDisableVector>
      rccDisableOTG_FS(FALSE);
 80109ee:	4a04      	ldr	r2, [pc, #16]	; (8010a00 <usb_lld_stop+0x40>)
 80109f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80109f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109f6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80109f8:	e7f5      	b.n	80109e6 <usb_lld_stop+0x26>
 80109fa:	bf00      	nop
 80109fc:	20001db0 	.word	0x20001db0
 8010a00:	40023800 	.word	0x40023800
	...

08010a10 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 8010a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8010a12:	6d05      	ldr	r5, [r0, #80]	; 0x50
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010a14:	2320      	movs	r3, #32
void usb_lld_reset(USBDriver *usbp) {
 8010a16:	4607      	mov	r7, r0
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010a18:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8010a1a:	692c      	ldr	r4, [r5, #16]
 8010a1c:	f014 0420 	ands.w	r4, r4, #32
 8010a20:	d1fb      	bne.n	8010a1a <usb_lld_reset+0xa>
 8010a22:	200c      	movs	r0, #12
 8010a24:	f7fc fdac 	bl	800d580 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8010a28:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 8010a2c:	f8de 6008 	ldr.w	r6, [lr, #8]
 8010a30:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8010a32:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFF;
 8010a36:	21ff      	movs	r1, #255	; 0xff
 8010a38:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8010a40:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8010a44:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 8010a48:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 8010a4c:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8010a50:	d9f2      	bls.n	8010a38 <usb_lld_reset+0x28>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8010a52:	f8de 3000 	ldr.w	r3, [lr]
  otgp->DAINT = 0xFFFFFFFF;
 8010a56:	f04f 32ff 	mov.w	r2, #4294967295
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8010a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  otgp->DAINT = 0xFFFFFFFF;
 8010a5e:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 8010a62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8010a64:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8010a68:	65bb      	str	r3, [r7, #88]	; 0x58
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8010a6a:	f8de 3000 	ldr.w	r3, [lr]
 8010a6e:	626b      	str	r3, [r5, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8010a70:	2310      	movs	r3, #16
 8010a72:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8010a74:	6914      	ldr	r4, [r2, #16]
 8010a76:	f014 0410 	ands.w	r4, r4, #16
 8010a7a:	d1fb      	bne.n	8010a74 <usb_lld_reset+0x64>
 8010a7c:	200c      	movs	r0, #12
 8010a7e:	f7fc fd7f 	bl	800d580 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8010a82:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8010a86:	4a11      	ldr	r2, [pc, #68]	; (8010acc <usb_lld_reset+0xbc>)
  usbp->epc[0] = &ep0config;
 8010a88:	4811      	ldr	r0, [pc, #68]	; (8010ad0 <usb_lld_reset+0xc0>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8010a8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010a8e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8010a92:	69ab      	ldr	r3, [r5, #24]
 8010a94:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8010a98:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8010a9c:	2109      	movs	r1, #9
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8010a9e:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8010aa0:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8010aa4:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814
  usbp->epc[0] = &ep0config;
 8010aa8:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 8010aaa:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8010aae:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8010ab2:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8010ab6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
  next = usbp->pmnext;
 8010aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 8010abc:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8010ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  usbp->pmnext += size;
 8010ac4:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8010ac6:	62ab      	str	r3, [r5, #40]	; 0x28
 8010ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aca:	bf00      	nop
 8010acc:	10008040 	.word	0x10008040
 8010ad0:	0802eb50 	.word	0x0802eb50
	...

08010ae0 <usb_lld_set_address>:
  stm32_otg_t *otgp = usbp->otg;
 8010ae0:	6d02      	ldr	r2, [r0, #80]	; 0x50
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8010ae2:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8010ae6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8010aea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010aee:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8010af2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8010af6:	4770      	bx	lr
	...

08010b00 <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8010b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b04:	fa0f f881 	sxth.w	r8, r1
 8010b08:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 8010b0c:	460d      	mov	r5, r1
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681a      	ldr	r2, [r3, #0]
 8010b12:	f002 0203 	and.w	r2, r2, #3
 8010b16:	2a02      	cmp	r2, #2
 8010b18:	d05d      	beq.n	8010bd6 <usb_lld_init_endpoint+0xd6>
 8010b1a:	2a03      	cmp	r2, #3
 8010b1c:	d05d      	beq.n	8010bda <usb_lld_init_endpoint+0xda>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8010b1e:	4e4c      	ldr	r6, [pc, #304]	; (8010c50 <usb_lld_init_endpoint+0x150>)
 8010b20:	494c      	ldr	r1, [pc, #304]	; (8010c54 <usb_lld_init_endpoint+0x154>)
 8010b22:	2a01      	cmp	r2, #1
 8010b24:	bf18      	it	ne
 8010b26:	460e      	movne	r6, r1
  stm32_otg_t *otgp = usbp->otg;
 8010b28:	6d04      	ldr	r4, [r0, #80]	; 0x50
  if (usbp->epc[ep]->out_cb != NULL) {
 8010b2a:	68da      	ldr	r2, [r3, #12]
  otgp->oe[ep].DOEPTSIZ = 0;
 8010b2c:	0169      	lsls	r1, r5, #5
 8010b2e:	eb04 0e01 	add.w	lr, r4, r1
 8010b32:	f04f 0c00 	mov.w	ip, #0
 8010b36:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_cb != NULL) {
 8010b3a:	2a00      	cmp	r2, #0
 8010b3c:	d072      	beq.n	8010c24 <usb_lld_init_endpoint+0x124>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8010b3e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8010b42:	f105 0258 	add.w	r2, r5, #88	; 0x58
 8010b46:	0152      	lsls	r2, r2, #5
 8010b48:	ea4e 0e06 	orr.w	lr, lr, r6
 8010b4c:	f844 e002 	str.w	lr, [r4, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8010b50:	f105 0c10 	add.w	ip, r5, #16
 8010b54:	f8d4 e81c 	ldr.w	lr, [r4, #2076]	; 0x81c
 8010b58:	2201      	movs	r2, #1
 8010b5a:	fa02 f20c 	lsl.w	r2, r2, ip
 8010b5e:	ea42 020e 	orr.w	r2, r2, lr
 8010b62:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8010b66:	4421      	add	r1, r4
  if (usbp->epc[ep]->in_cb != NULL) {
 8010b68:	689a      	ldr	r2, [r3, #8]
  otgp->ie[ep].DIEPTSIZ = 0;
 8010b6a:	f04f 0e00 	mov.w	lr, #0
 8010b6e:	f8c1 e910 	str.w	lr, [r1, #2320]	; 0x910
  if (usbp->epc[ep]->in_cb != NULL) {
 8010b72:	2a00      	cmp	r2, #0
 8010b74:	d033      	beq.n	8010bde <usb_lld_init_endpoint+0xde>
    if (usbp->epc[ep]->in_multiplier > 1)
 8010b76:	8b9a      	ldrh	r2, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8010b78:	8a19      	ldrh	r1, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8010b7a:	2a01      	cmp	r2, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8010b7c:	ea4f 0391 	mov.w	r3, r1, lsr #2
      fsize *= usbp->epc[ep]->in_multiplier;
 8010b80:	bf88      	it	hi
 8010b82:	4353      	mulhi	r3, r2
  next = usbp->pmnext;
 8010b84:	6d82      	ldr	r2, [r0, #88]	; 0x58
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8010b86:	f105 013f 	add.w	r1, r5, #63	; 0x3f
  usbp->pmnext += size;
 8010b8a:	eb03 0e02 	add.w	lr, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8010b8e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010b92:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010b96:	01aa      	lsls	r2, r5, #6
 8010b98:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8010b9c:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8010ba0:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010ba2:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8010ba4:	6923      	ldr	r3, [r4, #16]
 8010ba6:	069a      	lsls	r2, r3, #26
 8010ba8:	d4fc      	bmi.n	8010ba4 <usb_lld_init_endpoint+0xa4>
 8010baa:	200c      	movs	r0, #12
 8010bac:	f7fc fce8 	bl	800d580 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	8a1a      	ldrh	r2, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 8010bb4:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8010bb8:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8010bbc:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8010bbe:	4332      	orrs	r2, r6
    otgp->ie[ep].DIEPCTL = ctl |
 8010bc0:	50e2      	str	r2, [r4, r3]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8010bc2:	2101      	movs	r1, #1
 8010bc4:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8010bc8:	fa01 f505 	lsl.w	r5, r1, r5
 8010bcc:	431d      	orrs	r5, r3
 8010bce:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
 8010bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8010bd6:	4e20      	ldr	r6, [pc, #128]	; (8010c58 <usb_lld_init_endpoint+0x158>)
    break;
 8010bd8:	e7a6      	b.n	8010b28 <usb_lld_init_endpoint+0x28>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8010bda:	4e20      	ldr	r6, [pc, #128]	; (8010c5c <usb_lld_init_endpoint+0x15c>)
    break;
 8010bdc:	e7a4      	b.n	8010b28 <usb_lld_init_endpoint+0x28>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8010bde:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 8010be2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010be6:	01ab      	lsls	r3, r5, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8010be8:	491d      	ldr	r1, [pc, #116]	; (8010c60 <usb_lld_init_endpoint+0x160>)
 8010bea:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010bec:	f043 0320 	orr.w	r3, r3, #32
 8010bf0:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8010bf2:	6923      	ldr	r3, [r4, #16]
 8010bf4:	069b      	lsls	r3, r3, #26
 8010bf6:	d4fc      	bmi.n	8010bf2 <usb_lld_init_endpoint+0xf2>
 8010bf8:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 8010bfc:	200c      	movs	r0, #12
 8010bfe:	f7fc fcbf 	bl	800d580 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8010c02:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8010c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010c0a:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8010c0e:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8010c12:	2201      	movs	r2, #1
 8010c14:	fa02 f505 	lsl.w	r5, r2, r5
 8010c18:	ea23 0305 	bic.w	r3, r3, r5
 8010c1c:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 8010c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c24:	eb04 1248 	add.w	r2, r4, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8010c28:	f105 0c10 	add.w	ip, r5, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8010c2c:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8010c30:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8010c34:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8010c38:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 8010c3c:	f04f 0e01 	mov.w	lr, #1
 8010c40:	fa0e fe0c 	lsl.w	lr, lr, ip
 8010c44:	ea22 020e 	bic.w	r2, r2, lr
 8010c48:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
 8010c4c:	e78b      	b.n	8010b66 <usb_lld_init_endpoint+0x66>
 8010c4e:	bf00      	nop
 8010c50:	10048000 	.word	0x10048000
 8010c54:	10008000 	.word	0x10008000
 8010c58:	10088000 	.word	0x10088000
 8010c5c:	100c8000 	.word	0x100c8000
 8010c60:	02000400 	.word	0x02000400
	...

08010c70 <usb_lld_get_status_out>:
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8010c70:	3158      	adds	r1, #88	; 0x58
 8010c72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010c74:	0149      	lsls	r1, r1, #5
 8010c76:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8010c78:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8010c7c:	d004      	beq.n	8010c88 <usb_lld_get_status_out+0x18>
  if (ctl & DOEPCTL_STALL)
 8010c7e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8010c82:	bf14      	ite	ne
 8010c84:	2001      	movne	r0, #1
 8010c86:	2002      	moveq	r0, #2
}
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	0000      	movs	r0, r0
	...

08010c90 <usb_lld_get_status_in>:
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8010c90:	3148      	adds	r1, #72	; 0x48
 8010c92:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010c94:	0149      	lsls	r1, r1, #5
 8010c96:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8010c98:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8010c9c:	d004      	beq.n	8010ca8 <usb_lld_get_status_in+0x18>
  if (ctl & DIEPCTL_STALL)
 8010c9e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8010ca2:	bf14      	ite	ne
 8010ca4:	2001      	movne	r0, #1
 8010ca6:	2002      	moveq	r0, #2
}
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	0000      	movs	r0, r0
	...

08010cb0 <usb_lld_read_setup>:
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8010cb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010cb4:	68cb      	ldr	r3, [r1, #12]
 8010cb6:	6a1b      	ldr	r3, [r3, #32]
 8010cb8:	6819      	ldr	r1, [r3, #0]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	6053      	str	r3, [r2, #4]
 8010cbe:	6011      	str	r1, [r2, #0]
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
	...

08010cd0 <usb_lld_prepare_receive>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8010cd0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 8010cd4:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8010cd6:	68de      	ldr	r6, [r3, #12]
 8010cd8:	69b5      	ldr	r5, [r6, #24]
  osp->totsize = osp->rxsize;
 8010cda:	686a      	ldr	r2, [r5, #4]
 8010cdc:	612a      	str	r2, [r5, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 8010cde:	b929      	cbnz	r1, 8010cec <usb_lld_prepare_receive+0x1c>
 8010ce0:	2a40      	cmp	r2, #64	; 0x40
 8010ce2:	d903      	bls.n	8010cec <usb_lld_prepare_receive+0x1c>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8010ce4:	2240      	movs	r2, #64	; 0x40
 8010ce6:	4c09      	ldr	r4, [pc, #36]	; (8010d0c <usb_lld_prepare_receive+0x3c>)
 8010ce8:	606a      	str	r2, [r5, #4]
 8010cea:	e001      	b.n	8010cf0 <usb_lld_prepare_receive+0x20>
 8010cec:	f042 44c0 	orr.w	r4, r2, #1610612736	; 0x60000000
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8010cf0:	8a75      	ldrh	r5, [r6, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8010cf2:	6d00      	ldr	r0, [r0, #80]	; 0x50
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8010cf4:	1e6b      	subs	r3, r5, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8010cf6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8010cfa:	4413      	add	r3, r2
 8010cfc:	fbb3 f3f5 	udiv	r3, r3, r5
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8010d00:	ea44 43c3 	orr.w	r3, r4, r3, lsl #19
 8010d04:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
}
 8010d08:	bc70      	pop	{r4, r5, r6}
 8010d0a:	4770      	bx	lr
 8010d0c:	60000040 	.word	0x60000040

08010d10 <otg_epout_handler.constprop.7>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8010d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8010d14:	4e25      	ldr	r6, [pc, #148]	; (8010dac <otg_epout_handler.constprop.7+0x9c>)
 8010d16:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8010d18:	eb07 1340 	add.w	r3, r7, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8010d1c:	4605      	mov	r5, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8010d1e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8010d22:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8010d26:	0720      	lsls	r0, r4, #28
 8010d28:	d503      	bpl.n	8010d32 <otg_epout_handler.constprop.7+0x22>
 8010d2a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8010d2e:	0719      	lsls	r1, r3, #28
 8010d30:	d41c      	bmi.n	8010d6c <otg_epout_handler.constprop.7+0x5c>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8010d32:	07e2      	lsls	r2, r4, #31
 8010d34:	d518      	bpl.n	8010d68 <otg_epout_handler.constprop.7+0x58>
 8010d36:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8010d3a:	07db      	lsls	r3, r3, #31
 8010d3c:	d514      	bpl.n	8010d68 <otg_epout_handler.constprop.7+0x58>
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8010d3e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8010d42:	68d9      	ldr	r1, [r3, #12]
 8010d44:	698b      	ldr	r3, [r1, #24]
    if (osp->rxsize < osp->totsize) {
 8010d46:	6858      	ldr	r0, [r3, #4]
 8010d48:	691a      	ldr	r2, [r3, #16]
 8010d4a:	4290      	cmp	r0, r2
 8010d4c:	d316      	bcc.n	8010d7c <otg_epout_handler.constprop.7+0x6c>
      _usb_isr_invoke_out_cb(usbp, ep);
 8010d4e:	8973      	ldrh	r3, [r6, #10]
 8010d50:	68cc      	ldr	r4, [r1, #12]
 8010d52:	4816      	ldr	r0, [pc, #88]	; (8010dac <otg_epout_handler.constprop.7+0x9c>)
 8010d54:	2201      	movs	r2, #1
 8010d56:	40aa      	lsls	r2, r5
 8010d58:	ea23 0302 	bic.w	r3, r3, r2
 8010d5c:	8173      	strh	r3, [r6, #10]
 8010d5e:	4629      	mov	r1, r5
 8010d60:	4623      	mov	r3, r4
}
 8010d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _usb_isr_invoke_out_cb(usbp, ep);
 8010d66:	4718      	bx	r3
 8010d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 8010d6c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8010d70:	4629      	mov	r1, r5
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	4630      	mov	r0, r6
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	4798      	blx	r3
 8010d7a:	e7da      	b.n	8010d32 <otg_epout_handler.constprop.7+0x22>
      osp->rxsize = osp->totsize - osp->rxsize;
 8010d7c:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 8010d7e:	2400      	movs	r4, #0
      osp->rxsize = osp->totsize - osp->rxsize;
 8010d80:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 8010d82:	609c      	str	r4, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 8010d84:	4629      	mov	r1, r5
 8010d86:	4809      	ldr	r0, [pc, #36]	; (8010dac <otg_epout_handler.constprop.7+0x9c>)
 8010d88:	f7ff ffa2 	bl	8010cd0 <usb_lld_prepare_receive>
 8010d8c:	2320      	movs	r3, #32
 8010d8e:	f383 8811 	msr	BASEPRI, r3
 8010d92:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010d94:	eb03 1545 	add.w	r5, r3, r5, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8010d98:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8010d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010da0:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8010da4:	f384 8811 	msr	BASEPRI, r4
 8010da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dac:	20001db0 	.word	0x20001db0

08010db0 <usb_lld_prepare_transmit>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8010db0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8010db4:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8010db6:	68dc      	ldr	r4, [r3, #12]
 8010db8:	6962      	ldr	r2, [r4, #20]
  isp->totsize = isp->txsize;
 8010dba:	6853      	ldr	r3, [r2, #4]
 8010dbc:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 8010dbe:	b1a3      	cbz	r3, 8010dea <usb_lld_prepare_transmit+0x3a>
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 8010dc0:	b171      	cbz	r1, 8010de0 <usb_lld_prepare_transmit+0x30>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8010dc2:	8a24      	ldrh	r4, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8010dc4:	6d00      	ldr	r0, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8010dc6:	1e62      	subs	r2, r4, #1
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8010dc8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8010dcc:	441a      	add	r2, r3
 8010dce:	fbb2 f2f4 	udiv	r2, r2, r4
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8010dd2:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8010dd6:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
}
 8010dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dde:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 8010de0:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 8010de2:	bf84      	itt	hi
 8010de4:	2340      	movhi	r3, #64	; 0x40
 8010de6:	6053      	strhi	r3, [r2, #4]
 8010de8:	e7eb      	b.n	8010dc2 <usb_lld_prepare_transmit+0x12>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8010dea:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8010dec:	f85d 4b04 	ldr.w	r4, [sp], #4
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8010df0:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8010df4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010df8:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
}
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <otg_epin_handler.constprop.8>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8010e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8010e04:	4f31      	ldr	r7, [pc, #196]	; (8010ecc <otg_epin_handler.constprop.8+0xcc>)
 8010e06:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8010e08:	eb05 1340 	add.w	r3, r5, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8010e0c:	4606      	mov	r6, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8010e0e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8010e12:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8010e16:	07e1      	lsls	r1, r4, #31
 8010e18:	d503      	bpl.n	8010e22 <otg_epin_handler.constprop.8+0x22>
 8010e1a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8010e1e:	07da      	lsls	r2, r3, #31
 8010e20:	d40a      	bmi.n	8010e38 <otg_epin_handler.constprop.8+0x38>
  if ((epint & DIEPINT_TXFE) &&
 8010e22:	0623      	lsls	r3, r4, #24
 8010e24:	d506      	bpl.n	8010e34 <otg_epin_handler.constprop.8+0x34>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8010e26:	2301      	movs	r3, #1
 8010e28:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 8010e2c:	fa03 f606 	lsl.w	r6, r3, r6
  if ((epint & DIEPINT_TXFE) &&
 8010e30:	4216      	tst	r6, r2
 8010e32:	d129      	bne.n	8010e88 <otg_epin_handler.constprop.8+0x88>
 8010e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8010e38:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8010e3c:	68d9      	ldr	r1, [r3, #12]
 8010e3e:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8010e40:	6858      	ldr	r0, [r3, #4]
 8010e42:	691a      	ldr	r2, [r3, #16]
 8010e44:	4290      	cmp	r0, r2
 8010e46:	d234      	bcs.n	8010eb2 <otg_epin_handler.constprop.8+0xb2>
      isp->txsize = isp->totsize - isp->txsize;
 8010e48:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8010e4a:	f04f 0800 	mov.w	r8, #0
      isp->txsize = isp->totsize - isp->txsize;
 8010e4e:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 8010e50:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 8010e54:	4631      	mov	r1, r6
 8010e56:	4638      	mov	r0, r7
 8010e58:	f7ff ffaa 	bl	8010db0 <usb_lld_prepare_transmit>
 8010e5c:	2320      	movs	r3, #32
 8010e5e:	f383 8811 	msr	BASEPRI, r3
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8010e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e64:	eb02 1046 	add.w	r0, r2, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8010e68:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8010e6a:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8010e6e:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8010e72:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8010e76:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 8010e7a:	40b3      	lsls	r3, r6
 8010e7c:	430b      	orrs	r3, r1
 8010e7e:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
 8010e82:	f388 8811 	msr	BASEPRI, r8
 8010e86:	e7cc      	b.n	8010e22 <otg_epin_handler.constprop.8+0x22>
 8010e88:	2320      	movs	r3, #32
 8010e8a:	f383 8811 	msr	BASEPRI, r3
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8010e8e:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 8010e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  chThdResumeI(trp, msg);
 8010e94:	480e      	ldr	r0, [pc, #56]	; (8010ed0 <otg_epin_handler.constprop.8+0xd0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8010e96:	ea22 0206 	bic.w	r2, r2, r6
 8010e9a:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 8010e9e:	431e      	orrs	r6, r3
 8010ea0:	2100      	movs	r1, #0
 8010ea2:	65fe      	str	r6, [r7, #92]	; 0x5c
 8010ea4:	f7fc fdf4 	bl	800da90 <chThdResumeI>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      _usb_isr_invoke_in_cb(usbp, ep);
 8010eb2:	893b      	ldrh	r3, [r7, #8]
 8010eb4:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8010eb8:	2201      	movs	r2, #1
 8010eba:	40b2      	lsls	r2, r6
 8010ebc:	ea23 0302 	bic.w	r3, r3, r2
 8010ec0:	813b      	strh	r3, [r7, #8]
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4638      	mov	r0, r7
 8010ec6:	47c0      	blx	r8
 8010ec8:	e7ab      	b.n	8010e22 <otg_epin_handler.constprop.8+0x22>
 8010eca:	bf00      	nop
 8010ecc:	20001db0 	.word	0x20001db0
 8010ed0:	20001e10 	.word	0x20001e10
	...

08010ee0 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8010ee0:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;
 8010ee2:	4d3a      	ldr	r5, [pc, #232]	; (8010fcc <Vector14C+0xec>)
 8010ee4:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  sts  = otgp->GINTSTS;
 8010ee6:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 8010ee8:	69b3      	ldr	r3, [r6, #24]
 8010eea:	401c      	ands	r4, r3
  if (sts & GINTSTS_USBRST) {
 8010eec:	04e1      	lsls	r1, r4, #19
  otgp->GINTSTS = sts;
 8010eee:	6174      	str	r4, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8010ef0:	d42d      	bmi.n	8010f4e <Vector14C+0x6e>
  if (sts & GINTSTS_ENUMDNE) {
 8010ef2:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 8010ef4:	bf48      	it	mi
 8010ef6:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  if (sts & GINTSTS_SOF) {
 8010efa:	0723      	lsls	r3, r4, #28
 8010efc:	d504      	bpl.n	8010f08 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 8010efe:	686b      	ldr	r3, [r5, #4]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	b10b      	cbz	r3, 8010f08 <Vector14C+0x28>
 8010f04:	4831      	ldr	r0, [pc, #196]	; (8010fcc <Vector14C+0xec>)
 8010f06:	4798      	blx	r3
  if (sts & GINTSTS_RXFLVL) {
 8010f08:	06e5      	lsls	r5, r4, #27
 8010f0a:	d42b      	bmi.n	8010f64 <Vector14C+0x84>
  if (sts & GINTSTS_IEPINT) {
 8010f0c:	0360      	lsls	r0, r4, #13
  src = otgp->DAINT;
 8010f0e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 8010f12:	d507      	bpl.n	8010f24 <Vector14C+0x44>
    if (src & (1 << 0))
 8010f14:	07e9      	lsls	r1, r5, #31
 8010f16:	d445      	bmi.n	8010fa4 <Vector14C+0xc4>
    if (src & (1 << 1))
 8010f18:	07aa      	lsls	r2, r5, #30
 8010f1a:	d448      	bmi.n	8010fae <Vector14C+0xce>
    if (src & (1 << 2))
 8010f1c:	076b      	lsls	r3, r5, #29
 8010f1e:	d44b      	bmi.n	8010fb8 <Vector14C+0xd8>
    if (src & (1 << 3))
 8010f20:	072e      	lsls	r6, r5, #28
 8010f22:	d44e      	bmi.n	8010fc2 <Vector14C+0xe2>
  if (sts & GINTSTS_OEPINT) {
 8010f24:	0324      	lsls	r4, r4, #12
 8010f26:	d507      	bpl.n	8010f38 <Vector14C+0x58>
    if (src & (1 << 16))
 8010f28:	03e8      	lsls	r0, r5, #15
 8010f2a:	d430      	bmi.n	8010f8e <Vector14C+0xae>
    if (src & (1 << 17))
 8010f2c:	03a9      	lsls	r1, r5, #14
 8010f2e:	d433      	bmi.n	8010f98 <Vector14C+0xb8>
    if (src & (1 << 18))
 8010f30:	036a      	lsls	r2, r5, #13
 8010f32:	d426      	bmi.n	8010f82 <Vector14C+0xa2>
    if (src & (1 << 19))
 8010f34:	032b      	lsls	r3, r5, #12
 8010f36:	d403      	bmi.n	8010f40 <Vector14C+0x60>
}
 8010f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8010f3c:	f7fd ba08 	b.w	800e350 <_port_irq_epilogue>
      otg_epout_handler(usbp, 3);
 8010f40:	2003      	movs	r0, #3
 8010f42:	f7ff fee5 	bl	8010d10 <otg_epout_handler.constprop.7>
}
 8010f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8010f4a:	f7fd ba01 	b.w	800e350 <_port_irq_epilogue>
    _usb_reset(usbp);
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f7fd fe56 	bl	800ec00 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8010f54:	686b      	ldr	r3, [r5, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d0ca      	beq.n	8010ef2 <Vector14C+0x12>
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	4628      	mov	r0, r5
 8010f60:	4798      	blx	r3
 8010f62:	e7c6      	b.n	8010ef2 <Vector14C+0x12>
 8010f64:	2320      	movs	r3, #32
 8010f66:	f383 8811 	msr	BASEPRI, r3
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 8010f6a:	69b3      	ldr	r3, [r6, #24]
 8010f6c:	4818      	ldr	r0, [pc, #96]	; (8010fd0 <Vector14C+0xf0>)
 8010f6e:	f023 0310 	bic.w	r3, r3, #16
 8010f72:	61b3      	str	r3, [r6, #24]
 8010f74:	2100      	movs	r1, #0
 8010f76:	f7fc fd8b 	bl	800da90 <chThdResumeI>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f383 8811 	msr	BASEPRI, r3
 8010f80:	e7c4      	b.n	8010f0c <Vector14C+0x2c>
      otg_epout_handler(usbp, 2);
 8010f82:	2002      	movs	r0, #2
 8010f84:	f7ff fec4 	bl	8010d10 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 8010f88:	032b      	lsls	r3, r5, #12
 8010f8a:	d5d5      	bpl.n	8010f38 <Vector14C+0x58>
 8010f8c:	e7d8      	b.n	8010f40 <Vector14C+0x60>
      otg_epout_handler(usbp, 0);
 8010f8e:	2000      	movs	r0, #0
 8010f90:	f7ff febe 	bl	8010d10 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 8010f94:	03a9      	lsls	r1, r5, #14
 8010f96:	d5cb      	bpl.n	8010f30 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 8010f98:	2001      	movs	r0, #1
 8010f9a:	f7ff feb9 	bl	8010d10 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 8010f9e:	036a      	lsls	r2, r5, #13
 8010fa0:	d5c8      	bpl.n	8010f34 <Vector14C+0x54>
 8010fa2:	e7ee      	b.n	8010f82 <Vector14C+0xa2>
      otg_epin_handler(usbp, 0);
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	f7ff ff2b 	bl	8010e00 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 8010faa:	07aa      	lsls	r2, r5, #30
 8010fac:	d5b6      	bpl.n	8010f1c <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 8010fae:	2001      	movs	r0, #1
 8010fb0:	f7ff ff26 	bl	8010e00 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 8010fb4:	076b      	lsls	r3, r5, #29
 8010fb6:	d5b3      	bpl.n	8010f20 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 8010fb8:	2002      	movs	r0, #2
 8010fba:	f7ff ff21 	bl	8010e00 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 8010fbe:	072e      	lsls	r6, r5, #28
 8010fc0:	d5b0      	bpl.n	8010f24 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 8010fc2:	2003      	movs	r0, #3
 8010fc4:	f7ff ff1c 	bl	8010e00 <otg_epin_handler.constprop.8>
 8010fc8:	e7ac      	b.n	8010f24 <Vector14C+0x44>
 8010fca:	bf00      	nop
 8010fcc:	20001db0 	.word	0x20001db0
 8010fd0:	20001e10 	.word	0x20001e10
	...

08010fe0 <usb_lld_start_out>:
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8010fe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010fe2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8010fe6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8010fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010fee:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8010ff2:	4770      	bx	lr
	...

08011000 <usb_lld_start_in>:
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8011000:	6d02      	ldr	r2, [r0, #80]	; 0x50
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8011002:	b410      	push	{r4}
 8011004:	eb02 1441 	add.w	r4, r2, r1, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8011008:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 801100a:	f8d4 0900 	ldr.w	r0, [r4, #2304]	; 0x900
 801100e:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 8011012:	f8c4 0900 	str.w	r0, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8011016:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
}
 801101a:	f85d 4b04 	ldr.w	r4, [sp], #4
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 801101e:	fa03 f101 	lsl.w	r1, r3, r1
 8011022:	4301      	orrs	r1, r0
 8011024:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop
 801102c:	0000      	movs	r0, r0
	...

08011030 <usb_lld_stall_out>:
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8011030:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011032:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8011036:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 801103a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801103e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8011042:	4770      	bx	lr
	...

08011050 <usb_lld_stall_in>:
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8011050:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011052:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8011056:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 801105a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801105e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8011062:	4770      	bx	lr
	...

08011070 <usb_lld_clear_out>:
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8011070:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011072:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8011076:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 801107a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801107e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8011082:	4770      	bx	lr
	...

08011090 <usb_lld_clear_in>:
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8011090:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011092:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8011096:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 801109a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801109e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 80110a2:	4770      	bx	lr
	...

080110b0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80110b0:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80110b2:	4c0a      	ldr	r4, [pc, #40]	; (80110dc <spi_lld_init+0x2c>)
  dummytx = 0xFFFF;
 80110b4:	4b0a      	ldr	r3, [pc, #40]	; (80110e0 <spi_lld_init+0x30>)
 80110b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  spiObjectInit(&SPID1);
 80110ba:	4620      	mov	r0, r4
  dummytx = 0xFFFF;
 80110bc:	801a      	strh	r2, [r3, #0]
  spiObjectInit(&SPID1);
 80110be:	f7fd fcaf 	bl	800ea20 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80110c2:	4b08      	ldr	r3, [pc, #32]	; (80110e4 <spi_lld_init+0x34>)
  SPID1.spi       = SPI1;
 80110c4:	4808      	ldr	r0, [pc, #32]	; (80110e8 <spi_lld_init+0x38>)
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80110c6:	4909      	ldr	r1, [pc, #36]	; (80110ec <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80110c8:	4a09      	ldr	r2, [pc, #36]	; (80110f0 <spi_lld_init+0x40>)
  SPID1.spi       = SPI1;
 80110ca:	61e0      	str	r0, [r4, #28]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80110cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80110d0:	6223      	str	r3, [r4, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80110d2:	6260      	str	r0, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80110d4:	62a1      	str	r1, [r4, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80110d6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80110d8:	bd10      	pop	{r4, pc}
 80110da:	bf00      	nop
 80110dc:	2000204c 	.word	0x2000204c
 80110e0:	2000207c 	.word	0x2000207c
 80110e4:	0802eae0 	.word	0x0802eae0
 80110e8:	40013000 	.word	0x40013000
 80110ec:	06010016 	.word	0x06010016
 80110f0:	06010046 	.word	0x06010046
	...

08011100 <VectorB4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8011100:	b538      	push	{r3, r4, r5, lr}
  sr  = icup->tim->SR;
 8011102:	4d24      	ldr	r5, [pc, #144]	; (8011194 <VectorB4+0x94>)
 8011104:	68eb      	ldr	r3, [r5, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8011106:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 8011108:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 801110a:	68da      	ldr	r2, [r3, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 801110c:	7d08      	ldrb	r0, [r1, #20]
 801110e:	4014      	ands	r4, r2
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8011110:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8011112:	43d2      	mvns	r2, r2
 8011114:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8011116:	b990      	cbnz	r0, 801113e <VectorB4+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8011118:	0760      	lsls	r0, r4, #29
 801111a:	d52e      	bpl.n	801117a <VectorB4+0x7a>
      _icu_isr_invoke_width_cb(icup);
 801111c:	782b      	ldrb	r3, [r5, #0]
 801111e:	2b04      	cmp	r3, #4
 8011120:	d027      	beq.n	8011172 <VectorB4+0x72>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8011122:	07a1      	lsls	r1, r4, #30
 8011124:	d412      	bmi.n	801114c <VectorB4+0x4c>
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8011126:	07e4      	lsls	r4, r4, #31
 8011128:	d505      	bpl.n	8011136 <VectorB4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 801112a:	686b      	ldr	r3, [r5, #4]
 801112c:	4819      	ldr	r0, [pc, #100]	; (8011194 <VectorB4+0x94>)
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	4798      	blx	r3
 8011132:	2303      	movs	r3, #3
 8011134:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 8011136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 801113a:	f7fd b909 	b.w	800e350 <_port_irq_epilogue>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 801113e:	07a2      	lsls	r2, r4, #30
 8011140:	d50b      	bpl.n	801115a <VectorB4+0x5a>
      _icu_isr_invoke_width_cb(icup);
 8011142:	782b      	ldrb	r3, [r5, #0]
 8011144:	2b04      	cmp	r3, #4
 8011146:	d004      	beq.n	8011152 <VectorB4+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8011148:	0763      	lsls	r3, r4, #29
 801114a:	d5ec      	bpl.n	8011126 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
 801114c:	2304      	movs	r3, #4
 801114e:	702b      	strb	r3, [r5, #0]
 8011150:	e7e9      	b.n	8011126 <VectorB4+0x26>
      _icu_isr_invoke_width_cb(icup);
 8011152:	688b      	ldr	r3, [r1, #8]
 8011154:	b1d3      	cbz	r3, 801118c <VectorB4+0x8c>
 8011156:	4628      	mov	r0, r5
 8011158:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 801115a:	0763      	lsls	r3, r4, #29
 801115c:	d5e3      	bpl.n	8011126 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
 801115e:	782b      	ldrb	r3, [r5, #0]
 8011160:	2b04      	cmp	r3, #4
 8011162:	d1f3      	bne.n	801114c <VectorB4+0x4c>
 8011164:	6869      	ldr	r1, [r5, #4]
 8011166:	68cb      	ldr	r3, [r1, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d0ef      	beq.n	801114c <VectorB4+0x4c>
 801116c:	4809      	ldr	r0, [pc, #36]	; (8011194 <VectorB4+0x94>)
 801116e:	4798      	blx	r3
 8011170:	e7ec      	b.n	801114c <VectorB4+0x4c>
      _icu_isr_invoke_width_cb(icup);
 8011172:	688b      	ldr	r3, [r1, #8]
 8011174:	b13b      	cbz	r3, 8011186 <VectorB4+0x86>
 8011176:	4628      	mov	r0, r5
 8011178:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 801117a:	07a1      	lsls	r1, r4, #30
 801117c:	d5d3      	bpl.n	8011126 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
 801117e:	782b      	ldrb	r3, [r5, #0]
 8011180:	2b04      	cmp	r3, #4
 8011182:	d1e3      	bne.n	801114c <VectorB4+0x4c>
 8011184:	e7ee      	b.n	8011164 <VectorB4+0x64>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8011186:	07a0      	lsls	r0, r4, #30
 8011188:	d4ed      	bmi.n	8011166 <VectorB4+0x66>
 801118a:	e7cc      	b.n	8011126 <VectorB4+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 801118c:	0762      	lsls	r2, r4, #29
 801118e:	d4ea      	bmi.n	8011166 <VectorB4+0x66>
 8011190:	e7c9      	b.n	8011126 <VectorB4+0x26>
 8011192:	bf00      	nop
 8011194:	20002080 	.word	0x20002080
	...

080111a0 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 80111a0:	b510      	push	{r4, lr}
  ICUD2.tim = STM32_TIM2;
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
 80111a2:	4c03      	ldr	r4, [pc, #12]	; (80111b0 <icu_lld_init+0x10>)
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7fd fa33 	bl	800e610 <icuObjectInit>
  ICUD3.tim = STM32_TIM3;
 80111aa:	4b02      	ldr	r3, [pc, #8]	; (80111b4 <icu_lld_init+0x14>)
 80111ac:	60e3      	str	r3, [r4, #12]
 80111ae:	bd10      	pop	{r4, pc}
 80111b0:	20002080 	.word	0x20002080
 80111b4:	40000400 	.word	0x40000400
	...

080111c0 <icu_lld_start>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start(ICUDriver *icup) {
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 80111c2:	7803      	ldrb	r3, [r0, #0]
 80111c4:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
 80111c6:	4604      	mov	r4, r0
  if (icup->state == ICU_STOP) {
 80111c8:	d03a      	beq.n	8011240 <icu_lld_start+0x80>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 80111ca:	68c3      	ldr	r3, [r0, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80111d0:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80111d2:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 80111d4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80111d6:	6861      	ldr	r1, [r4, #4]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 80111d8:	68a2      	ldr	r2, [r4, #8]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80111da:	6988      	ldr	r0, [r1, #24]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 80111dc:	7d0d      	ldrb	r5, [r1, #20]
  psc = (icup->clock / icup->config->frequency) - 1;
 80111de:	684e      	ldr	r6, [r1, #4]
 80111e0:	fbb2 f2f6 	udiv	r2, r2, r6
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80111e4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 80111e8:	3a01      	subs	r2, #1
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 80111ea:	2700      	movs	r7, #0
  icup->tim->ARR  = 0xFFFF;
 80111ec:	f64f 76ff 	movw	r6, #65535	; 0xffff
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 80111f0:	611f      	str	r7, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80111f2:	60d8      	str	r0, [r3, #12]
  icup->tim->PSC  = psc;
 80111f4:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 80111f6:	62de      	str	r6, [r3, #44]	; 0x2c
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80111f8:	780a      	ldrb	r2, [r1, #0]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80111fa:	b96d      	cbnz	r5, 8011218 <icu_lld_start+0x58>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80111fc:	f240 2001 	movw	r0, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8011200:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8011202:	6198      	str	r0, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8011204:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8011206:	b1c2      	cbz	r2, 801123a <icu_lld_start+0x7a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8011208:	2213      	movs	r2, #19
 801120a:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 801120c:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 8011210:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
 8011212:	6122      	str	r2, [r4, #16]
    icup->pccrp = &icup->tim->CCR[0];
 8011214:	6163      	str	r3, [r4, #20]
 8011216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8011218:	f44f 7081 	mov.w	r0, #258	; 0x102

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 801121c:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 801121e:	6198      	str	r0, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8011220:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8011222:	b13a      	cbz	r2, 8011234 <icu_lld_start+0x74>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8011224:	2231      	movs	r2, #49	; 0x31
 8011226:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 8011228:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 801122c:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
 801122e:	6122      	str	r2, [r4, #16]
    icup->pccrp = &icup->tim->CCR[1];
 8011230:	6163      	str	r3, [r4, #20]
 8011232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8011234:	2213      	movs	r2, #19
 8011236:	621a      	str	r2, [r3, #32]
 8011238:	e7f6      	b.n	8011228 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 801123a:	2231      	movs	r2, #49	; 0x31
 801123c:	621a      	str	r2, [r3, #32]
 801123e:	e7e5      	b.n	801120c <icu_lld_start+0x4c>
    if (&ICUD3 == icup) {
 8011240:	4b0b      	ldr	r3, [pc, #44]	; (8011270 <icu_lld_start+0xb0>)
 8011242:	4298      	cmp	r0, r3
 8011244:	d001      	beq.n	801124a <icu_lld_start+0x8a>
 8011246:	68e3      	ldr	r3, [r4, #12]
 8011248:	e7c5      	b.n	80111d6 <icu_lld_start+0x16>
      rccEnableTIM3(FALSE);
 801124a:	4b0a      	ldr	r3, [pc, #40]	; (8011274 <icu_lld_start+0xb4>)
 801124c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801124e:	f042 0202 	orr.w	r2, r2, #2
 8011252:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM3();
 8011254:	6a1a      	ldr	r2, [r3, #32]
 8011256:	2000      	movs	r0, #0
 8011258:	f042 0202 	orr.w	r2, r2, #2
 801125c:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
 801125e:	2107      	movs	r1, #7
      rccResetTIM3();
 8011260:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
 8011262:	201d      	movs	r0, #29
 8011264:	f7fd ff4c 	bl	800f100 <nvicEnableVector>
      icup->clock = STM32_TIMCLK1;
 8011268:	4b03      	ldr	r3, [pc, #12]	; (8011278 <icu_lld_start+0xb8>)
 801126a:	60a3      	str	r3, [r4, #8]
 801126c:	e7eb      	b.n	8011246 <icu_lld_start+0x86>
 801126e:	bf00      	nop
 8011270:	20002080 	.word	0x20002080
 8011274:	40023800 	.word	0x40023800
 8011278:	0501bd00 	.word	0x0501bd00
 801127c:	00000000 	.word	0x00000000

08011280 <icu_lld_stop>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_stop(ICUDriver *icup) {
 8011280:	b508      	push	{r3, lr}

  if (icup->state == ICU_READY) {
 8011282:	7803      	ldrb	r3, [r0, #0]
 8011284:	2b02      	cmp	r3, #2
 8011286:	d000      	beq.n	801128a <icu_lld_stop+0xa>
 8011288:	bd08      	pop	{r3, pc}
      nvicDisableVector(STM32_TIM2_NUMBER);
      rccDisableTIM2(FALSE);
    }
#endif
#if STM32_ICU_USE_TIM3
    if (&ICUD3 == icup) {
 801128a:	4908      	ldr	r1, [pc, #32]	; (80112ac <icu_lld_stop+0x2c>)
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 801128c:	68c3      	ldr	r3, [r0, #12]
 801128e:	2200      	movs	r2, #0
    if (&ICUD3 == icup) {
 8011290:	4288      	cmp	r0, r1
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 8011292:	601a      	str	r2, [r3, #0]
    icup->tim->DIER = 0;                    /* All IRQs disabled.           */
 8011294:	60da      	str	r2, [r3, #12]
    icup->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 8011296:	611a      	str	r2, [r3, #16]
    if (&ICUD3 == icup) {
 8011298:	d1f6      	bne.n	8011288 <icu_lld_stop+0x8>
      nvicDisableVector(STM32_TIM3_NUMBER);
 801129a:	201d      	movs	r0, #29
 801129c:	f7fd ff50 	bl	800f140 <nvicDisableVector>
      rccDisableTIM3(FALSE);
 80112a0:	4a03      	ldr	r2, [pc, #12]	; (80112b0 <icu_lld_stop+0x30>)
 80112a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80112a4:	f023 0302 	bic.w	r3, r3, #2
 80112a8:	6413      	str	r3, [r2, #64]	; 0x40
      nvicDisableVector(STM32_TIM9_NUMBER);
      rccDisableTIM9(FALSE);
    }
#endif
  }
}
 80112aa:	e7ed      	b.n	8011288 <icu_lld_stop+0x8>
 80112ac:	20002080 	.word	0x20002080
 80112b0:	40023800 	.word	0x40023800
	...

080112c0 <icu_lld_start_capture>:
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80112c0:	68c3      	ldr	r3, [r0, #12]
 80112c2:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 80112c4:	2000      	movs	r0, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80112c6:	f042 0201 	orr.w	r2, r2, #1

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80112ca:	2105      	movs	r1, #5
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80112cc:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 80112ce:	6118      	str	r0, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80112d0:	6019      	str	r1, [r3, #0]
 80112d2:	4770      	bx	lr
	...

080112e0 <icu_lld_enable_notifications>:
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 80112e0:	68c2      	ldr	r2, [r0, #12]
 80112e2:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 80112e4:	b410      	push	{r4}

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 80112e6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80112ea:	d10c      	bne.n	8011306 <icu_lld_enable_notifications+0x26>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 80112ec:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 80112ee:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 80112f0:	7d08      	ldrb	r0, [r1, #20]
 80112f2:	b158      	cbz	r0, 801130c <icu_lld_enable_notifications+0x2c>
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
 80112f4:	6888      	ldr	r0, [r1, #8]
 80112f6:	b178      	cbz	r0, 8011318 <icu_lld_enable_notifications+0x38>
        dier |= STM32_TIM_DIER_CC1IE;
 80112f8:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 80112fc:	6909      	ldr	r1, [r1, #16]
 80112fe:	b109      	cbz	r1, 8011304 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8011300:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 8011304:	60d3      	str	r3, [r2, #12]
  }
}
 8011306:	f85d 4b04 	ldr.w	r4, [sp], #4
 801130a:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 801130c:	6888      	ldr	r0, [r1, #8]
 801130e:	2800      	cmp	r0, #0
 8011310:	d1f2      	bne.n	80112f8 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC1IE;
 8011312:	f043 0302 	orr.w	r3, r3, #2
 8011316:	e7f1      	b.n	80112fc <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC2IE;
 8011318:	f043 0304 	orr.w	r3, r3, #4
 801131c:	e7ee      	b.n	80112fc <icu_lld_enable_notifications+0x1c>
 801131e:	bf00      	nop

08011320 <usart_stop>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8011320:	6901      	ldr	r1, [r0, #16]
 8011322:	680a      	ldr	r2, [r1, #0]
 8011324:	6813      	ldr	r3, [r2, #0]
 8011326:	f023 031f 	bic.w	r3, r3, #31
static void usart_stop(UARTDriver *uartp) {
 801132a:	b430      	push	{r4, r5}
  dmaStreamDisable(uartp->dmarx);
 801132c:	6013      	str	r3, [r2, #0]
 801132e:	6813      	ldr	r3, [r2, #0]
 8011330:	07db      	lsls	r3, r3, #31
 8011332:	d4fc      	bmi.n	801132e <usart_stop+0xe>
 8011334:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(uartp->dmatx);
 8011336:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(uartp->dmarx);
 8011338:	6849      	ldr	r1, [r1, #4]
  dmaStreamDisable(uartp->dmatx);
 801133a:	6822      	ldr	r2, [r4, #0]
  dmaStreamDisable(uartp->dmarx);
 801133c:	233d      	movs	r3, #61	; 0x3d
 801133e:	40ab      	lsls	r3, r5
 8011340:	600b      	str	r3, [r1, #0]
  dmaStreamDisable(uartp->dmatx);
 8011342:	6813      	ldr	r3, [r2, #0]
 8011344:	f023 031f 	bic.w	r3, r3, #31
 8011348:	6013      	str	r3, [r2, #0]
 801134a:	6813      	ldr	r3, [r2, #0]
 801134c:	f013 0301 	ands.w	r3, r3, #1
 8011350:	d1fb      	bne.n	801134a <usart_stop+0x2a>
 8011352:	7a25      	ldrb	r5, [r4, #8]
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8011354:	6882      	ldr	r2, [r0, #8]
  dmaStreamDisable(uartp->dmatx);
 8011356:	6860      	ldr	r0, [r4, #4]
 8011358:	213d      	movs	r1, #61	; 0x3d
 801135a:	40a9      	lsls	r1, r5
 801135c:	6001      	str	r1, [r0, #0]
  uartp->usart->CR2 = 0;
  uartp->usart->CR3 = 0;
}
 801135e:	bc30      	pop	{r4, r5}
  uartp->usart->CR1 = 0;
 8011360:	60d3      	str	r3, [r2, #12]
  uartp->usart->CR2 = 0;
 8011362:	6113      	str	r3, [r2, #16]
  uartp->usart->CR3 = 0;
 8011364:	6153      	str	r3, [r2, #20]
}
 8011366:	4770      	bx	lr
	...

08011370 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8011374:	6884      	ldr	r4, [r0, #8]
  uint32_t cr1 = u->CR1;
 8011376:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 8011378:	6826      	ldr	r6, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 801137a:	6862      	ldr	r2, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 801137c:	f240 130f 	movw	r3, #271	; 0x10f
 8011380:	421e      	tst	r6, r3
static void serve_usart_irq(UARTDriver *uartp) {
 8011382:	4605      	mov	r5, r0
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8011384:	d01d      	beq.n	80113c2 <serve_usart_irq+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
 8011386:	6843      	ldr	r3, [r0, #4]
 8011388:	691a      	ldr	r2, [r3, #16]
    u->SR = ~USART_SR_LBD;
 801138a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801138e:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 8011390:	b1ba      	cbz	r2, 80113c2 <serve_usart_irq+0x52>
  sr = u->SR;   /* SR reset step 1.*/
 8011392:	b2b3      	uxth	r3, r6
    sts |= UART_OVERRUN_ERROR;
 8011394:	f013 0f08 	tst.w	r3, #8
 8011398:	bf0c      	ite	eq
 801139a:	2100      	moveq	r1, #0
 801139c:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 801139e:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 80113a0:	bf48      	it	mi
 80113a2:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 80113a6:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 80113a8:	bf48      	it	mi
 80113aa:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 80113ae:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 80113b0:	bf48      	it	mi
 80113b2:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 80113b6:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 80113b8:	bf48      	it	mi
 80113ba:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 80113be:	4628      	mov	r0, r5
 80113c0:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 80113c2:	0672      	lsls	r2, r6, #25
 80113c4:	d50e      	bpl.n	80113e4 <serve_usart_irq+0x74>
 80113c6:	067b      	lsls	r3, r7, #25
 80113c8:	d50c      	bpl.n	80113e4 <serve_usart_irq+0x74>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 80113ca:	686b      	ldr	r3, [r5, #4]
 80113cc:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80113ce:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 80113d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80113d6:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80113d8:	60e7      	str	r7, [r4, #12]
    if (uartp->config->txend2_cb != NULL)
 80113da:	b11b      	cbz	r3, 80113e4 <serve_usart_irq+0x74>
      uartp->config->txend2_cb(uartp);
 80113dc:	4628      	mov	r0, r5
  }
}
 80113de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      uartp->config->txend2_cb(uartp);
 80113e2:	4718      	bx	r3
 80113e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080113f0 <uart_lld_serve_tx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80113f0:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 80113f4:	b538      	push	{r3, r4, r5, lr}
 80113f6:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80113f8:	d11b      	bne.n	8011432 <uart_lld_serve_tx_end_irq+0x42>
  dmaStreamDisable(uartp->dmatx);
 80113fa:	6961      	ldr	r1, [r4, #20]
 80113fc:	680a      	ldr	r2, [r1, #0]
 80113fe:	6813      	ldr	r3, [r2, #0]
 8011400:	f023 031f 	bic.w	r3, r3, #31
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	6813      	ldr	r3, [r2, #0]
 8011408:	07db      	lsls	r3, r3, #31
 801140a:	d4fc      	bmi.n	8011406 <uart_lld_serve_tx_end_irq+0x16>
  if (uartp->config->txend1_cb != NULL)
 801140c:	6863      	ldr	r3, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 801140e:	7a0d      	ldrb	r5, [r1, #8]
 8011410:	6848      	ldr	r0, [r1, #4]
  if (uartp->config->txend1_cb != NULL)
 8011412:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 8011414:	233d      	movs	r3, #61	; 0x3d
 8011416:	40ab      	lsls	r3, r5
  uartp->txstate = UART_TX_COMPLETE;
 8011418:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 801141a:	6003      	str	r3, [r0, #0]
  uartp->txstate = UART_TX_COMPLETE;
 801141c:	7061      	strb	r1, [r4, #1]
  if (uartp->config->txend1_cb != NULL)
 801141e:	b12a      	cbz	r2, 801142c <uart_lld_serve_tx_end_irq+0x3c>
    uartp->config->txend1_cb(uartp);
 8011420:	4620      	mov	r0, r4
 8011422:	4790      	blx	r2
  if (uartp->txstate == UART_TX_COMPLETE)
 8011424:	7863      	ldrb	r3, [r4, #1]
 8011426:	2b02      	cmp	r3, #2
 8011428:	d000      	beq.n	801142c <uart_lld_serve_tx_end_irq+0x3c>
 801142a:	bd38      	pop	{r3, r4, r5, pc}
    uartp->txstate = UART_TX_IDLE;
 801142c:	2300      	movs	r3, #0
 801142e:	7063      	strb	r3, [r4, #1]
 8011430:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8011432:	4802      	ldr	r0, [pc, #8]	; (801143c <uart_lld_serve_tx_end_irq+0x4c>)
 8011434:	f7fc f86c 	bl	800d510 <chSysHalt>
 8011438:	e7df      	b.n	80113fa <uart_lld_serve_tx_end_irq+0xa>
 801143a:	bf00      	nop
 801143c:	0802eb40 	.word	0x0802eb40

08011440 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8011440:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8011448:	d13b      	bne.n	80114c2 <uart_lld_serve_rx_end_irq+0x82>
  if (uartp->rxstate == UART_RX_IDLE) {
 801144a:	78a3      	ldrb	r3, [r4, #2]
 801144c:	b94b      	cbnz	r3, 8011462 <uart_lld_serve_rx_end_irq+0x22>
    if (uartp->config->rxchar_cb != NULL)
 801144e:	6863      	ldr	r3, [r4, #4]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d034      	beq.n	80114c0 <uart_lld_serve_rx_end_irq+0x80>
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 8011456:	8b21      	ldrh	r1, [r4, #24]
 8011458:	4620      	mov	r0, r4
 801145a:	b289      	uxth	r1, r1
}
 801145c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 8011460:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8011462:	6921      	ldr	r1, [r4, #16]
 8011464:	680a      	ldr	r2, [r1, #0]
 8011466:	6813      	ldr	r3, [r2, #0]
 8011468:	f023 031f 	bic.w	r3, r3, #31
 801146c:	6013      	str	r3, [r2, #0]
 801146e:	6813      	ldr	r3, [r2, #0]
 8011470:	07db      	lsls	r3, r3, #31
 8011472:	d4fc      	bmi.n	801146e <uart_lld_serve_rx_end_irq+0x2e>
    if (uartp->config->rxend_cb != NULL)
 8011474:	6860      	ldr	r0, [r4, #4]
    dmaStreamDisable(uartp->dmarx);
 8011476:	7a0d      	ldrb	r5, [r1, #8]
 8011478:	684e      	ldr	r6, [r1, #4]
    if (uartp->config->rxend_cb != NULL)
 801147a:	6881      	ldr	r1, [r0, #8]
    dmaStreamDisable(uartp->dmarx);
 801147c:	233d      	movs	r3, #61	; 0x3d
 801147e:	40ab      	lsls	r3, r5
    uartp->rxstate = UART_RX_COMPLETE;
 8011480:	2502      	movs	r5, #2
    dmaStreamDisable(uartp->dmarx);
 8011482:	6033      	str	r3, [r6, #0]
    uartp->rxstate = UART_RX_COMPLETE;
 8011484:	70a5      	strb	r5, [r4, #2]
    if (uartp->config->rxend_cb != NULL)
 8011486:	b139      	cbz	r1, 8011498 <uart_lld_serve_rx_end_irq+0x58>
      uartp->config->rxend_cb(uartp);
 8011488:	4620      	mov	r0, r4
 801148a:	4788      	blx	r1
    if (uartp->rxstate == UART_RX_COMPLETE) {
 801148c:	78a3      	ldrb	r3, [r4, #2]
 801148e:	42ab      	cmp	r3, r5
 8011490:	d116      	bne.n	80114c0 <uart_lld_serve_rx_end_irq+0x80>
 8011492:	6923      	ldr	r3, [r4, #16]
 8011494:	6860      	ldr	r0, [r4, #4]
 8011496:	681a      	ldr	r2, [r3, #0]
  if (uartp->config->rxchar_cb == NULL)
 8011498:	68c3      	ldr	r3, [r0, #12]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 801149a:	68e1      	ldr	r1, [r4, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 801149c:	2b00      	cmp	r3, #0
 801149e:	bf14      	ite	ne
 80114a0:	f44f 7388 	movne.w	r3, #272	; 0x110
 80114a4:	f44f 7380 	moveq.w	r3, #256	; 0x100
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80114a8:	430b      	orrs	r3, r1
      uartp->rxstate = UART_RX_IDLE;
 80114aa:	2500      	movs	r5, #0
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80114ac:	2101      	movs	r1, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80114ae:	f104 0018 	add.w	r0, r4, #24
      uartp->rxstate = UART_RX_IDLE;
 80114b2:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80114b4:	60d0      	str	r0, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80114b6:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80114b8:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 80114ba:	6813      	ldr	r3, [r2, #0]
 80114bc:	430b      	orrs	r3, r1
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	bd70      	pop	{r4, r5, r6, pc}
 80114c2:	4802      	ldr	r0, [pc, #8]	; (80114cc <uart_lld_serve_rx_end_irq+0x8c>)
 80114c4:	f7fc f824 	bl	800d510 <chSysHalt>
 80114c8:	e7bf      	b.n	801144a <uart_lld_serve_rx_end_irq+0xa>
 80114ca:	bf00      	nop
 80114cc:	0802eb40 	.word	0x0802eb40

080114d0 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80114d0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);
 80114d2:	4803      	ldr	r0, [pc, #12]	; (80114e0 <VectorDC+0x10>)
 80114d4:	f7ff ff4c 	bl	8011370 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80114d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80114dc:	f7fc bf38 	b.w	800e350 <_port_irq_epilogue>
 80114e0:	20002098 	.word	0x20002098
	...

080114f0 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 80114f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);
 80114f2:	4803      	ldr	r0, [pc, #12]	; (8011500 <Vector15C+0x10>)
 80114f4:	f7ff ff3c 	bl	8011370 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80114f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80114fc:	f7fc bf28 	b.w	800e350 <_port_irq_epilogue>
 8011500:	200020b4 	.word	0x200020b4
	...

08011510 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8011510:	b570      	push	{r4, r5, r6, lr}
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 8011512:	4d0c      	ldr	r5, [pc, #48]	; (8011544 <uart_lld_init+0x34>)
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 8011514:	4c0c      	ldr	r4, [pc, #48]	; (8011548 <uart_lld_init+0x38>)
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8011516:	4e0d      	ldr	r6, [pc, #52]	; (801154c <uart_lld_init+0x3c>)
  uartObjectInit(&UARTD3);
 8011518:	4628      	mov	r0, r5
 801151a:	f7fd fa91 	bl	800ea40 <uartObjectInit>
  UARTD3.usart   = USART3;
 801151e:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <uart_lld_init+0x40>)
 8011520:	60ab      	str	r3, [r5, #8]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8011522:	2206      	movs	r2, #6
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 8011524:	f104 0318 	add.w	r3, r4, #24
  uartObjectInit(&UARTD6);
 8011528:	4630      	mov	r0, r6
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 801152a:	612c      	str	r4, [r5, #16]
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 801152c:	616b      	str	r3, [r5, #20]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 801152e:	60ea      	str	r2, [r5, #12]
  uartObjectInit(&UARTD6);
 8011530:	f7fd fa86 	bl	800ea40 <uartObjectInit>
  UARTD6.usart   = USART6;
 8011534:	4b07      	ldr	r3, [pc, #28]	; (8011554 <uart_lld_init+0x44>)
 8011536:	60b3      	str	r3, [r6, #8]
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8011538:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 801153c:	34a8      	adds	r4, #168	; 0xa8
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 801153e:	6133      	str	r3, [r6, #16]
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 8011540:	6174      	str	r4, [r6, #20]
 8011542:	bd70      	pop	{r4, r5, r6, pc}
 8011544:	20002098 	.word	0x20002098
 8011548:	0802ea8c 	.word	0x0802ea8c
 801154c:	200020b4 	.word	0x200020b4
 8011550:	40004800 	.word	0x40004800
 8011554:	40011400 	.word	0x40011400
	...

08011560 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8011560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8011562:	7803      	ldrb	r3, [r0, #0]
 8011564:	2b01      	cmp	r3, #1
void uart_lld_start(UARTDriver *uartp) {
 8011566:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 8011568:	d03e      	beq.n	80115e8 <uart_lld_start+0x88>
 801156a:	6885      	ldr	r5, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 801156c:	2300      	movs	r3, #0
 801156e:	70a3      	strb	r3, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8011570:	7063      	strb	r3, [r4, #1]
  usart_stop(uartp);
 8011572:	4620      	mov	r0, r4
 8011574:	f7ff fed4 	bl	8011320 <usart_stop>
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8011578:	68a3      	ldr	r3, [r4, #8]
 801157a:	4a47      	ldr	r2, [pc, #284]	; (8011698 <uart_lld_start+0x138>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d04b      	beq.n	8011618 <uart_lld_start+0xb8>
 8011580:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011584:	4293      	cmp	r3, r2
 8011586:	d047      	beq.n	8011618 <uart_lld_start+0xb8>
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 8011588:	6862      	ldr	r2, [r4, #4]
 801158a:	4b44      	ldr	r3, [pc, #272]	; (801169c <uart_lld_start+0x13c>)
 801158c:	6951      	ldr	r1, [r2, #20]
 801158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011592:	60ab      	str	r3, [r5, #8]
  if (uartp->config->rxchar_cb == NULL)
 8011594:	68d7      	ldr	r7, [r2, #12]
  u->CR1 = uartp->config->cr1 | cr1;
 8011596:	8b13      	ldrh	r3, [r2, #24]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8011598:	8b50      	ldrh	r0, [r2, #26]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 801159a:	8b91      	ldrh	r1, [r2, #28]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 801159c:	6922      	ldr	r2, [r4, #16]
  (void)u->SR;  /* SR reset step 1.*/
 801159e:	682e      	ldr	r6, [r5, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80115a0:	686e      	ldr	r6, [r5, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80115a2:	68e6      	ldr	r6, [r4, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80115a4:	6812      	ldr	r2, [r2, #0]
  if (uartp->config->rxchar_cb == NULL)
 80115a6:	2f00      	cmp	r7, #0
  u->CR1 = uartp->config->cr1 | cr1;
 80115a8:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
  u->SR = 0;
 80115ac:	f04f 0700 	mov.w	r7, #0
 80115b0:	602f      	str	r7, [r5, #0]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80115b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 80115b6:	bf14      	ite	ne
 80115b8:	f44f 7788 	movne.w	r7, #272	; 0x110
 80115bc:	f44f 7780 	moveq.w	r7, #256	; 0x100
  u->CR1 = uartp->config->cr1 | cr1;
 80115c0:	f043 030c 	orr.w	r3, r3, #12
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80115c4:	f041 01c1 	orr.w	r1, r1, #193	; 0xc1
  u->CR1 = uartp->config->cr1 | cr1;
 80115c8:	b29b      	uxth	r3, r3
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80115ca:	433e      	orrs	r6, r7
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80115cc:	b280      	uxth	r0, r0
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80115ce:	2701      	movs	r7, #1
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80115d0:	b289      	uxth	r1, r1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80115d2:	3418      	adds	r4, #24
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80115d4:	6128      	str	r0, [r5, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80115d6:	6169      	str	r1, [r5, #20]
  u->CR1 = uartp->config->cr1 | cr1;
 80115d8:	60eb      	str	r3, [r5, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80115da:	60d4      	str	r4, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80115dc:	6057      	str	r7, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80115de:	6016      	str	r6, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 80115e0:	6813      	ldr	r3, [r2, #0]
 80115e2:	433b      	orrs	r3, r7
 80115e4:	6013      	str	r3, [r2, #0]
 80115e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&UARTD3 == uartp) {
 80115e8:	4b2d      	ldr	r3, [pc, #180]	; (80116a0 <uart_lld_start+0x140>)
 80115ea:	4298      	cmp	r0, r3
 80115ec:	d03a      	beq.n	8011664 <uart_lld_start+0x104>
    if (&UARTD6 == uartp) {
 80115ee:	4b2d      	ldr	r3, [pc, #180]	; (80116a4 <uart_lld_start+0x144>)
 80115f0:	4298      	cmp	r0, r3
 80115f2:	d01d      	beq.n	8011630 <uart_lld_start+0xd0>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 80115f4:	6863      	ldr	r3, [r4, #4]
 80115f6:	8b1b      	ldrh	r3, [r3, #24]
 80115f8:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 80115fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011600:	d011      	beq.n	8011626 <uart_lld_start+0xc6>
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8011602:	6922      	ldr	r2, [r4, #16]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8011604:	6963      	ldr	r3, [r4, #20]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8011606:	68a5      	ldr	r5, [r4, #8]
 8011608:	6810      	ldr	r0, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 801160a:	6819      	ldr	r1, [r3, #0]
    uartp->rxbuf = 0;
 801160c:	2200      	movs	r2, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 801160e:	1d2b      	adds	r3, r5, #4
 8011610:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8011612:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 8011614:	8322      	strh	r2, [r4, #24]
 8011616:	e7a9      	b.n	801156c <uart_lld_start+0xc>
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 8011618:	6862      	ldr	r2, [r4, #4]
 801161a:	4b23      	ldr	r3, [pc, #140]	; (80116a8 <uart_lld_start+0x148>)
 801161c:	6951      	ldr	r1, [r2, #20]
 801161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011622:	60ab      	str	r3, [r5, #8]
 8011624:	e7b6      	b.n	8011594 <uart_lld_start+0x34>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8011626:	68e3      	ldr	r3, [r4, #12]
 8011628:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 801162c:	60e3      	str	r3, [r4, #12]
 801162e:	e7e8      	b.n	8011602 <uart_lld_start+0xa2>
      b = dmaStreamAllocate(uartp->dmarx,
 8011630:	4603      	mov	r3, r0
 8011632:	4a1e      	ldr	r2, [pc, #120]	; (80116ac <uart_lld_start+0x14c>)
 8011634:	6900      	ldr	r0, [r0, #16]
 8011636:	210c      	movs	r1, #12
 8011638:	f7fd ff52 	bl	800f4e0 <dmaStreamAllocate>
      b = dmaStreamAllocate(uartp->dmatx,
 801163c:	4623      	mov	r3, r4
 801163e:	4a1c      	ldr	r2, [pc, #112]	; (80116b0 <uart_lld_start+0x150>)
 8011640:	6960      	ldr	r0, [r4, #20]
 8011642:	210c      	movs	r1, #12
 8011644:	f7fd ff4c 	bl	800f4e0 <dmaStreamAllocate>
      rccEnableUSART6(FALSE);
 8011648:	4a1a      	ldr	r2, [pc, #104]	; (80116b4 <uart_lld_start+0x154>)
 801164a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801164c:	f043 0320 	orr.w	r3, r3, #32
 8011650:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8011652:	210c      	movs	r1, #12
 8011654:	2047      	movs	r0, #71	; 0x47
 8011656:	f7fd fd53 	bl	800f100 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 801165a:	68e3      	ldr	r3, [r4, #12]
 801165c:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8011660:	60e3      	str	r3, [r4, #12]
 8011662:	e7c7      	b.n	80115f4 <uart_lld_start+0x94>
      b = dmaStreamAllocate(uartp->dmarx,
 8011664:	4603      	mov	r3, r0
 8011666:	4a11      	ldr	r2, [pc, #68]	; (80116ac <uart_lld_start+0x14c>)
 8011668:	6900      	ldr	r0, [r0, #16]
 801166a:	210c      	movs	r1, #12
 801166c:	f7fd ff38 	bl	800f4e0 <dmaStreamAllocate>
      b = dmaStreamAllocate(uartp->dmatx,
 8011670:	4623      	mov	r3, r4
 8011672:	4a0f      	ldr	r2, [pc, #60]	; (80116b0 <uart_lld_start+0x150>)
 8011674:	6960      	ldr	r0, [r4, #20]
 8011676:	210c      	movs	r1, #12
 8011678:	f7fd ff32 	bl	800f4e0 <dmaStreamAllocate>
      rccEnableUSART3(FALSE);
 801167c:	4a0d      	ldr	r2, [pc, #52]	; (80116b4 <uart_lld_start+0x154>)
 801167e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011684:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_UART_USART3_IRQ_PRIORITY);
 8011686:	210c      	movs	r1, #12
 8011688:	2027      	movs	r0, #39	; 0x27
 801168a:	f7fd fd39 	bl	800f100 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART3_RX_DMA_CHANNEL) |
 801168e:	68e3      	ldr	r3, [r4, #12]
 8011690:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011694:	60e3      	str	r3, [r4, #12]
 8011696:	e7ad      	b.n	80115f4 <uart_lld_start+0x94>
 8011698:	40011000 	.word	0x40011000
 801169c:	0280de80 	.word	0x0280de80
 80116a0:	20002098 	.word	0x20002098
 80116a4:	200020b4 	.word	0x200020b4
 80116a8:	0501bd00 	.word	0x0501bd00
 80116ac:	08011441 	.word	0x08011441
 80116b0:	080113f1 	.word	0x080113f1
 80116b4:	40023800 	.word	0x40023800
	...

080116c0 <uart_lld_stop>:
 *
 * @notapi
 */
void uart_lld_stop(UARTDriver *uartp) {

  if (uartp->state == UART_READY) {
 80116c0:	7802      	ldrb	r2, [r0, #0]
 80116c2:	2a02      	cmp	r2, #2
 80116c4:	d000      	beq.n	80116c8 <uart_lld_stop+0x8>
 80116c6:	4770      	bx	lr
void uart_lld_stop(UARTDriver *uartp) {
 80116c8:	b510      	push	{r4, lr}
 80116ca:	4604      	mov	r4, r0
    usart_stop(uartp);
 80116cc:	f7ff fe28 	bl	8011320 <usart_stop>
    dmaStreamRelease(uartp->dmarx);
 80116d0:	6920      	ldr	r0, [r4, #16]
 80116d2:	f7fd ff4d 	bl	800f570 <dmaStreamRelease>
    dmaStreamRelease(uartp->dmatx);
 80116d6:	6960      	ldr	r0, [r4, #20]
 80116d8:	f7fd ff4a 	bl	800f570 <dmaStreamRelease>
      return;
    }
#endif

#if STM32_UART_USE_USART3
    if (&UARTD3 == uartp) {
 80116dc:	4b0c      	ldr	r3, [pc, #48]	; (8011710 <uart_lld_stop+0x50>)
 80116de:	429c      	cmp	r4, r3
 80116e0:	d00c      	beq.n	80116fc <uart_lld_stop+0x3c>
      return;
    }
#endif

#if STM32_UART_USE_USART6
    if (&UARTD6 == uartp) {
 80116e2:	4b0c      	ldr	r3, [pc, #48]	; (8011714 <uart_lld_stop+0x54>)
 80116e4:	429c      	cmp	r4, r3
 80116e6:	d000      	beq.n	80116ea <uart_lld_stop+0x2a>
 80116e8:	bd10      	pop	{r4, pc}
      nvicDisableVector(STM32_USART6_NUMBER);
 80116ea:	2047      	movs	r0, #71	; 0x47
 80116ec:	f7fd fd28 	bl	800f140 <nvicDisableVector>
      rccDisableUSART6(FALSE);
 80116f0:	4a09      	ldr	r2, [pc, #36]	; (8011718 <uart_lld_stop+0x58>)
 80116f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80116f4:	f023 0320 	bic.w	r3, r3, #32
 80116f8:	6453      	str	r3, [r2, #68]	; 0x44
      return;
 80116fa:	e7f5      	b.n	80116e8 <uart_lld_stop+0x28>
      nvicDisableVector(STM32_USART3_NUMBER);
 80116fc:	2027      	movs	r0, #39	; 0x27
 80116fe:	f7fd fd1f 	bl	800f140 <nvicDisableVector>
      rccDisableUSART3(FALSE);
 8011702:	4a05      	ldr	r2, [pc, #20]	; (8011718 <uart_lld_stop+0x58>)
 8011704:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801170a:	6413      	str	r3, [r2, #64]	; 0x40
      return;
 801170c:	bd10      	pop	{r4, pc}
 801170e:	bf00      	nop
 8011710:	20002098 	.word	0x20002098
 8011714:	200020b4 	.word	0x200020b4
 8011718:	40023800 	.word	0x40023800
 801171c:	00000000 	.word	0x00000000

08011720 <uart_lld_start_send>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {
 8011720:	b430      	push	{r4, r5}

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8011722:	6943      	ldr	r3, [r0, #20]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 8011724:	6845      	ldr	r5, [r0, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8011726:	68c4      	ldr	r4, [r0, #12]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8011728:	681b      	ldr	r3, [r3, #0]
  if (uartp->config->txend2_cb != NULL) {
 801172a:	686d      	ldr	r5, [r5, #4]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 801172c:	60da      	str	r2, [r3, #12]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 801172e:	f444 648a 	orr.w	r4, r4, #1104	; 0x450
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 8011732:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8011734:	601c      	str	r4, [r3, #0]
  if (uartp->config->txend2_cb != NULL) {
 8011736:	b13d      	cbz	r5, 8011748 <uart_lld_start_send+0x28>
    uartp->usart->SR = ~USART_SR_TC;
 8011738:	6882      	ldr	r2, [r0, #8]
 801173a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 801173e:	6011      	str	r1, [r2, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 8011740:	68d1      	ldr	r1, [r2, #12]
 8011742:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8011746:	60d1      	str	r1, [r2, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	f042 0201 	orr.w	r2, r2, #1
 801174e:	601a      	str	r2, [r3, #0]
}
 8011750:	bc30      	pop	{r4, r5}
 8011752:	4770      	bx	lr
	...

08011760 <_sbrk_r>:
}

/***************************************************************************/

caddr_t _sbrk_r(struct _reent *r, int incr)
{
 8011760:	b510      	push	{r4, lr}
 8011762:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr > 0);

  p = chCoreAlloc((size_t)incr);
 8011764:	4608      	mov	r0, r1
 8011766:	f7fc fd1b 	bl	800e1a0 <chCoreAlloc>
  if (p == NULL) {
 801176a:	b100      	cbz	r0, 801176e <_sbrk_r+0xe>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 801176c:	bd10      	pop	{r4, pc}
    __errno_r(r) = ENOMEM;
 801176e:	230c      	movs	r3, #12
 8011770:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 8011772:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011776:	bd10      	pop	{r4, pc}
	...

08011780 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8011780:	f7fd bf56 	b.w	800f630 <stm32_clock_init>
	...

08011790 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8011790:	4770      	bx	lr
 8011792:	bf00      	nop
	...

080117a0 <timer_thread>:
//				(double)mc_interface_get_configuration()->lo_current_motor_max_now,
//				(double)mc_interface_get_configuration()->lo_current_motor_min_now);
	}
}

static THD_FUNCTION(timer_thread, arg) {
 80117a0:	b508      	push	{r3, lr}
 80117a2:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <timer_thread+0x18>)
 80117a4:	4a05      	ldr	r2, [pc, #20]	; (80117bc <timer_thread+0x1c>)
 80117a6:	699b      	ldr	r3, [r3, #24]
 80117a8:	619a      	str	r2, [r3, #24]
	(void)arg;

	chRegSetThreadName("msec_timer");

	for(;;) {
		packet_timerfunc();
 80117aa:	f004 fd31 	bl	8016210 <packet_timerfunc>
		chThdSleepMilliseconds(1);
 80117ae:	200a      	movs	r0, #10
 80117b0:	f7fc f916 	bl	800d9e0 <chThdSleep>
 80117b4:	e7f9      	b.n	80117aa <timer_thread+0xa>
 80117b6:	bf00      	nop
 80117b8:	20001a40 	.word	0x20001a40
 80117bc:	0802ecb0 	.word	0x0802ecb0

080117c0 <periodic_thread>:
static THD_FUNCTION(periodic_thread, arg) {
 80117c0:	b538      	push	{r3, r4, r5, lr}
 80117c2:	4b47      	ldr	r3, [pc, #284]	; (80118e0 <periodic_thread+0x120>)
 80117c4:	4a47      	ldr	r2, [pc, #284]	; (80118e4 <periodic_thread+0x124>)
 80117c6:	699b      	ldr	r3, [r3, #24]
 80117c8:	ed2d 8b04 	vpush	{d8-d9}
			ledpwm_set_intensity(LED_GREEN, 0.2);
 80117cc:	eddf 8a46 	vldr	s17, [pc, #280]	; 80118e8 <periodic_thread+0x128>
				ledpwm_set_intensity(LED_RED, 0.0);
 80117d0:	ed9f 8a46 	vldr	s16, [pc, #280]	; 80118ec <periodic_thread+0x12c>
 80117d4:	619a      	str	r2, [r3, #24]
		if (mc_interface_get_state() == MC_STATE_RUNNING) {
 80117d6:	f009 fe7b 	bl	801b4d0 <mc_interface_get_state>
 80117da:	2802      	cmp	r0, #2
			ledpwm_set_intensity(LED_GREEN, 1.0);
 80117dc:	bf0c      	ite	eq
 80117de:	eeb7 0a00 	vmoveq.f32	s0, #112	; 0x3f800000  1.0
			ledpwm_set_intensity(LED_GREEN, 0.2);
 80117e2:	eeb0 0a68 	vmovne.f32	s0, s17
 80117e6:	2000      	movs	r0, #0
 80117e8:	f000 fe02 	bl	80123f0 <ledpwm_set_intensity>
		mc_fault_code fault = mc_interface_get_fault();
 80117ec:	f009 fe58 	bl	801b4a0 <mc_interface_get_fault>
		if (fault != FAULT_CODE_NONE) {
 80117f0:	4605      	mov	r5, r0
 80117f2:	2800      	cmp	r0, #0
 80117f4:	d041      	beq.n	801187a <periodic_thread+0xba>
			for (int i = 0;i < (int)fault;i++) {
 80117f6:	2400      	movs	r4, #0
				ledpwm_set_intensity(LED_RED, 1.0);
 80117f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80117fc:	2001      	movs	r0, #1
 80117fe:	f000 fdf7 	bl	80123f0 <ledpwm_set_intensity>
				chThdSleepMilliseconds(250);
 8011802:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8011806:	f7fc f8eb 	bl	800d9e0 <chThdSleep>
				ledpwm_set_intensity(LED_RED, 0.0);
 801180a:	2001      	movs	r0, #1
 801180c:	eeb0 0a48 	vmov.f32	s0, s16
			for (int i = 0;i < (int)fault;i++) {
 8011810:	4404      	add	r4, r0
				ledpwm_set_intensity(LED_RED, 0.0);
 8011812:	f000 fded 	bl	80123f0 <ledpwm_set_intensity>
				chThdSleepMilliseconds(250);
 8011816:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801181a:	f7fc f8e1 	bl	800d9e0 <chThdSleep>
			for (int i = 0;i < (int)fault;i++) {
 801181e:	42a5      	cmp	r5, r4
 8011820:	d1ea      	bne.n	80117f8 <periodic_thread+0x38>
			chThdSleepMilliseconds(500);
 8011822:	f241 3088 	movw	r0, #5000	; 0x1388
 8011826:	f7fc f8db 	bl	800d9e0 <chThdSleep>
		if (mc_interface_get_state() == MC_STATE_DETECTING) {
 801182a:	f009 fe51 	bl	801b4d0 <mc_interface_get_state>
 801182e:	2801      	cmp	r0, #1
 8011830:	d02c      	beq.n	801188c <periodic_thread+0xcc>
		disp_pos_mode display_mode = commands_get_disp_pos_mode();
 8011832:	f006 ff95 	bl	8018760 <commands_get_disp_pos_mode>
		switch (display_mode) {
 8011836:	2804      	cmp	r0, #4
		disp_pos_mode display_mode = commands_get_disp_pos_mode();
 8011838:	4604      	mov	r4, r0
		switch (display_mode) {
 801183a:	d030      	beq.n	801189e <periodic_thread+0xde>
 801183c:	2805      	cmp	r0, #5
 801183e:	d03b      	beq.n	80118b8 <periodic_thread+0xf8>
 8011840:	2803      	cmp	r0, #3
 8011842:	d031      	beq.n	80118a8 <periodic_thread+0xe8>
		if (mc_interface_get_configuration()->motor_type == MOTOR_TYPE_FOC) {
 8011844:	f009 fdfc 	bl	801b440 <mc_interface_get_configuration>
 8011848:	7883      	ldrb	r3, [r0, #2]
 801184a:	2b02      	cmp	r3, #2
 801184c:	d111      	bne.n	8011872 <periodic_thread+0xb2>
			switch (display_mode) {
 801184e:	2c02      	cmp	r4, #2
 8011850:	d041      	beq.n	80118d6 <periodic_thread+0x116>
 8011852:	2c06      	cmp	r4, #6
 8011854:	d10d      	bne.n	8011872 <periodic_thread+0xb2>
				commands_send_rotor_pos(utils_angle_difference(mcpwm_foc_get_phase_observer(), mcpwm_foc_get_phase_encoder()));
 8011856:	f00c fb93 	bl	801df80 <mcpwm_foc_get_phase_observer>
 801185a:	eeb0 9a40 	vmov.f32	s18, s0
 801185e:	f00c fba7 	bl	801dfb0 <mcpwm_foc_get_phase_encoder>
 8011862:	eef0 0a40 	vmov.f32	s1, s0
 8011866:	eeb0 0a49 	vmov.f32	s0, s18
 801186a:	f004 f9c1 	bl	8015bf0 <utils_angle_difference>
 801186e:	f006 ff57 	bl	8018720 <commands_send_rotor_pos>
		chThdSleepMilliseconds(10);
 8011872:	2064      	movs	r0, #100	; 0x64
 8011874:	f7fc f8b4 	bl	800d9e0 <chThdSleep>
	for(;;) {
 8011878:	e7ad      	b.n	80117d6 <periodic_thread+0x16>
			ledpwm_set_intensity(LED_RED, 0.0);
 801187a:	eeb0 0a48 	vmov.f32	s0, s16
 801187e:	2001      	movs	r0, #1
 8011880:	f000 fdb6 	bl	80123f0 <ledpwm_set_intensity>
		if (mc_interface_get_state() == MC_STATE_DETECTING) {
 8011884:	f009 fe24 	bl	801b4d0 <mc_interface_get_state>
 8011888:	2801      	cmp	r0, #1
 801188a:	d1d2      	bne.n	8011832 <periodic_thread+0x72>
			commands_send_rotor_pos(mcpwm_get_detect_pos());
 801188c:	f002 fc70 	bl	8014170 <mcpwm_get_detect_pos>
 8011890:	f006 ff46 	bl	8018720 <commands_send_rotor_pos>
		disp_pos_mode display_mode = commands_get_disp_pos_mode();
 8011894:	f006 ff64 	bl	8018760 <commands_get_disp_pos_mode>
		switch (display_mode) {
 8011898:	2804      	cmp	r0, #4
		disp_pos_mode display_mode = commands_get_disp_pos_mode();
 801189a:	4604      	mov	r4, r0
		switch (display_mode) {
 801189c:	d1ce      	bne.n	801183c <periodic_thread+0x7c>
				commands_send_rotor_pos(mc_interface_get_pid_pos_now());
 801189e:	f00a fc3f 	bl	801c120 <mc_interface_get_pid_pos_now>
 80118a2:	f006 ff3d 	bl	8018720 <commands_send_rotor_pos>
				break;
 80118a6:	e003      	b.n	80118b0 <periodic_thread+0xf0>
				commands_send_rotor_pos(encoder_read_deg());
 80118a8:	f009 fa22 	bl	801acf0 <encoder_read_deg>
 80118ac:	f006 ff38 	bl	8018720 <commands_send_rotor_pos>
		if (mc_interface_get_configuration()->motor_type == MOTOR_TYPE_FOC) {
 80118b0:	f009 fdc6 	bl	801b440 <mc_interface_get_configuration>
 80118b4:	7883      	ldrb	r3, [r0, #2]
 80118b6:	e7dc      	b.n	8011872 <periodic_thread+0xb2>
				commands_send_rotor_pos(utils_angle_difference(mc_interface_get_pid_pos_set(), mc_interface_get_pid_pos_now()));
 80118b8:	f00a fc2a 	bl	801c110 <mc_interface_get_pid_pos_set>
 80118bc:	eeb0 9a40 	vmov.f32	s18, s0
 80118c0:	f00a fc2e 	bl	801c120 <mc_interface_get_pid_pos_now>
 80118c4:	eef0 0a40 	vmov.f32	s1, s0
 80118c8:	eeb0 0a49 	vmov.f32	s0, s18
 80118cc:	f004 f990 	bl	8015bf0 <utils_angle_difference>
 80118d0:	f006 ff26 	bl	8018720 <commands_send_rotor_pos>
				break;
 80118d4:	e7ec      	b.n	80118b0 <periodic_thread+0xf0>
				commands_send_rotor_pos(mcpwm_foc_get_phase_observer());
 80118d6:	f00c fb53 	bl	801df80 <mcpwm_foc_get_phase_observer>
 80118da:	f006 ff21 	bl	8018720 <commands_send_rotor_pos>
				break;
 80118de:	e7c8      	b.n	8011872 <periodic_thread+0xb2>
 80118e0:	20001a40 	.word	0x20001a40
 80118e4:	0802eca0 	.word	0x0802eca0
 80118e8:	3e4ccccd 	.word	0x3e4ccccd
 80118ec:	00000000 	.word	0x00000000

080118f0 <main>:
	}
}

int main(void) {
 80118f0:	b500      	push	{lr}
 80118f2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	halInit();
 80118f6:	f7fc fd5b 	bl	800e3b0 <halInit>
	chSysInit();
 80118fa:	f7fb fdb1 	bl	800d460 <chSysInit>
	// floating pins.
#ifdef HW_HAS_DRV8313
	INIT_BR();
#endif

	chThdSleepMilliseconds(1000);
 80118fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8011902:	f7fc f86d 	bl	800d9e0 <chThdSleep>

	hw_init_gpio();
 8011906:	f00e fd7b 	bl	8020400 <hw_init_gpio>
	LED_RED_OFF();
 801190a:	4b1c      	ldr	r3, [pc, #112]	; (801197c <main+0x8c>)
 801190c:	2120      	movs	r1, #32
	LED_GREEN_OFF();
 801190e:	2210      	movs	r2, #16
	LED_RED_OFF();
 8011910:	8359      	strh	r1, [r3, #26]
	LED_GREEN_OFF();
 8011912:	835a      	strh	r2, [r3, #26]

	conf_general_init();
 8011914:	f005 fe34 	bl	8017580 <conf_general_init>
	ledpwm_init();
 8011918:	f000 fd3a 	bl	8012390 <ledpwm_init>

	mc_configuration mcconf;
	conf_general_read_mc_configuration(&mcconf);
 801191c:	a835      	add	r0, sp, #212	; 0xd4
 801191e:	f006 f8ef 	bl	8017b00 <conf_general_read_mc_configuration>
	mc_interface_init(&mcconf);
 8011922:	a835      	add	r0, sp, #212	; 0xd4
 8011924:	f009 fccc 	bl	801b2c0 <mc_interface_init>

	commands_init();
 8011928:	f006 feaa 	bl	8018680 <commands_init>
	comm_usb_init();
 801192c:	f000 fad8 	bl	8011ee0 <comm_usb_init>

	app_configuration appconf;
	conf_general_read_app_configuration(&appconf);
 8011930:	a803      	add	r0, sp, #12
 8011932:	f006 f87d 	bl	8017a30 <conf_general_read_app_configuration>
	app_set_configuration(&appconf);
 8011936:	a803      	add	r0, sp, #12
 8011938:	f00e ff3a 	bl	80207b0 <app_set_configuration>
	servo_init();
#endif
#endif

	// Threads
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 801193c:	2400      	movs	r4, #0
	timeout_init();
 801193e:	f008 fc2f 	bl	801a1a0 <timeout_init>
	timeout_configure(appconf.timeout_msec, appconf.timeout_brake_current);
 8011942:	ed9d 0a05 	vldr	s0, [sp, #20]
 8011946:	9804      	ldr	r0, [sp, #16]
 8011948:	f008 fc52 	bl	801a1f0 <timeout_configure>
	comm_can_init();
 801194c:	f008 fec0 	bl	801a6d0 <comm_can_init>
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 8011950:	4b0b      	ldr	r3, [pc, #44]	; (8011980 <main+0x90>)
 8011952:	9400      	str	r4, [sp, #0]
 8011954:	2240      	movs	r2, #64	; 0x40
 8011956:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 801195a:	480a      	ldr	r0, [pc, #40]	; (8011984 <main+0x94>)
 801195c:	f7fc f808 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8011960:	9400      	str	r4, [sp, #0]
 8011962:	4b09      	ldr	r3, [pc, #36]	; (8011988 <main+0x98>)
 8011964:	4809      	ldr	r0, [pc, #36]	; (801198c <main+0x9c>)
 8011966:	2240      	movs	r2, #64	; 0x40
 8011968:	f44f 7106 	mov.w	r1, #536	; 0x218
 801196c:	f7fc f800 	bl	800d970 <chThdCreateStatic>
		}
	}
#endif

	for(;;) {
		chThdSleepMilliseconds(10);
 8011970:	2064      	movs	r0, #100	; 0x64
 8011972:	f7fc f835 	bl	800d9e0 <chThdSleep>

		if (encoder_is_configured()) {
 8011976:	f009 f9b3 	bl	801ace0 <encoder_is_configured>
 801197a:	e7f9      	b.n	8011970 <main+0x80>
 801197c:	40020800 	.word	0x40020800
 8011980:	080117c1 	.word	0x080117c1
 8011984:	200020d0 	.word	0x200020d0
 8011988:	080117a1 	.word	0x080117a1
 801198c:	20002668 	.word	0x20002668

08011990 <get_descriptor>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 8011990:	2902      	cmp	r1, #2
 8011992:	d006      	beq.n	80119a2 <get_descriptor+0x12>
 8011994:	2903      	cmp	r1, #3
 8011996:	d006      	beq.n	80119a6 <get_descriptor+0x16>
 8011998:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 801199a:	4806      	ldr	r0, [pc, #24]	; (80119b4 <get_descriptor+0x24>)
 801199c:	bf18      	it	ne
 801199e:	2000      	movne	r0, #0
 80119a0:	4770      	bx	lr
		return &vcom_configuration_descriptor;
 80119a2:	4805      	ldr	r0, [pc, #20]	; (80119b8 <get_descriptor+0x28>)
 80119a4:	4770      	bx	lr
		if (dindex < 4)
 80119a6:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 80119a8:	bf9a      	itte	ls
 80119aa:	4804      	ldrls	r0, [pc, #16]	; (80119bc <get_descriptor+0x2c>)
 80119ac:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
	return NULL;
 80119b0:	2000      	movhi	r0, #0
}
 80119b2:	4770      	bx	lr
 80119b4:	0802eda0 	.word	0x0802eda0
 80119b8:	0802ed40 	.word	0x0802ed40
 80119bc:	0802ee60 	.word	0x0802ee60

080119c0 <usb_event>:
/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {

	switch (event) {
 80119c0:	2902      	cmp	r1, #2
 80119c2:	d115      	bne.n	80119f0 <usb_event+0x30>
static void usb_event(USBDriver *usbp, usbevent_t event) {
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4605      	mov	r5, r0
 80119c8:	460c      	mov	r4, r1
 80119ca:	2320      	movs	r3, #32
 80119cc:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD2_DATA_REQUEST_EP, &ep1config);
 80119d0:	4a08      	ldr	r2, [pc, #32]	; (80119f4 <usb_event+0x34>)
 80119d2:	2101      	movs	r1, #1
 80119d4:	f7fd f8ac 	bl	800eb30 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD2_INTERRUPT_REQUEST_EP, &ep2config);
 80119d8:	4621      	mov	r1, r4
 80119da:	4628      	mov	r0, r5
 80119dc:	4a06      	ldr	r2, [pc, #24]	; (80119f8 <usb_event+0x38>)
 80119de:	f7fd f8a7 	bl	800eb30 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 80119e2:	4806      	ldr	r0, [pc, #24]	; (80119fc <usb_event+0x3c>)
 80119e4:	f7fc ff54 	bl	800e890 <sduConfigureHookI>
 80119e8:	2300      	movs	r3, #0
 80119ea:	f383 8811 	msr	BASEPRI, r3
 80119ee:	bd38      	pop	{r3, r4, r5, pc}
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	0802ecc0 	.word	0x0802ecc0
 80119f8:	0802ecf0 	.word	0x0802ecf0
 80119fc:	20002880 	.word	0x20002880

08011a00 <comm_usb_serial_init>:
		USBD2_DATA_REQUEST_EP,
		USBD2_DATA_AVAILABLE_EP,
		USBD2_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
 8011a00:	b570      	push	{r4, r5, r6, lr}
	palSetPadMode(GPIOA, 11,
 8011a02:	4e15      	ldr	r6, [pc, #84]	; (8011a58 <comm_usb_serial_init+0x58>)
	palSetPadMode(GPIOA, 12,
			PAL_MODE_ALTERNATE(GPIO_AF_OTG_FS) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);

	sduObjectInit(&SDU1);
 8011a04:	4d15      	ldr	r5, [pc, #84]	; (8011a5c <comm_usb_serial_init+0x5c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8011a06:	4c16      	ldr	r4, [pc, #88]	; (8011a60 <comm_usb_serial_init+0x60>)
	palSetPadMode(GPIOA, 11,
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f240 520a 	movw	r2, #1290	; 0x50a
 8011a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a12:	f7fe f9f5 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 12,
 8011a16:	f240 520a 	movw	r2, #1290	; 0x50a
 8011a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a1e:	4630      	mov	r0, r6
 8011a20:	f7fe f9ee 	bl	800fe00 <_pal_lld_setgroupmode>
	sduObjectInit(&SDU1);
 8011a24:	4628      	mov	r0, r5
 8011a26:	f7fc feeb 	bl	800e800 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 8011a2a:	490e      	ldr	r1, [pc, #56]	; (8011a64 <comm_usb_serial_init+0x64>)
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f7fc ff0f 	bl	800e850 <sduStart>
	usbDisconnectBus(serusbcfg.usbp);
 8011a32:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011a34:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011a36:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8011a3a:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 8011a3c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8011a40:	f7fb ffce 	bl	800d9e0 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 8011a44:	4620      	mov	r0, r4
 8011a46:	4908      	ldr	r1, [pc, #32]	; (8011a68 <comm_usb_serial_init+0x68>)
 8011a48:	f7fd f84a 	bl	800eae0 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 8011a4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011a4e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a54:	6393      	str	r3, [r2, #56]	; 0x38
 8011a56:	bd70      	pop	{r4, r5, r6, pc}
 8011a58:	40020000 	.word	0x40020000
 8011a5c:	20002880 	.word	0x20002880
 8011a60:	20001db0 	.word	0x20001db0
 8011a64:	0802ed20 	.word	0x0802ed20
 8011a68:	0802ed30 	.word	0x0802ed30
 8011a6c:	00000000 	.word	0x00000000

08011a70 <Vector88>:
	servo_irq();
	CH_IRQ_EPILOGUE();
}
#endif

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
 8011a70:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
 8011a72:	f240 4107 	movw	r1, #1031	; 0x407
 8011a76:	4804      	ldr	r0, [pc, #16]	; (8011a88 <Vector88+0x18>)
 8011a78:	f012 fcea 	bl	8024450 <ADC_ClearITPendingBit>
	mc_interface_adc_inj_int_handler();
 8011a7c:	f00b f918 	bl	801ccb0 <mc_interface_adc_inj_int_handler>
	CH_IRQ_EPILOGUE();
}
 8011a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	CH_IRQ_EPILOGUE();
 8011a84:	f7fc bc64 	b.w	800e350 <_port_irq_epilogue>
 8011a88:	40012000 	.word	0x40012000
 8011a8c:	00000000 	.word	0x00000000

08011a90 <VectorE0>:

CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8011a90:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8011a92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011a96:	f012 fe1b 	bl	80246d0 <EXTI_GetITStatus>
 8011a9a:	b900      	cbnz	r0, 8011a9e <VectorE0+0xe>
 8011a9c:	bd08      	pop	{r3, pc}
		encoder_reset();
 8011a9e:	f009 f95f 	bl	801ad60 <encoder_reset>

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8011aa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
	}
}
 8011aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8011aaa:	f012 be21 	b.w	80246f0 <EXTI_ClearITPendingBit>
 8011aae:	bf00      	nop

08011ab0 <VectorB8>:

CH_IRQ_HANDLER(HW_ENC_TIM_ISR_VEC) {
 8011ab0:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(HW_ENC_TIM, TIM_IT_Update) != RESET) {
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	4806      	ldr	r0, [pc, #24]	; (8011ad0 <VectorB8+0x20>)
 8011ab6:	f013 fa73 	bl	8024fa0 <TIM_GetITStatus>
 8011aba:	b900      	cbnz	r0, 8011abe <VectorB8+0xe>
 8011abc:	bd08      	pop	{r3, pc}
		encoder_tim_isr();
 8011abe:	f009 f98f 	bl	801ade0 <encoder_tim_isr>

		// Clear the IT pending bit
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	4802      	ldr	r0, [pc, #8]	; (8011ad0 <VectorB8+0x20>)
	}
}
 8011ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
 8011aca:	f013 ba79 	b.w	8024fc0 <TIM_ClearITPendingBit>
 8011ace:	bf00      	nop
 8011ad0:	40000800 	.word	0x40000800
	...

08011ae0 <VectorF8>:

CH_IRQ_HANDLER(TIM8_CC_IRQHandler) {
 8011ae0:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM8, TIM_IT_CC1) != RESET) {
 8011ae2:	2102      	movs	r1, #2
 8011ae4:	4806      	ldr	r0, [pc, #24]	; (8011b00 <VectorF8+0x20>)
 8011ae6:	f013 fa5b 	bl	8024fa0 <TIM_GetITStatus>
 8011aea:	b900      	cbnz	r0, 8011aee <VectorF8+0xe>
 8011aec:	bd08      	pop	{r3, pc}
		mcpwm_foc_tim_sample_int_handler();
 8011aee:	f00d f997 	bl	801ee20 <mcpwm_foc_tim_sample_int_handler>

		// Clear the IT pending bit
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
 8011af2:	2102      	movs	r1, #2
 8011af4:	4802      	ldr	r0, [pc, #8]	; (8011b00 <VectorF8+0x20>)
	}
}
 8011af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
 8011afa:	f013 ba61 	b.w	8024fc0 <TIM_ClearITPendingBit>
 8011afe:	bf00      	nop
 8011b00:	40010400 	.word	0x40010400
	...

08011b10 <buffer_append_int16>:
#include "buffer.h"
#include <math.h>
#include <stdbool.h>

void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
 8011b10:	6813      	ldr	r3, [r2, #0]
void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t *index) {
 8011b12:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 8;
 8011b14:	1c5d      	adds	r5, r3, #1
 8011b16:	120c      	asrs	r4, r1, #8
 8011b18:	6015      	str	r5, [r2, #0]
 8011b1a:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8011b1c:	6813      	ldr	r3, [r2, #0]
 8011b1e:	1c5c      	adds	r4, r3, #1
 8011b20:	6014      	str	r4, [r2, #0]
 8011b22:	54c1      	strb	r1, [r0, r3]
}
 8011b24:	bc30      	pop	{r4, r5}
 8011b26:	4770      	bx	lr
	...

08011b30 <buffer_append_uint16>:

void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
 8011b30:	6813      	ldr	r3, [r2, #0]
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
 8011b32:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 8;
 8011b34:	1c5d      	adds	r5, r3, #1
 8011b36:	0a0c      	lsrs	r4, r1, #8
 8011b38:	6015      	str	r5, [r2, #0]
 8011b3a:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8011b3c:	6813      	ldr	r3, [r2, #0]
 8011b3e:	1c5c      	adds	r4, r3, #1
 8011b40:	6014      	str	r4, [r2, #0]
 8011b42:	54c1      	strb	r1, [r0, r3]
}
 8011b44:	bc30      	pop	{r4, r5}
 8011b46:	4770      	bx	lr
	...

08011b50 <buffer_append_int32>:

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
	buffer[(*index)++] = number >> 24;
 8011b50:	6813      	ldr	r3, [r2, #0]
void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8011b52:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 24;
 8011b54:	1c5d      	adds	r5, r3, #1
 8011b56:	160c      	asrs	r4, r1, #24
 8011b58:	6015      	str	r5, [r2, #0]
 8011b5a:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 8011b5c:	6813      	ldr	r3, [r2, #0]
 8011b5e:	140c      	asrs	r4, r1, #16
 8011b60:	1c5d      	adds	r5, r3, #1
 8011b62:	6015      	str	r5, [r2, #0]
 8011b64:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 8011b66:	6813      	ldr	r3, [r2, #0]
 8011b68:	120c      	asrs	r4, r1, #8
 8011b6a:	1c5d      	adds	r5, r3, #1
 8011b6c:	6015      	str	r5, [r2, #0]
 8011b6e:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8011b70:	6813      	ldr	r3, [r2, #0]
 8011b72:	1c5c      	adds	r4, r3, #1
 8011b74:	6014      	str	r4, [r2, #0]
 8011b76:	54c1      	strb	r1, [r0, r3]
}
 8011b78:	bc30      	pop	{r4, r5}
 8011b7a:	4770      	bx	lr
 8011b7c:	0000      	movs	r0, r0
	...

08011b80 <buffer_append_uint32>:

void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
	buffer[(*index)++] = number >> 24;
 8011b80:	6813      	ldr	r3, [r2, #0]
void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
 8011b82:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 24;
 8011b84:	1c5d      	adds	r5, r3, #1
 8011b86:	0e0c      	lsrs	r4, r1, #24
 8011b88:	6015      	str	r5, [r2, #0]
 8011b8a:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 8011b8c:	6813      	ldr	r3, [r2, #0]
 8011b8e:	0c0c      	lsrs	r4, r1, #16
 8011b90:	1c5d      	adds	r5, r3, #1
 8011b92:	6015      	str	r5, [r2, #0]
 8011b94:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 8011b96:	6813      	ldr	r3, [r2, #0]
 8011b98:	0a0c      	lsrs	r4, r1, #8
 8011b9a:	1c5d      	adds	r5, r3, #1
 8011b9c:	6015      	str	r5, [r2, #0]
 8011b9e:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8011ba0:	6813      	ldr	r3, [r2, #0]
 8011ba2:	1c5c      	adds	r4, r3, #1
 8011ba4:	6014      	str	r4, [r2, #0]
 8011ba6:	54c1      	strb	r1, [r0, r3]
}
 8011ba8:	bc30      	pop	{r4, r5}
 8011baa:	4770      	bx	lr
 8011bac:	0000      	movs	r0, r0
	...

08011bb0 <buffer_append_float16>:

void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 8011bb0:	b430      	push	{r4, r5}
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 8011bb2:	ee60 0a20 	vmul.f32	s1, s0, s1
void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 8011bb6:	b082      	sub	sp, #8
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 8011bb8:	eefd 7ae0 	vcvt.s32.f32	s15, s1
	buffer[(*index)++] = number >> 8;
 8011bbc:	680a      	ldr	r2, [r1, #0]
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 8011bbe:	edcd 7a01 	vstr	s15, [sp, #4]
 8011bc2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
	buffer[(*index)++] = number >> 8;
 8011bc6:	1c55      	adds	r5, r2, #1
 8011bc8:	121c      	asrs	r4, r3, #8
 8011bca:	600d      	str	r5, [r1, #0]
 8011bcc:	5484      	strb	r4, [r0, r2]
	buffer[(*index)++] = number;
 8011bce:	680a      	ldr	r2, [r1, #0]
 8011bd0:	1c54      	adds	r4, r2, #1
 8011bd2:	600c      	str	r4, [r1, #0]
 8011bd4:	5483      	strb	r3, [r0, r2]
}
 8011bd6:	b002      	add	sp, #8
 8011bd8:	bc30      	pop	{r4, r5}
 8011bda:	4770      	bx	lr
 8011bdc:	0000      	movs	r0, r0
	...

08011be0 <buffer_append_float32>:

void buffer_append_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
    buffer_append_int32(buffer, (int32_t)(number * scale), index);
 8011be0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011be4:	460a      	mov	r2, r1
 8011be6:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8011bea:	ee17 1a90 	vmov	r1, s15
 8011bee:	f7ff bfaf 	b.w	8011b50 <buffer_append_int32>
 8011bf2:	bf00      	nop
	...

08011c00 <buffer_append_float32_auto>:
 * 8388608.0 is 2^23, which scales the result to fit within 23 bits if sig_abs < 1.0.
 *
 * This should be a relatively fast and efficient way to serialize
 * floating point numbers in a fully defined manner.
 */
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	b082      	sub	sp, #8
	int e = 0;
 8011c04:	ab02      	add	r3, sp, #8
 8011c06:	2400      	movs	r4, #0
 8011c08:	f843 4d04 	str.w	r4, [r3, #-4]!
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 8011c0c:	4605      	mov	r5, r0
	float sig = frexpf(number, &e);
 8011c0e:	4618      	mov	r0, r3
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 8011c10:	460e      	mov	r6, r1
	float sig = frexpf(number, &e);
 8011c12:	f013 fb25 	bl	8025260 <frexpf>
	float sig_abs = fabsf(sig);
	uint32_t sig_i = 0;

	if (sig_abs >= 0.5) {
 8011c16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	float sig_abs = fabsf(sig);
 8011c1a:	eef0 7ac0 	vabs.f32	s15, s0
	if (sig_abs >= 0.5) {
 8011c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c26:	da13      	bge.n	8011c50 <buffer_append_float32_auto+0x50>
 8011c28:	9b01      	ldr	r3, [sp, #4]
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
		e += 126;
	}

	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 8011c2a:	05db      	lsls	r3, r3, #23
 8011c2c:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
	if (sig < 0) {
 8011c30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 8011c34:	ea43 0104 	orr.w	r1, r3, r4
	if (sig < 0) {
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		res |= 1 << 31;
 8011c3c:	bf48      	it	mi
 8011c3e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
	}

	buffer_append_uint32(buffer, res, index);
 8011c42:	4632      	mov	r2, r6
 8011c44:	4628      	mov	r0, r5
}
 8011c46:	b002      	add	sp, #8
 8011c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	buffer_append_uint32(buffer, res, index);
 8011c4c:	f7ff bf98 	b.w	8011b80 <buffer_append_uint32>
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 8011c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c54:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8011c74 <buffer_append_float32_auto+0x74>
		e += 126;
 8011c58:	9b01      	ldr	r3, [sp, #4]
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 8011c5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
		e += 126;
 8011c5e:	337e      	adds	r3, #126	; 0x7e
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 8011c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c68:	ee17 2a90 	vmov	r2, s15
 8011c6c:	f3c2 0416 	ubfx	r4, r2, #0, #23
 8011c70:	e7db      	b.n	8011c2a <buffer_append_float32_auto+0x2a>
 8011c72:	bf00      	nop
 8011c74:	4b000000 	.word	0x4b000000
	...

08011c80 <buffer_get_int16>:

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8011c80:	b410      	push	{r4}
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8011c82:	680b      	ldr	r3, [r1, #0]
					((uint16_t) buffer[*index + 1]);
 8011c84:	18c4      	adds	r4, r0, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8011c86:	5cc2      	ldrb	r2, [r0, r3]
					((uint16_t) buffer[*index + 1]);
 8011c88:	7860      	ldrb	r0, [r4, #1]
	*index += 2;
	return res;
}
 8011c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*index += 2;
 8011c8e:	3302      	adds	r3, #2
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8011c90:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
}
 8011c94:	b200      	sxth	r0, r0
	*index += 2;
 8011c96:	600b      	str	r3, [r1, #0]
}
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	0000      	movs	r0, r0
	...

08011ca0 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8011ca0:	680b      	ldr	r3, [r1, #0]
					((uint16_t) buffer[*index + 1]);
 8011ca2:	18c2      	adds	r2, r0, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8011ca4:	5cc0      	ldrb	r0, [r0, r3]
					((uint16_t) buffer[*index + 1]);
 8011ca6:	7852      	ldrb	r2, [r2, #1]
	*index += 2;
 8011ca8:	3302      	adds	r3, #2
 8011caa:	600b      	str	r3, [r1, #0]
	return res;
}
 8011cac:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
	...

08011cc0 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8011cc0:	b470      	push	{r4, r5, r6}
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8011cc2:	680a      	ldr	r2, [r1, #0]
					((uint32_t) buffer[*index + 1]) << 16 |
					((uint32_t) buffer[*index + 2]) << 8 |
					((uint32_t) buffer[*index + 3]);
 8011cc4:	1884      	adds	r4, r0, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8011cc6:	5c86      	ldrb	r6, [r0, r2]
					((uint32_t) buffer[*index + 3]);
 8011cc8:	78e3      	ldrb	r3, [r4, #3]
					((uint32_t) buffer[*index + 1]) << 16 |
 8011cca:	7865      	ldrb	r5, [r4, #1]
					((uint32_t) buffer[*index + 2]) << 8 |
 8011ccc:	78a0      	ldrb	r0, [r4, #2]
 8011cce:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8011cd2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
	*index += 4;
 8011cd6:	3204      	adds	r2, #4
	return res;
}
 8011cd8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	*index += 4;
 8011cdc:	600a      	str	r2, [r1, #0]
}
 8011cde:	bc70      	pop	{r4, r5, r6}
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
	...

08011cf0 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8011cf0:	b470      	push	{r4, r5, r6}
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8011cf2:	680a      	ldr	r2, [r1, #0]
					((uint32_t) buffer[*index + 1]) << 16 |
					((uint32_t) buffer[*index + 2]) << 8 |
					((uint32_t) buffer[*index + 3]);
 8011cf4:	1884      	adds	r4, r0, r2
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8011cf6:	5c86      	ldrb	r6, [r0, r2]
					((uint32_t) buffer[*index + 3]);
 8011cf8:	78e3      	ldrb	r3, [r4, #3]
					((uint32_t) buffer[*index + 1]) << 16 |
 8011cfa:	7865      	ldrb	r5, [r4, #1]
					((uint32_t) buffer[*index + 2]) << 8 |
 8011cfc:	78a0      	ldrb	r0, [r4, #2]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8011cfe:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8011d02:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
	*index += 4;
 8011d06:	3204      	adds	r2, #4
	return res;
}
 8011d08:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	*index += 4;
 8011d0c:	600a      	str	r2, [r1, #0]
}
 8011d0e:	bc70      	pop	{r4, r5, r6}
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop
	...

08011d20 <buffer_get_float32>:

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
    return (float)buffer_get_int16(buffer, index) / scale;
}

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 8011d20:	b508      	push	{r3, lr}
    return (float)buffer_get_int32(buffer, index) / scale;
 8011d22:	f7ff ffcd 	bl	8011cc0 <buffer_get_int32>
 8011d26:	ee07 0a90 	vmov	s15, r0
 8011d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8011d2e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011d32:	bd08      	pop	{r3, pc}
	...

08011d40 <buffer_get_float32_auto>:

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 8011d40:	b508      	push	{r3, lr}
	uint32_t res = buffer_get_uint32(buffer, index);
 8011d42:	f7ff ffd5 	bl	8011cf0 <buffer_get_uint32>

	int e = (res >> 23) & 0xFF;
 8011d46:	f3c0 53c7 	ubfx	r3, r0, #23, #8
	uint32_t sig_i = res & 0x7FFFFF;
 8011d4a:	f3c0 0216 	ubfx	r2, r0, #0, #23
	bool neg = res & (1 << 31);

	float sig = 0.0;
	if (e != 0 || sig_i != 0) {
 8011d4e:	b903      	cbnz	r3, 8011d52 <buffer_get_float32_auto+0x12>
 8011d50:	b19a      	cbz	r2, 8011d7a <buffer_get_float32_auto+0x3a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8011d52:	ee07 2a90 	vmov	s15, r2
 8011d56:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8011d80 <buffer_get_float32_auto+0x40>
 8011d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d5e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011d62:	eea7 0a87 	vfma.f32	s0, s15, s14
		e -= 126;
 8011d66:	3b7e      	subs	r3, #126	; 0x7e
	}

	if (neg) {
 8011d68:	2800      	cmp	r0, #0
		sig = -sig;
 8011d6a:	bfb8      	it	lt
 8011d6c:	eeb1 0a40 	vneglt.f32	s0, s0
	}

	return ldexpf(sig, e);
 8011d70:	4618      	mov	r0, r3
}
 8011d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return ldexpf(sig, e);
 8011d76:	f013 baa3 	b.w	80252c0 <ldexpf>
	float sig = 0.0;
 8011d7a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011d84 <buffer_get_float32_auto+0x44>
 8011d7e:	e7f3      	b.n	8011d68 <buffer_get_float32_auto+0x28>
 8011d80:	33800000 	.word	0x33800000
	...

08011d90 <send_packet>:
	packet_send_packet(data, len, PACKET_HANDLER);
	chMtxUnlock(&send_mutex);
}

static void send_packet(unsigned char *buffer, unsigned int len) {
	chSequentialStreamWrite(&SDU1, buffer, len);
 8011d90:	4b05      	ldr	r3, [pc, #20]	; (8011da8 <send_packet+0x18>)
static void send_packet(unsigned char *buffer, unsigned int len) {
 8011d92:	b410      	push	{r4}
	chSequentialStreamWrite(&SDU1, buffer, len);
 8011d94:	681c      	ldr	r4, [r3, #0]
 8011d96:	6824      	ldr	r4, [r4, #0]
 8011d98:	460a      	mov	r2, r1
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	4623      	mov	r3, r4
}
 8011da0:	f85d 4b04 	ldr.w	r4, [sp], #4
	chSequentialStreamWrite(&SDU1, buffer, len);
 8011da4:	4718      	bx	r3
 8011da6:	bf00      	nop
 8011da8:	20002880 	.word	0x20002880
 8011dac:	00000000 	.word	0x00000000

08011db0 <serial_process_thread>:
 8011db0:	4b10      	ldr	r3, [pc, #64]	; (8011df4 <serial_process_thread+0x44>)
	process_tp = chThdGetSelfX();
 8011db2:	4a11      	ldr	r2, [pc, #68]	; (8011df8 <serial_process_thread+0x48>)
 8011db4:	699b      	ldr	r3, [r3, #24]
 8011db6:	4911      	ldr	r1, [pc, #68]	; (8011dfc <serial_process_thread+0x4c>)
 8011db8:	4c11      	ldr	r4, [pc, #68]	; (8011e00 <serial_process_thread+0x50>)
 8011dba:	4e12      	ldr	r6, [pc, #72]	; (8011e04 <serial_process_thread+0x54>)
static THD_FUNCTION(serial_process_thread, arg) {
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	4f12      	ldr	r7, [pc, #72]	; (8011e08 <serial_process_thread+0x58>)
 8011dc0:	6199      	str	r1, [r3, #24]
	process_tp = chThdGetSelfX();
 8011dc2:	6013      	str	r3, [r2, #0]
			packet_process_byte(serial_rx_buffer[serial_rx_read_pos++], PACKET_HANDLER);
 8011dc4:	f04f 0800 	mov.w	r8, #0
		chEvtWaitAny((eventmask_t) 1);
 8011dc8:	2001      	movs	r0, #1
 8011dca:	f7fc f869 	bl	800dea0 <chEvtWaitAny>
 8011dce:	6823      	ldr	r3, [r4, #0]
		while (serial_rx_read_pos != serial_rx_write_pos) {
 8011dd0:	6832      	ldr	r2, [r6, #0]
 8011dd2:	429a      	cmp	r2, r3
			packet_process_byte(serial_rx_buffer[serial_rx_read_pos++], PACKET_HANDLER);
 8011dd4:	f103 0501 	add.w	r5, r3, #1
 8011dd8:	f04f 0100 	mov.w	r1, #0
		while (serial_rx_read_pos != serial_rx_write_pos) {
 8011ddc:	d0f4      	beq.n	8011dc8 <serial_process_thread+0x18>
			packet_process_byte(serial_rx_buffer[serial_rx_read_pos++], PACKET_HANDLER);
 8011dde:	5cf8      	ldrb	r0, [r7, r3]
 8011de0:	6025      	str	r5, [r4, #0]
 8011de2:	f004 fa35 	bl	8016250 <packet_process_byte>
			if (serial_rx_read_pos == SERIAL_RX_BUFFER_SIZE) {
 8011de6:	6823      	ldr	r3, [r4, #0]
 8011de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011dec:	d1f0      	bne.n	8011dd0 <serial_process_thread+0x20>
				serial_rx_read_pos = 0;
 8011dee:	f8c4 8000 	str.w	r8, [r4]
 8011df2:	e7ec      	b.n	8011dce <serial_process_thread+0x1e>
 8011df4:	20001a40 	.word	0x20001a40
 8011df8:	20002b14 	.word	0x20002b14
 8011dfc:	0802ee80 	.word	0x0802ee80
 8011e00:	20004858 	.word	0x20004858
 8011e04:	2000485c 	.word	0x2000485c
 8011e08:	20004058 	.word	0x20004058
 8011e0c:	00000000 	.word	0x00000000

08011e10 <serial_read_thread>:
static THD_FUNCTION(serial_read_thread, arg) {
 8011e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e14:	4b16      	ldr	r3, [pc, #88]	; (8011e70 <serial_read_thread+0x60>)
 8011e16:	4e17      	ldr	r6, [pc, #92]	; (8011e74 <serial_read_thread+0x64>)
 8011e18:	699b      	ldr	r3, [r3, #24]
 8011e1a:	4a17      	ldr	r2, [pc, #92]	; (8011e78 <serial_read_thread+0x68>)
 8011e1c:	4d17      	ldr	r5, [pc, #92]	; (8011e7c <serial_read_thread+0x6c>)
 8011e1e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8011e80 <serial_read_thread+0x70>
 8011e22:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011e84 <serial_read_thread+0x74>
 8011e26:	619a      	str	r2, [r3, #24]
 8011e28:	b0a1      	sub	sp, #132	; 0x84
		len = chSequentialStreamRead(&SDU1, (uint8_t*) buffer, 1);
 8011e2a:	4637      	mov	r7, r6
 8011e2c:	6833      	ldr	r3, [r6, #0]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	4669      	mov	r1, sp
 8011e34:	4638      	mov	r0, r7
 8011e36:	4798      	blx	r3
		for (i = 0;i < len;i++) {
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	ddf7      	ble.n	8011e2c <serial_read_thread+0x1c>
 8011e3c:	682b      	ldr	r3, [r5, #0]
 8011e3e:	f10d 34ff 	add.w	r4, sp, #4294967295
 8011e42:	2200      	movs	r2, #0
			serial_rx_buffer[serial_rx_write_pos++] = buffer[i];
 8011e44:	1c59      	adds	r1, r3, #1
			if (serial_rx_write_pos == SERIAL_RX_BUFFER_SIZE) {
 8011e46:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
		for (i = 0;i < len;i++) {
 8011e4a:	f102 0201 	add.w	r2, r2, #1
			serial_rx_buffer[serial_rx_write_pos++] = buffer[i];
 8011e4e:	f814 ef01 	ldrb.w	lr, [r4, #1]!
 8011e52:	f809 e003 	strb.w	lr, [r9, r3]
			if (serial_rx_write_pos == SERIAL_RX_BUFFER_SIZE) {
 8011e56:	bf14      	ite	ne
 8011e58:	460b      	movne	r3, r1
 8011e5a:	2300      	moveq	r3, #0
		for (i = 0;i < len;i++) {
 8011e5c:	4290      	cmp	r0, r2
 8011e5e:	dcf1      	bgt.n	8011e44 <serial_read_thread+0x34>
			chEvtSignal(process_tp, (eventmask_t) 1);
 8011e60:	2101      	movs	r1, #1
 8011e62:	f8d8 0000 	ldr.w	r0, [r8]
 8011e66:	602b      	str	r3, [r5, #0]
 8011e68:	f7fc f80a 	bl	800de80 <chEvtSignal>
 8011e6c:	e7de      	b.n	8011e2c <serial_read_thread+0x1c>
 8011e6e:	bf00      	nop
 8011e70:	20001a40 	.word	0x20001a40
 8011e74:	20002880 	.word	0x20002880
 8011e78:	0802eea0 	.word	0x0802eea0
 8011e7c:	2000485c 	.word	0x2000485c
 8011e80:	20004058 	.word	0x20004058
 8011e84:	20002b14 	.word	0x20002b14
	...

08011e90 <process_packet>:
static void process_packet(unsigned char *data, unsigned int len) {
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	4604      	mov	r4, r0
 8011e94:	460d      	mov	r5, r1
	commands_set_send_func(send_packet_wrapper);
 8011e96:	4804      	ldr	r0, [pc, #16]	; (8011ea8 <process_packet+0x18>)
 8011e98:	f006 fc0a 	bl	80186b0 <commands_set_send_func>
	commands_process_packet(data, len);
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	4620      	mov	r0, r4
}
 8011ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	commands_process_packet(data, len);
 8011ea4:	f006 bdcc 	b.w	8018a40 <commands_process_packet>
 8011ea8:	08011eb1 	.word	0x08011eb1
 8011eac:	00000000 	.word	0x00000000

08011eb0 <send_packet_wrapper>:
static void send_packet_wrapper(unsigned char *data, unsigned int len) {
 8011eb0:	b570      	push	{r4, r5, r6, lr}
	chMtxLock(&send_mutex);
 8011eb2:	4c08      	ldr	r4, [pc, #32]	; (8011ed4 <send_packet_wrapper+0x24>)
static void send_packet_wrapper(unsigned char *data, unsigned int len) {
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	460e      	mov	r6, r1
	chMtxLock(&send_mutex);
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f7fb ff39 	bl	800dd30 <chMtxLock>
	packet_send_packet(data, len, PACKET_HANDLER);
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f004 f95c 	bl	8016180 <packet_send_packet>
	chMtxUnlock(&send_mutex);
 8011ec8:	4620      	mov	r0, r4
}
 8011eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chMtxUnlock(&send_mutex);
 8011ece:	f7fb bf3f 	b.w	800dd50 <chMtxUnlock>
 8011ed2:	bf00      	nop
 8011ed4:	20002b18 	.word	0x20002b18
	...

08011ee0 <comm_usb_init>:

void comm_usb_init(void) {
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	b082      	sub	sp, #8
	comm_usb_serial_init();
 8011ee4:	f7ff fd8c 	bl	8011a00 <comm_usb_serial_init>
	packet_init(send_packet, process_packet, PACKET_HANDLER);
 8011ee8:	2200      	movs	r2, #0
 8011eea:	490d      	ldr	r1, [pc, #52]	; (8011f20 <comm_usb_init+0x40>)
 8011eec:	480d      	ldr	r0, [pc, #52]	; (8011f24 <comm_usb_init+0x44>)
 8011eee:	f004 f937 	bl	8016160 <packet_init>

	chMtxObjectInit(&send_mutex);

	// Threads
	chThdCreateStatic(serial_read_thread_wa, sizeof(serial_read_thread_wa), NORMALPRIO, serial_read_thread, NULL);
 8011ef2:	2400      	movs	r4, #0
	chMtxObjectInit(&send_mutex);
 8011ef4:	480c      	ldr	r0, [pc, #48]	; (8011f28 <comm_usb_init+0x48>)
 8011ef6:	f7fb feab 	bl	800dc50 <chMtxObjectInit>
	chThdCreateStatic(serial_read_thread_wa, sizeof(serial_read_thread_wa), NORMALPRIO, serial_read_thread, NULL);
 8011efa:	9400      	str	r4, [sp, #0]
 8011efc:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <comm_usb_init+0x4c>)
 8011efe:	480c      	ldr	r0, [pc, #48]	; (8011f30 <comm_usb_init+0x50>)
 8011f00:	2240      	movs	r2, #64	; 0x40
 8011f02:	f44f 7166 	mov.w	r1, #920	; 0x398
 8011f06:	f7fb fd33 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(serial_process_thread_wa, sizeof(serial_process_thread_wa), NORMALPRIO, serial_process_thread, NULL);
 8011f0a:	9400      	str	r4, [sp, #0]
 8011f0c:	4b09      	ldr	r3, [pc, #36]	; (8011f34 <comm_usb_init+0x54>)
 8011f0e:	480a      	ldr	r0, [pc, #40]	; (8011f38 <comm_usb_init+0x58>)
 8011f10:	2240      	movs	r2, #64	; 0x40
 8011f12:	f241 1198 	movw	r1, #4504	; 0x1198
 8011f16:	f7fb fd2b 	bl	800d970 <chThdCreateStatic>
}
 8011f1a:	b002      	add	sp, #8
 8011f1c:	bd10      	pop	{r4, pc}
 8011f1e:	bf00      	nop
 8011f20:	08011e91 	.word	0x08011e91
 8011f24:	08011d91 	.word	0x08011d91
 8011f28:	20002b18 	.word	0x20002b18
 8011f2c:	08011e11 	.word	0x08011e11
 8011f30:	20003cc0 	.word	0x20003cc0
 8011f34:	08011db1 	.word	0x08011db1
 8011f38:	20002b28 	.word	0x20002b28
 8011f3c:	00000000 	.word	0x00000000

08011f40 <crc16>:
 8011f40:	b191      	cbz	r1, 8011f68 <crc16+0x28>
 8011f42:	b410      	push	{r4}
 8011f44:	4c09      	ldr	r4, [pc, #36]	; (8011f6c <crc16+0x2c>)
 8011f46:	1842      	adds	r2, r0, r1
 8011f48:	2100      	movs	r1, #0
 8011f4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011f4e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011f52:	4290      	cmp	r0, r2
 8011f54:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8011f58:	ea83 2101 	eor.w	r1, r3, r1, lsl #8
 8011f5c:	b289      	uxth	r1, r1
 8011f5e:	d1f4      	bne.n	8011f4a <crc16+0xa>
 8011f60:	4608      	mov	r0, r1
 8011f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f66:	4770      	bx	lr
 8011f68:	4608      	mov	r0, r1
 8011f6a:	4770      	bx	lr
 8011f6c:	0802eeb0 	.word	0x0802eeb0

08011f70 <filter_fft>:
#include  "digital_filter.h"
#include  <math.h>
#include  <stdint.h>

// Found at http://paulbourke.net/miscellaneous//dft/
void filter_fft(int dir, int m, float *real, float *imag) {
 8011f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f74:	ed2d 8b06 	vpush	{d8-d10}
	long n,i,i1,j,k,i2,l,l1,l2;
	float c1,c2,tx,ty,t1,t2,u1,u2,z;

	// Calculate the number of points
	n = 1 << m;
 8011f78:	2601      	movs	r6, #1
void filter_fft(int dir, int m, float *real, float *imag) {
 8011f7a:	b085      	sub	sp, #20
	n = 1 << m;
 8011f7c:	408e      	lsls	r6, r1

	// Do the bit reversal
	i2 = n >> 1;
	j = 0;
	for (i=0;i<n-1;i++) {
 8011f7e:	2e01      	cmp	r6, #1
void filter_fft(int dir, int m, float *real, float *imag) {
 8011f80:	9101      	str	r1, [sp, #4]
 8011f82:	9002      	str	r0, [sp, #8]
 8011f84:	9203      	str	r2, [sp, #12]
 8011f86:	9300      	str	r3, [sp, #0]
	for (i=0;i<n-1;i++) {
 8011f88:	dd30      	ble.n	8011fec <filter_fft+0x7c>
 8011f8a:	4610      	mov	r0, r2
 8011f8c:	461f      	mov	r7, r3
 8011f8e:	2100      	movs	r1, #0
 8011f90:	4603      	mov	r3, r0
 8011f92:	1d04      	adds	r4, r0, #4
 8011f94:	f8dd 9000 	ldr.w	r9, [sp]
 8011f98:	4638      	mov	r0, r7
 8011f9a:	1075      	asrs	r5, r6, #1
 8011f9c:	460a      	mov	r2, r1
 8011f9e:	3004      	adds	r0, #4
 8011fa0:	1e77      	subs	r7, r6, #1
 8011fa2:	4698      	mov	r8, r3
			imag[i] = imag[j];
			real[j] = tx;
			imag[j] = ty;
		}
		k = i2;
		while (k <= j) {
 8011fa4:	4295      	cmp	r5, r2
 8011fa6:	462b      	mov	r3, r5
 8011fa8:	dc03      	bgt.n	8011fb2 <filter_fft+0x42>
			j -= k;
 8011faa:	1ad2      	subs	r2, r2, r3
			k >>= 1;
 8011fac:	105b      	asrs	r3, r3, #1
		while (k <= j) {
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	dafb      	bge.n	8011faa <filter_fft+0x3a>
	for (i=0;i<n-1;i++) {
 8011fb2:	3101      	adds	r1, #1
 8011fb4:	42b9      	cmp	r1, r7
		}
		j += k;
 8011fb6:	441a      	add	r2, r3
	for (i=0;i<n-1;i++) {
 8011fb8:	d018      	beq.n	8011fec <filter_fft+0x7c>
		if (i < j) {
 8011fba:	428a      	cmp	r2, r1
 8011fbc:	dd13      	ble.n	8011fe6 <filter_fft+0x76>
			real[i] = real[j];
 8011fbe:	0093      	lsls	r3, r2, #2
 8011fc0:	eb08 0e03 	add.w	lr, r8, r3
			imag[i] = imag[j];
 8011fc4:	444b      	add	r3, r9
			real[i] = real[j];
 8011fc6:	f8de b000 	ldr.w	fp, [lr]
			tx = real[i];
 8011fca:	f8d4 a000 	ldr.w	sl, [r4]
			ty = imag[i];
 8011fce:	f8d0 c000 	ldr.w	ip, [r0]
			real[i] = real[j];
 8011fd2:	f8c4 b000 	str.w	fp, [r4]
			imag[i] = imag[j];
 8011fd6:	f8d3 b000 	ldr.w	fp, [r3]
 8011fda:	f8c0 b000 	str.w	fp, [r0]
			real[j] = tx;
 8011fde:	f8ce a000 	str.w	sl, [lr]
			imag[j] = ty;
 8011fe2:	f8c3 c000 	str.w	ip, [r3]
 8011fe6:	3404      	adds	r4, #4
 8011fe8:	3004      	adds	r0, #4
 8011fea:	e7db      	b.n	8011fa4 <filter_fft+0x34>

	// Compute the FFT
	c1 = -1.0;
	c2 = 0.0;
	l2 = 1;
	for (l=0;l<m;l++) {
 8011fec:	9b01      	ldr	r3, [sp, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f340 8094 	ble.w	801211c <filter_fft+0x1ac>
 8011ff4:	ed9f aa5a 	vldr	s20, [pc, #360]	; 8012160 <filter_fft+0x1f0>
 8011ff8:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
		l1 = l2;
		l2 <<= 1;
		u1 = 1.0;
		u2 = 0.0;
		for (j=0;j < l1;j++) {
 8011ffc:	eeb0 9a4a 	vmov.f32	s18, s20
	for (l=0;l<m;l++) {
 8012000:	f04f 0b01 	mov.w	fp, #1
 8012004:	2700      	movs	r7, #0
		for (j=0;j < l1;j++) {
 8012006:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			}
			z =  u1 * c1 - u2 * c2;
			u2 = u1 * c2 + u2 * c1;
			u1 = z;
		}
		c2 = sqrt((1.0 - c1) / 2.0);
 801200a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
		for (j=0;j < l1;j++) {
 801200e:	f1bb 0f00 	cmp.w	fp, #0
		l2 <<= 1;
 8012012:	ea4f 084b 	mov.w	r8, fp, lsl #1
		for (j=0;j < l1;j++) {
 8012016:	dd53      	ble.n	80120c0 <filter_fft+0x150>
 8012018:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801201c:	f8dd c000 	ldr.w	ip, [sp]
 8012020:	eeb0 5a49 	vmov.f32	s10, s18
 8012024:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8012028:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801202c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012030:	f04f 0e00 	mov.w	lr, #0
			for (i=j;i < n;i += l2) {
 8012034:	4576      	cmp	r6, lr
 8012036:	dd31      	ble.n	801209c <filter_fft+0x12c>
 8012038:	eb09 000a 	add.w	r0, r9, sl
 801203c:	eb0c 010a 	add.w	r1, ip, sl
 8012040:	4662      	mov	r2, ip
 8012042:	464b      	mov	r3, r9
 8012044:	4675      	mov	r5, lr
				t1 = u1 * real[i1] - u2 * imag[i1];
 8012046:	ed91 6a00 	vldr	s12, [r1]
 801204a:	edd0 5a00 	vldr	s11, [r0]
				real[i1] = real[i] - t1;
 801204e:	edd3 6a00 	vldr	s13, [r3]
				t1 = u1 * real[i1] - u2 * imag[i1];
 8012052:	ee25 7a46 	vnmul.f32	s14, s10, s12
				t2 = u1 * imag[i1] + u2 * real[i1];
 8012056:	ee65 7a85 	vmul.f32	s15, s11, s10
				t1 = u1 * real[i1] - u2 * imag[i1];
 801205a:	eea5 7aa4 	vfma.f32	s14, s11, s9
			for (i=j;i < n;i += l2) {
 801205e:	4445      	add	r5, r8
 8012060:	42ae      	cmp	r6, r5
				t2 = u1 * imag[i1] + u2 * real[i1];
 8012062:	eee6 7a24 	vfma.f32	s15, s12, s9
				real[i1] = real[i] - t1;
 8012066:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801206a:	edc0 6a00 	vstr	s13, [r0]
				imag[i1] = imag[i] - t2;
 801206e:	edd2 6a00 	vldr	s13, [r2]
 8012072:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012076:	4420      	add	r0, r4
 8012078:	edc1 6a00 	vstr	s13, [r1]
				real[i] += t1;
 801207c:	edd3 6a00 	vldr	s13, [r3]
 8012080:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012084:	4421      	add	r1, r4
 8012086:	ed83 7a00 	vstr	s14, [r3]
				imag[i] += t2;
 801208a:	ed92 7a00 	vldr	s14, [r2]
 801208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012092:	4423      	add	r3, r4
 8012094:	edc2 7a00 	vstr	s15, [r2]
 8012098:	4422      	add	r2, r4
			for (i=j;i < n;i += l2) {
 801209a:	dcd4      	bgt.n	8012046 <filter_fft+0xd6>
			z =  u1 * c1 - u2 * c2;
 801209c:	ee65 7a4a 	vnmul.f32	s15, s10, s20
		for (j=0;j < l1;j++) {
 80120a0:	f10e 0e01 	add.w	lr, lr, #1
			u1 = z;
 80120a4:	eee9 7aa4 	vfma.f32	s15, s19, s9
		for (j=0;j < l1;j++) {
 80120a8:	45de      	cmp	lr, fp
 80120aa:	f109 0904 	add.w	r9, r9, #4
			u2 = u1 * c2 + u2 * c1;
 80120ae:	ee29 5a85 	vmul.f32	s10, s19, s10
 80120b2:	f10c 0c04 	add.w	ip, ip, #4
 80120b6:	eeaa 5a24 	vfma.f32	s10, s20, s9
			u1 = z;
 80120ba:	eef0 4a67 	vmov.f32	s9, s15
		for (j=0;j < l1;j++) {
 80120be:	d1b9      	bne.n	8012034 <filter_fft+0xc4>
		c2 = sqrt((1.0 - c1) / 2.0);
 80120c0:	ee78 7ae9 	vsub.f32	s15, s17, s19
 80120c4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80120c8:	ee17 0a90 	vmov	r0, s15
 80120cc:	f7fa f99c 	bl	800c408 <__aeabi_f2d>
 80120d0:	ec41 0b10 	vmov	d0, r0, r1
 80120d4:	f013 fa0c 	bl	80254f0 <sqrt>
 80120d8:	ec51 0b10 	vmov	r0, r1, d0
 80120dc:	f7fa fcc8 	bl	800ca70 <__aeabi_d2f>
		if (dir) {
 80120e0:	9b02      	ldr	r3, [sp, #8]
		c2 = sqrt((1.0 - c1) / 2.0);
 80120e2:	ee0a 0a10 	vmov	s20, r0
		if (dir) {
 80120e6:	b10b      	cbz	r3, 80120ec <filter_fft+0x17c>
			c2 = -c2;
 80120e8:	eeb1 aa4a 	vneg.f32	s20, s20
		}
		c1 = sqrt((1.0 + c1) / 2.0);
 80120ec:	ee79 9aa8 	vadd.f32	s19, s19, s17
	for (l=0;l<m;l++) {
 80120f0:	3701      	adds	r7, #1
		c1 = sqrt((1.0 + c1) / 2.0);
 80120f2:	ee69 7a88 	vmul.f32	s15, s19, s16
		l2 <<= 1;
 80120f6:	46c3      	mov	fp, r8
		c1 = sqrt((1.0 + c1) / 2.0);
 80120f8:	ee17 0a90 	vmov	r0, s15
 80120fc:	f7fa f984 	bl	800c408 <__aeabi_f2d>
 8012100:	ec41 0b10 	vmov	d0, r0, r1
 8012104:	f013 f9f4 	bl	80254f0 <sqrt>
 8012108:	ec51 0b10 	vmov	r0, r1, d0
 801210c:	f7fa fcb0 	bl	800ca70 <__aeabi_d2f>
	for (l=0;l<m;l++) {
 8012110:	9b01      	ldr	r3, [sp, #4]
 8012112:	42bb      	cmp	r3, r7
		c1 = sqrt((1.0 + c1) / 2.0);
 8012114:	ee09 0a90 	vmov	s19, r0
	for (l=0;l<m;l++) {
 8012118:	f47f af79 	bne.w	801200e <filter_fft+0x9e>
	}

	// Scaling for reverse transform
	if (dir) {
 801211c:	9b02      	ldr	r3, [sp, #8]
 801211e:	b1cb      	cbz	r3, 8012154 <filter_fft+0x1e4>
		for (i=0;i < n;i++) {
 8012120:	2e00      	cmp	r6, #0
 8012122:	dd17      	ble.n	8012154 <filter_fft+0x1e4>
 8012124:	9a01      	ldr	r2, [sp, #4]
 8012126:	9b03      	ldr	r3, [sp, #12]
 8012128:	ee07 6a90 	vmov	s15, r6
 801212c:	2104      	movs	r1, #4
 801212e:	4091      	lsls	r1, r2
 8012130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012134:	9a00      	ldr	r2, [sp, #0]
 8012136:	4419      	add	r1, r3
			real[i] /= n;
 8012138:	edd3 6a00 	vldr	s13, [r3]
 801213c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012140:	eca3 7a01 	vstmia	r3!, {s14}
			imag[i] /= n;
 8012144:	edd2 6a00 	vldr	s13, [r2]
 8012148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		for (i=0;i < n;i++) {
 801214c:	4299      	cmp	r1, r3
			imag[i] /= n;
 801214e:	eca2 7a01 	vstmia	r2!, {s14}
		for (i=0;i < n;i++) {
 8012152:	d1f1      	bne.n	8012138 <filter_fft+0x1c8>
		}
	}
}
 8012154:	b005      	add	sp, #20
 8012156:	ecbd 8b06 	vpop	{d8-d10}
 801215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215e:	bf00      	nop
	...

08012170 <filter_hamming>:
		data[i] = r2;
		data[len / 2 + i] = r1;
	}
}

void filter_hamming(float *data, int len) {
 8012170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len % 2 == 0) {
 8012172:	f011 0501 	ands.w	r5, r1, #1
void filter_hamming(float *data, int len) {
 8012176:	ed2d 8b04 	vpush	{d8-d9}
 801217a:	460e      	mov	r6, r1
	if (len % 2 == 0) {
 801217c:	d028      	beq.n	80121d0 <filter_hamming+0x60>
			float val = 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
			data[i] *= val;
			data[len - i - 1] *= val;
		}
	} else {
		for (int i = 0;i < len;i++) {
 801217e:	2900      	cmp	r1, #0
 8012180:	dd23      	ble.n	80121ca <filter_hamming+0x5a>
 8012182:	1e4b      	subs	r3, r1, #1
 8012184:	ee08 3a10 	vmov	s16, r3
			data[i] *= 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 8012188:	eddf 9a2b 	vldr	s19, [pc, #172]	; 8012238 <filter_hamming+0xc8>
 801218c:	ed9f 9a2b 	vldr	s18, [pc, #172]	; 801223c <filter_hamming+0xcc>
 8012190:	eddf 8a2b 	vldr	s17, [pc, #172]	; 8012240 <filter_hamming+0xd0>
 8012194:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8012198:	4604      	mov	r4, r0
		for (int i = 0;i < len;i++) {
 801219a:	2500      	movs	r5, #0
			data[i] *= 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 801219c:	ee07 5a90 	vmov	s15, r5
 80121a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
		for (int i = 0;i < len;i++) {
 80121a4:	3501      	adds	r5, #1
			data[i] *= 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 80121a6:	ee20 0a29 	vmul.f32	s0, s0, s19
 80121aa:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80121ae:	f012 ffc7 	bl	8025140 <cosf>
		for (int i = 0;i < len;i++) {
 80121b2:	42ae      	cmp	r6, r5
			data[i] *= 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 80121b4:	eeb0 7a68 	vmov.f32	s14, s17
 80121b8:	eea0 7a49 	vfms.f32	s14, s0, s18
 80121bc:	edd4 7a00 	vldr	s15, [r4]
 80121c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121c4:	ece4 7a01 	vstmia	r4!, {s15}
		for (int i = 0;i < len;i++) {
 80121c8:	d1e8      	bne.n	801219c <filter_hamming+0x2c>
		}
	}
}
 80121ca:	ecbd 8b04 	vpop	{d8-d9}
 80121ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (int i = 0;i < (len / 2);i++) {
 80121d0:	eb01 77d1 	add.w	r7, r1, r1, lsr #31
 80121d4:	107f      	asrs	r7, r7, #1
 80121d6:	2f00      	cmp	r7, #0
 80121d8:	ddf7      	ble.n	80121ca <filter_hamming+0x5a>
 80121da:	1e4b      	subs	r3, r1, #1
 80121dc:	ee08 3a10 	vmov	s16, r3
			float val = 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 80121e0:	eddf 9a15 	vldr	s19, [pc, #84]	; 8012238 <filter_hamming+0xc8>
 80121e4:	ed9f 9a15 	vldr	s18, [pc, #84]	; 801223c <filter_hamming+0xcc>
 80121e8:	eddf 8a15 	vldr	s17, [pc, #84]	; 8012240 <filter_hamming+0xd0>
 80121ec:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80121f0:	4604      	mov	r4, r0
 80121f2:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 80121f6:	ee07 5a90 	vmov	s15, r5
 80121fa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
		for (int i = 0;i < (len / 2);i++) {
 80121fe:	3501      	adds	r5, #1
			float val = 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 8012200:	ee20 0a29 	vmul.f32	s0, s0, s19
 8012204:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8012208:	f012 ff9a 	bl	8025140 <cosf>
		for (int i = 0;i < (len / 2);i++) {
 801220c:	42bd      	cmp	r5, r7
			float val = 0.54 - 0.46 * cosf((2.0 * M_PI * (float)i)/(float)(len - 1));
 801220e:	eef0 7a68 	vmov.f32	s15, s17
 8012212:	eee0 7a49 	vfms.f32	s15, s0, s18
			data[i] *= val;
 8012216:	ed94 7a00 	vldr	s14, [r4]
 801221a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801221e:	eca4 7a01 	vstmia	r4!, {s14}
			data[len - i - 1] *= val;
 8012222:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012226:	ee67 7a87 	vmul.f32	s15, s15, s14
 801222a:	ed66 7a01 	vstmdb	r6!, {s15}
		for (int i = 0;i < (len / 2);i++) {
 801222e:	d1e2      	bne.n	80121f6 <filter_hamming+0x86>
}
 8012230:	ecbd 8b04 	vpop	{d8-d9}
 8012234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012236:	bf00      	nop
 8012238:	40c90fdb 	.word	0x40c90fdb
 801223c:	3eeb851f 	.word	0x3eeb851f
 8012240:	3f0a3d71 	.word	0x3f0a3d71
	...

08012250 <filter_create_fir_lowpass>:
			result[i] = 0;
		}
	}
}

void filter_create_fir_lowpass(float *filter_vector, float f_break, int bits, int use_hamming) {
 8012250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int taps = 1 << bits;
	float imag[taps];
 8012254:	2304      	movs	r3, #4
 8012256:	408b      	lsls	r3, r1
 8012258:	330a      	adds	r3, #10
	int taps = 1 << bits;
 801225a:	2601      	movs	r6, #1
	float imag[taps];
 801225c:	f023 0307 	bic.w	r3, r3, #7
	int taps = 1 << bits;
 8012260:	408e      	lsls	r6, r1
void filter_create_fir_lowpass(float *filter_vector, float f_break, int bits, int use_hamming) {
 8012262:	af00      	add	r7, sp, #0

	for(int i = 0;i < taps;i++) {
 8012264:	2e00      	cmp	r6, #0
	float imag[taps];
 8012266:	ebad 0d03 	sub.w	sp, sp, r3
void filter_create_fir_lowpass(float *filter_vector, float f_break, int bits, int use_hamming) {
 801226a:	4680      	mov	r8, r0
 801226c:	4691      	mov	r9, r2
	float imag[taps];
 801226e:	466b      	mov	r3, sp
	for(int i = 0;i < taps;i++) {
 8012270:	dd1d      	ble.n	80122ae <filter_create_fir_lowpass+0x5e>
 8012272:	ee07 6a90 	vmov	s15, r6
 8012276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (i < (int)((float)taps * f_break)) {
			filter_vector[i] = 1;
		} else {
			filter_vector[i] = 0;
 801227a:	f04f 0e00 	mov.w	lr, #0
 801227e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012282:	466c      	mov	r4, sp
 8012284:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for(int i = 0;i < taps;i++) {
 8012288:	2200      	movs	r2, #0
 801228a:	ee17 5a90 	vmov	r5, s15
			filter_vector[i] = 1;
 801228e:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
		if (i < (int)((float)taps * f_break)) {
 8012292:	42aa      	cmp	r2, r5
	for(int i = 0;i < taps;i++) {
 8012294:	f102 0201 	add.w	r2, r2, #1
			filter_vector[i] = 1;
 8012298:	bfb4      	ite	lt
 801229a:	f8c0 c000 	strlt.w	ip, [r0]
			filter_vector[i] = 0;
 801229e:	f8c0 e000 	strge.w	lr, [r0]
	for(int i = 0;i < taps;i++) {
 80122a2:	4296      	cmp	r6, r2
		}
		imag[i] = 0;
 80122a4:	f844 eb04 	str.w	lr, [r4], #4
 80122a8:	f100 0004 	add.w	r0, r0, #4
	for(int i = 0;i < taps;i++) {
 80122ac:	d1f1      	bne.n	8012292 <filter_create_fir_lowpass+0x42>
	}

	// Make filter symmetric
	for (int i = 0;i < taps / 2;i++) {
 80122ae:	eb06 7ed6 	add.w	lr, r6, r6, lsr #31
 80122b2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80122b6:	f1be 0f00 	cmp.w	lr, #0
 80122ba:	dd23      	ble.n	8012304 <filter_create_fir_lowpass+0xb4>
 80122bc:	2204      	movs	r2, #4
 80122be:	408a      	lsls	r2, r1
 80122c0:	eb08 0e8e 	add.w	lr, r8, lr, lsl #2
 80122c4:	4442      	add	r2, r8
 80122c6:	4645      	mov	r5, r8
 80122c8:	4644      	mov	r4, r8
		filter_vector[taps - i - 1] = filter_vector[i];
 80122ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80122ce:	f842 0d04 	str.w	r0, [r2, #-4]!
	for (int i = 0;i < taps / 2;i++) {
 80122d2:	4574      	cmp	r4, lr
 80122d4:	d1f9      	bne.n	80122ca <filter_create_fir_lowpass+0x7a>
	}

	filter_fft(1, bits, filter_vector, imag);
 80122d6:	4642      	mov	r2, r8
 80122d8:	2001      	movs	r0, #1
 80122da:	f7ff fe49 	bl	8011f70 <filter_fft>
 80122de:	4623      	mov	r3, r4
		float r2 = data[len/2 + i];
 80122e0:	6819      	ldr	r1, [r3, #0]
		float r1 = data[i];
 80122e2:	682a      	ldr	r2, [r5, #0]
		data[i] = r2;
 80122e4:	f845 1b04 	str.w	r1, [r5], #4
	for (int i = 0;i < (len / 2);i++) {
 80122e8:	42ac      	cmp	r4, r5
		data[len / 2 + i] = r1;
 80122ea:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0;i < (len / 2);i++) {
 80122ee:	d1f7      	bne.n	80122e0 <filter_create_fir_lowpass+0x90>
	filter_fftshift(filter_vector, taps);

	if (use_hamming) {
 80122f0:	f1b9 0f00 	cmp.w	r9, #0
 80122f4:	d003      	beq.n	80122fe <filter_create_fir_lowpass+0xae>
		filter_hamming(filter_vector, taps);
 80122f6:	4631      	mov	r1, r6
 80122f8:	4640      	mov	r0, r8
 80122fa:	f7ff ff39 	bl	8012170 <filter_hamming>
	}
}
 80122fe:	46bd      	mov	sp, r7
 8012300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	filter_fft(1, bits, filter_vector, imag);
 8012304:	4642      	mov	r2, r8
 8012306:	2001      	movs	r0, #1
 8012308:	f7ff fe32 	bl	8011f70 <filter_fft>
 801230c:	e7f0      	b.n	80122f0 <filter_create_fir_lowpass+0xa0>
 801230e:	bf00      	nop

08012310 <filter_run_fir_iteration>:
 * length while filtering. Useful for keeping a circular buffer with samples
 * and avoiding to shift the whole buffer.
 *
 * returns: The filtered result sample.
 */
float filter_run_fir_iteration(float *vector, float *filter, int bits, uint32_t offset) {
 8012310:	b470      	push	{r4, r5, r6}
	float result = 0;
	int size = 1 << bits;
 8012312:	2601      	movs	r6, #1
 8012314:	4096      	lsls	r6, r2
	uint32_t cnt_mask = 0xFFFFFFFF >> (32 - bits);
 8012316:	f1c2 0420 	rsb	r4, r2, #32
 801231a:	f04f 35ff 	mov.w	r5, #4294967295

	for (int i = 0;i < size;i++) {
 801231e:	2e00      	cmp	r6, #0
	uint32_t cnt_mask = 0xFFFFFFFF >> (32 - bits);
 8012320:	fa25 f504 	lsr.w	r5, r5, r4
	for (int i = 0;i < size;i++) {
 8012324:	dd13      	ble.n	801234e <filter_run_fir_iteration+0x3e>
 8012326:	2404      	movs	r4, #4
 8012328:	4094      	lsls	r4, r2
 801232a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012354 <filter_run_fir_iteration+0x44>
 801232e:	440c      	add	r4, r1
		result += filter[i] * vector[offset];
 8012330:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8012334:	ecb1 7a01 	vldmia	r1!, {s14}
 8012338:	edd2 7a00 	vldr	s15, [r2]
		offset++;
 801233c:	3301      	adds	r3, #1
	for (int i = 0;i < size;i++) {
 801233e:	428c      	cmp	r4, r1
		offset &= cnt_mask;
 8012340:	ea03 0305 	and.w	r3, r3, r5
		result += filter[i] * vector[offset];
 8012344:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (int i = 0;i < size;i++) {
 8012348:	d1f2      	bne.n	8012330 <filter_run_fir_iteration+0x20>
	}

	return result;
}
 801234a:	bc70      	pop	{r4, r5, r6}
 801234c:	4770      	bx	lr
	float result = 0;
 801234e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012354 <filter_run_fir_iteration+0x44>
	return result;
 8012352:	e7fa      	b.n	801234a <filter_run_fir_iteration+0x3a>
	...

08012360 <filter_add_sample>:
 * The length of the buffer in bits
 * @param offset
 * Pointer to the current offset in the buffer. Will be updated in this call
 * and wrapped at the length of this buffer.
 */
void filter_add_sample(float *buffer, float sample, int bits, uint32_t *offset) {
 8012360:	b410      	push	{r4}
	uint32_t cnt_mask = 0xFFFFFFFF >> (32 - bits);
	buffer[*offset] = sample;
 8012362:	6814      	ldr	r4, [r2, #0]
	uint32_t cnt_mask = 0xFFFFFFFF >> (32 - bits);
 8012364:	f04f 33ff 	mov.w	r3, #4294967295
 8012368:	f1c1 0120 	rsb	r1, r1, #32
 801236c:	fa23 f101 	lsr.w	r1, r3, r1
	*offset += 1;
 8012370:	1c63      	adds	r3, r4, #1
	buffer[*offset] = sample;
 8012372:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	*offset &= cnt_mask;
 8012376:	4019      	ands	r1, r3
	buffer[*offset] = sample;
 8012378:	ed80 0a00 	vstr	s0, [r0]
}
 801237c:	f85d 4b04 	ldr.w	r4, [sp], #4
	*offset &= cnt_mask;
 8012380:	6011      	str	r1, [r2, #0]
}
 8012382:	4770      	bx	lr
	...

08012390 <ledpwm_init>:

// Private variables
static volatile int led_values[LEDPWM_LED_NUM];
static uint8_t gamma_table[LEDPWM_CNT_TOP + 1];

void ledpwm_init(void) {
 8012390:	b538      	push	{r3, r4, r5, lr}
	memset((int*)led_values, 0, sizeof(led_values));
 8012392:	4a13      	ldr	r2, [pc, #76]	; (80123e0 <ledpwm_init+0x50>)
 8012394:	4d13      	ldr	r5, [pc, #76]	; (80123e4 <ledpwm_init+0x54>)
void ledpwm_init(void) {
 8012396:	ed2d 8b02 	vpush	{d8}
	memset((int*)led_values, 0, sizeof(led_values));
 801239a:	2300      	movs	r3, #0

	// Generate gamma correction table
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 801239c:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80123e8 <ledpwm_init+0x58>
 80123a0:	eddf 8a12 	vldr	s17, [pc, #72]	; 80123ec <ledpwm_init+0x5c>
	memset((int*)led_values, 0, sizeof(led_values));
 80123a4:	6013      	str	r3, [r2, #0]
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
 80123a6:	461c      	mov	r4, r3
	memset((int*)led_values, 0, sizeof(led_values));
 80123a8:	6053      	str	r3, [r2, #4]
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 80123aa:	ee07 4a90 	vmov	s15, r4
 80123ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80123b2:	eef0 0a68 	vmov.f32	s1, s17
 80123b6:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80123ba:	f013 fac1 	bl	8025940 <powf>
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
 80123be:	3401      	adds	r4, #1
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 80123c0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80123c4:	f012 ffac 	bl	8025320 <roundf>
 80123c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
 80123cc:	2cc9      	cmp	r4, #201	; 0xc9
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 80123ce:	ee17 3a90 	vmov	r3, s15
 80123d2:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
 80123d6:	d1e8      	bne.n	80123aa <ledpwm_init+0x1a>
	}
}
 80123d8:	ecbd 8b02 	vpop	{d8}
 80123dc:	bd38      	pop	{r3, r4, r5, pc}
 80123de:	bf00      	nop
 80123e0:	20004930 	.word	0x20004930
 80123e4:	20004863 	.word	0x20004863
 80123e8:	43480000 	.word	0x43480000
 80123ec:	400e38e4 	.word	0x400e38e4

080123f0 <ledpwm_set_intensity>:
 * according to human luminance perception.
 *
 * Intensity range is 0.0 to 1.0
 */
void ledpwm_set_intensity(unsigned int led, float intensity) {
	if (led >= LEDPWM_LED_NUM) {
 80123f0:	2801      	cmp	r0, #1
 80123f2:	d900      	bls.n	80123f6 <ledpwm_set_intensity+0x6>
 80123f4:	4770      	bx	lr
		return;
	}

	if (intensity < 0.0) {
 80123f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fe:	d40e      	bmi.n	801241e <ledpwm_set_intensity+0x2e>
		intensity = 0.0;
	}

	if (intensity > 1.0) {
 8012400:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012404:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240c:	bfc8      	it	gt
 801240e:	23c8      	movgt	r3, #200	; 0xc8
 8012410:	dd07      	ble.n	8012422 <ledpwm_set_intensity+0x32>
		intensity = 1.0;
	}

	led_values[led] = gamma_table[(int)(intensity * LEDPWM_CNT_TOP)];
 8012412:	4908      	ldr	r1, [pc, #32]	; (8012434 <ledpwm_set_intensity+0x44>)
 8012414:	4a08      	ldr	r2, [pc, #32]	; (8012438 <ledpwm_set_intensity+0x48>)
 8012416:	5ccb      	ldrb	r3, [r1, r3]
 8012418:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801241c:	4770      	bx	lr
 801241e:	2300      	movs	r3, #0
 8012420:	e7f7      	b.n	8012412 <ledpwm_set_intensity+0x22>
 8012422:	eddf 7a06 	vldr	s15, [pc, #24]	; 801243c <ledpwm_set_intensity+0x4c>
 8012426:	ee20 0a27 	vmul.f32	s0, s0, s15
 801242a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801242e:	ee17 3a90 	vmov	r3, s15
 8012432:	e7ee      	b.n	8012412 <ledpwm_set_intensity+0x22>
 8012434:	20004864 	.word	0x20004864
 8012438:	20004930 	.word	0x20004930
 801243c:	43480000 	.word	0x43480000

08012440 <ledpwm_update_pwm>:
/*
 * Call this function as fast as possible, with a deterministic rate.
 */
void ledpwm_update_pwm(void) {
	static int cnt = 0;
	cnt++;
 8012440:	4a0c      	ldr	r2, [pc, #48]	; (8012474 <ledpwm_update_pwm+0x34>)
 8012442:	6813      	ldr	r3, [r2, #0]
 8012444:	3301      	adds	r3, #1
	if (cnt == LEDPWM_CNT_TOP) {
 8012446:	2bc8      	cmp	r3, #200	; 0xc8
		cnt = 0;
 8012448:	bf08      	it	eq
 801244a:	2300      	moveq	r3, #0
 801244c:	6013      	str	r3, [r2, #0]
	}

	if (cnt >= led_values[0]) {
 801244e:	4a0a      	ldr	r2, [pc, #40]	; (8012478 <ledpwm_update_pwm+0x38>)
 8012450:	6811      	ldr	r1, [r2, #0]
 8012452:	4299      	cmp	r1, r3
		LED_GREEN_OFF();
 8012454:	4909      	ldr	r1, [pc, #36]	; (801247c <ledpwm_update_pwm+0x3c>)
 8012456:	f04f 0010 	mov.w	r0, #16
 801245a:	bfd4      	ite	le
 801245c:	8348      	strhle	r0, [r1, #26]
	} else {
		LED_GREEN_ON();
 801245e:	8308      	strhgt	r0, [r1, #24]
	}

	if (cnt >= led_values[1]) {
 8012460:	6852      	ldr	r2, [r2, #4]
 8012462:	429a      	cmp	r2, r3
		LED_RED_OFF();
 8012464:	4b05      	ldr	r3, [pc, #20]	; (801247c <ledpwm_update_pwm+0x3c>)
 8012466:	f04f 0220 	mov.w	r2, #32
 801246a:	bfd4      	ite	le
 801246c:	835a      	strhle	r2, [r3, #26]
	} else {
		LED_RED_ON();
 801246e:	831a      	strhgt	r2, [r3, #24]
 8012470:	4770      	bx	lr
 8012472:	bf00      	nop
 8012474:	20004860 	.word	0x20004860
 8012478:	20004930 	.word	0x20004930
 801247c:	40020800 	.word	0x40020800

08012480 <update_adc_sample_pos>:
 * 4		0		+		-
 * 5		-		+		0
 * 6		-		0		+
 */

static void update_adc_sample_pos(mc_timer_struct *timer_tmp) {
 8012480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012482:	b087      	sub	sp, #28
	volatile uint32_t duty = timer_tmp->duty;
 8012484:	6882      	ldr	r2, [r0, #8]
 8012486:	9201      	str	r2, [sp, #4]
	volatile uint32_t top = timer_tmp->top;
 8012488:	6842      	ldr	r2, [r0, #4]
 801248a:	9202      	str	r2, [sp, #8]
	volatile uint32_t val_sample = timer_tmp->val_sample;
 801248c:	68c2      	ldr	r2, [r0, #12]
 801248e:	9203      	str	r2, [sp, #12]
	volatile uint32_t curr1_sample = timer_tmp->curr1_sample;
 8012490:	6902      	ldr	r2, [r0, #16]
 8012492:	9204      	str	r2, [sp, #16]
	volatile uint32_t curr2_sample = timer_tmp->curr2_sample;
 8012494:	6942      	ldr	r2, [r0, #20]

#ifdef HW_HAS_3_SHUNTS
	volatile uint32_t curr3_sample = timer_tmp->curr3_sample;
#endif

	if (duty > (uint32_t)((float)top * conf->l_max_duty)) {
 8012496:	4b6b      	ldr	r3, [pc, #428]	; (8012644 <update_adc_sample_pos+0x1c4>)
	volatile uint32_t curr2_sample = timer_tmp->curr2_sample;
 8012498:	9205      	str	r2, [sp, #20]
	if (duty > (uint32_t)((float)top * conf->l_max_duty)) {
 801249a:	eddd 7a02 	vldr	s15, [sp, #8]
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124a4:	ed92 7a16 	vldr	s14, [r2, #88]	; 0x58
 80124a8:	9b01      	ldr	r3, [sp, #4]
 80124aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124b2:	ee17 1a90 	vmov	r1, s15
 80124b6:	4299      	cmp	r1, r3
 80124b8:	d20b      	bcs.n	80124d2 <update_adc_sample_pos+0x52>
		duty = (uint32_t)((float)top * conf->l_max_duty);
 80124ba:	eddd 7a02 	vldr	s15, [sp, #8]
 80124be:	ed92 7a16 	vldr	s14, [r2, #88]	; 0x58
 80124c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124ce:	edcd 7a01 	vstr	s15, [sp, #4]
	}

	curr_samp_volt = 0;
 80124d2:	495d      	ldr	r1, [pc, #372]	; (8012648 <update_adc_sample_pos+0x1c8>)
 80124d4:	2300      	movs	r3, #0
 80124d6:	600b      	str	r3, [r1, #0]

	if (conf->motor_type == MOTOR_TYPE_DC) {
 80124d8:	7893      	ldrb	r3, [r2, #2]
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d039      	beq.n	8012554 <update_adc_sample_pos+0xd4>
		//		} else {
		//			val_sample = duty / 2;
		//		}
	} else {
		// Sample the ADC at an appropriate time during the pwm cycle
		if (IS_DETECTING()) {
 80124e0:	4b5a      	ldr	r3, [pc, #360]	; (801264c <update_adc_sample_pos+0x1cc>)
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d072      	beq.n	80125ce <update_adc_sample_pos+0x14e>
			curr2_sample = (top - duty) / 2 + duty;
#ifdef HW_HAS_3_SHUNTS
			curr3_sample = (top - duty) / 2 + duty;
#endif
		} else {
			if (conf->pwm_mode == PWM_MODE_BIPOLAR) {
 80124e8:	7813      	ldrb	r3, [r2, #0]
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	d043      	beq.n	8012576 <update_adc_sample_pos+0xf6>
					}
					break;
				}
			} else {
				// Voltage samples
				val_sample = duty / 2;
 80124ee:	9b01      	ldr	r3, [sp, #4]
 80124f0:	085b      	lsrs	r3, r3, #1
 80124f2:	9303      	str	r3, [sp, #12]

				// Current samples
				curr1_sample = duty + (top - duty) / 2;
 80124f4:	9a02      	ldr	r2, [sp, #8]
 80124f6:	9c01      	ldr	r4, [sp, #4]
 80124f8:	9b01      	ldr	r3, [sp, #4]
 80124fa:	1b12      	subs	r2, r2, r4
 80124fc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012500:	9304      	str	r3, [sp, #16]
				if (curr1_sample > (top - 70)) {
 8012502:	9b02      	ldr	r3, [sp, #8]
 8012504:	9a04      	ldr	r2, [sp, #16]
 8012506:	3b46      	subs	r3, #70	; 0x46
 8012508:	4293      	cmp	r3, r2
 801250a:	d202      	bcs.n	8012512 <update_adc_sample_pos+0x92>
					curr1_sample = top - 70;
 801250c:	9b02      	ldr	r3, [sp, #8]
 801250e:	3b46      	subs	r3, #70	; 0x46
 8012510:	9304      	str	r3, [sp, #16]
				}

				curr2_sample = curr1_sample;
 8012512:	9b04      	ldr	r3, [sp, #16]
 8012514:	9305      	str	r3, [sp, #20]
				curr3_sample = curr1_sample;
#endif

				// The off sampling time is short, so use the on sampling time
				// where possible
				if (duty > (top / 2)) {
 8012516:	9a02      	ldr	r2, [sp, #8]
 8012518:	9b01      	ldr	r3, [sp, #4]
 801251a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801251e:	d911      	bls.n	8012544 <update_adc_sample_pos+0xc4>
						case 6: curr_samp_volt = (1 << 0) || (1 << 1); break;
						default: break;
						}
					}
#else
					if (direction) {
 8012520:	4b4b      	ldr	r3, [pc, #300]	; (8012650 <update_adc_sample_pos+0x1d0>)
 8012522:	681b      	ldr	r3, [r3, #0]
						case 5: curr_samp_volt = (1 << 0); break;
						case 6: curr_samp_volt = (1 << 0) || (1 << 1); break;
						default: break;
						}
					} else {
						switch (comm_step) {
 8012524:	4b4b      	ldr	r3, [pc, #300]	; (8012654 <update_adc_sample_pos+0x1d4>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	3b01      	subs	r3, #1
 801252a:	2b05      	cmp	r3, #5
 801252c:	d80a      	bhi.n	8012544 <update_adc_sample_pos+0xc4>
 801252e:	e8df f003 	tbb	[pc, r3]
 8012532:	4b1f      	.short	0x4b1f
 8012534:	1f1f1f4b 	.word	0x1f1f1f4b
					if (direction) {
 8012538:	4b45      	ldr	r3, [pc, #276]	; (8012650 <update_adc_sample_pos+0x1d0>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d07c      	beq.n	801263a <update_adc_sample_pos+0x1ba>
						curr1_sample = samp_zero;
 8012540:	9604      	str	r6, [sp, #16]
						curr2_sample = samp_pos;
 8012542:	9205      	str	r2, [sp, #20]
				}
			}
		}
	}

	timer_tmp->val_sample = val_sample;
 8012544:	9b03      	ldr	r3, [sp, #12]
 8012546:	60c3      	str	r3, [r0, #12]
	timer_tmp->curr1_sample = curr1_sample;
 8012548:	9b04      	ldr	r3, [sp, #16]
 801254a:	6103      	str	r3, [r0, #16]
	timer_tmp->curr2_sample = curr2_sample;
 801254c:	9b05      	ldr	r3, [sp, #20]
 801254e:	6143      	str	r3, [r0, #20]
#ifdef HW_HAS_3_SHUNTS
	timer_tmp->curr3_sample = curr3_sample;
#endif
}
 8012550:	b007      	add	sp, #28
 8012552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr1_sample = top - 10; // Not used anyway
 8012554:	9a02      	ldr	r2, [sp, #8]
 8012556:	3a0a      	subs	r2, #10
 8012558:	9204      	str	r2, [sp, #16]
		curr2_sample = top - 10;
 801255a:	9a02      	ldr	r2, [sp, #8]
 801255c:	3a0a      	subs	r2, #10
 801255e:	9205      	str	r2, [sp, #20]
		if (duty > 1000) {
 8012560:	9a01      	ldr	r2, [sp, #4]
 8012562:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012566:	d929      	bls.n	80125bc <update_adc_sample_pos+0x13c>
			val_sample = duty / 2;
 8012568:	9b01      	ldr	r3, [sp, #4]
 801256a:	085b      	lsrs	r3, r3, #1
 801256c:	9303      	str	r3, [sp, #12]
 801256e:	e7e9      	b.n	8012544 <update_adc_sample_pos+0xc4>
						case 6: curr_samp_volt = (1 << 0); break;
 8012570:	2301      	movs	r3, #1
 8012572:	600b      	str	r3, [r1, #0]
 8012574:	e7e6      	b.n	8012544 <update_adc_sample_pos+0xc4>
				uint32_t samp_neg = top - 2;
 8012576:	9d02      	ldr	r5, [sp, #8]
				uint32_t samp_pos = duty + (top - duty) / 2;
 8012578:	9a02      	ldr	r2, [sp, #8]
 801257a:	9f01      	ldr	r7, [sp, #4]
 801257c:	9c01      	ldr	r4, [sp, #4]
				uint32_t samp_zero = top - 2;
 801257e:	9e02      	ldr	r6, [sp, #8]
				val_sample = top / 4;
 8012580:	9b02      	ldr	r3, [sp, #8]
				switch (comm_step) {
 8012582:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8012654 <update_adc_sample_pos+0x1d4>
				val_sample = top / 4;
 8012586:	089b      	lsrs	r3, r3, #2
 8012588:	9303      	str	r3, [sp, #12]
				switch (comm_step) {
 801258a:	f8de 3000 	ldr.w	r3, [lr]
				uint32_t samp_pos = duty + (top - duty) / 2;
 801258e:	1bd2      	subs	r2, r2, r7
				switch (comm_step) {
 8012590:	3b01      	subs	r3, #1
				uint32_t samp_neg = top - 2;
 8012592:	3d02      	subs	r5, #2
				uint32_t samp_pos = duty + (top - duty) / 2;
 8012594:	eb04 0252 	add.w	r2, r4, r2, lsr #1
				uint32_t samp_zero = top - 2;
 8012598:	3e02      	subs	r6, #2
				switch (comm_step) {
 801259a:	2b05      	cmp	r3, #5
 801259c:	d8d2      	bhi.n	8012544 <update_adc_sample_pos+0xc4>
 801259e:	a401      	add	r4, pc, #4	; (adr r4, 80125a4 <update_adc_sample_pos+0x124>)
 80125a0:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 80125a4:	08012633 	.word	0x08012633
 80125a8:	08012621 	.word	0x08012621
 80125ac:	08012615 	.word	0x08012615
 80125b0:	08012539 	.word	0x08012539
 80125b4:	08012603 	.word	0x08012603
 80125b8:	080125f3 	.word	0x080125f3
			val_sample = duty + 800;
 80125bc:	9a01      	ldr	r2, [sp, #4]
 80125be:	f502 7248 	add.w	r2, r2, #800	; 0x320
 80125c2:	9203      	str	r2, [sp, #12]
			curr_samp_volt = (1 << 0) || (1 << 1) || (1 << 2);
 80125c4:	600b      	str	r3, [r1, #0]
 80125c6:	e7bd      	b.n	8012544 <update_adc_sample_pos+0xc4>
						case 3: curr_samp_volt = (1 << 1); break;
 80125c8:	2302      	movs	r3, #2
 80125ca:	600b      	str	r3, [r1, #0]
 80125cc:	e7ba      	b.n	8012544 <update_adc_sample_pos+0xc4>
			val_sample = duty / 2;
 80125ce:	9b01      	ldr	r3, [sp, #4]
 80125d0:	085b      	lsrs	r3, r3, #1
 80125d2:	9303      	str	r3, [sp, #12]
			curr1_sample = (top - duty) / 2 + duty;
 80125d4:	9a02      	ldr	r2, [sp, #8]
 80125d6:	9901      	ldr	r1, [sp, #4]
 80125d8:	9b01      	ldr	r3, [sp, #4]
 80125da:	1a52      	subs	r2, r2, r1
 80125dc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80125e0:	9304      	str	r3, [sp, #16]
			curr2_sample = (top - duty) / 2 + duty;
 80125e2:	9a02      	ldr	r2, [sp, #8]
 80125e4:	9901      	ldr	r1, [sp, #4]
 80125e6:	9b01      	ldr	r3, [sp, #4]
 80125e8:	1a52      	subs	r2, r2, r1
 80125ea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80125ee:	9305      	str	r3, [sp, #20]
 80125f0:	e7a8      	b.n	8012544 <update_adc_sample_pos+0xc4>
					if (direction) {
 80125f2:	4b17      	ldr	r3, [pc, #92]	; (8012650 <update_adc_sample_pos+0x1d0>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	b143      	cbz	r3, 801260a <update_adc_sample_pos+0x18a>
						curr_samp_volt = (1 << 0);
 80125f8:	2301      	movs	r3, #1
						curr1_sample = samp_neg;
 80125fa:	9504      	str	r5, [sp, #16]
						curr2_sample = samp_zero;
 80125fc:	9605      	str	r6, [sp, #20]
						curr_samp_volt = (1 << 0);
 80125fe:	600b      	str	r3, [r1, #0]
 8012600:	e7a0      	b.n	8012544 <update_adc_sample_pos+0xc4>
					if (direction) {
 8012602:	4b13      	ldr	r3, [pc, #76]	; (8012650 <update_adc_sample_pos+0x1d0>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d0f6      	beq.n	80125f8 <update_adc_sample_pos+0x178>
						curr_samp_volt = (1 << 0);
 801260a:	2301      	movs	r3, #1
						curr1_sample = samp_neg;
 801260c:	9504      	str	r5, [sp, #16]
						curr2_sample = samp_pos;
 801260e:	9205      	str	r2, [sp, #20]
						curr_samp_volt = (1 << 0);
 8012610:	600b      	str	r3, [r1, #0]
 8012612:	e797      	b.n	8012544 <update_adc_sample_pos+0xc4>
					if (direction) {
 8012614:	4b0e      	ldr	r3, [pc, #56]	; (8012650 <update_adc_sample_pos+0x1d0>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	b133      	cbz	r3, 8012628 <update_adc_sample_pos+0x1a8>
						curr1_sample = samp_pos;
 801261a:	9204      	str	r2, [sp, #16]
						curr2_sample = samp_zero;
 801261c:	9605      	str	r6, [sp, #20]
 801261e:	e791      	b.n	8012544 <update_adc_sample_pos+0xc4>
					if (direction) {
 8012620:	4b0b      	ldr	r3, [pc, #44]	; (8012650 <update_adc_sample_pos+0x1d0>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d0f8      	beq.n	801261a <update_adc_sample_pos+0x19a>
						curr_samp_volt = (1 << 1);
 8012628:	2302      	movs	r3, #2
						curr1_sample = samp_pos;
 801262a:	9204      	str	r2, [sp, #16]
						curr2_sample = samp_neg;
 801262c:	9505      	str	r5, [sp, #20]
						curr_samp_volt = (1 << 1);
 801262e:	600b      	str	r3, [r1, #0]
 8012630:	e788      	b.n	8012544 <update_adc_sample_pos+0xc4>
					if (direction) {
 8012632:	4b07      	ldr	r3, [pc, #28]	; (8012650 <update_adc_sample_pos+0x1d0>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d082      	beq.n	8012540 <update_adc_sample_pos+0xc0>
						curr_samp_volt = (1 << 1);
 801263a:	2302      	movs	r3, #2
						curr1_sample = samp_zero;
 801263c:	9604      	str	r6, [sp, #16]
						curr2_sample = samp_neg;
 801263e:	9505      	str	r5, [sp, #20]
						curr_samp_volt = (1 << 1);
 8012640:	600b      	str	r3, [r1, #0]
 8012642:	e77f      	b.n	8012544 <update_adc_sample_pos+0xc4>
 8012644:	20004d48 	.word	0x20004d48
 8012648:	20004d60 	.word	0x20004d60
 801264c:	200059ec 	.word	0x200059ec
 8012650:	20004e10 	.word	0x20004e10
 8012654:	20004d44 	.word	0x20004d44
	...

08012660 <update_rpm_tacho>:

static void update_rpm_tacho(void) {
	int step = comm_step - 1;
 8012660:	4b1e      	ldr	r3, [pc, #120]	; (80126dc <update_rpm_tacho+0x7c>)
	static int last_step = 0;
	int tacho_diff = (step - last_step) % 6;
 8012662:	481f      	ldr	r0, [pc, #124]	; (80126e0 <update_rpm_tacho+0x80>)
	int step = comm_step - 1;
 8012664:	6819      	ldr	r1, [r3, #0]
	int tacho_diff = (step - last_step) % 6;
 8012666:	6802      	ldr	r2, [r0, #0]
 8012668:	4b1e      	ldr	r3, [pc, #120]	; (80126e4 <update_rpm_tacho+0x84>)
	int step = comm_step - 1;
 801266a:	3901      	subs	r1, #1
	int tacho_diff = (step - last_step) % 6;
 801266c:	1a8a      	subs	r2, r1, r2
static void update_rpm_tacho(void) {
 801266e:	b430      	push	{r4, r5}
	int tacho_diff = (step - last_step) % 6;
 8012670:	fb83 4302 	smull	r4, r3, r3, r2
 8012674:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8012678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801267c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	last_step = step;

	if (tacho_diff > 3) {
 8012680:	2b03      	cmp	r3, #3
	last_step = step;
 8012682:	6001      	str	r1, [r0, #0]
	if (tacho_diff > 3) {
 8012684:	dd1d      	ble.n	80126c2 <update_rpm_tacho+0x62>
		tacho_diff -= 6;
 8012686:	3b06      	subs	r3, #6
	} else if (tacho_diff < -2) {
		tacho_diff += 6;
	}

	if (tacho_diff != 0) {
		rpm_dep.comms += tacho_diff;
 8012688:	4a17      	ldr	r2, [pc, #92]	; (80126e8 <update_rpm_tacho+0x88>)
 801268a:	6951      	ldr	r1, [r2, #20]
		rpm_dep.time_at_comm += TIM2->CNT;
 801268c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		rpm_dep.comms += tacho_diff;
 8012690:	4419      	add	r1, r3
 8012692:	6151      	str	r1, [r2, #20]
		rpm_dep.time_at_comm += TIM2->CNT;
 8012694:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012696:	6995      	ldr	r5, [r2, #24]
		TIM2->CNT = 0;
 8012698:	2400      	movs	r4, #0
		rpm_dep.time_at_comm += TIM2->CNT;
 801269a:	4429      	add	r1, r5
 801269c:	6191      	str	r1, [r2, #24]
		TIM2->CNT = 0;
 801269e:	6244      	str	r4, [r0, #36]	; 0x24
	}

	// Tachometers
	tachometer_for_direction += tacho_diff;
 80126a0:	4812      	ldr	r0, [pc, #72]	; (80126ec <update_rpm_tacho+0x8c>)
	tachometer_abs += tacho_diff;
 80126a2:	4913      	ldr	r1, [pc, #76]	; (80126f0 <update_rpm_tacho+0x90>)
	tachometer_for_direction += tacho_diff;
 80126a4:	6802      	ldr	r2, [r0, #0]

	if (direction) {
 80126a6:	4c13      	ldr	r4, [pc, #76]	; (80126f4 <update_rpm_tacho+0x94>)
	tachometer_for_direction += tacho_diff;
 80126a8:	441a      	add	r2, r3
 80126aa:	6002      	str	r2, [r0, #0]
	tachometer_abs += tacho_diff;
 80126ac:	680a      	ldr	r2, [r1, #0]
 80126ae:	441a      	add	r2, r3
 80126b0:	600a      	str	r2, [r1, #0]
	if (direction) {
 80126b2:	6822      	ldr	r2, [r4, #0]
		tachometer += tacho_diff;
 80126b4:	4910      	ldr	r1, [pc, #64]	; (80126f8 <update_rpm_tacho+0x98>)
	if (direction) {
 80126b6:	b95a      	cbnz	r2, 80126d0 <update_rpm_tacho+0x70>
	} else {
		tachometer -= tacho_diff;
 80126b8:	680a      	ldr	r2, [r1, #0]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	600b      	str	r3, [r1, #0]
	}
}
 80126be:	bc30      	pop	{r4, r5}
 80126c0:	4770      	bx	lr
	} else if (tacho_diff < -2) {
 80126c2:	1c9a      	adds	r2, r3, #2
 80126c4:	da01      	bge.n	80126ca <update_rpm_tacho+0x6a>
		tacho_diff += 6;
 80126c6:	3306      	adds	r3, #6
 80126c8:	e7de      	b.n	8012688 <update_rpm_tacho+0x28>
	if (tacho_diff != 0) {
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d0e8      	beq.n	80126a0 <update_rpm_tacho+0x40>
 80126ce:	e7db      	b.n	8012688 <update_rpm_tacho+0x28>
		tachometer += tacho_diff;
 80126d0:	680a      	ldr	r2, [r1, #0]
 80126d2:	4413      	add	r3, r2
 80126d4:	600b      	str	r3, [r1, #0]
}
 80126d6:	bc30      	pop	{r4, r5}
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	20004d44 	.word	0x20004d44
 80126e0:	20005380 	.word	0x20005380
 80126e4:	2aaaaaab 	.word	0x2aaaaaab
 80126e8:	2000541c 	.word	0x2000541c
 80126ec:	200059fc 	.word	0x200059fc
 80126f0:	200059f8 	.word	0x200059f8
 80126f4:	20004e10 	.word	0x20004e10
 80126f8:	200059f4 	.word	0x200059f4
 80126fc:	00000000 	.word	0x00000000

08012700 <update_sensor_mode>:

static void update_sensor_mode(void) {
	if (conf->sensor_mode == SENSOR_MODE_SENSORLESS ||
 8012700:	4b0e      	ldr	r3, [pc, #56]	; (801273c <update_sensor_mode+0x3c>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	78da      	ldrb	r2, [r3, #3]
 8012706:	b1a2      	cbz	r2, 8012732 <update_sensor_mode+0x32>
			(conf->sensor_mode == SENSOR_MODE_HYBRID &&
 8012708:	78da      	ldrb	r2, [r3, #3]
	if (conf->sensor_mode == SENSOR_MODE_SENSORLESS ||
 801270a:	2a02      	cmp	r2, #2
 801270c:	d003      	beq.n	8012716 <update_sensor_mode+0x16>
					fabsf(mcpwm_get_rpm()) > conf->hall_sl_erpm)) {
		sensorless_now = true;
	} else {
		sensorless_now = false;
 801270e:	4b0c      	ldr	r3, [pc, #48]	; (8012740 <update_sensor_mode+0x40>)
 8012710:	2200      	movs	r2, #0
 8012712:	701a      	strb	r2, [r3, #0]
 8012714:	4770      	bx	lr
	return direction ? rpm_now : -rpm_now;
 8012716:	4a0b      	ldr	r2, [pc, #44]	; (8012744 <update_sensor_mode+0x44>)
 8012718:	6812      	ldr	r2, [r2, #0]
 801271a:	4a0b      	ldr	r2, [pc, #44]	; (8012748 <update_sensor_mode+0x48>)
 801271c:	edd2 7a00 	vldr	s15, [r2]
					fabsf(mcpwm_get_rpm()) > conf->hall_sl_erpm)) {
 8012720:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8012724:	eef0 7ae7 	vabs.f32	s15, s15
			(conf->sensor_mode == SENSOR_MODE_HYBRID &&
 8012728:	eef4 7ac7 	vcmpe.f32	s15, s14
 801272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012730:	dded      	ble.n	801270e <update_sensor_mode+0xe>
		sensorless_now = true;
 8012732:	4b03      	ldr	r3, [pc, #12]	; (8012740 <update_sensor_mode+0x40>)
 8012734:	2201      	movs	r2, #1
 8012736:	701a      	strb	r2, [r3, #0]
 8012738:	4770      	bx	lr
 801273a:	bf00      	nop
 801273c:	20004d48 	.word	0x20004d48
 8012740:	200059e0 	.word	0x200059e0
 8012744:	20004e10 	.word	0x20004e10
 8012748:	2000543c 	.word	0x2000543c
 801274c:	00000000 	.word	0x00000000

08012750 <update_timer_attempt>:

/**
 * Try to apply the new timer settings. This is really not an elegant solution, but for now it is
 * the best I can come up with.
 */
static void update_timer_attempt(void) {
 8012750:	b508      	push	{r3, lr}
	utils_sys_lock_cnt();
 8012752:	f003 fce5 	bl	8016120 <utils_sys_lock_cnt>

	// Set the next timer settings if an update is far enough away
	if (!timer_struct.updated && TIM1->CNT > 10 && TIM1->CNT < (TIM1->ARR - 500)) {
 8012756:	4a19      	ldr	r2, [pc, #100]	; (80127bc <update_timer_attempt+0x6c>)
 8012758:	7813      	ldrb	r3, [r2, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d12a      	bne.n	80127b4 <update_timer_attempt+0x64>
 801275e:	4b18      	ldr	r3, [pc, #96]	; (80127c0 <update_timer_attempt+0x70>)
 8012760:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012762:	290a      	cmp	r1, #10
 8012764:	d926      	bls.n	80127b4 <update_timer_attempt+0x64>
 8012766:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801276a:	f5a1 71fa 	sub.w	r1, r1, #500	; 0x1f4
 801276e:	4288      	cmp	r0, r1
 8012770:	d220      	bcs.n	80127b4 <update_timer_attempt+0x64>
		// Disable preload register updates
		TIM1->CR1 |= TIM_CR1_UDIS;
 8012772:	6818      	ldr	r0, [r3, #0]
		TIM8->CR1 |= TIM_CR1_UDIS;
 8012774:	4913      	ldr	r1, [pc, #76]	; (80127c4 <update_timer_attempt+0x74>)
		TIM1->CR1 |= TIM_CR1_UDIS;
 8012776:	f040 0002 	orr.w	r0, r0, #2
 801277a:	6018      	str	r0, [r3, #0]
		TIM8->CR1 |= TIM_CR1_UDIS;
 801277c:	6808      	ldr	r0, [r1, #0]
 801277e:	f040 0002 	orr.w	r0, r0, #2
 8012782:	6008      	str	r0, [r1, #0]

		// Set the new configuration
		TIM1->ARR = timer_struct.top;
 8012784:	6850      	ldr	r0, [r2, #4]
 8012786:	62d8      	str	r0, [r3, #44]	; 0x2c
		TIM1->CCR1 = timer_struct.duty;
 8012788:	6890      	ldr	r0, [r2, #8]
 801278a:	6358      	str	r0, [r3, #52]	; 0x34
		TIM1->CCR2 = timer_struct.duty;
 801278c:	6890      	ldr	r0, [r2, #8]
 801278e:	6398      	str	r0, [r3, #56]	; 0x38
		TIM1->CCR3 = timer_struct.duty;
 8012790:	6890      	ldr	r0, [r2, #8]
 8012792:	63d8      	str	r0, [r3, #60]	; 0x3c
		TIM8->CCR1 = timer_struct.val_sample;
 8012794:	68d0      	ldr	r0, [r2, #12]
 8012796:	6348      	str	r0, [r1, #52]	; 0x34
		TIM1->CCR4 = timer_struct.curr1_sample;
 8012798:	6910      	ldr	r0, [r2, #16]
 801279a:	6418      	str	r0, [r3, #64]	; 0x40
		TIM8->CCR2 = timer_struct.curr2_sample;
 801279c:	6950      	ldr	r0, [r2, #20]
 801279e:	6388      	str	r0, [r1, #56]	; 0x38
#ifdef HW_HAS_3_SHUNTS
		TIM8->CCR3 = timer_struct.curr3_sample;
#endif

		// Enables preload register updates
		TIM1->CR1 &= ~TIM_CR1_UDIS;
 80127a0:	6818      	ldr	r0, [r3, #0]
 80127a2:	f020 0002 	bic.w	r0, r0, #2
 80127a6:	6018      	str	r0, [r3, #0]
		TIM8->CR1 &= ~TIM_CR1_UDIS;
 80127a8:	680b      	ldr	r3, [r1, #0]
		timer_struct.updated = true;
 80127aa:	2001      	movs	r0, #1
		TIM8->CR1 &= ~TIM_CR1_UDIS;
 80127ac:	f023 0302 	bic.w	r3, r3, #2
 80127b0:	600b      	str	r3, [r1, #0]
		timer_struct.updated = true;
 80127b2:	7010      	strb	r0, [r2, #0]
	}

	utils_sys_unlock_cnt();
}
 80127b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	utils_sys_unlock_cnt();
 80127b8:	f003 bcc2 	b.w	8016140 <utils_sys_unlock_cnt>
 80127bc:	20005a00 	.word	0x20005a00
 80127c0:	40010000 	.word	0x40010000
 80127c4:	40010400 	.word	0x40010400
	...

080127d0 <set_next_timer_settings>:
static void set_next_timer_settings(mc_timer_struct *settings) {
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	4604      	mov	r4, r0
	utils_sys_lock_cnt();
 80127d4:	f003 fca4 	bl	8016120 <utils_sys_lock_cnt>
	timer_struct = *settings;
 80127d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127da:	4e07      	ldr	r6, [pc, #28]	; (80127f8 <set_next_timer_settings+0x28>)
 80127dc:	4635      	mov	r5, r6
 80127de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127e0:	e894 0003 	ldmia.w	r4, {r0, r1}
	timer_struct.updated = false;
 80127e4:	2300      	movs	r3, #0
	timer_struct = *settings;
 80127e6:	e885 0003 	stmia.w	r5, {r0, r1}
	timer_struct.updated = false;
 80127ea:	7033      	strb	r3, [r6, #0]
	utils_sys_unlock_cnt();
 80127ec:	f003 fca8 	bl	8016140 <utils_sys_unlock_cnt>
}
 80127f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_timer_attempt();
 80127f4:	f7ff bfac 	b.w	8012750 <update_timer_attempt>
 80127f8:	20005a00 	.word	0x20005a00
 80127fc:	00000000 	.word	0x00000000

08012800 <set_switching_frequency>:

static void set_switching_frequency(float frequency) {
 8012800:	b570      	push	{r4, r5, r6, lr}
	switching_frequency_now = frequency;
 8012802:	4e11      	ldr	r6, [pc, #68]	; (8012848 <set_switching_frequency+0x48>)
	mc_timer_struct timer_tmp;

	utils_sys_lock_cnt();
	timer_tmp = timer_struct;
 8012804:	4d11      	ldr	r5, [pc, #68]	; (801284c <set_switching_frequency+0x4c>)
	switching_frequency_now = frequency;
 8012806:	ed86 0a00 	vstr	s0, [r6]
static void set_switching_frequency(float frequency) {
 801280a:	b086      	sub	sp, #24
	utils_sys_lock_cnt();
 801280c:	f003 fc88 	bl	8016120 <utils_sys_lock_cnt>
	timer_tmp = timer_struct;
 8012810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012812:	466c      	mov	r4, sp
 8012814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012816:	e895 0003 	ldmia.w	r5, {r0, r1}
 801281a:	e884 0003 	stmia.w	r4, {r0, r1}
	utils_sys_unlock_cnt();
 801281e:	f003 fc8f 	bl	8016140 <utils_sys_unlock_cnt>

	timer_tmp.top = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 8012822:	edd6 7a00 	vldr	s15, [r6]
 8012826:	4a0a      	ldr	r2, [pc, #40]	; (8012850 <set_switching_frequency+0x50>)
 8012828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	update_adc_sample_pos(&timer_tmp);
 801282c:	4668      	mov	r0, sp
	timer_tmp.top = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 801282e:	ee17 3a90 	vmov	r3, s15
 8012832:	fb92 f3f3 	sdiv	r3, r2, r3
 8012836:	9301      	str	r3, [sp, #4]
	update_adc_sample_pos(&timer_tmp);
 8012838:	f7ff fe22 	bl	8012480 <update_adc_sample_pos>
	set_next_timer_settings(&timer_tmp);
 801283c:	4668      	mov	r0, sp
 801283e:	f7ff ffc7 	bl	80127d0 <set_next_timer_settings>
}
 8012842:	b006      	add	sp, #24
 8012844:	bd70      	pop	{r4, r5, r6, pc}
 8012846:	bf00      	nop
 8012848:	200059f0 	.word	0x200059f0
 801284c:	20005a00 	.word	0x20005a00
 8012850:	0a037a00 	.word	0x0a037a00
	...

08012860 <set_duty_cycle_hw>:
static void set_duty_cycle_hw(float dutyCycle) {
 8012860:	b570      	push	{r4, r5, r6, lr}
	timer_tmp = timer_struct;
 8012862:	4d42      	ldr	r5, [pc, #264]	; (801296c <set_duty_cycle_hw+0x10c>)
	utils_truncate_number(&dutyCycle, conf->l_min_duty, conf->l_max_duty);
 8012864:	4e42      	ldr	r6, [pc, #264]	; (8012970 <set_duty_cycle_hw+0x110>)
static void set_duty_cycle_hw(float dutyCycle) {
 8012866:	b088      	sub	sp, #32
 8012868:	ed8d 0a01 	vstr	s0, [sp, #4]
	utils_sys_lock_cnt();
 801286c:	f003 fc58 	bl	8016120 <utils_sys_lock_cnt>
	timer_tmp = timer_struct;
 8012870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012872:	ac02      	add	r4, sp, #8
 8012874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012876:	e895 0003 	ldmia.w	r5, {r0, r1}
 801287a:	e884 0003 	stmia.w	r4, {r0, r1}
	utils_sys_unlock_cnt();
 801287e:	f003 fc5f 	bl	8016140 <utils_sys_unlock_cnt>
	utils_truncate_number(&dutyCycle, conf->l_min_duty, conf->l_max_duty);
 8012882:	6833      	ldr	r3, [r6, #0]
 8012884:	a801      	add	r0, sp, #4
 8012886:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
 801288a:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
 801288e:	f003 f937 	bl	8015b00 <utils_truncate_number>
	if (conf->motor_type == MOTOR_TYPE_DC) {
 8012892:	6833      	ldr	r3, [r6, #0]
 8012894:	789a      	ldrb	r2, [r3, #2]
 8012896:	2a01      	cmp	r2, #1
 8012898:	d044      	beq.n	8012924 <set_duty_cycle_hw+0xc4>
		if (IS_DETECTING() || conf->pwm_mode == PWM_MODE_BIPOLAR) {
 801289a:	4a36      	ldr	r2, [pc, #216]	; (8012974 <set_duty_cycle_hw+0x114>)
 801289c:	7812      	ldrb	r2, [r2, #0]
 801289e:	2a01      	cmp	r2, #1
 80128a0:	d039      	beq.n	8012916 <set_duty_cycle_hw+0xb6>
 80128a2:	781a      	ldrb	r2, [r3, #0]
 80128a4:	2a02      	cmp	r2, #2
 80128a6:	d036      	beq.n	8012916 <set_duty_cycle_hw+0xb6>
			switching_frequency_now = (float)conf->m_bldc_f_sw_min * (1.0 - fabsf(dutyCycle)) +
 80128a8:	eddd 6a01 	vldr	s13, [sp, #4]
 80128ac:	edd3 5a59 	vldr	s11, [r3, #356]	; 0x164
					conf->m_bldc_f_sw_max * fabsf(dutyCycle);
 80128b0:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
			switching_frequency_now = (float)conf->m_bldc_f_sw_min * (1.0 - fabsf(dutyCycle)) +
 80128b4:	4a30      	ldr	r2, [pc, #192]	; (8012978 <set_duty_cycle_hw+0x118>)
 80128b6:	eeb0 6ae6 	vabs.f32	s12, s13
 80128ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
					conf->m_bldc_f_sw_max * fabsf(dutyCycle);
 80128be:	ee66 7a27 	vmul.f32	s15, s12, s15
			switching_frequency_now = (float)conf->m_bldc_f_sw_min * (1.0 - fabsf(dutyCycle)) +
 80128c2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80128c6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80128ca:	edc2 7a00 	vstr	s15, [r2]
	timer_tmp.top = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 80128ce:	ed92 7a00 	vldr	s14, [r2]
 80128d2:	492a      	ldr	r1, [pc, #168]	; (801297c <set_duty_cycle_hw+0x11c>)
 80128d4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80128d8:	ee17 2a90 	vmov	r2, s15
 80128dc:	fb91 f2f2 	sdiv	r2, r1, r2
 80128e0:	9203      	str	r2, [sp, #12]
	if (conf->motor_type == MOTOR_TYPE_BLDC && conf->pwm_mode == PWM_MODE_BIPOLAR && !IS_DETECTING()) {
 80128e2:	789a      	ldrb	r2, [r3, #2]
 80128e4:	b912      	cbnz	r2, 80128ec <set_duty_cycle_hw+0x8c>
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	2b02      	cmp	r3, #2
 80128ea:	d022      	beq.n	8012932 <set_duty_cycle_hw+0xd2>
		timer_tmp.duty = (uint16_t)((float)timer_tmp.top * dutyCycle);
 80128ec:	eddd 7a03 	vldr	s15, [sp, #12]
 80128f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80128f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128fc:	edcd 7a00 	vstr	s15, [sp]
 8012900:	f8bd 3000 	ldrh.w	r3, [sp]
 8012904:	9304      	str	r3, [sp, #16]
	update_adc_sample_pos(&timer_tmp);
 8012906:	a802      	add	r0, sp, #8
 8012908:	f7ff fdba 	bl	8012480 <update_adc_sample_pos>
	set_next_timer_settings(&timer_tmp);
 801290c:	a802      	add	r0, sp, #8
 801290e:	f7ff ff5f 	bl	80127d0 <set_next_timer_settings>
}
 8012912:	b008      	add	sp, #32
 8012914:	bd70      	pop	{r4, r5, r6, pc}
			switching_frequency_now = conf->m_bldc_f_sw_max;
 8012916:	4a18      	ldr	r2, [pc, #96]	; (8012978 <set_duty_cycle_hw+0x118>)
 8012918:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 801291c:	eddd 6a01 	vldr	s13, [sp, #4]
 8012920:	6011      	str	r1, [r2, #0]
 8012922:	e7d4      	b.n	80128ce <set_duty_cycle_hw+0x6e>
		switching_frequency_now = conf->m_dc_f_sw;
 8012924:	4a14      	ldr	r2, [pc, #80]	; (8012978 <set_duty_cycle_hw+0x118>)
 8012926:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
 801292a:	eddd 6a01 	vldr	s13, [sp, #4]
 801292e:	6011      	str	r1, [r2, #0]
 8012930:	e7cd      	b.n	80128ce <set_duty_cycle_hw+0x6e>
	if (conf->motor_type == MOTOR_TYPE_BLDC && conf->pwm_mode == PWM_MODE_BIPOLAR && !IS_DETECTING()) {
 8012932:	4b10      	ldr	r3, [pc, #64]	; (8012974 <set_duty_cycle_hw+0x114>)
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d0d8      	beq.n	80128ec <set_duty_cycle_hw+0x8c>
		timer_tmp.duty = (uint16_t) (((float) timer_tmp.top / 2.0) * dutyCycle
 801293a:	ed9d 7a03 	vldr	s14, [sp, #12]
				+ ((float) timer_tmp.top / 2.0));
 801293e:	eddd 7a03 	vldr	s15, [sp, #12]
		timer_tmp.duty = (uint16_t) (((float) timer_tmp.top / 2.0) * dutyCycle
 8012942:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				+ ((float) timer_tmp.top / 2.0));
 8012946:	eef8 7a67 	vcvt.f32.u32	s15, s15
		timer_tmp.duty = (uint16_t) (((float) timer_tmp.top / 2.0) * dutyCycle
 801294a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801294e:	ee27 7a06 	vmul.f32	s14, s14, s12
				+ ((float) timer_tmp.top / 2.0));
 8012952:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012956:	eee7 7a26 	vfma.f32	s15, s14, s13
		timer_tmp.duty = (uint16_t) (((float) timer_tmp.top / 2.0) * dutyCycle
 801295a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801295e:	edcd 7a00 	vstr	s15, [sp]
 8012962:	f8bd 3000 	ldrh.w	r3, [sp]
 8012966:	9304      	str	r3, [sp, #16]
 8012968:	e7cd      	b.n	8012906 <set_duty_cycle_hw+0xa6>
 801296a:	bf00      	nop
 801296c:	20005a00 	.word	0x20005a00
 8012970:	20004d48 	.word	0x20004d48
 8012974:	200059ec 	.word	0x200059ec
 8012978:	200059f0 	.word	0x200059f0
 801297c:	0a037a00 	.word	0x0a037a00

08012980 <set_next_comm_step>:

static void set_next_comm_step(int next_step) {
 8012980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conf->motor_type == MOTOR_TYPE_DC) {
 8012982:	4bbb      	ldr	r3, [pc, #748]	; (8012c70 <set_next_comm_step+0x2f0>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	789d      	ldrb	r5, [r3, #2]
 8012988:	b2ed      	uxtb	r5, r5
 801298a:	2d01      	cmp	r5, #1
 801298c:	f000 8109 	beq.w	8012ba2 <set_next_comm_step+0x222>
	uint16_t positive_lowside = TIM_CCxN_Enable;

	uint16_t negative_highside = TIM_CCx_Enable;
	uint16_t negative_lowside = TIM_CCxN_Enable;

	if (!IS_DETECTING()) {
 8012990:	4ab8      	ldr	r2, [pc, #736]	; (8012c74 <set_next_comm_step+0x2f4>)
 8012992:	7812      	ldrb	r2, [r2, #0]
 8012994:	2a01      	cmp	r2, #1
 8012996:	4604      	mov	r4, r0
 8012998:	d04e      	beq.n	8012a38 <set_next_comm_step+0xb8>
		switch (conf->pwm_mode) {
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d04a      	beq.n	8012a3a <set_next_comm_step+0xba>
	uint16_t positive_lowside = TIM_CCxN_Enable;
 80129a4:	2d02      	cmp	r5, #2
 80129a6:	bf0c      	ite	eq
 80129a8:	2670      	moveq	r6, #112	; 0x70
 80129aa:	2620      	movne	r6, #32
			negative_oc_mode = TIM_OCMode_PWM2;
			break;
		}
	}

	if (next_step == 1) {
 80129ac:	2c01      	cmp	r4, #1
	uint16_t positive_lowside = TIM_CCxN_Enable;
 80129ae:	f04f 0504 	mov.w	r5, #4
	if (next_step == 1) {
 80129b2:	d046      	beq.n	8012a42 <set_next_comm_step+0xc2>
			// -
			TIM_SelectOCxM(TIM1, TIM_Channel_2, negative_oc_mode);
			TIM_CCxCmd(TIM1, TIM_Channel_2, negative_highside);
			TIM_CCxNCmd(TIM1, TIM_Channel_2, negative_lowside);
		}
	} else if (next_step == 2) {
 80129b4:	2c02      	cmp	r4, #2
 80129b6:	f000 80cb 	beq.w	8012b50 <set_next_comm_step+0x1d0>
			// -
			TIM_SelectOCxM(TIM1, TIM_Channel_2, negative_oc_mode);
			TIM_CCxCmd(TIM1, TIM_Channel_2, negative_highside);
			TIM_CCxNCmd(TIM1, TIM_Channel_2, negative_lowside);
		}
	} else if (next_step == 3) {
 80129ba:	2c03      	cmp	r4, #3
 80129bc:	f000 811b 	beq.w	8012bf6 <set_next_comm_step+0x276>
			// -
			TIM_SelectOCxM(TIM1, TIM_Channel_3, negative_oc_mode);
			TIM_CCxCmd(TIM1, TIM_Channel_3, negative_highside);
			TIM_CCxNCmd(TIM1, TIM_Channel_3, negative_lowside);
		}
	} else if (next_step == 4) {
 80129c0:	2c04      	cmp	r4, #4
 80129c2:	d070      	beq.n	8012aa6 <set_next_comm_step+0x126>
			// -
			TIM_SelectOCxM(TIM1, TIM_Channel_3, negative_oc_mode);
			TIM_CCxCmd(TIM1, TIM_Channel_3, negative_highside);
			TIM_CCxNCmd(TIM1, TIM_Channel_3, negative_lowside);
		}
	} else if (next_step == 5) {
 80129c4:	2c05      	cmp	r4, #5
 80129c6:	f000 80a2 	beq.w	8012b0e <set_next_comm_step+0x18e>
			// -
			TIM_SelectOCxM(TIM1, TIM_Channel_1, negative_oc_mode);
			TIM_CCxCmd(TIM1, TIM_Channel_1, negative_highside);
			TIM_CCxNCmd(TIM1, TIM_Channel_1, negative_lowside);
		}
	} else if (next_step == 6) {
 80129ca:	2c06      	cmp	r4, #6
 80129cc:	f040 8158 	bne.w	8012c80 <set_next_comm_step+0x300>
		if (direction) {
 80129d0:	4ba9      	ldr	r3, [pc, #676]	; (8012c78 <set_next_comm_step+0x2f8>)
 80129d2:	681c      	ldr	r4, [r3, #0]
			DISABLE_BR3();
			ENABLE_BR2();
			ENABLE_BR1();
#endif
			// 0
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 80129d4:	2220      	movs	r2, #32
		if (direction) {
 80129d6:	2c00      	cmp	r4, #0
 80129d8:	f000 81c7 	beq.w	8012d6a <set_next_comm_step+0x3ea>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 80129dc:	2108      	movs	r1, #8
 80129de:	48a7      	ldr	r0, [pc, #668]	; (8012c7c <set_next_comm_step+0x2fc>)
 80129e0:	f012 fa16 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 80129e4:	2201      	movs	r2, #1
 80129e6:	2108      	movs	r1, #8
 80129e8:	48a4      	ldr	r0, [pc, #656]	; (8012c7c <set_next_comm_step+0x2fc>)
 80129ea:	f012 fa69 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 80129ee:	2200      	movs	r2, #0
 80129f0:	2108      	movs	r1, #8
 80129f2:	48a2      	ldr	r0, [pc, #648]	; (8012c7c <set_next_comm_step+0x2fc>)
 80129f4:	f012 fa7c 	bl	8024ef0 <TIM_CCxNCmd>

			// +
			TIM_SelectOCxM(TIM1, TIM_Channel_2, positive_oc_mode);
 80129f8:	2260      	movs	r2, #96	; 0x60
 80129fa:	2104      	movs	r1, #4
 80129fc:	489f      	ldr	r0, [pc, #636]	; (8012c7c <set_next_comm_step+0x2fc>)
 80129fe:	f012 fa07 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, positive_highside);
 8012a02:	2201      	movs	r2, #1
 8012a04:	2104      	movs	r1, #4
 8012a06:	489d      	ldr	r0, [pc, #628]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a08:	f012 fa5a 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, positive_lowside);
 8012a0c:	462a      	mov	r2, r5
 8012a0e:	2104      	movs	r1, #4
 8012a10:	489a      	ldr	r0, [pc, #616]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a12:	f012 fa6d 	bl	8024ef0 <TIM_CCxNCmd>

			// -
			TIM_SelectOCxM(TIM1, TIM_Channel_1, negative_oc_mode);
 8012a16:	4632      	mov	r2, r6
 8012a18:	2100      	movs	r1, #0
 8012a1a:	4898      	ldr	r0, [pc, #608]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a1c:	f012 f9f8 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, negative_highside);
 8012a20:	2201      	movs	r2, #1
 8012a22:	2100      	movs	r1, #0
 8012a24:	4895      	ldr	r0, [pc, #596]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a26:	f012 fa4b 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, negative_lowside);
 8012a2a:	2204      	movs	r2, #4
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	4893      	ldr	r0, [pc, #588]	; (8012c7c <set_next_comm_step+0x2fc>)

		TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_ForcedAction_InActive);
		TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
		TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
	}
}
 8012a30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			TIM_CCxNCmd(TIM1, TIM_Channel_1, negative_lowside);
 8012a34:	f012 ba5c 	b.w	8024ef0 <TIM_CCxNCmd>
	uint16_t positive_lowside = TIM_CCxN_Enable;
 8012a38:	2504      	movs	r5, #4
	if (next_step == 1) {
 8012a3a:	2c01      	cmp	r4, #1
	uint16_t negative_oc_mode = TIM_OCMode_Inactive;
 8012a3c:	f04f 0620 	mov.w	r6, #32
	if (next_step == 1) {
 8012a40:	d1b8      	bne.n	80129b4 <set_next_comm_step+0x34>
		if (direction) {
 8012a42:	4b8d      	ldr	r3, [pc, #564]	; (8012c78 <set_next_comm_step+0x2f8>)
 8012a44:	681f      	ldr	r7, [r3, #0]
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_Inactive);
 8012a46:	2220      	movs	r2, #32
		if (direction) {
 8012a48:	b39f      	cbz	r7, 8012ab2 <set_next_comm_step+0x132>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_Inactive);
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	488b      	ldr	r0, [pc, #556]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a4e:	f012 f9df 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012a52:	4622      	mov	r2, r4
 8012a54:	2100      	movs	r1, #0
 8012a56:	4889      	ldr	r0, [pc, #548]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a58:	f012 fa32 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	4611      	mov	r1, r2
 8012a60:	4886      	ldr	r0, [pc, #536]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a62:	f012 fa45 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, positive_oc_mode);
 8012a66:	2260      	movs	r2, #96	; 0x60
 8012a68:	2104      	movs	r1, #4
 8012a6a:	4884      	ldr	r0, [pc, #528]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a6c:	f012 f9d0 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, positive_highside);
 8012a70:	4622      	mov	r2, r4
 8012a72:	2104      	movs	r1, #4
 8012a74:	4881      	ldr	r0, [pc, #516]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a76:	f012 fa23 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, positive_lowside);
 8012a7a:	462a      	mov	r2, r5
 8012a7c:	2104      	movs	r1, #4
 8012a7e:	487f      	ldr	r0, [pc, #508]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a80:	f012 fa36 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, negative_oc_mode);
 8012a84:	4632      	mov	r2, r6
 8012a86:	2108      	movs	r1, #8
 8012a88:	487c      	ldr	r0, [pc, #496]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a8a:	f012 f9c1 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, negative_highside);
 8012a8e:	4622      	mov	r2, r4
 8012a90:	2108      	movs	r1, #8
 8012a92:	487a      	ldr	r0, [pc, #488]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012a94:	f012 fa14 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, negative_lowside);
 8012a98:	2204      	movs	r2, #4
 8012a9a:	2108      	movs	r1, #8
 8012a9c:	4877      	ldr	r0, [pc, #476]	; (8012c7c <set_next_comm_step+0x2fc>)
}
 8012a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			TIM_CCxNCmd(TIM1, TIM_Channel_3, negative_lowside);
 8012aa2:	f012 ba25 	b.w	8024ef0 <TIM_CCxNCmd>
		if (direction) {
 8012aa6:	4b74      	ldr	r3, [pc, #464]	; (8012c78 <set_next_comm_step+0x2f8>)
 8012aa8:	681f      	ldr	r7, [r3, #0]
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_Inactive);
 8012aaa:	2220      	movs	r2, #32
		if (direction) {
 8012aac:	2f00      	cmp	r7, #0
 8012aae:	f000 8150 	beq.w	8012d52 <set_next_comm_step+0x3d2>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_Inactive);
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	4871      	ldr	r0, [pc, #452]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012ab6:	f012 f9ab 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012aba:	2201      	movs	r2, #1
 8012abc:	2100      	movs	r1, #0
 8012abe:	486f      	ldr	r0, [pc, #444]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012ac0:	f012 f9fe 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	4611      	mov	r1, r2
 8012ac8:	486c      	ldr	r0, [pc, #432]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012aca:	f012 fa11 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, positive_oc_mode);
 8012ace:	2260      	movs	r2, #96	; 0x60
 8012ad0:	2108      	movs	r1, #8
 8012ad2:	486a      	ldr	r0, [pc, #424]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012ad4:	f012 f99c 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, positive_highside);
 8012ad8:	2201      	movs	r2, #1
 8012ada:	2108      	movs	r1, #8
 8012adc:	4867      	ldr	r0, [pc, #412]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012ade:	f012 f9ef 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, positive_lowside);
 8012ae2:	462a      	mov	r2, r5
 8012ae4:	2108      	movs	r1, #8
			TIM_CCxNCmd(TIM1, TIM_Channel_1, positive_lowside);
 8012ae6:	4865      	ldr	r0, [pc, #404]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012ae8:	f012 fa02 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, negative_oc_mode);
 8012aec:	4632      	mov	r2, r6
 8012aee:	2104      	movs	r1, #4
 8012af0:	4862      	ldr	r0, [pc, #392]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012af2:	f012 f98d 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, negative_highside);
 8012af6:	2201      	movs	r2, #1
 8012af8:	2104      	movs	r1, #4
 8012afa:	4860      	ldr	r0, [pc, #384]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012afc:	f012 f9e0 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, negative_lowside);
 8012b00:	2204      	movs	r2, #4
 8012b02:	4611      	mov	r1, r2
 8012b04:	485d      	ldr	r0, [pc, #372]	; (8012c7c <set_next_comm_step+0x2fc>)
}
 8012b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			TIM_CCxNCmd(TIM1, TIM_Channel_2, negative_lowside);
 8012b0a:	f012 b9f1 	b.w	8024ef0 <TIM_CCxNCmd>
		if (direction) {
 8012b0e:	4b5a      	ldr	r3, [pc, #360]	; (8012c78 <set_next_comm_step+0x2f8>)
 8012b10:	681c      	ldr	r4, [r3, #0]
			TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012b12:	2220      	movs	r2, #32
		if (direction) {
 8012b14:	2c00      	cmp	r4, #0
 8012b16:	f000 8147 	beq.w	8012da8 <set_next_comm_step+0x428>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012b1a:	2104      	movs	r1, #4
 8012b1c:	4857      	ldr	r0, [pc, #348]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b1e:	f012 f977 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012b22:	2201      	movs	r2, #1
 8012b24:	2104      	movs	r1, #4
 8012b26:	4855      	ldr	r0, [pc, #340]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b28:	f012 f9ca 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	2104      	movs	r1, #4
 8012b30:	4852      	ldr	r0, [pc, #328]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b32:	f012 f9dd 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, positive_oc_mode);
 8012b36:	2260      	movs	r2, #96	; 0x60
 8012b38:	2108      	movs	r1, #8
 8012b3a:	4850      	ldr	r0, [pc, #320]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b3c:	f012 f968 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, positive_highside);
 8012b40:	2201      	movs	r2, #1
 8012b42:	2108      	movs	r1, #8
 8012b44:	484d      	ldr	r0, [pc, #308]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b46:	f012 f9bb 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, positive_lowside);
 8012b4a:	462a      	mov	r2, r5
 8012b4c:	2108      	movs	r1, #8
 8012b4e:	e75f      	b.n	8012a10 <set_next_comm_step+0x90>
		if (direction) {
 8012b50:	4b49      	ldr	r3, [pc, #292]	; (8012c78 <set_next_comm_step+0x2f8>)
 8012b52:	681c      	ldr	r4, [r3, #0]
			TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012b54:	2220      	movs	r2, #32
		if (direction) {
 8012b56:	2c00      	cmp	r4, #0
 8012b58:	d06e      	beq.n	8012c38 <set_next_comm_step+0x2b8>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012b5a:	2104      	movs	r1, #4
 8012b5c:	4847      	ldr	r0, [pc, #284]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b5e:	f012 f957 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012b62:	2201      	movs	r2, #1
 8012b64:	2104      	movs	r1, #4
 8012b66:	4845      	ldr	r0, [pc, #276]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b68:	f012 f9aa 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	2104      	movs	r1, #4
 8012b70:	4842      	ldr	r0, [pc, #264]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b72:	f012 f9bd 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, positive_oc_mode);
 8012b76:	2260      	movs	r2, #96	; 0x60
 8012b78:	2100      	movs	r1, #0
 8012b7a:	4840      	ldr	r0, [pc, #256]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b7c:	f012 f948 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, positive_highside);
 8012b80:	2201      	movs	r2, #1
 8012b82:	2100      	movs	r1, #0
 8012b84:	483d      	ldr	r0, [pc, #244]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b86:	f012 f99b 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, positive_lowside);
 8012b8a:	462a      	mov	r2, r5
 8012b8c:	2100      	movs	r1, #0
			TIM_CCxNCmd(TIM1, TIM_Channel_2, positive_lowside);
 8012b8e:	483b      	ldr	r0, [pc, #236]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b90:	f012 f9ae 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, negative_oc_mode);
 8012b94:	4632      	mov	r2, r6
 8012b96:	2108      	movs	r1, #8
 8012b98:	4838      	ldr	r0, [pc, #224]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012b9a:	f012 f939 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, negative_highside);
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	e776      	b.n	8012a90 <set_next_comm_step+0x110>
		TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012ba2:	2220      	movs	r2, #32
 8012ba4:	2104      	movs	r1, #4
 8012ba6:	4835      	ldr	r0, [pc, #212]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012ba8:	f012 f932 	bl	8024e10 <TIM_SelectOCxM>
		TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012bac:	462a      	mov	r2, r5
 8012bae:	2104      	movs	r1, #4
 8012bb0:	4832      	ldr	r0, [pc, #200]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012bb2:	f012 f985 	bl	8024ec0 <TIM_CCxCmd>
		TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	2104      	movs	r1, #4
 8012bba:	4830      	ldr	r0, [pc, #192]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012bbc:	f012 f998 	bl	8024ef0 <TIM_CCxNCmd>
		if (direction) {
 8012bc0:	4b2d      	ldr	r3, [pc, #180]	; (8012c78 <set_next_comm_step+0x2f8>)
 8012bc2:	681c      	ldr	r4, [r3, #0]
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_PWM1);
 8012bc4:	2260      	movs	r2, #96	; 0x60
		if (direction) {
 8012bc6:	2c00      	cmp	r4, #0
 8012bc8:	f000 8089 	beq.w	8012cde <set_next_comm_step+0x35e>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_PWM1);
 8012bcc:	2100      	movs	r1, #0
 8012bce:	482b      	ldr	r0, [pc, #172]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012bd0:	f012 f91e 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012bd4:	462a      	mov	r2, r5
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	4828      	ldr	r0, [pc, #160]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012bda:	f012 f971 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Enable);
 8012bde:	2204      	movs	r2, #4
 8012be0:	2100      	movs	r1, #0
 8012be2:	4826      	ldr	r0, [pc, #152]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012be4:	f012 f984 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 8012be8:	2220      	movs	r2, #32
 8012bea:	2108      	movs	r1, #8
 8012bec:	4823      	ldr	r0, [pc, #140]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012bee:	f012 f90f 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012bf2:	462a      	mov	r2, r5
 8012bf4:	e74c      	b.n	8012a90 <set_next_comm_step+0x110>
		if (direction) {
 8012bf6:	4b20      	ldr	r3, [pc, #128]	; (8012c78 <set_next_comm_step+0x2f8>)
 8012bf8:	681c      	ldr	r4, [r3, #0]
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 8012bfa:	2220      	movs	r2, #32
		if (direction) {
 8012bfc:	2c00      	cmp	r4, #0
 8012bfe:	f000 808d 	beq.w	8012d1c <set_next_comm_step+0x39c>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 8012c02:	2108      	movs	r1, #8
 8012c04:	481d      	ldr	r0, [pc, #116]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c06:	f012 f903 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	2108      	movs	r1, #8
 8012c0e:	481b      	ldr	r0, [pc, #108]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c10:	f012 f956 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 8012c14:	2200      	movs	r2, #0
 8012c16:	2108      	movs	r1, #8
 8012c18:	4818      	ldr	r0, [pc, #96]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c1a:	f012 f969 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, positive_oc_mode);
 8012c1e:	2260      	movs	r2, #96	; 0x60
 8012c20:	2100      	movs	r1, #0
 8012c22:	4816      	ldr	r0, [pc, #88]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c24:	f012 f8f4 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, positive_highside);
 8012c28:	2201      	movs	r2, #1
 8012c2a:	2100      	movs	r1, #0
 8012c2c:	4813      	ldr	r0, [pc, #76]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c2e:	f012 f947 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, positive_lowside);
 8012c32:	462a      	mov	r2, r5
 8012c34:	2100      	movs	r1, #0
 8012c36:	e756      	b.n	8012ae6 <set_next_comm_step+0x166>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 8012c38:	2108      	movs	r1, #8
 8012c3a:	4810      	ldr	r0, [pc, #64]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c3c:	f012 f8e8 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012c40:	2201      	movs	r2, #1
 8012c42:	2108      	movs	r1, #8
 8012c44:	480d      	ldr	r0, [pc, #52]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c46:	f012 f93b 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 8012c4a:	4622      	mov	r2, r4
 8012c4c:	2108      	movs	r1, #8
 8012c4e:	480b      	ldr	r0, [pc, #44]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c50:	f012 f94e 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, positive_oc_mode);
 8012c54:	2260      	movs	r2, #96	; 0x60
 8012c56:	4621      	mov	r1, r4
 8012c58:	4808      	ldr	r0, [pc, #32]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c5a:	f012 f8d9 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, positive_highside);
 8012c5e:	2201      	movs	r2, #1
 8012c60:	4621      	mov	r1, r4
 8012c62:	4806      	ldr	r0, [pc, #24]	; (8012c7c <set_next_comm_step+0x2fc>)
 8012c64:	f012 f92c 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, positive_lowside);
 8012c68:	462a      	mov	r2, r5
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	e73b      	b.n	8012ae6 <set_next_comm_step+0x166>
 8012c6e:	bf00      	nop
 8012c70:	20004d48 	.word	0x20004d48
 8012c74:	200059ec 	.word	0x200059ec
 8012c78:	20004e10 	.word	0x20004e10
 8012c7c:	40010000 	.word	0x40010000
		TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_ForcedAction_InActive);
 8012c80:	2240      	movs	r2, #64	; 0x40
 8012c82:	2100      	movs	r1, #0
 8012c84:	4856      	ldr	r0, [pc, #344]	; (8012de0 <set_next_comm_step+0x460>)
 8012c86:	f012 f8c3 	bl	8024e10 <TIM_SelectOCxM>
		TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	4854      	ldr	r0, [pc, #336]	; (8012de0 <set_next_comm_step+0x460>)
 8012c90:	f012 f916 	bl	8024ec0 <TIM_CCxCmd>
		TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 8012c94:	2200      	movs	r2, #0
 8012c96:	4611      	mov	r1, r2
 8012c98:	4851      	ldr	r0, [pc, #324]	; (8012de0 <set_next_comm_step+0x460>)
 8012c9a:	f012 f929 	bl	8024ef0 <TIM_CCxNCmd>
		TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_ForcedAction_InActive);
 8012c9e:	2240      	movs	r2, #64	; 0x40
 8012ca0:	2104      	movs	r1, #4
 8012ca2:	484f      	ldr	r0, [pc, #316]	; (8012de0 <set_next_comm_step+0x460>)
 8012ca4:	f012 f8b4 	bl	8024e10 <TIM_SelectOCxM>
		TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012ca8:	2201      	movs	r2, #1
 8012caa:	2104      	movs	r1, #4
 8012cac:	484c      	ldr	r0, [pc, #304]	; (8012de0 <set_next_comm_step+0x460>)
 8012cae:	f012 f907 	bl	8024ec0 <TIM_CCxCmd>
		TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	2104      	movs	r1, #4
 8012cb6:	484a      	ldr	r0, [pc, #296]	; (8012de0 <set_next_comm_step+0x460>)
 8012cb8:	f012 f91a 	bl	8024ef0 <TIM_CCxNCmd>
		TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_ForcedAction_InActive);
 8012cbc:	2240      	movs	r2, #64	; 0x40
 8012cbe:	2108      	movs	r1, #8
 8012cc0:	4847      	ldr	r0, [pc, #284]	; (8012de0 <set_next_comm_step+0x460>)
 8012cc2:	f012 f8a5 	bl	8024e10 <TIM_SelectOCxM>
		TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	2108      	movs	r1, #8
 8012cca:	4845      	ldr	r0, [pc, #276]	; (8012de0 <set_next_comm_step+0x460>)
 8012ccc:	f012 f8f8 	bl	8024ec0 <TIM_CCxCmd>
		TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	2108      	movs	r1, #8
 8012cd4:	4842      	ldr	r0, [pc, #264]	; (8012de0 <set_next_comm_step+0x460>)
}
 8012cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 8012cda:	f012 b909 	b.w	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_PWM1);
 8012cde:	2108      	movs	r1, #8
 8012ce0:	483f      	ldr	r0, [pc, #252]	; (8012de0 <set_next_comm_step+0x460>)
 8012ce2:	f012 f895 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012ce6:	462a      	mov	r2, r5
 8012ce8:	2108      	movs	r1, #8
 8012cea:	483d      	ldr	r0, [pc, #244]	; (8012de0 <set_next_comm_step+0x460>)
 8012cec:	f012 f8e8 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Enable);
 8012cf0:	2204      	movs	r2, #4
 8012cf2:	2108      	movs	r1, #8
 8012cf4:	483a      	ldr	r0, [pc, #232]	; (8012de0 <set_next_comm_step+0x460>)
 8012cf6:	f012 f8fb 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_Inactive);
 8012cfa:	2220      	movs	r2, #32
			TIM_SelectOCxM(TIM1, TIM_Channel_1, negative_oc_mode);
 8012cfc:	4621      	mov	r1, r4
 8012cfe:	4838      	ldr	r0, [pc, #224]	; (8012de0 <set_next_comm_step+0x460>)
 8012d00:	f012 f886 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, negative_highside);
 8012d04:	4621      	mov	r1, r4
 8012d06:	2201      	movs	r2, #1
 8012d08:	4835      	ldr	r0, [pc, #212]	; (8012de0 <set_next_comm_step+0x460>)
 8012d0a:	f012 f8d9 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, negative_lowside);
 8012d0e:	4621      	mov	r1, r4
 8012d10:	2204      	movs	r2, #4
 8012d12:	4833      	ldr	r0, [pc, #204]	; (8012de0 <set_next_comm_step+0x460>)
}
 8012d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			TIM_CCxNCmd(TIM1, TIM_Channel_1, negative_lowside);
 8012d18:	f012 b8ea 	b.w	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012d1c:	2104      	movs	r1, #4
 8012d1e:	4830      	ldr	r0, [pc, #192]	; (8012de0 <set_next_comm_step+0x460>)
 8012d20:	f012 f876 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012d24:	2201      	movs	r2, #1
 8012d26:	2104      	movs	r1, #4
 8012d28:	482d      	ldr	r0, [pc, #180]	; (8012de0 <set_next_comm_step+0x460>)
 8012d2a:	f012 f8c9 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012d2e:	4622      	mov	r2, r4
 8012d30:	2104      	movs	r1, #4
			TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 8012d32:	482b      	ldr	r0, [pc, #172]	; (8012de0 <set_next_comm_step+0x460>)
 8012d34:	f012 f8dc 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, positive_oc_mode);
 8012d38:	2260      	movs	r2, #96	; 0x60
 8012d3a:	4621      	mov	r1, r4
 8012d3c:	4828      	ldr	r0, [pc, #160]	; (8012de0 <set_next_comm_step+0x460>)
 8012d3e:	f012 f867 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, positive_highside);
 8012d42:	2201      	movs	r2, #1
 8012d44:	4621      	mov	r1, r4
 8012d46:	4826      	ldr	r0, [pc, #152]	; (8012de0 <set_next_comm_step+0x460>)
 8012d48:	f012 f8ba 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, positive_lowside);
 8012d4c:	462a      	mov	r2, r5
 8012d4e:	4621      	mov	r1, r4
 8012d50:	e71d      	b.n	8012b8e <set_next_comm_step+0x20e>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_Inactive);
 8012d52:	4639      	mov	r1, r7
 8012d54:	4822      	ldr	r0, [pc, #136]	; (8012de0 <set_next_comm_step+0x460>)
 8012d56:	f012 f85b 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	4639      	mov	r1, r7
 8012d5e:	4820      	ldr	r0, [pc, #128]	; (8012de0 <set_next_comm_step+0x460>)
 8012d60:	f012 f8ae 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 8012d64:	463a      	mov	r2, r7
 8012d66:	4639      	mov	r1, r7
 8012d68:	e7e3      	b.n	8012d32 <set_next_comm_step+0x3b2>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_Inactive);
 8012d6a:	2104      	movs	r1, #4
 8012d6c:	481c      	ldr	r0, [pc, #112]	; (8012de0 <set_next_comm_step+0x460>)
 8012d6e:	f012 f84f 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012d72:	2201      	movs	r2, #1
 8012d74:	2104      	movs	r1, #4
 8012d76:	481a      	ldr	r0, [pc, #104]	; (8012de0 <set_next_comm_step+0x460>)
 8012d78:	f012 f8a2 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012d7c:	4622      	mov	r2, r4
 8012d7e:	2104      	movs	r1, #4
 8012d80:	4817      	ldr	r0, [pc, #92]	; (8012de0 <set_next_comm_step+0x460>)
 8012d82:	f012 f8b5 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, positive_oc_mode);
 8012d86:	2260      	movs	r2, #96	; 0x60
 8012d88:	2108      	movs	r1, #8
 8012d8a:	4815      	ldr	r0, [pc, #84]	; (8012de0 <set_next_comm_step+0x460>)
 8012d8c:	f012 f840 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, positive_highside);
 8012d90:	2201      	movs	r2, #1
 8012d92:	2108      	movs	r1, #8
 8012d94:	4812      	ldr	r0, [pc, #72]	; (8012de0 <set_next_comm_step+0x460>)
 8012d96:	f012 f893 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, positive_lowside);
 8012d9a:	462a      	mov	r2, r5
 8012d9c:	2108      	movs	r1, #8
 8012d9e:	4810      	ldr	r0, [pc, #64]	; (8012de0 <set_next_comm_step+0x460>)
 8012da0:	f012 f8a6 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_1, negative_oc_mode);
 8012da4:	4632      	mov	r2, r6
 8012da6:	e7a9      	b.n	8012cfc <set_next_comm_step+0x37c>
			TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_Inactive);
 8012da8:	2108      	movs	r1, #8
 8012daa:	480d      	ldr	r0, [pc, #52]	; (8012de0 <set_next_comm_step+0x460>)
 8012dac:	f012 f830 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012db0:	2201      	movs	r2, #1
 8012db2:	2108      	movs	r1, #8
 8012db4:	480a      	ldr	r0, [pc, #40]	; (8012de0 <set_next_comm_step+0x460>)
 8012db6:	f012 f883 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 8012dba:	4622      	mov	r2, r4
 8012dbc:	2108      	movs	r1, #8
 8012dbe:	4808      	ldr	r0, [pc, #32]	; (8012de0 <set_next_comm_step+0x460>)
 8012dc0:	f012 f896 	bl	8024ef0 <TIM_CCxNCmd>
			TIM_SelectOCxM(TIM1, TIM_Channel_2, positive_oc_mode);
 8012dc4:	2260      	movs	r2, #96	; 0x60
 8012dc6:	2104      	movs	r1, #4
 8012dc8:	4805      	ldr	r0, [pc, #20]	; (8012de0 <set_next_comm_step+0x460>)
 8012dca:	f012 f821 	bl	8024e10 <TIM_SelectOCxM>
			TIM_CCxCmd(TIM1, TIM_Channel_2, positive_highside);
 8012dce:	2201      	movs	r2, #1
 8012dd0:	2104      	movs	r1, #4
 8012dd2:	4803      	ldr	r0, [pc, #12]	; (8012de0 <set_next_comm_step+0x460>)
 8012dd4:	f012 f874 	bl	8024ec0 <TIM_CCxCmd>
			TIM_CCxNCmd(TIM1, TIM_Channel_2, positive_lowside);
 8012dd8:	462a      	mov	r2, r5
 8012dda:	2104      	movs	r1, #4
 8012ddc:	e7df      	b.n	8012d9e <set_next_comm_step+0x41e>
 8012dde:	bf00      	nop
 8012de0:	40010000 	.word	0x40010000
	...

08012df0 <full_brake_hw>:
static void full_brake_hw(void) {
 8012df0:	b510      	push	{r4, lr}
	TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_ForcedAction_InActive);
 8012df2:	4c1d      	ldr	r4, [pc, #116]	; (8012e68 <full_brake_hw+0x78>)
 8012df4:	2240      	movs	r2, #64	; 0x40
 8012df6:	4620      	mov	r0, r4
 8012df8:	2100      	movs	r1, #0
 8012dfa:	f012 f809 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012dfe:	4620      	mov	r0, r4
 8012e00:	2201      	movs	r2, #1
 8012e02:	2100      	movs	r1, #0
 8012e04:	f012 f85c 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Enable);
 8012e08:	4620      	mov	r0, r4
 8012e0a:	2204      	movs	r2, #4
 8012e0c:	2100      	movs	r1, #0
 8012e0e:	f012 f86f 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_ForcedAction_InActive);
 8012e12:	4620      	mov	r0, r4
 8012e14:	2240      	movs	r2, #64	; 0x40
 8012e16:	2104      	movs	r1, #4
 8012e18:	f011 fffa 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	2201      	movs	r2, #1
 8012e20:	2104      	movs	r1, #4
 8012e22:	f012 f84d 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Enable);
 8012e26:	2204      	movs	r2, #4
 8012e28:	4620      	mov	r0, r4
 8012e2a:	4611      	mov	r1, r2
 8012e2c:	f012 f860 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_ForcedAction_InActive);
 8012e30:	4620      	mov	r0, r4
 8012e32:	2240      	movs	r2, #64	; 0x40
 8012e34:	2108      	movs	r1, #8
 8012e36:	f011 ffeb 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	2108      	movs	r1, #8
 8012e40:	f012 f83e 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Enable);
 8012e44:	4620      	mov	r0, r4
 8012e46:	2204      	movs	r2, #4
 8012e48:	2108      	movs	r1, #8
 8012e4a:	f012 f851 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 8012e4e:	4620      	mov	r0, r4
 8012e50:	2120      	movs	r1, #32
 8012e52:	f012 f89d 	bl	8024f90 <TIM_GenerateEvent>
	set_switching_frequency(conf->m_bldc_f_sw_max);
 8012e56:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <full_brake_hw+0x7c>)
 8012e58:	681b      	ldr	r3, [r3, #0]
}
 8012e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_switching_frequency(conf->m_bldc_f_sw_max);
 8012e5e:	ed93 0a5a 	vldr	s0, [r3, #360]	; 0x168
 8012e62:	f7ff bccd 	b.w	8012800 <set_switching_frequency>
 8012e66:	bf00      	nop
 8012e68:	40010000 	.word	0x40010000
 8012e6c:	20004d48 	.word	0x20004d48

08012e70 <stop_pwm_hw>:
static void stop_pwm_hw(void) {
 8012e70:	b510      	push	{r4, lr}
	TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_ForcedAction_InActive);
 8012e72:	4c1d      	ldr	r4, [pc, #116]	; (8012ee8 <stop_pwm_hw+0x78>)
 8012e74:	2240      	movs	r2, #64	; 0x40
 8012e76:	4620      	mov	r0, r4
 8012e78:	2100      	movs	r1, #0
 8012e7a:	f011 ffc9 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 8012e7e:	4620      	mov	r0, r4
 8012e80:	2201      	movs	r2, #1
 8012e82:	2100      	movs	r1, #0
 8012e84:	f012 f81c 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 8012e88:	2200      	movs	r2, #0
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	4611      	mov	r1, r2
 8012e8e:	f012 f82f 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_ForcedAction_InActive);
 8012e92:	4620      	mov	r0, r4
 8012e94:	2240      	movs	r2, #64	; 0x40
 8012e96:	2104      	movs	r1, #4
 8012e98:	f011 ffba 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	2104      	movs	r1, #4
 8012ea2:	f012 f80d 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2104      	movs	r1, #4
 8012eac:	f012 f820 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_ForcedAction_InActive);
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	2240      	movs	r2, #64	; 0x40
 8012eb4:	2108      	movs	r1, #8
 8012eb6:	f011 ffab 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 8012eba:	4620      	mov	r0, r4
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	2108      	movs	r1, #8
 8012ec0:	f011 fffe 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	2108      	movs	r1, #8
 8012eca:	f012 f811 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 8012ece:	4620      	mov	r0, r4
 8012ed0:	2120      	movs	r1, #32
 8012ed2:	f012 f85d 	bl	8024f90 <TIM_GenerateEvent>
	set_switching_frequency(conf->m_bldc_f_sw_max);
 8012ed6:	4b05      	ldr	r3, [pc, #20]	; (8012eec <stop_pwm_hw+0x7c>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
}
 8012eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_switching_frequency(conf->m_bldc_f_sw_max);
 8012ede:	ed93 0a5a 	vldr	s0, [r3, #360]	; 0x168
 8012ee2:	f7ff bc8d 	b.w	8012800 <set_switching_frequency>
 8012ee6:	bf00      	nop
 8012ee8:	40010000 	.word	0x40010000
 8012eec:	20004d48 	.word	0x20004d48

08012ef0 <commutate>:
	last_pwm_cycles_sum = pwm_cycles_sum;
 8012ef0:	4b2f      	ldr	r3, [pc, #188]	; (8012fb0 <commutate+0xc0>)
 8012ef2:	4a30      	ldr	r2, [pc, #192]	; (8012fb4 <commutate+0xc4>)
 8012ef4:	6819      	ldr	r1, [r3, #0]
static void commutate(int steps) {
 8012ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
	last_pwm_cycles_sums[comm_step - 1] = pwm_cycles_sum;
 8012ef8:	4c2f      	ldr	r4, [pc, #188]	; (8012fb8 <commutate+0xc8>)
	last_pwm_cycles_sum = pwm_cycles_sum;
 8012efa:	6011      	str	r1, [r2, #0]
	last_pwm_cycles_sums[comm_step - 1] = pwm_cycles_sum;
 8012efc:	6821      	ldr	r1, [r4, #0]
 8012efe:	4a2f      	ldr	r2, [pc, #188]	; (8012fbc <commutate+0xcc>)
	if (conf->motor_type == MOTOR_TYPE_BLDC && sensorless_now) {
 8012f00:	4d2f      	ldr	r5, [pc, #188]	; (8012fc0 <commutate+0xd0>)
	last_pwm_cycles_sums[comm_step - 1] = pwm_cycles_sum;
 8012f02:	f8d3 e000 	ldr.w	lr, [r3]
	pwm_cycles = 0;
 8012f06:	4e2f      	ldr	r6, [pc, #188]	; (8012fc4 <commutate+0xd4>)
	last_pwm_cycles_sums[comm_step - 1] = pwm_cycles_sum;
 8012f08:	3901      	subs	r1, #1
 8012f0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	pwm_cycles_sum = 0;
 8012f0e:	2700      	movs	r7, #0
	last_pwm_cycles_sums[comm_step - 1] = pwm_cycles_sum;
 8012f10:	f8c2 e000 	str.w	lr, [r2]
	pwm_cycles_sum = 0;
 8012f14:	601f      	str	r7, [r3, #0]
	if (conf->motor_type == MOTOR_TYPE_BLDC && sensorless_now) {
 8012f16:	682a      	ldr	r2, [r5, #0]
	pwm_cycles = 0;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	6033      	str	r3, [r6, #0]
	if (conf->motor_type == MOTOR_TYPE_BLDC && sensorless_now) {
 8012f1c:	7893      	ldrb	r3, [r2, #2]
static void commutate(int steps) {
 8012f1e:	b087      	sub	sp, #28
	if (conf->motor_type == MOTOR_TYPE_BLDC && sensorless_now) {
 8012f20:	bb23      	cbnz	r3, 8012f6c <commutate+0x7c>
 8012f22:	4b29      	ldr	r3, [pc, #164]	; (8012fc8 <commutate+0xd8>)
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	b30b      	cbz	r3, 8012f6c <commutate+0x7c>
		comm_step += steps;
 8012f28:	6823      	ldr	r3, [r4, #0]
 8012f2a:	4418      	add	r0, r3
 8012f2c:	6020      	str	r0, [r4, #0]
		while (comm_step > 6) {
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	2b06      	cmp	r3, #6
 8012f32:	dd0b      	ble.n	8012f4c <commutate+0x5c>
			comm_step -= 6;
 8012f34:	6823      	ldr	r3, [r4, #0]
 8012f36:	3b06      	subs	r3, #6
 8012f38:	6023      	str	r3, [r4, #0]
		while (comm_step > 6) {
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	2b06      	cmp	r3, #6
 8012f3e:	dcf9      	bgt.n	8012f34 <commutate+0x44>
		while (comm_step < 1) {
 8012f40:	6823      	ldr	r3, [r4, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	dc05      	bgt.n	8012f52 <commutate+0x62>
			comm_step += 6;
 8012f46:	6823      	ldr	r3, [r4, #0]
 8012f48:	3306      	adds	r3, #6
 8012f4a:	6023      	str	r3, [r4, #0]
		while (comm_step < 1) {
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	ddf9      	ble.n	8012f46 <commutate+0x56>
		update_rpm_tacho();
 8012f52:	f7ff fb85 	bl	8012660 <update_rpm_tacho>
		if (!(state == MC_STATE_RUNNING)) {
 8012f56:	4b1d      	ldr	r3, [pc, #116]	; (8012fcc <commutate+0xdc>)
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	2b02      	cmp	r3, #2
 8012f5c:	d003      	beq.n	8012f66 <commutate+0x76>
			update_sensor_mode();
 8012f5e:	f7ff fbcf 	bl	8012700 <update_sensor_mode>
}
 8012f62:	b007      	add	sp, #28
 8012f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		set_next_comm_step(comm_step);
 8012f66:	6820      	ldr	r0, [r4, #0]
 8012f68:	f7ff fd0a 	bl	8012980 <set_next_comm_step>
	TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 8012f6c:	2120      	movs	r1, #32
 8012f6e:	4818      	ldr	r0, [pc, #96]	; (8012fd0 <commutate+0xe0>)
	timer_tmp = timer_struct;
 8012f70:	4e18      	ldr	r6, [pc, #96]	; (8012fd4 <commutate+0xe4>)
	TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 8012f72:	f012 f80d 	bl	8024f90 <TIM_GenerateEvent>
	has_commutated = 1;
 8012f76:	4b18      	ldr	r3, [pc, #96]	; (8012fd8 <commutate+0xe8>)
 8012f78:	2201      	movs	r2, #1
 8012f7a:	601a      	str	r2, [r3, #0]
	utils_sys_lock_cnt();
 8012f7c:	f003 f8d0 	bl	8016120 <utils_sys_lock_cnt>
	timer_tmp = timer_struct;
 8012f80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012f82:	466c      	mov	r4, sp
 8012f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f86:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012f8a:	e884 0003 	stmia.w	r4, {r0, r1}
	utils_sys_unlock_cnt();
 8012f8e:	f003 f8d7 	bl	8016140 <utils_sys_unlock_cnt>
	update_adc_sample_pos(&timer_tmp);
 8012f92:	4668      	mov	r0, sp
 8012f94:	f7ff fa74 	bl	8012480 <update_adc_sample_pos>
	set_next_timer_settings(&timer_tmp);
 8012f98:	4668      	mov	r0, sp
 8012f9a:	f7ff fc19 	bl	80127d0 <set_next_timer_settings>
	update_sensor_mode();
 8012f9e:	f7ff fbaf 	bl	8012700 <update_sensor_mode>
	conf->comm_mode = comm_mode_next;
 8012fa2:	4b0e      	ldr	r3, [pc, #56]	; (8012fdc <commutate+0xec>)
 8012fa4:	682a      	ldr	r2, [r5, #0]
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	7053      	strb	r3, [r2, #1]
}
 8012fac:	b007      	add	sp, #28
 8012fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fb0:	20005418 	.word	0x20005418
 8012fb4:	20005364 	.word	0x20005364
 8012fb8:	20004d44 	.word	0x20004d44
 8012fbc:	20005368 	.word	0x20005368
 8012fc0:	20004d48 	.word	0x20004d48
 8012fc4:	20005414 	.word	0x20005414
 8012fc8:	200059e0 	.word	0x200059e0
 8012fcc:	200059ec 	.word	0x200059ec
 8012fd0:	40010000 	.word	0x40010000
 8012fd4:	20005a00 	.word	0x20005a00
 8012fd8:	20004f3c 	.word	0x20004f3c
 8012fdc:	20004d40 	.word	0x20004d40

08012fe0 <timer_thread>:
static THD_FUNCTION(timer_thread, arg) {
 8012fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe4:	4b80      	ldr	r3, [pc, #512]	; (80131e8 <timer_thread+0x208>)
		if (timer_thd_stop) {
 8012fe6:	4f81      	ldr	r7, [pc, #516]	; (80131ec <timer_thread+0x20c>)
 8012fe8:	699a      	ldr	r2, [r3, #24]
 8012fea:	783b      	ldrb	r3, [r7, #0]
 8012fec:	4980      	ldr	r1, [pc, #512]	; (80131f0 <timer_thread+0x210>)
static THD_FUNCTION(timer_thread, arg) {
 8012fee:	ed2d 8b06 	vpush	{d8-d10}
 8012ff2:	6191      	str	r1, [r2, #24]
		if (timer_thd_stop) {
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d157      	bne.n	80130a8 <timer_thread+0xc8>
 8012ff8:	4e7e      	ldr	r6, [pc, #504]	; (80131f4 <timer_thread+0x214>)
 8012ffa:	4d7f      	ldr	r5, [pc, #508]	; (80131f8 <timer_thread+0x218>)
			tachometer_for_direction = 0;
 8012ffc:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8013240 <timer_thread+0x260>
 8013000:	ed9f aa7e 	vldr	s20, [pc, #504]	; 80131fc <timer_thread+0x21c>
 8013004:	eddf 9a7e 	vldr	s19, [pc, #504]	; 8013200 <timer_thread+0x220>
					if ((max_s - min_s) / ((max_s + min_s) / 2.0) > 1.2) {
 8013008:	ed9f 9a7e 	vldr	s18, [pc, #504]	; 8013204 <timer_thread+0x224>
	return rpm_now / (GET_INPUT_VOLTAGE() * fabsf(dutycycle_now));
 801300c:	eddf 8a7e 	vldr	s17, [pc, #504]	; 8013208 <timer_thread+0x228>
 8013010:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 801320c <timer_thread+0x22c>
 8013014:	e006      	b.n	8013024 <timer_thread+0x44>
		cnt_tmp++;
 8013016:	602b      	str	r3, [r5, #0]
		chThdSleepMilliseconds(1);
 8013018:	200a      	movs	r0, #10
 801301a:	f7fa fce1 	bl	800d9e0 <chThdSleep>
		if (timer_thd_stop) {
 801301e:	783b      	ldrb	r3, [r7, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d141      	bne.n	80130a8 <timer_thread+0xc8>
		if (state == MC_STATE_OFF) {
 8013024:	7833      	ldrb	r3, [r6, #0]
 8013026:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 801302a:	2b00      	cmp	r3, #0
 801302c:	d042      	beq.n	80130b4 <timer_thread+0xd4>
			tachometer_for_direction = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	f8c8 3000 	str.w	r3, [r8]
		cnt_tmp++;
 8013034:	682b      	ldr	r3, [r5, #0]
 8013036:	3301      	adds	r3, #1
		if (cnt_tmp >= 10) {
 8013038:	2b09      	cmp	r3, #9
 801303a:	ddec      	ble.n	8013016 <timer_thread+0x36>
			if (state == MC_STATE_RUNNING) {
 801303c:	7833      	ldrb	r3, [r6, #0]
			cnt_tmp = 0;
 801303e:	2200      	movs	r2, #0
			if (state == MC_STATE_RUNNING) {
 8013040:	2b02      	cmp	r3, #2
			cnt_tmp = 0;
 8013042:	602a      	str	r2, [r5, #0]
			if (state == MC_STATE_RUNNING) {
 8013044:	f000 80b5 	beq.w	80131b2 <timer_thread+0x1d2>
			} else if (state == MC_STATE_OFF) {
 8013048:	7833      	ldrb	r3, [r6, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1e4      	bne.n	8013018 <timer_thread+0x38>
				if (dutycycle_now >= conf->l_min_duty) {
 801304e:	4b70      	ldr	r3, [pc, #448]	; (8013210 <timer_thread+0x230>)
 8013050:	4a70      	ldr	r2, [pc, #448]	; (8013214 <timer_thread+0x234>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8013058:	edd2 7a00 	vldr	s15, [r2]
 801305c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013064:	d8d8      	bhi.n	8013018 <timer_thread+0x38>
	return rpm_now / (GET_INPUT_VOLTAGE() * fabsf(dutycycle_now));
 8013066:	496c      	ldr	r1, [pc, #432]	; (8013218 <timer_thread+0x238>)
 8013068:	4b6c      	ldr	r3, [pc, #432]	; (801321c <timer_thread+0x23c>)
 801306a:	ed91 0a00 	vldr	s0, [r1]
 801306e:	8a1b      	ldrh	r3, [r3, #16]
 8013070:	ed92 7a00 	vldr	s14, [r2]
					filter_add_sample((float*)kv_fir_samples, mcpwm_get_kv(),
 8013074:	4a6a      	ldr	r2, [pc, #424]	; (8013220 <timer_thread+0x240>)
 8013076:	486b      	ldr	r0, [pc, #428]	; (8013224 <timer_thread+0x244>)
	return rpm_now / (GET_INPUT_VOLTAGE() * fabsf(dutycycle_now));
 8013078:	b29b      	uxth	r3, r3
 801307a:	ee07 3a90 	vmov	s15, r3
 801307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013082:	eeb0 7ac7 	vabs.f32	s14, s14
 8013086:	ee67 7aa8 	vmul.f32	s15, s15, s17
					filter_add_sample((float*)kv_fir_samples, mcpwm_get_kv(),
 801308a:	2107      	movs	r1, #7
	return rpm_now / (GET_INPUT_VOLTAGE() * fabsf(dutycycle_now));
 801308c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013090:	ee67 7a87 	vmul.f32	s15, s15, s14
					filter_add_sample((float*)kv_fir_samples, mcpwm_get_kv(),
 8013094:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013098:	f7ff f962 	bl	8012360 <filter_add_sample>
		chThdSleepMilliseconds(1);
 801309c:	200a      	movs	r0, #10
 801309e:	f7fa fc9f 	bl	800d9e0 <chThdSleep>
		if (timer_thd_stop) {
 80130a2:	783b      	ldrb	r3, [r7, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d0bd      	beq.n	8013024 <timer_thread+0x44>
}
 80130a8:	ecbd 8b06 	vpop	{d8-d10}
			timer_thd_stop = false;
 80130ac:	2300      	movs	r3, #0
 80130ae:	703b      	strb	r3, [r7, #0]
}
 80130b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			amp = filter_run_fir_iteration((float*)amp_fir_samples,
 80130b4:	4b5c      	ldr	r3, [pc, #368]	; (8013228 <timer_thread+0x248>)
 80130b6:	495d      	ldr	r1, [pc, #372]	; (801322c <timer_thread+0x24c>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	485d      	ldr	r0, [pc, #372]	; (8013230 <timer_thread+0x250>)
 80130bc:	2207      	movs	r2, #7
 80130be:	f7ff f927 	bl	8012310 <filter_run_fir_iteration>
			if (conf->motor_type == MOTOR_TYPE_DC) {
 80130c2:	4b53      	ldr	r3, [pc, #332]	; (8013210 <timer_thread+0x230>)
 80130c4:	f8d3 e000 	ldr.w	lr, [r3]
 80130c8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d064      	beq.n	801319c <timer_thread+0x1bc>
				if (sensorless_now) {
 80130d2:	4b58      	ldr	r3, [pc, #352]	; (8013234 <timer_thread+0x254>)
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d054      	beq.n	8013188 <timer_thread+0x1a8>
 80130de:	4856      	ldr	r0, [pc, #344]	; (8013238 <timer_thread+0x258>)
 80130e0:	eef0 7a4a 	vmov.f32	s15, s20
 80130e4:	eeb0 7a69 	vmov.f32	s14, s19
 80130e8:	4623      	mov	r3, r4
						if (last_pwm_cycles_sums[i] < min_s) {
 80130ea:	009a      	lsls	r2, r3, #2
 80130ec:	1881      	adds	r1, r0, r2
 80130ee:	edd1 6a00 	vldr	s13, [r1]
 80130f2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80130f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							min_s = last_pwm_cycles_sums[i];
 80130fa:	bf48      	it	mi
 80130fc:	ed91 7a00 	vldrmi	s14, [r1]
						if (last_pwm_cycles_sums[i] > max_s) {
 8013100:	edd1 6a00 	vldr	s13, [r1]
 8013104:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					for (int i = 0;i < 6;i++) {
 801310c:	f103 0301 	add.w	r3, r3, #1
							max_s = last_pwm_cycles_sums[i];
 8013110:	bfc8      	it	gt
 8013112:	edd1 7a00 	vldrgt	s15, [r1]
					for (int i = 0;i < 6;i++) {
 8013116:	2b06      	cmp	r3, #6
 8013118:	d1e7      	bne.n	80130ea <timer_thread+0x10a>
					if ((max_s - min_s) / ((max_s + min_s) / 2.0) > 1.2) {
 801311a:	ee77 6a27 	vadd.f32	s13, s14, s15
 801311e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013126:	ee26 7a86 	vmul.f32	s14, s13, s12
 801312a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801312e:	eef4 6ac9 	vcmpe.f32	s13, s18
 8013132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013136:	dd46      	ble.n	80131c6 <timer_thread+0x1e6>
						if (tachometer_for_direction > 12) {
 8013138:	f8d8 3000 	ldr.w	r3, [r8]
							if (direction == 1) {
 801313c:	4a3f      	ldr	r2, [pc, #252]	; (801323c <timer_thread+0x25c>)
						if (tachometer_for_direction > 12) {
 801313e:	2b0c      	cmp	r3, #12
 8013140:	dd07      	ble.n	8013152 <timer_thread+0x172>
							if (direction == 1) {
 8013142:	6813      	ldr	r3, [r2, #0]
 8013144:	2b01      	cmp	r3, #1
 8013146:	d04b      	beq.n	80131e0 <timer_thread+0x200>
							direction = 1;
 8013148:	2301      	movs	r3, #1
 801314a:	6013      	str	r3, [r2, #0]
						tachometer_for_direction = 0;
 801314c:	2300      	movs	r3, #0
 801314e:	f8c8 3000 	str.w	r3, [r8]
			if (direction == 1) {
 8013152:	6813      	ldr	r3, [r2, #0]
				dutycycle_now = amp / (float)ADC_Value[ADC_IND_VIN_SENS];
 8013154:	4a2f      	ldr	r2, [pc, #188]	; (8013214 <timer_thread+0x234>)
			utils_truncate_number((float*)&dutycycle_now, -conf->l_max_duty, conf->l_max_duty);
 8013156:	482f      	ldr	r0, [pc, #188]	; (8013214 <timer_thread+0x234>)
			if (direction == 1) {
 8013158:	2b01      	cmp	r3, #1
				dutycycle_now = amp / (float)ADC_Value[ADC_IND_VIN_SENS];
 801315a:	4b30      	ldr	r3, [pc, #192]	; (801321c <timer_thread+0x23c>)
 801315c:	8a1b      	ldrh	r3, [r3, #16]
 801315e:	b29b      	uxth	r3, r3
 8013160:	ee07 3a90 	vmov	s15, r3
 8013164:	eef8 7a67 	vcvt.f32.u32	s15, s15
				dutycycle_now = -amp / (float)ADC_Value[ADC_IND_VIN_SENS];
 8013168:	bf18      	it	ne
 801316a:	eeb1 0a40 	vnegne.f32	s0, s0
 801316e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8013172:	ed82 7a00 	vstr	s14, [r2]
			utils_truncate_number((float*)&dutycycle_now, -conf->l_max_duty, conf->l_max_duty);
 8013176:	ed9e 0a16 	vldr	s0, [lr, #88]	; 0x58
 801317a:	edde 0a16 	vldr	s1, [lr, #88]	; 0x58
 801317e:	eeb1 0a40 	vneg.f32	s0, s0
 8013182:	f002 fcbd 	bl	8015b00 <utils_truncate_number>
 8013186:	e755      	b.n	8013034 <timer_thread+0x54>
					if (tachometer_for_direction < -3) {
 8013188:	f8d8 3000 	ldr.w	r3, [r8]
 801318c:	3303      	adds	r3, #3
 801318e:	da1f      	bge.n	80131d0 <timer_thread+0x1f0>
						if (direction == 1) {
 8013190:	4a2a      	ldr	r2, [pc, #168]	; (801323c <timer_thread+0x25c>)
 8013192:	6813      	ldr	r3, [r2, #0]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d1d7      	bne.n	8013148 <timer_thread+0x168>
							direction = 0;
 8013198:	6011      	str	r1, [r2, #0]
 801319a:	e7d7      	b.n	801314c <timer_thread+0x16c>
				if (amp > 0) {
 801319c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
					direction = 0;
 80131a0:	4a26      	ldr	r2, [pc, #152]	; (801323c <timer_thread+0x25c>)
				if (amp > 0) {
 80131a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					direction = 0;
 80131a6:	bfce      	itee	gt
 80131a8:	6014      	strgt	r4, [r2, #0]
					amp = -amp;
 80131aa:	eeb1 0a40 	vnegle.f32	s0, s0
					direction = 1;
 80131ae:	6013      	strle	r3, [r2, #0]
 80131b0:	e7cf      	b.n	8013152 <timer_thread+0x172>
	return rpm_now / (GET_INPUT_VOLTAGE() * fabsf(dutycycle_now));
 80131b2:	4a19      	ldr	r2, [pc, #100]	; (8013218 <timer_thread+0x238>)
 80131b4:	4b19      	ldr	r3, [pc, #100]	; (801321c <timer_thread+0x23c>)
 80131b6:	4917      	ldr	r1, [pc, #92]	; (8013214 <timer_thread+0x234>)
 80131b8:	ed92 0a00 	vldr	s0, [r2]
 80131bc:	8a1b      	ldrh	r3, [r3, #16]
				filter_add_sample((float*)kv_fir_samples, mcpwm_get_kv(),
 80131be:	4a18      	ldr	r2, [pc, #96]	; (8013220 <timer_thread+0x240>)
	return rpm_now / (GET_INPUT_VOLTAGE() * fabsf(dutycycle_now));
 80131c0:	ed91 7a00 	vldr	s14, [r1]
 80131c4:	e757      	b.n	8013076 <timer_thread+0x96>
						tachometer_for_direction = 0;
 80131c6:	2300      	movs	r3, #0
 80131c8:	f8c8 3000 	str.w	r3, [r8]
 80131cc:	4a1b      	ldr	r2, [pc, #108]	; (801323c <timer_thread+0x25c>)
 80131ce:	e7c0      	b.n	8013152 <timer_thread+0x172>
					} else if (tachometer_for_direction > 0) {
 80131d0:	f8d8 3000 	ldr.w	r3, [r8]
 80131d4:	4a19      	ldr	r2, [pc, #100]	; (801323c <timer_thread+0x25c>)
 80131d6:	2b00      	cmp	r3, #0
						tachometer_for_direction = 0;
 80131d8:	bfc8      	it	gt
 80131da:	f8c8 1000 	strgt.w	r1, [r8]
 80131de:	e7b8      	b.n	8013152 <timer_thread+0x172>
								direction = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	6013      	str	r3, [r2, #0]
 80131e4:	e7b2      	b.n	801314c <timer_thread+0x16c>
 80131e6:	bf00      	nop
 80131e8:	20001a40 	.word	0x20001a40
 80131ec:	20005a18 	.word	0x20005a18
 80131f0:	0802f0c0 	.word	0x0802f0c0
 80131f4:	200059ec 	.word	0x200059ec
 80131f8:	20004d3c 	.word	0x20004d3c
 80131fc:	00000000 	.word	0x00000000
 8013200:	551184e7 	.word	0x551184e7
 8013204:	3f99999a 	.word	0x3f99999a
 8013208:	3a534067 	.word	0x3a534067
 801320c:	4195d174 	.word	0x4195d174
 8013210:	20004d48 	.word	0x20004d48
 8013214:	20004e14 	.word	0x20004e14
 8013218:	2000543c 	.word	0x2000543c
 801321c:	2000c034 	.word	0x2000c034
 8013220:	20005150 	.word	0x20005150
 8013224:	20005154 	.word	0x20005154
 8013228:	20004b38 	.word	0x20004b38
 801322c:	20004938 	.word	0x20004938
 8013230:	20004b3c 	.word	0x20004b3c
 8013234:	200059e0 	.word	0x200059e0
 8013238:	20005368 	.word	0x20005368
 801323c:	20004e10 	.word	0x20004e10
 8013240:	200059fc 	.word	0x200059fc
	...

08013250 <mcpwm_deinit>:
void mcpwm_deinit(void) {
 8013250:	b538      	push	{r3, r4, r5, lr}
	init_done = false;
 8013252:	4b17      	ldr	r3, [pc, #92]	; (80132b0 <mcpwm_deinit+0x60>)
	timer_thd_stop = true;
 8013254:	4c17      	ldr	r4, [pc, #92]	; (80132b4 <mcpwm_deinit+0x64>)
	rpm_thd_stop = true;
 8013256:	4d18      	ldr	r5, [pc, #96]	; (80132b8 <mcpwm_deinit+0x68>)
	init_done = false;
 8013258:	2200      	movs	r2, #0
 801325a:	701a      	strb	r2, [r3, #0]
	WWDG_DeInit();
 801325c:	f011 ff28 	bl	80250b0 <WWDG_DeInit>
	timer_thd_stop = true;
 8013260:	2301      	movs	r3, #1
 8013262:	7023      	strb	r3, [r4, #0]
	rpm_thd_stop = true;
 8013264:	702b      	strb	r3, [r5, #0]
	while (timer_thd_stop || rpm_thd_stop) {
 8013266:	e001      	b.n	801326c <mcpwm_deinit+0x1c>
		chThdSleepMilliseconds(1);
 8013268:	f7fa fbba 	bl	800d9e0 <chThdSleep>
	while (timer_thd_stop || rpm_thd_stop) {
 801326c:	7823      	ldrb	r3, [r4, #0]
		chThdSleepMilliseconds(1);
 801326e:	200a      	movs	r0, #10
	while (timer_thd_stop || rpm_thd_stop) {
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1f9      	bne.n	8013268 <mcpwm_deinit+0x18>
 8013274:	782b      	ldrb	r3, [r5, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1f6      	bne.n	8013268 <mcpwm_deinit+0x18>
	TIM_DeInit(TIM1);
 801327a:	4810      	ldr	r0, [pc, #64]	; (80132bc <mcpwm_deinit+0x6c>)
 801327c:	f011 fb78 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM2);
 8013280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8013284:	f011 fb74 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM8);
 8013288:	480d      	ldr	r0, [pc, #52]	; (80132c0 <mcpwm_deinit+0x70>)
 801328a:	f011 fb71 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM12);
 801328e:	480d      	ldr	r0, [pc, #52]	; (80132c4 <mcpwm_deinit+0x74>)
 8013290:	f011 fb6e 	bl	8024970 <TIM_DeInit>
	ADC_DeInit();
 8013294:	f010 ffac 	bl	80241f0 <ADC_DeInit>
	DMA_DeInit(DMA2_Stream4);
 8013298:	480b      	ldr	r0, [pc, #44]	; (80132c8 <mcpwm_deinit+0x78>)
 801329a:	f011 f8e1 	bl	8024460 <DMA_DeInit>
	nvicDisableVector(ADC_IRQn);
 801329e:	2012      	movs	r0, #18
 80132a0:	f7fb ff4e 	bl	800f140 <nvicDisableVector>
	dmaStreamRelease(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)));
 80132a4:	4809      	ldr	r0, [pc, #36]	; (80132cc <mcpwm_deinit+0x7c>)
}
 80132a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dmaStreamRelease(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)));
 80132aa:	f7fc b961 	b.w	800f570 <dmaStreamRelease>
 80132ae:	bf00      	nop
 80132b0:	20004f4c 	.word	0x20004f4c
 80132b4:	20005a18 	.word	0x20005a18
 80132b8:	20005440 	.word	0x20005440
 80132bc:	40010000 	.word	0x40010000
 80132c0:	40010400 	.word	0x40010400
 80132c4:	40001800 	.word	0x40001800
 80132c8:	40026470 	.word	0x40026470
 80132cc:	0802eb10 	.word	0x0802eb10

080132d0 <mcpwm_init_done>:
	return init_done;
 80132d0:	4b01      	ldr	r3, [pc, #4]	; (80132d8 <mcpwm_init_done+0x8>)
 80132d2:	7818      	ldrb	r0, [r3, #0]
}
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	20004f4c 	.word	0x20004f4c
 80132dc:	00000000 	.word	0x00000000

080132e0 <mcpwm_init_hall_table>:
void mcpwm_init_hall_table(int8_t *table) {
 80132e0:	b4f0      	push	{r4, r5, r6, r7}
	const int fwd_to_rev[7] = {-1,1,6,5,4,3,2};
 80132e2:	4f0f      	ldr	r7, [pc, #60]	; (8013320 <mcpwm_init_hall_table+0x40>)
 80132e4:	4c0f      	ldr	r4, [pc, #60]	; (8013324 <mcpwm_init_hall_table+0x44>)
void mcpwm_init_hall_table(int8_t *table) {
 80132e6:	4605      	mov	r5, r0
	const int fwd_to_rev[7] = {-1,1,6,5,4,3,2};
 80132e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
void mcpwm_init_hall_table(int8_t *table) {
 80132ea:	b088      	sub	sp, #32
	const int fwd_to_rev[7] = {-1,1,6,5,4,3,2};
 80132ec:	ae01      	add	r6, sp, #4
 80132ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80132f0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80132f4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80132f8:	1e6a      	subs	r2, r5, #1
 80132fa:	1de8      	adds	r0, r5, #7
		hall_to_phase_table[8 + i] = table[i];
 80132fc:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
 8013300:	f844 3b04 	str.w	r3, [r4], #4
		hall_to_phase_table[i] = fwd_to_rev[ind_now];
 8013304:	a908      	add	r1, sp, #32
 8013306:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		if (ind_now < 1) {
 801330a:	2b00      	cmp	r3, #0
		hall_to_phase_table[i] = fwd_to_rev[ind_now];
 801330c:	bfc8      	it	gt
 801330e:	f851 3c1c 	ldrgt.w	r3, [r1, #-28]
 8013312:	f844 3c24 	str.w	r3, [r4, #-36]
	for (int i = 0;i < 8;i++) {
 8013316:	4282      	cmp	r2, r0
 8013318:	d1f0      	bne.n	80132fc <mcpwm_init_hall_table+0x1c>
}
 801331a:	b008      	add	sp, #32
 801331c:	bcf0      	pop	{r4, r5, r6, r7}
 801331e:	4770      	bx	lr
 8013320:	0802e9d0 	.word	0x0802e9d0
 8013324:	20004f1c 	.word	0x20004f1c
	...

08013330 <mcpwm_init>:
void mcpwm_init(volatile mc_configuration *configuration) {
 8013330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conf = configuration;
 8013334:	4ccd      	ldr	r4, [pc, #820]	; (801366c <mcpwm_init+0x33c>)
	comm_step = 1;
 8013336:	f8df b3cc 	ldr.w	fp, [pc, #972]	; 8013704 <mcpwm_init+0x3d4>
	direction = 1;
 801333a:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8013708 <mcpwm_init+0x3d8>
	rpm_now = 0.0;
 801333e:	f8df 83cc 	ldr.w	r8, [pc, #972]	; 801370c <mcpwm_init+0x3dc>
	TIM_DeInit(TIM1);
 8013342:	4ecb      	ldr	r6, [pc, #812]	; (8013670 <mcpwm_init+0x340>)
	TIM_DeInit(TIM8);
 8013344:	4fcb      	ldr	r7, [pc, #812]	; (8013674 <mcpwm_init+0x344>)
void mcpwm_init(volatile mc_configuration *configuration) {
 8013346:	b0af      	sub	sp, #188	; 0xbc
 8013348:	4682      	mov	sl, r0
	utils_sys_lock_cnt();
 801334a:	f002 fee9 	bl	8016120 <utils_sys_lock_cnt>
	init_done= false;
 801334e:	4bca      	ldr	r3, [pc, #808]	; (8013678 <mcpwm_init+0x348>)
	conf = configuration;
 8013350:	f8c4 a000 	str.w	sl, [r4]
	init_done= false;
 8013354:	2400      	movs	r4, #0
 8013356:	701c      	strb	r4, [r3, #0]
	detect_step = 0;
 8013358:	4bc8      	ldr	r3, [pc, #800]	; (801367c <mcpwm_init+0x34c>)
	rpm_now = 0.0;
 801335a:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8013680 <mcpwm_init+0x350>
	dutycycle_set = 0.0;
 801335e:	f8df c3b0 	ldr.w	ip, [pc, #944]	; 8013710 <mcpwm_init+0x3e0>
	dutycycle_now = 0.0;
 8013362:	f8df e3b0 	ldr.w	lr, [pc, #944]	; 8013714 <mcpwm_init+0x3e4>
	speed_pid_set_rpm = 0.0;
 8013366:	48c7      	ldr	r0, [pc, #796]	; (8013684 <mcpwm_init+0x354>)
	pos_pid_set_pos = 0.0;
 8013368:	49c7      	ldr	r1, [pc, #796]	; (8013688 <mcpwm_init+0x358>)
	current_set = 0.0;
 801336a:	4ac8      	ldr	r2, [pc, #800]	; (801368c <mcpwm_init+0x35c>)
	comm_step = 1;
 801336c:	2501      	movs	r5, #1
 801336e:	f8cb 5000 	str.w	r5, [fp]
	detect_step = 0;
 8013372:	601c      	str	r4, [r3, #0]
	tachometer = 0;
 8013374:	4bc6      	ldr	r3, [pc, #792]	; (8013690 <mcpwm_init+0x360>)
	direction = 1;
 8013376:	f8c9 5000 	str.w	r5, [r9]
	rpm_now = 0.0;
 801337a:	edc8 7a00 	vstr	s15, [r8]
	dutycycle_set = 0.0;
 801337e:	edcc 7a00 	vstr	s15, [ip]
	dutycycle_now = 0.0;
 8013382:	edce 7a00 	vstr	s15, [lr]
	speed_pid_set_rpm = 0.0;
 8013386:	edc0 7a00 	vstr	s15, [r0]
	pos_pid_set_pos = 0.0;
 801338a:	edc1 7a00 	vstr	s15, [r1]
	current_set = 0.0;
 801338e:	edc2 7a00 	vstr	s15, [r2]
	tachometer = 0;
 8013392:	601c      	str	r4, [r3, #0]
	tachometer_abs = 0;
 8013394:	4bbf      	ldr	r3, [pc, #764]	; (8013694 <mcpwm_init+0x364>)
	last_current_sample_filtered = 0.0;
 8013396:	f8df 9380 	ldr.w	r9, [pc, #896]	; 8013718 <mcpwm_init+0x3e8>
	tachometer_abs = 0;
 801339a:	601c      	str	r4, [r3, #0]
	tachometer_for_direction = 0;
 801339c:	4bbe      	ldr	r3, [pc, #760]	; (8013698 <mcpwm_init+0x368>)
	switching_frequency_now = conf->m_bldc_f_sw_max;
 801339e:	4abf      	ldr	r2, [pc, #764]	; (801369c <mcpwm_init+0x36c>)
	tachometer_for_direction = 0;
 80133a0:	601c      	str	r4, [r3, #0]
	state = MC_STATE_OFF;
 80133a2:	4bbf      	ldr	r3, [pc, #764]	; (80136a0 <mcpwm_init+0x370>)
	ignore_iterations = 0;
 80133a4:	f8df e374 	ldr.w	lr, [pc, #884]	; 801371c <mcpwm_init+0x3ec>
	state = MC_STATE_OFF;
 80133a8:	701c      	strb	r4, [r3, #0]
	control_mode = CONTROL_MODE_NONE;
 80133aa:	4bbe      	ldr	r3, [pc, #760]	; (80136a4 <mcpwm_init+0x374>)
	curr_samp_volt = 0;
 80133ac:	49be      	ldr	r1, [pc, #760]	; (80136a8 <mcpwm_init+0x378>)
	has_commutated = 0;
 80133ae:	48bf      	ldr	r0, [pc, #764]	; (80136ac <mcpwm_init+0x37c>)
	cycle_integrator_sum = 0.0;
 80133b0:	f8df b36c 	ldr.w	fp, [pc, #876]	; 8013720 <mcpwm_init+0x3f0>
	control_mode = CONTROL_MODE_NONE;
 80133b4:	f04f 0807 	mov.w	r8, #7
 80133b8:	f883 8000 	strb.w	r8, [r3]
	last_current_sample = 0.0;
 80133bc:	4bbc      	ldr	r3, [pc, #752]	; (80136b0 <mcpwm_init+0x380>)
 80133be:	edc3 7a00 	vstr	s15, [r3]
	last_current_sample_filtered = 0.0;
 80133c2:	edc9 7a00 	vstr	s15, [r9]
	switching_frequency_now = conf->m_bldc_f_sw_max;
 80133c6:	f8da c168 	ldr.w	ip, [sl, #360]	; 0x168
 80133ca:	f8c2 c000 	str.w	ip, [r2]
	memset((void*)&rpm_dep, 0, sizeof(rpm_dep));
 80133ce:	4bb9      	ldr	r3, [pc, #740]	; (80136b4 <mcpwm_init+0x384>)
	slow_ramping_cycles = 0;
 80133d0:	4ab9      	ldr	r2, [pc, #740]	; (80136b8 <mcpwm_init+0x388>)
	ignore_iterations = 0;
 80133d2:	f8ce 4000 	str.w	r4, [lr]
	curr_samp_volt = 0;
 80133d6:	600c      	str	r4, [r1, #0]
	slow_ramping_cycles = 0;
 80133d8:	6014      	str	r4, [r2, #0]
	has_commutated = 0;
 80133da:	6004      	str	r4, [r0, #0]
	memset((void*)&rpm_dep, 0, sizeof(rpm_dep));
 80133dc:	601c      	str	r4, [r3, #0]
 80133de:	605c      	str	r4, [r3, #4]
 80133e0:	609c      	str	r4, [r3, #8]
 80133e2:	60dc      	str	r4, [r3, #12]
 80133e4:	611c      	str	r4, [r3, #16]
 80133e6:	615c      	str	r4, [r3, #20]
 80133e8:	619c      	str	r4, [r3, #24]
	cycle_integrator_iterations = 0.0;
 80133ea:	4bb4      	ldr	r3, [pc, #720]	; (80136bc <mcpwm_init+0x38c>)
	cycle_integrator_sum = 0.0;
 80133ec:	edcb 7a00 	vstr	s15, [fp]
	pwm_cycles_sum = 0.0;
 80133f0:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8013724 <mcpwm_init+0x3f4>
	cycle_integrator_iterations = 0.0;
 80133f4:	edc3 7a00 	vstr	s15, [r3]
	pwm_cycles = 0;
 80133f8:	4bb1      	ldr	r3, [pc, #708]	; (80136c0 <mcpwm_init+0x390>)
	memset((float*)last_pwm_cycles_sums, 0, sizeof(last_pwm_cycles_sums));
 80133fa:	f8df e32c 	ldr.w	lr, [pc, #812]	; 8013728 <mcpwm_init+0x3f8>
	last_pwm_cycles_sum = 0.0;
 80133fe:	f8df c32c 	ldr.w	ip, [pc, #812]	; 801372c <mcpwm_init+0x3fc>
	pwm_cycles_sum = 0.0;
 8013402:	edc9 7a00 	vstr	s15, [r9]
	pwm_cycles = 0;
 8013406:	601c      	str	r4, [r3, #0]
	dccal_done = false;
 8013408:	4bae      	ldr	r3, [pc, #696]	; (80136c4 <mcpwm_init+0x394>)
	last_pwm_cycles_sum = 0.0;
 801340a:	edcc 7a00 	vstr	s15, [ip]
	memset((void*)hall_detect_table, 0, sizeof(hall_detect_table[0][0]) * 8 * 7);
 801340e:	4621      	mov	r1, r4
	memset((float*)last_pwm_cycles_sums, 0, sizeof(last_pwm_cycles_sums));
 8013410:	f8ce 4000 	str.w	r4, [lr]
	memset((void*)hall_detect_table, 0, sizeof(hall_detect_table[0][0]) * 8 * 7);
 8013414:	22e0      	movs	r2, #224	; 0xe0
	memset((float*)last_pwm_cycles_sums, 0, sizeof(last_pwm_cycles_sums));
 8013416:	f8ce 4004 	str.w	r4, [lr, #4]
	memset((void*)hall_detect_table, 0, sizeof(hall_detect_table[0][0]) * 8 * 7);
 801341a:	48ab      	ldr	r0, [pc, #684]	; (80136c8 <mcpwm_init+0x398>)
	memset((float*)last_pwm_cycles_sums, 0, sizeof(last_pwm_cycles_sums));
 801341c:	f8ce 4008 	str.w	r4, [lr, #8]
 8013420:	f8ce 400c 	str.w	r4, [lr, #12]
 8013424:	f8ce 4010 	str.w	r4, [lr, #16]
 8013428:	f8ce 4014 	str.w	r4, [lr, #20]
	dccal_done = false;
 801342c:	701c      	strb	r4, [r3, #0]
	memset((void*)hall_detect_table, 0, sizeof(hall_detect_table[0][0]) * 8 * 7);
 801342e:	f014 fc27 	bl	8027c80 <memset>
	update_sensor_mode();
 8013432:	f7ff f965 	bl	8012700 <update_sensor_mode>
	comm_mode_next = conf->comm_mode;
 8013436:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801343a:	4aa4      	ldr	r2, [pc, #656]	; (80136cc <mcpwm_init+0x39c>)
 801343c:	b2db      	uxtb	r3, r3
	mcpwm_init_hall_table((int8_t*)conf->hall_table);
 801343e:	f10a 0098 	add.w	r0, sl, #152	; 0x98
	comm_mode_next = conf->comm_mode;
 8013442:	7013      	strb	r3, [r2, #0]
	mcpwm_init_hall_table((int8_t*)conf->hall_table);
 8013444:	f7ff ff4c 	bl	80132e0 <mcpwm_init_hall_table>
	filter_create_fir_lowpass((float*)kv_fir_coeffs, KV_FIR_FCUT, KV_FIR_TAPS_BITS, 1);
 8013448:	462a      	mov	r2, r5
 801344a:	4641      	mov	r1, r8
 801344c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80136d0 <mcpwm_init+0x3a0>
 8013450:	48a0      	ldr	r0, [pc, #640]	; (80136d4 <mcpwm_init+0x3a4>)
 8013452:	f7fe fefd 	bl	8012250 <filter_create_fir_lowpass>
	filter_create_fir_lowpass((float*)amp_fir_coeffs, AMP_FIR_FCUT, AMP_FIR_TAPS_BITS, 1);
 8013456:	462a      	mov	r2, r5
 8013458:	4641      	mov	r1, r8
 801345a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80136d0 <mcpwm_init+0x3a0>
 801345e:	489e      	ldr	r0, [pc, #632]	; (80136d8 <mcpwm_init+0x3a8>)
 8013460:	f7fe fef6 	bl	8012250 <filter_create_fir_lowpass>
	filter_create_fir_lowpass((float*)current_fir_coeffs, CURR_FIR_FCUT, CURR_FIR_TAPS_BITS, 1);
 8013464:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80136dc <mcpwm_init+0x3ac>
 8013468:	489d      	ldr	r0, [pc, #628]	; (80136e0 <mcpwm_init+0x3b0>)
 801346a:	462a      	mov	r2, r5
 801346c:	2104      	movs	r1, #4
 801346e:	f7fe feef 	bl	8012250 <filter_create_fir_lowpass>
	TIM_DeInit(TIM1);
 8013472:	4630      	mov	r0, r6
 8013474:	f011 fa7c 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM8);
 8013478:	4638      	mov	r0, r7
 801347a:	f011 fa79 	bl	8024970 <TIM_DeInit>
	TIM1->CNT = 0;
 801347e:	6274      	str	r4, [r6, #36]	; 0x24
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8013480:	4629      	mov	r1, r5
 8013482:	4628      	mov	r0, r5
	TIM8->CNT = 0;
 8013484:	627c      	str	r4, [r7, #36]	; 0x24
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8013486:	f011 fa2b 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 801348a:	4b84      	ldr	r3, [pc, #528]	; (801369c <mcpwm_init+0x36c>)
 801348c:	4a95      	ldr	r2, [pc, #596]	; (80136e4 <mcpwm_init+0x3b4>)
 801348e:	edd3 7a00 	vldr	s15, [r3]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8013492:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 8013496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 801349a:	4630      	mov	r0, r6
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 801349c:	ee17 3a90 	vmov	r3, s15
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80134a0:	a903      	add	r1, sp, #12
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 80134a2:	fb92 f3f3 	sdiv	r3, r2, r3
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80134a6:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80134aa:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80134ae:	f88d 4016 	strb.w	r4, [sp, #22]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)switching_frequency_now;
 80134b2:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80134b4:	f011 fb3c 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 80134b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80134ba:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 80134be:	40eb      	lsrs	r3, r5
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 80134c0:	f04f 0804 	mov.w	r8, #4
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80134c4:	f44f 7980 	mov.w	r9, #256	; 0x100
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 80134c8:	4630      	mov	r0, r6
 80134ca:	a90e      	add	r1, sp, #56	; 0x38
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 80134cc:	f44f 7b00 	mov.w	fp, #512	; 0x200
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 80134d0:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80134d2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80134d6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80134da:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 80134de:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 80134e2:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80134e6:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 80134ea:	f8ad b04a 	strh.w	fp, [sp, #74]	; 0x4a
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 80134ee:	f011 fb97 	bl	8024c20 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 80134f2:	a90e      	add	r1, sp, #56	; 0x38
 80134f4:	4630      	mov	r0, r6
 80134f6:	f011 fbd3 	bl	8024ca0 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 80134fa:	a90e      	add	r1, sp, #56	; 0x38
 80134fc:	4630      	mov	r0, r6
 80134fe:	f011 fc0f 	bl	8024d20 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8013502:	a90e      	add	r1, sp, #56	; 0x38
 8013504:	4630      	mov	r0, r6
 8013506:	f011 fc4b 	bl	8024da0 <TIM_OC4Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801350a:	4630      	mov	r0, r6
 801350c:	2108      	movs	r1, #8
 801350e:	f011 fca7 	bl	8024e60 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8013512:	4630      	mov	r0, r6
 8013514:	2108      	movs	r1, #8
 8013516:	f011 fcab 	bl	8024e70 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801351a:	4630      	mov	r0, r6
 801351c:	2108      	movs	r1, #8
 801351e:	f011 fcb7 	bl	8024e90 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8013522:	4630      	mov	r0, r6
 8013524:	2108      	movs	r1, #8
 8013526:	f011 fcbb 	bl	8024ea0 <TIM_OC4PreloadConfig>
	TIM_BDTRInitStructure.TIM_DeadTime = HW_DEAD_TIME_VALUE;
 801352a:	233c      	movs	r3, #60	; 0x3c
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 801352c:	f44f 6200 	mov.w	r2, #2048	; 0x800
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 8013530:	f44f 6a80 	mov.w	sl, #1024	; 0x400
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8013534:	4630      	mov	r0, r6
 8013536:	a906      	add	r1, sp, #24
	TIM_BDTRInitStructure.TIM_DeadTime = HW_DEAD_TIME_VALUE;
 8013538:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 801353c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8013540:	f8ad 2018 	strh.w	r2, [sp, #24]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 8013544:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8013548:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 801354c:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8013550:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 8013554:	f8ad a01a 	strh.w	sl, [sp, #26]
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8013558:	f011 fce2 	bl	8024f20 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 801355c:	4629      	mov	r1, r5
 801355e:	4630      	mov	r0, r6
 8013560:	f011 fd06 	bl	8024f70 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8013564:	4629      	mov	r1, r5
 8013566:	4630      	mov	r0, r6
 8013568:	f011 fb3a 	bl	8024be0 <TIM_ARRPreloadConfig>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 801356c:	4629      	mov	r1, r5
 801356e:	485e      	ldr	r0, [pc, #376]	; (80136e8 <mcpwm_init+0x3b8>)
 8013570:	f011 f996 	bl	80248a0 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 8013574:	4629      	mov	r1, r5
 8013576:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 801357a:	f011 f9b1 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),
 801357e:	4623      	mov	r3, r4
 8013580:	4a5a      	ldr	r2, [pc, #360]	; (80136ec <mcpwm_init+0x3bc>)
 8013582:	485b      	ldr	r0, [pc, #364]	; (80136f0 <mcpwm_init+0x3c0>)
 8013584:	2103      	movs	r1, #3
 8013586:	f7fb ffab 	bl	800f4e0 <dmaStreamAllocate>
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 801358a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801358e:	9326      	str	r3, [sp, #152]	; 0x98
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8013590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 8013594:	f8df c198 	ldr.w	ip, [pc, #408]	; 8013730 <mcpwm_init+0x400>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 8013598:	f8df e198 	ldr.w	lr, [pc, #408]	; 8013734 <mcpwm_init+0x404>
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801359c:	4855      	ldr	r0, [pc, #340]	; (80136f4 <mcpwm_init+0x3c4>)
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 801359e:	9327      	str	r3, [sp, #156]	; 0x9c
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 80135a0:	220c      	movs	r2, #12
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80135a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80135a6:	a91f      	add	r1, sp, #124	; 0x7c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 80135a8:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 80135ac:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80135b0:	9329      	str	r3, [sp, #164]	; 0xa4
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 80135b2:	9223      	str	r2, [sp, #140]	; 0x8c
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80135b4:	941f      	str	r4, [sp, #124]	; 0x7c
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80135b6:	9422      	str	r4, [sp, #136]	; 0x88
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80135b8:	9424      	str	r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80135ba:	942a      	str	r4, [sp, #168]	; 0xa8
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80135bc:	942b      	str	r4, [sp, #172]	; 0xac
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80135be:	942c      	str	r4, [sp, #176]	; 0xb0
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80135c0:	942d      	str	r4, [sp, #180]	; 0xb4
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80135c2:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80135c6:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80135ca:	f010 ffe1 	bl	8024590 <DMA_Init>
	DMA_Cmd(DMA2_Stream4, ENABLE);
 80135ce:	4629      	mov	r1, r5
 80135d0:	4848      	ldr	r0, [pc, #288]	; (80136f4 <mcpwm_init+0x3c4>)
 80135d2:	f011 f80d 	bl	80245f0 <DMA_Cmd>
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 80135d6:	462a      	mov	r2, r5
 80135d8:	2110      	movs	r1, #16
 80135da:	4846      	ldr	r0, [pc, #280]	; (80136f4 <mcpwm_init+0x3c4>)
 80135dc:	f011 f818 	bl	8024610 <DMA_ITConfig>
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 80135e0:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 80135e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInit(&ADC_CommonInitStructure);
 80135e6:	a80a      	add	r0, sp, #40	; 0x28
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80135e8:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80135ea:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 80135ec:	920a      	str	r2, [sp, #40]	; 0x28
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 80135ee:	930c      	str	r3, [sp, #48]	; 0x30
	ADC_CommonInit(&ADC_CommonInitStructure);
 80135f0:	f010 fe36 	bl	8024260 <ADC_CommonInit>
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 80135f4:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 80135f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	ADC_Init(ADC1, &ADC_InitStructure);
 80135fc:	a913      	add	r1, sp, #76	; 0x4c
 80135fe:	483e      	ldr	r0, [pc, #248]	; (80136f8 <mcpwm_init+0x3c8>)
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 8013600:	9316      	str	r3, [sp, #88]	; 0x58
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8013602:	9215      	str	r2, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8013604:	9413      	str	r4, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8013606:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 801360a:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 801360e:	9417      	str	r4, [sp, #92]	; 0x5c
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 8013610:	f88d 8060 	strb.w	r8, [sp, #96]	; 0x60
	ADC_Init(ADC1, &ADC_InitStructure);
 8013614:	f010 fdfc 	bl	8024210 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 8013618:	a913      	add	r1, sp, #76	; 0x4c
 801361a:	4838      	ldr	r0, [pc, #224]	; (80136fc <mcpwm_init+0x3cc>)
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 801361c:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_ExternalTrigConv = 0;
 801361e:	9416      	str	r4, [sp, #88]	; 0x58
	ADC_Init(ADC2, &ADC_InitStructure);
 8013620:	f010 fdf6 	bl	8024210 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 8013624:	a913      	add	r1, sp, #76	; 0x4c
 8013626:	4836      	ldr	r0, [pc, #216]	; (8013700 <mcpwm_init+0x3d0>)
 8013628:	f010 fdf2 	bl	8024210 <ADC_Init>
	ADC_TempSensorVrefintCmd(ENABLE);
 801362c:	4628      	mov	r0, r5
 801362e:	f010 fe3f 	bl	80242b0 <ADC_TempSensorVrefintCmd>
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 8013632:	4628      	mov	r0, r5
 8013634:	f010 fe94 	bl	8024360 <ADC_MultiModeDMARequestAfterLastTransferCmd>
	ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_T1_CC4);
 8013638:	4621      	mov	r1, r4
 801363a:	482f      	ldr	r0, [pc, #188]	; (80136f8 <mcpwm_init+0x3c8>)
 801363c:	f010 fed8 	bl	80243f0 <ADC_ExternalTrigInjectedConvConfig>
	ADC_ExternalTrigInjectedConvConfig(ADC2, ADC_ExternalTrigInjecConv_T8_CC2);
 8013640:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8013644:	482d      	ldr	r0, [pc, #180]	; (80136fc <mcpwm_init+0x3cc>)
 8013646:	f010 fed3 	bl	80243f0 <ADC_ExternalTrigInjectedConvConfig>
	ADC_ExternalTrigInjectedConvEdgeConfig(ADC1, ADC_ExternalTrigInjecConvEdge_Falling);
 801364a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801364e:	482a      	ldr	r0, [pc, #168]	; (80136f8 <mcpwm_init+0x3c8>)
 8013650:	f010 fed6 	bl	8024400 <ADC_ExternalTrigInjectedConvEdgeConfig>
	ADC_ExternalTrigInjectedConvEdgeConfig(ADC2, ADC_ExternalTrigInjecConvEdge_Falling);
 8013654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013658:	4828      	ldr	r0, [pc, #160]	; (80136fc <mcpwm_init+0x3cc>)
 801365a:	f010 fed1 	bl	8024400 <ADC_ExternalTrigInjectedConvEdgeConfig>
	ADC_InjectedSequencerLengthConfig(ADC1, HW_ADC_INJ_CHANNELS);
 801365e:	2102      	movs	r1, #2
 8013660:	4825      	ldr	r0, [pc, #148]	; (80136f8 <mcpwm_init+0x3c8>)
 8013662:	f010 febd 	bl	80243e0 <ADC_InjectedSequencerLengthConfig>
	ADC_InjectedSequencerLengthConfig(ADC2, HW_ADC_INJ_CHANNELS);
 8013666:	2102      	movs	r1, #2
 8013668:	e066      	b.n	8013738 <mcpwm_init+0x408>
 801366a:	bf00      	nop
 801366c:	20004d48 	.word	0x20004d48
 8013670:	40010000 	.word	0x40010000
 8013674:	40010400 	.word	0x40010400
 8013678:	20004f4c 	.word	0x20004f4c
 801367c:	20004e0c 	.word	0x20004e0c
 8013680:	00000000 	.word	0x00000000
 8013684:	200059e8 	.word	0x200059e8
 8013688:	20005404 	.word	0x20005404
 801368c:	20004dec 	.word	0x20004dec
 8013690:	200059f4 	.word	0x200059f4
 8013694:	200059f8 	.word	0x200059f8
 8013698:	200059fc 	.word	0x200059fc
 801369c:	200059f0 	.word	0x200059f0
 80136a0:	200059ec 	.word	0x200059ec
 80136a4:	20004d4c 	.word	0x20004d4c
 80136a8:	20004d60 	.word	0x20004d60
 80136ac:	20004f3c 	.word	0x20004f3c
 80136b0:	20005358 	.word	0x20005358
 80136b4:	2000541c 	.word	0x2000541c
 80136b8:	200059e4 	.word	0x200059e4
 80136bc:	20004df4 	.word	0x20004df4
 80136c0:	20005414 	.word	0x20005414
 80136c4:	20004e04 	.word	0x20004e04
 80136c8:	20004e1c 	.word	0x20004e1c
 80136cc:	20004d40 	.word	0x20004d40
 80136d0:	3ca3d70a 	.word	0x3ca3d70a
 80136d4:	20004f50 	.word	0x20004f50
 80136d8:	20004938 	.word	0x20004938
 80136dc:	3e19999a 	.word	0x3e19999a
 80136e0:	20004d68 	.word	0x20004d68
 80136e4:	0a037a00 	.word	0x0a037a00
 80136e8:	00400005 	.word	0x00400005
 80136ec:	08014b81 	.word	0x08014b81
 80136f0:	0802eb10 	.word	0x0802eb10
 80136f4:	40026470 	.word	0x40026470
 80136f8:	40012000 	.word	0x40012000
 80136fc:	40012100 	.word	0x40012100
 8013700:	40012200 	.word	0x40012200
 8013704:	20004d44 	.word	0x20004d44
 8013708:	20004e10 	.word	0x20004e10
 801370c:	2000543c 	.word	0x2000543c
 8013710:	20004e18 	.word	0x20004e18
 8013714:	20004e14 	.word	0x20004e14
 8013718:	2000535c 	.word	0x2000535c
 801371c:	20004f48 	.word	0x20004f48
 8013720:	20004df8 	.word	0x20004df8
 8013724:	20005418 	.word	0x20005418
 8013728:	20005368 	.word	0x20005368
 801372c:	20005364 	.word	0x20005364
 8013730:	2000c034 	.word	0x2000c034
 8013734:	40012308 	.word	0x40012308
 8013738:	488e      	ldr	r0, [pc, #568]	; (8013974 <mcpwm_init+0x644>)
 801373a:	f010 fe51 	bl	80243e0 <ADC_InjectedSequencerLengthConfig>
	hw_setup_adc_channels();
 801373e:	f00c ff0f 	bl	8020560 <hw_setup_adc_channels>
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
 8013742:	462a      	mov	r2, r5
 8013744:	f240 4107 	movw	r1, #1031	; 0x407
 8013748:	488b      	ldr	r0, [pc, #556]	; (8013978 <mcpwm_init+0x648>)
 801374a:	f010 fe71 	bl	8024430 <ADC_ITConfig>
	nvicEnableVector(ADC_IRQn, 6);
 801374e:	2106      	movs	r1, #6
 8013750:	2012      	movs	r0, #18
 8013752:	f7fb fcd5 	bl	800f100 <nvicEnableVector>
	ADC_Cmd(ADC1, ENABLE);
 8013756:	4629      	mov	r1, r5
 8013758:	4887      	ldr	r0, [pc, #540]	; (8013978 <mcpwm_init+0x648>)
 801375a:	f010 fd99 	bl	8024290 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 801375e:	4629      	mov	r1, r5
 8013760:	4884      	ldr	r0, [pc, #528]	; (8013974 <mcpwm_init+0x644>)
 8013762:	f010 fd95 	bl	8024290 <ADC_Cmd>
	ADC_Cmd(ADC3, ENABLE);
 8013766:	4629      	mov	r1, r5
 8013768:	4884      	ldr	r0, [pc, #528]	; (801397c <mcpwm_init+0x64c>)
 801376a:	f010 fd91 	bl	8024290 <ADC_Cmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 801376e:	4629      	mov	r1, r5
 8013770:	2002      	movs	r0, #2
 8013772:	f011 f8b5 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8013776:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 801377a:	a903      	add	r1, sp, #12
 801377c:	4638      	mov	r0, r7
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801377e:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8013782:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8013786:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 801378a:	f88d 4016 	strb.w	r4, [sp, #22]
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 801378e:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 8013790:	f011 f9ce 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = 500;
 8013794:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8013798:	f04f 0260 	mov.w	r2, #96	; 0x60
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
 801379c:	a90e      	add	r1, sp, #56	; 0x38
 801379e:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80137a0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_Pulse = 500;
 80137a4:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80137a6:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80137aa:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 80137ae:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80137b2:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 80137b6:	f8ad b04a 	strh.w	fp, [sp, #74]	; 0x4a
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
 80137ba:	f011 fa31 	bl	8024c20 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80137be:	4638      	mov	r0, r7
 80137c0:	2108      	movs	r1, #8
 80137c2:	f011 fb4d 	bl	8024e60 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);
 80137c6:	a90e      	add	r1, sp, #56	; 0x38
 80137c8:	4638      	mov	r0, r7
 80137ca:	f011 fa69 	bl	8024ca0 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80137ce:	4638      	mov	r0, r7
 80137d0:	2108      	movs	r1, #8
 80137d2:	f011 fb4d 	bl	8024e70 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);
 80137d6:	a90e      	add	r1, sp, #56	; 0x38
 80137d8:	4638      	mov	r0, r7
 80137da:	f011 faa1 	bl	8024d20 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80137de:	4638      	mov	r0, r7
 80137e0:	2108      	movs	r1, #8
 80137e2:	f011 fb55 	bl	8024e90 <TIM_OC3PreloadConfig>
	TIM_ARRPreloadConfig(TIM8, ENABLE);
 80137e6:	4629      	mov	r1, r5
 80137e8:	4638      	mov	r0, r7
 80137ea:	f011 f9f9 	bl	8024be0 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 80137ee:	4629      	mov	r1, r5
 80137f0:	4638      	mov	r0, r7
 80137f2:	f011 fbbd 	bl	8024f70 <TIM_CCPreloadControl>
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 80137f6:	4629      	mov	r1, r5
 80137f8:	4638      	mov	r0, r7
 80137fa:	f011 fba9 	bl	8024f50 <TIM_CtrlPWMOutputs>
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 80137fe:	4630      	mov	r0, r6
 8013800:	2120      	movs	r1, #32
 8013802:	f011 fc05 	bl	8025010 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 8013806:	4630      	mov	r0, r6
 8013808:	2180      	movs	r1, #128	; 0x80
 801380a:	f011 fc21 	bl	8025050 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 801380e:	4621      	mov	r1, r4
 8013810:	4638      	mov	r0, r7
 8013812:	f011 fbf5 	bl	8025000 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 8013816:	4641      	mov	r1, r8
 8013818:	4638      	mov	r0, r7
 801381a:	f011 fc09 	bl	8025030 <TIM_SelectSlaveMode>
	TIM_Cmd(TIM1, ENABLE);
 801381e:	4629      	mov	r1, r5
 8013820:	4630      	mov	r0, r6
 8013822:	f011 f9ed 	bl	8024c00 <TIM_Cmd>
	TIM_Cmd(TIM8, ENABLE);
 8013826:	4629      	mov	r1, r5
 8013828:	4638      	mov	r0, r7
 801382a:	f011 f9e9 	bl	8024c00 <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 801382e:	4629      	mov	r1, r5
 8013830:	4630      	mov	r0, r6
 8013832:	f011 fb8d 	bl	8024f50 <TIM_CtrlPWMOutputs>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8013836:	4629      	mov	r1, r5
 8013838:	4628      	mov	r0, r5
 801383a:	f011 f841 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 801383e:	f04f 32ff 	mov.w	r2, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8013842:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8013844:	a903      	add	r1, sp, #12
 8013846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 801384a:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 801384c:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8013850:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8013854:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8013858:	f011 f96a 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 801385c:	4629      	mov	r1, r5
 801385e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8013862:	f011 f9cd 	bl	8024c00 <TIM_Cmd>
	stop_pwm_hw();
 8013866:	f7ff fb03 	bl	8012e70 <stop_pwm_hw>
	timer_tmp.top = TIM1->ARR;
 801386a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801386c:	931a      	str	r3, [sp, #104]	; 0x68
	timer_tmp.duty = TIM1->ARR / 2;
 801386e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	update_adc_sample_pos(&timer_tmp);
 8013870:	a819      	add	r0, sp, #100	; 0x64
	timer_tmp.duty = TIM1->ARR / 2;
 8013872:	40eb      	lsrs	r3, r5
 8013874:	931b      	str	r3, [sp, #108]	; 0x6c
	update_adc_sample_pos(&timer_tmp);
 8013876:	f7fe fe03 	bl	8012480 <update_adc_sample_pos>
	set_next_timer_settings(&timer_tmp);
 801387a:	a819      	add	r0, sp, #100	; 0x64
 801387c:	f7fe ffa8 	bl	80127d0 <set_next_timer_settings>
	ENABLE_GATE();
 8013880:	4d3f      	ldr	r5, [pc, #252]	; (8013980 <mcpwm_init+0x650>)
	utils_sys_unlock_cnt();
 8013882:	f002 fc5d 	bl	8016140 <utils_sys_unlock_cnt>
	DCCAL_OFF();
 8013886:	4b3f      	ldr	r3, [pc, #252]	; (8013984 <mcpwm_init+0x654>)
	ENABLE_GATE();
 8013888:	f8a5 a018 	strh.w	sl, [r5, #24]
	DCCAL_OFF();
 801388c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013890:	835a      	strh	r2, [r3, #26]
	DCCAL_ON();
 8013892:	f241 3489 	movw	r4, #5001	; 0x1389
 8013896:	831a      	strh	r2, [r3, #24]
 8013898:	e003      	b.n	80138a2 <mcpwm_init+0x572>
		chThdSleepMilliseconds(1);
 801389a:	f7fa f8a1 	bl	800d9e0 <chThdSleep>
		if (cnt > 5000) {
 801389e:	3c01      	subs	r4, #1
 80138a0:	d004      	beq.n	80138ac <mcpwm_init+0x57c>
	while(IS_DRV_FAULT()){
 80138a2:	692b      	ldr	r3, [r5, #16]
 80138a4:	04db      	lsls	r3, r3, #19
		chThdSleepMilliseconds(1);
 80138a6:	f04f 000a 	mov.w	r0, #10
	while(IS_DRV_FAULT()){
 80138aa:	d5f6      	bpl.n	801389a <mcpwm_init+0x56a>
	chThdSleepMilliseconds(1000);
 80138ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80138b0:	f7fa f896 	bl	800d9e0 <chThdSleep>
	curr0_sum = 0;
 80138b4:	4834      	ldr	r0, [pc, #208]	; (8013988 <mcpwm_init+0x658>)
	curr1_sum = 0;
 80138b6:	4935      	ldr	r1, [pc, #212]	; (801398c <mcpwm_init+0x65c>)
	curr_start_samples = 0;
 80138b8:	4a35      	ldr	r2, [pc, #212]	; (8013990 <mcpwm_init+0x660>)
	curr0_sum = 0;
 80138ba:	2300      	movs	r3, #0
 80138bc:	6003      	str	r3, [r0, #0]
	curr1_sum = 0;
 80138be:	600b      	str	r3, [r1, #0]
	curr_start_samples = 0;
 80138c0:	6013      	str	r3, [r2, #0]
	while(curr_start_samples < 4000) {};
 80138c2:	6813      	ldr	r3, [r2, #0]
 80138c4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80138c8:	dbfb      	blt.n	80138c2 <mcpwm_init+0x592>
	curr0_offset = curr0_sum / curr_start_samples;
 80138ca:	4d32      	ldr	r5, [pc, #200]	; (8013994 <mcpwm_init+0x664>)
	curr1_offset = curr1_sum / curr_start_samples;
 80138cc:	4c32      	ldr	r4, [pc, #200]	; (8013998 <mcpwm_init+0x668>)
	curr0_offset = curr0_sum / curr_start_samples;
 80138ce:	6803      	ldr	r3, [r0, #0]
 80138d0:	6810      	ldr	r0, [r2, #0]
 80138d2:	fb93 f3f0 	sdiv	r3, r3, r0
	DCCAL_OFF();
 80138d6:	482b      	ldr	r0, [pc, #172]	; (8013984 <mcpwm_init+0x654>)
	curr0_offset = curr0_sum / curr_start_samples;
 80138d8:	602b      	str	r3, [r5, #0]
	curr1_offset = curr1_sum / curr_start_samples;
 80138da:	680b      	ldr	r3, [r1, #0]
 80138dc:	6812      	ldr	r2, [r2, #0]
 80138de:	fb93 f3f2 	sdiv	r3, r3, r2
	dccal_done = true;
 80138e2:	2501      	movs	r5, #1
	curr1_offset = curr1_sum / curr_start_samples;
 80138e4:	6023      	str	r3, [r4, #0]
	DCCAL_OFF();
 80138e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	dccal_done = true;
 80138ea:	4b2c      	ldr	r3, [pc, #176]	; (801399c <mcpwm_init+0x66c>)
	DCCAL_OFF();
 80138ec:	8342      	strh	r2, [r0, #26]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80138ee:	4629      	mov	r1, r5
 80138f0:	2040      	movs	r0, #64	; 0x40
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80138f2:	2400      	movs	r4, #0
	dccal_done = true;
 80138f4:	701d      	strb	r5, [r3, #0]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80138f6:	f010 ffe3 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80138fa:	f04f 32ff 	mov.w	r2, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80138fe:	2307      	movs	r3, #7
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 8013900:	a903      	add	r1, sp, #12
 8013902:	4827      	ldr	r0, [pc, #156]	; (80139a0 <mcpwm_init+0x670>)
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8013904:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8013906:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801390a:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 801390e:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 8013912:	f011 f90d 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_Cmd(TIM12, ENABLE);
 8013916:	4629      	mov	r1, r5
 8013918:	4821      	ldr	r0, [pc, #132]	; (80139a0 <mcpwm_init+0x670>)
	rpm_thd_stop = false;
 801391a:	4e22      	ldr	r6, [pc, #136]	; (80139a4 <mcpwm_init+0x674>)
	TIM_Cmd(TIM12, ENABLE);
 801391c:	f011 f970 	bl	8024c00 <TIM_Cmd>
	timer_thd_stop = false;
 8013920:	4a21      	ldr	r2, [pc, #132]	; (80139a8 <mcpwm_init+0x678>)
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8013922:	9400      	str	r4, [sp, #0]
 8013924:	4b21      	ldr	r3, [pc, #132]	; (80139ac <mcpwm_init+0x67c>)
	timer_thd_stop = false;
 8013926:	7014      	strb	r4, [r2, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8013928:	f640 1198 	movw	r1, #2456	; 0x998
 801392c:	2240      	movs	r2, #64	; 0x40
	rpm_thd_stop = false;
 801392e:	7034      	strb	r4, [r6, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8013930:	481f      	ldr	r0, [pc, #124]	; (80139b0 <mcpwm_init+0x680>)
 8013932:	f7fa f81d 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(rpm_thread_wa, sizeof(rpm_thread_wa), NORMALPRIO, rpm_thread, NULL);
 8013936:	4b1f      	ldr	r3, [pc, #124]	; (80139b4 <mcpwm_init+0x684>)
 8013938:	9400      	str	r4, [sp, #0]
 801393a:	2240      	movs	r2, #64	; 0x40
 801393c:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8013940:	481d      	ldr	r0, [pc, #116]	; (80139b8 <mcpwm_init+0x688>)
 8013942:	f7fa f815 	bl	800d970 <chThdCreateStatic>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8013946:	4629      	mov	r1, r5
 8013948:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801394c:	f010 ffb8 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 8013950:	4620      	mov	r0, r4
 8013952:	f011 fbbd 	bl	80250d0 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 8013956:	20ff      	movs	r0, #255	; 0xff
 8013958:	f011 fbca 	bl	80250f0 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 801395c:	2064      	movs	r0, #100	; 0x64
 801395e:	f011 fbe7 	bl	8025130 <WWDG_Enable>
	tachometer = 0;
 8013962:	4b16      	ldr	r3, [pc, #88]	; (80139bc <mcpwm_init+0x68c>)
 8013964:	601c      	str	r4, [r3, #0]
	tachometer_abs = 0;
 8013966:	4b16      	ldr	r3, [pc, #88]	; (80139c0 <mcpwm_init+0x690>)
 8013968:	601c      	str	r4, [r3, #0]
	init_done = true;
 801396a:	4b16      	ldr	r3, [pc, #88]	; (80139c4 <mcpwm_init+0x694>)
 801396c:	701d      	strb	r5, [r3, #0]
}
 801396e:	b02f      	add	sp, #188	; 0xbc
 8013970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013974:	40012100 	.word	0x40012100
 8013978:	40012000 	.word	0x40012000
 801397c:	40012200 	.word	0x40012200
 8013980:	40020800 	.word	0x40020800
 8013984:	40020400 	.word	0x40020400
 8013988:	20004d54 	.word	0x20004d54
 801398c:	20004d5c 	.word	0x20004d5c
 8013990:	20004d64 	.word	0x20004d64
 8013994:	20004d50 	.word	0x20004d50
 8013998:	20004d58 	.word	0x20004d58
 801399c:	20004e04 	.word	0x20004e04
 80139a0:	40001800 	.word	0x40001800
 80139a4:	20005440 	.word	0x20005440
 80139a8:	20005a18 	.word	0x20005a18
 80139ac:	08012fe1 	.word	0x08012fe1
 80139b0:	20005a20 	.word	0x20005a20
 80139b4:	080146d1 	.word	0x080146d1
 80139b8:	20005448 	.word	0x20005448
 80139bc:	200059f4 	.word	0x200059f4
 80139c0:	200059f8 	.word	0x200059f8
 80139c4:	20004f4c 	.word	0x20004f4c
	...

080139d0 <mcpwm_set_configuration>:
void mcpwm_set_configuration(volatile mc_configuration *configuration) {
 80139d0:	b538      	push	{r3, r4, r5, lr}
	state = MC_STATE_OFF;
 80139d2:	490e      	ldr	r1, [pc, #56]	; (8013a0c <mcpwm_set_configuration+0x3c>)
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 80139d4:	4a0e      	ldr	r2, [pc, #56]	; (8013a10 <mcpwm_set_configuration+0x40>)
void mcpwm_set_configuration(volatile mc_configuration *configuration) {
 80139d6:	4604      	mov	r4, r0
	control_mode = CONTROL_MODE_NONE;
 80139d8:	480e      	ldr	r0, [pc, #56]	; (8013a14 <mcpwm_set_configuration+0x44>)
	state = MC_STATE_OFF;
 80139da:	2300      	movs	r3, #0
	control_mode = CONTROL_MODE_NONE;
 80139dc:	2507      	movs	r5, #7
 80139de:	7005      	strb	r5, [r0, #0]
	state = MC_STATE_OFF;
 80139e0:	700b      	strb	r3, [r1, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 80139e2:	6013      	str	r3, [r2, #0]
	stop_pwm_hw();
 80139e4:	f7ff fa44 	bl	8012e70 <stop_pwm_hw>
	utils_sys_lock_cnt();
 80139e8:	f002 fb9a 	bl	8016120 <utils_sys_lock_cnt>
	comm_mode_next = conf->comm_mode;
 80139ec:	7863      	ldrb	r3, [r4, #1]
	conf = configuration;
 80139ee:	490a      	ldr	r1, [pc, #40]	; (8013a18 <mcpwm_set_configuration+0x48>)
	comm_mode_next = conf->comm_mode;
 80139f0:	4a0a      	ldr	r2, [pc, #40]	; (8013a1c <mcpwm_set_configuration+0x4c>)
	conf = configuration;
 80139f2:	600c      	str	r4, [r1, #0]
	comm_mode_next = conf->comm_mode;
 80139f4:	b2db      	uxtb	r3, r3
	mcpwm_init_hall_table((int8_t*)conf->hall_table);
 80139f6:	f104 0098 	add.w	r0, r4, #152	; 0x98
	comm_mode_next = conf->comm_mode;
 80139fa:	7013      	strb	r3, [r2, #0]
	mcpwm_init_hall_table((int8_t*)conf->hall_table);
 80139fc:	f7ff fc70 	bl	80132e0 <mcpwm_init_hall_table>
	update_sensor_mode();
 8013a00:	f7fe fe7e 	bl	8012700 <update_sensor_mode>
}
 8013a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	utils_sys_unlock_cnt();
 8013a08:	f002 bb9a 	b.w	8016140 <utils_sys_unlock_cnt>
 8013a0c:	200059ec 	.word	0x200059ec
 8013a10:	20004f48 	.word	0x20004f48
 8013a14:	20004d4c 	.word	0x20004d4c
 8013a18:	20004d48 	.word	0x20004d48
 8013a1c:	20004d40 	.word	0x20004d40

08013a20 <mcpwm_set_pid_speed>:
	control_mode = CONTROL_MODE_SPEED;
 8013a20:	4a03      	ldr	r2, [pc, #12]	; (8013a30 <mcpwm_set_pid_speed+0x10>)
	speed_pid_set_rpm = rpm;
 8013a22:	4b04      	ldr	r3, [pc, #16]	; (8013a34 <mcpwm_set_pid_speed+0x14>)
	control_mode = CONTROL_MODE_SPEED;
 8013a24:	2101      	movs	r1, #1
 8013a26:	7011      	strb	r1, [r2, #0]
	speed_pid_set_rpm = rpm;
 8013a28:	ed83 0a00 	vstr	s0, [r3]
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	20004d4c 	.word	0x20004d4c
 8013a34:	200059e8 	.word	0x200059e8
	...

08013a40 <mcpwm_set_brake_current>:
void mcpwm_set_brake_current(float current) {
 8013a40:	b530      	push	{r4, r5, lr}
	if (fabsf(current) < conf->cc_min_current) {
 8013a42:	4c2e      	ldr	r4, [pc, #184]	; (8013afc <mcpwm_set_brake_current+0xbc>)
 8013a44:	6823      	ldr	r3, [r4, #0]
 8013a46:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8013a4a:	eeb0 7ac0 	vabs.f32	s14, s0
 8013a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
void mcpwm_set_brake_current(float current) {
 8013a52:	b083      	sub	sp, #12
	if (fabsf(current) < conf->cc_min_current) {
 8013a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void mcpwm_set_brake_current(float current) {
 8013a58:	ed8d 0a01 	vstr	s0, [sp, #4]
	if (fabsf(current) < conf->cc_min_current) {
 8013a5c:	d42d      	bmi.n	8013aba <mcpwm_set_brake_current+0x7a>
	utils_truncate_number(&current, -fabsf(conf->l_current_min), fabsf(conf->l_current_min));
 8013a5e:	ed93 0a02 	vldr	s0, [r3, #8]
 8013a62:	edd3 0a02 	vldr	s1, [r3, #8]
	control_mode = CONTROL_MODE_CURRENT_BRAKE;
 8013a66:	4d26      	ldr	r5, [pc, #152]	; (8013b00 <mcpwm_set_brake_current+0xc0>)
	utils_truncate_number(&current, -fabsf(conf->l_current_min), fabsf(conf->l_current_min));
 8013a68:	eeb0 0ac0 	vabs.f32	s0, s0
 8013a6c:	eeb1 0a40 	vneg.f32	s0, s0
 8013a70:	eef0 0ae0 	vabs.f32	s1, s1
 8013a74:	a801      	add	r0, sp, #4
 8013a76:	f002 f843 	bl	8015b00 <utils_truncate_number>
	current_set = current;
 8013a7a:	4922      	ldr	r1, [pc, #136]	; (8013b04 <mcpwm_set_brake_current+0xc4>)
 8013a7c:	9801      	ldr	r0, [sp, #4]
	if (state != MC_STATE_RUNNING && state != MC_STATE_FULL_BRAKE) {
 8013a7e:	4b22      	ldr	r3, [pc, #136]	; (8013b08 <mcpwm_set_brake_current+0xc8>)
	control_mode = CONTROL_MODE_CURRENT_BRAKE;
 8013a80:	2203      	movs	r2, #3
 8013a82:	702a      	strb	r2, [r5, #0]
	current_set = current;
 8013a84:	6008      	str	r0, [r1, #0]
	if (state != MC_STATE_RUNNING && state != MC_STATE_FULL_BRAKE) {
 8013a86:	7819      	ldrb	r1, [r3, #0]
 8013a88:	2902      	cmp	r1, #2
 8013a8a:	d014      	beq.n	8013ab6 <mcpwm_set_brake_current+0x76>
 8013a8c:	7819      	ldrb	r1, [r3, #0]
 8013a8e:	4291      	cmp	r1, r2
 8013a90:	d011      	beq.n	8013ab6 <mcpwm_set_brake_current+0x76>
		if (conf->motor_type == MOTOR_TYPE_DC) {
 8013a92:	6821      	ldr	r1, [r4, #0]
 8013a94:	7888      	ldrb	r0, [r1, #2]
 8013a96:	2801      	cmp	r0, #1
 8013a98:	d01b      	beq.n	8013ad2 <mcpwm_set_brake_current+0x92>
			if (fabsf(rpm_now) > conf->l_max_erpm_fbrake) {
 8013a9a:	481c      	ldr	r0, [pc, #112]	; (8013b0c <mcpwm_set_brake_current+0xcc>)
 8013a9c:	edd0 7a00 	vldr	s15, [r0]
 8013aa0:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8013aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8013aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab0:	dd1b      	ble.n	8013aea <mcpwm_set_brake_current+0xaa>
				state = MC_STATE_RUNNING;
 8013ab2:	2202      	movs	r2, #2
 8013ab4:	701a      	strb	r2, [r3, #0]
}
 8013ab6:	b003      	add	sp, #12
 8013ab8:	bd30      	pop	{r4, r5, pc}
		control_mode = CONTROL_MODE_NONE;
 8013aba:	4811      	ldr	r0, [pc, #68]	; (8013b00 <mcpwm_set_brake_current+0xc0>)
	state = MC_STATE_OFF;
 8013abc:	4912      	ldr	r1, [pc, #72]	; (8013b08 <mcpwm_set_brake_current+0xc8>)
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8013abe:	4a14      	ldr	r2, [pc, #80]	; (8013b10 <mcpwm_set_brake_current+0xd0>)
	state = MC_STATE_OFF;
 8013ac0:	2300      	movs	r3, #0
		control_mode = CONTROL_MODE_NONE;
 8013ac2:	2407      	movs	r4, #7
 8013ac4:	7004      	strb	r4, [r0, #0]
	state = MC_STATE_OFF;
 8013ac6:	700b      	strb	r3, [r1, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8013ac8:	6013      	str	r3, [r2, #0]
	stop_pwm_hw();
 8013aca:	f7ff f9d1 	bl	8012e70 <stop_pwm_hw>
}
 8013ace:	b003      	add	sp, #12
 8013ad0:	bd30      	pop	{r4, r5, pc}
			if (fabsf(dutycycle_now) > 0.1) {
 8013ad2:	4910      	ldr	r1, [pc, #64]	; (8013b14 <mcpwm_set_brake_current+0xd4>)
 8013ad4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013b18 <mcpwm_set_brake_current+0xd8>
 8013ad8:	edd1 7a00 	vldr	s15, [r1]
 8013adc:	eef0 7ae7 	vabs.f32	s15, s15
 8013ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae8:	dce3      	bgt.n	8013ab2 <mcpwm_set_brake_current+0x72>
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8013aea:	4909      	ldr	r1, [pc, #36]	; (8013b10 <mcpwm_set_brake_current+0xd0>)
	state = MC_STATE_FULL_BRAKE;
 8013aec:	701a      	strb	r2, [r3, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8013aee:	2300      	movs	r3, #0
 8013af0:	600b      	str	r3, [r1, #0]
	full_brake_hw();
 8013af2:	f7ff f97d 	bl	8012df0 <full_brake_hw>
}
 8013af6:	b003      	add	sp, #12
 8013af8:	bd30      	pop	{r4, r5, pc}
 8013afa:	bf00      	nop
 8013afc:	20004d48 	.word	0x20004d48
 8013b00:	20004d4c 	.word	0x20004d4c
 8013b04:	20004dec 	.word	0x20004dec
 8013b08:	200059ec 	.word	0x200059ec
 8013b0c:	2000543c 	.word	0x2000543c
 8013b10:	20004f48 	.word	0x20004f48
 8013b14:	20004e14 	.word	0x20004e14
 8013b18:	3dcccccd 	.word	0x3dcccccd
 8013b1c:	00000000 	.word	0x00000000

08013b20 <mcpwm_get_comm_step>:
	return comm_step;
 8013b20:	4b01      	ldr	r3, [pc, #4]	; (8013b28 <mcpwm_get_comm_step+0x8>)
 8013b22:	6818      	ldr	r0, [r3, #0]
}
 8013b24:	4770      	bx	lr
 8013b26:	bf00      	nop
 8013b28:	20004d44 	.word	0x20004d44
 8013b2c:	00000000 	.word	0x00000000

08013b30 <mcpwm_get_duty_cycle_now>:
	return dutycycle_now;
 8013b30:	4b01      	ldr	r3, [pc, #4]	; (8013b38 <mcpwm_get_duty_cycle_now+0x8>)
 8013b32:	ed93 0a00 	vldr	s0, [r3]
}
 8013b36:	4770      	bx	lr
 8013b38:	20004e14 	.word	0x20004e14
 8013b3c:	00000000 	.word	0x00000000

08013b40 <mcpwm_get_switching_frequency_now>:
	return switching_frequency_now;
 8013b40:	4b01      	ldr	r3, [pc, #4]	; (8013b48 <mcpwm_get_switching_frequency_now+0x8>)
 8013b42:	ed93 0a00 	vldr	s0, [r3]
}
 8013b46:	4770      	bx	lr
 8013b48:	200059f0 	.word	0x200059f0
 8013b4c:	00000000 	.word	0x00000000

08013b50 <mcpwm_get_rpm>:
	return direction ? rpm_now : -rpm_now;
 8013b50:	4b06      	ldr	r3, [pc, #24]	; (8013b6c <mcpwm_get_rpm+0x1c>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	b11b      	cbz	r3, 8013b5e <mcpwm_get_rpm+0xe>
 8013b56:	4b06      	ldr	r3, [pc, #24]	; (8013b70 <mcpwm_get_rpm+0x20>)
 8013b58:	ed93 0a00 	vldr	s0, [r3]
}
 8013b5c:	4770      	bx	lr
	return direction ? rpm_now : -rpm_now;
 8013b5e:	4b04      	ldr	r3, [pc, #16]	; (8013b70 <mcpwm_get_rpm+0x20>)
 8013b60:	ed93 0a00 	vldr	s0, [r3]
 8013b64:	eeb1 0a40 	vneg.f32	s0, s0
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop
 8013b6c:	20004e10 	.word	0x20004e10
 8013b70:	2000543c 	.word	0x2000543c
	...

08013b80 <mcpwm_get_state>:
	return state;
 8013b80:	4b01      	ldr	r3, [pc, #4]	; (8013b88 <mcpwm_get_state+0x8>)
 8013b82:	7818      	ldrb	r0, [r3, #0]
}
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	200059ec 	.word	0x200059ec
 8013b8c:	00000000 	.word	0x00000000

08013b90 <mcpwm_get_kv_filtered>:
	float value = filter_run_fir_iteration((float*)kv_fir_samples,
 8013b90:	4b03      	ldr	r3, [pc, #12]	; (8013ba0 <mcpwm_get_kv_filtered+0x10>)
 8013b92:	4904      	ldr	r1, [pc, #16]	; (8013ba4 <mcpwm_get_kv_filtered+0x14>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	4804      	ldr	r0, [pc, #16]	; (8013ba8 <mcpwm_get_kv_filtered+0x18>)
 8013b98:	2207      	movs	r2, #7
 8013b9a:	f7fe bbb9 	b.w	8012310 <filter_run_fir_iteration>
 8013b9e:	bf00      	nop
 8013ba0:	20005150 	.word	0x20005150
 8013ba4:	20004f50 	.word	0x20004f50
 8013ba8:	20005154 	.word	0x20005154
 8013bac:	00000000 	.word	0x00000000

08013bb0 <mcpwm_get_tot_current>:
	return last_current_sample;
 8013bb0:	4b01      	ldr	r3, [pc, #4]	; (8013bb8 <mcpwm_get_tot_current+0x8>)
 8013bb2:	ed93 0a00 	vldr	s0, [r3]
}
 8013bb6:	4770      	bx	lr
 8013bb8:	20005358 	.word	0x20005358
 8013bbc:	00000000 	.word	0x00000000

08013bc0 <mcpwm_get_tot_current_filtered>:
	return last_current_sample_filtered;
 8013bc0:	4b01      	ldr	r3, [pc, #4]	; (8013bc8 <mcpwm_get_tot_current_filtered+0x8>)
 8013bc2:	ed93 0a00 	vldr	s0, [r3]
}
 8013bc6:	4770      	bx	lr
 8013bc8:	2000535c 	.word	0x2000535c
 8013bcc:	00000000 	.word	0x00000000

08013bd0 <mcpwm_get_tot_current_directional>:
	return last_current_sample;
 8013bd0:	4a06      	ldr	r2, [pc, #24]	; (8013bec <mcpwm_get_tot_current_directional+0x1c>)
	return dutycycle_now > 0.0 ? retval : -retval;
 8013bd2:	4b07      	ldr	r3, [pc, #28]	; (8013bf0 <mcpwm_get_tot_current_directional+0x20>)
	return last_current_sample;
 8013bd4:	ed92 0a00 	vldr	s0, [r2]
	return dutycycle_now > 0.0 ? retval : -retval;
 8013bd8:	edd3 7a00 	vldr	s15, [r3]
 8013bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be4:	bfd8      	it	le
 8013be6:	eeb1 0a40 	vnegle.f32	s0, s0
}
 8013bea:	4770      	bx	lr
 8013bec:	20005358 	.word	0x20005358
 8013bf0:	20004e14 	.word	0x20004e14
	...

08013c00 <mcpwm_get_tot_current_directional_filtered>:
	return last_current_sample_filtered;
 8013c00:	4a06      	ldr	r2, [pc, #24]	; (8013c1c <mcpwm_get_tot_current_directional_filtered+0x1c>)
	return dutycycle_now > 0.0 ? retval : -retval;
 8013c02:	4b07      	ldr	r3, [pc, #28]	; (8013c20 <mcpwm_get_tot_current_directional_filtered+0x20>)
	return last_current_sample_filtered;
 8013c04:	ed92 0a00 	vldr	s0, [r2]
	return dutycycle_now > 0.0 ? retval : -retval;
 8013c08:	edd3 7a00 	vldr	s15, [r3]
 8013c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c14:	bfd8      	it	le
 8013c16:	eeb1 0a40 	vnegle.f32	s0, s0
}
 8013c1a:	4770      	bx	lr
 8013c1c:	2000535c 	.word	0x2000535c
 8013c20:	20004e14 	.word	0x20004e14
	...

08013c30 <mcpwm_get_tot_current_in_filtered>:
	return last_current_sample_filtered;
 8013c30:	4a05      	ldr	r2, [pc, #20]	; (8013c48 <mcpwm_get_tot_current_in_filtered+0x18>)
	return mcpwm_get_tot_current_filtered() * fabsf(dutycycle_now);
 8013c32:	4b06      	ldr	r3, [pc, #24]	; (8013c4c <mcpwm_get_tot_current_in_filtered+0x1c>)
	return last_current_sample_filtered;
 8013c34:	ed92 0a00 	vldr	s0, [r2]
	return mcpwm_get_tot_current_filtered() * fabsf(dutycycle_now);
 8013c38:	edd3 7a00 	vldr	s15, [r3]
 8013c3c:	eef0 7ae7 	vabs.f32	s15, s15
}
 8013c40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013c44:	4770      	bx	lr
 8013c46:	bf00      	nop
 8013c48:	2000535c 	.word	0x2000535c
 8013c4c:	20004e14 	.word	0x20004e14

08013c50 <mcpwm_get_tachometer_value>:
	int val = tachometer;
 8013c50:	4b03      	ldr	r3, [pc, #12]	; (8013c60 <mcpwm_get_tachometer_value+0x10>)
 8013c52:	681a      	ldr	r2, [r3, #0]
	if (reset) {
 8013c54:	b108      	cbz	r0, 8013c5a <mcpwm_get_tachometer_value+0xa>
		tachometer = 0;
 8013c56:	2100      	movs	r1, #0
 8013c58:	6019      	str	r1, [r3, #0]
}
 8013c5a:	4610      	mov	r0, r2
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop
 8013c60:	200059f4 	.word	0x200059f4
	...

08013c70 <mcpwm_get_tachometer_abs_value>:
	int val = tachometer_abs;
 8013c70:	4b03      	ldr	r3, [pc, #12]	; (8013c80 <mcpwm_get_tachometer_abs_value+0x10>)
 8013c72:	681a      	ldr	r2, [r3, #0]
	if (reset) {
 8013c74:	b108      	cbz	r0, 8013c7a <mcpwm_get_tachometer_abs_value+0xa>
		tachometer_abs = 0;
 8013c76:	2100      	movs	r1, #0
 8013c78:	6019      	str	r1, [r3, #0]
}
 8013c7a:	4610      	mov	r0, r2
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop
 8013c80:	200059f8 	.word	0x200059f8
	...

08013c90 <mcpwm_stop_pwm>:
	control_mode = CONTROL_MODE_NONE;
 8013c90:	4806      	ldr	r0, [pc, #24]	; (8013cac <mcpwm_stop_pwm+0x1c>)
	state = MC_STATE_OFF;
 8013c92:	4907      	ldr	r1, [pc, #28]	; (8013cb0 <mcpwm_stop_pwm+0x20>)
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8013c94:	4a07      	ldr	r2, [pc, #28]	; (8013cb4 <mcpwm_stop_pwm+0x24>)
void mcpwm_stop_pwm(void) {
 8013c96:	b410      	push	{r4}
	control_mode = CONTROL_MODE_NONE;
 8013c98:	2407      	movs	r4, #7
 8013c9a:	7004      	strb	r4, [r0, #0]
	state = MC_STATE_OFF;
 8013c9c:	2300      	movs	r3, #0
}
 8013c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
	state = MC_STATE_OFF;
 8013ca2:	700b      	strb	r3, [r1, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8013ca4:	6013      	str	r3, [r2, #0]
	stop_pwm_hw();
 8013ca6:	f7ff b8e3 	b.w	8012e70 <stop_pwm_hw>
 8013caa:	bf00      	nop
 8013cac:	20004d4c 	.word	0x20004d4c
 8013cb0:	200059ec 	.word	0x200059ec
 8013cb4:	20004f48 	.word	0x20004f48
	...

08013cc0 <mcpwm_adc_inj_int_handler>:
void mcpwm_adc_inj_int_handler(void) {
 8013cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TIM12->CNT = 0;
 8013cc2:	4ba7      	ldr	r3, [pc, #668]	; (8013f60 <mcpwm_adc_inj_int_handler+0x2a0>)
	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8013cc4:	48a7      	ldr	r0, [pc, #668]	; (8013f64 <mcpwm_adc_inj_int_handler+0x2a4>)
	TIM12->CNT = 0;
 8013cc6:	2200      	movs	r2, #0
void mcpwm_adc_inj_int_handler(void) {
 8013cc8:	ed2d 8b02 	vpush	{d8}
	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8013ccc:	2114      	movs	r1, #20
	TIM12->CNT = 0;
 8013cce:	625a      	str	r2, [r3, #36]	; 0x24
	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8013cd0:	f010 fb9e 	bl	8024410 <ADC_GetInjectedConversionValue>
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8013cd4:	2114      	movs	r1, #20
	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8013cd6:	4606      	mov	r6, r0
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8013cd8:	48a3      	ldr	r0, [pc, #652]	; (8013f68 <mcpwm_adc_inj_int_handler+0x2a8>)
 8013cda:	f010 fb99 	bl	8024410 <ADC_GetInjectedConversionValue>
	int curr0_2 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_2);
 8013cde:	2118      	movs	r1, #24
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8013ce0:	4605      	mov	r5, r0
	int curr0_2 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_2);
 8013ce2:	48a1      	ldr	r0, [pc, #644]	; (8013f68 <mcpwm_adc_inj_int_handler+0x2a8>)
 8013ce4:	f010 fb94 	bl	8024410 <ADC_GetInjectedConversionValue>
	int curr1_2 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_2);
 8013ce8:	2118      	movs	r1, #24
 8013cea:	489e      	ldr	r0, [pc, #632]	; (8013f64 <mcpwm_adc_inj_int_handler+0x2a4>)
 8013cec:	f010 fb90 	bl	8024410 <ADC_GetInjectedConversionValue>
	if (curr_samp_volt & (1 << 0)) {
 8013cf0:	4b9e      	ldr	r3, [pc, #632]	; (8013f6c <mcpwm_adc_inj_int_handler+0x2ac>)
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	07d2      	lsls	r2, r2, #31
 8013cf6:	d502      	bpl.n	8013cfe <mcpwm_adc_inj_int_handler+0x3e>
		curr0 = ADC_Value[ADC_IND_CURR1];
 8013cf8:	4a9d      	ldr	r2, [pc, #628]	; (8013f70 <mcpwm_adc_inj_int_handler+0x2b0>)
 8013cfa:	8916      	ldrh	r6, [r2, #8]
 8013cfc:	b2b6      	uxth	r6, r6
	if (curr_samp_volt & (1 << 1)) {
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	079b      	lsls	r3, r3, #30
 8013d02:	d502      	bpl.n	8013d0a <mcpwm_adc_inj_int_handler+0x4a>
		curr1 = ADC_Value[ADC_IND_CURR2];
 8013d04:	4b9a      	ldr	r3, [pc, #616]	; (8013f70 <mcpwm_adc_inj_int_handler+0x2b0>)
 8013d06:	88dd      	ldrh	r5, [r3, #6]
 8013d08:	b2ad      	uxth	r5, r5
	curr0_sum += curr0;
 8013d0a:	4c9a      	ldr	r4, [pc, #616]	; (8013f74 <mcpwm_adc_inj_int_handler+0x2b4>)
	curr1_sum += curr1;
 8013d0c:	4f9a      	ldr	r7, [pc, #616]	; (8013f78 <mcpwm_adc_inj_int_handler+0x2b8>)
	curr0_sum += curr0;
 8013d0e:	6823      	ldr	r3, [r4, #0]
	curr_start_samples++;
 8013d10:	4a9a      	ldr	r2, [pc, #616]	; (8013f7c <mcpwm_adc_inj_int_handler+0x2bc>)
	curr0_currsamp -= curr0_offset;
 8013d12:	499b      	ldr	r1, [pc, #620]	; (8013f80 <mcpwm_adc_inj_int_handler+0x2c0>)
	curr1_currsamp -= curr1_offset;
 8013d14:	489b      	ldr	r0, [pc, #620]	; (8013f84 <mcpwm_adc_inj_int_handler+0x2c4>)
	curr0_sum += curr0;
 8013d16:	4433      	add	r3, r6
 8013d18:	6023      	str	r3, [r4, #0]
	curr1_sum += curr1;
 8013d1a:	683b      	ldr	r3, [r7, #0]
	ADC_curr_norm_value[0] = curr0;
 8013d1c:	4c9a      	ldr	r4, [pc, #616]	; (8013f88 <mcpwm_adc_inj_int_handler+0x2c8>)
	curr1_sum += curr1;
 8013d1e:	442b      	add	r3, r5
 8013d20:	603b      	str	r3, [r7, #0]
	curr_start_samples++;
 8013d22:	6813      	ldr	r3, [r2, #0]
	if (conf->motor_type == MOTOR_TYPE_DC) {
 8013d24:	4f99      	ldr	r7, [pc, #612]	; (8013f8c <mcpwm_adc_inj_int_handler+0x2cc>)
	curr_start_samples++;
 8013d26:	3301      	adds	r3, #1
 8013d28:	6013      	str	r3, [r2, #0]
	curr0_currsamp -= curr0_offset;
 8013d2a:	680b      	ldr	r3, [r1, #0]
	curr1_currsamp -= curr1_offset;
 8013d2c:	6803      	ldr	r3, [r0, #0]
	curr0 -= curr0_offset;
 8013d2e:	680a      	ldr	r2, [r1, #0]
	curr1 -= curr1_offset;
 8013d30:	6803      	ldr	r3, [r0, #0]
	curr0_2 -= curr0_offset;
 8013d32:	f8d1 e000 	ldr.w	lr, [r1]
	curr1_2 -= curr1_offset;
 8013d36:	f8d0 e000 	ldr.w	lr, [r0]
	curr1 -= curr1_offset;
 8013d3a:	1aed      	subs	r5, r5, r3
	curr0 -= curr0_offset;
 8013d3c:	1ab6      	subs	r6, r6, r2
	ADC_curr_norm_value[0] = curr0;
 8013d3e:	6026      	str	r6, [r4, #0]
	ADC_curr_norm_value[1] = curr1;
 8013d40:	6065      	str	r5, [r4, #4]
	ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);
 8013d42:	6823      	ldr	r3, [r4, #0]
 8013d44:	6865      	ldr	r5, [r4, #4]
	if (conf->motor_type == MOTOR_TYPE_DC) {
 8013d46:	683a      	ldr	r2, [r7, #0]
	ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);
 8013d48:	442b      	add	r3, r5
 8013d4a:	425b      	negs	r3, r3
 8013d4c:	60a3      	str	r3, [r4, #8]
	if (conf->motor_type == MOTOR_TYPE_DC) {
 8013d4e:	7893      	ldrb	r3, [r2, #2]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d023      	beq.n	8013d9c <mcpwm_adc_inj_int_handler+0xdc>
		if (state == MC_STATE_FULL_BRAKE) {
 8013d54:	4d8e      	ldr	r5, [pc, #568]	; (8013f90 <mcpwm_adc_inj_int_handler+0x2d0>)
 8013d56:	782b      	ldrb	r3, [r5, #0]
 8013d58:	2b03      	cmp	r3, #3
 8013d5a:	f000 818f 	beq.w	801407c <mcpwm_adc_inj_int_handler+0x3bc>
			if (direction) {
 8013d5e:	4b8d      	ldr	r3, [pc, #564]	; (8013f94 <mcpwm_adc_inj_int_handler+0x2d4>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	b16b      	cbz	r3, 8013d80 <mcpwm_adc_inj_int_handler+0xc0>
				switch (comm_step) {
 8013d64:	4b8c      	ldr	r3, [pc, #560]	; (8013f98 <mcpwm_adc_inj_int_handler+0x2d8>)
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	3a01      	subs	r2, #1
 8013d6a:	2a05      	cmp	r2, #5
 8013d6c:	f200 81bb 	bhi.w	80140e6 <mcpwm_adc_inj_int_handler+0x426>
 8013d70:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013d74:	00720072 	.word	0x00720072
 8013d78:	00f100ec 	.word	0x00f100ec
 8013d7c:	00e500e5 	.word	0x00e500e5
				switch (comm_step) {
 8013d80:	4b85      	ldr	r3, [pc, #532]	; (8013f98 <mcpwm_adc_inj_int_handler+0x2d8>)
 8013d82:	681a      	ldr	r2, [r3, #0]
 8013d84:	3a01      	subs	r2, #1
 8013d86:	2a05      	cmp	r2, #5
 8013d88:	f200 81ad 	bhi.w	80140e6 <mcpwm_adc_inj_int_handler+0x426>
 8013d8c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013d90:	00de00e3 	.word	0x00de00e3
 8013d94:	00640064 	.word	0x00640064
 8013d98:	00d700d7 	.word	0x00d700d7
		if (direction) {
 8013d9c:	4b7d      	ldr	r3, [pc, #500]	; (8013f94 <mcpwm_adc_inj_int_handler+0x2d4>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d155      	bne.n	8013e50 <mcpwm_adc_inj_int_handler+0x190>
			curr_tot_sample = -(float)(ADC_Value[ADC_IND_CURR1] - curr0_offset);
 8013da4:	4b72      	ldr	r3, [pc, #456]	; (8013f70 <mcpwm_adc_inj_int_handler+0x2b0>)
 8013da6:	891b      	ldrh	r3, [r3, #8]
 8013da8:	6809      	ldr	r1, [r1, #0]
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	1a5b      	subs	r3, r3, r1
 8013dae:	ee07 3a90 	vmov	s15, r3
 8013db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013db6:	eeb1 8a67 	vneg.f32	s16, s15
	last_current_sample = curr_tot_sample * FAC_CURRENT;
 8013dba:	eddf 7a78 	vldr	s15, [pc, #480]	; 8013f9c <mcpwm_adc_inj_int_handler+0x2dc>
 8013dbe:	4b78      	ldr	r3, [pc, #480]	; (8013fa0 <mcpwm_adc_inj_int_handler+0x2e0>)
	if (fabsf(last_current_sample) > (conf->l_abs_current_max * 1.2)) {
 8013dc0:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8013fa4 <mcpwm_adc_inj_int_handler+0x2e4>
	last_current_sample = curr_tot_sample * FAC_CURRENT;
 8013dc4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013dc8:	edc3 7a00 	vstr	s15, [r3]
	if (fabsf(last_current_sample) > (conf->l_abs_current_max * 1.2)) {
 8013dcc:	edd3 6a00 	vldr	s13, [r3]
 8013dd0:	ed92 7a05 	vldr	s14, [r2, #20]
 8013dd4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013dd8:	eef0 6ae6 	vabs.f32	s13, s13
 8013ddc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de4:	dd14      	ble.n	8013e10 <mcpwm_adc_inj_int_handler+0x150>
		last_current_sample = SIGN(last_current_sample) * conf->l_abs_current_max * 1.2;
 8013de6:	edd3 7a00 	vldr	s15, [r3]
 8013dea:	ed92 7a05 	vldr	s14, [r2, #20]
 8013dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013dfe:	bf58      	it	pl
 8013e00:	eef0 7a66 	vmovpl.f32	s15, s13
 8013e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e08:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013e0c:	edc3 7a00 	vstr	s15, [r3]
	filter_add_sample((float*) current_fir_samples, last_current_sample,
 8013e10:	4c65      	ldr	r4, [pc, #404]	; (8013fa8 <mcpwm_adc_inj_int_handler+0x2e8>)
 8013e12:	ed93 0a00 	vldr	s0, [r3]
 8013e16:	4865      	ldr	r0, [pc, #404]	; (8013fac <mcpwm_adc_inj_int_handler+0x2ec>)
 8013e18:	4622      	mov	r2, r4
 8013e1a:	2104      	movs	r1, #4
 8013e1c:	f7fe faa0 	bl	8012360 <filter_add_sample>
	last_current_sample_filtered = filter_run_fir_iteration(
 8013e20:	6823      	ldr	r3, [r4, #0]
 8013e22:	4963      	ldr	r1, [pc, #396]	; (8013fb0 <mcpwm_adc_inj_int_handler+0x2f0>)
 8013e24:	4861      	ldr	r0, [pc, #388]	; (8013fac <mcpwm_adc_inj_int_handler+0x2ec>)
 8013e26:	2204      	movs	r2, #4
 8013e28:	f7fe fa72 	bl	8012310 <filter_run_fir_iteration>
 8013e2c:	4a61      	ldr	r2, [pc, #388]	; (8013fb4 <mcpwm_adc_inj_int_handler+0x2f4>)
	last_inj_adc_isr_duration = (float) TIM12->CNT / 10000000.0;
 8013e2e:	4b4c      	ldr	r3, [pc, #304]	; (8013f60 <mcpwm_adc_inj_int_handler+0x2a0>)
	last_current_sample_filtered = filter_run_fir_iteration(
 8013e30:	ed82 0a00 	vstr	s0, [r2]
	last_inj_adc_isr_duration = (float) TIM12->CNT / 10000000.0;
 8013e34:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013e38:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013fb8 <mcpwm_adc_inj_int_handler+0x2f8>
 8013e3c:	4b5f      	ldr	r3, [pc, #380]	; (8013fbc <mcpwm_adc_inj_int_handler+0x2fc>)
 8013e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8013e42:	ecbd 8b02 	vpop	{d8}
	last_inj_adc_isr_duration = (float) TIM12->CNT / 10000000.0;
 8013e46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013e4a:	ed83 7a00 	vstr	s14, [r3]
}
 8013e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			curr_tot_sample = -(float)(ADC_Value[ADC_IND_CURR2] - curr1_offset);
 8013e50:	4b47      	ldr	r3, [pc, #284]	; (8013f70 <mcpwm_adc_inj_int_handler+0x2b0>)
 8013e52:	88db      	ldrh	r3, [r3, #6]
 8013e54:	6801      	ldr	r1, [r0, #0]
 8013e56:	e7a8      	b.n	8013daa <mcpwm_adc_inj_int_handler+0xea>
				case 4: curr_tot_sample = -(float)ADC_curr_norm_value[1]; break;
 8013e58:	edd4 7a01 	vldr	s15, [r4, #4]
 8013e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e60:	eef1 7a67 	vneg.f32	s15, s15
			if (comm_step != comm_step_prev) {
 8013e64:	4a56      	ldr	r2, [pc, #344]	; (8013fc0 <mcpwm_adc_inj_int_handler+0x300>)
 8013e66:	6818      	ldr	r0, [r3, #0]
 8013e68:	6811      	ldr	r1, [r2, #0]
			comm_step_prev = comm_step;
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	6013      	str	r3, [r2, #0]
			if (comm_step != comm_step_prev) {
 8013e6e:	4288      	cmp	r0, r1
				curr_tot_sample = prev_tot_sample;
 8013e70:	bf16      	itet	ne
 8013e72:	4954      	ldrne	r1, [pc, #336]	; (8013fc4 <mcpwm_adc_inj_int_handler+0x304>)
 8013e74:	4953      	ldreq	r1, [pc, #332]	; (8013fc4 <mcpwm_adc_inj_int_handler+0x304>)
 8013e76:	ed91 8a00 	vldrne	s16, [r1]
			prev_tot_sample = tot_sample_tmp;
 8013e7a:	edc1 7a00 	vstr	s15, [r1]
 8013e7e:	bf08      	it	eq
 8013e80:	eeb0 8a67 	vmoveq.f32	s16, s15
		if (detect_now == 4) {
 8013e84:	4e50      	ldr	r6, [pc, #320]	; (8013fc8 <mcpwm_adc_inj_int_handler+0x308>)
 8013e86:	6833      	ldr	r3, [r6, #0]
 8013e88:	2b04      	cmp	r3, #4
 8013e8a:	d00a      	beq.n	8013ea2 <mcpwm_adc_inj_int_handler+0x1e2>
		if (detect_now) {
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f000 80a5 	beq.w	8013fdc <mcpwm_adc_inj_int_handler+0x31c>
		if (IS_DETECTING() && detect_now == 0) {
 8013e92:	782a      	ldrb	r2, [r5, #0]
			detect_now--;
 8013e94:	3b01      	subs	r3, #1
		if (IS_DETECTING() && detect_now == 0) {
 8013e96:	2a01      	cmp	r2, #1
			detect_now--;
 8013e98:	6033      	str	r3, [r6, #0]
		if (IS_DETECTING() && detect_now == 0) {
 8013e9a:	f000 80eb 	beq.w	8014074 <mcpwm_adc_inj_int_handler+0x3b4>
 8013e9e:	683a      	ldr	r2, [r7, #0]
 8013ea0:	e78b      	b.n	8013dba <mcpwm_adc_inj_int_handler+0xfa>
			const float a = fabsf(ADC_curr_norm_value[0]);
 8013ea2:	ed94 7a00 	vldr	s14, [r4]
			const float b = fabsf(ADC_curr_norm_value[1]);
 8013ea6:	edd4 7a01 	vldr	s15, [r4, #4]
				mcpwm_detect_currents[detect_step] = a;
 8013eaa:	4b48      	ldr	r3, [pc, #288]	; (8013fcc <mcpwm_adc_inj_int_handler+0x30c>)
 8013eac:	4a48      	ldr	r2, [pc, #288]	; (8013fd0 <mcpwm_adc_inj_int_handler+0x310>)
 8013eae:	6819      	ldr	r1, [r3, #0]
			const float a = fabsf(ADC_curr_norm_value[0]);
 8013eb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			const float b = fabsf(ADC_curr_norm_value[1]);
 8013eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			const float a = fabsf(ADC_curr_norm_value[0]);
 8013eb8:	eeb0 7ac7 	vabs.f32	s14, s14
			const float b = fabsf(ADC_curr_norm_value[1]);
 8013ebc:	eef0 7ae7 	vabs.f32	s15, s15
			if (a > b) {
 8013ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				mcpwm_detect_currents[detect_step] = a;
 8013ec8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013ecc:	bfcc      	ite	gt
 8013ece:	ed81 7a00 	vstrgt	s14, [r1]
				mcpwm_detect_currents[detect_step] = b;
 8013ed2:	edc1 7a00 	vstrle	s15, [r1]
			if (detect_step > 0) {
 8013ed6:	6819      	ldr	r1, [r3, #0]
 8013ed8:	2900      	cmp	r1, #0
 8013eda:	f340 80f0 	ble.w	80140be <mcpwm_adc_inj_int_handler+0x3fe>
				mcpwm_detect_currents_diff[detect_step] =
 8013ede:	f8d3 e000 	ldr.w	lr, [r3]
						mcpwm_detect_currents[detect_step - 1] - mcpwm_detect_currents[detect_step];
 8013ee2:	6819      	ldr	r1, [r3, #0]
				mcpwm_detect_currents_diff[detect_step] =
 8013ee4:	483b      	ldr	r0, [pc, #236]	; (8013fd4 <mcpwm_adc_inj_int_handler+0x314>)
						mcpwm_detect_currents[detect_step - 1] - mcpwm_detect_currents[detect_step];
 8013ee6:	3901      	subs	r1, #1
 8013ee8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013eec:	edd1 7a00 	vldr	s15, [r1]
 8013ef0:	681c      	ldr	r4, [r3, #0]
 8013ef2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8013ef6:	ed94 7a00 	vldr	s14, [r4]
 8013efa:	ee77 7ac7 	vsub.f32	s15, s15, s14
				mcpwm_detect_currents_diff[detect_step] =
 8013efe:	eb00 018e 	add.w	r1, r0, lr, lsl #2
 8013f02:	edc1 7a00 	vstr	s15, [r1]
			const int vzero = ADC_V_ZERO;
 8013f06:	4c1a      	ldr	r4, [pc, #104]	; (8013f70 <mcpwm_adc_inj_int_handler+0x2b0>)
			switch (comm_step) {
 8013f08:	4823      	ldr	r0, [pc, #140]	; (8013f98 <mcpwm_adc_inj_int_handler+0x2d8>)
			const int vzero = ADC_V_ZERO;
 8013f0a:	8a21      	ldrh	r1, [r4, #16]
			switch (comm_step) {
 8013f0c:	6800      	ldr	r0, [r0, #0]
 8013f0e:	2806      	cmp	r0, #6
			const int vzero = ADC_V_ZERO;
 8013f10:	b289      	uxth	r1, r1
 8013f12:	f200 8090 	bhi.w	8014036 <mcpwm_adc_inj_int_handler+0x376>
 8013f16:	f04f 0e01 	mov.w	lr, #1
 8013f1a:	fa0e f000 	lsl.w	r0, lr, r0
 8013f1e:	f010 0f48 	tst.w	r0, #72	; 0x48
 8013f22:	fa21 f10e 	lsr.w	r1, r1, lr
 8013f26:	d178      	bne.n	801401a <mcpwm_adc_inj_int_handler+0x35a>
 8013f28:	f010 0f24 	tst.w	r0, #36	; 0x24
 8013f2c:	f040 80d7 	bne.w	80140de <mcpwm_adc_inj_int_handler+0x41e>
 8013f30:	f010 0f12 	tst.w	r0, #18
 8013f34:	d07f      	beq.n	8014036 <mcpwm_adc_inj_int_handler+0x376>
				mcpwm_detect_voltages[detect_step] = ADC_V_L1 - vzero;
 8013f36:	f8d3 e000 	ldr.w	lr, [r3]
 8013f3a:	88a0      	ldrh	r0, [r4, #4]
 8013f3c:	e070      	b.n	8014020 <mcpwm_adc_inj_int_handler+0x360>
				case 6: curr_tot_sample = -(float)ADC_curr_norm_value[0]; break;
 8013f3e:	edd4 7a00 	vldr	s15, [r4]
 8013f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f46:	eef1 7a67 	vneg.f32	s15, s15
 8013f4a:	e78b      	b.n	8013e64 <mcpwm_adc_inj_int_handler+0x1a4>
				case 2: curr_tot_sample = (float)ADC_curr_norm_value[0]; break;
 8013f4c:	edd4 7a00 	vldr	s15, [r4]
 8013f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f54:	e786      	b.n	8013e64 <mcpwm_adc_inj_int_handler+0x1a4>
				case 1: curr_tot_sample = (float)ADC_curr_norm_value[1]; break;
 8013f56:	edd4 7a01 	vldr	s15, [r4, #4]
 8013f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f5e:	e781      	b.n	8013e64 <mcpwm_adc_inj_int_handler+0x1a4>
 8013f60:	40001800 	.word	0x40001800
 8013f64:	40012000 	.word	0x40012000
 8013f68:	40012100 	.word	0x40012100
 8013f6c:	20004d60 	.word	0x20004d60
 8013f70:	2000c034 	.word	0x2000c034
 8013f74:	20004d54 	.word	0x20004d54
 8013f78:	20004d5c 	.word	0x20004d5c
 8013f7c:	20004d64 	.word	0x20004d64
 8013f80:	20004d50 	.word	0x20004d50
 8013f84:	20004d58 	.word	0x20004d58
 8013f88:	2000c04c 	.word	0x2000c04c
 8013f8c:	20004d48 	.word	0x20004d48
 8013f90:	200059ec 	.word	0x200059ec
 8013f94:	20004e10 	.word	0x20004e10
 8013f98:	20004d44 	.word	0x20004d44
 8013f9c:	3da50a50 	.word	0x3da50a50
 8013fa0:	20005358 	.word	0x20005358
 8013fa4:	3f99999a 	.word	0x3f99999a
 8013fa8:	20004da8 	.word	0x20004da8
 8013fac:	20004dac 	.word	0x20004dac
 8013fb0:	20004d68 	.word	0x20004d68
 8013fb4:	2000535c 	.word	0x2000535c
 8013fb8:	4b189680 	.word	0x4b189680
 8013fbc:	20005360 	.word	0x20005360
 8013fc0:	20001008 	.word	0x20001008
 8013fc4:	20005410 	.word	0x20005410
 8013fc8:	20004e08 	.word	0x20004e08
 8013fcc:	20004e0c 	.word	0x20004e0c
 8013fd0:	200053a0 	.word	0x200053a0
 8013fd4:	200053d0 	.word	0x200053d0
 8013fd8:	3e4ccccd 	.word	0x3e4ccccd
		if (IS_DETECTING() && detect_now == 0) {
 8013fdc:	782b      	ldrb	r3, [r5, #0]
 8013fde:	2b01      	cmp	r3, #1
 8013fe0:	f47f af5d 	bne.w	8013e9e <mcpwm_adc_inj_int_handler+0x1de>
			detect_now = 5;
 8013fe4:	2305      	movs	r3, #5
			set_duty_cycle_hw(0.2);
 8013fe6:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8013fd8 <mcpwm_adc_inj_int_handler+0x318>
			detect_now = 5;
 8013fea:	6033      	str	r3, [r6, #0]
			set_duty_cycle_hw(0.2);
 8013fec:	f7fe fc38 	bl	8012860 <set_duty_cycle_hw>
			detect_step++;
 8013ff0:	4b3e      	ldr	r3, [pc, #248]	; (80140ec <mcpwm_adc_inj_int_handler+0x42c>)
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	3201      	adds	r2, #1
 8013ff6:	601a      	str	r2, [r3, #0]
			if (detect_step > 5) {
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	2a05      	cmp	r2, #5
				detect_step = 0;
 8013ffc:	bfc4      	itt	gt
 8013ffe:	2200      	movgt	r2, #0
 8014000:	601a      	strgt	r2, [r3, #0]
			comm_step = detect_step + 1;
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4a3a      	ldr	r2, [pc, #232]	; (80140f0 <mcpwm_adc_inj_int_handler+0x430>)
 8014006:	3301      	adds	r3, #1
 8014008:	6013      	str	r3, [r2, #0]
			set_next_comm_step(comm_step);
 801400a:	6810      	ldr	r0, [r2, #0]
 801400c:	f7fe fcb8 	bl	8012980 <set_next_comm_step>
			TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 8014010:	2120      	movs	r1, #32
 8014012:	4838      	ldr	r0, [pc, #224]	; (80140f4 <mcpwm_adc_inj_int_handler+0x434>)
 8014014:	f010 ffbc 	bl	8024f90 <TIM_GenerateEvent>
 8014018:	e741      	b.n	8013e9e <mcpwm_adc_inj_int_handler+0x1de>
				mcpwm_detect_voltages[detect_step] = ADC_V_L3 - vzero;
 801401a:	f8d3 e000 	ldr.w	lr, [r3]
 801401e:	8820      	ldrh	r0, [r4, #0]
 8014020:	4c35      	ldr	r4, [pc, #212]	; (80140f8 <mcpwm_adc_inj_int_handler+0x438>)
 8014022:	b280      	uxth	r0, r0
 8014024:	1a41      	subs	r1, r0, r1
 8014026:	ee07 1a90 	vmov	s15, r1
 801402a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801402e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
 8014032:	edc1 7a00 	vstr	s15, [r1]
			mcpwm_detect_currents_avg[detect_step] += mcpwm_detect_currents[detect_step];
 8014036:	681c      	ldr	r4, [r3, #0]
 8014038:	4830      	ldr	r0, [pc, #192]	; (80140fc <mcpwm_adc_inj_int_handler+0x43c>)
			mcpwm_detect_avg_samples[detect_step]++;
 801403a:	4931      	ldr	r1, [pc, #196]	; (8014100 <mcpwm_adc_inj_int_handler+0x440>)
			mcpwm_detect_currents_avg[detect_step] += mcpwm_detect_currents[detect_step];
 801403c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014040:	ed92 7a00 	vldr	s14, [r2]
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801404a:	edd2 7a00 	vldr	s15, [r2]
 801404e:	ee37 7a27 	vadd.f32	s14, s14, s15
			mcpwm_detect_avg_samples[detect_step]++;
 8014052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			mcpwm_detect_currents_avg[detect_step] += mcpwm_detect_currents[detect_step];
 8014056:	ed82 7a00 	vstr	s14, [r2]
			mcpwm_detect_avg_samples[detect_step]++;
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014060:	edd3 7a00 	vldr	s15, [r3]
 8014064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014068:	edc3 7a00 	vstr	s15, [r3]
			stop_pwm_hw();
 801406c:	f7fe ff00 	bl	8012e70 <stop_pwm_hw>
 8014070:	6833      	ldr	r3, [r6, #0]
 8014072:	e70b      	b.n	8013e8c <mcpwm_adc_inj_int_handler+0x1cc>
		if (IS_DETECTING() && detect_now == 0) {
 8014074:	2b00      	cmp	r3, #0
 8014076:	f47f af12 	bne.w	8013e9e <mcpwm_adc_inj_int_handler+0x1de>
 801407a:	e7b3      	b.n	8013fe4 <mcpwm_adc_inj_int_handler+0x324>
			float c0 = (float)ADC_curr_norm_value[0];
 801407c:	edd4 6a00 	vldr	s13, [r4]
			float c1 = (float)ADC_curr_norm_value[1];
 8014080:	edd4 7a01 	vldr	s15, [r4, #4]
			float c2 = (float)ADC_curr_norm_value[2];
 8014084:	ed94 7a02 	vldr	s14, [r4, #8]
			float c1 = (float)ADC_curr_norm_value[1];
 8014088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float c0 = (float)ADC_curr_norm_value[0];
 801408c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			curr_tot_sample = sqrtf((c0*c0 + c1*c1 + c2*c2) / 1.5);
 8014090:	ee67 7aa7 	vmul.f32	s15, s15, s15
			float c2 = (float)ADC_curr_norm_value[2];
 8014094:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			curr_tot_sample = sqrtf((c0*c0 + c1*c1 + c2*c2) / 1.5);
 8014098:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801409c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80140a0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80140a4:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80140a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80140ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80140b4:	f57f aee6 	bpl.w	8013e84 <mcpwm_adc_inj_int_handler+0x1c4>
 80140b8:	f011 fdf2 	bl	8025ca0 <sqrtf>
 80140bc:	e6e2      	b.n	8013e84 <mcpwm_adc_inj_int_handler+0x1c4>
				mcpwm_detect_currents_diff[detect_step] =
 80140be:	681c      	ldr	r4, [r3, #0]
						mcpwm_detect_currents[5] - mcpwm_detect_currents[detect_step];
 80140c0:	edd2 7a05 	vldr	s15, [r2, #20]
 80140c4:	6818      	ldr	r0, [r3, #0]
				mcpwm_detect_currents_diff[detect_step] =
 80140c6:	490f      	ldr	r1, [pc, #60]	; (8014104 <mcpwm_adc_inj_int_handler+0x444>)
						mcpwm_detect_currents[5] - mcpwm_detect_currents[detect_step];
 80140c8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80140cc:	ed90 7a00 	vldr	s14, [r0]
 80140d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
				mcpwm_detect_currents_diff[detect_step] =
 80140d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80140d8:	edc1 7a00 	vstr	s15, [r1]
 80140dc:	e713      	b.n	8013f06 <mcpwm_adc_inj_int_handler+0x246>
				mcpwm_detect_voltages[detect_step] = ADC_V_L2 - vzero;
 80140de:	f8d3 e000 	ldr.w	lr, [r3]
 80140e2:	8860      	ldrh	r0, [r4, #2]
 80140e4:	e79c      	b.n	8014020 <mcpwm_adc_inj_int_handler+0x360>
	float curr_tot_sample = 0;
 80140e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014108 <mcpwm_adc_inj_int_handler+0x448>
 80140ea:	e6bb      	b.n	8013e64 <mcpwm_adc_inj_int_handler+0x1a4>
 80140ec:	20004e0c 	.word	0x20004e0c
 80140f0:	20004d44 	.word	0x20004d44
 80140f4:	40010000 	.word	0x40010000
 80140f8:	200053e8 	.word	0x200053e8
 80140fc:	200053b8 	.word	0x200053b8
 8014100:	20005388 	.word	0x20005388
 8014104:	200053d0 	.word	0x200053d0
	...

08014110 <mcpwm_set_detect>:
void mcpwm_set_detect(void) {
 8014110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mc_interface_try_input()) {
 8014112:	f008 f86d 	bl	801c1f0 <mc_interface_try_input>
 8014116:	b100      	cbz	r0, 801411a <mcpwm_set_detect+0xa>
 8014118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	control_mode = CONTROL_MODE_NONE;
 801411a:	4b0f      	ldr	r3, [pc, #60]	; (8014158 <mcpwm_set_detect+0x48>)
 801411c:	4f0f      	ldr	r7, [pc, #60]	; (801415c <mcpwm_set_detect+0x4c>)
 801411e:	4e10      	ldr	r6, [pc, #64]	; (8014160 <mcpwm_set_detect+0x50>)
 8014120:	4d10      	ldr	r5, [pc, #64]	; (8014164 <mcpwm_set_detect+0x54>)
 8014122:	2207      	movs	r2, #7
 8014124:	701a      	strb	r2, [r3, #0]
 8014126:	4604      	mov	r4, r0
	stop_pwm_hw();
 8014128:	f7fe fea2 	bl	8012e70 <stop_pwm_hw>
	set_switching_frequency(conf->m_bldc_f_sw_max);
 801412c:	4b0e      	ldr	r3, [pc, #56]	; (8014168 <mcpwm_set_detect+0x58>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	ed93 0a5a 	vldr	s0, [r3, #360]	; 0x168
 8014134:	f7fe fb64 	bl	8012800 <set_switching_frequency>
		mcpwm_detect_currents[i] = 0;
 8014138:	2200      	movs	r2, #0
 801413a:	00a3      	lsls	r3, r4, #2
 801413c:	18f8      	adds	r0, r7, r3
		mcpwm_detect_currents_avg[i] = 0;
 801413e:	18f1      	adds	r1, r6, r3
	for(int i = 0;i < 6;i++) {
 8014140:	3401      	adds	r4, #1
		mcpwm_detect_avg_samples[i] = 0;
 8014142:	442b      	add	r3, r5
	for(int i = 0;i < 6;i++) {
 8014144:	2c06      	cmp	r4, #6
		mcpwm_detect_currents[i] = 0;
 8014146:	6002      	str	r2, [r0, #0]
		mcpwm_detect_currents_avg[i] = 0;
 8014148:	600a      	str	r2, [r1, #0]
		mcpwm_detect_avg_samples[i] = 0;
 801414a:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < 6;i++) {
 801414c:	d1f5      	bne.n	801413a <mcpwm_set_detect+0x2a>
	state = MC_STATE_DETECTING;
 801414e:	4b07      	ldr	r3, [pc, #28]	; (801416c <mcpwm_set_detect+0x5c>)
 8014150:	2201      	movs	r2, #1
 8014152:	701a      	strb	r2, [r3, #0]
 8014154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014156:	bf00      	nop
 8014158:	20004d4c 	.word	0x20004d4c
 801415c:	200053a0 	.word	0x200053a0
 8014160:	200053b8 	.word	0x200053b8
 8014164:	20005388 	.word	0x20005388
 8014168:	20004d48 	.word	0x20004d48
 801416c:	200059ec 	.word	0x200059ec

08014170 <mcpwm_get_detect_pos>:
float mcpwm_get_detect_pos(void) {
 8014170:	b530      	push	{r4, r5, lr}
	v[0] = mcpwm_detect_currents_avg[0] / mcpwm_detect_avg_samples[0];
 8014172:	483f      	ldr	r0, [pc, #252]	; (8014270 <mcpwm_get_detect_pos+0x100>)
 8014174:	4c3f      	ldr	r4, [pc, #252]	; (8014274 <mcpwm_get_detect_pos+0x104>)
 8014176:	ed94 2a00 	vldr	s4, [r4]
 801417a:	edd0 2a00 	vldr	s5, [r0]
	v[1] = mcpwm_detect_currents_avg[1] / mcpwm_detect_avg_samples[1];
 801417e:	ed94 3a01 	vldr	s6, [r4, #4]
 8014182:	edd0 3a01 	vldr	s7, [r0, #4]
	v[2] = mcpwm_detect_currents_avg[2] / mcpwm_detect_avg_samples[2];
 8014186:	ed94 4a02 	vldr	s8, [r4, #8]
 801418a:	edd0 6a02 	vldr	s13, [r0, #8]
	v[3] = mcpwm_detect_currents_avg[3] / mcpwm_detect_avg_samples[3];
 801418e:	edd4 4a03 	vldr	s9, [r4, #12]
 8014192:	ed90 7a03 	vldr	s14, [r0, #12]
	v[4] = mcpwm_detect_currents_avg[4] / mcpwm_detect_avg_samples[4];
 8014196:	ed94 5a04 	vldr	s10, [r4, #16]
 801419a:	edd0 7a04 	vldr	s15, [r0, #16]
	v[5] = mcpwm_detect_currents_avg[5] / mcpwm_detect_avg_samples[5];
 801419e:	edd4 5a05 	vldr	s11, [r4, #20]
 80141a2:	ed90 6a05 	vldr	s12, [r0, #20]
float mcpwm_get_detect_pos(void) {
 80141a6:	ed2d 8b04 	vpush	{d8-d9}
	v[2] = mcpwm_detect_currents_avg[2] / mcpwm_detect_avg_samples[2];
 80141aa:	ee84 8a26 	vdiv.f32	s16, s8, s13
float mcpwm_get_detect_pos(void) {
 80141ae:	b083      	sub	sp, #12
		mcpwm_detect_currents_avg[i] = 0;
 80141b0:	2100      	movs	r1, #0
	for(int i = 0;i < 6;i++) {
 80141b2:	2200      	movs	r2, #0
	v[3] = mcpwm_detect_currents_avg[3] / mcpwm_detect_avg_samples[3];
 80141b4:	eec4 6a87 	vdiv.f32	s13, s9, s14
	v[0] = mcpwm_detect_currents_avg[0] / mcpwm_detect_avg_samples[0];
 80141b8:	ee82 9a22 	vdiv.f32	s18, s4, s5
	v[4] = mcpwm_detect_currents_avg[4] / mcpwm_detect_avg_samples[4];
 80141bc:	ee85 7a27 	vdiv.f32	s14, s10, s15
	v[1] = mcpwm_detect_currents_avg[1] / mcpwm_detect_avg_samples[1];
 80141c0:	eec3 8a23 	vdiv.f32	s17, s6, s7
	v[5] = mcpwm_detect_currents_avg[5] / mcpwm_detect_avg_samples[5];
 80141c4:	eec5 7a86 	vdiv.f32	s15, s11, s12
		mcpwm_detect_currents_avg[i] = 0;
 80141c8:	0093      	lsls	r3, r2, #2
 80141ca:	18e5      	adds	r5, r4, r3
	for(int i = 0;i < 6;i++) {
 80141cc:	3201      	adds	r2, #1
		mcpwm_detect_avg_samples[i] = 0;
 80141ce:	4403      	add	r3, r0
	for(int i = 0;i < 6;i++) {
 80141d0:	2a06      	cmp	r2, #6
		mcpwm_detect_currents_avg[i] = 0;
 80141d2:	6029      	str	r1, [r5, #0]
		mcpwm_detect_avg_samples[i] = 0;
 80141d4:	6019      	str	r1, [r3, #0]
	for(int i = 0;i < 6;i++) {
 80141d6:	d1f7      	bne.n	80141c8 <mcpwm_get_detect_pos+0x58>
	float v0 = v[0] + v[3];
 80141d8:	ee39 9a26 	vadd.f32	s18, s18, s13
	float v1 = v[1] + v[4];
 80141dc:	ee78 8a87 	vadd.f32	s17, s17, s14
	float v2 = v[2] + v[5];
 80141e0:	ee38 8a27 	vadd.f32	s16, s16, s15
	float offset = (v0 + v1 + v2) / 3.0;
 80141e4:	ee79 7a28 	vadd.f32	s15, s18, s17
 80141e8:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80141ec:	ee77 7a88 	vadd.f32	s15, s15, s16
	float amp = sqrtf((v0*v0 + v1*v1 + v2*v2) / 1.5);
 80141f0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
	float offset = (v0 + v1 + v2) / 3.0;
 80141f4:	ee87 7a86 	vdiv.f32	s14, s15, s12
	v1 -= offset;
 80141f8:	ee78 8ac7 	vsub.f32	s17, s17, s14
	v0 -= offset;
 80141fc:	ee39 9a47 	vsub.f32	s18, s18, s14
	float amp = sqrtf((v0*v0 + v1*v1 + v2*v2) / 1.5);
 8014200:	ee68 7aa8 	vmul.f32	s15, s17, s17
	v2 -= offset;
 8014204:	ee38 8a47 	vsub.f32	s16, s16, s14
	float amp = sqrtf((v0*v0 + v1*v1 + v2*v2) / 1.5);
 8014208:	eee9 7a09 	vfma.f32	s15, s18, s18
 801420c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014210:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8014214:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421c:	eef1 9ac0 	vsqrt.f32	s19, s0
 8014220:	d501      	bpl.n	8014226 <mcpwm_get_detect_pos+0xb6>
 8014222:	f011 fd3d 	bl	8025ca0 <sqrtf>
	ph[0] = asinf(v0) * 180.0 / M_PI;
 8014226:	ee89 0a29 	vdiv.f32	s0, s18, s19
 801422a:	f011 f9c1 	bl	80255b0 <asinf>
	utils_norm_angle(&res);
 801422e:	a801      	add	r0, sp, #4
	ph[0] = asinf(v0) * 180.0 / M_PI;
 8014230:	eddf 7a11 	vldr	s15, [pc, #68]	; 8014278 <mcpwm_get_detect_pos+0x108>
 8014234:	eddf 5a11 	vldr	s11, [pc, #68]	; 801427c <mcpwm_get_detect_pos+0x10c>
 8014238:	ee20 0a27 	vmul.f32	s0, s0, s15
	v1 /= amp;
 801423c:	ee88 6aa9 	vdiv.f32	s12, s17, s19
	v2 /= amp;
 8014240:	eec8 6a29 	vdiv.f32	s13, s16, s19
	ph[0] = asinf(v0) * 180.0 / M_PI;
 8014244:	ee80 7a25 	vdiv.f32	s14, s0, s11
	if (v1 < v2) {
 8014248:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		res = 180 - ph[0];
 8014250:	bf4a      	itet	mi
 8014252:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
	float res = ph[0];
 8014256:	ed8d 7a01 	vstrpl	s14, [sp, #4]
		res = 180 - ph[0];
 801425a:	edcd 7a01 	vstrmi	s15, [sp, #4]
	utils_norm_angle(&res);
 801425e:	f001 fbff 	bl	8015a60 <utils_norm_angle>
}
 8014262:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014266:	b003      	add	sp, #12
 8014268:	ecbd 8b04 	vpop	{d8-d9}
 801426c:	bd30      	pop	{r4, r5, pc}
 801426e:	bf00      	nop
 8014270:	20005388 	.word	0x20005388
 8014274:	200053b8 	.word	0x200053b8
 8014278:	43340000 	.word	0x43340000
 801427c:	40490fdb 	.word	0x40490fdb

08014280 <mcpwm_read_reset_avg_cycle_integrator>:
	float res = cycle_integrator_sum / cycle_integrator_iterations;
 8014280:	4905      	ldr	r1, [pc, #20]	; (8014298 <mcpwm_read_reset_avg_cycle_integrator+0x18>)
 8014282:	4b06      	ldr	r3, [pc, #24]	; (801429c <mcpwm_read_reset_avg_cycle_integrator+0x1c>)
 8014284:	ed91 0a00 	vldr	s0, [r1]
 8014288:	edd3 7a00 	vldr	s15, [r3]
	cycle_integrator_sum = 0;
 801428c:	2200      	movs	r2, #0
 801428e:	600a      	str	r2, [r1, #0]
}
 8014290:	ee80 0a27 	vdiv.f32	s0, s0, s15
	cycle_integrator_iterations = 0;
 8014294:	601a      	str	r2, [r3, #0]
}
 8014296:	4770      	bx	lr
 8014298:	20004df8 	.word	0x20004df8
 801429c:	20004df4 	.word	0x20004df4

080142a0 <mcpwm_get_last_adc_isr_duration>:
	return last_adc_isr_duration;
 80142a0:	4b01      	ldr	r3, [pc, #4]	; (80142a8 <mcpwm_get_last_adc_isr_duration+0x8>)
 80142a2:	ed93 0a00 	vldr	s0, [r3]
}
 80142a6:	4770      	bx	lr
 80142a8:	20005354 	.word	0x20005354
 80142ac:	00000000 	.word	0x00000000

080142b0 <mcpwm_get_last_inj_adc_isr_duration>:
	return last_inj_adc_isr_duration;
 80142b0:	4b01      	ldr	r3, [pc, #4]	; (80142b8 <mcpwm_get_last_inj_adc_isr_duration+0x8>)
 80142b2:	ed93 0a00 	vldr	s0, [r3]
}
 80142b6:	4770      	bx	lr
 80142b8:	20005360 	.word	0x20005360
 80142bc:	00000000 	.word	0x00000000

080142c0 <mcpwm_get_rpm_dep>:
mc_rpm_dep_struct mcpwm_get_rpm_dep(void) {
 80142c0:	b470      	push	{r4, r5, r6}
	return rpm_dep;
 80142c2:	4d06      	ldr	r5, [pc, #24]	; (80142dc <mcpwm_get_rpm_dep+0x1c>)
mc_rpm_dep_struct mcpwm_get_rpm_dep(void) {
 80142c4:	4606      	mov	r6, r0
	return rpm_dep;
 80142c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142c8:	4634      	mov	r4, r6
 80142ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80142d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80142d4:	4630      	mov	r0, r6
 80142d6:	bc70      	pop	{r4, r5, r6}
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	2000541c 	.word	0x2000541c

080142e0 <mcpwm_is_dccal_done>:
	return dccal_done;
 80142e0:	4b01      	ldr	r3, [pc, #4]	; (80142e8 <mcpwm_is_dccal_done+0x8>)
 80142e2:	7818      	ldrb	r0, [r3, #0]
}
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop
 80142e8:	20004e04 	.word	0x20004e04
 80142ec:	00000000 	.word	0x00000000

080142f0 <mcpwm_switch_comm_mode>:
	comm_mode_next = next;
 80142f0:	4b01      	ldr	r3, [pc, #4]	; (80142f8 <mcpwm_switch_comm_mode+0x8>)
 80142f2:	7018      	strb	r0, [r3, #0]
 80142f4:	4770      	bx	lr
 80142f6:	bf00      	nop
 80142f8:	20004d40 	.word	0x20004d40
 80142fc:	00000000 	.word	0x00000000

08014300 <mcpwm_reset_hall_detect_table>:
	memset((void*)hall_detect_table, 0, sizeof(hall_detect_table[0][0]) * 8 * 7);
 8014300:	22e0      	movs	r2, #224	; 0xe0
 8014302:	2100      	movs	r1, #0
 8014304:	4801      	ldr	r0, [pc, #4]	; (801430c <mcpwm_reset_hall_detect_table+0xc>)
 8014306:	f013 bcbb 	b.w	8027c80 <memset>
 801430a:	bf00      	nop
 801430c:	20004e1c 	.word	0x20004e1c

08014310 <mcpwm_get_hall_detect_result>:
	} else if (conf->m_sensor_port_mode != SENSOR_PORT_MODE_HALL) {
 8014310:	4b28      	ldr	r3, [pc, #160]	; (80143b4 <mcpwm_get_hall_detect_result+0xa4>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8014318:	2b00      	cmp	r3, #0
 801431a:	d148      	bne.n	80143ae <mcpwm_get_hall_detect_result+0x9e>
int mcpwm_get_hall_detect_result(int8_t *table) {
 801431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801431e:	4f26      	ldr	r7, [pc, #152]	; (80143b8 <mcpwm_get_hall_detect_result+0xa8>)
 8014320:	b089      	sub	sp, #36	; 0x24
 8014322:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8014326:	2301      	movs	r3, #1
 8014328:	f04f 34ff 	mov.w	r4, #4294967295
 801432c:	2100      	movs	r1, #0
			if (hall_detect_table[i][j] > samples) {
 801432e:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
 8014332:	eb0e 0203 	add.w	r2, lr, r3
 8014336:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 801433a:	428d      	cmp	r5, r1
 801433c:	dd04      	ble.n	8014348 <mcpwm_get_hall_detect_result+0x38>
				samples = hall_detect_table[i][j];
 801433e:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 8014342:	290f      	cmp	r1, #15
 8014344:	bfc8      	it	gt
 8014346:	461c      	movgt	r4, r3
		for (int j = 1;j < 7;j++) {
 8014348:	3301      	adds	r3, #1
 801434a:	2b07      	cmp	r3, #7
			table[i] = res;
 801434c:	5584      	strb	r4, [r0, r6]
		for (int j = 1;j < 7;j++) {
 801434e:	d1f0      	bne.n	8014332 <mcpwm_get_hall_detect_result+0x22>
	for (int i = 0;i < 8;i++) {
 8014350:	3601      	adds	r6, #1
 8014352:	2e08      	cmp	r6, #8
 8014354:	d1e7      	bne.n	8014326 <mcpwm_get_hall_detect_result+0x16>
	int nums[7] = {0, 0, 0, 0, 0, 0, 0};
 8014356:	2300      	movs	r3, #0
	int tot_nums = 0;
 8014358:	461c      	mov	r4, r3
	int nums[7] = {0, 0, 0, 0, 0, 0, 0};
 801435a:	9301      	str	r3, [sp, #4]
	int invalid_samp_num = 0;
 801435c:	461d      	mov	r5, r3
	int nums[7] = {0, 0, 0, 0, 0, 0, 0};
 801435e:	9302      	str	r3, [sp, #8]
 8014360:	9303      	str	r3, [sp, #12]
 8014362:	9304      	str	r3, [sp, #16]
 8014364:	9305      	str	r3, [sp, #20]
 8014366:	9306      	str	r3, [sp, #24]
 8014368:	9307      	str	r3, [sp, #28]
				nums[table[i]] = 1;
 801436a:	2601      	movs	r6, #1
 801436c:	1e43      	subs	r3, r0, #1
 801436e:	3007      	adds	r0, #7
 8014370:	e007      	b.n	8014382 <mcpwm_get_hall_detect_result+0x72>
			if (!nums[table[i]]) {
 8014372:	f851 2c1c 	ldr.w	r2, [r1, #-28]
 8014376:	b912      	cbnz	r2, 801437e <mcpwm_get_hall_detect_result+0x6e>
				nums[table[i]] = 1;
 8014378:	f841 6c1c 	str.w	r6, [r1, #-28]
				tot_nums++;
 801437c:	3401      	adds	r4, #1
	for (int i = 0;i < 8;i++) {
 801437e:	4298      	cmp	r0, r3
 8014380:	d00a      	beq.n	8014398 <mcpwm_get_hall_detect_result+0x88>
		if (table[i] == -1) {
 8014382:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
			if (!nums[table[i]]) {
 8014386:	a908      	add	r1, sp, #32
 8014388:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (table[i] == -1) {
 801438c:	3201      	adds	r2, #1
 801438e:	d1f0      	bne.n	8014372 <mcpwm_get_hall_detect_result+0x62>
	for (int i = 0;i < 8;i++) {
 8014390:	4298      	cmp	r0, r3
			invalid_samp_num++;
 8014392:	f105 0501 	add.w	r5, r5, #1
	for (int i = 0;i < 8;i++) {
 8014396:	d1f4      	bne.n	8014382 <mcpwm_get_hall_detect_result+0x72>
	if (invalid_samp_num == 2 && tot_nums == 6) {
 8014398:	2d02      	cmp	r5, #2
 801439a:	d105      	bne.n	80143a8 <mcpwm_get_hall_detect_result+0x98>
 801439c:	1fa0      	subs	r0, r4, #6
 801439e:	bf18      	it	ne
 80143a0:	f04f 30ff 	movne.w	r0, #4294967295
}
 80143a4:	b009      	add	sp, #36	; 0x24
 80143a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
 80143a8:	f04f 30ff 	mov.w	r0, #4294967295
 80143ac:	e7fa      	b.n	80143a4 <mcpwm_get_hall_detect_result+0x94>
		return -3;
 80143ae:	f06f 0002 	mvn.w	r0, #2
 80143b2:	4770      	bx	lr
 80143b4:	20004d48 	.word	0x20004d48
 80143b8:	20004e1c 	.word	0x20004e1c
 80143bc:	00000000 	.word	0x00000000

080143c0 <mcpwm_read_hall_phase>:
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80143c0:	4b0e      	ldr	r3, [pc, #56]	; (80143fc <mcpwm_read_hall_phase+0x3c>)
 80143c2:	4a0f      	ldr	r2, [pc, #60]	; (8014400 <mcpwm_read_hall_phase+0x40>)
 80143c4:	6919      	ldr	r1, [r3, #16]
	return hall_to_phase_table[read_hall() + (direction ? 8 : 0)];
 80143c6:	480f      	ldr	r0, [pc, #60]	; (8014404 <mcpwm_read_hall_phase+0x44>)
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80143c8:	691b      	ldr	r3, [r3, #16]
 80143ca:	6912      	ldr	r2, [r2, #16]
int mcpwm_read_hall_phase(void) {
 80143cc:	b410      	push	{r4}
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80143ce:	099b      	lsrs	r3, r3, #6
	return hall_to_phase_table[read_hall() + (direction ? 8 : 0)];
 80143d0:	6804      	ldr	r4, [r0, #0]
 80143d2:	480d      	ldr	r0, [pc, #52]	; (8014408 <mcpwm_read_hall_phase+0x48>)
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80143d4:	0a52      	lsrs	r2, r2, #9
 80143d6:	f002 0204 	and.w	r2, r2, #4
 80143da:	f003 0302 	and.w	r3, r3, #2
 80143de:	4313      	orrs	r3, r2
	return hall_to_phase_table[read_hall() + (direction ? 8 : 0)];
 80143e0:	2c00      	cmp	r4, #0
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80143e2:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80143e6:	ea43 0301 	orr.w	r3, r3, r1
	return hall_to_phase_table[read_hall() + (direction ? 8 : 0)];
 80143ea:	bf14      	ite	ne
 80143ec:	2208      	movne	r2, #8
 80143ee:	2200      	moveq	r2, #0
 80143f0:	4413      	add	r3, r2
}
 80143f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80143fa:	4770      	bx	lr
 80143fc:	40020400 	.word	0x40020400
 8014400:	40020800 	.word	0x40020800
 8014404:	20004e10 	.word	0x20004e10
 8014408:	20004efc 	.word	0x20004efc
 801440c:	00000000 	.word	0x00000000

08014410 <set_duty_cycle_ll>:
static void set_duty_cycle_ll(float dutyCycle) {
 8014410:	b538      	push	{r3, r4, r5, lr}
	if (dutyCycle >= conf->l_min_duty) {
 8014412:	4d5e      	ldr	r5, [pc, #376]	; (801458c <set_duty_cycle_ll+0x17c>)
 8014414:	682b      	ldr	r3, [r5, #0]
 8014416:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801441a:	eef4 7ac0 	vcmpe.f32	s15, s0
 801441e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014422:	d822      	bhi.n	801446a <set_duty_cycle_ll+0x5a>
		direction = 1;
 8014424:	4a5a      	ldr	r2, [pc, #360]	; (8014590 <set_duty_cycle_ll+0x180>)
 8014426:	2101      	movs	r1, #1
 8014428:	6011      	str	r1, [r2, #0]
	if (dutyCycle < conf->l_min_duty) {
 801442a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801442e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014436:	d52d      	bpl.n	8014494 <set_duty_cycle_ll+0x84>
		if (control_mode == CONTROL_MODE_CURRENT ||
 8014438:	4a56      	ldr	r2, [pc, #344]	; (8014594 <set_duty_cycle_ll+0x184>)
 801443a:	7811      	ldrb	r1, [r2, #0]
 801443c:	2902      	cmp	r1, #2
 801443e:	d062      	beq.n	8014506 <set_duty_cycle_ll+0xf6>
				control_mode == CONTROL_MODE_CURRENT_BRAKE ||
 8014440:	7811      	ldrb	r1, [r2, #0]
		if (control_mode == CONTROL_MODE_CURRENT ||
 8014442:	2903      	cmp	r1, #3
 8014444:	d05f      	beq.n	8014506 <set_duty_cycle_ll+0xf6>
				control_mode == CONTROL_MODE_SPEED) {
 8014446:	7812      	ldrb	r2, [r2, #0]
				control_mode == CONTROL_MODE_CURRENT_BRAKE ||
 8014448:	2a01      	cmp	r2, #1
 801444a:	d05c      	beq.n	8014506 <set_duty_cycle_ll+0xf6>
		switch (state) {
 801444c:	4c52      	ldr	r4, [pc, #328]	; (8014598 <set_duty_cycle_ll+0x188>)
			max_erpm_fbrake = conf->l_max_erpm_fbrake;
 801444e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
		switch (state) {
 8014452:	7822      	ldrb	r2, [r4, #0]
 8014454:	b2d2      	uxtb	r2, r2
 8014456:	2a01      	cmp	r2, #1
 8014458:	d15c      	bne.n	8014514 <set_duty_cycle_ll+0x104>
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 801445a:	4a50      	ldr	r2, [pc, #320]	; (801459c <set_duty_cycle_ll+0x18c>)
	state = MC_STATE_OFF;
 801445c:	2300      	movs	r3, #0
 801445e:	7023      	strb	r3, [r4, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014460:	6013      	str	r3, [r2, #0]
}
 8014462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	stop_pwm_hw();
 8014466:	f7fe bd03 	b.w	8012e70 <stop_pwm_hw>
	} else if (dutyCycle <= -conf->l_min_duty) {
 801446a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801446e:	eef1 7a67 	vneg.f32	s15, s15
 8014472:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801447a:	d8d6      	bhi.n	801442a <set_duty_cycle_ll+0x1a>
		direction = 0;
 801447c:	4a44      	ldr	r2, [pc, #272]	; (8014590 <set_duty_cycle_ll+0x180>)
 801447e:	2100      	movs	r1, #0
 8014480:	6011      	str	r1, [r2, #0]
	if (dutyCycle < conf->l_min_duty) {
 8014482:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
		dutyCycle = -dutyCycle;
 8014486:	eeb1 0a40 	vneg.f32	s0, s0
	if (dutyCycle < conf->l_min_duty) {
 801448a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014492:	d4d1      	bmi.n	8014438 <set_duty_cycle_ll+0x28>
	} else if (dutyCycle > conf->l_max_duty) {
 8014494:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8014498:	4c3f      	ldr	r4, [pc, #252]	; (8014598 <set_duty_cycle_ll+0x188>)
 801449a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		dutyCycle = conf->l_max_duty;
 80144a2:	bfc8      	it	gt
 80144a4:	ed93 0a16 	vldrgt	s0, [r3, #88]	; 0x58
	set_duty_cycle_hw(dutyCycle);
 80144a8:	f7fe f9da 	bl	8012860 <set_duty_cycle_hw>
	if (conf->motor_type == MOTOR_TYPE_DC) {
 80144ac:	682b      	ldr	r3, [r5, #0]
 80144ae:	789d      	ldrb	r5, [r3, #2]
 80144b0:	b2ed      	uxtb	r5, r5
 80144b2:	2d01      	cmp	r5, #1
 80144b4:	d05d      	beq.n	8014572 <set_duty_cycle_ll+0x162>
		if (sensorless_now) {
 80144b6:	4a3a      	ldr	r2, [pc, #232]	; (80145a0 <set_duty_cycle_ll+0x190>)
 80144b8:	7812      	ldrb	r2, [r2, #0]
 80144ba:	b19a      	cbz	r2, 80144e4 <set_duty_cycle_ll+0xd4>
			if (state != MC_STATE_RUNNING) {
 80144bc:	7822      	ldrb	r2, [r4, #0]
 80144be:	2a02      	cmp	r2, #2
 80144c0:	d00f      	beq.n	80144e2 <set_duty_cycle_ll+0xd2>
				if (state == MC_STATE_OFF) {
 80144c2:	7822      	ldrb	r2, [r4, #0]
 80144c4:	bbaa      	cbnz	r2, 8014532 <set_duty_cycle_ll+0x122>
					state = MC_STATE_RUNNING;
 80144c6:	2102      	movs	r1, #2
					if (fabsf(rpm_now) < conf->sl_min_erpm) {
 80144c8:	4a36      	ldr	r2, [pc, #216]	; (80145a4 <set_duty_cycle_ll+0x194>)
					state = MC_STATE_RUNNING;
 80144ca:	7021      	strb	r1, [r4, #0]
					if (fabsf(rpm_now) < conf->sl_min_erpm) {
 80144cc:	edd2 7a00 	vldr	s15, [r2]
 80144d0:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80144d4:	eef0 7ae7 	vabs.f32	s15, s15
 80144d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80144dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e0:	d40c      	bmi.n	80144fc <set_duty_cycle_ll+0xec>
 80144e2:	bd38      	pop	{r3, r4, r5, pc}
			if (state != MC_STATE_RUNNING) {
 80144e4:	7823      	ldrb	r3, [r4, #0]
 80144e6:	2b02      	cmp	r3, #2
 80144e8:	d0fb      	beq.n	80144e2 <set_duty_cycle_ll+0xd2>
				state = MC_STATE_RUNNING;
 80144ea:	2302      	movs	r3, #2
 80144ec:	7023      	strb	r3, [r4, #0]
				comm_step = mcpwm_read_hall_phase();
 80144ee:	f7ff ff67 	bl	80143c0 <mcpwm_read_hall_phase>
 80144f2:	4b2d      	ldr	r3, [pc, #180]	; (80145a8 <set_duty_cycle_ll+0x198>)
 80144f4:	6018      	str	r0, [r3, #0]
				set_next_comm_step(comm_step);
 80144f6:	6818      	ldr	r0, [r3, #0]
 80144f8:	f7fe fa42 	bl	8012980 <set_next_comm_step>
				commutate(1);
 80144fc:	2001      	movs	r0, #1
}
 80144fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				commutate(1);
 8014502:	f7fe bcf5 	b.w	8012ef0 <commutate>
		switch (state) {
 8014506:	4c24      	ldr	r4, [pc, #144]	; (8014598 <set_duty_cycle_ll+0x188>)
			max_erpm_fbrake = conf->l_max_erpm_fbrake_cc;
 8014508:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
		switch (state) {
 801450c:	7822      	ldrb	r2, [r4, #0]
 801450e:	b2d2      	uxtb	r2, r2
 8014510:	2a01      	cmp	r2, #1
 8014512:	d0a2      	beq.n	801445a <set_duty_cycle_ll+0x4a>
 8014514:	2a02      	cmp	r2, #2
 8014516:	d1e4      	bne.n	80144e2 <set_duty_cycle_ll+0xd2>
			if (fabsf(rpm_now) > max_erpm_fbrake) {
 8014518:	4a22      	ldr	r2, [pc, #136]	; (80145a4 <set_duty_cycle_ll+0x194>)
 801451a:	ed92 7a00 	vldr	s14, [r2]
 801451e:	eeb0 7ac7 	vabs.f32	s14, s14
 8014522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452a:	d526      	bpl.n	801457a <set_duty_cycle_ll+0x16a>
				dutyCycle = conf->l_min_duty;
 801452c:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
			break;
 8014530:	e7ba      	b.n	80144a8 <set_duty_cycle_ll+0x98>
				} else if (state == MC_STATE_FULL_BRAKE) {
 8014532:	7822      	ldrb	r2, [r4, #0]
 8014534:	2a03      	cmp	r2, #3
 8014536:	d1d4      	bne.n	80144e2 <set_duty_cycle_ll+0xd2>
					if (fabsf(rpm_now) < conf->sl_min_erpm && mcpwm_get_tot_current_filtered() < conf->sl_max_fullbreak_current_dir_change) {
 8014538:	4a1a      	ldr	r2, [pc, #104]	; (80145a4 <set_duty_cycle_ll+0x194>)
 801453a:	edd2 7a00 	vldr	s15, [r2]
 801453e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8014542:	eef0 7ae7 	vabs.f32	s15, s15
 8014546:	eef4 7ac7 	vcmpe.f32	s15, s14
 801454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454e:	d5c8      	bpl.n	80144e2 <set_duty_cycle_ll+0xd2>
	return last_current_sample_filtered;
 8014550:	4a16      	ldr	r2, [pc, #88]	; (80145ac <set_duty_cycle_ll+0x19c>)
 8014552:	edd2 7a00 	vldr	s15, [r2]
					if (fabsf(rpm_now) < conf->sl_min_erpm && mcpwm_get_tot_current_filtered() < conf->sl_max_fullbreak_current_dir_change) {
 8014556:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801455a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014562:	ddbe      	ble.n	80144e2 <set_duty_cycle_ll+0xd2>
						state = MC_STATE_RUNNING;
 8014564:	2302      	movs	r3, #2
 8014566:	7023      	strb	r3, [r4, #0]
						commutate(1);
 8014568:	2001      	movs	r0, #1
}
 801456a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						commutate(1);
 801456e:	f7fe bcbf 	b.w	8012ef0 <commutate>
		state = MC_STATE_RUNNING;
 8014572:	2202      	movs	r2, #2
		set_next_comm_step(comm_step);
 8014574:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <set_duty_cycle_ll+0x198>)
		state = MC_STATE_RUNNING;
 8014576:	7022      	strb	r2, [r4, #0]
 8014578:	e7bd      	b.n	80144f6 <set_duty_cycle_ll+0xe6>
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 801457a:	4b08      	ldr	r3, [pc, #32]	; (801459c <set_duty_cycle_ll+0x18c>)
	state = MC_STATE_FULL_BRAKE;
 801457c:	2103      	movs	r1, #3
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 801457e:	2200      	movs	r2, #0
	state = MC_STATE_FULL_BRAKE;
 8014580:	7021      	strb	r1, [r4, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014582:	601a      	str	r2, [r3, #0]
}
 8014584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	full_brake_hw();
 8014588:	f7fe bc32 	b.w	8012df0 <full_brake_hw>
 801458c:	20004d48 	.word	0x20004d48
 8014590:	20004e10 	.word	0x20004e10
 8014594:	20004d4c 	.word	0x20004d4c
 8014598:	200059ec 	.word	0x200059ec
 801459c:	20004f48 	.word	0x20004f48
 80145a0:	200059e0 	.word	0x200059e0
 80145a4:	2000543c 	.word	0x2000543c
 80145a8:	20004d44 	.word	0x20004d44
 80145ac:	2000535c 	.word	0x2000535c

080145b0 <set_duty_cycle_hl>:
static void set_duty_cycle_hl(float dutyCycle) {
 80145b0:	b510      	push	{r4, lr}
	utils_truncate_number(&dutyCycle, -conf->l_max_duty, conf->l_max_duty);
 80145b2:	4c3b      	ldr	r4, [pc, #236]	; (80146a0 <set_duty_cycle_hl+0xf0>)
 80145b4:	6823      	ldr	r3, [r4, #0]
static void set_duty_cycle_hl(float dutyCycle) {
 80145b6:	b082      	sub	sp, #8
	utils_truncate_number(&dutyCycle, -conf->l_max_duty, conf->l_max_duty);
 80145b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80145bc:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
static void set_duty_cycle_hl(float dutyCycle) {
 80145c0:	a802      	add	r0, sp, #8
 80145c2:	ed20 0a01 	vstmdb	r0!, {s0}
	utils_truncate_number(&dutyCycle, -conf->l_max_duty, conf->l_max_duty);
 80145c6:	eeb1 0a67 	vneg.f32	s0, s15
 80145ca:	f001 fa99 	bl	8015b00 <utils_truncate_number>
	if (state == MC_STATE_DETECTING) {
 80145ce:	4b35      	ldr	r3, [pc, #212]	; (80146a4 <set_duty_cycle_hl+0xf4>)
 80145d0:	781a      	ldrb	r2, [r3, #0]
 80145d2:	2a01      	cmp	r2, #1
 80145d4:	d05c      	beq.n	8014690 <set_duty_cycle_hl+0xe0>
	dutycycle_set = dutyCycle;
 80145d6:	4a34      	ldr	r2, [pc, #208]	; (80146a8 <set_duty_cycle_hl+0xf8>)
 80145d8:	eddd 7a01 	vldr	s15, [sp, #4]
 80145dc:	edc2 7a00 	vstr	s15, [r2]
	if (state != MC_STATE_RUNNING) {
 80145e0:	781a      	ldrb	r2, [r3, #0]
 80145e2:	2a02      	cmp	r2, #2
 80145e4:	d02a      	beq.n	801463c <set_duty_cycle_hl+0x8c>
		if (fabsf(dutyCycle) >= conf->l_min_duty) {
 80145e6:	6822      	ldr	r2, [r4, #0]
 80145e8:	ed92 7a15 	vldr	s14, [r2, #84]	; 0x54
 80145ec:	eef0 6ae7 	vabs.f32	s13, s15
 80145f0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80145f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f8:	db22      	blt.n	8014640 <set_duty_cycle_hl+0x90>
			if (fabsf(dutycycle_now) < conf->l_min_duty) {
 80145fa:	4b2c      	ldr	r3, [pc, #176]	; (80146ac <set_duty_cycle_hl+0xfc>)
 80145fc:	ed93 7a00 	vldr	s14, [r3]
 8014600:	edd2 6a15 	vldr	s13, [r2, #84]	; 0x54
 8014604:	eeb0 7ac7 	vabs.f32	s14, s14
 8014608:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014610:	d510      	bpl.n	8014634 <set_duty_cycle_hl+0x84>
				dutycycle_now = SIGN(dutyCycle) * conf->l_min_duty;
 8014612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014616:	ed92 7a15 	vldr	s14, [r2, #84]	; 0x54
 801461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014626:	bf58      	it	pl
 8014628:	eef0 7a66 	vmovpl.f32	s15, s13
 801462c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014630:	edc3 7a00 	vstr	s15, [r3]
			set_duty_cycle_ll(dutycycle_now);
 8014634:	ed93 0a00 	vldr	s0, [r3]
 8014638:	f7ff feea 	bl	8014410 <set_duty_cycle_ll>
}
 801463c:	b002      	add	sp, #8
 801463e:	bd10      	pop	{r4, pc}
			if (conf->motor_type == MOTOR_TYPE_DC) {
 8014640:	7891      	ldrb	r1, [r2, #2]
 8014642:	2901      	cmp	r1, #1
 8014644:	d00f      	beq.n	8014666 <set_duty_cycle_hl+0xb6>
				if (fabsf(rpm_now) > conf->l_max_erpm_fbrake) {
 8014646:	491a      	ldr	r1, [pc, #104]	; (80146b0 <set_duty_cycle_hl+0x100>)
 8014648:	edd1 7a00 	vldr	s15, [r1]
 801464c:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8014650:	eef0 7ae7 	vabs.f32	s15, s15
 8014654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801465c:	dd0f      	ble.n	801467e <set_duty_cycle_hl+0xce>
					state = MC_STATE_RUNNING;
 801465e:	2202      	movs	r2, #2
 8014660:	701a      	strb	r2, [r3, #0]
}
 8014662:	b002      	add	sp, #8
 8014664:	bd10      	pop	{r4, pc}
				if (fabsf(dutycycle_now) > 0.1) {
 8014666:	4a11      	ldr	r2, [pc, #68]	; (80146ac <set_duty_cycle_hl+0xfc>)
 8014668:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80146b4 <set_duty_cycle_hl+0x104>
 801466c:	edd2 7a00 	vldr	s15, [r2]
 8014670:	eef0 7ae7 	vabs.f32	s15, s15
 8014674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801467c:	dcef      	bgt.n	801465e <set_duty_cycle_hl+0xae>
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 801467e:	4a0e      	ldr	r2, [pc, #56]	; (80146b8 <set_duty_cycle_hl+0x108>)
	state = MC_STATE_FULL_BRAKE;
 8014680:	2003      	movs	r0, #3
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014682:	2100      	movs	r1, #0
	state = MC_STATE_FULL_BRAKE;
 8014684:	7018      	strb	r0, [r3, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014686:	6011      	str	r1, [r2, #0]
	full_brake_hw();
 8014688:	f7fe fbb2 	bl	8012df0 <full_brake_hw>
}
 801468c:	b002      	add	sp, #8
 801468e:	bd10      	pop	{r4, pc}
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014690:	4909      	ldr	r1, [pc, #36]	; (80146b8 <set_duty_cycle_hl+0x108>)
	state = MC_STATE_OFF;
 8014692:	2200      	movs	r2, #0
 8014694:	701a      	strb	r2, [r3, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014696:	600a      	str	r2, [r1, #0]
	stop_pwm_hw();
 8014698:	f7fe fbea 	bl	8012e70 <stop_pwm_hw>
 801469c:	e7ce      	b.n	801463c <set_duty_cycle_hl+0x8c>
 801469e:	bf00      	nop
 80146a0:	20004d48 	.word	0x20004d48
 80146a4:	200059ec 	.word	0x200059ec
 80146a8:	20004e18 	.word	0x20004e18
 80146ac:	20004e14 	.word	0x20004e14
 80146b0:	2000543c 	.word	0x2000543c
 80146b4:	3dcccccd 	.word	0x3dcccccd
 80146b8:	20004f48 	.word	0x20004f48
 80146bc:	00000000 	.word	0x00000000

080146c0 <mcpwm_set_duty>:
	control_mode = CONTROL_MODE_DUTY;
 80146c0:	4b02      	ldr	r3, [pc, #8]	; (80146cc <mcpwm_set_duty+0xc>)
 80146c2:	2200      	movs	r2, #0
 80146c4:	701a      	strb	r2, [r3, #0]
	set_duty_cycle_hl(dutyCycle);
 80146c6:	f7ff bf73 	b.w	80145b0 <set_duty_cycle_hl>
 80146ca:	bf00      	nop
 80146cc:	20004d4c 	.word	0x20004d4c

080146d0 <rpm_thread>:
static THD_FUNCTION(rpm_thread, arg) {
 80146d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d4:	4bd8      	ldr	r3, [pc, #864]	; (8014a38 <rpm_thread+0x368>)
		if (rpm_thd_stop) {
 80146d6:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014a8c <rpm_thread+0x3bc>
 80146da:	699a      	ldr	r2, [r3, #24]
 80146dc:	f899 3000 	ldrb.w	r3, [r9]
 80146e0:	49d6      	ldr	r1, [pc, #856]	; (8014a3c <rpm_thread+0x36c>)
static THD_FUNCTION(rpm_thread, arg) {
 80146e2:	ed2d 8b0c 	vpush	{d8-d13}
 80146e6:	6191      	str	r1, [r2, #24]
 80146e8:	b083      	sub	sp, #12
		if (rpm_thd_stop) {
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f040 8114 	bne.w	8014918 <rpm_thread+0x248>
 80146f0:	f8df a39c 	ldr.w	sl, [pc, #924]	; 8014a90 <rpm_thread+0x3c0>
 80146f4:	4cd2      	ldr	r4, [pc, #840]	; (8014a40 <rpm_thread+0x370>)
 80146f6:	4fd3      	ldr	r7, [pc, #844]	; (8014a44 <rpm_thread+0x374>)
 80146f8:	4dd3      	ldr	r5, [pc, #844]	; (8014a48 <rpm_thread+0x378>)
 80146fa:	4ed4      	ldr	r6, [pc, #848]	; (8014a4c <rpm_thread+0x37c>)
 80146fc:	f8df 837c 	ldr.w	r8, [pc, #892]	; 8014a7c <rpm_thread+0x3ac>
 8014700:	f8df b390 	ldr.w	fp, [pc, #912]	; 8014a94 <rpm_thread+0x3c4>
			float rpm_tmp = (MCPWM_RPM_TIMER_FREQ * 60.0) / ((float) TIM2 ->CNT * 6.0);
 8014704:	ed9f aad2 	vldr	s20, [pc, #840]	; 8014a50 <rpm_thread+0x380>
			rpm_now = (comms * MCPWM_RPM_TIMER_FREQ * 60.0) / (time_at_comm * 6.0);
 8014708:	eddf aad2 	vldr	s21, [pc, #840]	; 8014a54 <rpm_thread+0x384>
 801470c:	ed9f 9ad2 	vldr	s18, [pc, #840]	; 8014a58 <rpm_thread+0x388>
		UTILS_LP_FAST(rpm_filtered, rpm_now, 0.1);
 8014710:	eddf 9ad2 	vldr	s19, [pc, #840]	; 8014a5c <rpm_thread+0x38c>
		rpm_dep.cycle_int_limit_running = utils_map(rpm_abs, 0,
 8014714:	eddf 8ad2 	vldr	s17, [pc, #840]	; 8014a60 <rpm_thread+0x390>
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014718:	ed9f bad2 	vldr	s22, [pc, #840]	; 8014a64 <rpm_thread+0x394>
 801471c:	e0ae      	b.n	801487c <rpm_thread+0x1ac>
			float rpm_tmp = (MCPWM_RPM_TIMER_FREQ * 60.0) / ((float) TIM2 ->CNT * 6.0);
 801471e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014722:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
			if (fabsf(rpm_tmp) < fabsf(rpm_now)) {
 8014726:	ed94 7a00 	vldr	s14, [r4]
			float rpm_tmp = (MCPWM_RPM_TIMER_FREQ * 60.0) / ((float) TIM2 ->CNT * 6.0);
 801472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801472e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8014732:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (fabsf(rpm_tmp) < fabsf(rpm_now)) {
 8014736:	eeb0 7ac7 	vabs.f32	s14, s14
			float rpm_tmp = (MCPWM_RPM_TIMER_FREQ * 60.0) / ((float) TIM2 ->CNT * 6.0);
 801473a:	eeca 6a27 	vdiv.f32	s13, s20, s15
			if (fabsf(rpm_tmp) < fabsf(rpm_now)) {
 801473e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				rpm_now = rpm_tmp;
 8014746:	bf48      	it	mi
 8014748:	edc4 6a00 	vstrmi	s13, [r4]
		UTILS_LP_FAST(rpm_filtered, rpm_now, 0.1);
 801474c:	ed94 7a00 	vldr	s14, [r4]
 8014750:	edd7 7a00 	vldr	s15, [r7]
		rpm_dep.cycle_int_limit = conf->sl_cycle_int_limit;
 8014754:	6829      	ldr	r1, [r5, #0]
		UTILS_LP_FAST(rpm_filtered, rpm_now, 0.1);
 8014756:	ee37 7ac7 	vsub.f32	s14, s15, s14
		rpm_dep.cycle_int_limit_running = utils_map(rpm_abs, 0,
 801475a:	eef0 0a68 	vmov.f32	s1, s17
		UTILS_LP_FAST(rpm_filtered, rpm_now, 0.1);
 801475e:	eee7 7a69 	vfms.f32	s15, s14, s19
		rpm_now = rpm_filtered;
 8014762:	edc4 7a00 	vstr	s15, [r4]
		const float rpm_abs = fabsf(rpm_now);
 8014766:	ed94 8a00 	vldr	s16, [r4]
		rpm_dep.cycle_int_limit = conf->sl_cycle_int_limit;
 801476a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 801476e:	f8ca 2000 	str.w	r2, [sl]
		rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 8014772:	edda 6a00 	vldr	s13, [sl]
 8014776:	8a32      	ldrh	r2, [r6, #16]
		UTILS_LP_FAST(rpm_filtered, rpm_now, 0.1);
 8014778:	edc7 7a00 	vstr	s15, [r7]
		rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 801477c:	b292      	uxth	r2, r2
				conf->sl_bemf_coupling_k / (rpm_abs > conf->sl_min_erpm ? rpm_abs : conf->sl_min_erpm);
 801477e:	ed91 6a25 	vldr	s12, [r1, #148]	; 0x94
 8014782:	ed91 7a1f 	vldr	s14, [r1, #124]	; 0x7c
		rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 8014786:	ee07 2a90 	vmov	s15, r2
		const float rpm_abs = fabsf(rpm_now);
 801478a:	eeb0 8ac8 	vabs.f32	s16, s16
				conf->sl_bemf_coupling_k / (rpm_abs > conf->sl_min_erpm ? rpm_abs : conf->sl_min_erpm);
 801478e:	eeb4 8ac7 	vcmpe.f32	s16, s14
		rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 8014792:	eef8 7a67 	vcvt.f32.u32	s15, s15
				conf->sl_bemf_coupling_k / (rpm_abs > conf->sl_min_erpm ? rpm_abs : conf->sl_min_erpm);
 8014796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 801479a:	ee67 7a86 	vmul.f32	s15, s15, s12
				conf->sl_bemf_coupling_k / (rpm_abs > conf->sl_min_erpm ? rpm_abs : conf->sl_min_erpm);
 801479e:	bfd4      	ite	le
 80147a0:	ed91 6a1f 	vldrle	s12, [r1, #124]	; 0x7c
 80147a4:	eeb0 6a48 	vmovgt.f32	s12, s16
 80147a8:	ee87 7a86 	vdiv.f32	s14, s15, s12
		rpm_dep.cycle_int_limit_running = utils_map(rpm_abs, 0,
 80147ac:	eeb0 0a48 	vmov.f32	s0, s16
		rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 80147b0:	ee77 7a26 	vadd.f32	s15, s14, s13
 80147b4:	edca 7a01 	vstr	s15, [sl, #4]
		rpm_dep.cycle_int_limit_running = utils_map(rpm_abs, 0,
 80147b8:	ed91 1a24 	vldr	s2, [r1, #144]	; 0x90
 80147bc:	edda 1a01 	vldr	s3, [sl, #4]
				rpm_dep.cycle_int_limit_running * conf->sl_phase_advance_at_br);
 80147c0:	ed9a 2a01 	vldr	s4, [sl, #4]
 80147c4:	edd1 7a23 	vldr	s15, [r1, #140]	; 0x8c
		rpm_dep.cycle_int_limit_running = utils_map(rpm_abs, 0,
 80147c8:	ee22 2a27 	vmul.f32	s4, s4, s15
 80147cc:	f001 f9d8 	bl	8015b80 <utils_map>
 80147d0:	ed8a 0a01 	vstr	s0, [sl, #4]
		rpm_dep.cycle_int_limit_max = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 80147d4:	ed9a 6a00 	vldr	s12, [sl]
 80147d8:	8a32      	ldrh	r2, [r6, #16]
				conf->sl_bemf_coupling_k / conf->sl_min_erpm_cycle_int_limit;
 80147da:	6829      	ldr	r1, [r5, #0]
	if (control_mode != CONTROL_MODE_SPEED) {
 80147dc:	4ba2      	ldr	r3, [pc, #648]	; (8014a68 <rpm_thread+0x398>)
				conf->sl_bemf_coupling_k / conf->sl_min_erpm_cycle_int_limit;
 80147de:	ed91 7a25 	vldr	s14, [r1, #148]	; 0x94
 80147e2:	edd1 5a20 	vldr	s11, [r1, #128]	; 0x80
		rpm_dep.cycle_int_limit_max = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 80147e6:	b292      	uxth	r2, r2
 80147e8:	ee07 2a90 	vmov	s15, r2
 80147ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
		if (rpm_dep.cycle_int_limit_running < 1.0) {
 80147f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		rpm_dep.cycle_int_limit_max = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 80147f4:	ee67 7a87 	vmul.f32	s15, s15, s14
				conf->sl_bemf_coupling_k / conf->sl_min_erpm_cycle_int_limit;
 80147f8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
		rpm_dep.cycle_int_limit_max = rpm_dep.cycle_int_limit + (float)ADC_Value[ADC_IND_VIN_SENS] *
 80147fc:	ee77 7a06 	vadd.f32	s15, s14, s12
 8014800:	edca 7a02 	vstr	s15, [sl, #8]
		if (rpm_dep.cycle_int_limit_running < 1.0) {
 8014804:	edda 7a01 	vldr	s15, [sl, #4]
 8014808:	eef4 7ae6 	vcmpe.f32	s15, s13
 801480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			rpm_dep.cycle_int_limit_running = 1.0;
 8014810:	bf48      	it	mi
 8014812:	edca 6a01 	vstrmi	s13, [sl, #4]
		if (rpm_dep.cycle_int_limit_running > rpm_dep.cycle_int_limit_max) {
 8014816:	ed9a 7a01 	vldr	s14, [sl, #4]
 801481a:	edda 7a02 	vldr	s15, [sl, #8]
 801481e:	eeb4 7ae7 	vcmpe.f32	s14, s15
		rpm_dep.comm_time_sum = conf->m_bldc_f_sw_max / ((rpm_abs / 60.0) * 6.0);
 8014822:	ee88 7a09 	vdiv.f32	s14, s16, s18
		if (rpm_dep.cycle_int_limit_running > rpm_dep.cycle_int_limit_max) {
 8014826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			rpm_dep.cycle_int_limit_running = rpm_dep.cycle_int_limit_max;
 801482a:	bfc4      	itt	gt
 801482c:	f8da 2008 	ldrgt.w	r2, [sl, #8]
 8014830:	f8ca 2004 	strgt.w	r2, [sl, #4]
		rpm_dep.comm_time_sum = conf->m_bldc_f_sw_max / ((rpm_abs / 60.0) * 6.0);
 8014834:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8014838:	ed91 6a5a 	vldr	s12, [r1, #360]	; 0x168
 801483c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014840:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8014844:	edca 7a03 	vstr	s15, [sl, #12]
		rpm_dep.comm_time_sum_min_rpm = conf->m_bldc_f_sw_max / ((conf->sl_min_erpm / 60.0) * 6.0);
 8014848:	ed91 6a5a 	vldr	s12, [r1, #360]	; 0x168
 801484c:	ed91 7a1f 	vldr	s14, [r1, #124]	; 0x7c
 8014850:	eec7 7a09 	vdiv.f32	s15, s14, s18
 8014854:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014858:	ee86 7a27 	vdiv.f32	s14, s12, s15
 801485c:	ed8a 7a04 	vstr	s14, [sl, #16]
	if (control_mode != CONTROL_MODE_SPEED) {
 8014860:	781a      	ldrb	r2, [r3, #0]
 8014862:	2a01      	cmp	r2, #1
 8014864:	d02d      	beq.n	80148c2 <rpm_thread+0x1f2>
		i_term = 0.0;
 8014866:	edc8 8a00 	vstr	s17, [r8]
		prev_error = 0.0;
 801486a:	edcb 8a00 	vstr	s17, [fp]
		chThdSleepMilliseconds(1);
 801486e:	200a      	movs	r0, #10
 8014870:	f7f9 f8b6 	bl	800d9e0 <chThdSleep>
		if (rpm_thd_stop) {
 8014874:	f899 2000 	ldrb.w	r2, [r9]
 8014878:	2a00      	cmp	r2, #0
 801487a:	d14d      	bne.n	8014918 <rpm_thread+0x248>
		if (rpm_dep.comms != 0) {
 801487c:	f8da 2014 	ldr.w	r2, [sl, #20]
 8014880:	2a00      	cmp	r2, #0
 8014882:	f43f af4c 	beq.w	801471e <rpm_thread+0x4e>
			utils_sys_lock_cnt();
 8014886:	f001 fc4b 	bl	8016120 <utils_sys_lock_cnt>
			const float comms = (float)rpm_dep.comms;
 801488a:	ed9a 8a05 	vldr	s16, [sl, #20]
			const float time_at_comm = (float)rpm_dep.time_at_comm;
 801488e:	edda ba06 	vldr	s23, [sl, #24]
			rpm_dep.comms = 0;
 8014892:	2200      	movs	r2, #0
 8014894:	f8ca 2014 	str.w	r2, [sl, #20]
			rpm_dep.time_at_comm = 0;
 8014898:	f8ca 2018 	str.w	r2, [sl, #24]
			utils_sys_unlock_cnt();
 801489c:	f001 fc50 	bl	8016140 <utils_sys_unlock_cnt>
			const float comms = (float)rpm_dep.comms;
 80148a0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			const float time_at_comm = (float)rpm_dep.time_at_comm;
 80148a4:	eef8 ba6b 	vcvt.f32.u32	s23, s23
			rpm_now = (comms * MCPWM_RPM_TIMER_FREQ * 60.0) / (time_at_comm * 6.0);
 80148a8:	ee28 8a2a 	vmul.f32	s16, s16, s21
 80148ac:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80148b0:	ee28 8a09 	vmul.f32	s16, s16, s18
 80148b4:	ee6b baa7 	vmul.f32	s23, s23, s15
 80148b8:	eec8 7a2b 	vdiv.f32	s15, s16, s23
 80148bc:	edc4 7a00 	vstr	s15, [r4]
 80148c0:	e744      	b.n	801474c <rpm_thread+0x7c>
	return direction ? rpm_now : -rpm_now;
 80148c2:	4a6a      	ldr	r2, [pc, #424]	; (8014a6c <rpm_thread+0x39c>)
 80148c4:	6812      	ldr	r2, [r2, #0]
 80148c6:	edd4 ba00 	vldr	s23, [r4]
 80148ca:	b90a      	cbnz	r2, 80148d0 <rpm_thread+0x200>
 80148cc:	eef1 ba6b 	vneg.f32	s23, s23
	float error = speed_pid_set_rpm - rpm;
 80148d0:	4a67      	ldr	r2, [pc, #412]	; (8014a70 <rpm_thread+0x3a0>)
 80148d2:	ed92 8a00 	vldr	s16, [r2]
	if (fabsf(speed_pid_set_rpm) < conf->s_pid_min_erpm) {
 80148d6:	edd2 7a00 	vldr	s15, [r2]
 80148da:	ed91 7a49 	vldr	s14, [r1, #292]	; 0x124
 80148de:	eef0 7ae7 	vabs.f32	s15, s15
 80148e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float error = speed_pid_set_rpm - rpm;
 80148ea:	ee38 8a6b 	vsub.f32	s16, s16, s23
	if (fabsf(speed_pid_set_rpm) < conf->s_pid_min_erpm) {
 80148ee:	d51b      	bpl.n	8014928 <rpm_thread+0x258>
		i_term = dutycycle_now;
 80148f0:	4a60      	ldr	r2, [pc, #384]	; (8014a74 <rpm_thread+0x3a4>)
	control_mode = CONTROL_MODE_DUTY;
 80148f2:	4b5d      	ldr	r3, [pc, #372]	; (8014a68 <rpm_thread+0x398>)
		i_term = dutycycle_now;
 80148f4:	6811      	ldr	r1, [r2, #0]
 80148f6:	f8c8 1000 	str.w	r1, [r8]
	control_mode = CONTROL_MODE_DUTY;
 80148fa:	2200      	movs	r2, #0
	set_duty_cycle_hl(dutyCycle);
 80148fc:	eeb0 0a68 	vmov.f32	s0, s17
	control_mode = CONTROL_MODE_DUTY;
 8014900:	701a      	strb	r2, [r3, #0]
		prev_error = error;
 8014902:	ed8b 8a00 	vstr	s16, [fp]
	set_duty_cycle_hl(dutyCycle);
 8014906:	f7ff fe53 	bl	80145b0 <set_duty_cycle_hl>
		chThdSleepMilliseconds(1);
 801490a:	200a      	movs	r0, #10
 801490c:	f7f9 f868 	bl	800d9e0 <chThdSleep>
		if (rpm_thd_stop) {
 8014910:	f899 2000 	ldrb.w	r2, [r9]
 8014914:	2a00      	cmp	r2, #0
 8014916:	d0b1      	beq.n	801487c <rpm_thread+0x1ac>
			rpm_thd_stop = false;
 8014918:	2300      	movs	r3, #0
 801491a:	f889 3000 	strb.w	r3, [r9]
}
 801491e:	b003      	add	sp, #12
 8014920:	ecbd 8b0c 	vpop	{d8-d13}
 8014924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	p_term = error * conf->s_pid_kp * (1.0 / 20.0);
 8014928:	ed91 da46 	vldr	s26, [r1, #280]	; 0x118
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 801492c:	edd1 7a47 	vldr	s15, [r1, #284]	; 0x11c
	d_term = (error - prev_error) * (conf->s_pid_kd / MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014930:	ed91 6a48 	vldr	s12, [r1, #288]	; 0x120
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014934:	eddf ca50 	vldr	s25, [pc, #320]	; 8014a78 <rpm_thread+0x3a8>
 8014938:	ed98 7a00 	vldr	s14, [r8]
	d_term = (error - prev_error) * (conf->s_pid_kd / MCPWM_PID_TIME_K) * (1.0 / 20.0);
 801493c:	ed9b ca00 	vldr	s24, [fp]
	utils_truncate_number(&i_term, -1.0, 1.0);
 8014940:	484e      	ldr	r0, [pc, #312]	; (8014a7c <rpm_thread+0x3ac>)
	d_term = (error - prev_error) * (conf->s_pid_kd / MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014942:	eec6 6a0b 	vdiv.f32	s13, s12, s22
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014946:	ee67 7a8b 	vmul.f32	s15, s15, s22
	d_term = (error - prev_error) * (conf->s_pid_kd / MCPWM_PID_TIME_K) * (1.0 / 20.0);
 801494a:	ee38 ca4c 	vsub.f32	s24, s16, s24
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 801494e:	ee67 7a88 	vmul.f32	s15, s15, s16
	utils_truncate_number(&i_term, -1.0, 1.0);
 8014952:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014956:	eea7 7aac 	vfma.f32	s14, s15, s25
	utils_truncate_number(&i_term, -1.0, 1.0);
 801495a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	d_term = (error - prev_error) * (conf->s_pid_kd / MCPWM_PID_TIME_K) * (1.0 / 20.0);
 801495e:	ee2c ca26 	vmul.f32	s24, s24, s13
	i_term += error * (conf->s_pid_ki * MCPWM_PID_TIME_K) * (1.0 / 20.0);
 8014962:	ed88 7a00 	vstr	s14, [r8]
	utils_truncate_number(&i_term, -1.0, 1.0);
 8014966:	f001 f8cb 	bl	8015b00 <utils_truncate_number>
	UTILS_LP_FAST(d_filtered, d_term, 0.1);
 801496a:	4a45      	ldr	r2, [pc, #276]	; (8014a80 <rpm_thread+0x3b0>)
	float output = p_term + i_term + d_term;
 801496c:	ed98 7a00 	vldr	s14, [r8]
	UTILS_LP_FAST(d_filtered, d_term, 0.1);
 8014970:	edd2 7a00 	vldr	s15, [r2]
	prev_error = error;
 8014974:	ed8b 8a00 	vstr	s16, [fp]
	UTILS_LP_FAST(d_filtered, d_term, 0.1);
 8014978:	eef0 6a67 	vmov.f32	s13, s15
 801497c:	eeec 6a6c 	vfms.f32	s13, s24, s25
	float output = p_term + i_term + d_term;
 8014980:	a802      	add	r0, sp, #8
	p_term = error * conf->s_pid_kp * (1.0 / 20.0);
 8014982:	ee28 da0d 	vmul.f32	s26, s16, s26
	UTILS_LP_FAST(d_filtered, d_term, 0.1);
 8014986:	eee6 7ae9 	vfms.f32	s15, s13, s19
	float output = p_term + i_term + d_term;
 801498a:	eead 7a2c 	vfma.f32	s14, s26, s25
	utils_truncate_number(&output, -1.0, 1.0);
 801498e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	float output = p_term + i_term + d_term;
 8014992:	ee37 7a27 	vadd.f32	s14, s14, s15
	utils_truncate_number(&output, -1.0, 1.0);
 8014996:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	float output = p_term + i_term + d_term;
 801499a:	ed20 7a01 	vstmdb	r0!, {s14}
	UTILS_LP_FAST(d_filtered, d_term, 0.1);
 801499e:	edc2 7a00 	vstr	s15, [r2]
	utils_truncate_number(&output, -1.0, 1.0);
 80149a2:	f001 f8ad 	bl	8015b00 <utils_truncate_number>
	if (!conf->s_pid_allow_braking) {
 80149a6:	682a      	ldr	r2, [r5, #0]
 80149a8:	f892 1128 	ldrb.w	r1, [r2, #296]	; 0x128
 80149ac:	bb51      	cbnz	r1, 8014a04 <rpm_thread+0x334>
		if (rpm > 0.0 && output < 0.0) {
 80149ae:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80149b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80149ba:	dd04      	ble.n	80149c6 <rpm_thread+0x2f6>
 80149bc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80149c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c4:	d426      	bmi.n	8014a14 <rpm_thread+0x344>
		if (rpm < 0.0 && output > 0.0) {
 80149c6:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80149ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ce:	d41c      	bmi.n	8014a0a <rpm_thread+0x33a>
	current_set = output * conf->lo_current_max;
 80149d0:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 80149d4:	482b      	ldr	r0, [pc, #172]	; (8014a84 <rpm_thread+0x3b4>)
	if (state != MC_STATE_RUNNING) {
 80149d6:	492c      	ldr	r1, [pc, #176]	; (8014a88 <rpm_thread+0x3b8>)
	current_set = output * conf->lo_current_max;
 80149d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149dc:	edc0 7a00 	vstr	s15, [r0]
	if (state != MC_STATE_RUNNING) {
 80149e0:	7809      	ldrb	r1, [r1, #0]
 80149e2:	2902      	cmp	r1, #2
 80149e4:	f43f af43 	beq.w	801486e <rpm_thread+0x19e>
		set_duty_cycle_hl(SIGN(output) * conf->l_min_duty);
 80149e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80149ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f0:	d41e      	bmi.n	8014a30 <rpm_thread+0x360>
 80149f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80149f6:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 80149fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80149fe:	f7ff fdd7 	bl	80145b0 <set_duty_cycle_hl>
 8014a02:	e734      	b.n	801486e <rpm_thread+0x19e>
 8014a04:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014a08:	e7e2      	b.n	80149d0 <rpm_thread+0x300>
		if (rpm < 0.0 && output > 0.0) {
 8014a0a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a12:	dddd      	ble.n	80149d0 <rpm_thread+0x300>
	current_set = output * conf->lo_current_max;
 8014a14:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 8014a18:	481a      	ldr	r0, [pc, #104]	; (8014a84 <rpm_thread+0x3b4>)
	if (state != MC_STATE_RUNNING) {
 8014a1a:	491b      	ldr	r1, [pc, #108]	; (8014a88 <rpm_thread+0x3b8>)
			output = 0.0;
 8014a1c:	edcd 8a01 	vstr	s17, [sp, #4]
	current_set = output * conf->lo_current_max;
 8014a20:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014a24:	edc0 7a00 	vstr	s15, [r0]
	if (state != MC_STATE_RUNNING) {
 8014a28:	7809      	ldrb	r1, [r1, #0]
 8014a2a:	2902      	cmp	r1, #2
 8014a2c:	d1e1      	bne.n	80149f2 <rpm_thread+0x322>
 8014a2e:	e71e      	b.n	801486e <rpm_thread+0x19e>
		set_duty_cycle_hl(SIGN(output) * conf->l_min_duty);
 8014a30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014a34:	e7df      	b.n	80149f6 <rpm_thread+0x326>
 8014a36:	bf00      	nop
 8014a38:	20001a40 	.word	0x20001a40
 8014a3c:	0802f0b0 	.word	0x0802f0b0
 8014a40:	2000543c 	.word	0x2000543c
 8014a44:	20005438 	.word	0x20005438
 8014a48:	20004d48 	.word	0x20004d48
 8014a4c:	2000c034 	.word	0x2000c034
 8014a50:	4c64e1c0 	.word	0x4c64e1c0
 8014a54:	49742400 	.word	0x49742400
 8014a58:	42700000 	.word	0x42700000
 8014a5c:	3dcccccd 	.word	0x3dcccccd
 8014a60:	00000000 	.word	0x00000000
 8014a64:	3a83126f 	.word	0x3a83126f
 8014a68:	20004d4c 	.word	0x20004d4c
 8014a6c:	20004e10 	.word	0x20004e10
 8014a70:	200059e8 	.word	0x200059e8
 8014a74:	20004e14 	.word	0x20004e14
 8014a78:	3d4ccccd 	.word	0x3d4ccccd
 8014a7c:	20004f40 	.word	0x20004f40
 8014a80:	20004e00 	.word	0x20004e00
 8014a84:	20004dec 	.word	0x20004dec
 8014a88:	200059ec 	.word	0x200059ec
 8014a8c:	20005440 	.word	0x20005440
 8014a90:	2000541c 	.word	0x2000541c
 8014a94:	20005408 	.word	0x20005408
	...

08014aa0 <mcpwm_set_pid_pos>:
	control_mode = CONTROL_MODE_POS;
 8014aa0:	4908      	ldr	r1, [pc, #32]	; (8014ac4 <mcpwm_set_pid_pos+0x24>)
	pos_pid_set_pos = pos;
 8014aa2:	4a09      	ldr	r2, [pc, #36]	; (8014ac8 <mcpwm_set_pid_pos+0x28>)
	if (state != MC_STATE_RUNNING) {
 8014aa4:	4b09      	ldr	r3, [pc, #36]	; (8014acc <mcpwm_set_pid_pos+0x2c>)
	control_mode = CONTROL_MODE_POS;
 8014aa6:	2004      	movs	r0, #4
 8014aa8:	7008      	strb	r0, [r1, #0]
	pos_pid_set_pos = pos;
 8014aaa:	ed82 0a00 	vstr	s0, [r2]
	if (state != MC_STATE_RUNNING) {
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	2b02      	cmp	r3, #2
 8014ab2:	d005      	beq.n	8014ac0 <mcpwm_set_pid_pos+0x20>
		set_duty_cycle_hl(conf->l_min_duty);
 8014ab4:	4b06      	ldr	r3, [pc, #24]	; (8014ad0 <mcpwm_set_pid_pos+0x30>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
 8014abc:	f7ff bd78 	b.w	80145b0 <set_duty_cycle_hl>
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop
 8014ac4:	20004d4c 	.word	0x20004d4c
 8014ac8:	20005404 	.word	0x20005404
 8014acc:	200059ec 	.word	0x200059ec
 8014ad0:	20004d48 	.word	0x20004d48
	...

08014ae0 <mcpwm_set_current>:
void mcpwm_set_current(float current) {
 8014ae0:	b510      	push	{r4, lr}
	if (fabsf(current) < conf->cc_min_current) {
 8014ae2:	4c21      	ldr	r4, [pc, #132]	; (8014b68 <mcpwm_set_current+0x88>)
 8014ae4:	6823      	ldr	r3, [r4, #0]
 8014ae6:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8014aea:	eeb0 7ac0 	vabs.f32	s14, s0
 8014aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
void mcpwm_set_current(float current) {
 8014af2:	b082      	sub	sp, #8
	if (fabsf(current) < conf->cc_min_current) {
 8014af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void mcpwm_set_current(float current) {
 8014af8:	ed8d 0a01 	vstr	s0, [sp, #4]
	if (fabsf(current) < conf->cc_min_current) {
 8014afc:	d428      	bmi.n	8014b50 <mcpwm_set_current+0x70>
	utils_truncate_number(&current, -conf->l_current_max, conf->l_current_max);
 8014afe:	ed93 0a01 	vldr	s0, [r3, #4]
 8014b02:	edd3 0a01 	vldr	s1, [r3, #4]
 8014b06:	eeb1 0a40 	vneg.f32	s0, s0
 8014b0a:	a801      	add	r0, sp, #4
 8014b0c:	f000 fff8 	bl	8015b00 <utils_truncate_number>
	control_mode = CONTROL_MODE_CURRENT;
 8014b10:	4916      	ldr	r1, [pc, #88]	; (8014b6c <mcpwm_set_current+0x8c>)
	current_set = current;
 8014b12:	eddd 7a01 	vldr	s15, [sp, #4]
 8014b16:	4a16      	ldr	r2, [pc, #88]	; (8014b70 <mcpwm_set_current+0x90>)
	if (state != MC_STATE_RUNNING) {
 8014b18:	4b16      	ldr	r3, [pc, #88]	; (8014b74 <mcpwm_set_current+0x94>)
	control_mode = CONTROL_MODE_CURRENT;
 8014b1a:	2002      	movs	r0, #2
 8014b1c:	7008      	strb	r0, [r1, #0]
	current_set = current;
 8014b1e:	edc2 7a00 	vstr	s15, [r2]
	if (state != MC_STATE_RUNNING) {
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	4283      	cmp	r3, r0
 8014b26:	d011      	beq.n	8014b4c <mcpwm_set_current+0x6c>
		set_duty_cycle_hl(SIGN(current) * conf->l_min_duty);
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014b3a:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
 8014b3e:	bf58      	it	pl
 8014b40:	eef0 7a47 	vmovpl.f32	s15, s14
 8014b44:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014b48:	f7ff fd32 	bl	80145b0 <set_duty_cycle_hl>
}
 8014b4c:	b002      	add	sp, #8
 8014b4e:	bd10      	pop	{r4, pc}
		control_mode = CONTROL_MODE_NONE;
 8014b50:	4806      	ldr	r0, [pc, #24]	; (8014b6c <mcpwm_set_current+0x8c>)
	state = MC_STATE_OFF;
 8014b52:	4908      	ldr	r1, [pc, #32]	; (8014b74 <mcpwm_set_current+0x94>)
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014b54:	4a08      	ldr	r2, [pc, #32]	; (8014b78 <mcpwm_set_current+0x98>)
	state = MC_STATE_OFF;
 8014b56:	2300      	movs	r3, #0
		control_mode = CONTROL_MODE_NONE;
 8014b58:	2407      	movs	r4, #7
 8014b5a:	7004      	strb	r4, [r0, #0]
	state = MC_STATE_OFF;
 8014b5c:	700b      	strb	r3, [r1, #0]
	ignore_iterations = MCPWM_CMD_STOP_TIME;
 8014b5e:	6013      	str	r3, [r2, #0]
	stop_pwm_hw();
 8014b60:	f7fe f986 	bl	8012e70 <stop_pwm_hw>
}
 8014b64:	b002      	add	sp, #8
 8014b66:	bd10      	pop	{r4, pc}
 8014b68:	20004d48 	.word	0x20004d48
 8014b6c:	20004d4c 	.word	0x20004d4c
 8014b70:	20004dec 	.word	0x20004dec
 8014b74:	200059ec 	.word	0x200059ec
 8014b78:	20004f48 	.word	0x20004f48
 8014b7c:	00000000 	.word	0x00000000

08014b80 <mcpwm_adc_int_handler>:
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	ed2d 8b06 	vpush	{d8-d10}
	TIM12->CNT = 0;
 8014b88:	4b98      	ldr	r3, [pc, #608]	; (8014dec <mcpwm_adc_int_handler+0x26c>)
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014b8a:	4c99      	ldr	r4, [pc, #612]	; (8014df0 <mcpwm_adc_int_handler+0x270>)
	if (!(state == MC_STATE_RUNNING && direction == direction_before)) {
 8014b8c:	4d99      	ldr	r5, [pc, #612]	; (8014df4 <mcpwm_adc_int_handler+0x274>)
 8014b8e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8014e44 <mcpwm_adc_int_handler+0x2c4>
	TIM12->CNT = 0;
 8014b92:	2200      	movs	r2, #0
 8014b94:	625a      	str	r2, [r3, #36]	; 0x24
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
 8014b96:	b08b      	sub	sp, #44	; 0x2c
	update_timer_attempt();
 8014b98:	f7fd fdda 	bl	8012750 <update_timer_attempt>
	WWDG_SetCounter(100);
 8014b9c:	2064      	movs	r0, #100	; 0x64
 8014b9e:	f010 fabf 	bl	8025120 <WWDG_SetCounter>
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014ba2:	8a22      	ldrh	r2, [r4, #16]
	if (!(state == MC_STATE_RUNNING && direction == direction_before)) {
 8014ba4:	782b      	ldrb	r3, [r5, #0]
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014ba6:	b292      	uxth	r2, r2
	if (!(state == MC_STATE_RUNNING && direction == direction_before)) {
 8014ba8:	2b02      	cmp	r3, #2
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014baa:	9201      	str	r2, [sp, #4]
 8014bac:	4b92      	ldr	r3, [pc, #584]	; (8014df8 <mcpwm_adc_int_handler+0x278>)
	if (!(state == MC_STATE_RUNNING && direction == direction_before)) {
 8014bae:	f000 81a4 	beq.w	8014efa <mcpwm_adc_int_handler+0x37a>
		has_commutated = 0;
 8014bb2:	4e92      	ldr	r6, [pc, #584]	; (8014dfc <mcpwm_adc_int_handler+0x27c>)
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	6032      	str	r2, [r6, #0]
	if (conf->motor_type == MOTOR_TYPE_BLDC) {
 8014bb8:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8014e48 <mcpwm_adc_int_handler+0x2c8>
	direction_before = direction;
 8014bbc:	f8da 1000 	ldr.w	r1, [sl]
	if (conf->motor_type == MOTOR_TYPE_BLDC) {
 8014bc0:	f8d8 2000 	ldr.w	r2, [r8]
	direction_before = direction;
 8014bc4:	6019      	str	r1, [r3, #0]
	if (conf->motor_type == MOTOR_TYPE_BLDC) {
 8014bc6:	7893      	ldrb	r3, [r2, #2]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f040 8086 	bne.w	8014cda <mcpwm_adc_int_handler+0x15a>
		if (has_commutated && fabsf(dutycycle_now) > 0.2) {
 8014bce:	6833      	ldr	r3, [r6, #0]
 8014bd0:	4f8b      	ldr	r7, [pc, #556]	; (8014e00 <mcpwm_adc_int_handler+0x280>)
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f040 80b7 	bne.w	8014d46 <mcpwm_adc_int_handler+0x1c6>
			mcpwm_vzero = (ADC_V_L1 + ADC_V_L2 + ADC_V_L3) / 3;
 8014bd8:	88a3      	ldrh	r3, [r4, #4]
 8014bda:	8862      	ldrh	r2, [r4, #2]
 8014bdc:	8821      	ldrh	r1, [r4, #0]
 8014bde:	b292      	uxth	r2, r2
 8014be0:	fa12 f383 	uxtah	r3, r2, r3
 8014be4:	4a87      	ldr	r2, [pc, #540]	; (8014e04 <mcpwm_adc_int_handler+0x284>)
 8014be6:	fa13 f181 	uxtah	r1, r3, r1
 8014bea:	fb82 3201 	smull	r3, r2, r2, r1
 8014bee:	4b86      	ldr	r3, [pc, #536]	; (8014e08 <mcpwm_adc_int_handler+0x288>)
 8014bf0:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8014bf4:	601a      	str	r2, [r3, #0]
		if (direction) {
 8014bf6:	f8da 2000 	ldr.w	r2, [sl]
			ph1 = ADC_V_L1 - mcpwm_vzero;
 8014bfa:	88a0      	ldrh	r0, [r4, #4]
		if (direction) {
 8014bfc:	2a00      	cmp	r2, #0
 8014bfe:	f000 80b9 	beq.w	8014d74 <mcpwm_adc_int_handler+0x1f4>
			ph1 = ADC_V_L1 - mcpwm_vzero;
 8014c02:	681a      	ldr	r2, [r3, #0]
 8014c04:	9202      	str	r2, [sp, #8]
			ph2 = ADC_V_L2 - mcpwm_vzero;
 8014c06:	8861      	ldrh	r1, [r4, #2]
 8014c08:	f8d3 9000 	ldr.w	r9, [r3]
			ph3 = ADC_V_L3 - mcpwm_vzero;
 8014c0c:	8822      	ldrh	r2, [r4, #0]
 8014c0e:	f8d3 b000 	ldr.w	fp, [r3]
			ph1_raw = ADC_V_L1;
 8014c12:	f8b4 c004 	ldrh.w	ip, [r4, #4]
			ph2_raw = ADC_V_L2;
 8014c16:	f8b4 e002 	ldrh.w	lr, [r4, #2]
			ph3_raw = ADC_V_L3;
 8014c1a:	8823      	ldrh	r3, [r4, #0]
			ph3 = ADC_V_L2 - mcpwm_vzero;
 8014c1c:	b292      	uxth	r2, r2
 8014c1e:	9205      	str	r2, [sp, #20]
			ph1 = ADC_V_L1 - mcpwm_vzero;
 8014c20:	9a02      	ldr	r2, [sp, #8]
 8014c22:	b280      	uxth	r0, r0
 8014c24:	1a82      	subs	r2, r0, r2
			ph2 = ADC_V_L3 - mcpwm_vzero;
 8014c26:	b289      	uxth	r1, r1
			ph1 = ADC_V_L1 - mcpwm_vzero;
 8014c28:	9203      	str	r2, [sp, #12]
			ph2 = ADC_V_L3 - mcpwm_vzero;
 8014c2a:	eba1 0209 	sub.w	r2, r1, r9
 8014c2e:	9204      	str	r2, [sp, #16]
			ph3 = ADC_V_L2 - mcpwm_vzero;
 8014c30:	9a05      	ldr	r2, [sp, #20]
 8014c32:	eba2 0b0b 	sub.w	fp, r2, fp
			ph1_raw = ADC_V_L1;
 8014c36:	fa1f f28c 	uxth.w	r2, ip
			ph3_raw = ADC_V_L2;
 8014c3a:	b29b      	uxth	r3, r3
			ph1_raw = ADC_V_L1;
 8014c3c:	9206      	str	r2, [sp, #24]
			ph2_raw = ADC_V_L3;
 8014c3e:	fa1f f28e 	uxth.w	r2, lr
			ph3_raw = ADC_V_L2;
 8014c42:	9305      	str	r3, [sp, #20]
			ph2_raw = ADC_V_L3;
 8014c44:	9207      	str	r2, [sp, #28]
		update_timer_attempt();
 8014c46:	f7fd fd83 	bl	8012750 <update_timer_attempt>
		if (has_commutated) {
 8014c4a:	6833      	ldr	r3, [r6, #0]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 81f7 	beq.w	8015040 <mcpwm_adc_int_handler+0x4c0>
			amp = fabsf(dutycycle_now) * (float)ADC_Value[ADC_IND_VIN_SENS];
 8014c52:	ed97 0a00 	vldr	s0, [r7]
 8014c56:	8a23      	ldrh	r3, [r4, #16]
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	ee07 3a90 	vmov	s15, r3
 8014c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c62:	eeb0 0ac0 	vabs.f32	s0, s0
 8014c66:	ee20 0a27 	vmul.f32	s0, s0, s15
		filter_add_sample((float*)amp_fir_samples, amp,
 8014c6a:	4a68      	ldr	r2, [pc, #416]	; (8014e0c <mcpwm_adc_int_handler+0x28c>)
 8014c6c:	4868      	ldr	r0, [pc, #416]	; (8014e10 <mcpwm_adc_int_handler+0x290>)
 8014c6e:	2107      	movs	r1, #7
 8014c70:	f7fd fb76 	bl	8012360 <filter_add_sample>
		if (sensorless_now) {
 8014c74:	4b67      	ldr	r3, [pc, #412]	; (8014e14 <mcpwm_adc_int_handler+0x294>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f000 81d0 	beq.w	8015022 <mcpwm_adc_int_handler+0x4a2>
			if (pwm_cycles_sum >= rpm_dep.comm_time_sum_min_rpm) {
 8014c82:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8014e4c <mcpwm_adc_int_handler+0x2cc>
 8014c86:	4b64      	ldr	r3, [pc, #400]	; (8014e18 <mcpwm_adc_int_handler+0x298>)
 8014c88:	ed93 7a04 	vldr	s14, [r3, #16]
 8014c8c:	edd9 7a00 	vldr	s15, [r9]
 8014c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c98:	f240 8137 	bls.w	8014f0a <mcpwm_adc_int_handler+0x38a>
 8014c9c:	f8d8 2000 	ldr.w	r2, [r8]
			if ((state == MC_STATE_RUNNING && pwm_cycles >= 2) || state == MC_STATE_OFF) {
 8014ca0:	782b      	ldrb	r3, [r5, #0]
 8014ca2:	2b02      	cmp	r3, #2
 8014ca4:	4b5d      	ldr	r3, [pc, #372]	; (8014e1c <mcpwm_adc_int_handler+0x29c>)
 8014ca6:	9302      	str	r3, [sp, #8]
 8014ca8:	d07e      	beq.n	8014da8 <mcpwm_adc_int_handler+0x228>
 8014caa:	782b      	ldrb	r3, [r5, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d07f      	beq.n	8014db0 <mcpwm_adc_int_handler+0x230>
				cycle_integrator = 0.0;
 8014cb0:	4b5b      	ldr	r3, [pc, #364]	; (8014e20 <mcpwm_adc_int_handler+0x2a0>)
 8014cb2:	4c5c      	ldr	r4, [pc, #368]	; (8014e24 <mcpwm_adc_int_handler+0x2a4>)
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	6019      	str	r1, [r3, #0]
			pwm_cycles_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 8014cb8:	ed92 6a5a 	vldr	s12, [r2, #360]	; 0x168
 8014cbc:	edd4 6a00 	vldr	s13, [r4]
 8014cc0:	ed99 7a00 	vldr	s14, [r9]
			pwm_cycles++;
 8014cc4:	9a02      	ldr	r2, [sp, #8]
			pwm_cycles_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 8014cc6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014cce:	edc9 7a00 	vstr	s15, [r9]
			pwm_cycles++;
 8014cd2:	6813      	ldr	r3, [r2, #0]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	6013      	str	r3, [r2, #0]
 8014cd8:	e015      	b.n	8014d06 <mcpwm_adc_int_handler+0x186>
		if (has_commutated) {
 8014cda:	6833      	ldr	r3, [r6, #0]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d157      	bne.n	8014d90 <mcpwm_adc_int_handler+0x210>
			amp = ADC_V_L3 - ADC_V_L1;
 8014ce0:	8823      	ldrh	r3, [r4, #0]
 8014ce2:	88a2      	ldrh	r2, [r4, #4]
 8014ce4:	4f46      	ldr	r7, [pc, #280]	; (8014e00 <mcpwm_adc_int_handler+0x280>)
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	b292      	uxth	r2, r2
 8014cea:	1a9b      	subs	r3, r3, r2
 8014cec:	ee00 3a10 	vmov	s0, r3
 8014cf0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
		filter_add_sample((float*)amp_fir_samples, amp,
 8014cf4:	4a45      	ldr	r2, [pc, #276]	; (8014e0c <mcpwm_adc_int_handler+0x28c>)
 8014cf6:	4846      	ldr	r0, [pc, #280]	; (8014e10 <mcpwm_adc_int_handler+0x290>)
 8014cf8:	2107      	movs	r1, #7
 8014cfa:	f7fd fb31 	bl	8012360 <filter_add_sample>
		if (state == MC_STATE_RUNNING && !has_commutated) {
 8014cfe:	782b      	ldrb	r3, [r5, #0]
 8014d00:	2b02      	cmp	r3, #2
 8014d02:	f000 81b7 	beq.w	8015074 <mcpwm_adc_int_handler+0x4f4>
	return last_current_sample;
 8014d06:	4b48      	ldr	r3, [pc, #288]	; (8014e28 <mcpwm_adc_int_handler+0x2a8>)
 8014d08:	edd3 8a00 	vldr	s17, [r3]
	const float current_in_nofilter = current_nofilter * fabsf(dutycycle_now);
 8014d0c:	ed97 8a00 	vldr	s16, [r7]
	if (state == MC_STATE_RUNNING && has_commutated) {
 8014d10:	782b      	ldrb	r3, [r5, #0]
 8014d12:	2b02      	cmp	r3, #2
 8014d14:	f000 809e 	beq.w	8014e54 <mcpwm_adc_int_handler+0x2d4>
	mc_interface_mc_timer_isr();
 8014d18:	f007 fc2a 	bl	801c570 <mc_interface_mc_timer_isr>
	if (encoder_is_configured()) {
 8014d1c:	f005 ffe0 	bl	801ace0 <encoder_is_configured>
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d155      	bne.n	8014dd0 <mcpwm_adc_int_handler+0x250>
	last_adc_isr_duration = (float)TIM12->CNT / 10000000.0;
 8014d24:	4b31      	ldr	r3, [pc, #196]	; (8014dec <mcpwm_adc_int_handler+0x26c>)
 8014d26:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014e2c <mcpwm_adc_int_handler+0x2ac>
 8014d2a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8014d2e:	4b40      	ldr	r3, [pc, #256]	; (8014e30 <mcpwm_adc_int_handler+0x2b0>)
 8014d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014d38:	ed83 7a00 	vstr	s14, [r3]
}
 8014d3c:	b00b      	add	sp, #44	; 0x2c
 8014d3e:	ecbd 8b06 	vpop	{d8-d10}
 8014d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (has_commutated && fabsf(dutycycle_now) > 0.2) {
 8014d46:	edd7 7a00 	vldr	s15, [r7]
 8014d4a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8014e34 <mcpwm_adc_int_handler+0x2b4>
 8014d4e:	eef0 7ae7 	vabs.f32	s15, s15
 8014d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d5a:	f77f af3d 	ble.w	8014bd8 <mcpwm_adc_int_handler+0x58>
			mcpwm_vzero = ADC_V_ZERO;
 8014d5e:	8a22      	ldrh	r2, [r4, #16]
 8014d60:	4b29      	ldr	r3, [pc, #164]	; (8014e08 <mcpwm_adc_int_handler+0x288>)
 8014d62:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8014d66:	601a      	str	r2, [r3, #0]
		if (direction) {
 8014d68:	f8da 2000 	ldr.w	r2, [sl]
			ph1 = ADC_V_L1 - mcpwm_vzero;
 8014d6c:	88a0      	ldrh	r0, [r4, #4]
		if (direction) {
 8014d6e:	2a00      	cmp	r2, #0
 8014d70:	f47f af47 	bne.w	8014c02 <mcpwm_adc_int_handler+0x82>
			ph1 = ADC_V_L1 - mcpwm_vzero;
 8014d74:	681a      	ldr	r2, [r3, #0]
 8014d76:	9202      	str	r2, [sp, #8]
			ph2 = ADC_V_L3 - mcpwm_vzero;
 8014d78:	8821      	ldrh	r1, [r4, #0]
 8014d7a:	f8d3 9000 	ldr.w	r9, [r3]
			ph3 = ADC_V_L2 - mcpwm_vzero;
 8014d7e:	8862      	ldrh	r2, [r4, #2]
 8014d80:	f8d3 b000 	ldr.w	fp, [r3]
			ph1_raw = ADC_V_L1;
 8014d84:	f8b4 c004 	ldrh.w	ip, [r4, #4]
			ph2_raw = ADC_V_L3;
 8014d88:	f8b4 e000 	ldrh.w	lr, [r4]
			ph3_raw = ADC_V_L2;
 8014d8c:	8863      	ldrh	r3, [r4, #2]
 8014d8e:	e745      	b.n	8014c1c <mcpwm_adc_int_handler+0x9c>
			amp = dutycycle_now * (float)ADC_Value[ADC_IND_VIN_SENS];
 8014d90:	8a23      	ldrh	r3, [r4, #16]
 8014d92:	4f1b      	ldr	r7, [pc, #108]	; (8014e00 <mcpwm_adc_int_handler+0x280>)
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	ee07 3a90 	vmov	s15, r3
 8014d9a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014d9e:	edd7 7a00 	vldr	s15, [r7]
 8014da2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014da6:	e7a5      	b.n	8014cf4 <mcpwm_adc_int_handler+0x174>
			if ((state == MC_STATE_RUNNING && pwm_cycles >= 2) || state == MC_STATE_OFF) {
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	f77f af7d 	ble.w	8014caa <mcpwm_adc_int_handler+0x12a>
				switch (comm_step) {
 8014db0:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8014e50 <mcpwm_adc_int_handler+0x2d0>
 8014db4:	f8de 3000 	ldr.w	r3, [lr]
 8014db8:	3b01      	subs	r3, #1
 8014dba:	2b05      	cmp	r3, #5
 8014dbc:	f200 84c4 	bhi.w	8015748 <mcpwm_adc_int_handler+0xbc8>
 8014dc0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014dc4:	035b034b 	.word	0x035b034b
 8014dc8:	035000b9 	.word	0x035000b9
 8014dcc:	00b70356 	.word	0x00b70356
		run_pid_control_pos(1.0 / switching_frequency_now);
 8014dd0:	4a14      	ldr	r2, [pc, #80]	; (8014e24 <mcpwm_adc_int_handler+0x2a4>)
	if (control_mode != CONTROL_MODE_POS) {
 8014dd2:	4b19      	ldr	r3, [pc, #100]	; (8014e38 <mcpwm_adc_int_handler+0x2b8>)
		run_pid_control_pos(1.0 / switching_frequency_now);
 8014dd4:	edd2 7a00 	vldr	s15, [r2]
	if (control_mode != CONTROL_MODE_POS) {
 8014dd8:	781b      	ldrb	r3, [r3, #0]
 8014dda:	2b04      	cmp	r3, #4
 8014ddc:	f000 82a3 	beq.w	8015326 <mcpwm_adc_int_handler+0x7a6>
		i_term = 0;
 8014de0:	4916      	ldr	r1, [pc, #88]	; (8014e3c <mcpwm_adc_int_handler+0x2bc>)
		prev_error = 0;
 8014de2:	4a17      	ldr	r2, [pc, #92]	; (8014e40 <mcpwm_adc_int_handler+0x2c0>)
		i_term = 0;
 8014de4:	2300      	movs	r3, #0
 8014de6:	600b      	str	r3, [r1, #0]
		prev_error = 0;
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	e79b      	b.n	8014d24 <mcpwm_adc_int_handler+0x1a4>
 8014dec:	40001800 	.word	0x40001800
 8014df0:	2000c034 	.word	0x2000c034
 8014df4:	200059ec 	.word	0x200059ec
 8014df8:	2000100c 	.word	0x2000100c
 8014dfc:	20004f3c 	.word	0x20004f3c
 8014e00:	20004e14 	.word	0x20004e14
 8014e04:	55555556 	.word	0x55555556
 8014e08:	20005400 	.word	0x20005400
 8014e0c:	20004b38 	.word	0x20004b38
 8014e10:	20004b3c 	.word	0x20004b3c
 8014e14:	200059e0 	.word	0x200059e0
 8014e18:	2000541c 	.word	0x2000541c
 8014e1c:	20005414 	.word	0x20005414
 8014e20:	20004df0 	.word	0x20004df0
 8014e24:	200059f0 	.word	0x200059f0
 8014e28:	20005358 	.word	0x20005358
 8014e2c:	4b189680 	.word	0x4b189680
 8014e30:	20005354 	.word	0x20005354
 8014e34:	3e4ccccd 	.word	0x3e4ccccd
 8014e38:	20004d4c 	.word	0x20004d4c
 8014e3c:	20004f44 	.word	0x20004f44
 8014e40:	2000540c 	.word	0x2000540c
 8014e44:	20004e10 	.word	0x20004e10
 8014e48:	20004d48 	.word	0x20004d48
 8014e4c:	20005418 	.word	0x20005418
 8014e50:	20004d44 	.word	0x20004d44
	if (state == MC_STATE_RUNNING && has_commutated) {
 8014e54:	6833      	ldr	r3, [r6, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f43f af5e 	beq.w	8014d18 <mcpwm_adc_int_handler+0x198>
		float ramp_step = conf->m_duty_ramp_step / (switching_frequency_now / 1000.0);
 8014e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8014e60:	4caa      	ldr	r4, [pc, #680]	; (801510c <mcpwm_adc_int_handler+0x58c>)
 8014e62:	edd3 5a54 	vldr	s11, [r3, #336]	; 0x150
 8014e66:	eddf 7aaa 	vldr	s15, [pc, #680]	; 8015110 <mcpwm_adc_int_handler+0x590>
 8014e6a:	edd4 6a00 	vldr	s13, [r4]
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014e6e:	ed9f 5aa9 	vldr	s10, [pc, #676]	; 8015114 <mcpwm_adc_int_handler+0x594>
 8014e72:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8015118 <mcpwm_adc_int_handler+0x598>
	return direction ? rpm_now : -rpm_now;
 8014e76:	f8da 2000 	ldr.w	r2, [sl]
 8014e7a:	4ea8      	ldr	r6, [pc, #672]	; (801511c <mcpwm_adc_int_handler+0x59c>)
		float ramp_step = conf->m_duty_ramp_step / (switching_frequency_now / 1000.0);
 8014e7c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014e80:	eddd 7a01 	vldr	s15, [sp, #4]
	return direction ? rpm_now : -rpm_now;
 8014e84:	ed96 9a00 	vldr	s18, [r6]
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
		const float voltage_scale = 20.0 / input_voltage;
 8014e8c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014e90:	ee67 7a85 	vmul.f32	s15, s15, s10
		float ramp_step = conf->m_duty_ramp_step / (switching_frequency_now / 1000.0);
 8014e94:	eec5 9a86 	vdiv.f32	s19, s11, s12
	const float input_voltage = GET_INPUT_VOLTAGE();
 8014e98:	ee67 7a87 	vmul.f32	s15, s15, s14
		const float voltage_scale = 20.0 / input_voltage;
 8014e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	return direction ? rpm_now : -rpm_now;
 8014ea0:	b90a      	cbnz	r2, 8014ea6 <mcpwm_adc_int_handler+0x326>
 8014ea2:	eeb1 9a49 	vneg.f32	s18, s18
		if (slow_ramping_cycles) {
 8014ea6:	4d9e      	ldr	r5, [pc, #632]	; (8015120 <mcpwm_adc_int_handler+0x5a0>)
 8014ea8:	682a      	ldr	r2, [r5, #0]
 8014eaa:	2a00      	cmp	r2, #0
 8014eac:	f000 82bb 	beq.w	8015426 <mcpwm_adc_int_handler+0x8a6>
			slow_ramping_cycles--;
 8014eb0:	682a      	ldr	r2, [r5, #0]
			ramp_step *= 0.1;
 8014eb2:	eddf aa9c 	vldr	s21, [pc, #624]	; 8015124 <mcpwm_adc_int_handler+0x5a4>
			slow_ramping_cycles--;
 8014eb6:	3a01      	subs	r2, #1
			ramp_step *= 0.1;
 8014eb8:	ee69 aaaa 	vmul.f32	s21, s19, s21
			slow_ramping_cycles--;
 8014ebc:	602a      	str	r2, [r5, #0]
		if (control_mode == CONTROL_MODE_CURRENT ||
 8014ebe:	4a9a      	ldr	r2, [pc, #616]	; (8015128 <mcpwm_adc_int_handler+0x5a8>)
		float dutycycle_now_tmp = dutycycle_now;
 8014ec0:	6838      	ldr	r0, [r7, #0]
		if (control_mode == CONTROL_MODE_CURRENT ||
 8014ec2:	7811      	ldrb	r1, [r2, #0]
		float dutycycle_now_tmp = dutycycle_now;
 8014ec4:	9008      	str	r0, [sp, #32]
		if (control_mode == CONTROL_MODE_CURRENT ||
 8014ec6:	2902      	cmp	r1, #2
 8014ec8:	f000 8146 	beq.w	8015158 <mcpwm_adc_int_handler+0x5d8>
				control_mode == CONTROL_MODE_POS ||
 8014ecc:	7811      	ldrb	r1, [r2, #0]
		if (control_mode == CONTROL_MODE_CURRENT ||
 8014ece:	2904      	cmp	r1, #4
 8014ed0:	f000 8142 	beq.w	8015158 <mcpwm_adc_int_handler+0x5d8>
				control_mode == CONTROL_MODE_SPEED) {
 8014ed4:	7811      	ldrb	r1, [r2, #0]
				control_mode == CONTROL_MODE_POS ||
 8014ed6:	2901      	cmp	r1, #1
 8014ed8:	f000 813e 	beq.w	8015158 <mcpwm_adc_int_handler+0x5d8>
		} else if (control_mode == CONTROL_MODE_CURRENT_BRAKE) {
 8014edc:	7812      	ldrb	r2, [r2, #0]
 8014ede:	2a03      	cmp	r2, #3
 8014ee0:	f000 82f0 	beq.w	80154c4 <mcpwm_adc_int_handler+0x944>
			utils_step_towards((float*)&dutycycle_now_tmp, dutycycle_set, ramp_step);
 8014ee4:	4b91      	ldr	r3, [pc, #580]	; (801512c <mcpwm_adc_int_handler+0x5ac>)
 8014ee6:	eef0 0a6a 	vmov.f32	s1, s21
 8014eea:	ed93 0a00 	vldr	s0, [r3]
 8014eee:	a808      	add	r0, sp, #32
 8014ef0:	f000 fd96 	bl	8015a20 <utils_step_towards>
 8014ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8014ef8:	e1b3      	b.n	8015262 <mcpwm_adc_int_handler+0x6e2>
	if (!(state == MC_STATE_RUNNING && direction == direction_before)) {
 8014efa:	f8da 1000 	ldr.w	r1, [sl]
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	4291      	cmp	r1, r2
 8014f02:	f47f ae56 	bne.w	8014bb2 <mcpwm_adc_int_handler+0x32>
 8014f06:	4e8a      	ldr	r6, [pc, #552]	; (8015130 <mcpwm_adc_int_handler+0x5b0>)
 8014f08:	e656      	b.n	8014bb8 <mcpwm_adc_int_handler+0x38>
				if (state == MC_STATE_RUNNING) {
 8014f0a:	7828      	ldrb	r0, [r5, #0]
 8014f0c:	b2c0      	uxtb	r0, r0
 8014f0e:	2802      	cmp	r0, #2
 8014f10:	f47f aec4 	bne.w	8014c9c <mcpwm_adc_int_handler+0x11c>
					if (conf->comm_mode == COMM_MODE_INTEGRATE) {
 8014f14:	f8d8 2000 	ldr.w	r2, [r8]
 8014f18:	7853      	ldrb	r3, [r2, #1]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	f000 83bc 	beq.w	8015698 <mcpwm_adc_int_handler+0xb18>
					} else if (conf->comm_mode == COMM_MODE_DELAY) {
 8014f20:	7850      	ldrb	r0, [r2, #1]
 8014f22:	b2c0      	uxtb	r0, r0
 8014f24:	2801      	cmp	r0, #1
 8014f26:	f000 83b7 	beq.w	8015698 <mcpwm_adc_int_handler+0xb18>
					cycle_integrator = 0.0;
 8014f2a:	4b82      	ldr	r3, [pc, #520]	; (8015134 <mcpwm_adc_int_handler+0x5b4>)
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	6019      	str	r1, [r3, #0]
 8014f30:	e6b6      	b.n	8014ca0 <mcpwm_adc_int_handler+0x120>
					v_diff = -ph3;
 8014f32:	f1cb 0b00 	rsb	fp, fp, #0
				if (v_diff < 50) {
 8014f36:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
 8014f3a:	f340 823d 	ble.w	80153b8 <mcpwm_adc_int_handler+0x838>
					int min = (int)((1.0 - fabsf(dutycycle_now)) * (float)ADC_Value[ADC_IND_VIN_SENS] * 0.3);
 8014f3e:	ed97 7a00 	vldr	s14, [r7]
 8014f42:	8a23      	ldrh	r3, [r4, #16]
 8014f44:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 8015138 <mcpwm_adc_int_handler+0x5b8>
					if (min > ADC_Value[ADC_IND_VIN_SENS] / 4) {
 8014f48:	8a21      	ldrh	r1, [r4, #16]
					int min = (int)((1.0 - fabsf(dutycycle_now)) * (float)ADC_Value[ADC_IND_VIN_SENS] * 0.3);
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	ee07 3a90 	vmov	s15, r3
 8014f50:	eef0 6ac7 	vabs.f32	s13, s14
 8014f54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f58:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
					if (min > ADC_Value[ADC_IND_VIN_SENS] / 4) {
 8014f60:	f3c1 018d 	ubfx	r1, r1, #2, #14
					int min = (int)((1.0 - fabsf(dutycycle_now)) * (float)ADC_Value[ADC_IND_VIN_SENS] * 0.3);
 8014f64:	ee67 7a27 	vmul.f32	s15, s14, s15
					if (pwm_cycles_sum > (last_pwm_cycles_sum / 2.0) ||
 8014f68:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					int min = (int)((1.0 - fabsf(dutycycle_now)) * (float)ADC_Value[ADC_IND_VIN_SENS] * 0.3);
 8014f6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f74:	ee17 3a90 	vmov	r3, s15
					if (min > ADC_Value[ADC_IND_VIN_SENS] / 4) {
 8014f78:	428b      	cmp	r3, r1
					if (pwm_cycles_sum > (last_pwm_cycles_sum / 2.0) ||
 8014f7a:	4970      	ldr	r1, [pc, #448]	; (801513c <mcpwm_adc_int_handler+0x5bc>)
						min = ADC_Value[ADC_IND_VIN_SENS] / 4;
 8014f7c:	bfc8      	it	gt
 8014f7e:	8a23      	ldrhgt	r3, [r4, #16]
					if (pwm_cycles_sum > (last_pwm_cycles_sum / 2.0) ||
 8014f80:	edd1 7a00 	vldr	s15, [r1]
 8014f84:	ed99 7a00 	vldr	s14, [r9]
 8014f88:	ee67 7aa6 	vmul.f32	s15, s15, s13
						min = ADC_Value[ADC_IND_VIN_SENS] / 4;
 8014f8c:	bfc8      	it	gt
 8014f8e:	f3c3 038d 	ubfxgt	r3, r3, #2, #14
					if (pwm_cycles_sum > (last_pwm_cycles_sum / 2.0) ||
 8014f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9a:	d403      	bmi.n	8014fa4 <mcpwm_adc_int_handler+0x424>
							!has_commutated || (ph_now_raw > min && ph_now_raw < (ADC_Value[ADC_IND_VIN_SENS] - min))) {
 8014f9c:	6831      	ldr	r1, [r6, #0]
					if (pwm_cycles_sum > (last_pwm_cycles_sum / 2.0) ||
 8014f9e:	2900      	cmp	r1, #0
 8014fa0:	f040 824f 	bne.w	8015442 <mcpwm_adc_int_handler+0x8c2>
						cycle_integrator += (float)v_diff / switching_frequency_now;
 8014fa4:	ee07 ba90 	vmov	s15, fp
 8014fa8:	4c58      	ldr	r4, [pc, #352]	; (801510c <mcpwm_adc_int_handler+0x58c>)
 8014faa:	4b62      	ldr	r3, [pc, #392]	; (8015134 <mcpwm_adc_int_handler+0x5b4>)
 8014fac:	edd4 6a00 	vldr	s13, [r4]
 8014fb0:	ed93 7a00 	vldr	s14, [r3]
 8014fb4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014fb8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fc0:	edc3 7a00 	vstr	s15, [r3]
				if (conf->comm_mode == COMM_MODE_INTEGRATE) {
 8014fc4:	7853      	ldrb	r3, [r2, #1]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d160      	bne.n	801508c <mcpwm_adc_int_handler+0x50c>
					if (has_commutated) {
 8014fca:	6833      	ldr	r3, [r6, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f000 822d 	beq.w	801542c <mcpwm_adc_int_handler+0x8ac>
						limit = rpm_dep.cycle_int_limit_running * (0.0005 * VDIV_CORR);
 8014fd2:	4b5b      	ldr	r3, [pc, #364]	; (8015140 <mcpwm_adc_int_handler+0x5c0>)
 8014fd4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015144 <mcpwm_adc_int_handler+0x5c4>
 8014fd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8014fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
					if (cycle_integrator >= (rpm_dep.cycle_int_limit_max * (0.0005 * VDIV_CORR)) ||
 8014fe0:	4b57      	ldr	r3, [pc, #348]	; (8015140 <mcpwm_adc_int_handler+0x5c0>)
 8014fe2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015144 <mcpwm_adc_int_handler+0x5c4>
 8014fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8014fea:	f8df b148 	ldr.w	fp, [pc, #328]	; 8015134 <mcpwm_adc_int_handler+0x5b4>
 8014fee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014ff2:	eddb 6a00 	vldr	s13, [fp]
 8014ff6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffe:	d905      	bls.n	801500c <mcpwm_adc_int_handler+0x48c>
 8015000:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015008:	f63f ae56 	bhi.w	8014cb8 <mcpwm_adc_int_handler+0x138>
						commutate(1);
 801500c:	2001      	movs	r0, #1
 801500e:	f7fd ff6f 	bl	8012ef0 <commutate>
						cycle_sum = 0.0;
 8015012:	4a4d      	ldr	r2, [pc, #308]	; (8015148 <mcpwm_adc_int_handler+0x5c8>)
						cycle_integrator = 0.0;
 8015014:	2300      	movs	r3, #0
						cycle_sum = 0.0;
 8015016:	6013      	str	r3, [r2, #0]
						cycle_integrator = 0.0;
 8015018:	f8cb 3000 	str.w	r3, [fp]
 801501c:	f8d8 2000 	ldr.w	r2, [r8]
 8015020:	e64a      	b.n	8014cb8 <mcpwm_adc_int_handler+0x138>
			if (comm_step != hall_phase) {
 8015022:	4c4a      	ldr	r4, [pc, #296]	; (801514c <mcpwm_adc_int_handler+0x5cc>)
			const int hall_phase = mcpwm_read_hall_phase();
 8015024:	f7ff f9cc 	bl	80143c0 <mcpwm_read_hall_phase>
			if (comm_step != hall_phase) {
 8015028:	6823      	ldr	r3, [r4, #0]
 801502a:	4298      	cmp	r0, r3
 801502c:	f000 81ea 	beq.w	8015404 <mcpwm_adc_int_handler+0x884>
				comm_step = hall_phase;
 8015030:	6020      	str	r0, [r4, #0]
				update_rpm_tacho();
 8015032:	f7fd fb15 	bl	8012660 <update_rpm_tacho>
				if (state == MC_STATE_RUNNING) {
 8015036:	782b      	ldrb	r3, [r5, #0]
 8015038:	2b02      	cmp	r3, #2
 801503a:	f47f ae64 	bne.w	8014d06 <mcpwm_adc_int_handler+0x186>
 801503e:	e1eb      	b.n	8015418 <mcpwm_adc_int_handler+0x898>
			amp = sqrtf((float)(ph1*ph1 + ph2*ph2 + ph3*ph3)) * sqrtf(2.0);
 8015040:	9b04      	ldr	r3, [sp, #16]
 8015042:	9a03      	ldr	r2, [sp, #12]
 8015044:	fb03 f303 	mul.w	r3, r3, r3
 8015048:	fb02 3302 	mla	r3, r2, r2, r3
 801504c:	fb0b 330b 	mla	r3, fp, fp, r3
 8015050:	ee00 3a10 	vmov	s0, r3
 8015054:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015058:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015060:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8015064:	d501      	bpl.n	801506a <mcpwm_adc_int_handler+0x4ea>
 8015066:	f010 fe1b 	bl	8025ca0 <sqrtf>
 801506a:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8015150 <mcpwm_adc_int_handler+0x5d0>
 801506e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015072:	e5fa      	b.n	8014c6a <mcpwm_adc_int_handler+0xea>
		if (state == MC_STATE_RUNNING && !has_commutated) {
 8015074:	6834      	ldr	r4, [r6, #0]
 8015076:	2c00      	cmp	r4, #0
 8015078:	f47f ae45 	bne.w	8014d06 <mcpwm_adc_int_handler+0x186>
			set_next_comm_step(comm_step);
 801507c:	4b33      	ldr	r3, [pc, #204]	; (801514c <mcpwm_adc_int_handler+0x5cc>)
 801507e:	6818      	ldr	r0, [r3, #0]
 8015080:	f7fd fc7e 	bl	8012980 <set_next_comm_step>
			commutate(0);
 8015084:	4620      	mov	r0, r4
 8015086:	f7fd ff33 	bl	8012ef0 <commutate>
 801508a:	e63c      	b.n	8014d06 <mcpwm_adc_int_handler+0x186>
				} else if (conf->comm_mode == COMM_MODE_DELAY) {
 801508c:	7850      	ldrb	r0, [r2, #1]
 801508e:	b2c0      	uxtb	r0, r0
 8015090:	2801      	cmp	r0, #1
 8015092:	f47f ae11 	bne.w	8014cb8 <mcpwm_adc_int_handler+0x138>
					if (v_diff > 0) {
 8015096:	f1bb 0f00 	cmp.w	fp, #0
 801509a:	9003      	str	r0, [sp, #12]
 801509c:	f340 830f 	ble.w	80156be <mcpwm_adc_int_handler+0xb3e>
						cycle_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 80150a0:	edd2 5a5a 	vldr	s11, [r2, #360]	; 0x168
 80150a4:	edd4 6a00 	vldr	s13, [r4]
						if (cycle_sum >= utils_map(fabsf(rpm_now), 0,
 80150a8:	4b1c      	ldr	r3, [pc, #112]	; (801511c <mcpwm_adc_int_handler+0x59c>)
						cycle_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 80150aa:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8015148 <mcpwm_adc_int_handler+0x5c8>
						if (cycle_sum >= utils_map(fabsf(rpm_now), 0,
 80150ae:	ed93 0a00 	vldr	s0, [r3]
								conf->sl_cycle_int_rpm_br, rpm_dep.comm_time_sum / 2.0,
 80150b2:	4b23      	ldr	r3, [pc, #140]	; (8015140 <mcpwm_adc_int_handler+0x5c0>)
						if (cycle_sum >= utils_map(fabsf(rpm_now), 0,
 80150b4:	ed92 1a24 	vldr	s2, [r2, #144]	; 0x90
								conf->sl_cycle_int_rpm_br, rpm_dep.comm_time_sum / 2.0,
 80150b8:	edd3 1a03 	vldr	s3, [r3, #12]
								(rpm_dep.comm_time_sum / 2.0) * conf->sl_phase_advance_at_br)) {
 80150bc:	ed93 7a03 	vldr	s14, [r3, #12]
						cycle_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 80150c0:	ed9b 6a00 	vldr	s12, [fp]
								(rpm_dep.comm_time_sum / 2.0) * conf->sl_phase_advance_at_br)) {
 80150c4:	ed92 2a23 	vldr	s4, [r2, #140]	; 0x8c
						if (cycle_sum >= utils_map(fabsf(rpm_now), 0,
 80150c8:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8015154 <mcpwm_adc_int_handler+0x5d4>
						cycle_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 80150cc:	eec5 7aa6 	vdiv.f32	s15, s11, s13
								(rpm_dep.comm_time_sum / 2.0) * conf->sl_phase_advance_at_br)) {
 80150d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80150d4:	ee27 7a26 	vmul.f32	s14, s14, s13
						cycle_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 80150d8:	ee77 7a86 	vadd.f32	s15, s15, s12
						if (cycle_sum >= utils_map(fabsf(rpm_now), 0,
 80150dc:	eeb0 0ac0 	vabs.f32	s0, s0
 80150e0:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80150e4:	ee27 2a02 	vmul.f32	s4, s14, s4
 80150e8:	eef0 0a48 	vmov.f32	s1, s16
						cycle_sum += conf->m_bldc_f_sw_max / switching_frequency_now;
 80150ec:	edcb 7a00 	vstr	s15, [fp]
						if (cycle_sum >= utils_map(fabsf(rpm_now), 0,
 80150f0:	f000 fd46 	bl	8015b80 <utils_map>
 80150f4:	eddb 7a00 	vldr	s15, [fp]
 80150f8:	9803      	ldr	r0, [sp, #12]
 80150fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80150fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015102:	f240 82ea 	bls.w	80156da <mcpwm_adc_int_handler+0xb5a>
 8015106:	f8d8 2000 	ldr.w	r2, [r8]
 801510a:	e5d5      	b.n	8014cb8 <mcpwm_adc_int_handler+0x138>
 801510c:	200059f0 	.word	0x200059f0
 8015110:	447a0000 	.word	0x447a0000
 8015114:	3a534067 	.word	0x3a534067
 8015118:	4195d174 	.word	0x4195d174
 801511c:	2000543c 	.word	0x2000543c
 8015120:	200059e4 	.word	0x200059e4
 8015124:	3dcccccd 	.word	0x3dcccccd
 8015128:	20004d4c 	.word	0x20004d4c
 801512c:	20004e18 	.word	0x20004e18
 8015130:	20004f3c 	.word	0x20004f3c
 8015134:	20004df0 	.word	0x20004df0
 8015138:	3e99999a 	.word	0x3e99999a
 801513c:	20005364 	.word	0x20005364
 8015140:	2000541c 	.word	0x2000541c
 8015144:	39dff7bb 	.word	0x39dff7bb
 8015148:	20004dfc 	.word	0x20004dfc
 801514c:	20004d44 	.word	0x20004d44
 8015150:	3fb504f3 	.word	0x3fb504f3
 8015154:	00000000 	.word	0x00000000
			const float error = current_set - (direction ? current_nofilter : -current_nofilter);
 8015158:	4ecb      	ldr	r6, [pc, #812]	; (8015488 <mcpwm_adc_int_handler+0x908>)
 801515a:	edd6 7a00 	vldr	s15, [r6]
 801515e:	f8da 2000 	ldr.w	r2, [sl]
 8015162:	2a00      	cmp	r2, #0
 8015164:	f000 816a 	beq.w	801543c <mcpwm_adc_int_handler+0x8bc>
 8015168:	eef0 6a68 	vmov.f32	s13, s17
 801516c:	ee77 7ae6 	vsub.f32	s15, s15, s13
			float step = error * conf->cc_gain * voltage_scale;
 8015170:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 8015174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015178:	a80a      	add	r0, sp, #40	; 0x28
 801517a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801517e:	ed60 7a01 	vstmdb	r0!, {s15}
			const float start_boost = conf->cc_startup_boost_duty * voltage_scale;
 8015182:	ed93 aa4f 	vldr	s20, [r3, #316]	; 0x13c
			utils_truncate_number(&step, -conf->cc_ramp_step_max, conf->cc_ramp_step_max);
 8015186:	ed93 0a52 	vldr	s0, [r3, #328]	; 0x148
 801518a:	edd3 0a52 	vldr	s1, [r3, #328]	; 0x148
 801518e:	eeb1 0a40 	vneg.f32	s0, s0
			const float start_boost = conf->cc_startup_boost_duty * voltage_scale;
 8015192:	ee27 aa0a 	vmul.f32	s20, s14, s20
			utils_truncate_number(&step, -conf->cc_ramp_step_max, conf->cc_ramp_step_max);
 8015196:	f000 fcb3 	bl	8015b00 <utils_truncate_number>
			step /= switching_frequency_now / 1000.0;
 801519a:	ed94 6a00 	vldr	s12, [r4]
 801519e:	eddf 7abb 	vldr	s15, [pc, #748]	; 801548c <mcpwm_adc_int_handler+0x90c>
 80151a2:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
			if (slow_ramping_cycles) {
 80151a6:	682b      	ldr	r3, [r5, #0]
			step /= switching_frequency_now / 1000.0;
 80151a8:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80151ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80151b0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
			if (slow_ramping_cycles) {
 80151b4:	b143      	cbz	r3, 80151c8 <mcpwm_adc_int_handler+0x648>
				step *= 0.1;
 80151b6:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8015490 <mcpwm_adc_int_handler+0x910>
				slow_ramping_cycles--;
 80151ba:	682b      	ldr	r3, [r5, #0]
				step *= 0.1;
 80151bc:	ee67 7a87 	vmul.f32	s15, s15, s14
				slow_ramping_cycles--;
 80151c0:	3b01      	subs	r3, #1
				step *= 0.1;
 80151c2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				slow_ramping_cycles--;
 80151c6:	602b      	str	r3, [r5, #0]
			if (fabsf(dutycycle_now_tmp) < start_boost) {
 80151c8:	eddd 7a08 	vldr	s15, [sp, #32]
 80151cc:	eeb0 7ae7 	vabs.f32	s14, s15
 80151d0:	eeb4 aac7 	vcmpe.f32	s20, s14
 80151d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d8:	f340 823a 	ble.w	8015650 <mcpwm_adc_int_handler+0xad0>
						current_set > 0.0 ?
 80151dc:	edd6 7a00 	vldr	s15, [r6]
				utils_step_towards(&dutycycle_now_tmp,
 80151e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e8:	bfd8      	it	le
 80151ea:	eeb1 aa4a 	vnegle.f32	s20, s20
 80151ee:	ac08      	add	r4, sp, #32
 80151f0:	eef0 0a6a 	vmov.f32	s1, s21
 80151f4:	eeb0 0a4a 	vmov.f32	s0, s20
 80151f8:	4620      	mov	r0, r4
 80151fa:	f000 fc11 	bl	8015a20 <utils_step_towards>
			utils_truncate_number((float*)&dutycycle_now_tmp, -conf->l_max_duty, conf->l_max_duty);
 80151fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015202:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 8015206:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
 801520a:	4620      	mov	r0, r4
 801520c:	eeb1 0a40 	vneg.f32	s0, s0
 8015210:	f000 fc76 	bl	8015b00 <utils_truncate_number>
			if (fabsf(dutycycle_now_tmp) < conf->l_min_duty) {
 8015214:	f8d8 3000 	ldr.w	r3, [r8]
 8015218:	eddd 7a08 	vldr	s15, [sp, #32]
 801521c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8015220:	eef0 6ae7 	vabs.f32	s13, s15
 8015224:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801522c:	f140 81dc 	bpl.w	80155e8 <mcpwm_adc_int_handler+0xa68>
				if (dutycycle_now_tmp < 0.0 && current_set > 0.0) {
 8015230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015238:	f100 81ca 	bmi.w	80155d0 <mcpwm_adc_int_handler+0xa50>
				} else if (dutycycle_now_tmp > 0.0 && current_set < 0.0) {
 801523c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015244:	f340 81d0 	ble.w	80155e8 <mcpwm_adc_int_handler+0xa68>
 8015248:	edd6 7a00 	vldr	s15, [r6]
 801524c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015254:	f100 823a 	bmi.w	80156cc <mcpwm_adc_int_handler+0xb4c>
			dutycycle_set = dutycycle_now_tmp >= 0.0 ? conf->l_min_duty : -conf->l_min_duty;
 8015258:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801525c:	4a8d      	ldr	r2, [pc, #564]	; (8015494 <mcpwm_adc_int_handler+0x914>)
 801525e:	edc2 7a00 	vstr	s15, [r2]
		if (current_nofilter > conf->lo_current_max) {
 8015262:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8015266:	eef4 7ae8 	vcmpe.f32	s15, s17
 801526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801526e:	f100 81f9 	bmi.w	8015664 <mcpwm_adc_int_handler+0xae4>
		} else if (current_nofilter < conf->lo_current_min) {
 8015272:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8015276:	eef4 7ae8 	vcmpe.f32	s15, s17
 801527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527e:	f340 81be 	ble.w	80155fe <mcpwm_adc_int_handler+0xa7e>
			utils_step_towards((float*) &dutycycle_now, direction ? conf->l_max_duty : -conf->l_max_duty,
 8015282:	f8da 2000 	ldr.w	r2, [sl]
 8015286:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 801528a:	b90a      	cbnz	r2, 8015290 <mcpwm_adc_int_handler+0x710>
 801528c:	eeb1 0a40 	vneg.f32	s0, s0
					ramp_step_no_lim * fabsf(current_nofilter - conf->lo_current_min) * conf->m_current_backoff_gain);
 8015290:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8015294:	edd3 0a55 	vldr	s1, [r3, #340]	; 0x154
			utils_step_towards((float*) &dutycycle_now, direction ? conf->l_max_duty : -conf->l_max_duty,
 8015298:	487f      	ldr	r0, [pc, #508]	; (8015498 <mcpwm_adc_int_handler+0x918>)
					ramp_step_no_lim * fabsf(current_nofilter - conf->lo_current_min) * conf->m_current_backoff_gain);
 801529a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801529e:	eef0 7ae7 	vabs.f32	s15, s15
 80152a2:	ee67 7aa9 	vmul.f32	s15, s15, s19
			utils_step_towards((float*) &dutycycle_now, direction ? conf->l_max_duty : -conf->l_max_duty,
 80152a6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80152aa:	f000 fbb9 	bl	8015a20 <utils_step_towards>
 80152ae:	497b      	ldr	r1, [pc, #492]	; (801549c <mcpwm_adc_int_handler+0x91c>)
					dutycycle_now_tmp = SIGN(dutycycle_now_tmp) * conf->l_min_duty;
 80152b0:	2200      	movs	r2, #0
 80152b2:	f8d8 3000 	ldr.w	r3, [r8]
			limit_delay--;
 80152b6:	600a      	str	r2, [r1, #0]
		if (fabsf(dutycycle_now) < conf->l_min_duty) {
 80152b8:	edd7 7a00 	vldr	s15, [r7]
 80152bc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80152c0:	eef0 7ae7 	vabs.f32	s15, s15
 80152c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152cc:	d50c      	bpl.n	80152e8 <mcpwm_adc_int_handler+0x768>
			if (dutycycle_set >= conf->l_min_duty) {
 80152ce:	4a71      	ldr	r2, [pc, #452]	; (8015494 <mcpwm_adc_int_handler+0x914>)
 80152d0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80152d4:	edd2 7a00 	vldr	s15, [r2]
 80152d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e0:	f200 81c7 	bhi.w	8015672 <mcpwm_adc_int_handler+0xaf2>
				dutycycle_now = conf->l_min_duty;
 80152e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80152e6:	603a      	str	r2, [r7, #0]
		if (dutycycle_now >= conf->l_min_duty && rpm < -conf->l_max_erpm_fbrake) {
 80152e8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80152ec:	edd7 7a00 	vldr	s15, [r7]
 80152f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f8:	f200 8154 	bhi.w	80155a4 <mcpwm_adc_int_handler+0xa24>
 80152fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8015300:	eef1 7a67 	vneg.f32	s15, s15
 8015304:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530c:	f340 814a 	ble.w	80155a4 <mcpwm_adc_int_handler+0xa24>
			dutycycle_now = -conf->l_min_duty;
 8015310:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015314:	eef1 7a67 	vneg.f32	s15, s15
 8015318:	edc7 7a00 	vstr	s15, [r7]
		set_duty_cycle_ll(dutycycle_now);
 801531c:	ed97 0a00 	vldr	s0, [r7]
 8015320:	f7ff f876 	bl	8014410 <set_duty_cycle_ll>
 8015324:	e4f8      	b.n	8014d18 <mcpwm_adc_int_handler+0x198>
		run_pid_control_pos(1.0 / switching_frequency_now);
 8015326:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801532a:	eec9 8a27 	vdiv.f32	s17, s18, s15
	float error = utils_angle_difference(encoder_read_deg(), pos_pid_set_pos);
 801532e:	f005 fcdf 	bl	801acf0 <encoder_read_deg>
 8015332:	4b5b      	ldr	r3, [pc, #364]	; (80154a0 <mcpwm_adc_int_handler+0x920>)
	i_term += error * (conf->p_pid_ki * dt);
 8015334:	4c5b      	ldr	r4, [pc, #364]	; (80154a4 <mcpwm_adc_int_handler+0x924>)
	d_term = (error - prev_error) * (conf->p_pid_kd / dt);
 8015336:	4d5c      	ldr	r5, [pc, #368]	; (80154a8 <mcpwm_adc_int_handler+0x928>)
	float error = utils_angle_difference(encoder_read_deg(), pos_pid_set_pos);
 8015338:	edd3 0a00 	vldr	s1, [r3]
 801533c:	f000 fc58 	bl	8015bf0 <utils_angle_difference>
	p_term = error * conf->p_pid_kp;
 8015340:	f8d8 3000 	ldr.w	r3, [r8]
	i_term += error * (conf->p_pid_ki * dt);
 8015344:	ed94 7a00 	vldr	s14, [r4]
	p_term = error * conf->p_pid_kp;
 8015348:	ed93 aa4b 	vldr	s20, [r3, #300]	; 0x12c
	i_term += error * (conf->p_pid_ki * dt);
 801534c:	edd3 6a4c 	vldr	s13, [r3, #304]	; 0x130
	d_term = (error - prev_error) * (conf->p_pid_kd / dt);
 8015350:	ed93 6a4d 	vldr	s12, [r3, #308]	; 0x134
 8015354:	edd5 7a00 	vldr	s15, [r5]
 8015358:	eec6 9a28 	vdiv.f32	s19, s12, s17
	utils_truncate_number(&i_term, -1.0, 1.0);
 801535c:	4620      	mov	r0, r4
	i_term += error * (conf->p_pid_ki * dt);
 801535e:	ee68 8aa6 	vmul.f32	s17, s17, s13
	float error = utils_angle_difference(encoder_read_deg(), pos_pid_set_pos);
 8015362:	eeb0 8a40 	vmov.f32	s16, s0
	i_term += error * (conf->p_pid_ki * dt);
 8015366:	eea0 7a28 	vfma.f32	s14, s0, s17
	utils_truncate_number(&i_term, -1.0, 1.0);
 801536a:	eef0 0a49 	vmov.f32	s1, s18
 801536e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	i_term += error * (conf->p_pid_ki * dt);
 8015372:	ed84 7a00 	vstr	s14, [r4]
	d_term = (error - prev_error) * (conf->p_pid_kd / dt);
 8015376:	ee78 8a67 	vsub.f32	s17, s16, s15
	utils_truncate_number(&i_term, -1.0, 1.0);
 801537a:	f000 fbc1 	bl	8015b00 <utils_truncate_number>
	float output = p_term + i_term + d_term;
 801537e:	edd4 7a00 	vldr	s15, [r4]
	prev_error = error;
 8015382:	ed85 8a00 	vstr	s16, [r5]
	float output = p_term + i_term + d_term;
 8015386:	eee8 7a0a 	vfma.f32	s15, s16, s20
 801538a:	a80a      	add	r0, sp, #40	; 0x28
	utils_truncate_number(&output, -1.0, 1.0);
 801538c:	eef0 0a49 	vmov.f32	s1, s18
	float output = p_term + i_term + d_term;
 8015390:	eee8 7aa9 	vfma.f32	s15, s17, s19
	utils_truncate_number(&output, -1.0, 1.0);
 8015394:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	float output = p_term + i_term + d_term;
 8015398:	ed60 7a01 	vstmdb	r0!, {s15}
	utils_truncate_number(&output, -1.0, 1.0);
 801539c:	f000 fbb0 	bl	8015b00 <utils_truncate_number>
	current_set = output * conf->lo_current_max;
 80153a0:	f8d8 3000 	ldr.w	r3, [r8]
 80153a4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80153a8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80153ac:	4b36      	ldr	r3, [pc, #216]	; (8015488 <mcpwm_adc_int_handler+0x908>)
 80153ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153b2:	edc3 7a00 	vstr	s15, [r3]
 80153b6:	e4b5      	b.n	8014d24 <mcpwm_adc_int_handler+0x1a4>
 80153b8:	f10b 0309 	add.w	r3, fp, #9
 80153bc:	9303      	str	r3, [sp, #12]
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80153be:	4b3b      	ldr	r3, [pc, #236]	; (80154ac <mcpwm_adc_int_handler+0x92c>)
 80153c0:	493b      	ldr	r1, [pc, #236]	; (80154b0 <mcpwm_adc_int_handler+0x930>)
 80153c2:	6918      	ldr	r0, [r3, #16]
 80153c4:	691b      	ldr	r3, [r3, #16]
 80153c6:	6909      	ldr	r1, [r1, #16]
					hall_detect_table[read_hall()][comm_step]++;
 80153c8:	f8de c000 	ldr.w	ip, [lr]
 80153cc:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 80154c0 <mcpwm_adc_int_handler+0x940>
	return READ_HALL1() | (READ_HALL2() << 1) | (READ_HALL3() << 2);
 80153d0:	099b      	lsrs	r3, r3, #6
 80153d2:	0a49      	lsrs	r1, r1, #9
 80153d4:	f003 0302 	and.w	r3, r3, #2
 80153d8:	f001 0104 	and.w	r1, r1, #4
 80153dc:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80153e0:	430b      	orrs	r3, r1
 80153e2:	4303      	orrs	r3, r0
					hall_detect_table[read_hall()][comm_step]++;
 80153e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80153e8:	449c      	add	ip, r3
 80153ea:	f85e 302c 	ldr.w	r3, [lr, ip, lsl #2]
 80153ee:	3301      	adds	r3, #1
 80153f0:	f84e 302c 	str.w	r3, [lr, ip, lsl #2]
				if (abs(v_diff) < 10) {
 80153f4:	9b03      	ldr	r3, [sp, #12]
 80153f6:	2b12      	cmp	r3, #18
 80153f8:	f200 81a1 	bhi.w	801573e <mcpwm_adc_int_handler+0xbbe>
 80153fc:	4c2d      	ldr	r4, [pc, #180]	; (80154b4 <mcpwm_adc_int_handler+0x934>)
					v_diff = 0;
 80153fe:	f04f 0b00 	mov.w	fp, #0
 8015402:	e5df      	b.n	8014fc4 <mcpwm_adc_int_handler+0x444>
			} else if (state == MC_STATE_RUNNING && !has_commutated) {
 8015404:	782b      	ldrb	r3, [r5, #0]
 8015406:	2b02      	cmp	r3, #2
 8015408:	f47f ac7d 	bne.w	8014d06 <mcpwm_adc_int_handler+0x186>
 801540c:	f8d6 9000 	ldr.w	r9, [r6]
 8015410:	f1b9 0f00 	cmp.w	r9, #0
 8015414:	f47f ac77 	bne.w	8014d06 <mcpwm_adc_int_handler+0x186>
				set_next_comm_step(comm_step);
 8015418:	6820      	ldr	r0, [r4, #0]
 801541a:	f7fd fab1 	bl	8012980 <set_next_comm_step>
				commutate(0);
 801541e:	4648      	mov	r0, r9
 8015420:	f7fd fd66 	bl	8012ef0 <commutate>
 8015424:	e46f      	b.n	8014d06 <mcpwm_adc_int_handler+0x186>
		float ramp_step = conf->m_duty_ramp_step / (switching_frequency_now / 1000.0);
 8015426:	eef0 aa69 	vmov.f32	s21, s19
 801542a:	e548      	b.n	8014ebe <mcpwm_adc_int_handler+0x33e>
						limit = rpm_dep.cycle_int_limit * (0.0005 * VDIV_CORR);
 801542c:	4b22      	ldr	r3, [pc, #136]	; (80154b8 <mcpwm_adc_int_handler+0x938>)
 801542e:	eddf 7a23 	vldr	s15, [pc, #140]	; 80154bc <mcpwm_adc_int_handler+0x93c>
 8015432:	ed93 7a00 	vldr	s14, [r3]
 8015436:	ee27 7a27 	vmul.f32	s14, s14, s15
 801543a:	e5d1      	b.n	8014fe0 <mcpwm_adc_int_handler+0x460>
			const float error = current_set - (direction ? current_nofilter : -current_nofilter);
 801543c:	eef1 6a68 	vneg.f32	s13, s17
 8015440:	e694      	b.n	801516c <mcpwm_adc_int_handler+0x5ec>
							!has_commutated || (ph_now_raw > min && ph_now_raw < (ADC_Value[ADC_IND_VIN_SENS] - min))) {
 8015442:	9905      	ldr	r1, [sp, #20]
 8015444:	428b      	cmp	r3, r1
 8015446:	da06      	bge.n	8015456 <mcpwm_adc_int_handler+0x8d6>
 8015448:	8a21      	ldrh	r1, [r4, #16]
 801544a:	b289      	uxth	r1, r1
 801544c:	1acb      	subs	r3, r1, r3
 801544e:	9905      	ldr	r1, [sp, #20]
 8015450:	428b      	cmp	r3, r1
 8015452:	f73f ada7 	bgt.w	8014fa4 <mcpwm_adc_int_handler+0x424>
 8015456:	4c17      	ldr	r4, [pc, #92]	; (80154b4 <mcpwm_adc_int_handler+0x934>)
 8015458:	e5b4      	b.n	8014fc4 <mcpwm_adc_int_handler+0x444>
					ph_now_raw = ph1_raw;
 801545a:	9b06      	ldr	r3, [sp, #24]
 801545c:	9305      	str	r3, [sp, #20]
					v_diff = ph1;
 801545e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015462:	e568      	b.n	8014f36 <mcpwm_adc_int_handler+0x3b6>
					v_diff = -ph1;
 8015464:	9b03      	ldr	r3, [sp, #12]
 8015466:	f1c3 0b00 	rsb	fp, r3, #0
					ph_now_raw = ph1_raw;
 801546a:	9b06      	ldr	r3, [sp, #24]
 801546c:	9305      	str	r3, [sp, #20]
					break;
 801546e:	e562      	b.n	8014f36 <mcpwm_adc_int_handler+0x3b6>
					ph_now_raw = ph2_raw;
 8015470:	9b07      	ldr	r3, [sp, #28]
 8015472:	9305      	str	r3, [sp, #20]
					v_diff = ph2;
 8015474:	f8dd b010 	ldr.w	fp, [sp, #16]
					break;
 8015478:	e55d      	b.n	8014f36 <mcpwm_adc_int_handler+0x3b6>
					v_diff = -ph2;
 801547a:	9b04      	ldr	r3, [sp, #16]
 801547c:	f1c3 0b00 	rsb	fp, r3, #0
					ph_now_raw = ph2_raw;
 8015480:	9b07      	ldr	r3, [sp, #28]
 8015482:	9305      	str	r3, [sp, #20]
					break;
 8015484:	e557      	b.n	8014f36 <mcpwm_adc_int_handler+0x3b6>
 8015486:	bf00      	nop
 8015488:	20004dec 	.word	0x20004dec
 801548c:	447a0000 	.word	0x447a0000
 8015490:	3dcccccd 	.word	0x3dcccccd
 8015494:	20004e18 	.word	0x20004e18
 8015498:	20004e14 	.word	0x20004e14
 801549c:	20005384 	.word	0x20005384
 80154a0:	20005404 	.word	0x20005404
 80154a4:	20004f44 	.word	0x20004f44
 80154a8:	2000540c 	.word	0x2000540c
 80154ac:	40020400 	.word	0x40020400
 80154b0:	40020800 	.word	0x40020800
 80154b4:	200059f0 	.word	0x200059f0
 80154b8:	2000541c 	.word	0x2000541c
 80154bc:	39dff7bb 	.word	0x39dff7bb
 80154c0:	20004e1c 	.word	0x20004e1c
			const float error = -fabsf(current_set) - current_nofilter;
 80154c4:	4aa4      	ldr	r2, [pc, #656]	; (8015758 <mcpwm_adc_int_handler+0xbd8>)
 80154c6:	edd2 7a00 	vldr	s15, [r2]
			float step = error * conf->cc_gain * voltage_scale;
 80154ca:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
			const float error = -fabsf(current_set) - current_nofilter;
 80154ce:	eef0 7ae7 	vabs.f32	s15, s15
 80154d2:	eef1 7a67 	vneg.f32	s15, s15
 80154d6:	ee77 7ae8 	vsub.f32	s15, s15, s17
			float step = error * conf->cc_gain * voltage_scale;
 80154da:	a80a      	add	r0, sp, #40	; 0x28
 80154dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80154e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80154e4:	ed20 7a01 	vstmdb	r0!, {s14}
			utils_truncate_number(&step, -conf->cc_ramp_step_max, conf->cc_ramp_step_max);
 80154e8:	ed93 0a52 	vldr	s0, [r3, #328]	; 0x148
 80154ec:	edd3 0a52 	vldr	s1, [r3, #328]	; 0x148
 80154f0:	eeb1 0a40 	vneg.f32	s0, s0
 80154f4:	f000 fb04 	bl	8015b00 <utils_truncate_number>
			step /= switching_frequency_now / 1000.0;
 80154f8:	ed94 6a00 	vldr	s12, [r4]
 80154fc:	ed9f 7a97 	vldr	s14, [pc, #604]	; 801575c <mcpwm_adc_int_handler+0xbdc>
 8015500:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
			if (slow_ramping_cycles) {
 8015504:	682b      	ldr	r3, [r5, #0]
			step /= switching_frequency_now / 1000.0;
 8015506:	eec6 7a07 	vdiv.f32	s15, s12, s14
 801550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801550e:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
			if (slow_ramping_cycles) {
 8015512:	b143      	cbz	r3, 8015526 <mcpwm_adc_int_handler+0x9a6>
				step *= 0.1;
 8015514:	eddf 7a92 	vldr	s15, [pc, #584]	; 8015760 <mcpwm_adc_int_handler+0xbe0>
				slow_ramping_cycles--;
 8015518:	682b      	ldr	r3, [r5, #0]
				step *= 0.1;
 801551a:	ee27 7a27 	vmul.f32	s14, s14, s15
				slow_ramping_cycles--;
 801551e:	3b01      	subs	r3, #1
				step *= 0.1;
 8015520:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
				slow_ramping_cycles--;
 8015524:	602b      	str	r3, [r5, #0]
			dutycycle_now_tmp += SIGN(dutycycle_now_tmp) * step;
 8015526:	eddd 7a08 	vldr	s15, [sp, #32]
			utils_truncate_number((float*)&dutycycle_now_tmp, -conf->l_max_duty, conf->l_max_duty);
 801552a:	f8d8 3000 	ldr.w	r3, [r8]
			dutycycle_now_tmp += SIGN(dutycycle_now_tmp) * step;
 801552e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015536:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
 801553a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801553e:	bf54      	ite	pl
 8015540:	eef0 6a6a 	vmovpl.f32	s13, s21
 8015544:	eef0 6a4a 	vmovmi.f32	s13, s20
 8015548:	eee6 7a87 	vfma.f32	s15, s13, s14
 801554c:	a80a      	add	r0, sp, #40	; 0x28
			utils_truncate_number((float*)&dutycycle_now_tmp, -conf->l_max_duty, conf->l_max_duty);
 801554e:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 8015552:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
			dutycycle_now_tmp += SIGN(dutycycle_now_tmp) * step;
 8015556:	ee17 2a90 	vmov	r2, s15
			utils_truncate_number((float*)&dutycycle_now_tmp, -conf->l_max_duty, conf->l_max_duty);
 801555a:	eeb1 0a40 	vneg.f32	s0, s0
			dutycycle_now_tmp += SIGN(dutycycle_now_tmp) * step;
 801555e:	f840 2d08 	str.w	r2, [r0, #-8]!
			utils_truncate_number((float*)&dutycycle_now_tmp, -conf->l_max_duty, conf->l_max_duty);
 8015562:	f000 facd 	bl	8015b00 <utils_truncate_number>
			if (fabsf(dutycycle_now_tmp) < conf->l_min_duty) {
 8015566:	f8d8 3000 	ldr.w	r3, [r8]
 801556a:	eddd 7a08 	vldr	s15, [sp, #32]
 801556e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8015572:	eef0 6ae7 	vabs.f32	s13, s15
 8015576:	eef4 6ac7 	vcmpe.f32	s13, s14
 801557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801557e:	f57f ae70 	bpl.w	8015262 <mcpwm_adc_int_handler+0x6e2>
				if (fabsf(rpm_now) < conf->l_max_erpm_fbrake_cc) {
 8015582:	ed96 7a00 	vldr	s14, [r6]
 8015586:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 801558a:	eeb0 7ac7 	vabs.f32	s14, s14
 801558e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015596:	f140 80bf 	bpl.w	8015718 <mcpwm_adc_int_handler+0xb98>
					dutycycle_set = dutycycle_now_tmp;
 801559a:	4972      	ldr	r1, [pc, #456]	; (8015764 <mcpwm_adc_int_handler+0xbe4>)
					dutycycle_now_tmp = 0.0;
 801559c:	2200      	movs	r2, #0
 801559e:	9208      	str	r2, [sp, #32]
					dutycycle_set = dutycycle_now_tmp;
 80155a0:	600a      	str	r2, [r1, #0]
 80155a2:	e65e      	b.n	8015262 <mcpwm_adc_int_handler+0x6e2>
		} else if (dutycycle_now <= -conf->l_min_duty && rpm > conf->l_max_erpm_fbrake) {
 80155a4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80155a8:	ed97 7a00 	vldr	s14, [r7]
 80155ac:	eef1 7a67 	vneg.f32	s15, s15
 80155b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80155b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b8:	f6ff aeb0 	blt.w	801531c <mcpwm_adc_int_handler+0x79c>
 80155bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80155c0:	eef4 7ac9 	vcmpe.f32	s15, s18
 80155c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			dutycycle_now = conf->l_min_duty;
 80155c8:	bf44      	itt	mi
 80155ca:	6d5b      	ldrmi	r3, [r3, #84]	; 0x54
 80155cc:	603b      	strmi	r3, [r7, #0]
 80155ce:	e6a5      	b.n	801531c <mcpwm_adc_int_handler+0x79c>
				if (dutycycle_now_tmp < 0.0 && current_set > 0.0) {
 80155d0:	ed96 7a00 	vldr	s14, [r6]
 80155d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80155d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155dc:	f77f ae2e 	ble.w	801523c <mcpwm_adc_int_handler+0x6bc>
					dutycycle_now_tmp = conf->l_min_duty;
 80155e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80155e4:	edcd 7a08 	vstr	s15, [sp, #32]
			dutycycle_set = dutycycle_now_tmp >= 0.0 ? conf->l_min_duty : -conf->l_min_duty;
 80155e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80155ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f0:	f6bf ae32 	bge.w	8015258 <mcpwm_adc_int_handler+0x6d8>
 80155f4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80155f8:	eef1 7a67 	vneg.f32	s15, s15
 80155fc:	e62e      	b.n	801525c <mcpwm_adc_int_handler+0x6dc>
	const float current_in_nofilter = current_nofilter * fabsf(dutycycle_now);
 80155fe:	eeb0 8ac8 	vabs.f32	s16, s16
 8015602:	ee28 8a28 	vmul.f32	s16, s16, s17
		} else if (current_in_nofilter > conf->lo_in_current_max) {
 8015606:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 801560a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015612:	dc4d      	bgt.n	80156b0 <mcpwm_adc_int_handler+0xb30>
		} else if (current_in_nofilter < conf->lo_in_current_min) {
 8015614:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8015618:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015620:	d53f      	bpl.n	80156a2 <mcpwm_adc_int_handler+0xb22>
			utils_step_towards((float*) &dutycycle_now, direction ? conf->l_max_duty : -conf->l_max_duty,
 8015622:	f8da 2000 	ldr.w	r2, [sl]
 8015626:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 801562a:	b90a      	cbnz	r2, 8015630 <mcpwm_adc_int_handler+0xab0>
 801562c:	eeb1 0a40 	vneg.f32	s0, s0
					ramp_step_no_lim * fabsf(current_in_nofilter - conf->lo_in_current_min) * conf->m_current_backoff_gain);
 8015630:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8015634:	edd3 0a55 	vldr	s1, [r3, #340]	; 0x154
			utils_step_towards((float*) &dutycycle_now, direction ? conf->l_max_duty : -conf->l_max_duty,
 8015638:	484b      	ldr	r0, [pc, #300]	; (8015768 <mcpwm_adc_int_handler+0xbe8>)
					ramp_step_no_lim * fabsf(current_in_nofilter - conf->lo_in_current_min) * conf->m_current_backoff_gain);
 801563a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801563e:	eef0 7ae7 	vabs.f32	s15, s15
 8015642:	ee67 7aa9 	vmul.f32	s15, s15, s19
			utils_step_towards((float*) &dutycycle_now, direction ? conf->l_max_duty : -conf->l_max_duty,
 8015646:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801564a:	f000 f9e9 	bl	8015a20 <utils_step_towards>
 801564e:	e62e      	b.n	80152ae <mcpwm_adc_int_handler+0x72e>
				dutycycle_now_tmp += step;
 8015650:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8015654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015658:	ac0a      	add	r4, sp, #40	; 0x28
 801565a:	ee17 3a90 	vmov	r3, s15
 801565e:	f844 3d08 	str.w	r3, [r4, #-8]!
 8015662:	e5cc      	b.n	80151fe <mcpwm_adc_int_handler+0x67e>
					ramp_step_no_lim * fabsf(current_nofilter - conf->lo_current_max) * conf->m_current_backoff_gain);
 8015664:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
			utils_step_towards((float*) &dutycycle_now, 0.0,
 8015668:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801576c <mcpwm_adc_int_handler+0xbec>
					ramp_step_no_lim * fabsf(current_nofilter - conf->lo_current_max) * conf->m_current_backoff_gain);
 801566c:	edd3 0a55 	vldr	s1, [r3, #340]	; 0x154
 8015670:	e612      	b.n	8015298 <mcpwm_adc_int_handler+0x718>
			} else if (dutycycle_set <= -conf->l_min_duty) {
 8015672:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015676:	ed92 7a00 	vldr	s14, [r2]
 801567a:	eef1 7a67 	vneg.f32	s15, s15
 801567e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015686:	f6ff ae2f 	blt.w	80152e8 <mcpwm_adc_int_handler+0x768>
				dutycycle_now = -conf->l_min_duty;
 801568a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801568e:	eef1 7a67 	vneg.f32	s15, s15
 8015692:	edc7 7a00 	vstr	s15, [r7]
 8015696:	e627      	b.n	80152e8 <mcpwm_adc_int_handler+0x768>
						commutate(1);
 8015698:	f7fd fc2a 	bl	8012ef0 <commutate>
 801569c:	f8d8 2000 	ldr.w	r2, [r8]
 80156a0:	e443      	b.n	8014f2a <mcpwm_adc_int_handler+0x3aa>
		if (limit_delay > 0) {
 80156a2:	4933      	ldr	r1, [pc, #204]	; (8015770 <mcpwm_adc_int_handler+0xbf0>)
 80156a4:	680a      	ldr	r2, [r1, #0]
 80156a6:	2a00      	cmp	r2, #0
 80156a8:	dc54      	bgt.n	8015754 <mcpwm_adc_int_handler+0xbd4>
			dutycycle_now = dutycycle_now_tmp;
 80156aa:	9a08      	ldr	r2, [sp, #32]
 80156ac:	603a      	str	r2, [r7, #0]
 80156ae:	e603      	b.n	80152b8 <mcpwm_adc_int_handler+0x738>
					ramp_step_no_lim * fabsf(current_in_nofilter - conf->lo_in_current_max) * conf->m_current_backoff_gain);
 80156b0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
			utils_step_towards((float*) &dutycycle_now, 0.0,
 80156b4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801576c <mcpwm_adc_int_handler+0xbec>
					ramp_step_no_lim * fabsf(current_in_nofilter - conf->lo_in_current_max) * conf->m_current_backoff_gain);
 80156b8:	edd3 0a55 	vldr	s1, [r3, #340]	; 0x154
 80156bc:	e7bc      	b.n	8015638 <mcpwm_adc_int_handler+0xab8>
						cycle_integrator = 0.0;
 80156be:	482d      	ldr	r0, [pc, #180]	; (8015774 <mcpwm_adc_int_handler+0xbf4>)
						cycle_sum = 0.0;
 80156c0:	492d      	ldr	r1, [pc, #180]	; (8015778 <mcpwm_adc_int_handler+0xbf8>)
						cycle_integrator = 0.0;
 80156c2:	2300      	movs	r3, #0
 80156c4:	6003      	str	r3, [r0, #0]
						cycle_sum = 0.0;
 80156c6:	600b      	str	r3, [r1, #0]
 80156c8:	f7ff baf6 	b.w	8014cb8 <mcpwm_adc_int_handler+0x138>
					dutycycle_now_tmp = -conf->l_min_duty;
 80156cc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80156d0:	eef1 7a67 	vneg.f32	s15, s15
 80156d4:	edcd 7a08 	vstr	s15, [sp, #32]
 80156d8:	e786      	b.n	80155e8 <mcpwm_adc_int_handler+0xa68>
							commutate(1);
 80156da:	f7fd fc09 	bl	8012ef0 <commutate>
							cycle_integrator_sum += cycle_integrator * (1.0 / (0.0005 * VDIV_CORR));
 80156de:	4a25      	ldr	r2, [pc, #148]	; (8015774 <mcpwm_adc_int_handler+0xbf4>)
 80156e0:	4926      	ldr	r1, [pc, #152]	; (801577c <mcpwm_adc_int_handler+0xbfc>)
 80156e2:	edd2 6a00 	vldr	s13, [r2]
 80156e6:	edd1 7a00 	vldr	s15, [r1]
 80156ea:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8015780 <mcpwm_adc_int_handler+0xc00>
							cycle_integrator_iterations += 1.0;
 80156ee:	4b25      	ldr	r3, [pc, #148]	; (8015784 <mcpwm_adc_int_handler+0xc04>)
							cycle_integrator = 0.0;
 80156f0:	ed82 8a00 	vstr	s16, [r2]
							cycle_integrator_sum += cycle_integrator * (1.0 / (0.0005 * VDIV_CORR));
 80156f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80156f8:	f8d8 2000 	ldr.w	r2, [r8]
							cycle_integrator_iterations += 1.0;
 80156fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
							cycle_integrator_sum += cycle_integrator * (1.0 / (0.0005 * VDIV_CORR));
 8015700:	edc1 7a00 	vstr	s15, [r1]
							cycle_integrator_iterations += 1.0;
 8015704:	edd3 7a00 	vldr	s15, [r3]
							cycle_sum = 0.0;
 8015708:	ed8b 8a00 	vstr	s16, [fp]
							cycle_integrator_iterations += 1.0;
 801570c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015710:	edc3 7a00 	vstr	s15, [r3]
 8015714:	f7ff bad0 	b.w	8014cb8 <mcpwm_adc_int_handler+0x138>
					dutycycle_now_tmp = SIGN(dutycycle_now_tmp) * conf->l_min_duty;
 8015718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801571c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
					dutycycle_set = dutycycle_now_tmp;
 8015720:	4a10      	ldr	r2, [pc, #64]	; (8015764 <mcpwm_adc_int_handler+0xbe4>)
					dutycycle_now_tmp = SIGN(dutycycle_now_tmp) * conf->l_min_duty;
 8015722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015726:	bf54      	ite	pl
 8015728:	eef0 7a6a 	vmovpl.f32	s15, s21
 801572c:	eef0 7a4a 	vmovmi.f32	s15, s20
 8015730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015734:	edcd 7a08 	vstr	s15, [sp, #32]
					dutycycle_set = dutycycle_now_tmp;
 8015738:	edc2 7a00 	vstr	s15, [r2]
 801573c:	e591      	b.n	8015262 <mcpwm_adc_int_handler+0x6e2>
				if (v_diff > 0) {
 801573e:	f1bb 0f00 	cmp.w	fp, #0
 8015742:	f73f abfc 	bgt.w	8014f3e <mcpwm_adc_int_handler+0x3be>
 8015746:	e686      	b.n	8015456 <mcpwm_adc_int_handler+0x8d6>
				int ph_now_raw = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	9305      	str	r3, [sp, #20]
				int v_diff = 0;
 801574c:	469b      	mov	fp, r3
				switch (comm_step) {
 801574e:	2309      	movs	r3, #9
 8015750:	9303      	str	r3, [sp, #12]
 8015752:	e634      	b.n	80153be <mcpwm_adc_int_handler+0x83e>
 8015754:	3a01      	subs	r2, #1
 8015756:	e5ac      	b.n	80152b2 <mcpwm_adc_int_handler+0x732>
 8015758:	20004dec 	.word	0x20004dec
 801575c:	447a0000 	.word	0x447a0000
 8015760:	3dcccccd 	.word	0x3dcccccd
 8015764:	20004e18 	.word	0x20004e18
 8015768:	20004e14 	.word	0x20004e14
 801576c:	00000000 	.word	0x00000000
 8015770:	20005384 	.word	0x20005384
 8015774:	20004df0 	.word	0x20004df0
 8015778:	20004dfc 	.word	0x20004dfc
 801577c:	20004df8 	.word	0x20004df8
 8015780:	45124e8b 	.word	0x45124e8b
 8015784:	20004df4 	.word	0x20004df4
	...

08015790 <icuperiodcb>:
			done_func();
		}
	}
}

static void icuperiodcb(ICUDriver *icup) {
 8015790:	4770      	bx	lr
 8015792:	bf00      	nop
	...

080157a0 <icuwidthcb>:
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 80157a0:	6903      	ldr	r3, [r0, #16]
 80157a2:	eddf 6a41 	vldr	s13, [pc, #260]	; 80158a8 <icuwidthcb+0x108>
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4940      	ldr	r1, [pc, #256]	; (80158ac <icuwidthcb+0x10c>)
	float len = last_len_received[0] - pulse_start;
 80157aa:	4a41      	ldr	r2, [pc, #260]	; (80158b0 <icuwidthcb+0x110>)
	const float len_set = (pulse_end - pulse_start);
 80157ac:	4841      	ldr	r0, [pc, #260]	; (80158b4 <icuwidthcb+0x114>)
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 80157ae:	3301      	adds	r3, #1
 80157b0:	ee07 3a90 	vmov	s15, r3
 80157b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80157b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80157bc:	ed81 7a00 	vstr	s14, [r1]
	float len = last_len_received[0] - pulse_start;
 80157c0:	edd1 7a00 	vldr	s15, [r1]
 80157c4:	ed92 6a00 	vldr	s12, [r2]
	const float len_set = (pulse_end - pulse_start);
 80157c8:	ed90 7a00 	vldr	s14, [r0]
 80157cc:	edd2 6a00 	vldr	s13, [r2]
	float len = last_len_received[0] - pulse_start;
 80157d0:	ee77 7ac6 	vsub.f32	s15, s15, s12
	const float len_set = (pulse_end - pulse_start);
 80157d4:	ee37 7a66 	vsub.f32	s14, s14, s13
	if (len > len_set) {
 80157d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80157dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157e0:	dd30      	ble.n	8015844 <icuwidthcb+0xa4>
		if (len < (len_set * 1.2)) {
 80157e2:	eddf 6a35 	vldr	s13, [pc, #212]	; 80158b8 <icuwidthcb+0x118>
 80157e6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80157ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 80157ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f2:	d53c      	bpl.n	801586e <icuwidthcb+0xce>
			len = len_set;
 80157f4:	eef0 7a47 	vmov.f32	s15, s14
	if (len >= 0.0) {
 80157f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80157fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015800:	db50      	blt.n	80158a4 <icuwidthcb+0x104>
 8015802:	ee77 7aa7 	vadd.f32	s15, s15, s15
static void icuwidthcb(ICUDriver *icup) {
 8015806:	b570      	push	{r4, r5, r6, lr}
		if (use_median_filter) {
 8015808:	4b2c      	ldr	r3, [pc, #176]	; (80158bc <icuwidthcb+0x11c>)
 801580a:	781b      	ldrb	r3, [r3, #0]
static void icuwidthcb(ICUDriver *icup) {
 801580c:	ed2d 8b02 	vpush	{d8}
			float c = (len * 2.0 - len_set) / len_set;
 8015810:	ee77 7ac7 	vsub.f32	s15, s15, s14
		if (use_median_filter) {
 8015814:	bb7b      	cbnz	r3, 8015876 <icuwidthcb+0xd6>
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
 8015816:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801581a:	4b29      	ldr	r3, [pc, #164]	; (80158c0 <icuwidthcb+0x120>)
 801581c:	edc3 6a00 	vstr	s13, [r3]
 8015820:	2320      	movs	r3, #32
 8015822:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.vt_systime;
 8015826:	4a27      	ldr	r2, [pc, #156]	; (80158c4 <icuwidthcb+0x124>)
 8015828:	2300      	movs	r3, #0
 801582a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801582c:	f383 8811 	msr	BASEPRI, r3
		if (done_func) {
 8015830:	4b25      	ldr	r3, [pc, #148]	; (80158c8 <icuwidthcb+0x128>)
		last_update_time = chVTGetSystemTime();
 8015832:	4a26      	ldr	r2, [pc, #152]	; (80158cc <icuwidthcb+0x12c>)
		if (done_func) {
 8015834:	681b      	ldr	r3, [r3, #0]
		last_update_time = chVTGetSystemTime();
 8015836:	6011      	str	r1, [r2, #0]
		if (done_func) {
 8015838:	b1d3      	cbz	r3, 8015870 <icuwidthcb+0xd0>
}
 801583a:	ecbd 8b02 	vpop	{d8}
 801583e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			done_func();
 8015842:	4718      	bx	r3
	} else if (len < 0.0) {
 8015844:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801584c:	d5d4      	bpl.n	80157f8 <icuwidthcb+0x58>
		if ((len + pulse_start) > (pulse_start * 0.8)) {
 801584e:	edd2 5a00 	vldr	s11, [r2]
 8015852:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80158d0 <icuwidthcb+0x130>
 8015856:	edd2 6a00 	vldr	s13, [r2]
 801585a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801585e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015862:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801586a:	dc18      	bgt.n	801589e <icuwidthcb+0xfe>
 801586c:	4770      	bx	lr
 801586e:	4770      	bx	lr
}
 8015870:	ecbd 8b02 	vpop	{d8}
 8015874:	bd70      	pop	{r4, r5, r6, pc}
			float c = (len * 2.0 - len_set) / len_set;
 8015876:	ee87 8a87 	vdiv.f32	s16, s15, s14
			float med = utils_middle_of_3(c, c1, c2);
 801587a:	4c16      	ldr	r4, [pc, #88]	; (80158d4 <icuwidthcb+0x134>)
 801587c:	4d16      	ldr	r5, [pc, #88]	; (80158d8 <icuwidthcb+0x138>)
 801587e:	edd4 0a00 	vldr	s1, [r4]
 8015882:	ed95 1a00 	vldr	s2, [r5]
 8015886:	eeb0 0a48 	vmov.f32	s0, s16
 801588a:	f000 fa11 	bl	8015cb0 <utils_middle_of_3>
			servo_pos[0] = med;
 801588e:	4b0c      	ldr	r3, [pc, #48]	; (80158c0 <icuwidthcb+0x120>)
			c2 = c1;
 8015890:	6822      	ldr	r2, [r4, #0]
 8015892:	602a      	str	r2, [r5, #0]
			c1 = c;
 8015894:	ed84 8a00 	vstr	s16, [r4]
			servo_pos[0] = med;
 8015898:	ed83 0a00 	vstr	s0, [r3]
 801589c:	e7c0      	b.n	8015820 <icuwidthcb+0x80>
 801589e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80158dc <icuwidthcb+0x13c>
 80158a2:	e7b0      	b.n	8015806 <icuwidthcb+0x66>
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop
 80158a8:	447a0000 	.word	0x447a0000
 80158ac:	200063c0 	.word	0x200063c0
 80158b0:	20001038 	.word	0x20001038
 80158b4:	20001034 	.word	0x20001034
 80158b8:	3f99999a 	.word	0x3f99999a
 80158bc:	200063cc 	.word	0x200063cc
 80158c0:	200063c8 	.word	0x200063c8
 80158c4:	20001a40 	.word	0x20001a40
 80158c8:	200063b8 	.word	0x200063b8
 80158cc:	200063c4 	.word	0x200063c4
 80158d0:	3f4ccccd 	.word	0x3f4ccccd
 80158d4:	20001010 	.word	0x20001010
 80158d8:	20001014 	.word	0x20001014
 80158dc:	00000000 	.word	0x00000000

080158e0 <servodec_init>:
 *
 * @param d_func
 * A function that should be called every time the servo signals have been
 * decoded. Can be NULL.
 */
void servodec_init(void (*d_func)(void)) {
 80158e0:	b538      	push	{r3, r4, r5, lr}
	icuStart(&HW_ICU_DEV, &icucfg);
 80158e2:	4c0e      	ldr	r4, [pc, #56]	; (801591c <servodec_init+0x3c>)
 80158e4:	490e      	ldr	r1, [pc, #56]	; (8015920 <servodec_init+0x40>)
void servodec_init(void (*d_func)(void)) {
 80158e6:	4605      	mov	r5, r0
	icuStart(&HW_ICU_DEV, &icucfg);
 80158e8:	4620      	mov	r0, r4
 80158ea:	f7f8 fe99 	bl	800e620 <icuStart>
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
 80158ee:	f44f 7281 	mov.w	r2, #258	; 0x102
 80158f2:	2120      	movs	r1, #32
 80158f4:	480b      	ldr	r0, [pc, #44]	; (8015924 <servodec_init+0x44>)
 80158f6:	f7fa fa83 	bl	800fe00 <_pal_lld_setgroupmode>
	icuStartCapture(&HW_ICU_DEV);
 80158fa:	4620      	mov	r0, r4
 80158fc:	f7f8 feb0 	bl	800e660 <icuStartCapture>
	icuEnableNotifications(&HW_ICU_DEV);
 8015900:	4620      	mov	r0, r4
 8015902:	f7f8 febd 	bl	800e680 <icuEnableNotifications>
		servo_pos[i] = 0.0;
		last_len_received[i] = 0.0;
	}

	// Set our function pointer
	done_func = d_func;
 8015906:	4908      	ldr	r1, [pc, #32]	; (8015928 <servodec_init+0x48>)
		servo_pos[i] = 0.0;
 8015908:	4c08      	ldr	r4, [pc, #32]	; (801592c <servodec_init+0x4c>)
		last_len_received[i] = 0.0;
 801590a:	4809      	ldr	r0, [pc, #36]	; (8015930 <servodec_init+0x50>)

	is_running = true;
 801590c:	4a09      	ldr	r2, [pc, #36]	; (8015934 <servodec_init+0x54>)
	done_func = d_func;
 801590e:	600d      	str	r5, [r1, #0]
		servo_pos[i] = 0.0;
 8015910:	2300      	movs	r3, #0
	is_running = true;
 8015912:	2101      	movs	r1, #1
		servo_pos[i] = 0.0;
 8015914:	6023      	str	r3, [r4, #0]
		last_len_received[i] = 0.0;
 8015916:	6003      	str	r3, [r0, #0]
	is_running = true;
 8015918:	7011      	strb	r1, [r2, #0]
 801591a:	bd38      	pop	{r3, r4, r5, pc}
 801591c:	20002080 	.word	0x20002080
 8015920:	20001018 	.word	0x20001018
 8015924:	40020400 	.word	0x40020400
 8015928:	200063b8 	.word	0x200063b8
 801592c:	200063c8 	.word	0x200063c8
 8015930:	200063c0 	.word	0x200063c0
 8015934:	200063bc 	.word	0x200063bc
	...

08015940 <servodec_stop>:
}

/**
 * Stop the servo decoding driver
 */
void servodec_stop(void) {
 8015940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_running) {
 8015942:	4c0d      	ldr	r4, [pc, #52]	; (8015978 <servodec_stop+0x38>)
 8015944:	7823      	ldrb	r3, [r4, #0]
 8015946:	b1a3      	cbz	r3, 8015972 <servodec_stop+0x32>
		icuStop(&HW_ICU_DEV);
 8015948:	480c      	ldr	r0, [pc, #48]	; (801597c <servodec_stop+0x3c>)
		palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_INPUT);
		pulse_start = 1.0;
 801594a:	4e0d      	ldr	r6, [pc, #52]	; (8015980 <servodec_stop+0x40>)
		pulse_end = 2.0;
		use_median_filter = false;
		done_func = 0;
 801594c:	4d0d      	ldr	r5, [pc, #52]	; (8015984 <servodec_stop+0x44>)
		icuStop(&HW_ICU_DEV);
 801594e:	f7f8 fe77 	bl	800e640 <icuStop>
		palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_INPUT);
 8015952:	2200      	movs	r2, #0
 8015954:	2120      	movs	r1, #32
 8015956:	480c      	ldr	r0, [pc, #48]	; (8015988 <servodec_stop+0x48>)
 8015958:	f7fa fa52 	bl	800fe00 <_pal_lld_setgroupmode>
		pulse_end = 2.0;
 801595c:	490b      	ldr	r1, [pc, #44]	; (801598c <servodec_stop+0x4c>)
		use_median_filter = false;
 801595e:	4a0c      	ldr	r2, [pc, #48]	; (8015990 <servodec_stop+0x50>)
 8015960:	2300      	movs	r3, #0
		pulse_start = 1.0;
 8015962:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
		pulse_end = 2.0;
 8015966:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		pulse_start = 1.0;
 801596a:	6037      	str	r7, [r6, #0]
		done_func = 0;
 801596c:	602b      	str	r3, [r5, #0]
		pulse_end = 2.0;
 801596e:	6008      	str	r0, [r1, #0]
		use_median_filter = false;
 8015970:	7013      	strb	r3, [r2, #0]
	}

	is_running = false;
 8015972:	2300      	movs	r3, #0
 8015974:	7023      	strb	r3, [r4, #0]
 8015976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015978:	200063bc 	.word	0x200063bc
 801597c:	20002080 	.word	0x20002080
 8015980:	20001038 	.word	0x20001038
 8015984:	200063b8 	.word	0x200063b8
 8015988:	40020400 	.word	0x40020400
 801598c:	20001034 	.word	0x20001034
 8015990:	200063cc 	.word	0x200063cc
	...

080159a0 <servodec_set_pulse_options>:
 *
 * @param end
 * he amount of milliseconds the pulse ends at (default is 2.0)
 */
void servodec_set_pulse_options(float start, float end, bool median_filter) {
	pulse_start = start;
 80159a0:	4904      	ldr	r1, [pc, #16]	; (80159b4 <servodec_set_pulse_options+0x14>)
	pulse_end = end;
 80159a2:	4a05      	ldr	r2, [pc, #20]	; (80159b8 <servodec_set_pulse_options+0x18>)
	use_median_filter = median_filter;
 80159a4:	4b05      	ldr	r3, [pc, #20]	; (80159bc <servodec_set_pulse_options+0x1c>)
	pulse_start = start;
 80159a6:	ed81 0a00 	vstr	s0, [r1]
	pulse_end = end;
 80159aa:	edc2 0a00 	vstr	s1, [r2]
	use_median_filter = median_filter;
 80159ae:	7018      	strb	r0, [r3, #0]
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	20001038 	.word	0x20001038
 80159b8:	20001034 	.word	0x20001034
 80159bc:	200063cc 	.word	0x200063cc

080159c0 <servodec_get_servo>:
 *
 * @return
 * The servo value in the range [-1.0 1.0].
 */
float servodec_get_servo(int servo_num) {
	if (servo_num < SERVO_NUM) {
 80159c0:	2800      	cmp	r0, #0
		return servo_pos[servo_num];
 80159c2:	bfdd      	ittte	le
 80159c4:	4b03      	ldrle	r3, [pc, #12]	; (80159d4 <servodec_get_servo+0x14>)
 80159c6:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 80159ca:	ed90 0a00 	vldrle	s0, [r0]
	} else {
		return 0.0;
 80159ce:	ed9f 0a02 	vldrgt	s0, [pc, #8]	; 80159d8 <servodec_get_servo+0x18>
	}
}
 80159d2:	4770      	bx	lr
 80159d4:	200063c8 	.word	0x200063c8
	...

080159e0 <servodec_get_time_since_update>:
 80159e0:	4b04      	ldr	r3, [pc, #16]	; (80159f4 <servodec_get_time_since_update+0x14>)
 *
 * @return
 * The amount of milliseconds that have passed since an update.
 */
uint32_t servodec_get_time_since_update(void) {
	return chVTTimeElapsedSinceX(last_update_time) / (CH_CFG_ST_FREQUENCY / 1000);
 80159e2:	4a05      	ldr	r2, [pc, #20]	; (80159f8 <servodec_get_time_since_update+0x18>)
 80159e4:	6812      	ldr	r2, [r2, #0]
 80159e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80159e8:	4b04      	ldr	r3, [pc, #16]	; (80159fc <servodec_get_time_since_update+0x1c>)
  return chVTGetSystemTimeX() - start;
 80159ea:	1a80      	subs	r0, r0, r2
 80159ec:	fba3 3000 	umull	r3, r0, r3, r0
}
 80159f0:	08c0      	lsrs	r0, r0, #3
 80159f2:	4770      	bx	lr
 80159f4:	20001a40 	.word	0x20001a40
 80159f8:	200063c4 	.word	0x200063c4
 80159fc:	cccccccd 	.word	0xcccccccd

08015a00 <servodec_get_last_pulse_len>:
 *
 * @return
 * The length of the last received pulse.
 */
float servodec_get_last_pulse_len(int servo_num) {
	if (servo_num < SERVO_NUM) {
 8015a00:	2800      	cmp	r0, #0
		return last_len_received[servo_num];
 8015a02:	bfdd      	ittte	le
 8015a04:	4b03      	ldrle	r3, [pc, #12]	; (8015a14 <servodec_get_last_pulse_len+0x14>)
 8015a06:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8015a0a:	ed90 0a00 	vldrle	s0, [r0]
	} else {
		return 0.0;
 8015a0e:	ed9f 0a02 	vldrgt	s0, [pc, #8]	; 8015a18 <servodec_get_last_pulse_len+0x18>
	}
}
 8015a12:	4770      	bx	lr
 8015a14:	200063c0 	.word	0x200063c0
	...

08015a20 <utils_step_towards>:

// Private variables
static volatile int sys_lock_cnt = 0;

void utils_step_towards(float *value, float goal, float step) {
    if (*value < goal) {
 8015a20:	edd0 7a00 	vldr	s15, [r0]
 8015a24:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2c:	d509      	bpl.n	8015a42 <utils_step_towards+0x22>
        if ((*value + step) < goal) {
 8015a2e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015a32:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3a:	dd0a      	ble.n	8015a52 <utils_step_towards+0x32>
        } else {
            *value = goal;
        }
    } else if (*value > goal) {
        if ((*value - step) > goal) {
            *value -= step;
 8015a3c:	edc0 7a00 	vstr	s15, [r0]
 8015a40:	4770      	bx	lr
    } else if (*value > goal) {
 8015a42:	ddfd      	ble.n	8015a40 <utils_step_towards+0x20>
        if ((*value - step) > goal) {
 8015a44:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015a48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a50:	d4f4      	bmi.n	8015a3c <utils_step_towards+0x1c>
            *value = goal;
 8015a52:	ed80 0a00 	vstr	s0, [r0]
 8015a56:	4770      	bx	lr
	...

08015a60 <utils_norm_angle>:
 * Make sure that 0 <= angle < 360
 *
 * @param angle
 * The angle to normalize.
 */
void utils_norm_angle(float *angle) {
 8015a60:	b510      	push	{r4, lr}
 8015a62:	ed2d 8b02 	vpush	{d8}
	*angle = fmodf(*angle, 360.0);
 8015a66:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8015a90 <utils_norm_angle+0x30>
 8015a6a:	ed90 0a00 	vldr	s0, [r0]
 8015a6e:	eef0 0a48 	vmov.f32	s1, s16
void utils_norm_angle(float *angle) {
 8015a72:	4604      	mov	r4, r0
	*angle = fmodf(*angle, 360.0);
 8015a74:	f00f fe84 	bl	8025780 <fmodf>

	if (*angle < 0.0) {
 8015a78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*angle += 360.0;
 8015a80:	bf48      	it	mi
 8015a82:	ee30 0a08 	vaddmi.f32	s0, s0, s16
	}
}
 8015a86:	ecbd 8b02 	vpop	{d8}
		*angle += 360.0;
 8015a8a:	ed84 0a00 	vstr	s0, [r4]
}
 8015a8e:	bd10      	pop	{r4, pc}
 8015a90:	43b40000 	.word	0x43b40000
	...

08015aa0 <utils_norm_angle_rad>:
 * @param angle
 * The angle to normalize in radians.
 * WARNING: Don't use too large angles.
 */
void utils_norm_angle_rad(float *angle) {
	while (*angle < -M_PI) {
 8015aa0:	edd0 7a00 	vldr	s15, [r0]
 8015aa4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8015af0 <utils_norm_angle_rad+0x50>
 8015aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab0:	d50a      	bpl.n	8015ac8 <utils_norm_angle_rad+0x28>
		*angle += 2.0 * M_PI;
 8015ab2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8015af4 <utils_norm_angle_rad+0x54>
 8015ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	while (*angle < -M_PI) {
 8015aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac2:	d4f8      	bmi.n	8015ab6 <utils_norm_angle_rad+0x16>
 8015ac4:	edc0 7a00 	vstr	s15, [r0]
	}

	while (*angle >  M_PI) {
 8015ac8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8015af8 <utils_norm_angle_rad+0x58>
 8015acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ad4:	dd0a      	ble.n	8015aec <utils_norm_angle_rad+0x4c>
		*angle -= 2.0 * M_PI;
 8015ad6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8015af4 <utils_norm_angle_rad+0x54>
 8015ada:	ee77 7ae6 	vsub.f32	s15, s15, s13
	while (*angle >  M_PI) {
 8015ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae6:	dcf8      	bgt.n	8015ada <utils_norm_angle_rad+0x3a>
 8015ae8:	edc0 7a00 	vstr	s15, [r0]
 8015aec:	4770      	bx	lr
 8015aee:	bf00      	nop
 8015af0:	c0490fdb 	.word	0xc0490fdb
 8015af4:	40c90fdb 	.word	0x40c90fdb
 8015af8:	40490fdb 	.word	0x40490fdb
 8015afc:	00000000 	.word	0x00000000

08015b00 <utils_truncate_number>:
}

int utils_truncate_number(float *number, float min, float max) {
	int did_trunc = 0;

	if (*number > max) {
 8015b00:	edd0 7a00 	vldr	s15, [r0]
 8015b04:	eef4 7ae0 	vcmpe.f32	s15, s1
 8015b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b0c:	dc09      	bgt.n	8015b22 <utils_truncate_number+0x22>
		*number = max;
		did_trunc = 1;
	} else if (*number < min) {
 8015b0e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*number = min;
 8015b16:	bf46      	itte	mi
 8015b18:	ed80 0a00 	vstrmi	s0, [r0]
		did_trunc = 1;
 8015b1c:	2001      	movmi	r0, #1
	int did_trunc = 0;
 8015b1e:	2000      	movpl	r0, #0
	}

	return did_trunc;
}
 8015b20:	4770      	bx	lr
		*number = max;
 8015b22:	edc0 0a00 	vstr	s1, [r0]
		did_trunc = 1;
 8015b26:	2001      	movs	r0, #1
 8015b28:	4770      	bx	lr
 8015b2a:	bf00      	nop
 8015b2c:	0000      	movs	r0, r0
	...

08015b30 <utils_truncate_number_int>:

int utils_truncate_number_int(int *number, int min, int max) {
	int did_trunc = 0;

	if (*number > max) {
 8015b30:	6803      	ldr	r3, [r0, #0]
 8015b32:	4293      	cmp	r3, r2
 8015b34:	dc05      	bgt.n	8015b42 <utils_truncate_number_int+0x12>
		*number = max;
		did_trunc = 1;
	} else if (*number < min) {
 8015b36:	428b      	cmp	r3, r1
		*number = min;
 8015b38:	bfba      	itte	lt
 8015b3a:	6001      	strlt	r1, [r0, #0]
		did_trunc = 1;
 8015b3c:	2001      	movlt	r0, #1
	int did_trunc = 0;
 8015b3e:	2000      	movge	r0, #0
	}

	return did_trunc;
}
 8015b40:	4770      	bx	lr
		*number = max;
 8015b42:	6002      	str	r2, [r0, #0]
		did_trunc = 1;
 8015b44:	2001      	movs	r0, #1
 8015b46:	4770      	bx	lr
	...

08015b50 <utils_truncate_number_abs>:

int utils_truncate_number_abs(float *number, float max) {
	int did_trunc = 0;

	if (*number > max) {
 8015b50:	edd0 7a00 	vldr	s15, [r0]
 8015b54:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5c:	dc06      	bgt.n	8015b6c <utils_truncate_number_abs+0x1c>
		*number = max;
		did_trunc = 1;
	} else if (*number < -max) {
 8015b5e:	eeb1 0a40 	vneg.f32	s0, s0
 8015b62:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6a:	d503      	bpl.n	8015b74 <utils_truncate_number_abs+0x24>
		*number = -max;
 8015b6c:	ed80 0a00 	vstr	s0, [r0]
		did_trunc = 1;
 8015b70:	2001      	movs	r0, #1
 8015b72:	4770      	bx	lr
	int did_trunc = 0;
 8015b74:	2000      	movs	r0, #0
	}

	return did_trunc;
}
 8015b76:	4770      	bx	lr
	...

08015b80 <utils_map>:

float utils_map(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8015b80:	ee30 0a60 	vsub.f32	s0, s0, s1
 8015b84:	ee32 2a61 	vsub.f32	s4, s4, s3
 8015b88:	ee31 1a60 	vsub.f32	s2, s2, s1
 8015b8c:	ee20 2a02 	vmul.f32	s4, s0, s4
 8015b90:	ee82 0a01 	vdiv.f32	s0, s4, s2
}
 8015b94:	ee30 0a21 	vadd.f32	s0, s0, s3
 8015b98:	4770      	bx	lr
 8015b9a:	bf00      	nop
 8015b9c:	0000      	movs	r0, r0
	...

08015ba0 <utils_deadband>:
/**
 * Truncate absolute values less than tres to zero. The value
 * tres will be mapped to 0 and the value max to max.
 */
void utils_deadband(float *value, float tres, float max) {
	if (fabsf(*value) < tres) {
 8015ba0:	edd0 7a00 	vldr	s15, [r0]
 8015ba4:	eeb0 7ae7 	vabs.f32	s14, s15
 8015ba8:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8015bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bb0:	d417      	bmi.n	8015be2 <utils_deadband+0x42>
		*value = 0.0;
	} else {
		float k = max / (max - tres);
 8015bb2:	ee30 0ac0 	vsub.f32	s0, s1, s0
		if (*value > 0.0) {
			*value = k * *value + max * (1.0 - k);
 8015bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		float k = max / (max - tres);
 8015bba:	eec0 6a80 	vdiv.f32	s13, s1, s0
		if (*value > 0.0) {
 8015bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			*value = k * *value + max * (1.0 - k);
 8015bc2:	ee37 7a66 	vsub.f32	s14, s14, s13
		if (*value > 0.0) {
 8015bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			*value = k * *value + max * (1.0 - k);
 8015bca:	ee67 0a20 	vmul.f32	s1, s14, s1
		} else {
			*value = -(k * -*value + max * (1.0 - k));
 8015bce:	bfd6      	itet	le
 8015bd0:	eee7 0ae6 	vfmsle.f32	s1, s15, s13
			*value = k * *value + max * (1.0 - k);
 8015bd4:	eee7 0aa6 	vfmagt.f32	s1, s15, s13
			*value = -(k * -*value + max * (1.0 - k));
 8015bd8:	eef1 0a60 	vnegle.f32	s1, s1
 8015bdc:	edc0 0a00 	vstr	s1, [r0]
 8015be0:	4770      	bx	lr
		*value = 0.0;
 8015be2:	2300      	movs	r3, #0
 8015be4:	6003      	str	r3, [r0, #0]
 8015be6:	4770      	bx	lr
	...

08015bf0 <utils_angle_difference>:
//	}
//
//	return angle1 - angle2;

	// Faster in most cases
	float difference = angle1 - angle2;
 8015bf0:	ee30 0a60 	vsub.f32	s0, s0, s1
	while (difference < -180.0) difference += 2.0 * 180.0;
 8015bf4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015c38 <utils_angle_difference+0x48>
 8015bf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c00:	d508      	bpl.n	8015c14 <utils_angle_difference+0x24>
 8015c02:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8015c3c <utils_angle_difference+0x4c>
 8015c06:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015c0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c12:	d4f8      	bmi.n	8015c06 <utils_angle_difference+0x16>
	while (difference > 180.0) difference -= 2.0 * 180.0;
 8015c14:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015c40 <utils_angle_difference+0x50>
 8015c18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c20:	dd08      	ble.n	8015c34 <utils_angle_difference+0x44>
 8015c22:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8015c3c <utils_angle_difference+0x4c>
 8015c26:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015c2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c32:	dcf8      	bgt.n	8015c26 <utils_angle_difference+0x36>
	return difference;
}
 8015c34:	4770      	bx	lr
 8015c36:	bf00      	nop
 8015c38:	c3340000 	.word	0xc3340000
 8015c3c:	43b40000 	.word	0x43b40000
 8015c40:	43340000 	.word	0x43340000
	...

08015c50 <utils_angle_difference_rad>:
 * The second angle in radians
 * @return
 * The difference between the angles in radians
 */
float utils_angle_difference_rad(float angle1, float angle2) {
	float difference = angle1 - angle2;
 8015c50:	ee30 0a60 	vsub.f32	s0, s0, s1
	while (difference < -M_PI) difference += 2.0 * M_PI;
 8015c54:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015c98 <utils_angle_difference_rad+0x48>
 8015c58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c60:	d508      	bpl.n	8015c74 <utils_angle_difference_rad+0x24>
 8015c62:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8015c9c <utils_angle_difference_rad+0x4c>
 8015c66:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015c6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c72:	d4f8      	bmi.n	8015c66 <utils_angle_difference_rad+0x16>
	while (difference > M_PI) difference -= 2.0 * M_PI;
 8015c74:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015ca0 <utils_angle_difference_rad+0x50>
 8015c78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c80:	dd08      	ble.n	8015c94 <utils_angle_difference_rad+0x44>
 8015c82:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8015c9c <utils_angle_difference_rad+0x4c>
 8015c86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015c8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c92:	dcf8      	bgt.n	8015c86 <utils_angle_difference_rad+0x36>
	return difference;
}
 8015c94:	4770      	bx	lr
 8015c96:	bf00      	nop
 8015c98:	c0490fdb 	.word	0xc0490fdb
 8015c9c:	40c90fdb 	.word	0x40c90fdb
 8015ca0:	40490fdb 	.word	0x40490fdb
	...

08015cb0 <utils_middle_of_3>:
 * The middle value
 */
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
 8015cb0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8015cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb8:	d80e      	bhi.n	8015cd8 <utils_middle_of_3+0x28>
 8015cba:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8015cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc2:	d81f      	bhi.n	8015d04 <utils_middle_of_3+0x54>
		middle = (b <= c) ? b : c;
 8015cc4:	eef4 0ac1 	vcmpe.f32	s1, s2
 8015cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ccc:	bf8c      	ite	hi
 8015cce:	eeb0 0a41 	vmovhi.f32	s0, s2
 8015cd2:	eeb0 0a60 	vmovls.f32	s0, s1
 8015cd6:	4770      	bx	lr
	} else if ((b <= a) && (b <= c)) {
 8015cd8:	db0c      	blt.n	8015cf4 <utils_middle_of_3+0x44>
 8015cda:	eef4 0ac1 	vcmpe.f32	s1, s2
 8015cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce2:	d807      	bhi.n	8015cf4 <utils_middle_of_3+0x44>
		middle = (a <= c) ? a : c;
 8015ce4:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8015ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		middle = (b <= c) ? b : c;
 8015cec:	bf88      	it	hi
 8015cee:	eeb0 0a41 	vmovhi.f32	s0, s2
 8015cf2:	4770      	bx	lr
	} else {
		middle = (a <= b) ? a : b;
 8015cf4:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8015cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cfc:	bf88      	it	hi
 8015cfe:	eeb0 0a60 	vmovhi.f32	s0, s1
 8015d02:	4770      	bx	lr
	} else if ((b <= a) && (b <= c)) {
 8015d04:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8015d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0c:	db04      	blt.n	8015d18 <utils_middle_of_3+0x68>
 8015d0e:	eef4 0ac1 	vcmpe.f32	s1, s2
 8015d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d16:	d9e5      	bls.n	8015ce4 <utils_middle_of_3+0x34>
	}
	return middle;
}
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop
 8015d1c:	0000      	movs	r0, r0
	...

08015d20 <utils_middle_of_3_int>:
 * The middle value
 */
int utils_middle_of_3_int(int a, int b, int c) {
	int middle;

	if ((a <= b) && (a <= c)) {
 8015d20:	4288      	cmp	r0, r1
 8015d22:	dd05      	ble.n	8015d30 <utils_middle_of_3_int+0x10>
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8015d24:	4291      	cmp	r1, r2
 8015d26:	dd0b      	ble.n	8015d40 <utils_middle_of_3_int+0x20>
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 8015d28:	4288      	cmp	r0, r1
 8015d2a:	bfa8      	it	ge
 8015d2c:	4608      	movge	r0, r1
	}
	return middle;
}
 8015d2e:	4770      	bx	lr
	if ((a <= b) && (a <= c)) {
 8015d30:	4290      	cmp	r0, r2
 8015d32:	dd09      	ble.n	8015d48 <utils_middle_of_3_int+0x28>
	} else if ((b <= a) && (b <= c)) {
 8015d34:	4288      	cmp	r0, r1
 8015d36:	daf5      	bge.n	8015d24 <utils_middle_of_3_int+0x4>
		middle = (a <= b) ? a : b;
 8015d38:	4288      	cmp	r0, r1
 8015d3a:	bfa8      	it	ge
 8015d3c:	4608      	movge	r0, r1
}
 8015d3e:	4770      	bx	lr
		middle = (a <= c) ? a : c;
 8015d40:	4290      	cmp	r0, r2
 8015d42:	bfa8      	it	ge
 8015d44:	4610      	movge	r0, r2
 8015d46:	4770      	bx	lr
		middle = (b <= c) ? b : c;
 8015d48:	4291      	cmp	r1, r2
 8015d4a:	bfa8      	it	ge
 8015d4c:	4611      	movge	r1, r2
 8015d4e:	4608      	mov	r0, r1
 8015d50:	4770      	bx	lr
 8015d52:	bf00      	nop
	...

08015d60 <utils_fast_atan2>:
 *
 * @return
 * The angle in radians
 */
float utils_fast_atan2(float y, float x) {
	float abs_y = fabsf(y) + 1e-20; // kludge to prevent 0/0 condition
 8015d60:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8015dc8 <utils_fast_atan2+0x68>
	float angle;

	if (x >= 0) {
 8015d64:	eef5 0ac0 	vcmpe.f32	s1, #0.0
	float abs_y = fabsf(y) + 1e-20; // kludge to prevent 0/0 condition
 8015d68:	eef0 7ac0 	vabs.f32	s15, s0
	if (x >= 0) {
 8015d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float utils_fast_atan2(float y, float x) {
 8015d70:	eef0 6a40 	vmov.f32	s13, s0
	float abs_y = fabsf(y) + 1e-20; // kludge to prevent 0/0 condition
 8015d74:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (x >= 0) {
 8015d78:	db1b      	blt.n	8015db2 <utils_fast_atan2+0x52>
		float r = (x - abs_y) / (x + abs_y);
 8015d7a:	ee70 4ae7 	vsub.f32	s9, s1, s15
		float rsq = r * r;
		angle = ((0.1963 * rsq) - 0.9817) * r + (M_PI / 4.0);
 8015d7e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8015dcc <utils_fast_atan2+0x6c>
 8015d82:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015dd0 <utils_fast_atan2+0x70>
 8015d86:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8015dd4 <utils_fast_atan2+0x74>
		float r = (x - abs_y) / (x + abs_y);
 8015d8a:	ee77 7aa0 	vadd.f32	s15, s15, s1
	} else {
		float r = (x + abs_y) / (abs_y - x);
 8015d8e:	eec4 5aa7 	vdiv.f32	s11, s9, s15
		float rsq = r * r;
		angle = ((0.1963 * rsq) - 0.9817) * r + (3.0 * M_PI / 4.0);
	}

	if (y < 0) {
 8015d92:	eef5 6ac0 	vcmpe.f32	s13, #0.0
		float rsq = r * r;
 8015d96:	ee65 7aa5 	vmul.f32	s15, s11, s11
	if (y < 0) {
 8015d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle = ((0.1963 * rsq) - 0.9817) * r + (3.0 * M_PI / 4.0);
 8015d9e:	eea7 6a85 	vfma.f32	s12, s15, s10
 8015da2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015da6:	eeb0 0a47 	vmov.f32	s0, s14
		return(-angle);
 8015daa:	bf48      	it	mi
 8015dac:	eeb1 0a47 	vnegmi.f32	s0, s14
	} else {
		return(angle);
	}
}
 8015db0:	4770      	bx	lr
		float r = (x + abs_y) / (abs_y - x);
 8015db2:	ee77 4aa0 	vadd.f32	s9, s15, s1
		angle = ((0.1963 * rsq) - 0.9817) * r + (3.0 * M_PI / 4.0);
 8015db6:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8015dcc <utils_fast_atan2+0x6c>
 8015dba:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8015dd0 <utils_fast_atan2+0x70>
 8015dbe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8015dd8 <utils_fast_atan2+0x78>
		float r = (x + abs_y) / (abs_y - x);
 8015dc2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015dc6:	e7e2      	b.n	8015d8e <utils_fast_atan2+0x2e>
 8015dc8:	1e3ce508 	.word	0x1e3ce508
 8015dcc:	3e4902de 	.word	0x3e4902de
 8015dd0:	bf7b50b1 	.word	0xbf7b50b1
 8015dd4:	3f490fdb 	.word	0x3f490fdb
 8015dd8:	4016cbe4 	.word	0x4016cbe4
 8015ddc:	00000000 	.word	0x00000000

08015de0 <utils_saturate_vector_2d>:
 * @return
 * True if saturation happened, false otherwise
 */
bool utils_saturate_vector_2d(float *x, float *y, float max) {
	bool retval = false;
	float mag = sqrtf(*x * *x + *y * *y);
 8015de0:	edd1 7a00 	vldr	s15, [r1]
 8015de4:	ed90 7a00 	vldr	s14, [r0]
 8015de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
bool utils_saturate_vector_2d(float *x, float *y, float max) {
 8015dec:	b538      	push	{r3, r4, r5, lr}
	float mag = sqrtf(*x * *x + *y * *y);
 8015dee:	eee7 7a07 	vfma.f32	s15, s14, s14
bool utils_saturate_vector_2d(float *x, float *y, float max) {
 8015df2:	460c      	mov	r4, r1
 8015df4:	4605      	mov	r5, r0
 8015df6:	ed2d 8b02 	vpush	{d8}
 8015dfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e02:	eef0 8a40 	vmov.f32	s17, s0
	float mag = sqrtf(*x * *x + *y * *y);
 8015e06:	eeb1 8ae7 	vsqrt.f32	s16, s15
 8015e0a:	d503      	bpl.n	8015e14 <utils_saturate_vector_2d+0x34>
 8015e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8015e10:	f00f ff46 	bl	8025ca0 <sqrtf>
	max = fabsf(max);

	if (mag < 1e-10) {
 8015e14:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015e60 <utils_saturate_vector_2d+0x80>
		mag = 1e-10;
 8015e18:	eeb4 8a67 	vcmp.f32	s16, s15
 8015e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e20:	bf48      	it	mi
 8015e22:	eeb0 8a67 	vmovmi.f32	s16, s15
	max = fabsf(max);
 8015e26:	eeb0 0ae8 	vabs.f32	s0, s17
	}

	if (mag > max) {
 8015e2a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8015e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e32:	dd11      	ble.n	8015e58 <utils_saturate_vector_2d+0x78>
		const float f = max / mag;
 8015e34:	eec0 6a08 	vdiv.f32	s13, s0, s16
		*y *= f;
		retval = true;
	}

	return retval;
}
 8015e38:	ecbd 8b02 	vpop	{d8}
		retval = true;
 8015e3c:	2001      	movs	r0, #1
		*x *= f;
 8015e3e:	ed95 7a00 	vldr	s14, [r5]
 8015e42:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015e46:	ed85 7a00 	vstr	s14, [r5]
		*y *= f;
 8015e4a:	edd4 7a00 	vldr	s15, [r4]
 8015e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e52:	edc4 7a00 	vstr	s15, [r4]
}
 8015e56:	bd38      	pop	{r3, r4, r5, pc}
 8015e58:	ecbd 8b02 	vpop	{d8}
	bool retval = false;
 8015e5c:	2000      	movs	r0, #0
}
 8015e5e:	bd38      	pop	{r3, r4, r5, pc}
 8015e60:	2edbe6ff 	.word	0x2edbe6ff
	...

08015e70 <utils_fast_sincos_better>:
 * @param cos
 * A pointer to store the cosine value.
 */
void utils_fast_sincos_better(float angle, float *sin, float *cos) {
	//always wrap input angle to -PI..PI
	while (angle < -M_PI) {
 8015e70:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8015f60 <utils_fast_sincos_better+0xf0>
 8015e74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7c:	d508      	bpl.n	8015e90 <utils_fast_sincos_better+0x20>
		angle += 2.0 * M_PI;
 8015e7e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8015f64 <utils_fast_sincos_better+0xf4>
 8015e82:	ee30 0a07 	vadd.f32	s0, s0, s14
	while (angle < -M_PI) {
 8015e86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e8e:	d4f8      	bmi.n	8015e82 <utils_fast_sincos_better+0x12>
	}

	while (angle >  M_PI) {
 8015e90:	eddf 7a35 	vldr	s15, [pc, #212]	; 8015f68 <utils_fast_sincos_better+0xf8>
 8015e94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	dd08      	ble.n	8015eb0 <utils_fast_sincos_better+0x40>
		angle -= 2.0 * M_PI;
 8015e9e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015f64 <utils_fast_sincos_better+0xf4>
 8015ea2:	ee30 0a47 	vsub.f32	s0, s0, s14
	while (angle >  M_PI) {
 8015ea6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eae:	dcf8      	bgt.n	8015ea2 <utils_fast_sincos_better+0x32>
	}

	//compute sine
	if (angle < 0.0) {
		*sin = 1.27323954 * angle + 0.405284735 * angle * angle;
 8015eb0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8015f6c <utils_fast_sincos_better+0xfc>
 8015eb4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8015f70 <utils_fast_sincos_better+0x100>
 8015eb8:	ee60 7a27 	vmul.f32	s15, s0, s15
	if (angle < 0.0) {
 8015ebc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*sin = 1.27323954 * angle + 0.405284735 * angle * angle;
 8015ec4:	bf4c      	ite	mi
 8015ec6:	ee67 7a80 	vmulmi.f32	s15, s15, s0
			*sin = 0.225 * (*sin * -*sin - *sin) + *sin;
		} else {
			*sin = 0.225 * (*sin * *sin - *sin) + *sin;
		}
	} else {
		*sin = 1.27323954 * angle - 0.405284735 * angle * angle;
 8015eca:	ee60 7a67 	vnmulpl.f32	s15, s0, s15
 8015ece:	eee0 7a07 	vfma.f32	s15, s0, s14

		if (*sin < 0.0) {
			*sin = 0.225 * (*sin * -*sin - *sin) + *sin;
		} else {
			*sin = 0.225 * (*sin * *sin - *sin) + *sin;
 8015ed2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8015f74 <utils_fast_sincos_better+0x104>
		*sin = 1.27323954 * angle - 0.405284735 * angle * angle;
 8015ed6:	edc0 7a00 	vstr	s15, [r0]
		if (*sin < 0.0) {
 8015eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			*sin = 0.225 * (*sin * -*sin - *sin) + *sin;
 8015ee2:	eef0 6a67 	vmov.f32	s13, s15
 8015ee6:	bf4c      	ite	mi
 8015ee8:	eed7 6ae7 	vfnmami.f32	s13, s15, s15
			*sin = 0.225 * (*sin * *sin - *sin) + *sin;
 8015eec:	eed7 6aa7 	vfnmspl.f32	s13, s15, s15
 8015ef0:	eee6 7a87 	vfma.f32	s15, s13, s14
		}
	}

	// compute cosine: sin(x + PI/2) = cos(x)
	angle += 0.5 * M_PI;
 8015ef4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015f78 <utils_fast_sincos_better+0x108>
			*sin = 0.225 * (*sin * *sin - *sin) + *sin;
 8015ef8:	edc0 7a00 	vstr	s15, [r0]
	angle += 0.5 * M_PI;
 8015efc:	ee30 0a07 	vadd.f32	s0, s0, s14
	if (angle >  M_PI) {
 8015f00:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015f68 <utils_fast_sincos_better+0xf8>
		angle -= 2.0 * M_PI;
	}

	if (angle < 0.0) {
		*cos = 1.27323954 * angle + 0.405284735 * angle * angle;
 8015f04:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015f70 <utils_fast_sincos_better+0x100>
	if (angle >  M_PI) {
 8015f08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle -= 2.0 * M_PI;
 8015f10:	bfc4      	itt	gt
 8015f12:	eddf 7a14 	vldrgt	s15, [pc, #80]	; 8015f64 <utils_fast_sincos_better+0xf4>
 8015f16:	ee30 0a67 	vsubgt.f32	s0, s0, s15
		*cos = 1.27323954 * angle + 0.405284735 * angle * angle;
 8015f1a:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015f6c <utils_fast_sincos_better+0xfc>
	if (angle < 0.0) {
 8015f1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		*cos = 1.27323954 * angle + 0.405284735 * angle * angle;
 8015f22:	ee60 7a27 	vmul.f32	s15, s0, s15
	if (angle < 0.0) {
 8015f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*cos = 1.27323954 * angle + 0.405284735 * angle * angle;
 8015f2a:	bf4c      	ite	mi
 8015f2c:	ee67 7a80 	vmulmi.f32	s15, s15, s0
			*cos = 0.225 * (*cos * -*cos - *cos) + *cos;
		} else {
			*cos = 0.225 * (*cos * *cos - *cos) + *cos;
		}
	} else {
		*cos = 1.27323954 * angle - 0.405284735 * angle * angle;
 8015f30:	ee60 7a67 	vnmulpl.f32	s15, s0, s15
 8015f34:	eee0 7a07 	vfma.f32	s15, s0, s14

		if (*cos < 0.0) {
			*cos = 0.225 * (*cos * -*cos - *cos) + *cos;
		} else {
			*cos = 0.225 * (*cos * *cos - *cos) + *cos;
 8015f38:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8015f74 <utils_fast_sincos_better+0x104>
		*cos = 1.27323954 * angle - 0.405284735 * angle * angle;
 8015f3c:	edc1 7a00 	vstr	s15, [r1]
		if (*cos < 0.0) {
 8015f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			*cos = 0.225 * (*cos * -*cos - *cos) + *cos;
 8015f44:	eef0 6a67 	vmov.f32	s13, s15
		if (*cos < 0.0) {
 8015f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			*cos = 0.225 * (*cos * -*cos - *cos) + *cos;
 8015f4c:	bf4c      	ite	mi
 8015f4e:	eed7 6ae7 	vfnmami.f32	s13, s15, s15
			*cos = 0.225 * (*cos * *cos - *cos) + *cos;
 8015f52:	eed7 6aa7 	vfnmspl.f32	s13, s15, s15
 8015f56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015f5a:	edc1 7a00 	vstr	s15, [r1]
 8015f5e:	4770      	bx	lr
 8015f60:	c0490fdb 	.word	0xc0490fdb
 8015f64:	40c90fdb 	.word	0x40c90fdb
 8015f68:	40490fdb 	.word	0x40490fdb
 8015f6c:	3ecf817b 	.word	0x3ecf817b
 8015f70:	3fa2f983 	.word	0x3fa2f983
 8015f74:	3e666666 	.word	0x3e666666
 8015f78:	3fc90fdb 	.word	0x3fc90fdb
 8015f7c:	00000000 	.word	0x00000000

08015f80 <utils_min_abs>:
 * @return
 * The value with the lowest magnitude.
 */
float utils_min_abs(float va, float vb) {
	float res;
	if (fabsf(va) < fabsf(vb)) {
 8015f80:	eeb0 7ac0 	vabs.f32	s14, s0
 8015f84:	eef0 7ae0 	vabs.f32	s15, s1
 8015f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	} else {
		res = vb;
	}

	return res;
}
 8015f90:	bf58      	it	pl
 8015f92:	eeb0 0a60 	vmovpl.f32	s0, s1
 8015f96:	4770      	bx	lr
	...

08015fa0 <utils_max_abs>:
 * @return
 * The value with the highest magnitude.
 */
float utils_max_abs(float va, float vb) {
	float res;
	if (fabsf(va) > fabsf(vb)) {
 8015fa0:	eeb0 7ac0 	vabs.f32	s14, s0
 8015fa4:	eef0 7ae0 	vabs.f32	s15, s1
 8015fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	} else {
		res = vb;
	}

	return res;
}
 8015fb0:	bfd8      	it	le
 8015fb2:	eeb0 0a60 	vmovle.f32	s0, s1
 8015fb6:	4770      	bx	lr
	...

08015fc0 <utils_throttle_curve>:
	for (z = 128; z > 0; z >>= 1) {
		strcat(b, ((x & z) == z) ? "1" : "0");
	}
}

float utils_throttle_curve(float val, float curve_acc, float curve_brake, int mode) {
 8015fc0:	b500      	push	{lr}
	float ret = 0.0;
	
	if (val < -1.0) {
 8015fc2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
float utils_throttle_curve(float val, float curve_acc, float curve_brake, int mode) {
 8015fc6:	ed2d 8b04 	vpush	{d8-d9}
	if (val < -1.0) {
 8015fca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float utils_throttle_curve(float val, float curve_acc, float curve_brake, int mode) {
 8015fd2:	b083      	sub	sp, #12
	if (val < -1.0) {
 8015fd4:	d43e      	bmi.n	8016054 <utils_throttle_curve+0x94>
 8015fd6:	eeb0 8a40 	vmov.f32	s16, s0
		val = -1.0;
	}

	if (val > 1.0) {
 8015fda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015fde:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8015fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		val = 1.0;
 8015fe6:	bfc8      	it	gt
 8015fe8:	eeb0 8a40 	vmovgt.f32	s16, s0
	if (val > 1.0) {
 8015fec:	f340 8085 	ble.w	80160fa <utils_throttle_curve+0x13a>
		curve = curve_brake;
	}

	// See
	// http://math.stackexchange.com/questions/297768/how-would-i-create-a-exponential-ramp-function-from-0-0-to-1-1-with-a-single-val
	if (mode == 0) { // Exponential
 8015ff0:	b9d0      	cbnz	r0, 8016028 <utils_throttle_curve+0x68>
		if (curve >= 0.0) {
 8015ff2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8015ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ffa:	db5b      	blt.n	80160b4 <utils_throttle_curve+0xf4>
			ret = 1.0 - powf(1.0 - val_a, 1.0 + curve);
 8015ffc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016000:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8016004:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8016008:	f00f fc9a 	bl	8025940 <powf>
 801600c:	ee38 0ac0 	vsub.f32	s0, s17, s0
		}
	} else { // Linear
		ret = val_a;
	}

	if (val < 0.0) {
 8016010:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		ret = -ret;
 8016018:	bf48      	it	mi
 801601a:	eeb1 0a40 	vnegmi.f32	s0, s0
	}

	return ret;
}
 801601e:	b003      	add	sp, #12
 8016020:	ecbd 8b04 	vpop	{d8-d9}
 8016024:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (mode == 1) { // Natural
 8016028:	2801      	cmp	r0, #1
 801602a:	d01a      	beq.n	8016062 <utils_throttle_curve+0xa2>
	} else if (mode == 2) { // Polynomial
 801602c:	2802      	cmp	r0, #2
 801602e:	d1ef      	bne.n	8016010 <utils_throttle_curve+0x50>
		if (curve >= 0.0) {
 8016030:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8016034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			ret = 1.0 - ((1.0 - val_a) / (1.0 + curve * val_a));
 8016038:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		if (curve >= 0.0) {
 801603c:	db41      	blt.n	80160c2 <utils_throttle_curve+0x102>
			ret = 1.0 - ((1.0 - val_a) / (1.0 + curve * val_a));
 801603e:	eef0 6a67 	vmov.f32	s13, s15
 8016042:	eee0 6a80 	vfma.f32	s13, s1, s0
 8016046:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801604a:	ee80 7a26 	vdiv.f32	s14, s0, s13
 801604e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016052:	e7dd      	b.n	8016010 <utils_throttle_curve+0x50>
		curve = curve_brake;
 8016054:	eef0 0a41 	vmov.f32	s1, s2
		val = -1.0;
 8016058:	eeb0 8a67 	vmov.f32	s16, s15
 801605c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016060:	e7c6      	b.n	8015ff0 <utils_throttle_curve+0x30>
		if (fabsf(curve) < 1e-10) {
 8016062:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016110 <utils_throttle_curve+0x150>
 8016066:	eeb0 7ae0 	vabs.f32	s14, s1
 801606a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016072:	d4cd      	bmi.n	8016010 <utils_throttle_curve+0x50>
			if (curve >= 0.0) {
 8016074:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8016078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607c:	db28      	blt.n	80160d0 <utils_throttle_curve+0x110>
				ret = 1.0 - ((expf(curve * (1.0 - val_a)) - 1.0) / (expf(curve) - 1.0));
 801607e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016082:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8016086:	edcd 0a01 	vstr	s1, [sp, #4]
 801608a:	ee20 0a20 	vmul.f32	s0, s0, s1
 801608e:	f00f faf7 	bl	8025680 <expf>
 8016092:	eddd 0a01 	vldr	s1, [sp, #4]
 8016096:	eeb0 9a40 	vmov.f32	s18, s0
 801609a:	eeb0 0a60 	vmov.f32	s0, s1
 801609e:	f00f faef 	bl	8025680 <expf>
 80160a2:	ee79 7a68 	vsub.f32	s15, s18, s17
 80160a6:	ee30 7a68 	vsub.f32	s14, s0, s17
 80160aa:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80160ae:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80160b2:	e7ad      	b.n	8016010 <utils_throttle_curve+0x50>
			ret = powf(val_a, 1.0 - curve);
 80160b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80160b8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80160bc:	f00f fc40 	bl	8025940 <powf>
 80160c0:	e7a6      	b.n	8016010 <utils_throttle_curve+0x50>
			ret = val_a / (1.0 - curve * (1.0 - val_a));
 80160c2:	ee37 7ac0 	vsub.f32	s14, s15, s0
 80160c6:	eee0 7ac7 	vfms.f32	s15, s1, s14
 80160ca:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80160ce:	e79f      	b.n	8016010 <utils_throttle_curve+0x50>
				ret = (expf(-curve * val_a) - 1.0) / (expf(-curve) - 1.0);
 80160d0:	eef1 8a60 	vneg.f32	s17, s1
 80160d4:	ee28 0a80 	vmul.f32	s0, s17, s0
 80160d8:	f00f fad2 	bl	8025680 <expf>
 80160dc:	eeb0 9a40 	vmov.f32	s18, s0
 80160e0:	eeb0 0a68 	vmov.f32	s0, s17
 80160e4:	f00f facc 	bl	8025680 <expf>
 80160e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80160ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 80160f0:	ee39 9a67 	vsub.f32	s18, s18, s15
 80160f4:	ee89 0a07 	vdiv.f32	s0, s18, s14
 80160f8:	e78a      	b.n	8016010 <utils_throttle_curve+0x50>
		curve = curve_brake;
 80160fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80160fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016102:	bfb8      	it	lt
 8016104:	eef0 0a41 	vmovlt.f32	s1, s2
 8016108:	eeb0 0ac8 	vabs.f32	s0, s16
 801610c:	e770      	b.n	8015ff0 <utils_throttle_curve+0x30>
 801610e:	bf00      	nop
 8016110:	2edbe6ff 	.word	0x2edbe6ff
	...

08016120 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 8016120:	4b04      	ldr	r3, [pc, #16]	; (8016134 <utils_sys_lock_cnt+0x14>)
 8016122:	681a      	ldr	r2, [r3, #0]
 8016124:	b912      	cbnz	r2, 801612c <utils_sys_lock_cnt+0xc>
 8016126:	2220      	movs	r2, #32
 8016128:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 801612c:	681a      	ldr	r2, [r3, #0]
 801612e:	3201      	adds	r2, #1
 8016130:	601a      	str	r2, [r3, #0]
 8016132:	4770      	bx	lr
 8016134:	200063d0 	.word	0x200063d0
	...

08016140 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 8016140:	4b05      	ldr	r3, [pc, #20]	; (8016158 <utils_sys_unlock_cnt+0x18>)
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	b132      	cbz	r2, 8016154 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	3a01      	subs	r2, #1
 801614a:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	b90b      	cbnz	r3, 8016154 <utils_sys_unlock_cnt+0x14>
 8016150:	f383 8811 	msr	BASEPRI, r3
 8016154:	4770      	bx	lr
 8016156:	bf00      	nop
 8016158:	200063d0 	.word	0x200063d0
 801615c:	00000000 	.word	0x00000000

08016160 <packet_init>:

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
	handler_states[handler_num].send_func = s_func;
 8016160:	4b03      	ldr	r3, [pc, #12]	; (8016170 <packet_init+0x10>)
 8016162:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8016166:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 801616a:	6050      	str	r0, [r2, #4]
	handler_states[handler_num].process_func = p_func;
 801616c:	6091      	str	r1, [r2, #8]
 801616e:	4770      	bx	lr
 8016170:	200063d4 	.word	0x200063d4
	...

08016180 <packet_send_packet>:
}

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
	if (len > PACKET_MAX_PL_LEN) {
 8016180:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016184:	d83c      	bhi.n	8016200 <packet_send_packet+0x80>
void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 8016186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}

	int b_ind = 0;

	if (len <= 256) {
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 801618a:	0193      	lsls	r3, r2, #6
 801618c:	4e1d      	ldr	r6, [pc, #116]	; (8016204 <packet_send_packet+0x84>)
 801618e:	189c      	adds	r4, r3, r2
	if (len <= 256) {
 8016190:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 8016194:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	if (len <= 256) {
 8016198:	d92a      	bls.n	80161f0 <packet_send_packet+0x70>
		handler_states[handler_num].tx_buffer[b_ind++] = len;
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 801619a:	0a0d      	lsrs	r5, r1, #8
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 801619c:	2703      	movs	r7, #3
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 801619e:	f884 1412 	strb.w	r1, [r4, #1042]	; 0x412
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 80161a2:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 80161a6:	f884 7410 	strb.w	r7, [r4, #1040]	; 0x410
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 80161aa:	4413      	add	r3, r2
 80161ac:	015c      	lsls	r4, r3, #5
 80161ae:	f504 6982 	add.w	r9, r4, #1040	; 0x410
 80161b2:	4680      	mov	r8, r0
 80161b4:	44b1      	add	r9, r6
 80161b6:	460a      	mov	r2, r1
 80161b8:	460d      	mov	r5, r1
 80161ba:	eb09 0007 	add.w	r0, r9, r7
 80161be:	4641      	mov	r1, r8
 80161c0:	f7f6 fca6 	bl	800cb10 <memcpy>
	b_ind += len;

	unsigned short crc = crc16(data, len);
 80161c4:	4629      	mov	r1, r5
 80161c6:	4640      	mov	r0, r8
 80161c8:	f7fb feba 	bl	8011f40 <crc16>
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 80161cc:	4434      	add	r4, r6
	b_ind += len;
 80161ce:	19e9      	adds	r1, r5, r7
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 80161d0:	1863      	adds	r3, r4, r1
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
	handler_states[handler_num].tx_buffer[b_ind++] = 3;

	if (handler_states[handler_num].send_func) {
 80161d2:	6862      	ldr	r2, [r4, #4]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 80161d4:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 80161d8:	2403      	movs	r4, #3
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 80161da:	0a00      	lsrs	r0, r0, #8
 80161dc:	f883 0410 	strb.w	r0, [r3, #1040]	; 0x410
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 80161e0:	4421      	add	r1, r4
 80161e2:	f883 4412 	strb.w	r4, [r3, #1042]	; 0x412
	if (handler_states[handler_num].send_func) {
 80161e6:	b14a      	cbz	r2, 80161fc <packet_send_packet+0x7c>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 80161e8:	4648      	mov	r0, r9
	}
}
 80161ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 80161ee:	4710      	bx	r2
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 80161f0:	2702      	movs	r7, #2
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 80161f2:	f884 1411 	strb.w	r1, [r4, #1041]	; 0x411
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 80161f6:	f884 7410 	strb.w	r7, [r4, #1040]	; 0x410
 80161fa:	e7d6      	b.n	80161aa <packet_send_packet+0x2a>
 80161fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop
 8016204:	200063d4 	.word	0x200063d4
	...

08016210 <packet_timerfunc>:
/**
 * Call this function every millisecond.
 */
void packet_timerfunc(void) {
	for (int i = 0;i < PACKET_HANDLERS;i++) {
		if (handler_states[i].rx_timeout) {
 8016210:	4b0e      	ldr	r3, [pc, #56]	; (801624c <packet_timerfunc+0x3c>)
 8016212:	885a      	ldrh	r2, [r3, #2]
 8016214:	b292      	uxth	r2, r2
 8016216:	b972      	cbnz	r2, 8016236 <packet_timerfunc+0x26>
			handler_states[i].rx_timeout--;
		} else {
			handler_states[i].rx_state = 0;
 8016218:	701a      	strb	r2, [r3, #0]
		if (handler_states[i].rx_timeout) {
 801621a:	f8b3 2822 	ldrh.w	r2, [r3, #2082]	; 0x822
 801621e:	b292      	uxth	r2, r2
 8016220:	b132      	cbz	r2, 8016230 <packet_timerfunc+0x20>
			handler_states[i].rx_timeout--;
 8016222:	f8b3 2822 	ldrh.w	r2, [r3, #2082]	; 0x822
 8016226:	3a01      	subs	r2, #1
 8016228:	b292      	uxth	r2, r2
 801622a:	f8a3 2822 	strh.w	r2, [r3, #2082]	; 0x822
 801622e:	4770      	bx	lr
			handler_states[i].rx_state = 0;
 8016230:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
 8016234:	4770      	bx	lr
			handler_states[i].rx_timeout--;
 8016236:	885a      	ldrh	r2, [r3, #2]
 8016238:	3a01      	subs	r2, #1
 801623a:	b292      	uxth	r2, r2
 801623c:	805a      	strh	r2, [r3, #2]
		if (handler_states[i].rx_timeout) {
 801623e:	f8b3 2822 	ldrh.w	r2, [r3, #2082]	; 0x822
 8016242:	b292      	uxth	r2, r2
 8016244:	2a00      	cmp	r2, #0
 8016246:	d1ec      	bne.n	8016222 <packet_timerfunc+0x12>
 8016248:	e7f2      	b.n	8016230 <packet_timerfunc+0x20>
 801624a:	bf00      	nop
 801624c:	200063d4 	.word	0x200063d4

08016250 <packet_process_byte>:
		}
	}
}

void packet_process_byte(uint8_t rx_data, int handler_num) {
 8016250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (handler_states[handler_num].rx_state) {
 8016254:	018e      	lsls	r6, r1, #6
 8016256:	1873      	adds	r3, r6, r1
 8016258:	015b      	lsls	r3, r3, #5
 801625a:	4d4b      	ldr	r5, [pc, #300]	; (8016388 <packet_process_byte+0x138>)
 801625c:	5ceb      	ldrb	r3, [r5, r3]
 801625e:	2b06      	cmp	r3, #6
 8016260:	d863      	bhi.n	801632a <packet_process_byte+0xda>
 8016262:	e8df f003 	tbb	[pc, r3]
 8016266:	180d      	.short	0x180d
 8016268:	5b543926 	.word	0x5b543926
 801626c:	04          	.byte	0x04
 801626d:	00          	.byte	0x00
		handler_states[handler_num].rx_state++;
		handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
		break;

	case 6:
		if (rx_data == 3) {
 801626e:	2803      	cmp	r0, #3
 8016270:	460c      	mov	r4, r1
 8016272:	d072      	beq.n	801635a <packet_process_byte+0x10a>
					handler_states[handler_num].process_func(handler_states[handler_num].rx_buffer,
							handler_states[handler_num].payload_length);
				}
			}
		}
		handler_states[handler_num].rx_state = 0;
 8016274:	4434      	add	r4, r6
 8016276:	0164      	lsls	r4, r4, #5
 8016278:	2300      	movs	r3, #0
 801627a:	552b      	strb	r3, [r5, r4]
		break;
 801627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler_states[handler_num].rx_state += 2;
 8016280:	4431      	add	r1, r6
		if (rx_data == 2) {
 8016282:	2802      	cmp	r0, #2
			handler_states[handler_num].rx_state += 2;
 8016284:	ea4f 1141 	mov.w	r1, r1, lsl #5
		if (rx_data == 2) {
 8016288:	d063      	beq.n	8016352 <packet_process_byte+0x102>
		} else if (rx_data == 3) {
 801628a:	2803      	cmp	r0, #3
 801628c:	d053      	beq.n	8016336 <packet_process_byte+0xe6>

	default:
		handler_states[handler_num].rx_state = 0;
 801628e:	2300      	movs	r3, #0
 8016290:	546b      	strb	r3, [r5, r1]
 8016292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		handler_states[handler_num].payload_length = (unsigned int)rx_data << 8;
 8016296:	4431      	add	r1, r6
 8016298:	0149      	lsls	r1, r1, #5
 801629a:	186a      	adds	r2, r5, r1
		handler_states[handler_num].rx_state++;
 801629c:	5c6b      	ldrb	r3, [r5, r1]
 801629e:	3301      	adds	r3, #1
 80162a0:	b2db      	uxtb	r3, r3
 80162a2:	546b      	strb	r3, [r5, r1]
		handler_states[handler_num].payload_length = (unsigned int)rx_data << 8;
 80162a4:	0200      	lsls	r0, r0, #8
		handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80162a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		handler_states[handler_num].payload_length = (unsigned int)rx_data << 8;
 80162aa:	60d0      	str	r0, [r2, #12]
		handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80162ac:	8054      	strh	r4, [r2, #2]
		break;
 80162ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		handler_states[handler_num].payload_length |= (unsigned int)rx_data;
 80162b2:	4431      	add	r1, r6
 80162b4:	0149      	lsls	r1, r1, #5
 80162b6:	186a      	adds	r2, r5, r1
 80162b8:	68d3      	ldr	r3, [r2, #12]
 80162ba:	4318      	orrs	r0, r3
		if (handler_states[handler_num].payload_length > 0 &&
 80162bc:	1e43      	subs	r3, r0, #1
 80162be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		handler_states[handler_num].payload_length |= (unsigned int)rx_data;
 80162c2:	60d0      	str	r0, [r2, #12]
		if (handler_states[handler_num].payload_length > 0 &&
 80162c4:	d2e3      	bcs.n	801628e <packet_process_byte+0x3e>
			handler_states[handler_num].rx_state++;
 80162c6:	5c6b      	ldrb	r3, [r5, r1]
		handler_states[handler_num].rx_state++;
 80162c8:	3301      	adds	r3, #1
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	546b      	strb	r3, [r5, r1]
		handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80162ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162d2:	8050      	strh	r0, [r2, #2]
		break;
 80162d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		handler_states[handler_num].rx_buffer[handler_states[handler_num].rx_data_ptr++] = rx_data;
 80162d8:	1874      	adds	r4, r6, r1
 80162da:	0164      	lsls	r4, r4, #5
 80162dc:	192a      	adds	r2, r5, r4
 80162de:	f8d2 3818 	ldr.w	r3, [r2, #2072]	; 0x818
		if (handler_states[handler_num].rx_data_ptr == handler_states[handler_num].payload_length) {
 80162e2:	68d7      	ldr	r7, [r2, #12]
		handler_states[handler_num].rx_buffer[handler_states[handler_num].rx_data_ptr++] = rx_data;
 80162e4:	eb02 0e03 	add.w	lr, r2, r3
 80162e8:	3301      	adds	r3, #1
		if (handler_states[handler_num].rx_data_ptr == handler_states[handler_num].payload_length) {
 80162ea:	42bb      	cmp	r3, r7
		handler_states[handler_num].rx_buffer[handler_states[handler_num].rx_data_ptr++] = rx_data;
 80162ec:	f88e 0010 	strb.w	r0, [lr, #16]
 80162f0:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
		if (handler_states[handler_num].rx_data_ptr == handler_states[handler_num].payload_length) {
 80162f4:	d103      	bne.n	80162fe <packet_process_byte+0xae>
			handler_states[handler_num].rx_state++;
 80162f6:	5d2b      	ldrb	r3, [r5, r4]
 80162f8:	3301      	adds	r3, #1
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	552b      	strb	r3, [r5, r4]
		handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80162fe:	4431      	add	r1, r6
 8016300:	eb05 1541 	add.w	r5, r5, r1, lsl #5
 8016304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016308:	806b      	strh	r3, [r5, #2]
		break;
 801630a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		handler_states[handler_num].crc_high = rx_data;
 801630e:	4431      	add	r1, r6
 8016310:	0149      	lsls	r1, r1, #5
 8016312:	186a      	adds	r2, r5, r1
		handler_states[handler_num].rx_state++;
 8016314:	5c6b      	ldrb	r3, [r5, r1]
		handler_states[handler_num].crc_high = rx_data;
 8016316:	f882 081d 	strb.w	r0, [r2, #2077]	; 0x81d
 801631a:	e7d5      	b.n	80162c8 <packet_process_byte+0x78>
		handler_states[handler_num].crc_low = rx_data;
 801631c:	4431      	add	r1, r6
 801631e:	0149      	lsls	r1, r1, #5
 8016320:	186a      	adds	r2, r5, r1
		handler_states[handler_num].rx_state++;
 8016322:	5c6b      	ldrb	r3, [r5, r1]
		handler_states[handler_num].crc_low = rx_data;
 8016324:	f882 081c 	strb.w	r0, [r2, #2076]	; 0x81c
 8016328:	e7ce      	b.n	80162c8 <packet_process_byte+0x78>
		handler_states[handler_num].rx_state = 0;
 801632a:	4431      	add	r1, r6
 801632c:	0149      	lsls	r1, r1, #5
 801632e:	2300      	movs	r3, #0
 8016330:	546b      	strb	r3, [r5, r1]
 8016332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler_states[handler_num].rx_state++;
 8016336:	5c6b      	ldrb	r3, [r5, r1]
 8016338:	186a      	adds	r2, r5, r1
 801633a:	3301      	adds	r3, #1
 801633c:	b2db      	uxtb	r3, r3
 801633e:	546b      	strb	r3, [r5, r1]
			handler_states[handler_num].rx_data_ptr = 0;
 8016340:	2000      	movs	r0, #0
			handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 8016342:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
			handler_states[handler_num].rx_data_ptr = 0;
 8016346:	f8c2 0818 	str.w	r0, [r2, #2072]	; 0x818
			handler_states[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 801634a:	8054      	strh	r4, [r2, #2]
			handler_states[handler_num].payload_length = 0;
 801634c:	60d0      	str	r0, [r2, #12]
 801634e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler_states[handler_num].rx_state += 2;
 8016352:	5c6b      	ldrb	r3, [r5, r1]
 8016354:	186a      	adds	r2, r5, r1
 8016356:	3302      	adds	r3, #2
 8016358:	e7f0      	b.n	801633c <packet_process_byte+0xec>
 801635a:	1877      	adds	r7, r6, r1
 801635c:	017f      	lsls	r7, r7, #5
			if (crc16(handler_states[handler_num].rx_buffer, handler_states[handler_num].payload_length)
 801635e:	f107 0810 	add.w	r8, r7, #16
 8016362:	442f      	add	r7, r5
 8016364:	44a8      	add	r8, r5
 8016366:	4640      	mov	r0, r8
 8016368:	68f9      	ldr	r1, [r7, #12]
 801636a:	f7fb fde9 	bl	8011f40 <crc16>
 801636e:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 8016372:	4283      	cmp	r3, r0
 8016374:	f47f af7e 	bne.w	8016274 <packet_process_byte+0x24>
				if (handler_states[handler_num].process_func) {
 8016378:	68bb      	ldr	r3, [r7, #8]
 801637a:	2b00      	cmp	r3, #0
 801637c:	f43f af7a 	beq.w	8016274 <packet_process_byte+0x24>
					handler_states[handler_num].process_func(handler_states[handler_num].rx_buffer,
 8016380:	68f9      	ldr	r1, [r7, #12]
 8016382:	4640      	mov	r0, r8
 8016384:	4798      	blx	r3
 8016386:	e775      	b.n	8016274 <packet_process_byte+0x24>
 8016388:	200063d4 	.word	0x200063d4
 801638c:	00000000 	.word	0x00000000

08016390 <terminal_process_string>:
static volatile fault_data fault_vec[FAULT_VEC_LEN];
static volatile int fault_vec_write = 0;
static terminal_callback_struct callbacks[CALLBACK_LEN];
static int callback_write = 0;

void terminal_process_string(char *str) {
 8016390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016394:	ed2d 8b08 	vpush	{d8-d11}
	enum { kMaxArgs = 64 };
	int argc = 0;
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8016398:	4990      	ldr	r1, [pc, #576]	; (80165dc <terminal_process_string+0x24c>)
void terminal_process_string(char *str) {
 801639a:	b0d8      	sub	sp, #352	; 0x160
	char *p2 = strtok(str, " ");
 801639c:	f011 fcf8 	bl	8027d90 <strtok>
	while (p2 && argc < kMaxArgs) {
 80163a0:	2800      	cmp	r0, #0
 80163a2:	d07d      	beq.n	80164a0 <terminal_process_string+0x110>
 80163a4:	4603      	mov	r3, r0
		argv[argc++] = p2;
		p2 = strtok(0, " ");
 80163a6:	4e8d      	ldr	r6, [pc, #564]	; (80165dc <terminal_process_string+0x24c>)
 80163a8:	ad17      	add	r5, sp, #92	; 0x5c
	while (p2 && argc < kMaxArgs) {
 80163aa:	2400      	movs	r4, #0
 80163ac:	e001      	b.n	80163b2 <terminal_process_string+0x22>
 80163ae:	2c40      	cmp	r4, #64	; 0x40
 80163b0:	d009      	beq.n	80163c6 <terminal_process_string+0x36>
		argv[argc++] = p2;
 80163b2:	f845 3f04 	str.w	r3, [r5, #4]!
		p2 = strtok(0, " ");
 80163b6:	4631      	mov	r1, r6
 80163b8:	2000      	movs	r0, #0
 80163ba:	f011 fce9 	bl	8027d90 <strtok>
		argv[argc++] = p2;
 80163be:	3401      	adds	r4, #1
	while (p2 && argc < kMaxArgs) {
 80163c0:	4603      	mov	r3, r0
 80163c2:	2800      	cmp	r0, #0
 80163c4:	d1f3      	bne.n	80163ae <terminal_process_string+0x1e>
		return;
	}

	static mc_configuration mcconf; // static to save some stack
	static mc_configuration mcconf_old; // static to save some stack
	mcconf = *mc_interface_get_configuration();
 80163c6:	f005 f83b 	bl	801b440 <mc_interface_get_configuration>
 80163ca:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80163ce:	4601      	mov	r1, r0
 80163d0:	4883      	ldr	r0, [pc, #524]	; (80165e0 <terminal_process_string+0x250>)
 80163d2:	f7f6 fb9d 	bl	800cb10 <memcpy>
	mcconf_old = mcconf;
 80163d6:	4982      	ldr	r1, [pc, #520]	; (80165e0 <terminal_process_string+0x250>)
 80163d8:	4882      	ldr	r0, [pc, #520]	; (80165e4 <terminal_process_string+0x254>)
 80163da:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80163de:	f7f6 fb97 	bl	800cb10 <memcpy>

	if (strcmp(argv[0], "ping") == 0) {
 80163e2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80163e4:	4980      	ldr	r1, [pc, #512]	; (80165e8 <terminal_process_string+0x258>)
 80163e6:	4628      	mov	r0, r5
 80163e8:	f7f6 fc36 	bl	800cc58 <strcmp>
 80163ec:	2800      	cmp	r0, #0
 80163ee:	d05f      	beq.n	80164b0 <terminal_process_string+0x120>
		commands_printf("pong\n");
	} else if (strcmp(argv[0], "stop") == 0) {
 80163f0:	497e      	ldr	r1, [pc, #504]	; (80165ec <terminal_process_string+0x25c>)
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7f6 fc30 	bl	800cc58 <strcmp>
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d06d      	beq.n	80164d8 <terminal_process_string+0x148>
		mc_interface_set_duty(0);
		commands_printf("Motor stopped\n");
	} else if (strcmp(argv[0], "last_adc_duration") == 0) {
 80163fc:	497c      	ldr	r1, [pc, #496]	; (80165f0 <terminal_process_string+0x260>)
 80163fe:	4628      	mov	r0, r5
 8016400:	f7f6 fc2a 	bl	800cc58 <strcmp>
 8016404:	2800      	cmp	r0, #0
 8016406:	d073      	beq.n	80164f0 <terminal_process_string+0x160>
		commands_printf("Latest ADC duration: %.4f ms", (double)(mcpwm_get_last_adc_isr_duration() * 1000.0));
		commands_printf("Latest injected ADC duration: %.4f ms", (double)(mc_interface_get_last_inj_adc_isr_duration() * 1000.0));
		commands_printf("Latest sample ADC duration: %.4f ms\n", (double)(mc_interface_get_last_sample_adc_isr_duration() * 1000.0));
	} else if (strcmp(argv[0], "kv") == 0) {
 8016408:	497a      	ldr	r1, [pc, #488]	; (80165f4 <terminal_process_string+0x264>)
 801640a:	4628      	mov	r0, r5
 801640c:	f7f6 fc24 	bl	800cc58 <strcmp>
 8016410:	2800      	cmp	r0, #0
 8016412:	d055      	beq.n	80164c0 <terminal_process_string+0x130>
		commands_printf("Calculated KV: %.2f rpm/volt\n", (double)mcpwm_get_kv_filtered());
	} else if (strcmp(argv[0], "mem") == 0) {
 8016414:	4978      	ldr	r1, [pc, #480]	; (80165f8 <terminal_process_string+0x268>)
 8016416:	4628      	mov	r0, r5
 8016418:	f7f6 fc1e 	bl	800cc58 <strcmp>
 801641c:	2800      	cmp	r0, #0
 801641e:	f000 809a 	beq.w	8016556 <terminal_process_string+0x1c6>
		size_t n, size;
		n = chHeapStatus(NULL, &size);
		commands_printf("core free memory : %u bytes", chCoreGetStatusX());
		commands_printf("heap fragments   : %u", n);
		commands_printf("heap free total  : %u bytes\n", size);
	} else if (strcmp(argv[0], "threads") == 0) {
 8016422:	4976      	ldr	r1, [pc, #472]	; (80165fc <terminal_process_string+0x26c>)
 8016424:	4628      	mov	r0, r5
 8016426:	f7f6 fc17 	bl	800cc58 <strcmp>
 801642a:	2800      	cmp	r0, #0
 801642c:	f000 80a6 	beq.w	801657c <terminal_process_string+0x1ec>
					(uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
					states[tp->p_state], tp->p_name, (uint32_t)tp->p_time);
			tp = chRegNextThread(tp);
		} while (tp != NULL);
		commands_printf("");
	} else if (strcmp(argv[0], "fault") == 0) {
 8016430:	4973      	ldr	r1, [pc, #460]	; (8016600 <terminal_process_string+0x270>)
 8016432:	4628      	mov	r0, r5
 8016434:	f7f6 fc10 	bl	800cc58 <strcmp>
 8016438:	2800      	cmp	r0, #0
 801643a:	f000 80c5 	beq.w	80165c8 <terminal_process_string+0x238>
		commands_printf("%s\n", mc_interface_fault_to_string(mc_interface_get_fault()));
	} else if (strcmp(argv[0], "faults") == 0) {
 801643e:	4971      	ldr	r1, [pc, #452]	; (8016604 <terminal_process_string+0x274>)
 8016440:	4628      	mov	r0, r5
 8016442:	f7f6 fc09 	bl	800cc58 <strcmp>
 8016446:	4606      	mov	r6, r0
 8016448:	2800      	cmp	r0, #0
 801644a:	d07b      	beq.n	8016544 <terminal_process_string+0x1b4>
				}
#endif
				commands_printf(" ");
			}
		}
	} else if (strcmp(argv[0], "rpm") == 0) {
 801644c:	496e      	ldr	r1, [pc, #440]	; (8016608 <terminal_process_string+0x278>)
 801644e:	4628      	mov	r0, r5
 8016450:	f7f6 fc02 	bl	800cc58 <strcmp>
 8016454:	2800      	cmp	r0, #0
 8016456:	f000 8184 	beq.w	8016762 <terminal_process_string+0x3d2>
		commands_printf("Electrical RPM: %.2f rpm\n", (double)mc_interface_get_rpm());
	} else if (strcmp(argv[0], "tacho") == 0) {
 801645a:	496c      	ldr	r1, [pc, #432]	; (801660c <terminal_process_string+0x27c>)
 801645c:	4628      	mov	r0, r5
 801645e:	f7f6 fbfb 	bl	800cc58 <strcmp>
 8016462:	2800      	cmp	r0, #0
 8016464:	f000 8189 	beq.w	801677a <terminal_process_string+0x3ea>
		commands_printf("Tachometer counts: %i\n", mc_interface_get_tachometer_value(0));
	} else if (strcmp(argv[0], "tim") == 0) {
 8016468:	4969      	ldr	r1, [pc, #420]	; (8016610 <terminal_process_string+0x280>)
 801646a:	4628      	mov	r0, r5
 801646c:	f7f6 fbf4 	bl	800cc58 <strcmp>
 8016470:	2800      	cmp	r0, #0
 8016472:	f000 81bf 	beq.w	80167f4 <terminal_process_string+0x464>
		commands_printf("Dir1: %u", dir1);
		commands_printf("Dir8: %u", dir8);
		commands_printf("Voltage sample: %u", voltage_samp);
		commands_printf("Current 1 sample: %u", current1_samp);
		commands_printf("Current 2 sample: %u\n", current2_samp);
	} else if (strcmp(argv[0], "volt") == 0) {
 8016476:	4967      	ldr	r1, [pc, #412]	; (8016614 <terminal_process_string+0x284>)
 8016478:	4628      	mov	r0, r5
 801647a:	f7f6 fbed 	bl	800cc58 <strcmp>
 801647e:	2800      	cmp	r0, #0
 8016480:	f000 819f 	beq.w	80167c2 <terminal_process_string+0x432>
		commands_printf("Input voltage: %.2f\n", (double)GET_INPUT_VOLTAGE());
	} else if (strcmp(argv[0], "param_detect") == 0) {
 8016484:	4964      	ldr	r1, [pc, #400]	; (8016618 <terminal_process_string+0x288>)
 8016486:	4628      	mov	r0, r5
 8016488:	f7f6 fbe6 	bl	800cc58 <strcmp>
 801648c:	2800      	cmp	r0, #0
 801648e:	f040 817b 	bne.w	8016788 <terminal_process_string+0x3f8>
		// Use COMM_MODE_DELAY and try to figure out the motor parameters.
		if (argc == 4) {
 8016492:	2c04      	cmp	r4, #4
 8016494:	f000 81f8 	beq.w	8016888 <terminal_process_string+0x4f8>
				}
			} else {
				commands_printf("Invalid argument(s).\n");
			}
		} else {
			commands_printf("This command requires three arguments.\n");
 8016498:	4860      	ldr	r0, [pc, #384]	; (801661c <terminal_process_string+0x28c>)
 801649a:	f002 f919 	bl	80186d0 <commands_printf>
 801649e:	e002      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("No command received\n");
 80164a0:	485f      	ldr	r0, [pc, #380]	; (8016620 <terminal_process_string+0x290>)
 80164a2:	f002 f915 	bl	80186d0 <commands_printf>
		if (!found) {
			commands_printf("Invalid command: %s\n"
					"type help to list all available commands\n", argv[0]);
		}
	}
}
 80164a6:	b058      	add	sp, #352	; 0x160
 80164a8:	ecbd 8b08 	vpop	{d8-d11}
 80164ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		commands_printf("pong\n");
 80164b0:	485c      	ldr	r0, [pc, #368]	; (8016624 <terminal_process_string+0x294>)
 80164b2:	f002 f90d 	bl	80186d0 <commands_printf>
}
 80164b6:	b058      	add	sp, #352	; 0x160
 80164b8:	ecbd 8b08 	vpop	{d8-d11}
 80164bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		commands_printf("Calculated KV: %.2f rpm/volt\n", (double)mcpwm_get_kv_filtered());
 80164c0:	f7fd fb66 	bl	8013b90 <mcpwm_get_kv_filtered>
 80164c4:	ee10 0a10 	vmov	r0, s0
 80164c8:	f7f5 ff9e 	bl	800c408 <__aeabi_f2d>
 80164cc:	4602      	mov	r2, r0
 80164ce:	460b      	mov	r3, r1
 80164d0:	4855      	ldr	r0, [pc, #340]	; (8016628 <terminal_process_string+0x298>)
 80164d2:	f002 f8fd 	bl	80186d0 <commands_printf>
 80164d6:	e7e6      	b.n	80164a6 <terminal_process_string+0x116>
		mc_interface_set_duty(0);
 80164d8:	ed9f 0a54 	vldr	s0, [pc, #336]	; 801662c <terminal_process_string+0x29c>
 80164dc:	f005 fec8 	bl	801c270 <mc_interface_set_duty>
		commands_printf("Motor stopped\n");
 80164e0:	4853      	ldr	r0, [pc, #332]	; (8016630 <terminal_process_string+0x2a0>)
 80164e2:	f002 f8f5 	bl	80186d0 <commands_printf>
}
 80164e6:	b058      	add	sp, #352	; 0x160
 80164e8:	ecbd 8b08 	vpop	{d8-d11}
 80164ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		commands_printf("Latest ADC duration: %.4f ms", (double)(mcpwm_get_last_adc_isr_duration() * 1000.0));
 80164f0:	f7fd fed6 	bl	80142a0 <mcpwm_get_last_adc_isr_duration>
 80164f4:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 8016634 <terminal_process_string+0x2a4>
 80164f8:	ee60 7a08 	vmul.f32	s15, s0, s16
 80164fc:	ee17 0a90 	vmov	r0, s15
 8016500:	f7f5 ff82 	bl	800c408 <__aeabi_f2d>
 8016504:	4602      	mov	r2, r0
 8016506:	460b      	mov	r3, r1
 8016508:	484b      	ldr	r0, [pc, #300]	; (8016638 <terminal_process_string+0x2a8>)
 801650a:	f002 f8e1 	bl	80186d0 <commands_printf>
		commands_printf("Latest injected ADC duration: %.4f ms", (double)(mc_interface_get_last_inj_adc_isr_duration() * 1000.0));
 801650e:	f005 fd87 	bl	801c020 <mc_interface_get_last_inj_adc_isr_duration>
 8016512:	ee60 7a08 	vmul.f32	s15, s0, s16
 8016516:	ee17 0a90 	vmov	r0, s15
 801651a:	f7f5 ff75 	bl	800c408 <__aeabi_f2d>
 801651e:	4602      	mov	r2, r0
 8016520:	460b      	mov	r3, r1
 8016522:	4846      	ldr	r0, [pc, #280]	; (801663c <terminal_process_string+0x2ac>)
 8016524:	f002 f8d4 	bl	80186d0 <commands_printf>
		commands_printf("Latest sample ADC duration: %.4f ms\n", (double)(mc_interface_get_last_sample_adc_isr_duration() * 1000.0));
 8016528:	f005 fe22 	bl	801c170 <mc_interface_get_last_sample_adc_isr_duration>
 801652c:	ee60 7a08 	vmul.f32	s15, s0, s16
 8016530:	ee17 0a90 	vmov	r0, s15
 8016534:	f7f5 ff68 	bl	800c408 <__aeabi_f2d>
 8016538:	4602      	mov	r2, r0
 801653a:	460b      	mov	r3, r1
 801653c:	4840      	ldr	r0, [pc, #256]	; (8016640 <terminal_process_string+0x2b0>)
 801653e:	f002 f8c7 	bl	80186d0 <commands_printf>
 8016542:	e7b0      	b.n	80164a6 <terminal_process_string+0x116>
		if (fault_vec_write == 0) {
 8016544:	4f3f      	ldr	r7, [pc, #252]	; (8016644 <terminal_process_string+0x2b4>)
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	2b00      	cmp	r3, #0
 801654a:	f040 8091 	bne.w	8016670 <terminal_process_string+0x2e0>
			commands_printf("No faults registered since startup\n");
 801654e:	483e      	ldr	r0, [pc, #248]	; (8016648 <terminal_process_string+0x2b8>)
 8016550:	f002 f8be 	bl	80186d0 <commands_printf>
 8016554:	e7a7      	b.n	80164a6 <terminal_process_string+0x116>
		n = chHeapStatus(NULL, &size);
 8016556:	a911      	add	r1, sp, #68	; 0x44
 8016558:	f7f7 feaa 	bl	800e2b0 <chHeapStatus>
 801655c:	4604      	mov	r4, r0
		commands_printf("core free memory : %u bytes", chCoreGetStatusX());
 801655e:	f7f7 fe3f 	bl	800e1e0 <chCoreGetStatusX>
 8016562:	4601      	mov	r1, r0
 8016564:	4839      	ldr	r0, [pc, #228]	; (801664c <terminal_process_string+0x2bc>)
 8016566:	f002 f8b3 	bl	80186d0 <commands_printf>
		commands_printf("heap fragments   : %u", n);
 801656a:	4621      	mov	r1, r4
 801656c:	4838      	ldr	r0, [pc, #224]	; (8016650 <terminal_process_string+0x2c0>)
 801656e:	f002 f8af 	bl	80186d0 <commands_printf>
		commands_printf("heap free total  : %u bytes\n", size);
 8016572:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016574:	4837      	ldr	r0, [pc, #220]	; (8016654 <terminal_process_string+0x2c4>)
 8016576:	f002 f8ab 	bl	80186d0 <commands_printf>
 801657a:	e794      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("    addr    stack prio refs     state           name time    ");
 801657c:	4836      	ldr	r0, [pc, #216]	; (8016658 <terminal_process_string+0x2c8>)
 801657e:	4e37      	ldr	r6, [pc, #220]	; (801665c <terminal_process_string+0x2cc>)
			commands_printf("%.8lx %.8lx %4lu %4lu %9s %14s %lu",
 8016580:	4d37      	ldr	r5, [pc, #220]	; (8016660 <terminal_process_string+0x2d0>)
		commands_printf("    addr    stack prio refs     state           name time    ");
 8016582:	f002 f8a5 	bl	80186d0 <commands_printf>
		commands_printf("-------------------------------------------------------------");
 8016586:	4837      	ldr	r0, [pc, #220]	; (8016664 <terminal_process_string+0x2d4>)
 8016588:	f002 f8a2 	bl	80186d0 <commands_printf>
		tp = chRegFirstThread();
 801658c:	f7f7 fb38 	bl	800dc00 <chRegFirstThread>
 8016590:	4604      	mov	r4, r0
					states[tp->p_state], tp->p_name, (uint32_t)tp->p_time);
 8016592:	6a21      	ldr	r1, [r4, #32]
			commands_printf("%.8lx %.8lx %4lu %4lu %9s %14s %lu",
 8016594:	68a3      	ldr	r3, [r4, #8]
 8016596:	68e2      	ldr	r2, [r4, #12]
 8016598:	9103      	str	r1, [sp, #12]
 801659a:	69a1      	ldr	r1, [r4, #24]
 801659c:	9102      	str	r1, [sp, #8]
					states[tp->p_state], tp->p_name, (uint32_t)tp->p_time);
 801659e:	7f21      	ldrb	r1, [r4, #28]
			commands_printf("%.8lx %.8lx %4lu %4lu %9s %14s %lu",
 80165a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80165a4:	9101      	str	r1, [sp, #4]
					(uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80165a6:	7fa1      	ldrb	r1, [r4, #30]
 80165a8:	3901      	subs	r1, #1
			commands_printf("%.8lx %.8lx %4lu %4lu %9s %14s %lu",
 80165aa:	9100      	str	r1, [sp, #0]
 80165ac:	4628      	mov	r0, r5
 80165ae:	4621      	mov	r1, r4
 80165b0:	f002 f88e 	bl	80186d0 <commands_printf>
			tp = chRegNextThread(tp);
 80165b4:	4620      	mov	r0, r4
 80165b6:	f7f7 fb33 	bl	800dc20 <chRegNextThread>
		} while (tp != NULL);
 80165ba:	4604      	mov	r4, r0
 80165bc:	2800      	cmp	r0, #0
 80165be:	d1e8      	bne.n	8016592 <terminal_process_string+0x202>
		commands_printf("");
 80165c0:	4829      	ldr	r0, [pc, #164]	; (8016668 <terminal_process_string+0x2d8>)
 80165c2:	f002 f885 	bl	80186d0 <commands_printf>
 80165c6:	e76e      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("%s\n", mc_interface_fault_to_string(mc_interface_get_fault()));
 80165c8:	f004 ff6a 	bl	801b4a0 <mc_interface_get_fault>
 80165cc:	f004 ff70 	bl	801b4b0 <mc_interface_fault_to_string>
 80165d0:	4601      	mov	r1, r0
 80165d2:	4826      	ldr	r0, [pc, #152]	; (801666c <terminal_process_string+0x2dc>)
 80165d4:	f002 f87c 	bl	80186d0 <commands_printf>
 80165d8:	e765      	b.n	80164a6 <terminal_process_string+0x116>
 80165da:	bf00      	nop
 80165dc:	0802f33c 	.word	0x0802f33c
 80165e0:	20007b24 	.word	0x20007b24
 80165e4:	20007c98 	.word	0x20007c98
 80165e8:	0802f1d0 	.word	0x0802f1d0
 80165ec:	0802f1e0 	.word	0x0802f1e0
 80165f0:	0802f1f8 	.word	0x0802f1f8
 80165f4:	0802f27c 	.word	0x0802f27c
 80165f8:	0802f2a0 	.word	0x0802f2a0
 80165fc:	0802f2f8 	.word	0x0802f2f8
 8016600:	0802f3a4 	.word	0x0802f3a4
 8016604:	0802f3b0 	.word	0x0802f3b0
 8016608:	0802f560 	.word	0x0802f560
 801660c:	0802f580 	.word	0x0802f580
 8016610:	0802f5a0 	.word	0x0802f5a0
 8016614:	0802f658 	.word	0x0802f658
 8016618:	0802f678 	.word	0x0802f678
 801661c:	0802f7d0 	.word	0x0802f7d0
 8016620:	0802f1b8 	.word	0x0802f1b8
 8016624:	0802f1d8 	.word	0x0802f1d8
 8016628:	0802f280 	.word	0x0802f280
 801662c:	00000000 	.word	0x00000000
 8016630:	0802f1e8 	.word	0x0802f1e8
 8016634:	447a0000 	.word	0x447a0000
 8016638:	0802f20c 	.word	0x0802f20c
 801663c:	0802f22c 	.word	0x0802f22c
 8016640:	0802f254 	.word	0x0802f254
 8016644:	20007b20 	.word	0x20007b20
 8016648:	0802f3b8 	.word	0x0802f3b8
 801664c:	0802f2a4 	.word	0x0802f2a4
 8016650:	0802f2c0 	.word	0x0802f2c0
 8016654:	0802f2d8 	.word	0x0802f2d8
 8016658:	0802f300 	.word	0x0802f300
 801665c:	0802f0d0 	.word	0x0802f0d0
 8016660:	0802f380 	.word	0x0802f380
 8016664:	0802f340 	.word	0x0802f340
 8016668:	0802f9b0 	.word	0x0802f9b0
 801666c:	0802f3ac 	.word	0x0802f3ac
			commands_printf("The following faults were registered since start:\n");
 8016670:	48c5      	ldr	r0, [pc, #788]	; (8016988 <terminal_process_string+0x5f8>)
 8016672:	f002 f82d 	bl	80186d0 <commands_printf>
			for (int i = 0;i < fault_vec_write;i++) {
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	2b00      	cmp	r3, #0
 801667a:	f77f af14 	ble.w	80164a6 <terminal_process_string+0x116>
 801667e:	4dc3      	ldr	r5, [pc, #780]	; (801698c <terminal_process_string+0x5fc>)
				commands_printf("Fault            : %s", mc_interface_fault_to_string(fault_vec[i].fault));
 8016680:	f8df a3c0 	ldr.w	sl, [pc, #960]	; 8016a44 <terminal_process_string+0x6b4>
				commands_printf("Current          : %.1f", (double)fault_vec[i].current);
 8016684:	f8df 93c0 	ldr.w	r9, [pc, #960]	; 8016a48 <terminal_process_string+0x6b8>
				commands_printf("Current filtered : %.1f", (double)fault_vec[i].current_filtered);
 8016688:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 8016a4c <terminal_process_string+0x6bc>
				commands_printf("Fault            : %s", mc_interface_fault_to_string(fault_vec[i].fault));
 801668c:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 8016690:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8016694:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
 8016698:	f004 ff0a 	bl	801b4b0 <mc_interface_fault_to_string>
 801669c:	4601      	mov	r1, r0
 801669e:	4650      	mov	r0, sl
 80166a0:	f002 f816 	bl	80186d0 <commands_printf>
				commands_printf("Current          : %.1f", (double)fault_vec[i].current);
 80166a4:	6860      	ldr	r0, [r4, #4]
 80166a6:	f7f5 feaf 	bl	800c408 <__aeabi_f2d>
 80166aa:	4602      	mov	r2, r0
 80166ac:	460b      	mov	r3, r1
 80166ae:	4648      	mov	r0, r9
 80166b0:	f002 f80e 	bl	80186d0 <commands_printf>
				commands_printf("Current filtered : %.1f", (double)fault_vec[i].current_filtered);
 80166b4:	68a0      	ldr	r0, [r4, #8]
 80166b6:	f7f5 fea7 	bl	800c408 <__aeabi_f2d>
 80166ba:	4602      	mov	r2, r0
 80166bc:	460b      	mov	r3, r1
 80166be:	4640      	mov	r0, r8
 80166c0:	f002 f806 	bl	80186d0 <commands_printf>
				commands_printf("Voltage          : %.2f", (double)fault_vec[i].voltage);
 80166c4:	68e0      	ldr	r0, [r4, #12]
 80166c6:	f7f5 fe9f 	bl	800c408 <__aeabi_f2d>
 80166ca:	4602      	mov	r2, r0
 80166cc:	460b      	mov	r3, r1
 80166ce:	48b0      	ldr	r0, [pc, #704]	; (8016990 <terminal_process_string+0x600>)
 80166d0:	f001 fffe 	bl	80186d0 <commands_printf>
				commands_printf("Duty             : %.3f", (double)fault_vec[i].duty);
 80166d4:	6920      	ldr	r0, [r4, #16]
 80166d6:	f7f5 fe97 	bl	800c408 <__aeabi_f2d>
 80166da:	4602      	mov	r2, r0
 80166dc:	460b      	mov	r3, r1
 80166de:	48ad      	ldr	r0, [pc, #692]	; (8016994 <terminal_process_string+0x604>)
 80166e0:	f001 fff6 	bl	80186d0 <commands_printf>
				commands_printf("RPM              : %.1f", (double)fault_vec[i].rpm);
 80166e4:	6960      	ldr	r0, [r4, #20]
 80166e6:	f7f5 fe8f 	bl	800c408 <__aeabi_f2d>
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	48aa      	ldr	r0, [pc, #680]	; (8016998 <terminal_process_string+0x608>)
 80166f0:	f001 ffee 	bl	80186d0 <commands_printf>
				commands_printf("Tacho            : %d", fault_vec[i].tacho);
 80166f4:	69a1      	ldr	r1, [r4, #24]
 80166f6:	48a9      	ldr	r0, [pc, #676]	; (801699c <terminal_process_string+0x60c>)
 80166f8:	f001 ffea 	bl	80186d0 <commands_printf>
				commands_printf("Cycles running   : %d", fault_vec[i].cycles_running);
 80166fc:	69e1      	ldr	r1, [r4, #28]
 80166fe:	48a8      	ldr	r0, [pc, #672]	; (80169a0 <terminal_process_string+0x610>)
 8016700:	f001 ffe6 	bl	80186d0 <commands_printf>
				commands_printf("TIM duty         : %d", (int)((float)fault_vec[i].tim_top * fault_vec[i].duty));
 8016704:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8016708:	ed94 7a04 	vldr	s14, [r4, #16]
 801670c:	48a5      	ldr	r0, [pc, #660]	; (80169a4 <terminal_process_string+0x614>)
 801670e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			for (int i = 0;i < fault_vec_write;i++) {
 8016712:	3601      	adds	r6, #1
				commands_printf("TIM duty         : %d", (int)((float)fault_vec[i].tim_top * fault_vec[i].duty));
 8016714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801671c:	ee17 1a90 	vmov	r1, s15
 8016720:	f001 ffd6 	bl	80186d0 <commands_printf>
				commands_printf("TIM val samp     : %d", fault_vec[i].tim_val_samp);
 8016724:	6a21      	ldr	r1, [r4, #32]
 8016726:	48a0      	ldr	r0, [pc, #640]	; (80169a8 <terminal_process_string+0x618>)
 8016728:	f001 ffd2 	bl	80186d0 <commands_printf>
				commands_printf("TIM current samp : %d", fault_vec[i].tim_current_samp);
 801672c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801672e:	489f      	ldr	r0, [pc, #636]	; (80169ac <terminal_process_string+0x61c>)
 8016730:	f001 ffce 	bl	80186d0 <commands_printf>
				commands_printf("TIM top          : %d", fault_vec[i].tim_top);
 8016734:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016736:	489e      	ldr	r0, [pc, #632]	; (80169b0 <terminal_process_string+0x620>)
 8016738:	f001 ffca 	bl	80186d0 <commands_printf>
				commands_printf("Comm step        : %d", fault_vec[i].comm_step);
 801673c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801673e:	489d      	ldr	r0, [pc, #628]	; (80169b4 <terminal_process_string+0x624>)
 8016740:	f001 ffc6 	bl	80186d0 <commands_printf>
				commands_printf("Temperature      : %.2f", (double)fault_vec[i].temperature);
 8016744:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016746:	f7f5 fe5f 	bl	800c408 <__aeabi_f2d>
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	489a      	ldr	r0, [pc, #616]	; (80169b8 <terminal_process_string+0x628>)
 8016750:	f001 ffbe 	bl	80186d0 <commands_printf>
				commands_printf(" ");
 8016754:	4899      	ldr	r0, [pc, #612]	; (80169bc <terminal_process_string+0x62c>)
 8016756:	f001 ffbb 	bl	80186d0 <commands_printf>
			for (int i = 0;i < fault_vec_write;i++) {
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	42b3      	cmp	r3, r6
 801675e:	dc95      	bgt.n	801668c <terminal_process_string+0x2fc>
 8016760:	e6a1      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("Electrical RPM: %.2f rpm\n", (double)mc_interface_get_rpm());
 8016762:	f004 ff05 	bl	801b570 <mc_interface_get_rpm>
 8016766:	ee10 0a10 	vmov	r0, s0
 801676a:	f7f5 fe4d 	bl	800c408 <__aeabi_f2d>
 801676e:	4602      	mov	r2, r0
 8016770:	460b      	mov	r3, r1
 8016772:	4893      	ldr	r0, [pc, #588]	; (80169c0 <terminal_process_string+0x630>)
 8016774:	f001 ffac 	bl	80186d0 <commands_printf>
 8016778:	e695      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("Tachometer counts: %i\n", mc_interface_get_tachometer_value(0));
 801677a:	f004 fff9 	bl	801b770 <mc_interface_get_tachometer_value>
 801677e:	4601      	mov	r1, r0
 8016780:	4890      	ldr	r0, [pc, #576]	; (80169c4 <terminal_process_string+0x634>)
 8016782:	f001 ffa5 	bl	80186d0 <commands_printf>
 8016786:	e68e      	b.n	80164a6 <terminal_process_string+0x116>
	} else if (strcmp(argv[0], "rpm_dep") == 0) {
 8016788:	498f      	ldr	r1, [pc, #572]	; (80169c8 <terminal_process_string+0x638>)
 801678a:	4628      	mov	r0, r5
 801678c:	f7f6 fa64 	bl	800cc58 <strcmp>
 8016790:	2800      	cmp	r0, #0
 8016792:	f000 815d 	beq.w	8016a50 <terminal_process_string+0x6c0>
	} else if (strcmp(argv[0], "can_devs") == 0) {
 8016796:	498d      	ldr	r1, [pc, #564]	; (80169cc <terminal_process_string+0x63c>)
 8016798:	4628      	mov	r0, r5
 801679a:	f7f6 fa5d 	bl	800cc58 <strcmp>
 801679e:	4606      	mov	r6, r0
 80167a0:	2800      	cmp	r0, #0
 80167a2:	f000 8210 	beq.w	8016bc6 <terminal_process_string+0x836>
	} else if (strcmp(argv[0], "foc_encoder_detect") == 0) {
 80167a6:	498a      	ldr	r1, [pc, #552]	; (80169d0 <terminal_process_string+0x640>)
 80167a8:	4628      	mov	r0, r5
 80167aa:	f7f6 fa55 	bl	800cc58 <strcmp>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	f040 80b1 	bne.w	8016916 <terminal_process_string+0x586>
		if (argc == 2) {
 80167b4:	2c02      	cmp	r4, #2
 80167b6:	f000 818e 	beq.w	8016ad6 <terminal_process_string+0x746>
			commands_printf("This command requires one argument.\n");
 80167ba:	4886      	ldr	r0, [pc, #536]	; (80169d4 <terminal_process_string+0x644>)
 80167bc:	f001 ff88 	bl	80186d0 <commands_printf>
 80167c0:	e671      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("Input voltage: %.2f\n", (double)GET_INPUT_VOLTAGE());
 80167c2:	4b85      	ldr	r3, [pc, #532]	; (80169d8 <terminal_process_string+0x648>)
 80167c4:	eddf 6a85 	vldr	s13, [pc, #532]	; 80169dc <terminal_process_string+0x64c>
 80167c8:	8a1b      	ldrh	r3, [r3, #16]
 80167ca:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80169e0 <terminal_process_string+0x650>
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	ee07 3a90 	vmov	s15, r3
 80167d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80167dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167e0:	ee17 0a90 	vmov	r0, s15
 80167e4:	f7f5 fe10 	bl	800c408 <__aeabi_f2d>
 80167e8:	4602      	mov	r2, r0
 80167ea:	460b      	mov	r3, r1
 80167ec:	487d      	ldr	r0, [pc, #500]	; (80169e4 <terminal_process_string+0x654>)
 80167ee:	f001 ff6f 	bl	80186d0 <commands_printf>
 80167f2:	e658      	b.n	80164a6 <terminal_process_string+0x116>
 80167f4:	2320      	movs	r3, #32
 80167f6:	f383 8811 	msr	BASEPRI, r3
		volatile int t1_cnt = TIM1->CNT;
 80167fa:	4b7b      	ldr	r3, [pc, #492]	; (80169e8 <terminal_process_string+0x658>)
		volatile int t8_cnt = TIM8->CNT;
 80167fc:	4a7b      	ldr	r2, [pc, #492]	; (80169ec <terminal_process_string+0x65c>)
		volatile int t1_cnt = TIM1->CNT;
 80167fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016800:	910e      	str	r1, [sp, #56]	; 0x38
		volatile int t8_cnt = TIM8->CNT;
 8016802:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8016804:	910f      	str	r1, [sp, #60]	; 0x3c
		volatile int dir1 = !!(TIM1->CR1 & (1 << 4));
 8016806:	6819      	ldr	r1, [r3, #0]
 8016808:	f3c1 1100 	ubfx	r1, r1, #4, #1
 801680c:	9110      	str	r1, [sp, #64]	; 0x40
		volatile int dir8 = !!(TIM8->CR1 & (1 << 4));
 801680e:	6811      	ldr	r1, [r2, #0]
 8016810:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8016814:	9111      	str	r1, [sp, #68]	; 0x44
 8016816:	f380 8811 	msr	BASEPRI, r0
		commands_printf("Tim1 CNT: %i", t1_cnt);
 801681a:	4875      	ldr	r0, [pc, #468]	; (80169f0 <terminal_process_string+0x660>)
		int duty1 = TIM1->CCR1;
 801681c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
		int duty2 = TIM1->CCR2;
 8016820:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
		int duty3 = TIM1->CCR3;
 8016824:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
		int top = TIM1->ARR;
 8016828:	6adf      	ldr	r7, [r3, #44]	; 0x2c
		int voltage_samp = TIM8->CCR1;
 801682a:	6b56      	ldr	r6, [r2, #52]	; 0x34
		int current1_samp = TIM1->CCR4;
 801682c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
		int current2_samp = TIM8->CCR2;
 801682e:	6b94      	ldr	r4, [r2, #56]	; 0x38
		commands_printf("Tim1 CNT: %i", t1_cnt);
 8016830:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016832:	f001 ff4d 	bl	80186d0 <commands_printf>
		commands_printf("Tim8 CNT: %u", t8_cnt);
 8016836:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016838:	486e      	ldr	r0, [pc, #440]	; (80169f4 <terminal_process_string+0x664>)
 801683a:	f001 ff49 	bl	80186d0 <commands_printf>
		commands_printf("Duty cycle1: %u", duty1);
 801683e:	4651      	mov	r1, sl
 8016840:	486d      	ldr	r0, [pc, #436]	; (80169f8 <terminal_process_string+0x668>)
 8016842:	f001 ff45 	bl	80186d0 <commands_printf>
		commands_printf("Duty cycle2: %u", duty2);
 8016846:	4649      	mov	r1, r9
 8016848:	486c      	ldr	r0, [pc, #432]	; (80169fc <terminal_process_string+0x66c>)
 801684a:	f001 ff41 	bl	80186d0 <commands_printf>
		commands_printf("Duty cycle3: %u", duty3);
 801684e:	4641      	mov	r1, r8
 8016850:	486b      	ldr	r0, [pc, #428]	; (8016a00 <terminal_process_string+0x670>)
 8016852:	f001 ff3d 	bl	80186d0 <commands_printf>
		commands_printf("Top: %u", top);
 8016856:	4639      	mov	r1, r7
 8016858:	486a      	ldr	r0, [pc, #424]	; (8016a04 <terminal_process_string+0x674>)
 801685a:	f001 ff39 	bl	80186d0 <commands_printf>
		commands_printf("Dir1: %u", dir1);
 801685e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016860:	4869      	ldr	r0, [pc, #420]	; (8016a08 <terminal_process_string+0x678>)
 8016862:	f001 ff35 	bl	80186d0 <commands_printf>
		commands_printf("Dir8: %u", dir8);
 8016866:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016868:	4868      	ldr	r0, [pc, #416]	; (8016a0c <terminal_process_string+0x67c>)
 801686a:	f001 ff31 	bl	80186d0 <commands_printf>
		commands_printf("Voltage sample: %u", voltage_samp);
 801686e:	4631      	mov	r1, r6
 8016870:	4867      	ldr	r0, [pc, #412]	; (8016a10 <terminal_process_string+0x680>)
 8016872:	f001 ff2d 	bl	80186d0 <commands_printf>
		commands_printf("Current 1 sample: %u", current1_samp);
 8016876:	4629      	mov	r1, r5
 8016878:	4866      	ldr	r0, [pc, #408]	; (8016a14 <terminal_process_string+0x684>)
 801687a:	f001 ff29 	bl	80186d0 <commands_printf>
		commands_printf("Current 2 sample: %u\n", current2_samp);
 801687e:	4621      	mov	r1, r4
 8016880:	4865      	ldr	r0, [pc, #404]	; (8016a18 <terminal_process_string+0x688>)
 8016882:	f001 ff25 	bl	80186d0 <commands_printf>
 8016886:	e60e      	b.n	80164a6 <terminal_process_string+0x116>
			float current = -1.0;
 8016888:	4b64      	ldr	r3, [pc, #400]	; (8016a1c <terminal_process_string+0x68c>)
			sscanf(argv[1], "%f", &current);
 801688a:	4965      	ldr	r1, [pc, #404]	; (8016a20 <terminal_process_string+0x690>)
 801688c:	9819      	ldr	r0, [sp, #100]	; 0x64
			float current = -1.0;
 801688e:	930b      	str	r3, [sp, #44]	; 0x2c
			sscanf(argv[1], "%f", &current);
 8016890:	aa0b      	add	r2, sp, #44	; 0x2c
			float min_rpm = -1.0;
 8016892:	930c      	str	r3, [sp, #48]	; 0x30
			float low_duty = -1.0;
 8016894:	930d      	str	r3, [sp, #52]	; 0x34
			sscanf(argv[1], "%f", &current);
 8016896:	f011 fa43 	bl	8027d20 <sscanf>
			sscanf(argv[2], "%f", &min_rpm);
 801689a:	aa0c      	add	r2, sp, #48	; 0x30
 801689c:	4960      	ldr	r1, [pc, #384]	; (8016a20 <terminal_process_string+0x690>)
 801689e:	981a      	ldr	r0, [sp, #104]	; 0x68
 80168a0:	f011 fa3e 	bl	8027d20 <sscanf>
			sscanf(argv[3], "%f", &low_duty);
 80168a4:	aa0d      	add	r2, sp, #52	; 0x34
 80168a6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80168a8:	495d      	ldr	r1, [pc, #372]	; (8016a20 <terminal_process_string+0x690>)
 80168aa:	f011 fa39 	bl	8027d20 <sscanf>
			if (current > 0.0 && current < mcconf.l_current_max &&
 80168ae:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 80168b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80168b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ba:	dd28      	ble.n	801690e <terminal_process_string+0x57e>
 80168bc:	4b59      	ldr	r3, [pc, #356]	; (8016a24 <terminal_process_string+0x694>)
 80168be:	edd3 7a01 	vldr	s15, [r3, #4]
 80168c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80168c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ca:	d520      	bpl.n	801690e <terminal_process_string+0x57e>
					min_rpm > 10.0 && min_rpm < 3000.0 &&
 80168cc:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
			if (current > 0.0 && current < mcconf.l_current_max &&
 80168d0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80168d4:	eef4 0ae7 	vcmpe.f32	s1, s15
 80168d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168dc:	dd17      	ble.n	801690e <terminal_process_string+0x57e>
					min_rpm > 10.0 && min_rpm < 3000.0 &&
 80168de:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016a28 <terminal_process_string+0x698>
 80168e2:	eef4 0ae7 	vcmpe.f32	s1, s15
 80168e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ea:	d510      	bpl.n	801690e <terminal_process_string+0x57e>
					low_duty > 0.02 && low_duty < 0.8) {
 80168ec:	ed9d 1a0d 	vldr	s2, [sp, #52]	; 0x34
					min_rpm > 10.0 && min_rpm < 3000.0 &&
 80168f0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016a2c <terminal_process_string+0x69c>
 80168f4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	dd07      	ble.n	801690e <terminal_process_string+0x57e>
					low_duty > 0.02 && low_duty < 0.8) {
 80168fe:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8016a30 <terminal_process_string+0x6a0>
 8016902:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8016906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690a:	f100 80bd 	bmi.w	8016a88 <terminal_process_string+0x6f8>
				commands_printf("Invalid argument(s).\n");
 801690e:	4849      	ldr	r0, [pc, #292]	; (8016a34 <terminal_process_string+0x6a4>)
 8016910:	f001 fede 	bl	80186d0 <commands_printf>
 8016914:	e5c7      	b.n	80164a6 <terminal_process_string+0x116>
	} else if (strcmp(argv[0], "measure_res") == 0) {
 8016916:	4948      	ldr	r1, [pc, #288]	; (8016a38 <terminal_process_string+0x6a8>)
 8016918:	4628      	mov	r0, r5
 801691a:	f7f6 f99d 	bl	800cc58 <strcmp>
 801691e:	2800      	cmp	r0, #0
 8016920:	f040 81aa 	bne.w	8016c78 <terminal_process_string+0x8e8>
		if (argc == 2) {
 8016924:	2c02      	cmp	r4, #2
 8016926:	f47f af48 	bne.w	80167ba <terminal_process_string+0x42a>
			float current = -1.0;
 801692a:	ad11      	add	r5, sp, #68	; 0x44
 801692c:	4b3b      	ldr	r3, [pc, #236]	; (8016a1c <terminal_process_string+0x68c>)
			sscanf(argv[1], "%f", &current);
 801692e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016930:	493b      	ldr	r1, [pc, #236]	; (8016a20 <terminal_process_string+0x690>)
			float current = -1.0;
 8016932:	9311      	str	r3, [sp, #68]	; 0x44
			sscanf(argv[1], "%f", &current);
 8016934:	462a      	mov	r2, r5
 8016936:	f011 f9f3 	bl	8027d20 <sscanf>
			if (current > 0.0 && current <= mcconf.l_current_max) {
 801693a:	edd5 7a00 	vldr	s15, [r5]
 801693e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016946:	dde2      	ble.n	801690e <terminal_process_string+0x57e>
 8016948:	4c36      	ldr	r4, [pc, #216]	; (8016a24 <terminal_process_string+0x694>)
 801694a:	ed94 7a01 	vldr	s14, [r4, #4]
 801694e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016956:	d8da      	bhi.n	801690e <terminal_process_string+0x57e>
				mcconf.motor_type = MOTOR_TYPE_FOC;
 8016958:	2302      	movs	r3, #2
				mc_interface_set_configuration(&mcconf);
 801695a:	4620      	mov	r0, r4
				mcconf.motor_type = MOTOR_TYPE_FOC;
 801695c:	70a3      	strb	r3, [r4, #2]
				mc_interface_set_configuration(&mcconf);
 801695e:	f005 fabf 	bl	801bee0 <mc_interface_set_configuration>
				commands_printf("Resistance: %.6f ohm\n", (double)mcpwm_foc_measure_resistance(current, 2000));
 8016962:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016966:	ed95 0a00 	vldr	s0, [r5]
 801696a:	f007 fe49 	bl	801e600 <mcpwm_foc_measure_resistance>
 801696e:	ee10 0a10 	vmov	r0, s0
 8016972:	f7f5 fd49 	bl	800c408 <__aeabi_f2d>
 8016976:	4602      	mov	r2, r0
 8016978:	460b      	mov	r3, r1
 801697a:	4830      	ldr	r0, [pc, #192]	; (8016a3c <terminal_process_string+0x6ac>)
 801697c:	f001 fea8 	bl	80186d0 <commands_printf>
				mc_interface_set_configuration(&mcconf_old);
 8016980:	482f      	ldr	r0, [pc, #188]	; (8016a40 <terminal_process_string+0x6b0>)
 8016982:	f005 faad 	bl	801bee0 <mc_interface_set_configuration>
 8016986:	e58e      	b.n	80164a6 <terminal_process_string+0x116>
 8016988:	0802f3dc 	.word	0x0802f3dc
 801698c:	200075a8 	.word	0x200075a8
 8016990:	0802f458 	.word	0x0802f458
 8016994:	0802f470 	.word	0x0802f470
 8016998:	0802f488 	.word	0x0802f488
 801699c:	0802f4a0 	.word	0x0802f4a0
 80169a0:	0802f4b8 	.word	0x0802f4b8
 80169a4:	0802f4d0 	.word	0x0802f4d0
 80169a8:	0802f4e8 	.word	0x0802f4e8
 80169ac:	0802f500 	.word	0x0802f500
 80169b0:	0802f518 	.word	0x0802f518
 80169b4:	0802f530 	.word	0x0802f530
 80169b8:	0802f548 	.word	0x0802f548
 80169bc:	0802f33c 	.word	0x0802f33c
 80169c0:	0802f564 	.word	0x0802f564
 80169c4:	0802f588 	.word	0x0802f588
 80169c8:	0802f7f8 	.word	0x0802f7f8
 80169cc:	0802f854 	.word	0x0802f854
 80169d0:	0802f930 	.word	0x0802f930
 80169d4:	0802f98c 	.word	0x0802f98c
 80169d8:	2000c034 	.word	0x2000c034
 80169dc:	3a534067 	.word	0x3a534067
 80169e0:	4195d174 	.word	0x4195d174
 80169e4:	0802f660 	.word	0x0802f660
 80169e8:	40010000 	.word	0x40010000
 80169ec:	40010400 	.word	0x40010400
 80169f0:	0802f5a4 	.word	0x0802f5a4
 80169f4:	0802f5b4 	.word	0x0802f5b4
 80169f8:	0802f5c4 	.word	0x0802f5c4
 80169fc:	0802f5d4 	.word	0x0802f5d4
 8016a00:	0802f5e4 	.word	0x0802f5e4
 8016a04:	0802f5f4 	.word	0x0802f5f4
 8016a08:	0802f5fc 	.word	0x0802f5fc
 8016a0c:	0802f608 	.word	0x0802f608
 8016a10:	0802f614 	.word	0x0802f614
 8016a14:	0802f628 	.word	0x0802f628
 8016a18:	0802f640 	.word	0x0802f640
 8016a1c:	bf800000 	.word	0xbf800000
 8016a20:	0802f688 	.word	0x0802f688
 8016a24:	20007b24 	.word	0x20007b24
 8016a28:	453b8000 	.word	0x453b8000
 8016a2c:	3ca3d70a 	.word	0x3ca3d70a
 8016a30:	3f4ccccd 	.word	0x3f4ccccd
 8016a34:	0802f7b8 	.word	0x0802f7b8
 8016a38:	0802f9b4 	.word	0x0802f9b4
 8016a3c:	0802f9c0 	.word	0x0802f9c0
 8016a40:	20007c98 	.word	0x20007c98
 8016a44:	0802f410 	.word	0x0802f410
 8016a48:	0802f428 	.word	0x0802f428
 8016a4c:	0802f440 	.word	0x0802f440
		mc_rpm_dep_struct rpm_dep = mcpwm_get_rpm_dep();
 8016a50:	a811      	add	r0, sp, #68	; 0x44
 8016a52:	f7fd fc35 	bl	80142c0 <mcpwm_get_rpm_dep>
		commands_printf("Cycle int limit: %.2f", (double)rpm_dep.cycle_int_limit);
 8016a56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016a58:	f7f5 fcd6 	bl	800c408 <__aeabi_f2d>
 8016a5c:	4602      	mov	r2, r0
 8016a5e:	460b      	mov	r3, r1
 8016a60:	48a8      	ldr	r0, [pc, #672]	; (8016d04 <terminal_process_string+0x974>)
 8016a62:	f001 fe35 	bl	80186d0 <commands_printf>
		commands_printf("Cycle int limit running: %.2f", (double)rpm_dep.cycle_int_limit_running);
 8016a66:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016a68:	f7f5 fcce 	bl	800c408 <__aeabi_f2d>
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	460b      	mov	r3, r1
 8016a70:	48a5      	ldr	r0, [pc, #660]	; (8016d08 <terminal_process_string+0x978>)
 8016a72:	f001 fe2d 	bl	80186d0 <commands_printf>
		commands_printf("Cycle int limit max: %.2f\n", (double)rpm_dep.cycle_int_limit_max);
 8016a76:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016a78:	f7f5 fcc6 	bl	800c408 <__aeabi_f2d>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	48a2      	ldr	r0, [pc, #648]	; (8016d0c <terminal_process_string+0x97c>)
 8016a82:	f001 fe25 	bl	80186d0 <commands_printf>
 8016a86:	e50e      	b.n	80164a6 <terminal_process_string+0x116>
				if (conf_general_detect_motor_param(current, min_rpm, low_duty, &cycle_integrator, &coupling_k, hall_table, &hall_res)) {
 8016a88:	ab10      	add	r3, sp, #64	; 0x40
 8016a8a:	aa11      	add	r2, sp, #68	; 0x44
 8016a8c:	a90f      	add	r1, sp, #60	; 0x3c
 8016a8e:	a80e      	add	r0, sp, #56	; 0x38
 8016a90:	f001 f89e 	bl	8017bd0 <conf_general_detect_motor_param>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	f000 8092 	beq.w	8016bbe <terminal_process_string+0x82e>
					commands_printf("Cycle integrator limit: %.2f", (double)cycle_integrator);
 8016a9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016a9c:	f7f5 fcb4 	bl	800c408 <__aeabi_f2d>
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	489a      	ldr	r0, [pc, #616]	; (8016d10 <terminal_process_string+0x980>)
 8016aa6:	f001 fe13 	bl	80186d0 <commands_printf>
					commands_printf("Coupling factor: %.2f", (double)coupling_k);
 8016aaa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016aac:	f7f5 fcac 	bl	800c408 <__aeabi_f2d>
 8016ab0:	4602      	mov	r2, r0
 8016ab2:	460b      	mov	r3, r1
 8016ab4:	4897      	ldr	r0, [pc, #604]	; (8016d14 <terminal_process_string+0x984>)
 8016ab6:	f001 fe0b 	bl	80186d0 <commands_printf>
					if (hall_res == 0) {
 8016aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d07c      	beq.n	8016bba <terminal_process_string+0x82a>
					} else if (hall_res == -1) {
 8016ac0:	1c59      	adds	r1, r3, #1
 8016ac2:	d05c      	beq.n	8016b7e <terminal_process_string+0x7ee>
					} else if (hall_res == -2) {
 8016ac4:	1c9a      	adds	r2, r3, #2
 8016ac6:	d056      	beq.n	8016b76 <terminal_process_string+0x7e6>
					} else if (hall_res == -3) {
 8016ac8:	3303      	adds	r3, #3
 8016aca:	f47f acec 	bne.w	80164a6 <terminal_process_string+0x116>
						commands_printf("Encoder enabled. Hall sensors cannot be used.\n");
 8016ace:	4892      	ldr	r0, [pc, #584]	; (8016d18 <terminal_process_string+0x988>)
 8016ad0:	f001 fdfe 	bl	80186d0 <commands_printf>
 8016ad4:	e4e7      	b.n	80164a6 <terminal_process_string+0x116>
			float current = -1.0;
 8016ad6:	4b91      	ldr	r3, [pc, #580]	; (8016d1c <terminal_process_string+0x98c>)
			sscanf(argv[1], "%f", &current);
 8016ad8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016ada:	4991      	ldr	r1, [pc, #580]	; (8016d20 <terminal_process_string+0x990>)
			float current = -1.0;
 8016adc:	930f      	str	r3, [sp, #60]	; 0x3c
			sscanf(argv[1], "%f", &current);
 8016ade:	aa0f      	add	r2, sp, #60	; 0x3c
 8016ae0:	f011 f91e 	bl	8027d20 <sscanf>
			if (current > 0.0 && current <= mcconf.l_current_max) {
 8016ae4:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8016ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af0:	f77f af0d 	ble.w	801690e <terminal_process_string+0x57e>
 8016af4:	4c8b      	ldr	r4, [pc, #556]	; (8016d24 <terminal_process_string+0x994>)
 8016af6:	ed94 7a01 	vldr	s14, [r4, #4]
 8016afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b02:	f63f af04 	bhi.w	801690e <terminal_process_string+0x57e>
				if (encoder_is_configured()) {
 8016b06:	f004 f8eb 	bl	801ace0 <encoder_is_configured>
 8016b0a:	2800      	cmp	r0, #0
 8016b0c:	d051      	beq.n	8016bb2 <terminal_process_string+0x822>
					mcconf.motor_type = MOTOR_TYPE_FOC;
 8016b0e:	2302      	movs	r3, #2
					mc_interface_set_configuration(&mcconf);
 8016b10:	4620      	mov	r0, r4
					mc_motor_type type_old = mcconf.motor_type;
 8016b12:	78a6      	ldrb	r6, [r4, #2]
					mcconf.motor_type = MOTOR_TYPE_FOC;
 8016b14:	70a3      	strb	r3, [r4, #2]
					float offset = 0.0;
 8016b16:	2500      	movs	r5, #0
					mc_interface_set_configuration(&mcconf);
 8016b18:	f005 f9e2 	bl	801bee0 <mc_interface_set_configuration>
					bool inverted = false;
 8016b1c:	2700      	movs	r7, #0
					mcpwm_foc_encoder_detect(current, true, &offset, &ratio, &inverted);
 8016b1e:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
					float offset = 0.0;
 8016b22:	9510      	str	r5, [sp, #64]	; 0x40
					mcpwm_foc_encoder_detect(current, true, &offset, &ratio, &inverted);
 8016b24:	aa11      	add	r2, sp, #68	; 0x44
 8016b26:	ab0e      	add	r3, sp, #56	; 0x38
 8016b28:	a910      	add	r1, sp, #64	; 0x40
 8016b2a:	2001      	movs	r0, #1
					float ratio = 0.0;
 8016b2c:	9511      	str	r5, [sp, #68]	; 0x44
					bool inverted = false;
 8016b2e:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
					mcpwm_foc_encoder_detect(current, true, &offset, &ratio, &inverted);
 8016b32:	f007 fa5d 	bl	801dff0 <mcpwm_foc_encoder_detect>
					mc_interface_set_configuration(&mcconf);
 8016b36:	4620      	mov	r0, r4
					mcconf.motor_type = type_old;
 8016b38:	70a6      	strb	r6, [r4, #2]
					mc_interface_set_configuration(&mcconf);
 8016b3a:	f005 f9d1 	bl	801bee0 <mc_interface_set_configuration>
					commands_printf("Offset   : %.2f", (double)offset);
 8016b3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016b40:	f7f5 fc62 	bl	800c408 <__aeabi_f2d>
 8016b44:	4602      	mov	r2, r0
 8016b46:	460b      	mov	r3, r1
 8016b48:	4877      	ldr	r0, [pc, #476]	; (8016d28 <terminal_process_string+0x998>)
 8016b4a:	f001 fdc1 	bl	80186d0 <commands_printf>
					commands_printf("Ratio    : %.2f", (double)ratio);
 8016b4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016b50:	f7f5 fc5a 	bl	800c408 <__aeabi_f2d>
 8016b54:	4602      	mov	r2, r0
 8016b56:	460b      	mov	r3, r1
 8016b58:	4874      	ldr	r0, [pc, #464]	; (8016d2c <terminal_process_string+0x99c>)
 8016b5a:	f001 fdb9 	bl	80186d0 <commands_printf>
					commands_printf("Inverted : %s\n", inverted ? "true" : "false");
 8016b5e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8016b62:	4a73      	ldr	r2, [pc, #460]	; (8016d30 <terminal_process_string+0x9a0>)
 8016b64:	4b73      	ldr	r3, [pc, #460]	; (8016d34 <terminal_process_string+0x9a4>)
 8016b66:	4874      	ldr	r0, [pc, #464]	; (8016d38 <terminal_process_string+0x9a8>)
 8016b68:	42b9      	cmp	r1, r7
 8016b6a:	bf14      	ite	ne
 8016b6c:	4611      	movne	r1, r2
 8016b6e:	4619      	moveq	r1, r3
 8016b70:	f001 fdae 	bl	80186d0 <commands_printf>
 8016b74:	e497      	b.n	80164a6 <terminal_process_string+0x116>
						commands_printf("WS2811 enabled. Hall sensors cannot be used.\n");
 8016b76:	4871      	ldr	r0, [pc, #452]	; (8016d3c <terminal_process_string+0x9ac>)
 8016b78:	f001 fdaa 	bl	80186d0 <commands_printf>
 8016b7c:	e493      	b.n	80164a6 <terminal_process_string+0x116>
						commands_printf("Hall sensor detection failed:");
 8016b7e:	4870      	ldr	r0, [pc, #448]	; (8016d40 <terminal_process_string+0x9b0>)
 8016b80:	f001 fda6 	bl	80186d0 <commands_printf>
						commands_printf("%i, %i, %i, %i, %i, %i, %i, %i\n",
 8016b84:	f99d 0047 	ldrsb.w	r0, [sp, #71]	; 0x47
 8016b88:	f99d 604a 	ldrsb.w	r6, [sp, #74]	; 0x4a
 8016b8c:	f99d 5049 	ldrsb.w	r5, [sp, #73]	; 0x49
 8016b90:	f99d 4048 	ldrsb.w	r4, [sp, #72]	; 0x48
 8016b94:	f99d 704b 	ldrsb.w	r7, [sp, #75]	; 0x4b
 8016b98:	f99d 3046 	ldrsb.w	r3, [sp, #70]	; 0x46
 8016b9c:	f99d 2045 	ldrsb.w	r2, [sp, #69]	; 0x45
 8016ba0:	f99d 1044 	ldrsb.w	r1, [sp, #68]	; 0x44
 8016ba4:	9704      	str	r7, [sp, #16]
 8016ba6:	e88d 0071 	stmia.w	sp, {r0, r4, r5, r6}
 8016baa:	4866      	ldr	r0, [pc, #408]	; (8016d44 <terminal_process_string+0x9b4>)
 8016bac:	f001 fd90 	bl	80186d0 <commands_printf>
 8016bb0:	e479      	b.n	80164a6 <terminal_process_string+0x116>
					commands_printf("Encoder not enabled.\n");
 8016bb2:	4865      	ldr	r0, [pc, #404]	; (8016d48 <terminal_process_string+0x9b8>)
 8016bb4:	f001 fd8c 	bl	80186d0 <commands_printf>
 8016bb8:	e475      	b.n	80164a6 <terminal_process_string+0x116>
						commands_printf("Detected hall sensor table:");
 8016bba:	4864      	ldr	r0, [pc, #400]	; (8016d4c <terminal_process_string+0x9bc>)
 8016bbc:	e7e0      	b.n	8016b80 <terminal_process_string+0x7f0>
					commands_printf("Detection failed. Try again with different parameters.\n");
 8016bbe:	4864      	ldr	r0, [pc, #400]	; (8016d50 <terminal_process_string+0x9c0>)
 8016bc0:	f001 fd86 	bl	80186d0 <commands_printf>
					low_duty > 0.02 && low_duty < 0.8) {
 8016bc4:	e46f      	b.n	80164a6 <terminal_process_string+0x116>
		commands_printf("CAN devices seen on the bus the past second:\n");
 8016bc6:	4863      	ldr	r0, [pc, #396]	; (8016d54 <terminal_process_string+0x9c4>)
  return ch.vtlist.vt_systime;
 8016bc8:	4d63      	ldr	r5, [pc, #396]	; (8016d58 <terminal_process_string+0x9c8>)
			if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < 1.0) {
 8016bca:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8016d5c <terminal_process_string+0x9cc>
				commands_printf("Age (milliseconds) : %.2f", (double)(UTILS_AGE_S(msg->rx_time) * 1000.0));
 8016bce:	eddf 8a64 	vldr	s17, [pc, #400]	; 8016d60 <terminal_process_string+0x9d0>
		commands_printf("CAN devices seen on the bus the past second:\n");
 8016bd2:	f001 fd7d 	bl	80186d0 <commands_printf>
 8016bd6:	e002      	b.n	8016bde <terminal_process_string+0x84e>
		for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8016bd8:	2e0a      	cmp	r6, #10
 8016bda:	f43f ac64 	beq.w	80164a6 <terminal_process_string+0x116>
			can_status_msg *msg = comm_can_get_status_msg_index(i);
 8016bde:	4630      	mov	r0, r6
 8016be0:	f003 ff76 	bl	801aad0 <comm_can_get_status_msg_index>
			if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < 1.0) {
 8016be4:	6801      	ldr	r1, [r0, #0]
 8016be6:	2900      	cmp	r1, #0
			can_status_msg *msg = comm_can_get_status_msg_index(i);
 8016be8:	4604      	mov	r4, r0
			if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < 1.0) {
 8016bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8016bee:	f106 0601 	add.w	r6, r6, #1
			if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < 1.0) {
 8016bf2:	dbf1      	blt.n	8016bd8 <terminal_process_string+0x848>
 8016bf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8016bf6:	6842      	ldr	r2, [r0, #4]
 8016bf8:	1a9b      	subs	r3, r3, r2
 8016bfa:	ee07 3a90 	vmov	s15, r3
 8016bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c02:	eec7 6a88 	vdiv.f32	s13, s15, s16
 8016c06:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c0e:	d5e3      	bpl.n	8016bd8 <terminal_process_string+0x848>
				commands_printf("ID                 : %i", msg->id);
 8016c10:	4854      	ldr	r0, [pc, #336]	; (8016d64 <terminal_process_string+0x9d4>)
 8016c12:	f001 fd5d 	bl	80186d0 <commands_printf>
				commands_printf("RX Time            : %i", msg->rx_time);
 8016c16:	6861      	ldr	r1, [r4, #4]
 8016c18:	4853      	ldr	r0, [pc, #332]	; (8016d68 <terminal_process_string+0x9d8>)
 8016c1a:	f001 fd59 	bl	80186d0 <commands_printf>
 8016c1e:	6862      	ldr	r2, [r4, #4]
  return ch.vtlist.vt_systime;
 8016c20:	6aab      	ldr	r3, [r5, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8016c22:	1a9b      	subs	r3, r3, r2
				commands_printf("Age (milliseconds) : %.2f", (double)(UTILS_AGE_S(msg->rx_time) * 1000.0));
 8016c24:	ee07 3a90 	vmov	s15, r3
 8016c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c2c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8016c30:	ee67 7a28 	vmul.f32	s15, s14, s17
 8016c34:	ee17 0a90 	vmov	r0, s15
 8016c38:	f7f5 fbe6 	bl	800c408 <__aeabi_f2d>
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	460b      	mov	r3, r1
 8016c40:	484a      	ldr	r0, [pc, #296]	; (8016d6c <terminal_process_string+0x9dc>)
 8016c42:	f001 fd45 	bl	80186d0 <commands_printf>
				commands_printf("RPM                : %.2f", (double)msg->rpm);
 8016c46:	68a0      	ldr	r0, [r4, #8]
 8016c48:	f7f5 fbde 	bl	800c408 <__aeabi_f2d>
 8016c4c:	4602      	mov	r2, r0
 8016c4e:	460b      	mov	r3, r1
 8016c50:	4847      	ldr	r0, [pc, #284]	; (8016d70 <terminal_process_string+0x9e0>)
 8016c52:	f001 fd3d 	bl	80186d0 <commands_printf>
				commands_printf("Current            : %.2f", (double)msg->current);
 8016c56:	68e0      	ldr	r0, [r4, #12]
 8016c58:	f7f5 fbd6 	bl	800c408 <__aeabi_f2d>
 8016c5c:	4602      	mov	r2, r0
 8016c5e:	460b      	mov	r3, r1
 8016c60:	4844      	ldr	r0, [pc, #272]	; (8016d74 <terminal_process_string+0x9e4>)
 8016c62:	f001 fd35 	bl	80186d0 <commands_printf>
				commands_printf("Duty               : %.2f\n", (double)msg->duty);
 8016c66:	6920      	ldr	r0, [r4, #16]
 8016c68:	f7f5 fbce 	bl	800c408 <__aeabi_f2d>
 8016c6c:	4602      	mov	r2, r0
 8016c6e:	460b      	mov	r3, r1
 8016c70:	4841      	ldr	r0, [pc, #260]	; (8016d78 <terminal_process_string+0x9e8>)
 8016c72:	f001 fd2d 	bl	80186d0 <commands_printf>
 8016c76:	e7af      	b.n	8016bd8 <terminal_process_string+0x848>
	} else if (strcmp(argv[0], "measure_ind") == 0) {
 8016c78:	4940      	ldr	r1, [pc, #256]	; (8016d7c <terminal_process_string+0x9ec>)
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	f7f5 ffec 	bl	800cc58 <strcmp>
 8016c80:	2800      	cmp	r0, #0
 8016c82:	f040 8085 	bne.w	8016d90 <terminal_process_string+0xa00>
		if (argc == 2) {
 8016c86:	2c02      	cmp	r4, #2
 8016c88:	f47f ad97 	bne.w	80167ba <terminal_process_string+0x42a>
			float duty = -1.0;
 8016c8c:	4b23      	ldr	r3, [pc, #140]	; (8016d1c <terminal_process_string+0x98c>)
			sscanf(argv[1], "%f", &duty);
 8016c8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016c90:	4923      	ldr	r1, [pc, #140]	; (8016d20 <terminal_process_string+0x990>)
			float duty = -1.0;
 8016c92:	9310      	str	r3, [sp, #64]	; 0x40
			sscanf(argv[1], "%f", &duty);
 8016c94:	aa10      	add	r2, sp, #64	; 0x40
 8016c96:	f011 f843 	bl	8027d20 <sscanf>
			if (duty > 0.0 && duty < 0.9) {
 8016c9a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8016c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca6:	f77f ae32 	ble.w	801690e <terminal_process_string+0x57e>
 8016caa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8016d80 <terminal_process_string+0x9f0>
 8016cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb6:	f57f ae2a 	bpl.w	801690e <terminal_process_string+0x57e>
				mcconf.motor_type = MOTOR_TYPE_FOC;
 8016cba:	4b1a      	ldr	r3, [pc, #104]	; (8016d24 <terminal_process_string+0x994>)
				mcconf.foc_f_sw = 3000.0;
 8016cbc:	4a31      	ldr	r2, [pc, #196]	; (8016d84 <terminal_process_string+0x9f4>)
 8016cbe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				mc_interface_set_configuration(&mcconf);
 8016cc2:	4618      	mov	r0, r3
				mcconf.motor_type = MOTOR_TYPE_FOC;
 8016cc4:	2102      	movs	r1, #2
 8016cc6:	7099      	strb	r1, [r3, #2]
				mc_interface_set_configuration(&mcconf);
 8016cc8:	f005 f90a 	bl	801bee0 <mc_interface_set_configuration>
				float ind = mcpwm_foc_measure_inductance(duty, 200, &curr);
 8016ccc:	a911      	add	r1, sp, #68	; 0x44
 8016cce:	20c8      	movs	r0, #200	; 0xc8
 8016cd0:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8016cd4:	f007 fd24 	bl	801e720 <mcpwm_foc_measure_inductance>
				commands_printf("Inductance: %.2f microhenry (%.2f A)\n", (double)ind, (double)curr);
 8016cd8:	ee10 0a10 	vmov	r0, s0
 8016cdc:	f7f5 fb94 	bl	800c408 <__aeabi_f2d>
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016ce4:	460d      	mov	r5, r1
 8016ce6:	f7f5 fb8f 	bl	800c408 <__aeabi_f2d>
 8016cea:	4622      	mov	r2, r4
 8016cec:	e9cd 0100 	strd	r0, r1, [sp]
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	4825      	ldr	r0, [pc, #148]	; (8016d88 <terminal_process_string+0x9f8>)
 8016cf4:	f001 fcec 	bl	80186d0 <commands_printf>
				mc_interface_set_configuration(&mcconf_old);
 8016cf8:	4824      	ldr	r0, [pc, #144]	; (8016d8c <terminal_process_string+0x9fc>)
 8016cfa:	f005 f8f1 	bl	801bee0 <mc_interface_set_configuration>
			if (duty > 0.0 && duty < 0.9) {
 8016cfe:	f7ff bbd2 	b.w	80164a6 <terminal_process_string+0x116>
 8016d02:	bf00      	nop
 8016d04:	0802f800 	.word	0x0802f800
 8016d08:	0802f818 	.word	0x0802f818
 8016d0c:	0802f838 	.word	0x0802f838
 8016d10:	0802f68c 	.word	0x0802f68c
 8016d14:	0802f6ac 	.word	0x0802f6ac
 8016d18:	0802f750 	.word	0x0802f750
 8016d1c:	bf800000 	.word	0xbf800000
 8016d20:	0802f688 	.word	0x0802f688
 8016d24:	20007b24 	.word	0x20007b24
 8016d28:	0802f944 	.word	0x0802f944
 8016d2c:	0802f954 	.word	0x0802f954
 8016d30:	0802f1a0 	.word	0x0802f1a0
 8016d34:	0802f1a8 	.word	0x0802f1a8
 8016d38:	0802f964 	.word	0x0802f964
 8016d3c:	0802f720 	.word	0x0802f720
 8016d40:	0802f700 	.word	0x0802f700
 8016d44:	0802f6e0 	.word	0x0802f6e0
 8016d48:	0802f974 	.word	0x0802f974
 8016d4c:	0802f6c4 	.word	0x0802f6c4
 8016d50:	0802f780 	.word	0x0802f780
 8016d54:	0802f860 	.word	0x0802f860
 8016d58:	20001a40 	.word	0x20001a40
 8016d5c:	461c4000 	.word	0x461c4000
 8016d60:	447a0000 	.word	0x447a0000
 8016d64:	0802f890 	.word	0x0802f890
 8016d68:	0802f8a8 	.word	0x0802f8a8
 8016d6c:	0802f8c0 	.word	0x0802f8c0
 8016d70:	0802f8dc 	.word	0x0802f8dc
 8016d74:	0802f8f8 	.word	0x0802f8f8
 8016d78:	0802f914 	.word	0x0802f914
 8016d7c:	0802f9d8 	.word	0x0802f9d8
 8016d80:	3f666666 	.word	0x3f666666
 8016d84:	453b8000 	.word	0x453b8000
 8016d88:	0802f9e4 	.word	0x0802f9e4
 8016d8c:	20007c98 	.word	0x20007c98
	} else if (strcmp(argv[0], "measure_linkage") == 0) {
 8016d90:	49cb      	ldr	r1, [pc, #812]	; (80170c0 <terminal_process_string+0xd30>)
 8016d92:	4628      	mov	r0, r5
 8016d94:	f7f5 ff60 	bl	800cc58 <strcmp>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	d153      	bne.n	8016e44 <terminal_process_string+0xab4>
		if (argc == 5) {
 8016d9c:	2c05      	cmp	r4, #5
 8016d9e:	f47f ad0c 	bne.w	80167ba <terminal_process_string+0x42a>
			float current = -1.0;
 8016da2:	4bc8      	ldr	r3, [pc, #800]	; (80170c4 <terminal_process_string+0xd34>)
			sscanf(argv[1], "%f", &current);
 8016da4:	49c8      	ldr	r1, [pc, #800]	; (80170c8 <terminal_process_string+0xd38>)
 8016da6:	9819      	ldr	r0, [sp, #100]	; 0x64
			float current = -1.0;
 8016da8:	930d      	str	r3, [sp, #52]	; 0x34
			sscanf(argv[1], "%f", &current);
 8016daa:	aa0d      	add	r2, sp, #52	; 0x34
			float duty = -1.0;
 8016dac:	930e      	str	r3, [sp, #56]	; 0x38
			float min_erpm = -1.0;
 8016dae:	930f      	str	r3, [sp, #60]	; 0x3c
			float res = -1.0;
 8016db0:	9310      	str	r3, [sp, #64]	; 0x40
			sscanf(argv[1], "%f", &current);
 8016db2:	f010 ffb5 	bl	8027d20 <sscanf>
			sscanf(argv[2], "%f", &duty);
 8016db6:	aa0e      	add	r2, sp, #56	; 0x38
 8016db8:	49c3      	ldr	r1, [pc, #780]	; (80170c8 <terminal_process_string+0xd38>)
 8016dba:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016dbc:	f010 ffb0 	bl	8027d20 <sscanf>
			sscanf(argv[3], "%f", &min_erpm);
 8016dc0:	aa0f      	add	r2, sp, #60	; 0x3c
 8016dc2:	49c1      	ldr	r1, [pc, #772]	; (80170c8 <terminal_process_string+0xd38>)
 8016dc4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016dc6:	f010 ffab 	bl	8027d20 <sscanf>
			sscanf(argv[4], "%f", &res);
 8016dca:	aa10      	add	r2, sp, #64	; 0x40
 8016dcc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016dce:	49be      	ldr	r1, [pc, #760]	; (80170c8 <terminal_process_string+0xd38>)
 8016dd0:	f010 ffa6 	bl	8027d20 <sscanf>
			if (current > 0.0 && current <= mcconf.l_current_max && min_erpm > 0.0 && duty > 0.02 && res >= 0.0) {
 8016dd4:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8016dd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de0:	f77f ad95 	ble.w	801690e <terminal_process_string+0x57e>
 8016de4:	4bb9      	ldr	r3, [pc, #740]	; (80170cc <terminal_process_string+0xd3c>)
 8016de6:	edd3 7a01 	vldr	s15, [r3, #4]
 8016dea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df2:	f63f ad8c 	bhi.w	801690e <terminal_process_string+0x57e>
 8016df6:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8016dfa:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8016dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e02:	f77f ad84 	ble.w	801690e <terminal_process_string+0x57e>
 8016e06:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
 8016e0a:	eddf 7ab1 	vldr	s15, [pc, #708]	; 80170d0 <terminal_process_string+0xd40>
 8016e0e:	eef4 0ae7 	vcmpe.f32	s1, s15
 8016e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e16:	f77f ad7a 	ble.w	801690e <terminal_process_string+0x57e>
 8016e1a:	eddd 1a10 	vldr	s3, [sp, #64]	; 0x40
 8016e1e:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 8016e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e26:	f6ff ad72 	blt.w	801690e <terminal_process_string+0x57e>
				conf_general_measure_flux_linkage(current, duty, min_erpm, res, &linkage);
 8016e2a:	a811      	add	r0, sp, #68	; 0x44
 8016e2c:	f001 f870 	bl	8017f10 <conf_general_measure_flux_linkage>
				commands_printf("Flux linkage: %.7f\n", (double)linkage);
 8016e30:	9811      	ldr	r0, [sp, #68]	; 0x44
				commands_printf("Flux linkage: %.7f\n", (double)linkage);
 8016e32:	f7f5 fae9 	bl	800c408 <__aeabi_f2d>
 8016e36:	4602      	mov	r2, r0
 8016e38:	460b      	mov	r3, r1
 8016e3a:	48a6      	ldr	r0, [pc, #664]	; (80170d4 <terminal_process_string+0xd44>)
 8016e3c:	f001 fc48 	bl	80186d0 <commands_printf>
 8016e40:	f7ff bb31 	b.w	80164a6 <terminal_process_string+0x116>
	} else if (strcmp(argv[0], "measure_res_ind") == 0) {
 8016e44:	49a4      	ldr	r1, [pc, #656]	; (80170d8 <terminal_process_string+0xd48>)
 8016e46:	4628      	mov	r0, r5
 8016e48:	f7f5 ff06 	bl	800cc58 <strcmp>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	f000 8083 	beq.w	8016f58 <terminal_process_string+0xbc8>
	} else if (strcmp(argv[0], "measure_linkage_foc") == 0) {
 8016e52:	49a2      	ldr	r1, [pc, #648]	; (80170dc <terminal_process_string+0xd4c>)
 8016e54:	4628      	mov	r0, r5
 8016e56:	f7f5 feff 	bl	800cc58 <strcmp>
 8016e5a:	4606      	mov	r6, r0
 8016e5c:	2800      	cmp	r0, #0
 8016e5e:	f040 809d 	bne.w	8016f9c <terminal_process_string+0xc0c>
		if (argc == 2) {
 8016e62:	2c02      	cmp	r4, #2
 8016e64:	f47f aca9 	bne.w	80167ba <terminal_process_string+0x42a>
			float duty = -1.0;
 8016e68:	ad11      	add	r5, sp, #68	; 0x44
 8016e6a:	4b96      	ldr	r3, [pc, #600]	; (80170c4 <terminal_process_string+0xd34>)
			sscanf(argv[1], "%f", &duty);
 8016e6c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016e6e:	4996      	ldr	r1, [pc, #600]	; (80170c8 <terminal_process_string+0xd38>)
			float duty = -1.0;
 8016e70:	602b      	str	r3, [r5, #0]
			sscanf(argv[1], "%f", &duty);
 8016e72:	462a      	mov	r2, r5
 8016e74:	f010 ff54 	bl	8027d20 <sscanf>
			if (duty > 0.0) {
 8016e78:	edd5 7a00 	vldr	s15, [r5]
 8016e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e84:	f77f ad43 	ble.w	801690e <terminal_process_string+0x57e>
				mcconf.motor_type = MOTOR_TYPE_FOC;
 8016e88:	4f90      	ldr	r7, [pc, #576]	; (80170cc <terminal_process_string+0xd3c>)
					mc_interface_set_duty(((float)i / 100.0) * duty);
 8016e8a:	ed9f 8a95 	vldr	s16, [pc, #596]	; 80170e0 <terminal_process_string+0xd50>
				mcconf.motor_type = MOTOR_TYPE_FOC;
 8016e8e:	70bc      	strb	r4, [r7, #2]
				mc_interface_set_configuration(&mcconf);
 8016e90:	4638      	mov	r0, r7
 8016e92:	f005 f825 	bl	801bee0 <mc_interface_set_configuration>
				const float res = (3.0 / 2.0) * mcconf.foc_motor_r;
 8016e96:	ed97 9a31 	vldr	s18, [r7, #196]	; 0xc4
 8016e9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016e9e:	ee29 9a27 	vmul.f32	s18, s18, s15
				systime_t tout = timeout_get_timeout_msec();
 8016ea2:	f003 f9cd 	bl	801a240 <timeout_get_timeout_msec>
 8016ea6:	4607      	mov	r7, r0
				float tout_c = timeout_get_brake_current();
 8016ea8:	f003 f9d2 	bl	801a250 <timeout_get_brake_current>
 8016eac:	eef0 aa40 	vmov.f32	s21, s0
				timeout_reset();
 8016eb0:	f003 f9ae 	bl	801a210 <timeout_reset>
				timeout_configure(60000, 0.0);
 8016eb4:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 80170e4 <terminal_process_string+0xd54>
 8016eb8:	f64e 2060 	movw	r0, #60000	; 0xea60
 8016ebc:	f003 f998 	bl	801a1f0 <timeout_configure>
					mc_interface_set_duty(((float)i / 100.0) * duty);
 8016ec0:	ee07 6a90 	vmov	s15, r6
 8016ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016ec8:	edd5 7a00 	vldr	s15, [r5]
 8016ecc:	ee87 0a08 	vdiv.f32	s0, s14, s16
				for (int i = 0;i < 100;i++) {
 8016ed0:	3601      	adds	r6, #1
					mc_interface_set_duty(((float)i / 100.0) * duty);
 8016ed2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016ed6:	f005 f9cb 	bl	801c270 <mc_interface_set_duty>
					chThdSleepMilliseconds(20);
 8016eda:	20c8      	movs	r0, #200	; 0xc8
 8016edc:	f7f6 fd80 	bl	800d9e0 <chThdSleep>
				for (int i = 0;i < 100;i++) {
 8016ee0:	2e64      	cmp	r6, #100	; 0x64
 8016ee2:	d1ed      	bne.n	8016ec0 <terminal_process_string+0xb30>
 8016ee4:	ed9f 8a7f 	vldr	s16, [pc, #508]	; 80170e4 <terminal_process_string+0xd54>
 8016ee8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8016eec:	eef0 8a48 	vmov.f32	s17, s16
 8016ef0:	eef0 9a48 	vmov.f32	s19, s16
 8016ef4:	eeb0 aa48 	vmov.f32	s20, s16
					samples += 1.0;
 8016ef8:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
					vq_avg += mcpwm_foc_get_vq();
 8016efc:	f007 f870 	bl	801dfe0 <mcpwm_foc_get_vq>
 8016f00:	ee3a aa00 	vadd.f32	s20, s20, s0
					rpm_avg += mc_interface_get_rpm();
 8016f04:	f004 fb34 	bl	801b570 <mc_interface_get_rpm>
 8016f08:	ee79 9a80 	vadd.f32	s19, s19, s0
					iq_avg += mc_interface_get_tot_current_directional();
 8016f0c:	f004 fbc8 	bl	801b6a0 <mc_interface_get_tot_current_directional>
					chThdSleepMilliseconds(1);
 8016f10:	200a      	movs	r0, #10
					iq_avg += mc_interface_get_tot_current_directional();
 8016f12:	ee38 8a00 	vadd.f32	s16, s16, s0
					chThdSleepMilliseconds(1);
 8016f16:	f7f6 fd63 	bl	800d9e0 <chThdSleep>
				for (int i = 0;i < 1000;i++) {
 8016f1a:	3c01      	subs	r4, #1
					samples += 1.0;
 8016f1c:	ee78 8a8b 	vadd.f32	s17, s17, s22
				for (int i = 0;i < 1000;i++) {
 8016f20:	d1ec      	bne.n	8016efc <terminal_process_string+0xb6c>
				mc_interface_release_motor();
 8016f22:	f005 faad 	bl	801c480 <mc_interface_release_motor>
				mc_interface_set_configuration(&mcconf_old);
 8016f26:	4870      	ldr	r0, [pc, #448]	; (80170e8 <terminal_process_string+0xd58>)
 8016f28:	f004 ffda 	bl	801bee0 <mc_interface_set_configuration>
				timeout_configure(tout, tout_c);
 8016f2c:	4638      	mov	r0, r7
 8016f2e:	eeb0 0a6a 	vmov.f32	s0, s21
 8016f32:	f003 f95d 	bl	801a1f0 <timeout_configure>
				iq_avg /= samples;
 8016f36:	eec8 6a28 	vdiv.f32	s13, s16, s17
				vq_avg /= samples;
 8016f3a:	ee8a 7a28 	vdiv.f32	s14, s20, s17
				rpm_avg /= samples;
 8016f3e:	eec9 7aa8 	vdiv.f32	s15, s19, s17
				float linkage = (vq_avg - res * iq_avg) / (rpm_avg * ((2.0 * M_PI) / 60.0));
 8016f42:	eea9 7a66 	vfms.f32	s14, s18, s13
 8016f46:	eddf 6a69 	vldr	s13, [pc, #420]	; 80170ec <terminal_process_string+0xd5c>
 8016f4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
				commands_printf("Flux linkage: %.7f\n", (double)linkage);
 8016f4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016f52:	ee16 0a90 	vmov	r0, s13
 8016f56:	e76c      	b.n	8016e32 <terminal_process_string+0xaa2>
		mcconf.motor_type = MOTOR_TYPE_FOC;
 8016f58:	4b5c      	ldr	r3, [pc, #368]	; (80170cc <terminal_process_string+0xd3c>)
 8016f5a:	2202      	movs	r2, #2
		mc_interface_set_configuration(&mcconf);
 8016f5c:	4618      	mov	r0, r3
		mcconf.motor_type = MOTOR_TYPE_FOC;
 8016f5e:	709a      	strb	r2, [r3, #2]
		mc_interface_set_configuration(&mcconf);
 8016f60:	f004 ffbe 	bl	801bee0 <mc_interface_set_configuration>
		float res = 0.0;
 8016f64:	2300      	movs	r3, #0
		mcpwm_foc_measure_res_ind(&res, &ind);
 8016f66:	a911      	add	r1, sp, #68	; 0x44
 8016f68:	a810      	add	r0, sp, #64	; 0x40
		float res = 0.0;
 8016f6a:	9310      	str	r3, [sp, #64]	; 0x40
		float ind = 0.0;
 8016f6c:	9311      	str	r3, [sp, #68]	; 0x44
		mcpwm_foc_measure_res_ind(&res, &ind);
 8016f6e:	f007 fc5f 	bl	801e830 <mcpwm_foc_measure_res_ind>
		commands_printf("Resistance: %.6f ohm", (double)res);
 8016f72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016f74:	f7f5 fa48 	bl	800c408 <__aeabi_f2d>
 8016f78:	4602      	mov	r2, r0
 8016f7a:	460b      	mov	r3, r1
 8016f7c:	485c      	ldr	r0, [pc, #368]	; (80170f0 <terminal_process_string+0xd60>)
 8016f7e:	f001 fba7 	bl	80186d0 <commands_printf>
		commands_printf("Inductance: %.2f microhenry\n", (double)ind);
 8016f82:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f84:	f7f5 fa40 	bl	800c408 <__aeabi_f2d>
 8016f88:	4602      	mov	r2, r0
 8016f8a:	460b      	mov	r3, r1
 8016f8c:	4859      	ldr	r0, [pc, #356]	; (80170f4 <terminal_process_string+0xd64>)
 8016f8e:	f001 fb9f 	bl	80186d0 <commands_printf>
		mc_interface_set_configuration(&mcconf_old);
 8016f92:	4855      	ldr	r0, [pc, #340]	; (80170e8 <terminal_process_string+0xd58>)
 8016f94:	f004 ffa4 	bl	801bee0 <mc_interface_set_configuration>
 8016f98:	f7ff ba85 	b.w	80164a6 <terminal_process_string+0x116>
	} else if (strcmp(argv[0], "foc_state") == 0) {
 8016f9c:	4956      	ldr	r1, [pc, #344]	; (80170f8 <terminal_process_string+0xd68>)
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	f7f5 fe5a 	bl	800cc58 <strcmp>
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	f000 8104 	beq.w	80171b2 <terminal_process_string+0xe22>
	} else if (strcmp(argv[0], "hw_status") == 0) {
 8016faa:	4954      	ldr	r1, [pc, #336]	; (80170fc <terminal_process_string+0xd6c>)
 8016fac:	4628      	mov	r0, r5
 8016fae:	f7f5 fe53 	bl	800cc58 <strcmp>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	f000 80c0 	beq.w	8017138 <terminal_process_string+0xda8>
	} else if (strcmp(argv[0], "drv8301_read_reg") == 0) {
 8016fb8:	4951      	ldr	r1, [pc, #324]	; (8017100 <terminal_process_string+0xd70>)
 8016fba:	4628      	mov	r0, r5
 8016fbc:	f7f5 fe4c 	bl	800cc58 <strcmp>
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	f000 80fd 	beq.w	80171c0 <terminal_process_string+0xe30>
	} else if (strcmp(argv[0], "drv8301_write_reg") == 0) {
 8016fc6:	494f      	ldr	r1, [pc, #316]	; (8017104 <terminal_process_string+0xd74>)
 8016fc8:	4628      	mov	r0, r5
 8016fca:	f7f5 fe45 	bl	800cc58 <strcmp>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	f000 80f6 	beq.w	80171c0 <terminal_process_string+0xe30>
	} else if (strcmp(argv[0], "drv8301_set_oc_adj") == 0) {
 8016fd4:	494c      	ldr	r1, [pc, #304]	; (8017108 <terminal_process_string+0xd78>)
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f7f5 fe3e 	bl	800cc58 <strcmp>
 8016fdc:	2800      	cmp	r0, #0
 8016fde:	f000 80ef 	beq.w	80171c0 <terminal_process_string+0xe30>
	} else if (strcmp(argv[0], "drv8301_print_faults") == 0) {
 8016fe2:	494a      	ldr	r1, [pc, #296]	; (801710c <terminal_process_string+0xd7c>)
 8016fe4:	4628      	mov	r0, r5
 8016fe6:	f7f5 fe37 	bl	800cc58 <strcmp>
 8016fea:	2800      	cmp	r0, #0
 8016fec:	f000 80e8 	beq.w	80171c0 <terminal_process_string+0xe30>
	} else if (strcmp(argv[0], "drv8301_reset_faults") == 0) {
 8016ff0:	4947      	ldr	r1, [pc, #284]	; (8017110 <terminal_process_string+0xd80>)
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	f7f5 fe30 	bl	800cc58 <strcmp>
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	f000 80e1 	beq.w	80171c0 <terminal_process_string+0xe30>
	} else if (strcmp(argv[0], "drv8305_read_reg") == 0) {
 8016ffe:	4945      	ldr	r1, [pc, #276]	; (8017114 <terminal_process_string+0xd84>)
 8017000:	4628      	mov	r0, r5
 8017002:	f7f5 fe29 	bl	800cc58 <strcmp>
 8017006:	2800      	cmp	r0, #0
 8017008:	d055      	beq.n	80170b6 <terminal_process_string+0xd26>
	} else if (strcmp(argv[0], "drv8305_write_reg") == 0) {
 801700a:	4943      	ldr	r1, [pc, #268]	; (8017118 <terminal_process_string+0xd88>)
 801700c:	4628      	mov	r0, r5
 801700e:	f7f5 fe23 	bl	800cc58 <strcmp>
 8017012:	2800      	cmp	r0, #0
 8017014:	d04f      	beq.n	80170b6 <terminal_process_string+0xd26>
	} else if (strcmp(argv[0], "foc_openloop") == 0) {
 8017016:	4941      	ldr	r1, [pc, #260]	; (801711c <terminal_process_string+0xd8c>)
 8017018:	4628      	mov	r0, r5
 801701a:	f7f5 fe1d 	bl	800cc58 <strcmp>
 801701e:	bb38      	cbnz	r0, 8017070 <terminal_process_string+0xce0>
		if (argc == 3) {
 8017020:	2c03      	cmp	r4, #3
 8017022:	d004      	beq.n	801702e <terminal_process_string+0xc9e>
			commands_printf("This command requires two arguments.\n");
 8017024:	483e      	ldr	r0, [pc, #248]	; (8017120 <terminal_process_string+0xd90>)
 8017026:	f001 fb53 	bl	80186d0 <commands_printf>
 801702a:	f7ff ba3c 	b.w	80164a6 <terminal_process_string+0x116>
			float current = -1.0;
 801702e:	4b25      	ldr	r3, [pc, #148]	; (80170c4 <terminal_process_string+0xd34>)
			sscanf(argv[1], "%f", &current);
 8017030:	4925      	ldr	r1, [pc, #148]	; (80170c8 <terminal_process_string+0xd38>)
 8017032:	9819      	ldr	r0, [sp, #100]	; 0x64
			float current = -1.0;
 8017034:	9310      	str	r3, [sp, #64]	; 0x40
			sscanf(argv[1], "%f", &current);
 8017036:	aa10      	add	r2, sp, #64	; 0x40
			float erpm = -1.0;
 8017038:	9311      	str	r3, [sp, #68]	; 0x44
			sscanf(argv[1], "%f", &current);
 801703a:	f010 fe71 	bl	8027d20 <sscanf>
			sscanf(argv[2], "%f", &erpm);
 801703e:	aa11      	add	r2, sp, #68	; 0x44
 8017040:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017042:	4921      	ldr	r1, [pc, #132]	; (80170c8 <terminal_process_string+0xd38>)
 8017044:	f010 fe6c 	bl	8027d20 <sscanf>
			if (current >= 0.0 && erpm >= 0.0) {
 8017048:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 801704c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017054:	f6ff ac5b 	blt.w	801690e <terminal_process_string+0x57e>
 8017058:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 801705c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8017060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017064:	f6ff ac53 	blt.w	801690e <terminal_process_string+0x57e>
				mcpwm_foc_set_openloop(current, erpm);
 8017068:	f006 fe6a 	bl	801dd40 <mcpwm_foc_set_openloop>
 801706c:	f7ff ba1b 	b.w	80164a6 <terminal_process_string+0x116>
	else if (strcmp(argv[0], "help") == 0) {
 8017070:	492c      	ldr	r1, [pc, #176]	; (8017124 <terminal_process_string+0xd94>)
 8017072:	4628      	mov	r0, r5
 8017074:	f7f5 fdf0 	bl	800cc58 <strcmp>
 8017078:	4606      	mov	r6, r0
 801707a:	2800      	cmp	r0, #0
 801707c:	f000 80ac 	beq.w	80171d8 <terminal_process_string+0xe48>
		for (int i = 0;i < callback_write;i++) {
 8017080:	4b29      	ldr	r3, [pc, #164]	; (8017128 <terminal_process_string+0xd98>)
 8017082:	f8d3 9000 	ldr.w	r9, [r3]
 8017086:	f1b9 0f00 	cmp.w	r9, #0
 801708a:	dd0e      	ble.n	80170aa <terminal_process_string+0xd1a>
 801708c:	4e27      	ldr	r6, [pc, #156]	; (801712c <terminal_process_string+0xd9c>)
 801708e:	2700      	movs	r7, #0
			if (strcmp(argv[0], callbacks[i].command) == 0) {
 8017090:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8017094:	4628      	mov	r0, r5
 8017096:	f856 1008 	ldr.w	r1, [r6, r8]
 801709a:	f7f5 fddd 	bl	800cc58 <strcmp>
		for (int i = 0;i < callback_write;i++) {
 801709e:	3701      	adds	r7, #1
			if (strcmp(argv[0], callbacks[i].command) == 0) {
 80170a0:	2800      	cmp	r0, #0
 80170a2:	f000 8092 	beq.w	80171ca <terminal_process_string+0xe3a>
		for (int i = 0;i < callback_write;i++) {
 80170a6:	45b9      	cmp	r9, r7
 80170a8:	d1f2      	bne.n	8017090 <terminal_process_string+0xd00>
			commands_printf("Invalid command: %s\n"
 80170aa:	4629      	mov	r1, r5
 80170ac:	4820      	ldr	r0, [pc, #128]	; (8017130 <terminal_process_string+0xda0>)
 80170ae:	f001 fb0f 	bl	80186d0 <commands_printf>
 80170b2:	f7ff b9f8 	b.w	80164a6 <terminal_process_string+0x116>
		commands_printf("This hardware does not have a DRV8305.\n");
 80170b6:	481f      	ldr	r0, [pc, #124]	; (8017134 <terminal_process_string+0xda4>)
 80170b8:	f001 fb0a 	bl	80186d0 <commands_printf>
 80170bc:	f7ff b9f3 	b.w	80164a6 <terminal_process_string+0x116>
 80170c0:	0802fa0c 	.word	0x0802fa0c
 80170c4:	bf800000 	.word	0xbf800000
 80170c8:	0802f688 	.word	0x0802f688
 80170cc:	20007b24 	.word	0x20007b24
 80170d0:	3ca3d70a 	.word	0x3ca3d70a
 80170d4:	0802fa1c 	.word	0x0802fa1c
 80170d8:	0802fa30 	.word	0x0802fa30
 80170dc:	0802fa78 	.word	0x0802fa78
 80170e0:	42c80000 	.word	0x42c80000
 80170e4:	00000000 	.word	0x00000000
 80170e8:	20007c98 	.word	0x20007c98
 80170ec:	3dd67750 	.word	0x3dd67750
 80170f0:	0802fa40 	.word	0x0802fa40
 80170f4:	0802fa58 	.word	0x0802fa58
 80170f8:	0802fa8c 	.word	0x0802fa8c
 80170fc:	0802fa98 	.word	0x0802fa98
 8017100:	0802fb24 	.word	0x0802fb24
 8017104:	0802fb60 	.word	0x0802fb60
 8017108:	0802fb74 	.word	0x0802fb74
 801710c:	0802fb88 	.word	0x0802fb88
 8017110:	0802fba0 	.word	0x0802fba0
 8017114:	0802fbb8 	.word	0x0802fbb8
 8017118:	0802fbf4 	.word	0x0802fbf4
 801711c:	0802fc08 	.word	0x0802fc08
 8017120:	0802fc18 	.word	0x0802fc18
 8017124:	0802fc60 	.word	0x0802fc60
 8017128:	20007414 	.word	0x20007414
 801712c:	20007418 	.word	0x20007418
 8017130:	080302c0 	.word	0x080302c0
 8017134:	0802fbcc 	.word	0x0802fbcc
		commands_printf("Firmware: %d.%d", FW_VERSION_MAJOR, FW_VERSION_MINOR);
 8017138:	221f      	movs	r2, #31
 801713a:	2103      	movs	r1, #3
 801713c:	488e      	ldr	r0, [pc, #568]	; (8017378 <terminal_process_string+0xfe8>)
 801713e:	f001 fac7 	bl	80186d0 <commands_printf>
		commands_printf("Hardware: %s", HW_NAME);
 8017142:	498e      	ldr	r1, [pc, #568]	; (801737c <terminal_process_string+0xfec>)
 8017144:	488e      	ldr	r0, [pc, #568]	; (8017380 <terminal_process_string+0xff0>)
 8017146:	f001 fac3 	bl	80186d0 <commands_printf>
				STM32_UUID_8[8], STM32_UUID_8[9], STM32_UUID_8[10], STM32_UUID_8[11]);
 801714a:	488e      	ldr	r0, [pc, #568]	; (8017384 <terminal_process_string+0xff4>)
				STM32_UUID_8[0], STM32_UUID_8[1], STM32_UUID_8[2], STM32_UUID_8[3],
 801714c:	4b8e      	ldr	r3, [pc, #568]	; (8017388 <terminal_process_string+0xff8>)
 801714e:	4a8f      	ldr	r2, [pc, #572]	; (801738c <terminal_process_string+0xffc>)
 8017150:	498f      	ldr	r1, [pc, #572]	; (8017390 <terminal_process_string+0x1000>)
		commands_printf("UUID: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X",
 8017152:	7804      	ldrb	r4, [r0, #0]
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	7812      	ldrb	r2, [r2, #0]
 8017158:	7809      	ldrb	r1, [r1, #0]
 801715a:	9408      	str	r4, [sp, #32]
 801715c:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8017160:	9407      	str	r4, [sp, #28]
 8017162:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8017166:	9406      	str	r4, [sp, #24]
 8017168:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 801716c:	9405      	str	r4, [sp, #20]
 801716e:	f810 4c04 	ldrb.w	r4, [r0, #-4]
 8017172:	9404      	str	r4, [sp, #16]
 8017174:	f810 4c05 	ldrb.w	r4, [r0, #-5]
 8017178:	9403      	str	r4, [sp, #12]
 801717a:	f810 4c06 	ldrb.w	r4, [r0, #-6]
 801717e:	9402      	str	r4, [sp, #8]
 8017180:	f810 4c07 	ldrb.w	r4, [r0, #-7]
 8017184:	9401      	str	r4, [sp, #4]
				STM32_UUID_8[0], STM32_UUID_8[1], STM32_UUID_8[2], STM32_UUID_8[3],
 8017186:	3808      	subs	r0, #8
		commands_printf("UUID: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X",
 8017188:	7800      	ldrb	r0, [r0, #0]
 801718a:	9000      	str	r0, [sp, #0]
 801718c:	4881      	ldr	r0, [pc, #516]	; (8017394 <terminal_process_string+0x1004>)
 801718e:	f001 fa9f 	bl	80186d0 <commands_printf>
		commands_printf("Permanent NRF found: %s", conf_general_permanent_nrf_found ? "Yes" : "No");
 8017192:	4b81      	ldr	r3, [pc, #516]	; (8017398 <terminal_process_string+0x1008>)
 8017194:	4a81      	ldr	r2, [pc, #516]	; (801739c <terminal_process_string+0x100c>)
 8017196:	7819      	ldrb	r1, [r3, #0]
 8017198:	4b81      	ldr	r3, [pc, #516]	; (80173a0 <terminal_process_string+0x1010>)
 801719a:	4882      	ldr	r0, [pc, #520]	; (80173a4 <terminal_process_string+0x1014>)
 801719c:	2900      	cmp	r1, #0
 801719e:	bf14      	ite	ne
 80171a0:	4611      	movne	r1, r2
 80171a2:	4619      	moveq	r1, r3
 80171a4:	f001 fa94 	bl	80186d0 <commands_printf>
		commands_printf(" ");
 80171a8:	487f      	ldr	r0, [pc, #508]	; (80173a8 <terminal_process_string+0x1018>)
 80171aa:	f001 fa91 	bl	80186d0 <commands_printf>
 80171ae:	f7ff b97a 	b.w	80164a6 <terminal_process_string+0x116>
		mcpwm_foc_print_state();
 80171b2:	f007 fd6d 	bl	801ec90 <mcpwm_foc_print_state>
		commands_printf(" ");
 80171b6:	487c      	ldr	r0, [pc, #496]	; (80173a8 <terminal_process_string+0x1018>)
 80171b8:	f001 fa8a 	bl	80186d0 <commands_printf>
 80171bc:	f7ff b973 	b.w	80164a6 <terminal_process_string+0x116>
		commands_printf("This hardware does not have a DRV8301.\n");
 80171c0:	487a      	ldr	r0, [pc, #488]	; (80173ac <terminal_process_string+0x101c>)
 80171c2:	f001 fa85 	bl	80186d0 <commands_printf>
 80171c6:	f7ff b96e 	b.w	80164a6 <terminal_process_string+0x116>
				callbacks[i].cbf(argc, (const char**)argv);
 80171ca:	4446      	add	r6, r8
 80171cc:	a918      	add	r1, sp, #96	; 0x60
 80171ce:	68f3      	ldr	r3, [r6, #12]
 80171d0:	4620      	mov	r0, r4
 80171d2:	4798      	blx	r3
 80171d4:	f7ff b967 	b.w	80164a6 <terminal_process_string+0x116>
		commands_printf("Valid commands are:");
 80171d8:	4875      	ldr	r0, [pc, #468]	; (80173b0 <terminal_process_string+0x1020>)
		for (int i = 0;i < callback_write;i++) {
 80171da:	4d76      	ldr	r5, [pc, #472]	; (80173b4 <terminal_process_string+0x1024>)
		commands_printf("Valid commands are:");
 80171dc:	f001 fa78 	bl	80186d0 <commands_printf>
		commands_printf("help");
 80171e0:	4875      	ldr	r0, [pc, #468]	; (80173b8 <terminal_process_string+0x1028>)
 80171e2:	f001 fa75 	bl	80186d0 <commands_printf>
		commands_printf("  Show this help");
 80171e6:	4875      	ldr	r0, [pc, #468]	; (80173bc <terminal_process_string+0x102c>)
 80171e8:	f001 fa72 	bl	80186d0 <commands_printf>
		commands_printf("ping");
 80171ec:	4874      	ldr	r0, [pc, #464]	; (80173c0 <terminal_process_string+0x1030>)
 80171ee:	f001 fa6f 	bl	80186d0 <commands_printf>
		commands_printf("  Print pong here to see if the reply works");
 80171f2:	4874      	ldr	r0, [pc, #464]	; (80173c4 <terminal_process_string+0x1034>)
 80171f4:	f001 fa6c 	bl	80186d0 <commands_printf>
		commands_printf("stop");
 80171f8:	4873      	ldr	r0, [pc, #460]	; (80173c8 <terminal_process_string+0x1038>)
 80171fa:	f001 fa69 	bl	80186d0 <commands_printf>
		commands_printf("  Stop the motor");
 80171fe:	4873      	ldr	r0, [pc, #460]	; (80173cc <terminal_process_string+0x103c>)
 8017200:	f001 fa66 	bl	80186d0 <commands_printf>
		commands_printf("last_adc_duration");
 8017204:	4872      	ldr	r0, [pc, #456]	; (80173d0 <terminal_process_string+0x1040>)
 8017206:	f001 fa63 	bl	80186d0 <commands_printf>
		commands_printf("  The time the latest ADC interrupt consumed");
 801720a:	4872      	ldr	r0, [pc, #456]	; (80173d4 <terminal_process_string+0x1044>)
 801720c:	f001 fa60 	bl	80186d0 <commands_printf>
		commands_printf("kv");
 8017210:	4871      	ldr	r0, [pc, #452]	; (80173d8 <terminal_process_string+0x1048>)
 8017212:	f001 fa5d 	bl	80186d0 <commands_printf>
		commands_printf("  The calculated kv of the motor");
 8017216:	4871      	ldr	r0, [pc, #452]	; (80173dc <terminal_process_string+0x104c>)
 8017218:	f001 fa5a 	bl	80186d0 <commands_printf>
		commands_printf("mem");
 801721c:	4870      	ldr	r0, [pc, #448]	; (80173e0 <terminal_process_string+0x1050>)
 801721e:	f001 fa57 	bl	80186d0 <commands_printf>
		commands_printf("  Show memory usage");
 8017222:	4870      	ldr	r0, [pc, #448]	; (80173e4 <terminal_process_string+0x1054>)
 8017224:	f001 fa54 	bl	80186d0 <commands_printf>
		commands_printf("threads");
 8017228:	486f      	ldr	r0, [pc, #444]	; (80173e8 <terminal_process_string+0x1058>)
 801722a:	f001 fa51 	bl	80186d0 <commands_printf>
		commands_printf("  List all threads");
 801722e:	486f      	ldr	r0, [pc, #444]	; (80173ec <terminal_process_string+0x105c>)
 8017230:	f001 fa4e 	bl	80186d0 <commands_printf>
		commands_printf("fault");
 8017234:	486e      	ldr	r0, [pc, #440]	; (80173f0 <terminal_process_string+0x1060>)
 8017236:	f001 fa4b 	bl	80186d0 <commands_printf>
		commands_printf("  Prints the current fault code");
 801723a:	486e      	ldr	r0, [pc, #440]	; (80173f4 <terminal_process_string+0x1064>)
 801723c:	f001 fa48 	bl	80186d0 <commands_printf>
		commands_printf("faults");
 8017240:	486d      	ldr	r0, [pc, #436]	; (80173f8 <terminal_process_string+0x1068>)
 8017242:	f001 fa45 	bl	80186d0 <commands_printf>
		commands_printf("  Prints all stored fault codes and conditions when they arrived");
 8017246:	486d      	ldr	r0, [pc, #436]	; (80173fc <terminal_process_string+0x106c>)
 8017248:	f001 fa42 	bl	80186d0 <commands_printf>
		commands_printf("rpm");
 801724c:	486c      	ldr	r0, [pc, #432]	; (8017400 <terminal_process_string+0x1070>)
 801724e:	f001 fa3f 	bl	80186d0 <commands_printf>
		commands_printf("  Prints the current electrical RPM");
 8017252:	486c      	ldr	r0, [pc, #432]	; (8017404 <terminal_process_string+0x1074>)
 8017254:	f001 fa3c 	bl	80186d0 <commands_printf>
		commands_printf("tacho");
 8017258:	486b      	ldr	r0, [pc, #428]	; (8017408 <terminal_process_string+0x1078>)
 801725a:	f001 fa39 	bl	80186d0 <commands_printf>
		commands_printf("  Prints tachometer value");
 801725e:	486b      	ldr	r0, [pc, #428]	; (801740c <terminal_process_string+0x107c>)
 8017260:	f001 fa36 	bl	80186d0 <commands_printf>
		commands_printf("tim");
 8017264:	486a      	ldr	r0, [pc, #424]	; (8017410 <terminal_process_string+0x1080>)
 8017266:	f001 fa33 	bl	80186d0 <commands_printf>
		commands_printf("  Prints tim1 and tim8 settings");
 801726a:	486a      	ldr	r0, [pc, #424]	; (8017414 <terminal_process_string+0x1084>)
 801726c:	f001 fa30 	bl	80186d0 <commands_printf>
		commands_printf("volt");
 8017270:	4869      	ldr	r0, [pc, #420]	; (8017418 <terminal_process_string+0x1088>)
 8017272:	f001 fa2d 	bl	80186d0 <commands_printf>
		commands_printf("  Prints different voltages");
 8017276:	4869      	ldr	r0, [pc, #420]	; (801741c <terminal_process_string+0x108c>)
 8017278:	f001 fa2a 	bl	80186d0 <commands_printf>
		commands_printf("param_detect [current] [min_rpm] [low_duty]");
 801727c:	4868      	ldr	r0, [pc, #416]	; (8017420 <terminal_process_string+0x1090>)
 801727e:	f001 fa27 	bl	80186d0 <commands_printf>
		commands_printf("  Spin up the motor in COMM_MODE_DELAY and compute its parameters.");
 8017282:	4868      	ldr	r0, [pc, #416]	; (8017424 <terminal_process_string+0x1094>)
 8017284:	f001 fa24 	bl	80186d0 <commands_printf>
		commands_printf("  This test should be performed without load on the motor.");
 8017288:	4867      	ldr	r0, [pc, #412]	; (8017428 <terminal_process_string+0x1098>)
 801728a:	f001 fa21 	bl	80186d0 <commands_printf>
		commands_printf("  Example: param_detect 5.0 600 0.06");
 801728e:	4867      	ldr	r0, [pc, #412]	; (801742c <terminal_process_string+0x109c>)
 8017290:	f001 fa1e 	bl	80186d0 <commands_printf>
		commands_printf("rpm_dep");
 8017294:	4866      	ldr	r0, [pc, #408]	; (8017430 <terminal_process_string+0x10a0>)
 8017296:	f001 fa1b 	bl	80186d0 <commands_printf>
		commands_printf("  Prints some rpm-dep values");
 801729a:	4866      	ldr	r0, [pc, #408]	; (8017434 <terminal_process_string+0x10a4>)
 801729c:	f001 fa18 	bl	80186d0 <commands_printf>
		commands_printf("can_devs");
 80172a0:	4865      	ldr	r0, [pc, #404]	; (8017438 <terminal_process_string+0x10a8>)
 80172a2:	f001 fa15 	bl	80186d0 <commands_printf>
		commands_printf("  Prints all CAN devices seen on the bus the past second");
 80172a6:	4865      	ldr	r0, [pc, #404]	; (801743c <terminal_process_string+0x10ac>)
 80172a8:	f001 fa12 	bl	80186d0 <commands_printf>
		commands_printf("foc_encoder_detect [current]");
 80172ac:	4864      	ldr	r0, [pc, #400]	; (8017440 <terminal_process_string+0x10b0>)
 80172ae:	f001 fa0f 	bl	80186d0 <commands_printf>
		commands_printf("  Run the motor at 1Hz on open loop and compute encoder settings");
 80172b2:	4864      	ldr	r0, [pc, #400]	; (8017444 <terminal_process_string+0x10b4>)
 80172b4:	f001 fa0c 	bl	80186d0 <commands_printf>
		commands_printf("measure_res [current]");
 80172b8:	4863      	ldr	r0, [pc, #396]	; (8017448 <terminal_process_string+0x10b8>)
 80172ba:	f001 fa09 	bl	80186d0 <commands_printf>
		commands_printf("  Lock the motor with a current and calculate its resistance");
 80172be:	4863      	ldr	r0, [pc, #396]	; (801744c <terminal_process_string+0x10bc>)
 80172c0:	f001 fa06 	bl	80186d0 <commands_printf>
		commands_printf("measure_ind [duty]");
 80172c4:	4862      	ldr	r0, [pc, #392]	; (8017450 <terminal_process_string+0x10c0>)
 80172c6:	f001 fa03 	bl	80186d0 <commands_printf>
		commands_printf("  Send short voltage pulses, measure the current and calculate the motor inductance");
 80172ca:	4862      	ldr	r0, [pc, #392]	; (8017454 <terminal_process_string+0x10c4>)
 80172cc:	f001 fa00 	bl	80186d0 <commands_printf>
		commands_printf("measure_linkage [current] [duty] [min_rpm] [motor_res]");
 80172d0:	4861      	ldr	r0, [pc, #388]	; (8017458 <terminal_process_string+0x10c8>)
 80172d2:	f001 f9fd 	bl	80186d0 <commands_printf>
		commands_printf("  Run the motor in BLDC delay mode and measure the flux linkage");
 80172d6:	4861      	ldr	r0, [pc, #388]	; (801745c <terminal_process_string+0x10cc>)
 80172d8:	f001 f9fa 	bl	80186d0 <commands_printf>
		commands_printf("  example measure_linkage 5 0.5 700 0.076");
 80172dc:	4860      	ldr	r0, [pc, #384]	; (8017460 <terminal_process_string+0x10d0>)
 80172de:	f001 f9f7 	bl	80186d0 <commands_printf>
		commands_printf("  tip: measure the resistance with measure_res first");
 80172e2:	4860      	ldr	r0, [pc, #384]	; (8017464 <terminal_process_string+0x10d4>)
 80172e4:	f001 f9f4 	bl	80186d0 <commands_printf>
		commands_printf("measure_res_ind");
 80172e8:	485f      	ldr	r0, [pc, #380]	; (8017468 <terminal_process_string+0x10d8>)
 80172ea:	f001 f9f1 	bl	80186d0 <commands_printf>
		commands_printf("  Measure the motor resistance and inductance with an incremental adaptive algorithm.");
 80172ee:	485f      	ldr	r0, [pc, #380]	; (801746c <terminal_process_string+0x10dc>)
 80172f0:	f001 f9ee 	bl	80186d0 <commands_printf>
		commands_printf("measure_linkage_foc [duty]");
 80172f4:	485e      	ldr	r0, [pc, #376]	; (8017470 <terminal_process_string+0x10e0>)
 80172f6:	f001 f9eb 	bl	80186d0 <commands_printf>
		commands_printf("  Run the motor with FOC and measure the flux linkage.");
 80172fa:	485e      	ldr	r0, [pc, #376]	; (8017474 <terminal_process_string+0x10e4>)
 80172fc:	f001 f9e8 	bl	80186d0 <commands_printf>
		commands_printf("foc_state");
 8017300:	485d      	ldr	r0, [pc, #372]	; (8017478 <terminal_process_string+0x10e8>)
 8017302:	f001 f9e5 	bl	80186d0 <commands_printf>
		commands_printf("  Print some FOC state variables.");
 8017306:	485d      	ldr	r0, [pc, #372]	; (801747c <terminal_process_string+0x10ec>)
 8017308:	f001 f9e2 	bl	80186d0 <commands_printf>
		commands_printf("hw_status");
 801730c:	485c      	ldr	r0, [pc, #368]	; (8017480 <terminal_process_string+0x10f0>)
 801730e:	f001 f9df 	bl	80186d0 <commands_printf>
		commands_printf("  Print some hardware status information.");
 8017312:	485c      	ldr	r0, [pc, #368]	; (8017484 <terminal_process_string+0x10f4>)
 8017314:	f001 f9dc 	bl	80186d0 <commands_printf>
		commands_printf("foc_openloop [current] [erpm]");
 8017318:	485b      	ldr	r0, [pc, #364]	; (8017488 <terminal_process_string+0x10f8>)
 801731a:	f001 f9d9 	bl	80186d0 <commands_printf>
		commands_printf("  Create an open loop rotating current vector.");
 801731e:	485b      	ldr	r0, [pc, #364]	; (801748c <terminal_process_string+0x10fc>)
 8017320:	f001 f9d6 	bl	80186d0 <commands_printf>
		for (int i = 0;i < callback_write;i++) {
 8017324:	682b      	ldr	r3, [r5, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	dd18      	ble.n	801735c <terminal_process_string+0xfcc>
 801732a:	4c59      	ldr	r4, [pc, #356]	; (8017490 <terminal_process_string+0x1100>)
				commands_printf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 801732c:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8017498 <terminal_process_string+0x1108>
				commands_printf("  There is no help available for this command.");
 8017330:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801749c <terminal_process_string+0x110c>
				commands_printf("  %s", callbacks[i].help);
 8017334:	4f57      	ldr	r7, [pc, #348]	; (8017494 <terminal_process_string+0x1104>)
			if (callbacks[i].arg_names) {
 8017336:	68a3      	ldr	r3, [r4, #8]
				commands_printf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 8017338:	4648      	mov	r0, r9
 801733a:	461a      	mov	r2, r3
			if (callbacks[i].arg_names) {
 801733c:	b1bb      	cbz	r3, 801736e <terminal_process_string+0xfde>
				commands_printf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 801733e:	6821      	ldr	r1, [r4, #0]
 8017340:	f001 f9c6 	bl	80186d0 <commands_printf>
			if (callbacks[i].help) {
 8017344:	6863      	ldr	r3, [r4, #4]
				commands_printf("  %s", callbacks[i].help);
 8017346:	4638      	mov	r0, r7
 8017348:	4619      	mov	r1, r3
			if (callbacks[i].help) {
 801734a:	b163      	cbz	r3, 8017366 <terminal_process_string+0xfd6>
				commands_printf("  %s", callbacks[i].help);
 801734c:	f001 f9c0 	bl	80186d0 <commands_printf>
		for (int i = 0;i < callback_write;i++) {
 8017350:	682b      	ldr	r3, [r5, #0]
 8017352:	3601      	adds	r6, #1
 8017354:	42b3      	cmp	r3, r6
 8017356:	f104 0410 	add.w	r4, r4, #16
 801735a:	dcec      	bgt.n	8017336 <terminal_process_string+0xfa6>
		commands_printf(" ");
 801735c:	4812      	ldr	r0, [pc, #72]	; (80173a8 <terminal_process_string+0x1018>)
 801735e:	f001 f9b7 	bl	80186d0 <commands_printf>
 8017362:	f7ff b8a0 	b.w	80164a6 <terminal_process_string+0x116>
				commands_printf("  There is no help available for this command.");
 8017366:	4640      	mov	r0, r8
 8017368:	f001 f9b2 	bl	80186d0 <commands_printf>
 801736c:	e7f0      	b.n	8017350 <terminal_process_string+0xfc0>
				commands_printf(callbacks[i].command);
 801736e:	6820      	ldr	r0, [r4, #0]
 8017370:	f001 f9ae 	bl	80186d0 <commands_printf>
 8017374:	e7e6      	b.n	8017344 <terminal_process_string+0xfb4>
 8017376:	bf00      	nop
 8017378:	0802faa4 	.word	0x0802faa4
 801737c:	0802fab4 	.word	0x0802fab4
 8017380:	0802fab8 	.word	0x0802fab8
 8017384:	1fff7a1b 	.word	0x1fff7a1b
 8017388:	1fff7a12 	.word	0x1fff7a12
 801738c:	1fff7a11 	.word	0x1fff7a11
 8017390:	1fff7a10 	.word	0x1fff7a10
 8017394:	0802fac8 	.word	0x0802fac8
 8017398:	20008048 	.word	0x20008048
 801739c:	0802f1b0 	.word	0x0802f1b0
 80173a0:	0802f1b4 	.word	0x0802f1b4
 80173a4:	0802fb0c 	.word	0x0802fb0c
 80173a8:	0802f33c 	.word	0x0802f33c
 80173ac:	0802fb38 	.word	0x0802fb38
 80173b0:	0802fc40 	.word	0x0802fc40
 80173b4:	20007414 	.word	0x20007414
 80173b8:	0802fc60 	.word	0x0802fc60
 80173bc:	0802fc54 	.word	0x0802fc54
 80173c0:	0802f1d0 	.word	0x0802f1d0
 80173c4:	0802fc68 	.word	0x0802fc68
 80173c8:	0802f1e0 	.word	0x0802f1e0
 80173cc:	0802fc94 	.word	0x0802fc94
 80173d0:	0802f1f8 	.word	0x0802f1f8
 80173d4:	0802fca8 	.word	0x0802fca8
 80173d8:	0802f27c 	.word	0x0802f27c
 80173dc:	0802fcd8 	.word	0x0802fcd8
 80173e0:	0802f2a0 	.word	0x0802f2a0
 80173e4:	0802fcfc 	.word	0x0802fcfc
 80173e8:	0802f2f8 	.word	0x0802f2f8
 80173ec:	0802fd10 	.word	0x0802fd10
 80173f0:	0802f3a4 	.word	0x0802f3a4
 80173f4:	0802fd24 	.word	0x0802fd24
 80173f8:	0802f3b0 	.word	0x0802f3b0
 80173fc:	0802fd44 	.word	0x0802fd44
 8017400:	0802f560 	.word	0x0802f560
 8017404:	0802fd88 	.word	0x0802fd88
 8017408:	0802f580 	.word	0x0802f580
 801740c:	0802fdac 	.word	0x0802fdac
 8017410:	0802f5a0 	.word	0x0802f5a0
 8017414:	0802fdc8 	.word	0x0802fdc8
 8017418:	0802f658 	.word	0x0802f658
 801741c:	0802fde8 	.word	0x0802fde8
 8017420:	0802fe04 	.word	0x0802fe04
 8017424:	0802fe30 	.word	0x0802fe30
 8017428:	0802fe74 	.word	0x0802fe74
 801742c:	0802feb0 	.word	0x0802feb0
 8017430:	0802f7f8 	.word	0x0802f7f8
 8017434:	0802fed8 	.word	0x0802fed8
 8017438:	0802f854 	.word	0x0802f854
 801743c:	0802fef8 	.word	0x0802fef8
 8017440:	0802ff34 	.word	0x0802ff34
 8017444:	0802ff54 	.word	0x0802ff54
 8017448:	0802ff98 	.word	0x0802ff98
 801744c:	0802ffb0 	.word	0x0802ffb0
 8017450:	0802fff0 	.word	0x0802fff0
 8017454:	08030004 	.word	0x08030004
 8017458:	08030058 	.word	0x08030058
 801745c:	08030090 	.word	0x08030090
 8017460:	080300d0 	.word	0x080300d0
 8017464:	080300fc 	.word	0x080300fc
 8017468:	0802fa30 	.word	0x0802fa30
 801746c:	08030134 	.word	0x08030134
 8017470:	0803018c 	.word	0x0803018c
 8017474:	080301a8 	.word	0x080301a8
 8017478:	0802fa8c 	.word	0x0802fa8c
 801747c:	080301e0 	.word	0x080301e0
 8017480:	0802fa98 	.word	0x0802fa98
 8017484:	08030204 	.word	0x08030204
 8017488:	08030230 	.word	0x08030230
 801748c:	08030250 	.word	0x08030250
 8017490:	20007418 	.word	0x20007418
 8017494:	08030288 	.word	0x08030288
 8017498:	08030280 	.word	0x08030280
 801749c:	08030290 	.word	0x08030290

080174a0 <terminal_add_fault_data>:

void terminal_add_fault_data(fault_data *data) {
 80174a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	fault_vec[fault_vec_write++] = *data;
 80174a2:	4f0e      	ldr	r7, [pc, #56]	; (80174dc <terminal_add_fault_data+0x3c>)
 80174a4:	4c0e      	ldr	r4, [pc, #56]	; (80174e0 <terminal_add_fault_data+0x40>)
 80174a6:	683e      	ldr	r6, [r7, #0]
 80174a8:	4605      	mov	r5, r0
 80174aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174ac:	f106 0e01 	add.w	lr, r6, #1
 80174b0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80174b4:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80174b8:	f8c7 e000 	str.w	lr, [r7]
 80174bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80174ca:	e884 0003 	stmia.w	r4, {r0, r1}
	if (fault_vec_write >= FAULT_VEC_LEN) {
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	2b18      	cmp	r3, #24
		fault_vec_write = 0;
 80174d2:	bfc4      	itt	gt
 80174d4:	2300      	movgt	r3, #0
 80174d6:	603b      	strgt	r3, [r7, #0]
 80174d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174da:	bf00      	nop
 80174dc:	20007b20 	.word	0x20007b20
 80174e0:	200075a8 	.word	0x200075a8
	...

080174f0 <terminal_register_command_callback>:
 */
void terminal_register_command_callback(
		const char* command,
		const char *help,
		const char *arg_names,
		void(*cbf)(int argc, const char **argv)) {
 80174f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	int callback_num = callback_write;
 80174f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8017578 <terminal_register_command_callback+0x88>

	for (int i = 0;i < callback_write;i++) {
		// First check the address in case the same callback is registered more than once.
		if (callbacks[i].command == command) {
 80174f8:	4e1e      	ldr	r6, [pc, #120]	; (8017574 <terminal_register_command_callback+0x84>)
	int callback_num = callback_write;
 80174fa:	f8d8 7000 	ldr.w	r7, [r8]
	for (int i = 0;i < callback_write;i++) {
 80174fe:	2f00      	cmp	r7, #0
		void(*cbf)(int argc, const char **argv)) {
 8017500:	4605      	mov	r5, r0
 8017502:	468b      	mov	fp, r1
 8017504:	4692      	mov	sl, r2
 8017506:	4699      	mov	r9, r3
	for (int i = 0;i < callback_write;i++) {
 8017508:	dd1c      	ble.n	8017544 <terminal_register_command_callback+0x54>
		if (callbacks[i].command == command) {
 801750a:	6830      	ldr	r0, [r6, #0]
 801750c:	4285      	cmp	r5, r0
 801750e:	d02e      	beq.n	801756e <terminal_register_command_callback+0x7e>
 8017510:	2400      	movs	r4, #0
 8017512:	e007      	b.n	8017524 <terminal_register_command_callback+0x34>
	for (int i = 0;i < callback_write;i++) {
 8017514:	3401      	adds	r4, #1
 8017516:	42a7      	cmp	r7, r4
		if (callbacks[i].command == command) {
 8017518:	ea4f 1304 	mov.w	r3, r4, lsl #4
	for (int i = 0;i < callback_write;i++) {
 801751c:	d012      	beq.n	8017544 <terminal_register_command_callback+0x54>
		if (callbacks[i].command == command) {
 801751e:	58f0      	ldr	r0, [r6, r3]
 8017520:	42a8      	cmp	r0, r5
 8017522:	d005      	beq.n	8017530 <terminal_register_command_callback+0x40>
			callback_num = i;
			break;
		}

		// Check by string comparison.
		if (strcmp(callbacks[i].command, command) == 0) {
 8017524:	4629      	mov	r1, r5
 8017526:	f7f5 fb97 	bl	800cc58 <strcmp>
 801752a:	2800      	cmp	r0, #0
 801752c:	d1f2      	bne.n	8017514 <terminal_register_command_callback+0x24>
 801752e:	0123      	lsls	r3, r4, #4
			callback_num = i;
			break;
		}
	}

	callbacks[callback_num].command = command;
 8017530:	18f2      	adds	r2, r6, r3
 8017532:	50f5      	str	r5, [r6, r3]
	callbacks[callback_num].help = help;
 8017534:	f8c2 b004 	str.w	fp, [r2, #4]
	callbacks[callback_num].arg_names = arg_names;
 8017538:	f8c2 a008 	str.w	sl, [r2, #8]
	callbacks[callback_num].cbf = cbf;
 801753c:	f8c2 900c 	str.w	r9, [r2, #12]
 8017540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	callbacks[callback_num].command = command;
 8017544:	013a      	lsls	r2, r7, #4
 8017546:	18b3      	adds	r3, r6, r2

	if (callback_num == callback_write) {
		callback_write++;
 8017548:	3701      	adds	r7, #1
		if (callback_write >= CALLBACK_LEN) {
 801754a:	2f18      	cmp	r7, #24
	callbacks[callback_num].command = command;
 801754c:	50b5      	str	r5, [r6, r2]
	callbacks[callback_num].help = help;
 801754e:	f8c3 b004 	str.w	fp, [r3, #4]
	callbacks[callback_num].arg_names = arg_names;
 8017552:	f8c3 a008 	str.w	sl, [r3, #8]
	callbacks[callback_num].cbf = cbf;
 8017556:	f8c3 900c 	str.w	r9, [r3, #12]
		if (callback_write >= CALLBACK_LEN) {
 801755a:	dd04      	ble.n	8017566 <terminal_register_command_callback+0x76>
			callback_write = 0;
 801755c:	2300      	movs	r3, #0
 801755e:	f8c8 3000 	str.w	r3, [r8]
		}
	}
}
 8017562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callback_write++;
 8017566:	f8c8 7000 	str.w	r7, [r8]
 801756a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756e:	2300      	movs	r3, #0
 8017570:	e7de      	b.n	8017530 <terminal_register_command_callback+0x40>
 8017572:	bf00      	nop
 8017574:	20007418 	.word	0x20007418
 8017578:	20007414 	.word	0x20007414
 801757c:	00000000 	.word	0x00000000

08017580 <conf_general_init>:
bool conf_general_permanent_nrf_found = false;

// Private variables
mc_configuration mcconf, mcconf_old;

void conf_general_init(void) {
 8017580:	b508      	push	{r3, lr}
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));
 8017582:	f44f 720f 	mov.w	r2, #572	; 0x23c
 8017586:	2100      	movs	r1, #0
 8017588:	480f      	ldr	r0, [pc, #60]	; (80175c8 <conf_general_init+0x48>)
 801758a:	f010 fb79 	bl	8027c80 <memset>
 801758e:	4b0f      	ldr	r3, [pc, #60]	; (80175cc <conf_general_init+0x4c>)
 8017590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017594:	f503 71ba 	add.w	r1, r3, #372	; 0x174

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
 8017598:	f823 2f02 	strh.w	r2, [r3, #2]!
 801759c:	3201      	adds	r2, #1
	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 801759e:	428b      	cmp	r3, r1
 80175a0:	b292      	uxth	r2, r2
 80175a2:	d1f9      	bne.n	8017598 <conf_general_init+0x18>
 80175a4:	490a      	ldr	r1, [pc, #40]	; (80175d0 <conf_general_init+0x50>)
 80175a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
 80175aa:	f823 2f02 	strh.w	r2, [r3, #2]!
 80175ae:	3201      	adds	r2, #1
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 80175b0:	4299      	cmp	r1, r3
 80175b2:	b292      	uxth	r2, r2
 80175b4:	d1f9      	bne.n	80175aa <conf_general_init+0x2a>
	}

	FLASH_Unlock();
 80175b6:	f00d f8a3 	bl	8024700 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 80175ba:	20f2      	movs	r0, #242	; 0xf2
 80175bc:	f00d f8b0 	bl	8024720 <FLASH_ClearFlag>
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
	EE_Init();
}
 80175c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	EE_Init();
 80175c4:	f000 bec4 	b.w	8018350 <EE_Init>
 80175c8:	20007e0c 	.word	0x20007e0c
 80175cc:	20007e0a 	.word	0x20007e0a
 80175d0:	20008046 	.word	0x20008046
	...

080175e0 <conf_general_get_default_app_configuration>:
 * Load the compiled default app_configuration.
 *
 * @param conf
 * A pointer to store the default configuration to.
 */
void conf_general_get_default_app_configuration(app_configuration *conf) {
 80175e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	memset(conf, 0, sizeof(app_configuration));
 80175e4:	22c8      	movs	r2, #200	; 0xc8
void conf_general_get_default_app_configuration(app_configuration *conf) {
 80175e6:	4604      	mov	r4, r0
	memset(conf, 0, sizeof(app_configuration));
 80175e8:	2100      	movs	r1, #0
 80175ea:	f010 fb49 	bl	8027c80 <memset>
	conf->app_ppm_conf.ctrl_type = APPCONF_PPM_CTRL_TYPE;
	conf->app_ppm_conf.pid_max_erpm = APPCONF_PPM_PID_MAX_ERPM;
	conf->app_ppm_conf.hyst = APPCONF_PPM_HYST;
	conf->app_ppm_conf.pulse_start = APPCONF_PPM_PULSE_START;
	conf->app_ppm_conf.pulse_end = APPCONF_PPM_PULSE_END;
	conf->app_ppm_conf.pulse_center = APPCONF_PPM_PULSE_CENTER;
 80175ee:	f04f 597f 	mov.w	r9, #1069547520	; 0x3fc00000
	conf->app_ppm_conf.pid_max_erpm = APPCONF_PPM_PID_MAX_ERPM;
 80175f2:	4b45      	ldr	r3, [pc, #276]	; (8017708 <conf_general_get_default_app_configuration+0x128>)
	conf->app_ppm_conf.throttle_exp_mode = APPCONF_PPM_THROTTLE_EXP_MODE;
	conf->app_ppm_conf.ramp_time_pos = APPCONF_PPM_RAMP_TIME_POS;
	conf->app_ppm_conf.ramp_time_neg = APPCONF_PPM_RAMP_TIME_NEG;
	conf->app_ppm_conf.multi_esc = APPCONF_PPM_MULTI_ESC;
	conf->app_ppm_conf.tc = APPCONF_PPM_TC;
	conf->app_ppm_conf.tc_max_diff = APPCONF_PPM_TC_MAX_DIFF;
 80175f4:	4845      	ldr	r0, [pc, #276]	; (801770c <conf_general_get_default_app_configuration+0x12c>)
	conf->app_ppm_conf.hyst = APPCONF_PPM_HYST;
 80175f6:	f8df e120 	ldr.w	lr, [pc, #288]	; 8017718 <conf_general_get_default_app_configuration+0x138>
	conf->app_ppm_conf.ramp_time_pos = APPCONF_PPM_RAMP_TIME_POS;
 80175fa:	4e45      	ldr	r6, [pc, #276]	; (8017710 <conf_general_get_default_app_configuration+0x130>)
	conf->app_ppm_conf.ramp_time_neg = APPCONF_PPM_RAMP_TIME_NEG;
 80175fc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 801771c <conf_general_get_default_app_configuration+0x13c>

	conf->app_adc_conf.ctrl_type = APPCONF_ADC_CTRL_TYPE;
	conf->app_adc_conf.hyst = APPCONF_ADC_HYST;
	conf->app_adc_conf.voltage_start = APPCONF_ADC_VOLTAGE_START;
 8017600:	4f44      	ldr	r7, [pc, #272]	; (8017714 <conf_general_get_default_app_configuration+0x134>)
	conf->app_ppm_conf.pid_max_erpm = APPCONF_PPM_PID_MAX_ERPM;
 8017602:	61e3      	str	r3, [r4, #28]
	conf->timeout_msec = APPCONF_TIMEOUT_MSEC;
 8017604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	conf->app_ppm_conf.pulse_start = APPCONF_PPM_PULSE_START;
 8017608:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	conf->controller_id = APPCONF_CONTROLLER_ID;
 801760c:	2300      	movs	r3, #0
	conf->send_can_status_rate_hz = APPCONF_SEND_CAN_STATUS_RATE_HZ;
 801760e:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
	conf->app_to_use = APPCONF_APP_TO_USE;
 8017612:	2503      	movs	r5, #3
	conf->app_ppm_conf.pulse_end = APPCONF_PPM_PULSE_END;
 8017614:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
	conf->timeout_msec = APPCONF_TIMEOUT_MSEC;
 8017618:	6062      	str	r2, [r4, #4]
	conf->app_ppm_conf.pulse_start = APPCONF_PPM_PULSE_START;
 801761a:	6261      	str	r1, [r4, #36]	; 0x24
	conf->app_ppm_conf.median_filter = APPCONF_PPM_MEDIAN_FILTER;
 801761c:	2201      	movs	r2, #1
	conf->app_ppm_conf.throttle_exp_mode = APPCONF_PPM_THROTTLE_EXP_MODE;
 801761e:	2102      	movs	r1, #2
	conf->app_ppm_conf.pulse_center = APPCONF_PPM_PULSE_CENTER;
 8017620:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	conf->app_adc_conf.voltage_end = APPCONF_ADC_VOLTAGE_END;
 8017624:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8017720 <conf_general_get_default_app_configuration+0x140>
	conf->send_can_status_rate_hz = APPCONF_SEND_CAN_STATUS_RATE_HZ;
 8017628:	f8c4 c010 	str.w	ip, [r4, #16]
	conf->app_ppm_conf.pulse_end = APPCONF_PPM_PULSE_END;
 801762c:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
	conf->app_adc_conf.voltage_center = APPCONF_ADC_VOLTAGE_CENTER;
 8017630:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
	conf->app_ppm_conf.ramp_time_neg = APPCONF_PPM_RAMP_TIME_NEG;
 8017634:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	conf->app_adc_conf.voltage_end = APPCONF_ADC_VOLTAGE_END;
 8017638:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
	conf->app_adc_conf.voltage2_start = APPCONF_ADC_VOLTAGE2_START;
	conf->app_adc_conf.voltage2_end = APPCONF_ADC_VOLTAGE2_END;
 801763c:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	conf->controller_id = APPCONF_CONTROLLER_ID;
 8017640:	7023      	strb	r3, [r4, #0]
	conf->send_can_status = APPCONF_SEND_CAN_STATUS;
 8017642:	7323      	strb	r3, [r4, #12]
	conf->app_ppm_conf.ctrl_type = APPCONF_PPM_CTRL_TYPE;
 8017644:	7623      	strb	r3, [r4, #24]
	conf->app_ppm_conf.multi_esc = APPCONF_PPM_MULTI_ESC;
 8017646:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	conf->app_ppm_conf.tc = APPCONF_PPM_TC;
 801764a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	conf->app_adc_conf.ctrl_type = APPCONF_ADC_CTRL_TYPE;
 801764e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	conf->app_adc_conf.use_filter = APPCONF_ADC_USE_FILTER;
	conf->app_adc_conf.safe_start = APPCONF_ADC_SAFE_START;
	conf->app_adc_conf.cc_button_inverted = APPCONF_ADC_CC_BUTTON_INVERTED;
 8017652:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
	conf->app_adc_conf.rev_button_inverted = APPCONF_ADC_REV_BUTTON_INVERTED;
 8017656:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	conf->app_adc_conf.voltage_inverted = APPCONF_ADC_VOLTAGE_INVERTED;
 801765a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
	conf->app_adc_conf.voltage2_inverted = APPCONF_ADC_VOLTAGE2_INVERTED;
 801765e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
	conf->app_to_use = APPCONF_APP_TO_USE;
 8017662:	7525      	strb	r5, [r4, #20]
	conf->app_ppm_conf.hyst = APPCONF_PPM_HYST;
 8017664:	f8c4 e020 	str.w	lr, [r4, #32]
	conf->app_adc_conf.hyst = APPCONF_ADC_HYST;
 8017668:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
	conf->app_ppm_conf.median_filter = APPCONF_PPM_MEDIAN_FILTER;
 801766c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
	conf->app_ppm_conf.safe_start = APPCONF_PPM_SAFE_START;
 8017670:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	conf->app_adc_conf.use_filter = APPCONF_ADC_USE_FILTER;
 8017674:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
	conf->app_adc_conf.safe_start = APPCONF_ADC_SAFE_START;
 8017678:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
	conf->app_ppm_conf.throttle_exp_mode = APPCONF_PPM_THROTTLE_EXP_MODE;
 801767c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	conf->app_ppm_conf.ramp_time_pos = APPCONF_PPM_RAMP_TIME_POS;
 8017680:	6426      	str	r6, [r4, #64]	; 0x40
	conf->app_ppm_conf.tc_max_diff = APPCONF_PPM_TC_MAX_DIFF;
 8017682:	64e0      	str	r0, [r4, #76]	; 0x4c
	conf->app_adc_conf.voltage_start = APPCONF_ADC_VOLTAGE_START;
 8017684:	65a7      	str	r7, [r4, #88]	; 0x58
	conf->app_adc_conf.voltage2_start = APPCONF_ADC_VOLTAGE2_START;
 8017686:	6667      	str	r7, [r4, #100]	; 0x64
	conf->app_nrf_conf.speed = APPCONF_NRF_SPEED;
	conf->app_nrf_conf.power = APPCONF_NRF_POWER;
	conf->app_nrf_conf.crc_type = APPCONF_NRF_CRC;
	conf->app_nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
	conf->app_nrf_conf.retries = APPCONF_NRF_RETRIES;
	conf->app_nrf_conf.channel = APPCONF_NRF_CHANNEL;
 8017688:	f04f 094c 	mov.w	r9, #76	; 0x4c
	conf->app_adc_conf.throttle_exp_mode = APPCONF_ADC_THROTTLE_EXP_MODE;
 801768c:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
	conf->app_adc_conf.ramp_time_neg = APPCONF_ADC_RAMP_TIME_NEG;
 8017690:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
	conf->app_adc_conf.update_rate_hz = APPCONF_ADC_UPDATE_RATE_HZ;
 8017694:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
	conf->app_nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
 8017698:	f04f 08c6 	mov.w	r8, #198	; 0xc6
	conf->app_nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 801769c:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
	conf->app_uart_baudrate = APPCONF_UART_BAUDRATE;
 80176a0:	f44f 3ae1 	mov.w	sl, #115200	; 0x1c200
	conf->app_nrf_conf.retries = APPCONF_NRF_RETRIES;
 80176a4:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
	conf->app_nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
 80176a8:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	conf->app_nrf_conf.channel = APPCONF_NRF_CHANNEL;
 80176ac:	f884 90c1 	strb.w	r9, [r4, #193]	; 0xc1
	conf->app_nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
 80176b0:	f884 80c2 	strb.w	r8, [r4, #194]	; 0xc2
	conf->app_nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 80176b4:	f884 c0c3 	strb.w	ip, [r4, #195]	; 0xc3
	conf->app_adc_conf.ramp_time_pos = APPCONF_ADC_RAMP_TIME_POS;
 80176b8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	conf->app_adc_conf.multi_esc = APPCONF_ADC_MULTI_ESC;
 80176bc:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	conf->app_adc_conf.tc = APPCONF_ADC_TC;
 80176c0:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
	conf->app_adc_conf.tc_max_diff = APPCONF_ADC_TC_MAX_DIFF;
 80176c4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
	conf->app_chuk_conf.ctrl_type = APPCONF_CHUK_CTRL_TYPE;
 80176c8:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conf->app_chuk_conf.hyst = APPCONF_CHUK_HYST;
 80176cc:	f8c4 e09c 	str.w	lr, [r4, #156]	; 0x9c
	conf->app_chuk_conf.ramp_time_pos = APPCONF_CHUK_RAMP_TIME_POS;
 80176d0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
	conf->app_chuk_conf.ramp_time_neg = APPCONF_CHUK_RAMP_TIME_NEG;
 80176d4:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
	conf->app_chuk_conf.stick_erpm_per_s_in_cc = APPCONF_STICK_ERPM_PER_S_IN_CC;
 80176d8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	conf->app_chuk_conf.throttle_exp_mode = APPCONF_CHUK_THROTTLE_EXP_MODE;
 80176dc:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
	conf->app_chuk_conf.multi_esc = APPCONF_CHUK_MULTI_ESC;
 80176e0:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	conf->app_chuk_conf.tc = APPCONF_CHUK_TC;
 80176e4:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
	conf->app_chuk_conf.tc_max_diff = APPCONF_CHUK_TC_MAX_DIFF;
 80176e8:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	conf->app_nrf_conf.speed = APPCONF_NRF_SPEED;
 80176ec:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conf->app_nrf_conf.power = APPCONF_NRF_POWER;
 80176f0:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
	conf->app_nrf_conf.crc_type = APPCONF_NRF_CRC;
 80176f4:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
	conf->app_nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
 80176f8:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
	conf->app_nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;
 80176fc:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
	conf->app_uart_baudrate = APPCONF_UART_BAUDRATE;
 8017700:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	conf->app_nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 8017704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017708:	466a6000 	.word	0x466a6000
 801770c:	453b8000 	.word	0x453b8000
 8017710:	3e99999a 	.word	0x3e99999a
 8017714:	3f666666 	.word	0x3f666666
 8017718:	3e19999a 	.word	0x3e19999a
 801771c:	3dcccccd 	.word	0x3dcccccd
 8017720:	40400000 	.word	0x40400000
	...

08017730 <conf_general_get_default_mc_configuration>:
 * Load the compiled default mc_configuration.
 *
 * @param conf
 * A pointer to store the default configuration to.
 */
void conf_general_get_default_mc_configuration(mc_configuration *conf) {
 8017730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	memset(conf, 0, sizeof(mc_configuration));
 8017734:	f44f 72ba 	mov.w	r2, #372	; 0x174
void conf_general_get_default_mc_configuration(mc_configuration *conf) {
 8017738:	4604      	mov	r4, r0
	memset(conf, 0, sizeof(mc_configuration));
 801773a:	2100      	movs	r1, #0
 801773c:	f010 faa0 	bl	8027c80 <memset>

	conf->l_current_max = MCCONF_L_CURRENT_MAX;
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
	conf->l_in_current_max = MCCONF_L_IN_CURRENT_MAX;
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
	conf->l_abs_current_max = MCCONF_L_MAX_ABS_CURRENT;
 8017740:	4f86      	ldr	r7, [pc, #536]	; (801795c <conf_general_get_default_mc_configuration+0x22c>)
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
	conf->l_erpm_start = MCCONF_L_RPM_START;
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
	conf->l_max_vin = MCCONF_L_MAX_VOLTAGE;
 8017742:	4887      	ldr	r0, [pc, #540]	; (8017960 <conf_general_get_default_mc_configuration+0x230>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
 8017744:	4987      	ldr	r1, [pc, #540]	; (8017964 <conf_general_get_default_mc_configuration+0x234>)
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
 8017746:	4b88      	ldr	r3, [pc, #544]	; (8017968 <conf_general_get_default_mc_configuration+0x238>)
	conf->l_abs_current_max = MCCONF_L_MAX_ABS_CURRENT;
 8017748:	6167      	str	r7, [r4, #20]
	conf->l_max_vin = MCCONF_L_MAX_VOLTAGE;
 801774a:	6320      	str	r0, [r4, #48]	; 0x30
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
	conf->l_temp_motor_start = MCCONF_L_LIM_TEMP_MOTOR_START;
	conf->l_temp_motor_end = MCCONF_L_LIM_TEMP_MOTOR_END;
	conf->l_temp_accel_dec = MCCONF_L_LIM_TEMP_ACCEL_DEC;
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
	conf->l_max_duty = MCCONF_L_MAX_DUTY;
 801774c:	4f87      	ldr	r7, [pc, #540]	; (801796c <conf_general_get_default_mc_configuration+0x23c>)
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
 801774e:	4888      	ldr	r0, [pc, #544]	; (8017970 <conf_general_get_default_mc_configuration+0x240>)
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
 8017750:	4a88      	ldr	r2, [pc, #544]	; (8017974 <conf_general_get_default_mc_configuration+0x244>)
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
 8017752:	4d89      	ldr	r5, [pc, #548]	; (8017978 <conf_general_get_default_mc_configuration+0x248>)
	conf->l_temp_accel_dec = MCCONF_L_LIM_TEMP_ACCEL_DEC;
 8017754:	4e89      	ldr	r6, [pc, #548]	; (801797c <conf_general_get_default_mc_configuration+0x24c>)
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
 8017756:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 80179fc <conf_general_get_default_mc_configuration+0x2cc>
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
 801775a:	61a1      	str	r1, [r4, #24]
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
 801775c:	61e3      	str	r3, [r4, #28]
	conf->l_watt_max = MCCONF_L_WATT_MAX;
 801775e:	4988      	ldr	r1, [pc, #544]	; (8017980 <conf_general_get_default_mc_configuration+0x250>)
	conf->l_watt_min = MCCONF_L_WATT_MIN;
 8017760:	4b88      	ldr	r3, [pc, #544]	; (8017984 <conf_general_get_default_mc_configuration+0x254>)
	conf->l_max_duty = MCCONF_L_MAX_DUTY;
 8017762:	65a7      	str	r7, [r4, #88]	; 0x58
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
 8017764:	6120      	str	r0, [r4, #16]
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
 8017766:	4f88      	ldr	r7, [pc, #544]	; (8017988 <conf_general_get_default_mc_configuration+0x258>)

	conf->lo_current_max = conf->l_current_max;
	conf->lo_current_min = conf->l_current_min;
	conf->lo_in_current_max = conf->l_in_current_max;
	conf->lo_in_current_min = conf->l_in_current_min;
 8017768:	6720      	str	r0, [r4, #112]	; 0x70
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
 801776a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
 801776e:	6262      	str	r2, [r4, #36]	; 0x24
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
 8017770:	62a5      	str	r5, [r4, #40]	; 0x28
	conf->l_current_max = MCCONF_L_CURRENT_MAX;
 8017772:	4a86      	ldr	r2, [pc, #536]	; (801798c <conf_general_get_default_mc_configuration+0x25c>)
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
 8017774:	4d86      	ldr	r5, [pc, #536]	; (8017990 <conf_general_get_default_mc_configuration+0x260>)
	conf->l_temp_accel_dec = MCCONF_L_LIM_TEMP_ACCEL_DEC;
 8017776:	6526      	str	r6, [r4, #80]	; 0x50
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
 8017778:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
	conf->l_erpm_start = MCCONF_L_RPM_START;
 801777c:	4e85      	ldr	r6, [pc, #532]	; (8017994 <conf_general_get_default_mc_configuration+0x264>)
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
 801777e:	f8df e280 	ldr.w	lr, [pc, #640]	; 8017a00 <conf_general_get_default_mc_configuration+0x2d0>
	conf->l_watt_max = MCCONF_L_WATT_MAX;
 8017782:	65e1      	str	r1, [r4, #92]	; 0x5c
	conf->l_watt_min = MCCONF_L_WATT_MIN;
 8017784:	6623      	str	r3, [r4, #96]	; 0x60
	conf->pwm_mode = MCCONF_PWM_MODE;
 8017786:	2101      	movs	r1, #1
	conf->comm_mode = MCCONF_COMM_MODE;
 8017788:	2300      	movs	r3, #0
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
 801778a:	62e0      	str	r0, [r4, #44]	; 0x2c
	conf->l_battery_cut_end = MCCONF_L_BATTERY_CUT_END;
 801778c:	63a0      	str	r0, [r4, #56]	; 0x38
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
 801778e:	6467      	str	r7, [r4, #68]	; 0x44
	conf->l_battery_cut_start = MCCONF_L_BATTERY_CUT_START;
 8017790:	4881      	ldr	r0, [pc, #516]	; (8017998 <conf_general_get_default_mc_configuration+0x268>)
	conf->l_temp_motor_end = MCCONF_L_LIM_TEMP_MOTOR_END;
 8017792:	64e7      	str	r7, [r4, #76]	; 0x4c
	conf->sl_max_fullbreak_current_dir_change = MCCONF_SL_MAX_FB_CURR_DIR_CHANGE;
	conf->sl_min_erpm_cycle_int_limit = MCCONF_SL_MIN_ERPM_CYCLE_INT_LIMIT;
	conf->sl_cycle_int_limit = MCCONF_SL_CYCLE_INT_LIMIT;
	conf->sl_phase_advance_at_br = MCCONF_SL_PHASE_ADVANCE_AT_BR;
	conf->sl_cycle_int_rpm_br = MCCONF_SL_CYCLE_INT_BR;
	conf->sl_bemf_coupling_k = MCCONF_SL_BEMF_COUPLING_K;
 8017794:	4f81      	ldr	r7, [pc, #516]	; (801799c <conf_general_get_default_mc_configuration+0x26c>)
	conf->pwm_mode = MCCONF_PWM_MODE;
 8017796:	7021      	strb	r1, [r4, #0]
	conf->l_slow_abs_current = MCCONF_L_SLOW_ABS_OVERCURRENT;
 8017798:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	conf->l_current_max = MCCONF_L_CURRENT_MAX;
 801779c:	6062      	str	r2, [r4, #4]
	conf->l_in_current_max = MCCONF_L_IN_CURRENT_MAX;
 801779e:	60e2      	str	r2, [r4, #12]
	conf->lo_current_max = conf->l_current_max;
 80177a0:	6662      	str	r2, [r4, #100]	; 0x64
	conf->lo_in_current_max = conf->l_in_current_max;
 80177a2:	66e2      	str	r2, [r4, #108]	; 0x6c
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
 80177a4:	60a5      	str	r5, [r4, #8]
	conf->lo_current_min = conf->l_current_min;
 80177a6:	66a5      	str	r5, [r4, #104]	; 0x68
	conf->l_erpm_start = MCCONF_L_RPM_START;
 80177a8:	6226      	str	r6, [r4, #32]
	conf->l_battery_cut_start = MCCONF_L_BATTERY_CUT_START;
 80177aa:	6360      	str	r0, [r4, #52]	; 0x34
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
 80177ac:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
	conf->l_temp_motor_start = MCCONF_L_LIM_TEMP_MOTOR_START;
 80177b0:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
	conf->comm_mode = MCCONF_COMM_MODE;
 80177b4:	7063      	strb	r3, [r4, #1]
	conf->motor_type = MCCONF_DEFAULT_MOTOR_TYPE;
 80177b6:	70a3      	strb	r3, [r4, #2]
	conf->sensor_mode = MCCONF_SENSOR_MODE;
 80177b8:	70e3      	strb	r3, [r4, #3]
	conf->lo_current_motor_max_now = conf->l_current_max;
 80177ba:	6762      	str	r2, [r4, #116]	; 0x74
	conf->sl_bemf_coupling_k = MCCONF_SL_BEMF_COUPLING_K;
 80177bc:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94

	conf->hall_table[0] = MCCONF_HALL_TAB_0;
	conf->hall_table[1] = MCCONF_HALL_TAB_1;
	conf->hall_table[2] = MCCONF_HALL_TAB_2;
 80177c0:	2703      	movs	r7, #3
 80177c2:	f884 709a 	strb.w	r7, [r4, #154]	; 0x9a
	conf->hall_table[3] = MCCONF_HALL_TAB_3;
 80177c6:	2702      	movs	r7, #2
	conf->sl_cycle_int_rpm_br = MCCONF_SL_CYCLE_INT_BR;
 80177c8:	4a75      	ldr	r2, [pc, #468]	; (80179a0 <conf_general_get_default_mc_configuration+0x270>)
	conf->hall_table[3] = MCCONF_HALL_TAB_3;
 80177ca:	f884 709b 	strb.w	r7, [r4, #155]	; 0x9b
	conf->hall_table[4] = MCCONF_HALL_TAB_4;
 80177ce:	2705      	movs	r7, #5
	conf->sl_cycle_int_rpm_br = MCCONF_SL_CYCLE_INT_BR;
 80177d0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
	conf->hall_table[4] = MCCONF_HALL_TAB_4;
 80177d4:	f884 709c 	strb.w	r7, [r4, #156]	; 0x9c
	conf->foc_current_kp = MCCONF_FOC_CURRENT_KP;
	conf->foc_current_ki = MCCONF_FOC_CURRENT_KI;
	conf->foc_f_sw = MCCONF_FOC_F_SW;
	conf->foc_dt_us = MCCONF_FOC_DT_US;
	conf->foc_encoder_inverted = MCCONF_FOC_ENCODER_INVERTED;
	conf->foc_encoder_offset = MCCONF_FOC_ENCODER_OFFSET;
 80177d8:	4a72      	ldr	r2, [pc, #456]	; (80179a4 <conf_general_get_default_mc_configuration+0x274>)
	conf->sl_cycle_int_limit = MCCONF_SL_CYCLE_INT_LIMIT;
 80177da:	f8df e228 	ldr.w	lr, [pc, #552]	; 8017a04 <conf_general_get_default_mc_configuration+0x2d4>
	conf->lo_current_motor_min_now = conf->l_current_min;
 80177de:	67a5      	str	r5, [r4, #120]	; 0x78
	conf->hall_table[5] = MCCONF_HALL_TAB_5;
 80177e0:	2706      	movs	r7, #6
	conf->sl_phase_advance_at_br = MCCONF_SL_PHASE_ADVANCE_AT_BR;
 80177e2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	conf->foc_f_sw = MCCONF_FOC_F_SW;
 80177e6:	4d70      	ldr	r5, [pc, #448]	; (80179a8 <conf_general_get_default_mc_configuration+0x278>)
	conf->foc_current_ki = MCCONF_FOC_CURRENT_KI;
 80177e8:	4e70      	ldr	r6, [pc, #448]	; (80179ac <conf_general_get_default_mc_configuration+0x27c>)
	conf->hall_table[5] = MCCONF_HALL_TAB_5;
 80177ea:	f884 709d 	strb.w	r7, [r4, #157]	; 0x9d
	conf->foc_encoder_offset = MCCONF_FOC_ENCODER_OFFSET;
 80177ee:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
	conf->hall_table[6] = MCCONF_HALL_TAB_6;
 80177f2:	2704      	movs	r7, #4
	conf->foc_encoder_ratio = MCCONF_FOC_ENCODER_RATIO;
 80177f4:	4a6e      	ldr	r2, [pc, #440]	; (80179b0 <conf_general_get_default_mc_configuration+0x280>)
	conf->sl_cycle_int_limit = MCCONF_SL_CYCLE_INT_LIMIT;
 80177f6:	f8c4 e088 	str.w	lr, [r4, #136]	; 0x88
	conf->hall_table[6] = MCCONF_HALL_TAB_6;
 80177fa:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
	conf->foc_dt_us = MCCONF_FOC_DT_US;
 80177fe:	f8df e208 	ldr.w	lr, [pc, #520]	; 8017a08 <conf_general_get_default_mc_configuration+0x2d8>
	conf->foc_sensor_mode = MCCONF_FOC_SENSOR_MODE;
	conf->foc_pll_kp = MCCONF_FOC_PLL_KP;
	conf->foc_pll_ki = MCCONF_FOC_PLL_KI;
	conf->foc_motor_l = MCCONF_FOC_MOTOR_L;
 8017802:	4f6c      	ldr	r7, [pc, #432]	; (80179b4 <conf_general_get_default_mc_configuration+0x284>)
	conf->foc_current_ki = MCCONF_FOC_CURRENT_KI;
 8017804:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
	conf->foc_f_sw = MCCONF_FOC_F_SW;
 8017808:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
	conf->foc_motor_r = MCCONF_FOC_MOTOR_R;
 801780c:	4e6a      	ldr	r6, [pc, #424]	; (80179b8 <conf_general_get_default_mc_configuration+0x288>)
	conf->foc_motor_flux_linkage = MCCONF_FOC_MOTOR_FLUX_LINKAGE;
 801780e:	4d6b      	ldr	r5, [pc, #428]	; (80179bc <conf_general_get_default_mc_configuration+0x28c>)
	conf->foc_encoder_ratio = MCCONF_FOC_ENCODER_RATIO;
 8017810:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	conf->foc_observer_gain = MCCONF_FOC_OBSERVER_GAIN;
	conf->foc_observer_gain_slow = MCCONF_FOC_OBSERVER_GAIN_SLOW;
 8017814:	4a6a      	ldr	r2, [pc, #424]	; (80179c0 <conf_general_get_default_mc_configuration+0x290>)
	conf->sl_min_erpm = MCCONF_SL_MIN_RPM;
 8017816:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8017a0c <conf_general_get_default_mc_configuration+0x2dc>
	conf->sl_min_erpm_cycle_int_limit = MCCONF_SL_MIN_ERPM_CYCLE_INT_LIMIT;
 801781a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8017a10 <conf_general_get_default_mc_configuration+0x2e0>
	conf->foc_dt_us = MCCONF_FOC_DT_US;
 801781e:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
	conf->foc_motor_l = MCCONF_FOC_MOTOR_L;
 8017822:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	conf->foc_observer_gain = MCCONF_FOC_OBSERVER_GAIN;
 8017826:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8017a14 <conf_general_get_default_mc_configuration+0x2e4>
	conf->hall_sl_erpm = MCCONF_HALL_ERPM;
 801782a:	4f66      	ldr	r7, [pc, #408]	; (80179c4 <conf_general_get_default_mc_configuration+0x294>)
	conf->foc_motor_r = MCCONF_FOC_MOTOR_R;
 801782c:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	conf->foc_motor_flux_linkage = MCCONF_FOC_MOTOR_FLUX_LINKAGE;
 8017830:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
	conf->foc_current_kp = MCCONF_FOC_CURRENT_KP;
 8017834:	4e64      	ldr	r6, [pc, #400]	; (80179c8 <conf_general_get_default_mc_configuration+0x298>)
	conf->foc_pll_ki = MCCONF_FOC_PLL_KI;
 8017836:	4d65      	ldr	r5, [pc, #404]	; (80179cc <conf_general_get_default_mc_configuration+0x29c>)
	conf->foc_observer_gain_slow = MCCONF_FOC_OBSERVER_GAIN_SLOW;
 8017838:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
	conf->hall_table[0] = MCCONF_HALL_TAB_0;
 801783c:	22ff      	movs	r2, #255	; 0xff
	conf->sl_max_fullbreak_current_dir_change = MCCONF_SL_MAX_FB_CURR_DIR_CHANGE;
 801783e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	conf->hall_table[1] = MCCONF_HALL_TAB_1;
 8017842:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
	conf->sl_min_erpm = MCCONF_SL_MIN_RPM;
 8017846:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	conf->sl_min_erpm_cycle_int_limit = MCCONF_SL_MIN_ERPM_CYCLE_INT_LIMIT;
 801784a:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
	conf->foc_observer_gain = MCCONF_FOC_OBSERVER_GAIN;
 801784e:	f8c4 e0cc 	str.w	lr, [r4, #204]	; 0xcc
	conf->hall_table[0] = MCCONF_HALL_TAB_0;
 8017852:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conf->hall_table[7] = MCCONF_HALL_TAB_7;
 8017856:	f884 209f 	strb.w	r2, [r4, #159]	; 0x9f
	conf->hall_sl_erpm = MCCONF_HALL_ERPM;
 801785a:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
	conf->foc_pll_kp = MCCONF_FOC_PLL_KP;
 801785e:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
	conf->foc_current_kp = MCCONF_FOC_CURRENT_KP;
 8017862:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
	conf->foc_temp_comp = MCCONF_FOC_TEMP_COMP;
	conf->foc_temp_comp_base_temp = MCCONF_FOC_TEMP_COMP_BASE_TEMP;

	conf->s_pid_kp = MCCONF_S_PID_KP;
	conf->s_pid_ki = MCCONF_S_PID_KI;
	conf->s_pid_kd = MCCONF_S_PID_KD;
 8017866:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8017a18 <conf_general_get_default_mc_configuration+0x2e8>
	conf->foc_encoder_inverted = MCCONF_FOC_ENCODER_INVERTED;
 801786a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	conf->foc_sensor_mode = MCCONF_FOC_SENSOR_MODE;
 801786e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conf->foc_pll_ki = MCCONF_FOC_PLL_KI;
 8017872:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	conf->foc_duty_dowmramp_kp = MCCONF_FOC_DUTY_DOWNRAMP_KP;
 8017876:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
	conf->foc_temp_comp_base_temp = MCCONF_FOC_TEMP_COMP_BASE_TEMP;
 801787a:	4855      	ldr	r0, [pc, #340]	; (80179d0 <conf_general_get_default_mc_configuration+0x2a0>)
	conf->foc_hall_table[0] = MCCONF_FOC_HALL_TAB_0;
 801787c:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	conf->foc_hall_table[1] = MCCONF_FOC_HALL_TAB_1;
 8017880:	f884 20fa 	strb.w	r2, [r4, #250]	; 0xfa
	conf->foc_hall_table[2] = MCCONF_FOC_HALL_TAB_2;
 8017884:	f884 20fb 	strb.w	r2, [r4, #251]	; 0xfb
	conf->foc_hall_table[3] = MCCONF_FOC_HALL_TAB_3;
 8017888:	f884 20fc 	strb.w	r2, [r4, #252]	; 0xfc
	conf->foc_hall_table[4] = MCCONF_FOC_HALL_TAB_4;
 801788c:	f884 20fd 	strb.w	r2, [r4, #253]	; 0xfd
	conf->foc_hall_table[5] = MCCONF_FOC_HALL_TAB_5;
 8017890:	f884 20fe 	strb.w	r2, [r4, #254]	; 0xfe
	conf->foc_hall_table[6] = MCCONF_FOC_HALL_TAB_6;
 8017894:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
	conf->foc_hall_table[7] = MCCONF_FOC_HALL_TAB_7;
 8017898:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
	conf->s_pid_min_erpm = MCCONF_S_PID_MIN_RPM;
	conf->s_pid_allow_braking = MCCONF_S_PID_ALLOW_BRAKING;
 801789c:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
	conf->s_pid_min_erpm = MCCONF_S_PID_MIN_RPM;
 80178a0:	4a4c      	ldr	r2, [pc, #304]	; (80179d4 <conf_general_get_default_mc_configuration+0x2a4>)

	conf->p_pid_kp = MCCONF_P_PID_KP;
	conf->p_pid_ki = MCCONF_P_PID_KI;
	conf->p_pid_kd = MCCONF_P_PID_KD;
 80178a2:	494d      	ldr	r1, [pc, #308]	; (80179d8 <conf_general_get_default_mc_configuration+0x2a8>)
	conf->foc_temp_comp_base_temp = MCCONF_FOC_TEMP_COMP_BASE_TEMP;
 80178a4:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
	conf->s_pid_kd = MCCONF_S_PID_KD;
 80178a8:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
	conf->p_pid_ang_div = MCCONF_P_PID_ANG_DIV;

	conf->cc_startup_boost_duty = MCCONF_CC_STARTUP_BOOST_DUTY;
	conf->cc_min_current = MCCONF_CC_MIN_CURRENT;
	conf->cc_gain = MCCONF_CC_GAIN;
	conf->cc_ramp_step_max = MCCONF_CC_RAMP_STEP;
 80178ac:	484b      	ldr	r0, [pc, #300]	; (80179dc <conf_general_get_default_mc_configuration+0x2ac>)

	conf->m_fault_stop_time_ms = MCCONF_M_FAULT_STOP_TIME;
	conf->m_duty_ramp_step = MCCONF_M_RAMP_STEP;
 80178ae:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8017a1c <conf_general_get_default_mc_configuration+0x2ec>
	conf->p_pid_kp = MCCONF_P_PID_KP;
 80178b2:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
	conf->cc_startup_boost_duty = MCCONF_CC_STARTUP_BOOST_DUTY;
 80178b6:	4f4a      	ldr	r7, [pc, #296]	; (80179e0 <conf_general_get_default_mc_configuration+0x2b0>)
	conf->cc_gain = MCCONF_CC_GAIN;
 80178b8:	4e4a      	ldr	r6, [pc, #296]	; (80179e4 <conf_general_get_default_mc_configuration+0x2b4>)
	conf->s_pid_min_erpm = MCCONF_S_PID_MIN_RPM;
 80178ba:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
	conf->p_pid_kd = MCCONF_P_PID_KD;
 80178be:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	conf->foc_sl_openloop_hyst = MCCONF_FOC_SL_OPENLOOP_HYST;
 80178c2:	4a49      	ldr	r2, [pc, #292]	; (80179e8 <conf_general_get_default_mc_configuration+0x2b8>)
	conf->cc_ramp_step_max = MCCONF_CC_RAMP_STEP;
 80178c4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conf->p_pid_ang_div = MCCONF_P_PID_ANG_DIV;
 80178c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	conf->m_fault_stop_time_ms = MCCONF_M_FAULT_STOP_TIME;
 80178cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	conf->m_duty_ramp_step = MCCONF_M_RAMP_STEP;
 80178d0:	f8c4 e150 	str.w	lr, [r4, #336]	; 0x150
	conf->m_current_backoff_gain = MCCONF_M_CURRENT_BACKOFF_GAIN;
 80178d4:	f04f 5e7c 	mov.w	lr, #1056964608	; 0x3f000000
	conf->p_pid_ang_div = MCCONF_P_PID_ANG_DIV;
 80178d8:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	conf->cc_startup_boost_duty = MCCONF_CC_STARTUP_BOOST_DUTY;
 80178dc:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
	conf->s_pid_kp = MCCONF_S_PID_KP;
 80178e0:	4942      	ldr	r1, [pc, #264]	; (80179ec <conf_general_get_default_mc_configuration+0x2bc>)
	conf->cc_gain = MCCONF_CC_GAIN;
 80178e2:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	conf->m_fault_stop_time_ms = MCCONF_M_FAULT_STOP_TIME;
 80178e6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conf->m_current_backoff_gain = MCCONF_M_CURRENT_BACKOFF_GAIN;
 80178ea:	f8c4 e154 	str.w	lr, [r4, #340]	; 0x154
	conf->foc_sl_openloop_hyst = MCCONF_FOC_SL_OPENLOOP_HYST;
 80178ee:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
	conf->foc_sl_openloop_time = MCCONF_FOC_SL_OPENLOOP_TIME;
 80178f2:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
	conf->cc_min_current = MCCONF_CC_MIN_CURRENT;
 80178f6:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
	conf->foc_duty_dowmramp_ki = MCCONF_FOC_DUTY_DOWNRAMP_KI;
 80178fa:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8017a20 <conf_general_get_default_mc_configuration+0x2f0>
	conf->foc_openloop_rpm = MCCONF_FOC_OPENLOOP_RPM;
 80178fe:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8017a24 <conf_general_get_default_mc_configuration+0x2f4>
	conf->foc_sl_erpm = MCCONF_FOC_SL_ERPM;
 8017902:	f8df c124 	ldr.w	ip, [pc, #292]	; 8017a28 <conf_general_get_default_mc_configuration+0x2f8>
	conf->m_encoder_counts = MCCONF_M_ENCODER_COUNTS;
	conf->m_sensor_port_mode = MCCONF_M_SENSOR_PORT_MODE;
	conf->m_invert_direction = MCCONF_M_INVERT_DIRECTION;
	conf->m_drv8301_oc_mode = MCCONF_M_DRV8301_OC_MODE;
	conf->m_drv8301_oc_adj = MCCONF_M_DRV8301_OC_ADJ;
	conf->m_bldc_f_sw_min = MCCONF_M_BLDC_F_SW_MIN;
 8017906:	4f3a      	ldr	r7, [pc, #232]	; (80179f0 <conf_general_get_default_mc_configuration+0x2c0>)
	conf->m_bldc_f_sw_max = MCCONF_M_BLDC_F_SW_MAX;
	conf->m_dc_f_sw = MCCONF_M_DC_F_SW;
 8017908:	4e3a      	ldr	r6, [pc, #232]	; (80179f4 <conf_general_get_default_mc_configuration+0x2c4>)
	conf->m_ntc_motor_beta = MCCONF_M_NTC_MOTOR_BETA;
 801790a:	483b      	ldr	r0, [pc, #236]	; (80179f8 <conf_general_get_default_mc_configuration+0x2c8>)
	conf->foc_sample_v0_v7 = MCCONF_FOC_SAMPLE_V0_V7;
 801790c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	conf->m_encoder_counts = MCCONF_M_ENCODER_COUNTS;
 8017910:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
	conf->m_drv8301_oc_adj = MCCONF_M_DRV8301_OC_ADJ;
 8017914:	2210      	movs	r2, #16
	conf->foc_sample_high_current = MCCONF_FOC_SAMPLE_HIGH_CURRENT;
 8017916:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	conf->foc_temp_comp = MCCONF_FOC_TEMP_COMP;
 801791a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	conf->foc_duty_dowmramp_ki = MCCONF_FOC_DUTY_DOWNRAMP_KI;
 801791e:	f8c4 90e0 	str.w	r9, [r4, #224]	; 0xe0
	conf->foc_openloop_rpm = MCCONF_FOC_OPENLOOP_RPM;
 8017922:	f8c4 80e4 	str.w	r8, [r4, #228]	; 0xe4
	conf->foc_sl_erpm = MCCONF_FOC_SL_ERPM;
 8017926:	f8c4 c104 	str.w	ip, [r4, #260]	; 0x104
	conf->s_pid_kp = MCCONF_S_PID_KP;
 801792a:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
	conf->s_pid_ki = MCCONF_S_PID_KI;
 801792e:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
	conf->m_encoder_counts = MCCONF_M_ENCODER_COUNTS;
 8017932:	f8c4 e158 	str.w	lr, [r4, #344]	; 0x158
	conf->m_sensor_port_mode = MCCONF_M_SENSOR_PORT_MODE;
 8017936:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
	conf->m_invert_direction = MCCONF_M_INVERT_DIRECTION;
 801793a:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conf->m_drv8301_oc_mode = MCCONF_M_DRV8301_OC_MODE;
 801793e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conf->m_bldc_f_sw_max = MCCONF_M_BLDC_F_SW_MAX;
 8017942:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
	conf->m_drv8301_oc_adj = MCCONF_M_DRV8301_OC_ADJ;
 8017946:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
	conf->m_bldc_f_sw_min = MCCONF_M_BLDC_F_SW_MIN;
 801794a:	f8c4 7164 	str.w	r7, [r4, #356]	; 0x164
	conf->m_dc_f_sw = MCCONF_M_DC_F_SW;
 801794e:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
	conf->m_ntc_motor_beta = MCCONF_M_NTC_MOTOR_BETA;
 8017952:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
 8017956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801795a:	bf00      	nop
 801795c:	43020000 	.word	0x43020000
 8017960:	42640000 	.word	0x42640000
 8017964:	c7c35000 	.word	0xc7c35000
 8017968:	47c35000 	.word	0x47c35000
 801796c:	3f733333 	.word	0x3f733333
 8017970:	c2200000 	.word	0xc2200000
 8017974:	43960000 	.word	0x43960000
 8017978:	44bb8000 	.word	0x44bb8000
 801797c:	3e19999a 	.word	0x3e19999a
 8017980:	466a6000 	.word	0x466a6000
 8017984:	c66a6000 	.word	0xc66a6000
 8017988:	42c80000 	.word	0x42c80000
 801798c:	42700000 	.word	0x42700000
 8017990:	c2700000 	.word	0xc2700000
 8017994:	3f4ccccd 	.word	0x3f4ccccd
 8017998:	41200000 	.word	0x41200000
 801799c:	44160000 	.word	0x44160000
 80179a0:	479c4000 	.word	0x479c4000
 80179a4:	43340000 	.word	0x43340000
 80179a8:	469c4000 	.word	0x469c4000
 80179ac:	42480000 	.word	0x42480000
 80179b0:	40e00000 	.word	0x40e00000
 80179b4:	36eae18b 	.word	0x36eae18b
 80179b8:	3c75c28f 	.word	0x3c75c28f
 80179bc:	3b20902e 	.word	0x3b20902e
 80179c0:	3e99999a 	.word	0x3e99999a
 80179c4:	44fa0000 	.word	0x44fa0000
 80179c8:	3cf5c28f 	.word	0x3cf5c28f
 80179cc:	471c4000 	.word	0x471c4000
 80179d0:	41c80000 	.word	0x41c80000
 80179d4:	44610000 	.word	0x44610000
 80179d8:	39d1b717 	.word	0x39d1b717
 80179dc:	3d23d70a 	.word	0x3d23d70a
 80179e0:	3c23d70a 	.word	0x3c23d70a
 80179e4:	3b96bb99 	.word	0x3b96bb99
 80179e8:	3dcccccd 	.word	0x3dcccccd
 80179ec:	3b83126f 	.word	0x3b83126f
 80179f0:	453b8000 	.word	0x453b8000
 80179f4:	4708b800 	.word	0x4708b800
 80179f8:	45534000 	.word	0x45534000
 80179fc:	3ba3d70a 	.word	0x3ba3d70a
 8017a00:	42aa0000 	.word	0x42aa0000
 8017a04:	42780000 	.word	0x42780000
 8017a08:	3da3d70a 	.word	0x3da3d70a
 8017a0c:	43160000 	.word	0x43160000
 8017a10:	44898000 	.word	0x44898000
 8017a14:	4caba950 	.word	0x4caba950
 8017a18:	38d1b717 	.word	0x38d1b717
 8017a1c:	3ca3d70a 	.word	0x3ca3d70a
 8017a20:	43480000 	.word	0x43480000
 8017a24:	43c80000 	.word	0x43c80000
 8017a28:	451c4000 	.word	0x451c4000
 8017a2c:	00000000 	.word	0x00000000

08017a30 <conf_general_read_app_configuration>:
 * Read app_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a app_configuration struct to write the read configuration to.
 */
void conf_general_read_app_configuration(app_configuration *conf) {
 8017a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a32:	4607      	mov	r7, r0
 8017a34:	b083      	sub	sp, #12
 8017a36:	1c45      	adds	r5, r0, #1
 8017a38:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8017a3c:	f640 0634 	movw	r6, #2100	; 0x834
 8017a40:	e009      	b.n	8017a56 <conf_general_read_app_configuration+0x26>
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8017a42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8017a46:	42b4      	cmp	r4, r6
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8017a48:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8017a4c:	f805 2c01 	strb.w	r2, [r5, #-1]
			conf_addr[2 * i + 1] = var & 0xFF;
 8017a50:	f805 3b02 	strb.w	r3, [r5], #2
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8017a54:	d00b      	beq.n	8017a6e <conf_general_read_app_configuration+0x3e>
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
 8017a56:	4620      	mov	r0, r4
 8017a58:	f10d 0106 	add.w	r1, sp, #6
 8017a5c:	f000 fc40 	bl	80182e0 <EE_ReadVariable>
 8017a60:	3401      	adds	r4, #1
 8017a62:	b2a4      	uxth	r4, r4
 8017a64:	2800      	cmp	r0, #0
 8017a66:	d0ec      	beq.n	8017a42 <conf_general_read_app_configuration+0x12>
		}
	}

	// Set the default configuration
	if (!is_ok) {
		conf_general_get_default_app_configuration(conf);
 8017a68:	4638      	mov	r0, r7
 8017a6a:	f7ff fdb9 	bl	80175e0 <conf_general_get_default_app_configuration>
	}
}
 8017a6e:	b003      	add	sp, #12
 8017a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a72:	bf00      	nop
	...

08017a80 <conf_general_store_app_configuration>:
 * Write app_configuration to EEPROM.
 *
 * @param conf
 * A pointer to the configuration that should be stored.
 */
bool conf_general_store_app_configuration(app_configuration *conf) {
 8017a80:	b570      	push	{r4, r5, r6, lr}
 8017a82:	4605      	mov	r5, r0
	mc_interface_unlock();
 8017a84:	f003 fcfc 	bl	801b480 <mc_interface_unlock>
	mc_interface_release_motor();
 8017a88:	f004 fcfa 	bl	801c480 <mc_interface_release_motor>

	utils_sys_lock_cnt();
 8017a8c:	f7fe fb48 	bl	8016120 <utils_sys_lock_cnt>
	mc_interface_lock();
 8017a90:	f003 fcee 	bl	801b470 <mc_interface_lock>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, DISABLE);
 8017a94:	2100      	movs	r1, #0
 8017a96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017a9a:	f00c ff11 	bl	80248c0 <RCC_APB1PeriphClockCmd>

	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 8017a9e:	20f2      	movs	r0, #242	; 0xf2
 8017aa0:	f00c fe3e 	bl	8024720 <FLASH_ClearFlag>
 8017aa4:	3501      	adds	r5, #1
 8017aa6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8017aaa:	f640 0634 	movw	r6, #2100	; 0x834
 8017aae:	e001      	b.n	8017ab4 <conf_general_store_app_configuration+0x34>
 8017ab0:	42b4      	cmp	r4, r6
 8017ab2:	d01d      	beq.n	8017af0 <conf_general_store_app_configuration+0x70>
		var = (conf_addr[2 * i] << 8) & 0xFF00;
 8017ab4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
		var |= conf_addr[2 * i + 1] & 0xFF;
 8017ab8:	782b      	ldrb	r3, [r5, #0]

		if (EE_WriteVariable(EEPROM_BASE_APPCONF + i, var) != FLASH_COMPLETE) {
 8017aba:	4620      	mov	r0, r4
 8017abc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8017ac0:	f000 fcf6 	bl	80184b0 <EE_WriteVariable>
 8017ac4:	3401      	adds	r4, #1
 8017ac6:	2809      	cmp	r0, #9
 8017ac8:	b2a4      	uxth	r4, r4
 8017aca:	f105 0502 	add.w	r5, r5, #2
 8017ace:	d0ef      	beq.n	8017ab0 <conf_general_store_app_configuration+0x30>
			is_ok = false;
 8017ad0:	2400      	movs	r4, #0
			break;
		}
	}

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8017ad2:	2101      	movs	r1, #1
 8017ad4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017ad8:	f00c fef2 	bl	80248c0 <RCC_APB1PeriphClockCmd>

	chThdSleepMilliseconds(100);
 8017adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ae0:	f7f5 ff7e 	bl	800d9e0 <chThdSleep>
	mc_interface_unlock();
 8017ae4:	f003 fccc 	bl	801b480 <mc_interface_unlock>
	utils_sys_unlock_cnt();
 8017ae8:	f7fe fb2a 	bl	8016140 <utils_sys_unlock_cnt>

	return is_ok;
}
 8017aec:	4620      	mov	r0, r4
 8017aee:	bd70      	pop	{r4, r5, r6, pc}
	bool is_ok = true;
 8017af0:	2401      	movs	r4, #1
 8017af2:	e7ee      	b.n	8017ad2 <conf_general_store_app_configuration+0x52>
	...

08017b00 <conf_general_read_mc_configuration>:
 * Read mc_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a mc_configuration struct to write the read configuration to.
 */
void conf_general_read_mc_configuration(mc_configuration *conf) {
 8017b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b02:	4607      	mov	r7, r0
 8017b04:	b083      	sub	sp, #12
 8017b06:	1c45      	adds	r5, r0, #1
 8017b08:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8017b0c:	f240 46a2 	movw	r6, #1186	; 0x4a2
 8017b10:	e009      	b.n	8017b26 <conf_general_read_mc_configuration+0x26>
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8017b12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8017b16:	42b4      	cmp	r4, r6
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8017b18:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8017b1c:	f805 2c01 	strb.w	r2, [r5, #-1]
			conf_addr[2 * i + 1] = var & 0xFF;
 8017b20:	f805 3b02 	strb.w	r3, [r5], #2
	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8017b24:	d00b      	beq.n	8017b3e <conf_general_read_mc_configuration+0x3e>
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
 8017b26:	4620      	mov	r0, r4
 8017b28:	f10d 0106 	add.w	r1, sp, #6
 8017b2c:	f000 fbd8 	bl	80182e0 <EE_ReadVariable>
 8017b30:	3401      	adds	r4, #1
 8017b32:	b2a4      	uxth	r4, r4
 8017b34:	2800      	cmp	r0, #0
 8017b36:	d0ec      	beq.n	8017b12 <conf_general_read_mc_configuration+0x12>
			break;
		}
	}

	if (!is_ok) {
		conf_general_get_default_mc_configuration(conf);
 8017b38:	4638      	mov	r0, r7
 8017b3a:	f7ff fdf9 	bl	8017730 <conf_general_get_default_mc_configuration>
	}
}
 8017b3e:	b003      	add	sp, #12
 8017b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b42:	bf00      	nop
	...

08017b50 <conf_general_store_mc_configuration>:
 * Write mc_configuration to EEPROM.
 *
 * @param conf
 * A pointer to the configuration that should be stored.
 */
bool conf_general_store_mc_configuration(mc_configuration *conf) {
 8017b50:	b570      	push	{r4, r5, r6, lr}
 8017b52:	4605      	mov	r5, r0
	mc_interface_unlock();
 8017b54:	f003 fc94 	bl	801b480 <mc_interface_unlock>
	mc_interface_release_motor();
 8017b58:	f004 fc92 	bl	801c480 <mc_interface_release_motor>

	utils_sys_lock_cnt();
 8017b5c:	f7fe fae0 	bl	8016120 <utils_sys_lock_cnt>
	mc_interface_lock();
 8017b60:	f003 fc86 	bl	801b470 <mc_interface_lock>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, DISABLE);
 8017b64:	2100      	movs	r1, #0
 8017b66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017b6a:	f00c fea9 	bl	80248c0 <RCC_APB1PeriphClockCmd>

	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 8017b6e:	20f2      	movs	r0, #242	; 0xf2
 8017b70:	f00c fdd6 	bl	8024720 <FLASH_ClearFlag>
 8017b74:	3501      	adds	r5, #1
 8017b76:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8017b7a:	f240 46a2 	movw	r6, #1186	; 0x4a2
 8017b7e:	e001      	b.n	8017b84 <conf_general_store_mc_configuration+0x34>
 8017b80:	42b4      	cmp	r4, r6
 8017b82:	d01d      	beq.n	8017bc0 <conf_general_store_mc_configuration+0x70>
		var = (conf_addr[2 * i] << 8) & 0xFF00;
 8017b84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
		var |= conf_addr[2 * i + 1] & 0xFF;
 8017b88:	782b      	ldrb	r3, [r5, #0]

		if (EE_WriteVariable(EEPROM_BASE_MCCONF + i, var) != FLASH_COMPLETE) {
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8017b90:	f000 fc8e 	bl	80184b0 <EE_WriteVariable>
 8017b94:	3401      	adds	r4, #1
 8017b96:	2809      	cmp	r0, #9
 8017b98:	b2a4      	uxth	r4, r4
 8017b9a:	f105 0502 	add.w	r5, r5, #2
 8017b9e:	d0ef      	beq.n	8017b80 <conf_general_store_mc_configuration+0x30>
			is_ok = false;
 8017ba0:	2400      	movs	r4, #0
			break;
		}
	}

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8017ba2:	2101      	movs	r1, #1
 8017ba4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017ba8:	f00c fe8a 	bl	80248c0 <RCC_APB1PeriphClockCmd>

	chThdSleepMilliseconds(100);
 8017bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017bb0:	f7f5 ff16 	bl	800d9e0 <chThdSleep>
	mc_interface_unlock();
 8017bb4:	f003 fc64 	bl	801b480 <mc_interface_unlock>
	utils_sys_unlock_cnt();
 8017bb8:	f7fe fac2 	bl	8016140 <utils_sys_unlock_cnt>

	return is_ok;
}
 8017bbc:	4620      	mov	r0, r4
 8017bbe:	bd70      	pop	{r4, r5, r6, pc}
	bool is_ok = true;
 8017bc0:	2401      	movs	r4, #1
 8017bc2:	e7ee      	b.n	8017ba2 <conf_general_store_mc_configuration+0x52>
	...

08017bd0 <conf_general_detect_motor_param>:

bool conf_general_detect_motor_param(float current, float min_rpm, float low_duty,
		float *int_limit, float *bemf_coupling_k, int8_t *hall_table, int *hall_res) {
 8017bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd4:	ed2d 8b06 	vpush	{d8-d10}
 8017bd8:	b083      	sub	sp, #12
 8017bda:	eef0 9a60 	vmov.f32	s19, s1
 8017bde:	eeb0 aa40 	vmov.f32	s20, s0
 8017be2:	eeb0 9a41 	vmov.f32	s18, s2
 8017be6:	9301      	str	r3, [sp, #4]
 8017be8:	468a      	mov	sl, r1
 8017bea:	4693      	mov	fp, r2
 8017bec:	4680      	mov	r8, r0

	int ok_steps = 0;
	const float spinup_to_duty = 0.5;

	mcconf = *mc_interface_get_configuration();
 8017bee:	f003 fc27 	bl	801b440 <mc_interface_get_configuration>
 8017bf2:	4fbf      	ldr	r7, [pc, #764]	; (8017ef0 <conf_general_detect_motor_param+0x320>)
 8017bf4:	4601      	mov	r1, r0
 8017bf6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	f7f4 ff88 	bl	800cb10 <memcpy>
	mcconf_old = mcconf;
 8017c00:	4639      	mov	r1, r7
 8017c02:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017c06:	48bb      	ldr	r0, [pc, #748]	; (8017ef4 <conf_general_detect_motor_param+0x324>)
 8017c08:	f7f4 ff82 	bl	800cb10 <memcpy>
	mcconf.motor_type = MOTOR_TYPE_BLDC;
	mcconf.sensor_mode = SENSOR_MODE_SENSORLESS;
	mcconf.comm_mode = COMM_MODE_INTEGRATE;
	mcconf.sl_phase_advance_at_br = 1.0;
	mcconf.sl_min_erpm = min_rpm;
	mcconf.sl_bemf_coupling_k = 300;
 8017c0c:	4bba      	ldr	r3, [pc, #744]	; (8017ef8 <conf_general_detect_motor_param+0x328>)
	mcconf.sl_cycle_int_limit = 50;
 8017c0e:	49bb      	ldr	r1, [pc, #748]	; (8017efc <conf_general_detect_motor_param+0x32c>)
	mcconf.sl_min_erpm_cycle_int_limit = 1100;
 8017c10:	4abb      	ldr	r2, [pc, #748]	; (8017f00 <conf_general_detect_motor_param+0x330>)
	mcconf.sl_bemf_coupling_k = 300;
 8017c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	mcconf.sl_phase_advance_at_br = 1.0;
 8017c16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	mcconf.motor_type = MOTOR_TYPE_BLDC;
 8017c1a:	2300      	movs	r3, #0
	mcconf.sl_phase_advance_at_br = 1.0;
 8017c1c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	mcconf.m_invert_direction = false;
	mc_interface_set_configuration(&mcconf);
 8017c20:	4638      	mov	r0, r7
	mcconf.sl_min_erpm = min_rpm;
 8017c22:	edc7 9a1f 	vstr	s19, [r7, #124]	; 0x7c
	mcconf.sl_cycle_int_limit = 50;
 8017c26:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
	mcconf.sl_min_erpm_cycle_int_limit = 1100;
 8017c2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
	mcconf.motor_type = MOTOR_TYPE_BLDC;
 8017c2e:	70bb      	strb	r3, [r7, #2]
	mcconf.sensor_mode = SENSOR_MODE_SENSORLESS;
 8017c30:	70fb      	strb	r3, [r7, #3]
	mcconf.comm_mode = COMM_MODE_INTEGRATE;
 8017c32:	707b      	strb	r3, [r7, #1]
	mcconf.m_invert_direction = false;
 8017c34:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
	mc_interface_set_configuration(&mcconf);
 8017c38:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8017c3c:	f004 f950 	bl	801bee0 <mc_interface_set_configuration>
 8017c40:	e004      	b.n	8017c4c <conf_general_detect_motor_param+0x7c>
	// Wait maximum 5s for fault code to disappear
	for (int i = 0;i < 500;i++) {
		if (mc_interface_get_fault() == FAULT_CODE_NONE) {
			break;
		}
		chThdSleepMilliseconds(10);
 8017c42:	2064      	movs	r0, #100	; 0x64
 8017c44:	f7f5 fecc 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 500;i++) {
 8017c48:	3c01      	subs	r4, #1
 8017c4a:	d003      	beq.n	8017c54 <conf_general_detect_motor_param+0x84>
		if (mc_interface_get_fault() == FAULT_CODE_NONE) {
 8017c4c:	f003 fc28 	bl	801b4a0 <mc_interface_get_fault>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	d1f6      	bne.n	8017c42 <conf_general_detect_motor_param+0x72>
	}

	// Wait one second for things to get ready after
	// the fault disappears. (will fry things otherwise...)
	chThdSleepMilliseconds(1000);
 8017c54:	f242 7010 	movw	r0, #10000	; 0x2710
 8017c58:	f7f5 fec2 	bl	800d9e0 <chThdSleep>

	// Disable timeout
	systime_t tout = timeout_get_timeout_msec();
 8017c5c:	f002 faf0 	bl	801a240 <timeout_get_timeout_msec>
 8017c60:	4681      	mov	r9, r0
	float tout_c = timeout_get_brake_current();
 8017c62:	f002 faf5 	bl	801a250 <timeout_get_brake_current>
 8017c66:	eef0 aa40 	vmov.f32	s21, s0
	timeout_reset();
 8017c6a:	f002 fad1 	bl	801a210 <timeout_reset>
	timeout_configure(60000, 0.0);
 8017c6e:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8017f04 <conf_general_detect_motor_param+0x334>
 8017c72:	f64e 2060 	movw	r0, #60000	; 0xea60
 8017c76:	f002 fabb 	bl	801a1f0 <timeout_configure>

	mc_interface_lock();
 8017c7a:	f003 fbf9 	bl	801b470 <mc_interface_lock>

	mc_interface_lock_override_once();
 8017c7e:	f003 fc07 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_set_current(current);
 8017c82:	eeb0 0a4a 	vmov.f32	s0, s20
 8017c86:	f004 fbab 	bl	801c3e0 <mc_interface_set_current>

	// Try to spin up the motor. Up to three attempts with different settings are made.
	bool started = false;
	for (int i = 0;i < 3;i++) {
 8017c8a:	2600      	movs	r6, #0

		while (mc_interface_get_duty_cycle_now() < spinup_to_duty) {
			chThdSleepMilliseconds(1);
			cnt++;

			if (mc_interface_get_duty_cycle_now() >= (spinup_to_duty / 2.0) && !switch_done) {
 8017c8c:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
		if (i == 1) {
 8017c90:	2e01      	cmp	r6, #1
 8017c92:	f000 8105 	beq.w	8017ea0 <conf_general_detect_motor_param+0x2d0>
		} else if (i == 2) {
 8017c96:	2e02      	cmp	r6, #2
 8017c98:	f000 811d 	beq.w	8017ed6 <conf_general_detect_motor_param+0x306>
	for (int i = 0;i < 3;i++) {
 8017c9c:	2500      	movs	r5, #0
 8017c9e:	462c      	mov	r4, r5
		while (mc_interface_get_duty_cycle_now() < spinup_to_duty) {
 8017ca0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8017ca4:	f003 fc24 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8017ca8:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8017cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			chThdSleepMilliseconds(1);
 8017cb0:	f04f 000a 	mov.w	r0, #10
			cnt++;
 8017cb4:	f104 0401 	add.w	r4, r4, #1
		while (mc_interface_get_duty_cycle_now() < spinup_to_duty) {
 8017cb8:	f140 80d2 	bpl.w	8017e60 <conf_general_detect_motor_param+0x290>
			chThdSleepMilliseconds(1);
 8017cbc:	f7f5 fe90 	bl	800d9e0 <chThdSleep>
			if (mc_interface_get_duty_cycle_now() >= (spinup_to_duty / 2.0) && !switch_done) {
 8017cc0:	f003 fc16 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8017cc4:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8017cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ccc:	db0c      	blt.n	8017ce8 <conf_general_detect_motor_param+0x118>
 8017cce:	2d00      	cmp	r5, #0
 8017cd0:	f000 80c2 	beq.w	8017e58 <conf_general_detect_motor_param+0x288>
				mcpwm_switch_comm_mode(COMM_MODE_DELAY);
				switch_done = true;
			}

			if (cnt > 2000 && !switch_done) {
 8017cd4:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8017cd8:	dd04      	ble.n	8017ce4 <conf_general_detect_motor_param+0x114>
				started = false;
				break;
			}

			if (cnt >= 5000) {
 8017cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8017cde:	429c      	cmp	r4, r3
 8017ce0:	f000 80c8 	beq.w	8017e74 <conf_general_detect_motor_param+0x2a4>
	for (int i = 0;i < 3;i++) {
 8017ce4:	2501      	movs	r5, #1
 8017ce6:	e7dd      	b.n	8017ca4 <conf_general_detect_motor_param+0xd4>
			if (cnt > 2000 && !switch_done) {
 8017ce8:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8017cec:	ddda      	ble.n	8017ca4 <conf_general_detect_motor_param+0xd4>
 8017cee:	2d00      	cmp	r5, #0
 8017cf0:	d1f3      	bne.n	8017cda <conf_general_detect_motor_param+0x10a>
	for (int i = 0;i < 3;i++) {
 8017cf2:	3601      	adds	r6, #1
 8017cf4:	2e03      	cmp	r6, #3
 8017cf6:	d1cb      	bne.n	8017c90 <conf_general_detect_motor_param+0xc0>
		if (switch_done) {
			break;
		}
	}

	if (!started) {
 8017cf8:	2d00      	cmp	r5, #0
 8017cfa:	f000 80bb 	beq.w	8017e74 <conf_general_detect_motor_param+0x2a4>
	}

	ok_steps++;

	// Reset hall sensor samples
	mcpwm_reset_hall_detect_table();
 8017cfe:	f7fc faff 	bl	8014300 <mcpwm_reset_hall_detect_table>

	// Run for a while to get hall sensor samples
	mc_interface_lock_override_once();
 8017d02:	f003 fbc5 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_set_duty(spinup_to_duty);
 8017d06:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8017d0a:	f004 fab1 	bl	801c270 <mc_interface_set_duty>
	chThdSleepMilliseconds(400);
 8017d0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8017d12:	f7f5 fe65 	bl	800d9e0 <chThdSleep>

	// Release the motor and wait a few commutations
	mc_interface_lock_override_once();
 8017d16:	f003 fbbb 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_set_current(0.0);
 8017d1a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8017f04 <conf_general_detect_motor_param+0x334>
 8017d1e:	f004 fb5f 	bl	801c3e0 <mc_interface_set_current>
	int tacho = mc_interface_get_tachometer_value(0);
 8017d22:	2000      	movs	r0, #0
 8017d24:	f003 fd24 	bl	801b770 <mc_interface_get_tachometer_value>
 8017d28:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8017d2c:	4605      	mov	r5, r0
 8017d2e:	e004      	b.n	8017d3a <conf_general_detect_motor_param+0x16a>
	for (int i = 0;i < 2000;i++) {
		if ((mc_interface_get_tachometer_value(0) - tacho) < 3) {
			chThdSleepMilliseconds(1);
 8017d30:	f7f5 fe56 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 2000;i++) {
 8017d34:	3c01      	subs	r4, #1
 8017d36:	f000 80b1 	beq.w	8017e9c <conf_general_detect_motor_param+0x2cc>
		if ((mc_interface_get_tachometer_value(0) - tacho) < 3) {
 8017d3a:	2000      	movs	r0, #0
 8017d3c:	f003 fd18 	bl	801b770 <mc_interface_get_tachometer_value>
 8017d40:	1b43      	subs	r3, r0, r5
 8017d42:	2b02      	cmp	r3, #2
			chThdSleepMilliseconds(1);
 8017d44:	f04f 000a 	mov.w	r0, #10
		if ((mc_interface_get_tachometer_value(0) - tacho) < 3) {
 8017d48:	ddf2      	ble.n	8017d30 <conf_general_detect_motor_param+0x160>
		} else {
			ok_steps++;
 8017d4a:	2502      	movs	r5, #2
			break;
		}
	}

	// Average the cycle integrator for 50 commutations
	mcpwm_read_reset_avg_cycle_integrator();
 8017d4c:	f7fc fa98 	bl	8014280 <mcpwm_read_reset_avg_cycle_integrator>
	tacho = mc_interface_get_tachometer_value(false);
 8017d50:	2000      	movs	r0, #0
 8017d52:	f003 fd0d 	bl	801b770 <mc_interface_get_tachometer_value>
 8017d56:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8017d5a:	4606      	mov	r6, r0
 8017d5c:	e003      	b.n	8017d66 <conf_general_detect_motor_param+0x196>
	for (int i = 0;i < 3000;i++) {
		if ((mc_interface_get_tachometer_value(false) - tacho) < 50) {
			chThdSleepMilliseconds(1);
 8017d5e:	f7f5 fe3f 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 3000;i++) {
 8017d62:	3c01      	subs	r4, #1
 8017d64:	d008      	beq.n	8017d78 <conf_general_detect_motor_param+0x1a8>
		if ((mc_interface_get_tachometer_value(false) - tacho) < 50) {
 8017d66:	2000      	movs	r0, #0
 8017d68:	f003 fd02 	bl	801b770 <mc_interface_get_tachometer_value>
 8017d6c:	1b83      	subs	r3, r0, r6
 8017d6e:	2b31      	cmp	r3, #49	; 0x31
			chThdSleepMilliseconds(1);
 8017d70:	f04f 000a 	mov.w	r0, #10
		if ((mc_interface_get_tachometer_value(false) - tacho) < 50) {
 8017d74:	ddf3      	ble.n	8017d5e <conf_general_detect_motor_param+0x18e>
		} else {
			ok_steps++;
 8017d76:	3501      	adds	r5, #1
			break;
		}
	}

	// Get hall detect result
	*hall_res = mcpwm_get_hall_detect_result(hall_table);
 8017d78:	4658      	mov	r0, fp
 8017d7a:	f7fc fac9 	bl	8014310 <mcpwm_get_hall_detect_result>
 8017d7e:	9b01      	ldr	r3, [sp, #4]
 8017d80:	6018      	str	r0, [r3, #0]

	*int_limit = mcpwm_read_reset_avg_cycle_integrator();
 8017d82:	f7fc fa7d 	bl	8014280 <mcpwm_read_reset_avg_cycle_integrator>
 8017d86:	f241 3488 	movw	r4, #5000	; 0x1388
 8017d8a:	ed88 0a00 	vstr	s0, [r8]
 8017d8e:	e003      	b.n	8017d98 <conf_general_detect_motor_param+0x1c8>

	// Wait for the motor to slow down
	for (int i = 0;i < 5000;i++) {
		if (mc_interface_get_duty_cycle_now() > low_duty) {
			chThdSleepMilliseconds(1);
 8017d90:	f7f5 fe26 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 5000;i++) {
 8017d94:	3c01      	subs	r4, #1
 8017d96:	d009      	beq.n	8017dac <conf_general_detect_motor_param+0x1dc>
		if (mc_interface_get_duty_cycle_now() > low_duty) {
 8017d98:	f003 fbaa 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8017d9c:	eeb4 0ac9 	vcmpe.f32	s0, s18
 8017da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			chThdSleepMilliseconds(1);
 8017da4:	f04f 000a 	mov.w	r0, #10
		if (mc_interface_get_duty_cycle_now() > low_duty) {
 8017da8:	dcf2      	bgt.n	8017d90 <conf_general_detect_motor_param+0x1c0>
		} else {
			ok_steps++;
 8017daa:	3501      	adds	r5, #1
			break;
		}
	}

	mc_interface_lock_override_once();
 8017dac:	f003 fb70 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_set_duty(low_duty);
 8017db0:	eeb0 0a49 	vmov.f32	s0, s18
 8017db4:	f004 fa5c 	bl	801c270 <mc_interface_set_duty>

	// Average the cycle integrator for 100 commutations
	mcpwm_read_reset_avg_cycle_integrator();
 8017db8:	f7fc fa62 	bl	8014280 <mcpwm_read_reset_avg_cycle_integrator>
	tacho = mc_interface_get_tachometer_value(0);
 8017dbc:	2000      	movs	r0, #0
 8017dbe:	f003 fcd7 	bl	801b770 <mc_interface_get_tachometer_value>
	float rpm_sum = 0.0;
	float rpm_iterations = 0.0;
 8017dc2:	ed9f 8a50 	vldr	s16, [pc, #320]	; 8017f04 <conf_general_detect_motor_param+0x334>
	tacho = mc_interface_get_tachometer_value(0);
 8017dc6:	4606      	mov	r6, r0
	float rpm_sum = 0.0;
 8017dc8:	eef0 8a48 	vmov.f32	s17, s16
	tacho = mc_interface_get_tachometer_value(0);
 8017dcc:	f640 34b8 	movw	r4, #3000	; 0xbb8
	for (int i = 0;i < 3000;i++) {
		if ((mc_interface_get_tachometer_value(0) - tacho) < 100) {
			rpm_sum += mc_interface_get_rpm();
			rpm_iterations += 1;
 8017dd0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8017dd4:	e00a      	b.n	8017dec <conf_general_detect_motor_param+0x21c>
			rpm_sum += mc_interface_get_rpm();
 8017dd6:	f003 fbcb 	bl	801b570 <mc_interface_get_rpm>
			chThdSleepMilliseconds(1);
 8017dda:	200a      	movs	r0, #10
			rpm_sum += mc_interface_get_rpm();
 8017ddc:	ee78 8a80 	vadd.f32	s17, s17, s0
			chThdSleepMilliseconds(1);
 8017de0:	f7f5 fdfe 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 3000;i++) {
 8017de4:	3c01      	subs	r4, #1
			rpm_iterations += 1;
 8017de6:	ee38 8a09 	vadd.f32	s16, s16, s18
	for (int i = 0;i < 3000;i++) {
 8017dea:	d006      	beq.n	8017dfa <conf_general_detect_motor_param+0x22a>
		if ((mc_interface_get_tachometer_value(0) - tacho) < 100) {
 8017dec:	2000      	movs	r0, #0
 8017dee:	f003 fcbf 	bl	801b770 <mc_interface_get_tachometer_value>
 8017df2:	1b80      	subs	r0, r0, r6
 8017df4:	2863      	cmp	r0, #99	; 0x63
 8017df6:	ddee      	ble.n	8017dd6 <conf_general_detect_motor_param+0x206>
		} else {
			ok_steps++;
 8017df8:	3501      	adds	r5, #1
			break;
		}
	}

	float avg_cycle_integrator_running = mcpwm_read_reset_avg_cycle_integrator();
 8017dfa:	f7fc fa41 	bl	8014280 <mcpwm_read_reset_avg_cycle_integrator>
 8017dfe:	eeb0 9a40 	vmov.f32	s18, s0
	float rpm = rpm_sum / rpm_iterations;

	mc_interface_lock_override_once();
 8017e02:	f003 fb45 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_release_motor();
 8017e06:	f004 fb3b 	bl	801c480 <mc_interface_release_motor>

	// Try to figure out the coupling factor
	avg_cycle_integrator_running -= *int_limit;
	avg_cycle_integrator_running /= (float)ADC_Value[ADC_IND_VIN_SENS];
 8017e0a:	4b3f      	ldr	r3, [pc, #252]	; (8017f08 <conf_general_detect_motor_param+0x338>)
	avg_cycle_integrator_running -= *int_limit;
 8017e0c:	edd8 6a00 	vldr	s13, [r8]
	avg_cycle_integrator_running /= (float)ADC_Value[ADC_IND_VIN_SENS];
 8017e10:	8a1b      	ldrh	r3, [r3, #16]
	avg_cycle_integrator_running *= rpm;
	*bemf_coupling_k = avg_cycle_integrator_running;

	// Restore settings
	mc_interface_set_configuration(&mcconf_old);
 8017e12:	4838      	ldr	r0, [pc, #224]	; (8017ef4 <conf_general_detect_motor_param+0x324>)
	avg_cycle_integrator_running /= (float)ADC_Value[ADC_IND_VIN_SENS];
 8017e14:	b29b      	uxth	r3, r3
 8017e16:	ee07 3a90 	vmov	s15, r3
	avg_cycle_integrator_running -= *int_limit;
 8017e1a:	ee79 6a66 	vsub.f32	s13, s18, s13
	avg_cycle_integrator_running /= (float)ADC_Value[ADC_IND_VIN_SENS];
 8017e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float rpm = rpm_sum / rpm_iterations;
 8017e22:	ee88 7a88 	vdiv.f32	s14, s17, s16
	avg_cycle_integrator_running /= (float)ADC_Value[ADC_IND_VIN_SENS];
 8017e26:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	avg_cycle_integrator_running *= rpm;
 8017e2a:	ee67 7a06 	vmul.f32	s15, s14, s12
	*bemf_coupling_k = avg_cycle_integrator_running;
 8017e2e:	edca 7a00 	vstr	s15, [sl]
	mc_interface_set_configuration(&mcconf_old);
 8017e32:	f004 f855 	bl	801bee0 <mc_interface_set_configuration>
	timeout_configure(tout, tout_c);
 8017e36:	4648      	mov	r0, r9
 8017e38:	eeb0 0a6a 	vmov.f32	s0, s21
 8017e3c:	f002 f9d8 	bl	801a1f0 <timeout_configure>

	mc_interface_unlock();
 8017e40:	f003 fb1e 	bl	801b480 <mc_interface_unlock>

	return ok_steps == 5 ? true : false;
 8017e44:	f1a5 0005 	sub.w	r0, r5, #5
 8017e48:	fab0 f080 	clz	r0, r0
 8017e4c:	0940      	lsrs	r0, r0, #5
}
 8017e4e:	b003      	add	sp, #12
 8017e50:	ecbd 8b06 	vpop	{d8-d10}
 8017e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				mcpwm_switch_comm_mode(COMM_MODE_DELAY);
 8017e58:	2001      	movs	r0, #1
 8017e5a:	f7fc fa49 	bl	80142f0 <mcpwm_switch_comm_mode>
 8017e5e:	e739      	b.n	8017cd4 <conf_general_detect_motor_param+0x104>
		if (switch_done) {
 8017e60:	2d00      	cmp	r5, #0
 8017e62:	f47f af4c 	bne.w	8017cfe <conf_general_detect_motor_param+0x12e>
	for (int i = 0;i < 3;i++) {
 8017e66:	3601      	adds	r6, #1
 8017e68:	2e03      	cmp	r6, #3
		started = true;
 8017e6a:	f04f 0501 	mov.w	r5, #1
	for (int i = 0;i < 3;i++) {
 8017e6e:	f47f af0f 	bne.w	8017c90 <conf_general_detect_motor_param+0xc0>
 8017e72:	e741      	b.n	8017cf8 <conf_general_detect_motor_param+0x128>
		mc_interface_set_current(0.0);
 8017e74:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8017f04 <conf_general_detect_motor_param+0x334>
 8017e78:	f004 fab2 	bl	801c3e0 <mc_interface_set_current>
		timeout_configure(tout, tout_c);
 8017e7c:	eeb0 0a6a 	vmov.f32	s0, s21
 8017e80:	4648      	mov	r0, r9
 8017e82:	f002 f9b5 	bl	801a1f0 <timeout_configure>
		mc_interface_set_configuration(&mcconf_old);
 8017e86:	481b      	ldr	r0, [pc, #108]	; (8017ef4 <conf_general_detect_motor_param+0x324>)
 8017e88:	f004 f82a 	bl	801bee0 <mc_interface_set_configuration>
		mc_interface_unlock();
 8017e8c:	f003 faf8 	bl	801b480 <mc_interface_unlock>
		return false;
 8017e90:	2000      	movs	r0, #0
}
 8017e92:	b003      	add	sp, #12
 8017e94:	ecbd 8b06 	vpop	{d8-d10}
 8017e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ok_steps++;
 8017e9c:	2501      	movs	r5, #1
 8017e9e:	e755      	b.n	8017d4c <conf_general_detect_motor_param+0x17c>
			mc_interface_lock_override_once();
 8017ea0:	f003 faf6 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_release_motor();
 8017ea4:	f004 faec 	bl	801c480 <mc_interface_release_motor>
			mcconf.sl_min_erpm = 2 * min_rpm;
 8017ea8:	ee79 7aa9 	vadd.f32	s15, s19, s19
			mcconf.sl_cycle_int_limit = 20;
 8017eac:	4b17      	ldr	r3, [pc, #92]	; (8017f0c <conf_general_detect_motor_param+0x33c>)
			mcconf.sl_min_erpm = 2 * min_rpm;
 8017eae:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			mcconf.sl_cycle_int_limit = 20;
 8017eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			mc_interface_lock_override_once();
 8017eb6:	f003 faeb 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_set_configuration(&mcconf);
 8017eba:	480d      	ldr	r0, [pc, #52]	; (8017ef0 <conf_general_detect_motor_param+0x320>)
 8017ebc:	f004 f810 	bl	801bee0 <mc_interface_set_configuration>
			chThdSleepMilliseconds(1000);
 8017ec0:	f242 7010 	movw	r0, #10000	; 0x2710
 8017ec4:	f7f5 fd8c 	bl	800d9e0 <chThdSleep>
			mc_interface_lock_override_once();
 8017ec8:	f003 fae2 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_set_current(current);
 8017ecc:	eeb0 0a4a 	vmov.f32	s0, s20
 8017ed0:	f004 fa86 	bl	801c3e0 <mc_interface_set_current>
 8017ed4:	e6e2      	b.n	8017c9c <conf_general_detect_motor_param+0xcc>
			mc_interface_lock_override_once();
 8017ed6:	f003 fadb 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_release_motor();
 8017eda:	f004 fad1 	bl	801c480 <mc_interface_release_motor>
			mcconf.sl_min_erpm = 4 * min_rpm;
 8017ede:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8017ee2:	ee69 7aa7 	vmul.f32	s15, s19, s15
			mcconf.comm_mode = COMM_MODE_DELAY;
 8017ee6:	2301      	movs	r3, #1
			mcconf.sl_min_erpm = 4 * min_rpm;
 8017ee8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			mcconf.comm_mode = COMM_MODE_DELAY;
 8017eec:	707b      	strb	r3, [r7, #1]
 8017eee:	e7e2      	b.n	8017eb6 <conf_general_detect_motor_param+0x2e6>
 8017ef0:	2000804c 	.word	0x2000804c
 8017ef4:	200081c0 	.word	0x200081c0
 8017ef8:	43960000 	.word	0x43960000
 8017efc:	42480000 	.word	0x42480000
 8017f00:	44898000 	.word	0x44898000
 8017f04:	00000000 	.word	0x00000000
 8017f08:	2000c034 	.word	0x2000c034
 8017f0c:	41a00000 	.word	0x41a00000

08017f10 <conf_general_measure_flux_linkage>:
 *
 * @return
 * True for success, false otherwise.
 */
bool conf_general_measure_flux_linkage(float current, float duty,
		float min_erpm, float res, float *linkage) {
 8017f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f14:	ed2d 8b0a 	vpush	{d8-d12}
 8017f18:	4607      	mov	r7, r0
 8017f1a:	eef0 9a41 	vmov.f32	s19, s2
 8017f1e:	eeb0 9a40 	vmov.f32	s18, s0
 8017f22:	eeb0 8a60 	vmov.f32	s16, s1
 8017f26:	eef0 ba61 	vmov.f32	s23, s3
	mcconf = *mc_interface_get_configuration();
 8017f2a:	f003 fa89 	bl	801b440 <mc_interface_get_configuration>
 8017f2e:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 80181f0 <conf_general_measure_flux_linkage+0x2e0>
	mcconf.sensor_mode = SENSOR_MODE_SENSORLESS;
	mcconf.comm_mode = COMM_MODE_INTEGRATE;
	mcconf.sl_phase_advance_at_br = 1.0;
	mcconf.sl_min_erpm = min_erpm;
	mcconf.m_bldc_f_sw_min = 10000.0;
	mcconf.sl_bemf_coupling_k = 300;
 8017f32:	4ca2      	ldr	r4, [pc, #648]	; (80181bc <conf_general_measure_flux_linkage+0x2ac>)
	mcconf.m_bldc_f_sw_min = 10000.0;
 8017f34:	4da2      	ldr	r5, [pc, #648]	; (80181c0 <conf_general_measure_flux_linkage+0x2b0>)
	mcconf = *mc_interface_get_configuration();
 8017f36:	4601      	mov	r1, r0
 8017f38:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017f3c:	4650      	mov	r0, sl
 8017f3e:	f7f4 fde7 	bl	800cb10 <memcpy>
	mcconf_old = mcconf;
 8017f42:	4651      	mov	r1, sl
 8017f44:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017f48:	489e      	ldr	r0, [pc, #632]	; (80181c4 <conf_general_measure_flux_linkage+0x2b4>)
 8017f4a:	f7f4 fde1 	bl	800cb10 <memcpy>
	mcconf.sl_phase_advance_at_br = 1.0;
 8017f4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	mcconf.sl_cycle_int_limit = 50;
 8017f52:	499d      	ldr	r1, [pc, #628]	; (80181c8 <conf_general_measure_flux_linkage+0x2b8>)
	mcconf.sl_min_erpm_cycle_int_limit = 1100;
 8017f54:	4a9d      	ldr	r2, [pc, #628]	; (80181cc <conf_general_measure_flux_linkage+0x2bc>)
	mcconf.sl_phase_advance_at_br = 1.0;
 8017f56:	f8ca 308c 	str.w	r3, [sl, #140]	; 0x8c
	mc_interface_set_configuration(&mcconf);
 8017f5a:	4650      	mov	r0, sl
	mcconf.motor_type = MOTOR_TYPE_BLDC;
 8017f5c:	2300      	movs	r3, #0
	mcconf.sl_bemf_coupling_k = 300;
 8017f5e:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
	mcconf.sl_min_erpm = min_erpm;
 8017f62:	edca 9a1f 	vstr	s19, [sl, #124]	; 0x7c
	mcconf.m_bldc_f_sw_min = 10000.0;
 8017f66:	f8ca 5164 	str.w	r5, [sl, #356]	; 0x164
	mcconf.sl_cycle_int_limit = 50;
 8017f6a:	f8ca 1088 	str.w	r1, [sl, #136]	; 0x88
	mcconf.sl_min_erpm_cycle_int_limit = 1100;
 8017f6e:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
	mcconf.motor_type = MOTOR_TYPE_BLDC;
 8017f72:	f88a 3002 	strb.w	r3, [sl, #2]
	mcconf.sensor_mode = SENSOR_MODE_SENSORLESS;
 8017f76:	f88a 3003 	strb.w	r3, [sl, #3]
	mcconf.comm_mode = COMM_MODE_INTEGRATE;
 8017f7a:	f88a 3001 	strb.w	r3, [sl, #1]
	mc_interface_set_configuration(&mcconf);
 8017f7e:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8017f82:	f003 ffad 	bl	801bee0 <mc_interface_set_configuration>
 8017f86:	e004      	b.n	8017f92 <conf_general_measure_flux_linkage+0x82>
	// Wait maximum 5s for fault code to disappear
	for (int i = 0;i < 500;i++) {
		if (mc_interface_get_fault() == FAULT_CODE_NONE) {
			break;
		}
		chThdSleepMilliseconds(10);
 8017f88:	2064      	movs	r0, #100	; 0x64
 8017f8a:	f7f5 fd29 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 500;i++) {
 8017f8e:	3c01      	subs	r4, #1
 8017f90:	d003      	beq.n	8017f9a <conf_general_measure_flux_linkage+0x8a>
		if (mc_interface_get_fault() == FAULT_CODE_NONE) {
 8017f92:	f003 fa85 	bl	801b4a0 <mc_interface_get_fault>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	d1f6      	bne.n	8017f88 <conf_general_measure_flux_linkage+0x78>
	}

	// Wait one second for things to get ready after
	// the fault disapears. (will fry things otherwise...)
	// TODO: Add FAULT_INIT_NOT_DONE
	chThdSleepMilliseconds(1000);
 8017f9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8017f9e:	f7f5 fd1f 	bl	800d9e0 <chThdSleep>

	// Disable timeout
	systime_t tout = timeout_get_timeout_msec();
 8017fa2:	f002 f94d 	bl	801a240 <timeout_get_timeout_msec>
 8017fa6:	4680      	mov	r8, r0
	float tout_c = timeout_get_brake_current();
 8017fa8:	f002 f952 	bl	801a250 <timeout_get_brake_current>
 8017fac:	eeb0 ca40 	vmov.f32	s24, s0
	timeout_reset();
 8017fb0:	f002 f92e 	bl	801a210 <timeout_reset>
	timeout_configure(60000, 0.0);
 8017fb4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80181d0 <conf_general_measure_flux_linkage+0x2c0>
			mc_interface_lock_override_once();
			mc_interface_release_motor();
			mcconf.sl_min_erpm = 4 * min_erpm;
			mcconf.comm_mode = COMM_MODE_DELAY;
			mc_interface_lock_override_once();
			mc_interface_set_configuration(&mcconf);
 8017fb8:	f8df b234 	ldr.w	fp, [pc, #564]	; 80181f0 <conf_general_measure_flux_linkage+0x2e0>
			mcconf.sl_cycle_int_limit = 250;
 8017fbc:	eddf aa85 	vldr	s21, [pc, #532]	; 80181d4 <conf_general_measure_flux_linkage+0x2c4>
	timeout_configure(60000, 0.0);
 8017fc0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8017fc4:	f002 f914 	bl	801a1f0 <timeout_configure>
	mc_interface_lock();
 8017fc8:	f003 fa52 	bl	801b470 <mc_interface_lock>
	mc_interface_lock_override_once();
 8017fcc:	f003 fa60 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_set_current(current);
 8017fd0:	eeb0 0a49 	vmov.f32	s0, s18
 8017fd4:	f004 fa04 	bl	801c3e0 <mc_interface_set_current>
	for (int i = 0;i < 4;i++) {
 8017fd8:	f04f 0900 	mov.w	r9, #0
			mcconf.sl_min_erpm = 4 * min_erpm;
 8017fdc:	eeb1 aa00 	vmov.f32	s20, #16	; 0x40800000  4.0
		if (i == 1) {
 8017fe0:	f1b9 0f01 	cmp.w	r9, #1
 8017fe4:	f000 80e2 	beq.w	80181ac <conf_general_measure_flux_linkage+0x29c>
		} else if (i == 2) {
 8017fe8:	f1b9 0f02 	cmp.w	r9, #2
 8017fec:	f000 80d2 	beq.w	8018194 <conf_general_measure_flux_linkage+0x284>
		} else if (i == 3) {
 8017ff0:	f1b9 0f03 	cmp.w	r9, #3
 8017ff4:	f000 80b3 	beq.w	801815e <conf_general_measure_flux_linkage+0x24e>
	for (int i = 0;i < 4;i++) {
 8017ff8:	2500      	movs	r5, #0
 8017ffa:	462c      	mov	r4, r5

		while (mc_interface_get_duty_cycle_now() < duty) {
			chThdSleepMilliseconds(1);
			cnt++;

			if (mc_interface_get_duty_cycle_now() >= (duty / 2.0) && !switch_done) {
 8017ffc:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
			if (cnt > 2000 && !switch_done) {
				started = false;
				break;
			}

			if (cnt >= 5000) {
 8018000:	f241 3688 	movw	r6, #5000	; 0x1388
		while (mc_interface_get_duty_cycle_now() < duty) {
 8018004:	f003 fa74 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8018008:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801800c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			chThdSleepMilliseconds(1);
 8018010:	f04f 000a 	mov.w	r0, #10
			cnt++;
 8018014:	f104 0401 	add.w	r4, r4, #1
		while (mc_interface_get_duty_cycle_now() < duty) {
 8018018:	f140 8083 	bpl.w	8018122 <conf_general_measure_flux_linkage+0x212>
			chThdSleepMilliseconds(1);
 801801c:	f7f5 fce0 	bl	800d9e0 <chThdSleep>
			if (mc_interface_get_duty_cycle_now() >= (duty / 2.0) && !switch_done) {
 8018020:	f003 fa66 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8018024:	ee68 7a28 	vmul.f32	s15, s16, s17
 8018028:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018030:	db08      	blt.n	8018044 <conf_general_measure_flux_linkage+0x134>
 8018032:	2d00      	cmp	r5, #0
 8018034:	d071      	beq.n	801811a <conf_general_measure_flux_linkage+0x20a>
			if (cnt > 2000 && !switch_done) {
 8018036:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 801803a:	dd01      	ble.n	8018040 <conf_general_measure_flux_linkage+0x130>
			if (cnt >= 5000) {
 801803c:	42b4      	cmp	r4, r6
 801803e:	d07b      	beq.n	8018138 <conf_general_measure_flux_linkage+0x228>
	for (int i = 0;i < 4;i++) {
 8018040:	2501      	movs	r5, #1
 8018042:	e7df      	b.n	8018004 <conf_general_measure_flux_linkage+0xf4>
			if (cnt > 2000 && !switch_done) {
 8018044:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8018048:	dddc      	ble.n	8018004 <conf_general_measure_flux_linkage+0xf4>
 801804a:	2d00      	cmp	r5, #0
 801804c:	d1f6      	bne.n	801803c <conf_general_measure_flux_linkage+0x12c>
	for (int i = 0;i < 4;i++) {
 801804e:	f109 0901 	add.w	r9, r9, #1
 8018052:	f1b9 0f04 	cmp.w	r9, #4
 8018056:	d1c3      	bne.n	8017fe0 <conf_general_measure_flux_linkage+0xd0>
		if (switch_done) {
			break;
		}
	}

	if (!started) {
 8018058:	2d00      	cmp	r5, #0
 801805a:	d06d      	beq.n	8018138 <conf_general_measure_flux_linkage+0x228>
		mc_interface_set_configuration(&mcconf_old);
		mc_interface_unlock();
		return false;
	}

	mc_interface_lock_override_once();
 801805c:	f003 fa18 	bl	801b490 <mc_interface_lock_override_once>
	mc_interface_set_duty(duty);
 8018060:	eeb0 0a48 	vmov.f32	s0, s16
 8018064:	f004 f904 	bl	801c270 <mc_interface_set_duty>

	float avg_voltage = 0.0;
	float avg_rpm = 0.0;
	float avg_current = 0.0;
	float samples = 0.0;
 8018068:	ed9f 8a59 	vldr	s16, [pc, #356]	; 80181d0 <conf_general_measure_flux_linkage+0x2c0>
 801806c:	4e5a      	ldr	r6, [pc, #360]	; (80181d8 <conf_general_measure_flux_linkage+0x2c8>)
	for (int i = 0;i < 2000;i++) {
		avg_voltage += GET_INPUT_VOLTAGE() * mc_interface_get_duty_cycle_now();
 801806e:	ed9f ba5b 	vldr	s22, [pc, #364]	; 80181dc <conf_general_measure_flux_linkage+0x2cc>
 8018072:	eddf aa5b 	vldr	s21, [pc, #364]	; 80181e0 <conf_general_measure_flux_linkage+0x2d0>
	float avg_current = 0.0;
 8018076:	eef0 9a48 	vmov.f32	s19, s16
	float avg_rpm = 0.0;
 801807a:	eef0 8a48 	vmov.f32	s17, s16
	float avg_voltage = 0.0;
 801807e:	eeb0 9a48 	vmov.f32	s18, s16
	mc_interface_set_duty(duty);
 8018082:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
		avg_rpm += mc_interface_get_rpm();
		avg_current += mc_interface_get_tot_current();
		samples += 1.0;
 8018086:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
		avg_voltage += GET_INPUT_VOLTAGE() * mc_interface_get_duty_cycle_now();
 801808a:	8a33      	ldrh	r3, [r6, #16]
 801808c:	b29c      	uxth	r4, r3
 801808e:	f003 fa2f 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8018092:	ee07 4a90 	vmov	s15, r4
 8018096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801809a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801809e:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80180a2:	eea7 9a80 	vfma.f32	s18, s15, s0
		avg_rpm += mc_interface_get_rpm();
 80180a6:	f003 fa63 	bl	801b570 <mc_interface_get_rpm>
 80180aa:	ee78 8a80 	vadd.f32	s17, s17, s0
		avg_current += mc_interface_get_tot_current();
 80180ae:	f003 fac7 	bl	801b640 <mc_interface_get_tot_current>
		chThdSleepMilliseconds(1.0);
 80180b2:	200a      	movs	r0, #10
		avg_current += mc_interface_get_tot_current();
 80180b4:	ee79 9a80 	vadd.f32	s19, s19, s0
		chThdSleepMilliseconds(1.0);
 80180b8:	f7f5 fc92 	bl	800d9e0 <chThdSleep>
	for (int i = 0;i < 2000;i++) {
 80180bc:	3d01      	subs	r5, #1
		samples += 1.0;
 80180be:	ee38 8a0a 	vadd.f32	s16, s16, s20
	for (int i = 0;i < 2000;i++) {
 80180c2:	d1e2      	bne.n	801808a <conf_general_measure_flux_linkage+0x17a>
	}

	timeout_configure(tout, tout_c);
 80180c4:	eeb0 0a4c 	vmov.f32	s0, s24
 80180c8:	4640      	mov	r0, r8
 80180ca:	f002 f891 	bl	801a1f0 <timeout_configure>
	mc_interface_set_configuration(&mcconf_old);
 80180ce:	483d      	ldr	r0, [pc, #244]	; (80181c4 <conf_general_measure_flux_linkage+0x2b4>)
 80180d0:	f003 ff06 	bl	801bee0 <mc_interface_set_configuration>
	mc_interface_unlock();
 80180d4:	f003 f9d4 	bl	801b480 <mc_interface_unlock>
	mc_interface_set_current(0.0);
 80180d8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80181d0 <conf_general_measure_flux_linkage+0x2c0>
 80180dc:	f004 f980 	bl	801c3e0 <mc_interface_set_current>

	avg_voltage /= samples;
	avg_rpm /= samples;
	avg_current /= samples;
 80180e0:	eec9 6a88 	vdiv.f32	s13, s19, s16
	avg_voltage -= avg_current * res * 2.0;

	*linkage = avg_voltage * 60.0 / (sqrtf(3.0) * 2.0 * M_PI * avg_rpm);

	return true;
 80180e4:	2001      	movs	r0, #1
	avg_voltage /= samples;
 80180e6:	eec9 7a08 	vdiv.f32	s15, s18, s16
	avg_rpm /= samples;
 80180ea:	ee88 7a88 	vdiv.f32	s14, s17, s16
	avg_voltage -= avg_current * res * 2.0;
 80180ee:	ee6b bae6 	vnmul.f32	s23, s23, s13
 80180f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80180f6:	eeeb 7aa6 	vfma.f32	s15, s23, s13
}
 80180fa:	ecbd 8b0a 	vpop	{d8-d12}
	*linkage = avg_voltage * 60.0 / (sqrtf(3.0) * 2.0 * M_PI * avg_rpm);
 80180fe:	eddf 6a39 	vldr	s13, [pc, #228]	; 80181e4 <conf_general_measure_flux_linkage+0x2d4>
 8018102:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80181e8 <conf_general_measure_flux_linkage+0x2d8>
 8018106:	ee27 7a26 	vmul.f32	s14, s14, s13
 801810a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801810e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8018112:	edc7 6a00 	vstr	s13, [r7]
}
 8018116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				mcpwm_switch_comm_mode(COMM_MODE_DELAY);
 801811a:	2001      	movs	r0, #1
 801811c:	f7fc f8e8 	bl	80142f0 <mcpwm_switch_comm_mode>
 8018120:	e789      	b.n	8018036 <conf_general_measure_flux_linkage+0x126>
		if (switch_done) {
 8018122:	2d00      	cmp	r5, #0
 8018124:	d19a      	bne.n	801805c <conf_general_measure_flux_linkage+0x14c>
	for (int i = 0;i < 4;i++) {
 8018126:	f109 0901 	add.w	r9, r9, #1
 801812a:	f1b9 0f04 	cmp.w	r9, #4
		started = true;
 801812e:	f04f 0501 	mov.w	r5, #1
	for (int i = 0;i < 4;i++) {
 8018132:	f47f af55 	bne.w	8017fe0 <conf_general_measure_flux_linkage+0xd0>
 8018136:	e78f      	b.n	8018058 <conf_general_measure_flux_linkage+0x148>
		mc_interface_set_current(0.0);
 8018138:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80181d0 <conf_general_measure_flux_linkage+0x2c0>
 801813c:	f004 f950 	bl	801c3e0 <mc_interface_set_current>
		timeout_configure(tout, tout_c);
 8018140:	eeb0 0a4c 	vmov.f32	s0, s24
 8018144:	4640      	mov	r0, r8
 8018146:	f002 f853 	bl	801a1f0 <timeout_configure>
		mc_interface_set_configuration(&mcconf_old);
 801814a:	481e      	ldr	r0, [pc, #120]	; (80181c4 <conf_general_measure_flux_linkage+0x2b4>)
 801814c:	f003 fec8 	bl	801bee0 <mc_interface_set_configuration>
		mc_interface_unlock();
 8018150:	f003 f996 	bl	801b480 <mc_interface_unlock>
}
 8018154:	ecbd 8b0a 	vpop	{d8-d12}
		return false;
 8018158:	2000      	movs	r0, #0
}
 801815a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mc_interface_lock_override_once();
 801815e:	f003 f997 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_release_motor();
 8018162:	f004 f98d 	bl	801c480 <mc_interface_release_motor>
			mcconf.sl_min_erpm = 4 * min_erpm;
 8018166:	ee69 7a8a 	vmul.f32	s15, s19, s20
			mcconf.comm_mode = COMM_MODE_DELAY;
 801816a:	2301      	movs	r3, #1
			mcconf.sl_min_erpm = 4 * min_erpm;
 801816c:	edca 7a1f 	vstr	s15, [sl, #124]	; 0x7c
			mcconf.comm_mode = COMM_MODE_DELAY;
 8018170:	f88a 3001 	strb.w	r3, [sl, #1]
			mc_interface_lock_override_once();
 8018174:	f003 f98c 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_set_configuration(&mcconf);
 8018178:	4658      	mov	r0, fp
 801817a:	f003 feb1 	bl	801bee0 <mc_interface_set_configuration>
			chThdSleepMilliseconds(1000);
 801817e:	f242 7010 	movw	r0, #10000	; 0x2710
 8018182:	f7f5 fc2d 	bl	800d9e0 <chThdSleep>
			mc_interface_lock_override_once();
 8018186:	f003 f983 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_set_current(current);
 801818a:	eeb0 0a49 	vmov.f32	s0, s18
 801818e:	f004 f927 	bl	801c3e0 <mc_interface_set_current>
 8018192:	e731      	b.n	8017ff8 <conf_general_measure_flux_linkage+0xe8>
			mc_interface_lock_override_once();
 8018194:	f003 f97c 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_release_motor();
 8018198:	f004 f972 	bl	801c480 <mc_interface_release_motor>
			mcconf.sl_min_erpm = 2 * min_erpm;
 801819c:	ee79 7aa9 	vadd.f32	s15, s19, s19
			mcconf.sl_cycle_int_limit = 20;
 80181a0:	4b12      	ldr	r3, [pc, #72]	; (80181ec <conf_general_measure_flux_linkage+0x2dc>)
			mcconf.sl_min_erpm = 2 * min_erpm;
 80181a2:	edca 7a1f 	vstr	s15, [sl, #124]	; 0x7c
			mcconf.sl_cycle_int_limit = 20;
 80181a6:	f8ca 3088 	str.w	r3, [sl, #136]	; 0x88
 80181aa:	e7e3      	b.n	8018174 <conf_general_measure_flux_linkage+0x264>
			mc_interface_lock_override_once();
 80181ac:	f003 f970 	bl	801b490 <mc_interface_lock_override_once>
			mc_interface_release_motor();
 80181b0:	f004 f966 	bl	801c480 <mc_interface_release_motor>
			mcconf.sl_cycle_int_limit = 250;
 80181b4:	edca aa22 	vstr	s21, [sl, #136]	; 0x88
 80181b8:	e7dc      	b.n	8018174 <conf_general_measure_flux_linkage+0x264>
 80181ba:	bf00      	nop
 80181bc:	43960000 	.word	0x43960000
 80181c0:	461c4000 	.word	0x461c4000
 80181c4:	200081c0 	.word	0x200081c0
 80181c8:	42480000 	.word	0x42480000
 80181cc:	44898000 	.word	0x44898000
 80181d0:	00000000 	.word	0x00000000
 80181d4:	437a0000 	.word	0x437a0000
 80181d8:	2000c034 	.word	0x2000c034
 80181dc:	3a534067 	.word	0x3a534067
 80181e0:	4195d174 	.word	0x4195d174
 80181e4:	412e1fef 	.word	0x412e1fef
 80181e8:	42700000 	.word	0x42700000
 80181ec:	41a00000 	.word	0x41a00000
 80181f0:	2000804c 	.word	0x2000804c
	...

08018200 <EE_VerifyPageFullWriteVariable>:
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8018200:	b538      	push	{r3, r4, r5, lr}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8018202:	4a1b      	ldr	r2, [pc, #108]	; (8018270 <EE_VerifyPageFullWriteVariable+0x70>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8018204:	4b1b      	ldr	r3, [pc, #108]	; (8018274 <EE_VerifyPageFullWriteVariable+0x74>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8018206:	8812      	ldrh	r2, [r2, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8018208:	881b      	ldrh	r3, [r3, #0]
 801820a:	b29c      	uxth	r4, r3
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801820c:	b292      	uxth	r2, r2
		if (PageStatus1 == VALID_PAGE)
 801820e:	b9ec      	cbnz	r4, 801824c <EE_VerifyPageFullWriteVariable+0x4c>
			if (PageStatus0 == RECEIVE_DATA)
 8018210:	f64e 63ee 	movw	r3, #61166	; 0xeeee
				return PAGE1;         /* Page1 valid */
 8018214:	1ad3      	subs	r3, r2, r3
 8018216:	bf18      	it	ne
 8018218:	2301      	movne	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801821a:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801821e:	4a16      	ldr	r2, [pc, #88]	; (8018278 <EE_VerifyPageFullWriteVariable+0x78>)
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8018220:	3401      	adds	r4, #1
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8018222:	3301      	adds	r3, #1
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8018224:	03a4      	lsls	r4, r4, #14
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8018226:	eb02 3283 	add.w	r2, r2, r3, lsl #14

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 801822a:	4294      	cmp	r4, r2
 801822c:	d303      	bcc.n	8018236 <EE_VerifyPageFullWriteVariable+0x36>
 801822e:	e017      	b.n	8018260 <EE_VerifyPageFullWriteVariable+0x60>
			return FlashStatus;
		}
		else
		{
			/* Next address location */
			Address = Address + 4;
 8018230:	3404      	adds	r4, #4
	while (Address < PageEndAddress)
 8018232:	42a2      	cmp	r2, r4
 8018234:	d914      	bls.n	8018260 <EE_VerifyPageFullWriteVariable+0x60>
		if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8018236:	6823      	ldr	r3, [r4, #0]
 8018238:	3301      	adds	r3, #1
 801823a:	d1f9      	bne.n	8018230 <EE_VerifyPageFullWriteVariable+0x30>
 801823c:	4605      	mov	r5, r0
			FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 801823e:	4620      	mov	r0, r4
 8018240:	f00c faee 	bl	8024820 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 8018244:	2809      	cmp	r0, #9
 8018246:	d00d      	beq.n	8018264 <EE_VerifyPageFullWriteVariable+0x64>
			return FlashStatus;
 8018248:	b280      	uxth	r0, r0
 801824a:	bd38      	pop	{r3, r4, r5, pc}
		else if (PageStatus0 == VALID_PAGE)
 801824c:	b932      	cbnz	r2, 801825c <EE_VerifyPageFullWriteVariable+0x5c>
			if (PageStatus1 == RECEIVE_DATA)
 801824e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
				return PAGE1;         /* Page1 valid */
 8018252:	1ae3      	subs	r3, r4, r3
 8018254:	fab3 f383 	clz	r3, r3
 8018258:	095b      	lsrs	r3, r3, #5
 801825a:	e7de      	b.n	801821a <EE_VerifyPageFullWriteVariable+0x1a>
		return  NO_VALID_PAGE;
 801825c:	20ab      	movs	r0, #171	; 0xab
 801825e:	bd38      	pop	{r3, r4, r5, pc}
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8018260:	2080      	movs	r0, #128	; 0x80
 8018262:	bd38      	pop	{r3, r4, r5, pc}
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8018264:	4629      	mov	r1, r5
 8018266:	1ca0      	adds	r0, r4, #2
 8018268:	f00c fada 	bl	8024820 <FLASH_ProgramHalfWord>
 801826c:	e7ec      	b.n	8018248 <EE_VerifyPageFullWriteVariable+0x48>
 801826e:	bf00      	nop
 8018270:	08004000 	.word	0x08004000
 8018274:	08008000 	.word	0x08008000
 8018278:	08003ffe 	.word	0x08003ffe
 801827c:	00000000 	.word	0x00000000

08018280 <EE_EraseSectorIfNotEmpty.constprop.1>:

/*
 * Erase flash page if it is not already erased. This is to save write cycles and
 * prevent the memory from getting erased in case of unstable voltage at boot.
 */
static uint16_t EE_EraseSectorIfNotEmpty(uint32_t FLASH_Sector, uint8_t VoltageRange) {
 8018280:	b510      	push	{r4, lr}
 8018282:	4604      	mov	r4, r0
	uint8_t *addr = flash_helper_get_sector_address(FLASH_Sector);
 8018284:	f002 fedc 	bl	801b040 <flash_helper_get_sector_address>
 8018288:	f500 527f 	add.w	r2, r0, #16320	; 0x3fc0
 801828c:	323f      	adds	r2, #63	; 0x3f
 801828e:	3801      	subs	r0, #1
 8018290:	e001      	b.n	8018296 <EE_EraseSectorIfNotEmpty.constprop.1+0x16>

	for (unsigned int i = 0;i < PAGE_SIZE;i++) {
 8018292:	4290      	cmp	r0, r2
 8018294:	d009      	beq.n	80182aa <EE_EraseSectorIfNotEmpty.constprop.1+0x2a>
		if (addr[i] != 0xFF) {
 8018296:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801829a:	2bff      	cmp	r3, #255	; 0xff
 801829c:	d0f9      	beq.n	8018292 <EE_EraseSectorIfNotEmpty.constprop.1+0x12>
			return FLASH_EraseSector(FLASH_Sector, VoltageRange);
 801829e:	4620      	mov	r0, r4
 80182a0:	2102      	movs	r1, #2
 80182a2:	f00c fa7d 	bl	80247a0 <FLASH_EraseSector>
 80182a6:	b280      	uxth	r0, r0
 80182a8:	bd10      	pop	{r4, pc}
		}
	}

	return FLASH_COMPLETE;
 80182aa:	2009      	movs	r0, #9
}
 80182ac:	bd10      	pop	{r4, pc}
 80182ae:	bf00      	nop

080182b0 <EE_Format>:
{
 80182b0:	b508      	push	{r3, lr}
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80182b2:	2008      	movs	r0, #8
 80182b4:	f7ff ffe4 	bl	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
 80182b8:	b2c0      	uxtb	r0, r0
	if (FlashStatus != FLASH_COMPLETE)
 80182ba:	2809      	cmp	r0, #9
 80182bc:	d000      	beq.n	80182c0 <EE_Format+0x10>
}
 80182be:	bd08      	pop	{r3, pc}
	FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80182c0:	2100      	movs	r1, #0
 80182c2:	4805      	ldr	r0, [pc, #20]	; (80182d8 <EE_Format+0x28>)
 80182c4:	f00c faac 	bl	8024820 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80182c8:	2809      	cmp	r0, #9
 80182ca:	d1f8      	bne.n	80182be <EE_Format+0xe>
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 80182cc:	2010      	movs	r0, #16
 80182ce:	f7ff ffd7 	bl	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
 80182d2:	b2c0      	uxtb	r0, r0
 80182d4:	e7f3      	b.n	80182be <EE_Format+0xe>
 80182d6:	bf00      	nop
 80182d8:	08004000 	.word	0x08004000
 80182dc:	00000000 	.word	0x00000000

080182e0 <EE_ReadVariable>:
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80182e0:	4b15      	ldr	r3, [pc, #84]	; (8018338 <EE_ReadVariable+0x58>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80182e2:	4a16      	ldr	r2, [pc, #88]	; (801833c <EE_ReadVariable+0x5c>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80182e4:	881b      	ldrh	r3, [r3, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80182e6:	8812      	ldrh	r2, [r2, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80182e8:	b29b      	uxth	r3, r3
{
 80182ea:	b410      	push	{r4}
		if (PageStatus0 == VALID_PAGE)
 80182ec:	b12b      	cbz	r3, 80182fa <EE_ReadVariable+0x1a>
 80182ee:	b292      	uxth	r2, r2
		else if (PageStatus1 == VALID_PAGE)
 80182f0:	b9b2      	cbnz	r2, 8018320 <EE_ReadVariable+0x40>
 80182f2:	4b13      	ldr	r3, [pc, #76]	; (8018340 <EE_ReadVariable+0x60>)
 80182f4:	4c13      	ldr	r4, [pc, #76]	; (8018344 <EE_ReadVariable+0x64>)
 80182f6:	461a      	mov	r2, r3
 80182f8:	e002      	b.n	8018300 <EE_ReadVariable+0x20>
		if (PageStatus0 == VALID_PAGE)
 80182fa:	4b13      	ldr	r3, [pc, #76]	; (8018348 <EE_ReadVariable+0x68>)
 80182fc:	4c13      	ldr	r4, [pc, #76]	; (801834c <EE_ReadVariable+0x6c>)
 80182fe:	461a      	mov	r2, r3
		AddressValue = (*(__IO uint16_t*)Address);
 8018300:	8812      	ldrh	r2, [r2, #0]
 8018302:	b292      	uxth	r2, r2
		if (AddressValue == VirtAddress)
 8018304:	4290      	cmp	r0, r2
 8018306:	d104      	bne.n	8018312 <EE_ReadVariable+0x32>
 8018308:	e00e      	b.n	8018328 <EE_ReadVariable+0x48>
		AddressValue = (*(__IO uint16_t*)Address);
 801830a:	881a      	ldrh	r2, [r3, #0]
 801830c:	b292      	uxth	r2, r2
		if (AddressValue == VirtAddress)
 801830e:	4282      	cmp	r2, r0
 8018310:	d00a      	beq.n	8018328 <EE_ReadVariable+0x48>
			Address = Address - 4;
 8018312:	3b04      	subs	r3, #4
	while (Address > (PageStartAddress + 2))
 8018314:	429c      	cmp	r4, r3
 8018316:	d3f8      	bcc.n	801830a <EE_ReadVariable+0x2a>
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8018318:	2001      	movs	r0, #1
}
 801831a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801831e:	4770      	bx	lr
		return  NO_VALID_PAGE;
 8018320:	20ab      	movs	r0, #171	; 0xab
}
 8018322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018326:	4770      	bx	lr
			*Data = (*(__IO uint16_t*)(Address - 2));
 8018328:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 801832c:	800b      	strh	r3, [r1, #0]
			ReadStatus = 0;
 801832e:	2000      	movs	r0, #0
}
 8018330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018334:	4770      	bx	lr
 8018336:	bf00      	nop
 8018338:	08004000 	.word	0x08004000
 801833c:	08008000 	.word	0x08008000
 8018340:	0800bffe 	.word	0x0800bffe
 8018344:	08008002 	.word	0x08008002
 8018348:	08007ffe 	.word	0x08007ffe
 801834c:	08004002 	.word	0x08004002

08018350 <EE_Init>:
{
 8018350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8018354:	4d4d      	ldr	r5, [pc, #308]	; (801848c <EE_Init+0x13c>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8018356:	4e4e      	ldr	r6, [pc, #312]	; (8018490 <EE_Init+0x140>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8018358:	882c      	ldrh	r4, [r5, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801835a:	8833      	ldrh	r3, [r6, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801835c:	b2a4      	uxth	r4, r4
	switch (PageStatus0)
 801835e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8018362:	4294      	cmp	r4, r2
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8018364:	b29b      	uxth	r3, r3
	switch (PageStatus0)
 8018366:	d041      	beq.n	80183ec <EE_Init+0x9c>
 8018368:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801836c:	428c      	cmp	r4, r1
 801836e:	d02d      	beq.n	80183cc <EE_Init+0x7c>
 8018370:	b124      	cbz	r4, 801837c <EE_Init+0x2c>
		FlashStatus = EE_Format();
 8018372:	f7ff ff9d 	bl	80182b0 <EE_Format>
 8018376:	b280      	uxth	r0, r0
}
 8018378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801837c:	2b00      	cmp	r3, #0
 801837e:	d0f8      	beq.n	8018372 <EE_Init+0x22>
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8018380:	428b      	cmp	r3, r1
 8018382:	d07d      	beq.n	8018480 <EE_Init+0x130>
 8018384:	4d43      	ldr	r5, [pc, #268]	; (8018494 <EE_Init+0x144>)
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8018386:	4e44      	ldr	r6, [pc, #272]	; (8018498 <EE_Init+0x148>)
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8018388:	4f44      	ldr	r7, [pc, #272]	; (801849c <EE_Init+0x14c>)
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801838a:	f04f 38ff 	mov.w	r8, #4294967295
 801838e:	e004      	b.n	801839a <EE_Init+0x4a>
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8018390:	f5b4 7f8f 	cmp.w	r4, #286	; 0x11e
 8018394:	f105 0502 	add.w	r5, r5, #2
 8018398:	d05e      	beq.n	8018458 <EE_Init+0x108>
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801839a:	8833      	ldrh	r3, [r6, #0]
 801839c:	882a      	ldrh	r2, [r5, #0]
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801839e:	493f      	ldr	r1, [pc, #252]	; (801849c <EE_Init+0x14c>)
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	4293      	cmp	r3, r2
					x = VarIdx;
 80183a4:	bf08      	it	eq
 80183a6:	fa0f f884 	sxtheq.w	r8, r4
				if (VarIdx != x)
 80183aa:	4544      	cmp	r4, r8
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80183ac:	4610      	mov	r0, r2
 80183ae:	f104 0401 	add.w	r4, r4, #1
				if (VarIdx != x)
 80183b2:	d0ed      	beq.n	8018390 <EE_Init+0x40>
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80183b4:	f7ff ff94 	bl	80182e0 <EE_ReadVariable>
					if (ReadStatus != 0x1)
 80183b8:	2801      	cmp	r0, #1
 80183ba:	d0e9      	beq.n	8018390 <EE_Init+0x40>
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80183bc:	8839      	ldrh	r1, [r7, #0]
 80183be:	8828      	ldrh	r0, [r5, #0]
 80183c0:	f7ff ff1e 	bl	8018200 <EE_VerifyPageFullWriteVariable>
						if (EepromStatus != FLASH_COMPLETE)
 80183c4:	2809      	cmp	r0, #9
 80183c6:	d0e3      	beq.n	8018390 <EE_Init+0x40>
 80183c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d04a      	beq.n	8018466 <EE_Init+0x116>
		else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80183d0:	4293      	cmp	r3, r2
 80183d2:	d1ce      	bne.n	8018372 <EE_Init+0x22>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80183d4:	2008      	movs	r0, #8
 80183d6:	f7ff ff53 	bl	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
 80183da:	2809      	cmp	r0, #9
 80183dc:	d1cc      	bne.n	8018378 <EE_Init+0x28>
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80183de:	4630      	mov	r0, r6
 80183e0:	2100      	movs	r1, #0
 80183e2:	f00c fa1d 	bl	8024820 <FLASH_ProgramHalfWord>
 80183e6:	b280      	uxth	r0, r0
 80183e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80183ec:	bb23      	cbnz	r3, 8018438 <EE_Init+0xe8>
 80183ee:	4d29      	ldr	r5, [pc, #164]	; (8018494 <EE_Init+0x144>)
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80183f0:	4e2b      	ldr	r6, [pc, #172]	; (80184a0 <EE_Init+0x150>)
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80183f2:	4f2a      	ldr	r7, [pc, #168]	; (801849c <EE_Init+0x14c>)
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80183f4:	461c      	mov	r4, r3
 80183f6:	f04f 38ff 	mov.w	r8, #4294967295
 80183fa:	e004      	b.n	8018406 <EE_Init+0xb6>
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80183fc:	f5b4 7f8f 	cmp.w	r4, #286	; 0x11e
 8018400:	f105 0502 	add.w	r5, r5, #2
 8018404:	d034      	beq.n	8018470 <EE_Init+0x120>
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8018406:	8833      	ldrh	r3, [r6, #0]
 8018408:	882a      	ldrh	r2, [r5, #0]
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801840a:	4924      	ldr	r1, [pc, #144]	; (801849c <EE_Init+0x14c>)
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801840c:	b29b      	uxth	r3, r3
 801840e:	4293      	cmp	r3, r2
					x = VarIdx;
 8018410:	bf08      	it	eq
 8018412:	fa0f f884 	sxtheq.w	r8, r4
				if (VarIdx != x)
 8018416:	4544      	cmp	r4, r8
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8018418:	4610      	mov	r0, r2
 801841a:	f104 0401 	add.w	r4, r4, #1
				if (VarIdx != x)
 801841e:	d0ed      	beq.n	80183fc <EE_Init+0xac>
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8018420:	f7ff ff5e 	bl	80182e0 <EE_ReadVariable>
					if (ReadStatus != 0x1)
 8018424:	2801      	cmp	r0, #1
 8018426:	d0e9      	beq.n	80183fc <EE_Init+0xac>
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8018428:	8839      	ldrh	r1, [r7, #0]
 801842a:	8828      	ldrh	r0, [r5, #0]
 801842c:	f7ff fee8 	bl	8018200 <EE_VerifyPageFullWriteVariable>
						if (EepromStatus != FLASH_COMPLETE)
 8018430:	2809      	cmp	r0, #9
 8018432:	d0e3      	beq.n	80183fc <EE_Init+0xac>
 8018434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8018438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801843c:	4293      	cmp	r3, r2
 801843e:	d198      	bne.n	8018372 <EE_Init+0x22>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8018440:	2010      	movs	r0, #16
 8018442:	f7ff ff1d 	bl	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
 8018446:	2809      	cmp	r0, #9
 8018448:	d196      	bne.n	8018378 <EE_Init+0x28>
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 801844a:	4628      	mov	r0, r5
 801844c:	2100      	movs	r1, #0
 801844e:	f00c f9e7 	bl	8024820 <FLASH_ProgramHalfWord>
 8018452:	b280      	uxth	r0, r0
 8018454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8018458:	2100      	movs	r1, #0
 801845a:	480d      	ldr	r0, [pc, #52]	; (8018490 <EE_Init+0x140>)
 801845c:	f00c f9e0 	bl	8024820 <FLASH_ProgramHalfWord>
 8018460:	b280      	uxth	r0, r0
			if (FlashStatus != FLASH_COMPLETE)
 8018462:	2809      	cmp	r0, #9
 8018464:	d188      	bne.n	8018378 <EE_Init+0x28>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 8018466:	2008      	movs	r0, #8
}
 8018468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 801846c:	f7ff bf08 	b.w	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8018470:	2100      	movs	r1, #0
 8018472:	4806      	ldr	r0, [pc, #24]	; (801848c <EE_Init+0x13c>)
 8018474:	f00c f9d4 	bl	8024820 <FLASH_ProgramHalfWord>
 8018478:	b280      	uxth	r0, r0
			if (FlashStatus != FLASH_COMPLETE)
 801847a:	2809      	cmp	r0, #9
 801847c:	f47f af7c 	bne.w	8018378 <EE_Init+0x28>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8018480:	2010      	movs	r0, #16
}
 8018482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8018486:	f7ff befb 	b.w	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
 801848a:	bf00      	nop
 801848c:	08004000 	.word	0x08004000
 8018490:	08008000 	.word	0x08008000
 8018494:	20007e0c 	.word	0x20007e0c
 8018498:	08008006 	.word	0x08008006
 801849c:	20008334 	.word	0x20008334
 80184a0:	08004006 	.word	0x08004006
	...

080184b0 <EE_WriteVariable>:
{
 80184b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184b4:	4604      	mov	r4, r0
 80184b6:	460d      	mov	r5, r1
	Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80184b8:	f7ff fea2 	bl	8018200 <EE_VerifyPageFullWriteVariable>
	if (Status == PAGE_FULL)
 80184bc:	2880      	cmp	r0, #128	; 0x80
 80184be:	d001      	beq.n	80184c4 <EE_WriteVariable+0x14>
}
 80184c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80184c4:	4e22      	ldr	r6, [pc, #136]	; (8018550 <EE_WriteVariable+0xa0>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80184c6:	4823      	ldr	r0, [pc, #140]	; (8018554 <EE_WriteVariable+0xa4>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80184c8:	8833      	ldrh	r3, [r6, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80184ca:	8802      	ldrh	r2, [r0, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80184cc:	b29b      	uxth	r3, r3
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80184ce:	b292      	uxth	r2, r2
		if (PageStatus0 == VALID_PAGE)
 80184d0:	b113      	cbz	r3, 80184d8 <EE_WriteVariable+0x28>
		else if (PageStatus1 == VALID_PAGE)
 80184d2:	b96a      	cbnz	r2, 80184f0 <EE_WriteVariable+0x40>
		OldPageId = PAGE1_ID;
 80184d4:	2710      	movs	r7, #16
 80184d6:	e001      	b.n	80184dc <EE_WriteVariable+0x2c>
		NewPageAddress = PAGE1_BASE_ADDRESS;
 80184d8:	4606      	mov	r6, r0
		OldPageId = PAGE0_ID;
 80184da:	2708      	movs	r7, #8
	FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 80184dc:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80184e0:	4630      	mov	r0, r6
 80184e2:	f00c f99d 	bl	8024820 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80184e6:	2809      	cmp	r0, #9
 80184e8:	d004      	beq.n	80184f4 <EE_WriteVariable+0x44>
		return FlashStatus;
 80184ea:	b280      	uxth	r0, r0
 80184ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NO_VALID_PAGE;       /* No valid Page */
 80184f0:	20ab      	movs	r0, #171	; 0xab
 80184f2:	e7e5      	b.n	80184c0 <EE_WriteVariable+0x10>
	EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80184f4:	4629      	mov	r1, r5
 80184f6:	4620      	mov	r0, r4
 80184f8:	f7ff fe82 	bl	8018200 <EE_VerifyPageFullWriteVariable>
	if (EepromStatus != FLASH_COMPLETE)
 80184fc:	2809      	cmp	r0, #9
 80184fe:	d1df      	bne.n	80184c0 <EE_WriteVariable+0x10>
 8018500:	4d15      	ldr	r5, [pc, #84]	; (8018558 <EE_WriteVariable+0xa8>)
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8018502:	f8df 9058 	ldr.w	r9, [pc, #88]	; 801855c <EE_WriteVariable+0xac>
 8018506:	f505 780f 	add.w	r8, r5, #572	; 0x23c
 801850a:	e002      	b.n	8018512 <EE_WriteVariable+0x62>
 801850c:	3502      	adds	r5, #2
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801850e:	45a8      	cmp	r8, r5
 8018510:	d011      	beq.n	8018536 <EE_WriteVariable+0x86>
		if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8018512:	882b      	ldrh	r3, [r5, #0]
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8018514:	4911      	ldr	r1, [pc, #68]	; (801855c <EE_WriteVariable+0xac>)
		if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8018516:	429c      	cmp	r4, r3
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8018518:	4618      	mov	r0, r3
		if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801851a:	d0f7      	beq.n	801850c <EE_WriteVariable+0x5c>
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801851c:	f7ff fee0 	bl	80182e0 <EE_ReadVariable>
			if (ReadStatus != 0x1)
 8018520:	2801      	cmp	r0, #1
 8018522:	d0f3      	beq.n	801850c <EE_WriteVariable+0x5c>
				EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8018524:	f8b9 1000 	ldrh.w	r1, [r9]
 8018528:	8828      	ldrh	r0, [r5, #0]
 801852a:	f7ff fe69 	bl	8018200 <EE_VerifyPageFullWriteVariable>
				if (EepromStatus != FLASH_COMPLETE)
 801852e:	2809      	cmp	r0, #9
 8018530:	d0ec      	beq.n	801850c <EE_WriteVariable+0x5c>
 8018532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FlashStatus = EE_EraseSectorIfNotEmpty(OldPageId, VOLTAGE_RANGE);
 8018536:	4638      	mov	r0, r7
 8018538:	f7ff fea2 	bl	8018280 <EE_EraseSectorIfNotEmpty.constprop.1>
	if (FlashStatus != FLASH_COMPLETE)
 801853c:	b2c0      	uxtb	r0, r0
 801853e:	2809      	cmp	r0, #9
 8018540:	d1d3      	bne.n	80184ea <EE_WriteVariable+0x3a>
	FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 8018542:	4630      	mov	r0, r6
 8018544:	2100      	movs	r1, #0
 8018546:	f00c f96b 	bl	8024820 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 801854a:	2809      	cmp	r0, #9
 801854c:	d1cd      	bne.n	80184ea <EE_WriteVariable+0x3a>
 801854e:	e7b7      	b.n	80184c0 <EE_WriteVariable+0x10>
 8018550:	08004000 	.word	0x08004000
 8018554:	08008000 	.word	0x08008000
 8018558:	20007e0c 	.word	0x20007e0c
 801855c:	20008334 	.word	0x20008334

08018560 <detect_thread>:
	send_buffer[ind++] = appconf->app_nrf_conf.send_crc_ack;

	commands_send_packet(send_buffer, ind);
}

static THD_FUNCTION(detect_thread, arg) {
 8018560:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8018564:	4b34      	ldr	r3, [pc, #208]	; (8018638 <detect_thread+0xd8>)
	(void)arg;

	chRegSetThreadName("Detect");

	detect_tp = chThdGetSelfX();
 8018566:	4a35      	ldr	r2, [pc, #212]	; (801863c <detect_thread+0xdc>)
 8018568:	699b      	ldr	r3, [r3, #24]
 801856a:	4d35      	ldr	r5, [pc, #212]	; (8018640 <detect_thread+0xe0>)
 801856c:	4935      	ldr	r1, [pc, #212]	; (8018644 <detect_thread+0xe4>)
 801856e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801865c <detect_thread+0xfc>
 8018572:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8018668 <detect_thread+0x108>
 8018576:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 801866c <detect_thread+0x10c>
 801857a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8018670 <detect_thread+0x110>
 801857e:	4f32      	ldr	r7, [pc, #200]	; (8018648 <detect_thread+0xe8>)
 8018580:	ed9f 8a32 	vldr	s16, [pc, #200]	; 801864c <detect_thread+0xec>
		chEvtWaitAny((eventmask_t) 1);

		if (!conf_general_detect_motor_param(detect_current, detect_min_rpm,
				detect_low_duty, &detect_cycle_int_limit, &detect_coupling_k,
				detect_hall_table, &detect_hall_res)) {
			detect_cycle_int_limit = 0.0;
 8018584:	eddf 8a32 	vldr	s17, [pc, #200]	; 8018650 <detect_thread+0xf0>
 8018588:	6199      	str	r1, [r3, #24]
static THD_FUNCTION(detect_thread, arg) {
 801858a:	b085      	sub	sp, #20
	detect_tp = chThdGetSelfX();
 801858c:	6013      	str	r3, [r2, #0]
			detect_coupling_k = 0.0;
		}

		int32_t ind = 0;
		send_buffer[ind++] = COMM_DETECT_MOTOR_PARAM;
		buffer_append_int32(send_buffer, (int32_t)(detect_cycle_int_limit * 1000.0), &ind);
 801858e:	462c      	mov	r4, r5
		chEvtWaitAny((eventmask_t) 1);
 8018590:	2001      	movs	r0, #1
 8018592:	f7f5 fc85 	bl	800dea0 <chEvtWaitAny>
		if (!conf_general_detect_motor_param(detect_current, detect_min_rpm,
 8018596:	4b2c      	ldr	r3, [pc, #176]	; (8018648 <detect_thread+0xe8>)
 8018598:	4a2e      	ldr	r2, [pc, #184]	; (8018654 <detect_thread+0xf4>)
 801859a:	492f      	ldr	r1, [pc, #188]	; (8018658 <detect_thread+0xf8>)
 801859c:	482f      	ldr	r0, [pc, #188]	; (801865c <detect_thread+0xfc>)
 801859e:	ed9a 1a00 	vldr	s2, [sl]
 80185a2:	edd9 0a00 	vldr	s1, [r9]
 80185a6:	ed98 0a00 	vldr	s0, [r8]
 80185aa:	f7ff fb11 	bl	8017bd0 <conf_general_detect_motor_param>
 80185ae:	b398      	cbz	r0, 8018618 <detect_thread+0xb8>
 80185b0:	eddb 7a00 	vldr	s15, [fp]
 80185b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80185b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80185bc:	edcd 7a01 	vstr	s15, [sp, #4]
		send_buffer[ind++] = COMM_DETECT_MOTOR_PARAM;
 80185c0:	2001      	movs	r0, #1
 80185c2:	2318      	movs	r3, #24
		buffer_append_int32(send_buffer, (int32_t)(detect_cycle_int_limit * 1000.0), &ind);
 80185c4:	aa03      	add	r2, sp, #12
 80185c6:	9901      	ldr	r1, [sp, #4]
		send_buffer[ind++] = COMM_DETECT_MOTOR_PARAM;
 80185c8:	9003      	str	r0, [sp, #12]
		buffer_append_int32(send_buffer, (int32_t)(detect_cycle_int_limit * 1000.0), &ind);
 80185ca:	4620      	mov	r0, r4
		send_buffer[ind++] = COMM_DETECT_MOTOR_PARAM;
 80185cc:	702b      	strb	r3, [r5, #0]
		buffer_append_int32(send_buffer, (int32_t)(detect_cycle_int_limit * 1000.0), &ind);
 80185ce:	f7f9 fabf 	bl	8011b50 <buffer_append_int32>
		buffer_append_int32(send_buffer, (int32_t)(detect_coupling_k * 1000.0), &ind);
 80185d2:	4b21      	ldr	r3, [pc, #132]	; (8018658 <detect_thread+0xf8>)
 80185d4:	edd3 7a00 	vldr	s15, [r3]
 80185d8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80185dc:	aa03      	add	r2, sp, #12
 80185de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80185e2:	4620      	mov	r0, r4
 80185e4:	ee17 1a90 	vmov	r1, s15
 80185e8:	f7f9 fab2 	bl	8011b50 <buffer_append_int32>
		memcpy(send_buffer + ind, detect_hall_table, 8);
 80185ec:	f8df e064 	ldr.w	lr, [pc, #100]	; 8018654 <detect_thread+0xf4>
 80185f0:	9b03      	ldr	r3, [sp, #12]
		ind += 8;
		send_buffer[ind++] = detect_hall_res;

		if (send_func_last) {
 80185f2:	4a1b      	ldr	r2, [pc, #108]	; (8018660 <detect_thread+0x100>)
		send_buffer[ind++] = detect_hall_res;
 80185f4:	783e      	ldrb	r6, [r7, #0]
		if (send_func_last) {
 80185f6:	6812      	ldr	r2, [r2, #0]
		memcpy(send_buffer + ind, detect_hall_table, 8);
 80185f8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80185fc:	eb05 0e03 	add.w	lr, r5, r3
 8018600:	50e8      	str	r0, [r5, r3]
		send_buffer[ind++] = detect_hall_res;
 8018602:	3309      	adds	r3, #9
		memcpy(send_buffer + ind, detect_hall_table, 8);
 8018604:	f8ce 1004 	str.w	r1, [lr, #4]
			send_func_last(send_buffer, ind);
 8018608:	4620      	mov	r0, r4
		send_buffer[ind++] = detect_hall_res;
 801860a:	9303      	str	r3, [sp, #12]
			send_func_last(send_buffer, ind);
 801860c:	4619      	mov	r1, r3
		send_buffer[ind++] = detect_hall_res;
 801860e:	f88e 6008 	strb.w	r6, [lr, #8]
		if (send_func_last) {
 8018612:	b142      	cbz	r2, 8018626 <detect_thread+0xc6>
			send_func_last(send_buffer, ind);
 8018614:	4790      	blx	r2
 8018616:	e7bb      	b.n	8018590 <detect_thread+0x30>
			detect_coupling_k = 0.0;
 8018618:	4b0f      	ldr	r3, [pc, #60]	; (8018658 <detect_thread+0xf8>)
			detect_cycle_int_limit = 0.0;
 801861a:	edcb 8a00 	vstr	s17, [fp]
			detect_coupling_k = 0.0;
 801861e:	edc3 8a00 	vstr	s17, [r3]
 8018622:	9001      	str	r0, [sp, #4]
 8018624:	e7cc      	b.n	80185c0 <detect_thread+0x60>
		send_func(data, len);
 8018626:	4619      	mov	r1, r3
	if (send_func) {
 8018628:	4b0e      	ldr	r3, [pc, #56]	; (8018664 <detect_thread+0x104>)
 801862a:	681b      	ldr	r3, [r3, #0]
		send_func(data, len);
 801862c:	4620      	mov	r0, r4
	if (send_func) {
 801862e:	2b00      	cmp	r3, #0
 8018630:	d0ae      	beq.n	8018590 <detect_thread+0x30>
		send_func(data, len);
 8018632:	4798      	blx	r3
	for(;;) {
 8018634:	e7ac      	b.n	8018590 <detect_thread+0x30>
 8018636:	bf00      	nop
 8018638:	20001a40 	.word	0x20001a40
 801863c:	20008cf8 	.word	0x20008cf8
 8018640:	200090e8 	.word	0x200090e8
 8018644:	08030300 	.word	0x08030300
 8018648:	20008348 	.word	0x20008348
 801864c:	447a0000 	.word	0x447a0000
 8018650:	00000000 	.word	0x00000000
 8018654:	2000834c 	.word	0x2000834c
 8018658:	2000833c 	.word	0x2000833c
 801865c:	20008344 	.word	0x20008344
 8018660:	200094ec 	.word	0x200094ec
 8018664:	200094e8 	.word	0x200094e8
 8018668:	20008354 	.word	0x20008354
 801866c:	20008358 	.word	0x20008358
 8018670:	20008340 	.word	0x20008340
	...

08018680 <commands_init>:
void commands_init(void) {
 8018680:	b500      	push	{lr}
 8018682:	b083      	sub	sp, #12
	chThdCreateStatic(detect_thread_wa, sizeof(detect_thread_wa), NORMALPRIO, detect_thread, NULL);
 8018684:	2300      	movs	r3, #0
 8018686:	9300      	str	r3, [sp, #0]
 8018688:	2240      	movs	r2, #64	; 0x40
 801868a:	4b04      	ldr	r3, [pc, #16]	; (801869c <commands_init+0x1c>)
 801868c:	4804      	ldr	r0, [pc, #16]	; (80186a0 <commands_init+0x20>)
 801868e:	f640 1198 	movw	r1, #2456	; 0x998
 8018692:	f7f5 f96d 	bl	800d970 <chThdCreateStatic>
}
 8018696:	b003      	add	sp, #12
 8018698:	f85d fb04 	ldr.w	pc, [sp], #4
 801869c:	08018561 	.word	0x08018561
 80186a0:	20008360 	.word	0x20008360
	...

080186b0 <commands_set_send_func>:
	send_func = func;
 80186b0:	4b01      	ldr	r3, [pc, #4]	; (80186b8 <commands_set_send_func+0x8>)
 80186b2:	6018      	str	r0, [r3, #0]
 80186b4:	4770      	bx	lr
 80186b6:	bf00      	nop
 80186b8:	200094e8 	.word	0x200094e8
 80186bc:	00000000 	.word	0x00000000

080186c0 <commands_send_packet>:
	if (send_func) {
 80186c0:	4b02      	ldr	r3, [pc, #8]	; (80186cc <commands_send_packet+0xc>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	b103      	cbz	r3, 80186c8 <commands_send_packet+0x8>
		send_func(data, len);
 80186c6:	4718      	bx	r3
 80186c8:	4770      	bx	lr
 80186ca:	bf00      	nop
 80186cc:	200094e8 	.word	0x200094e8

080186d0 <commands_printf>:
void commands_printf(const char* format, ...) {
 80186d0:	b40f      	push	{r0, r1, r2, r3}
 80186d2:	b500      	push	{lr}
 80186d4:	b083      	sub	sp, #12
 80186d6:	ab04      	add	r3, sp, #16
	print_buffer[0] = COMM_PRINT;
 80186d8:	480c      	ldr	r0, [pc, #48]	; (801870c <commands_printf+0x3c>)
void commands_printf(const char* format, ...) {
 80186da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start (arg, format);
 80186de:	9301      	str	r3, [sp, #4]
	print_buffer[0] = COMM_PRINT;
 80186e0:	2115      	movs	r1, #21
 80186e2:	f800 1b01 	strb.w	r1, [r0], #1
	len = vsnprintf(print_buffer+1, 254, format, arg);
 80186e6:	21fe      	movs	r1, #254	; 0xfe
 80186e8:	f010 fae2 	bl	8028cb0 <vsnprintf>
	if(len > 0) {
 80186ec:	2800      	cmp	r0, #0
 80186ee:	dd08      	ble.n	8018702 <commands_printf+0x32>
	if (send_func) {
 80186f0:	4b07      	ldr	r3, [pc, #28]	; (8018710 <commands_printf+0x40>)
 80186f2:	681b      	ldr	r3, [r3, #0]
		commands_send_packet((unsigned char*)print_buffer, (len<254)? len+1: 255);
 80186f4:	28fd      	cmp	r0, #253	; 0xfd
 80186f6:	bfd4      	ite	le
 80186f8:	1c41      	addle	r1, r0, #1
 80186fa:	21ff      	movgt	r1, #255	; 0xff
	if (send_func) {
 80186fc:	b10b      	cbz	r3, 8018702 <commands_printf+0x32>
		send_func(data, len);
 80186fe:	4803      	ldr	r0, [pc, #12]	; (801870c <commands_printf+0x3c>)
 8018700:	4798      	blx	r3
}
 8018702:	b003      	add	sp, #12
 8018704:	f85d eb04 	ldr.w	lr, [sp], #4
 8018708:	b004      	add	sp, #16
 801870a:	4770      	bx	lr
 801870c:	20008fe8 	.word	0x20008fe8
 8018710:	200094e8 	.word	0x200094e8
	...

08018720 <commands_send_rotor_pos>:
void commands_send_rotor_pos(float rotor_pos) {
 8018720:	b510      	push	{r4, lr}
	buffer_append_int32(buffer, (int32_t)(rotor_pos * 100000.0), &index);
 8018722:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018758 <commands_send_rotor_pos+0x38>
 8018726:	ee20 0a27 	vmul.f32	s0, s0, s15
void commands_send_rotor_pos(float rotor_pos) {
 801872a:	b084      	sub	sp, #16
	buffer_append_int32(buffer, (int32_t)(rotor_pos * 100000.0), &index);
 801872c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	buffer[index++] = COMM_ROTOR_POSITION;
 8018730:	2316      	movs	r3, #22
	buffer_append_int32(buffer, (int32_t)(rotor_pos * 100000.0), &index);
 8018732:	ee17 1a90 	vmov	r1, s15
 8018736:	a802      	add	r0, sp, #8
	buffer[index++] = COMM_ROTOR_POSITION;
 8018738:	2401      	movs	r4, #1
	buffer_append_int32(buffer, (int32_t)(rotor_pos * 100000.0), &index);
 801873a:	aa01      	add	r2, sp, #4
	buffer[index++] = COMM_ROTOR_POSITION;
 801873c:	f88d 3008 	strb.w	r3, [sp, #8]
 8018740:	9401      	str	r4, [sp, #4]
	buffer_append_int32(buffer, (int32_t)(rotor_pos * 100000.0), &index);
 8018742:	f7f9 fa05 	bl	8011b50 <buffer_append_int32>
	if (send_func) {
 8018746:	4b05      	ldr	r3, [pc, #20]	; (801875c <commands_send_rotor_pos+0x3c>)
	commands_send_packet(buffer, index);
 8018748:	9901      	ldr	r1, [sp, #4]
	if (send_func) {
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	b10b      	cbz	r3, 8018752 <commands_send_rotor_pos+0x32>
		send_func(data, len);
 801874e:	a802      	add	r0, sp, #8
 8018750:	4798      	blx	r3
}
 8018752:	b004      	add	sp, #16
 8018754:	bd10      	pop	{r4, pc}
 8018756:	bf00      	nop
 8018758:	47c35000 	.word	0x47c35000
 801875c:	200094e8 	.word	0x200094e8

08018760 <commands_get_disp_pos_mode>:
	return display_position_mode;
 8018760:	4b01      	ldr	r3, [pc, #4]	; (8018768 <commands_get_disp_pos_mode+0x8>)
}
 8018762:	7818      	ldrb	r0, [r3, #0]
 8018764:	4770      	bx	lr
 8018766:	bf00      	nop
 8018768:	20008cfc 	.word	0x20008cfc
 801876c:	00000000 	.word	0x00000000

08018770 <commands_send_appconf>:
void commands_send_appconf(COMM_PACKET_ID packet_id, app_configuration *appconf) {
 8018770:	b5f0      	push	{r4, r5, r6, r7, lr}
	send_buffer[ind++] = packet_id;
 8018772:	4dae      	ldr	r5, [pc, #696]	; (8018a2c <commands_send_appconf+0x2bc>)
void commands_send_appconf(COMM_PACKET_ID packet_id, app_configuration *appconf) {
 8018774:	b083      	sub	sp, #12
	send_buffer[ind++] = appconf->controller_id;
 8018776:	ae02      	add	r6, sp, #8
	send_buffer[ind++] = packet_id;
 8018778:	7028      	strb	r0, [r5, #0]
	send_buffer[ind++] = appconf->controller_id;
 801877a:	2202      	movs	r2, #2
 801877c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018780:	780b      	ldrb	r3, [r1, #0]
 8018782:	706b      	strb	r3, [r5, #1]
void commands_send_appconf(COMM_PACKET_ID packet_id, app_configuration *appconf) {
 8018784:	460c      	mov	r4, r1
	buffer_append_uint32(send_buffer, appconf->timeout_msec, &ind);
 8018786:	4632      	mov	r2, r6
 8018788:	6849      	ldr	r1, [r1, #4]
 801878a:	4628      	mov	r0, r5
 801878c:	f7f9 f9f8 	bl	8011b80 <buffer_append_uint32>
	buffer_append_float32_auto(send_buffer, appconf->timeout_brake_current, &ind);
 8018790:	4631      	mov	r1, r6
 8018792:	ed94 0a02 	vldr	s0, [r4, #8]
 8018796:	4628      	mov	r0, r5
 8018798:	f7f9 fa32 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->send_can_status;
 801879c:	9b01      	ldr	r3, [sp, #4]
 801879e:	7b22      	ldrb	r2, [r4, #12]
 80187a0:	54ea      	strb	r2, [r5, r3]
	buffer_append_uint16(send_buffer, appconf->send_can_status_rate_hz, &ind);
 80187a2:	4628      	mov	r0, r5
	send_buffer[ind++] = appconf->send_can_status;
 80187a4:	3301      	adds	r3, #1
	buffer_append_uint16(send_buffer, appconf->send_can_status_rate_hz, &ind);
 80187a6:	4632      	mov	r2, r6
 80187a8:	8a21      	ldrh	r1, [r4, #16]
	send_buffer[ind++] = appconf->send_can_status;
 80187aa:	9301      	str	r3, [sp, #4]
	buffer_append_uint16(send_buffer, appconf->send_can_status_rate_hz, &ind);
 80187ac:	f7f9 f9c0 	bl	8011b30 <buffer_append_uint16>
	send_buffer[ind++] = appconf->app_to_use;
 80187b0:	9b01      	ldr	r3, [sp, #4]
 80187b2:	7d22      	ldrb	r2, [r4, #20]
 80187b4:	54ea      	strb	r2, [r5, r3]
	send_buffer[ind++] = appconf->app_ppm_conf.ctrl_type;
 80187b6:	18ea      	adds	r2, r5, r3
 80187b8:	7e21      	ldrb	r1, [r4, #24]
 80187ba:	7051      	strb	r1, [r2, #1]
 80187bc:	3302      	adds	r3, #2
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.pid_max_erpm, &ind);
 80187be:	4631      	mov	r1, r6
 80187c0:	ed94 0a07 	vldr	s0, [r4, #28]
	send_buffer[ind++] = appconf->app_ppm_conf.ctrl_type;
 80187c4:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.pid_max_erpm, &ind);
 80187c6:	4628      	mov	r0, r5
 80187c8:	f7f9 fa1a 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.hyst, &ind);
 80187cc:	4631      	mov	r1, r6
 80187ce:	ed94 0a08 	vldr	s0, [r4, #32]
 80187d2:	4628      	mov	r0, r5
 80187d4:	f7f9 fa14 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.pulse_start, &ind);
 80187d8:	4631      	mov	r1, r6
 80187da:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80187de:	4628      	mov	r0, r5
 80187e0:	f7f9 fa0e 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.pulse_end, &ind);
 80187e4:	4631      	mov	r1, r6
 80187e6:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80187ea:	4628      	mov	r0, r5
 80187ec:	f7f9 fa08 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.pulse_center, &ind);
 80187f0:	4631      	mov	r1, r6
 80187f2:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80187f6:	4628      	mov	r0, r5
 80187f8:	f7f9 fa02 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_ppm_conf.median_filter;
 80187fc:	9b01      	ldr	r3, [sp, #4]
 80187fe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8018802:	54ea      	strb	r2, [r5, r3]
	send_buffer[ind++] = appconf->app_ppm_conf.safe_start;
 8018804:	18ea      	adds	r2, r5, r3
 8018806:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801880a:	7051      	strb	r1, [r2, #1]
 801880c:	3302      	adds	r3, #2
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.throttle_exp, &ind);
 801880e:	4631      	mov	r1, r6
 8018810:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
	send_buffer[ind++] = appconf->app_ppm_conf.safe_start;
 8018814:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.throttle_exp, &ind);
 8018816:	4628      	mov	r0, r5
 8018818:	f7f9 f9f2 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.throttle_exp_brake, &ind);
 801881c:	4631      	mov	r1, r6
 801881e:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8018822:	4628      	mov	r0, r5
 8018824:	f7f9 f9ec 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_ppm_conf.throttle_exp_mode;
 8018828:	9b01      	ldr	r3, [sp, #4]
 801882a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 801882e:	54ea      	strb	r2, [r5, r3]
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.ramp_time_pos, &ind);
 8018830:	4631      	mov	r1, r6
	send_buffer[ind++] = appconf->app_ppm_conf.throttle_exp_mode;
 8018832:	3301      	adds	r3, #1
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.ramp_time_pos, &ind);
 8018834:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
	send_buffer[ind++] = appconf->app_ppm_conf.throttle_exp_mode;
 8018838:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.ramp_time_pos, &ind);
 801883a:	4628      	mov	r0, r5
 801883c:	f7f9 f9e0 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.ramp_time_neg, &ind);
 8018840:	4631      	mov	r1, r6
 8018842:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
 8018846:	4628      	mov	r0, r5
 8018848:	f7f9 f9da 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_ppm_conf.multi_esc;
 801884c:	9b01      	ldr	r3, [sp, #4]
 801884e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8018852:	54ea      	strb	r2, [r5, r3]
	send_buffer[ind++] = appconf->app_ppm_conf.tc;
 8018854:	18ea      	adds	r2, r5, r3
 8018856:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 801885a:	7051      	strb	r1, [r2, #1]
 801885c:	3302      	adds	r3, #2
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.tc_max_diff, &ind);
 801885e:	4631      	mov	r1, r6
 8018860:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
	send_buffer[ind++] = appconf->app_ppm_conf.tc;
 8018864:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_ppm_conf.tc_max_diff, &ind);
 8018866:	4628      	mov	r0, r5
 8018868:	f7f9 f9ca 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_adc_conf.ctrl_type;
 801886c:	9b01      	ldr	r3, [sp, #4]
 801886e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8018872:	54ea      	strb	r2, [r5, r3]
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.hyst, &ind);
 8018874:	4631      	mov	r1, r6
	send_buffer[ind++] = appconf->app_adc_conf.ctrl_type;
 8018876:	3301      	adds	r3, #1
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.hyst, &ind);
 8018878:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
	send_buffer[ind++] = appconf->app_adc_conf.ctrl_type;
 801887c:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.hyst, &ind);
 801887e:	4628      	mov	r0, r5
 8018880:	f7f9 f9be 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.voltage_start, &ind);
 8018884:	4631      	mov	r1, r6
 8018886:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 801888a:	4628      	mov	r0, r5
 801888c:	f7f9 f9b8 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.voltage_end, &ind);
 8018890:	4631      	mov	r1, r6
 8018892:	ed94 0a17 	vldr	s0, [r4, #92]	; 0x5c
 8018896:	4628      	mov	r0, r5
 8018898:	f7f9 f9b2 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.voltage_center, &ind);
 801889c:	4631      	mov	r1, r6
 801889e:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80188a2:	4628      	mov	r0, r5
 80188a4:	f7f9 f9ac 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.voltage2_start, &ind);
 80188a8:	4631      	mov	r1, r6
 80188aa:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 80188ae:	4628      	mov	r0, r5
 80188b0:	f7f9 f9a6 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.voltage2_end, &ind);
 80188b4:	4631      	mov	r1, r6
 80188b6:	ed94 0a1a 	vldr	s0, [r4, #104]	; 0x68
 80188ba:	4628      	mov	r0, r5
 80188bc:	f7f9 f9a0 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_adc_conf.use_filter;
 80188c0:	9b01      	ldr	r3, [sp, #4]
 80188c2:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80188c6:	54ea      	strb	r2, [r5, r3]
	send_buffer[ind++] = appconf->app_adc_conf.safe_start;
 80188c8:	18ea      	adds	r2, r5, r3
 80188ca:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 80188ce:	7051      	strb	r1, [r2, #1]
	send_buffer[ind++] = appconf->app_adc_conf.cc_button_inverted;
 80188d0:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
 80188d4:	7091      	strb	r1, [r2, #2]
	send_buffer[ind++] = appconf->app_adc_conf.rev_button_inverted;
 80188d6:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80188da:	70d1      	strb	r1, [r2, #3]
	send_buffer[ind++] = appconf->app_adc_conf.voltage_inverted;
 80188dc:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 80188e0:	7111      	strb	r1, [r2, #4]
	send_buffer[ind++] = appconf->app_adc_conf.voltage2_inverted;
 80188e2:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
 80188e6:	7151      	strb	r1, [r2, #5]
 80188e8:	3306      	adds	r3, #6
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.throttle_exp, &ind);
 80188ea:	4631      	mov	r1, r6
 80188ec:	ed94 0a1d 	vldr	s0, [r4, #116]	; 0x74
	send_buffer[ind++] = appconf->app_adc_conf.voltage2_inverted;
 80188f0:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.throttle_exp, &ind);
 80188f2:	4628      	mov	r0, r5
 80188f4:	f7f9 f984 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.throttle_exp_brake, &ind);
 80188f8:	4631      	mov	r1, r6
 80188fa:	ed94 0a1e 	vldr	s0, [r4, #120]	; 0x78
 80188fe:	4628      	mov	r0, r5
 8018900:	f7f9 f97e 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_adc_conf.throttle_exp_mode;
 8018904:	9b01      	ldr	r3, [sp, #4]
 8018906:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 801890a:	54ea      	strb	r2, [r5, r3]
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.ramp_time_pos, &ind);
 801890c:	4631      	mov	r1, r6
	send_buffer[ind++] = appconf->app_adc_conf.throttle_exp_mode;
 801890e:	3301      	adds	r3, #1
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.ramp_time_pos, &ind);
 8018910:	ed94 0a20 	vldr	s0, [r4, #128]	; 0x80
	send_buffer[ind++] = appconf->app_adc_conf.throttle_exp_mode;
 8018914:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.ramp_time_pos, &ind);
 8018916:	4628      	mov	r0, r5
 8018918:	f7f9 f972 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.ramp_time_neg, &ind);
 801891c:	4631      	mov	r1, r6
 801891e:	ed94 0a21 	vldr	s0, [r4, #132]	; 0x84
 8018922:	4628      	mov	r0, r5
 8018924:	f7f9 f96c 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_adc_conf.multi_esc;
 8018928:	9b01      	ldr	r3, [sp, #4]
 801892a:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 801892e:	54ea      	strb	r2, [r5, r3]
	send_buffer[ind++] = appconf->app_adc_conf.tc;
 8018930:	18ea      	adds	r2, r5, r3
 8018932:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 8018936:	7051      	strb	r1, [r2, #1]
 8018938:	3302      	adds	r3, #2
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.tc_max_diff, &ind);
 801893a:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
	send_buffer[ind++] = appconf->app_adc_conf.tc;
 801893e:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_adc_conf.tc_max_diff, &ind);
 8018940:	4631      	mov	r1, r6
 8018942:	4628      	mov	r0, r5
 8018944:	f7f9 f95c 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_uint16(send_buffer, appconf->app_adc_conf.update_rate_hz, &ind);
 8018948:	4632      	mov	r2, r6
 801894a:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 801894e:	4628      	mov	r0, r5
 8018950:	f7f9 f8ee 	bl	8011b30 <buffer_append_uint16>
	buffer_append_uint32(send_buffer, appconf->app_uart_baudrate, &ind);
 8018954:	4632      	mov	r2, r6
 8018956:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801895a:	4628      	mov	r0, r5
 801895c:	f7f9 f910 	bl	8011b80 <buffer_append_uint32>
	send_buffer[ind++] = appconf->app_chuk_conf.ctrl_type;
 8018960:	9b01      	ldr	r3, [sp, #4]
 8018962:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
 8018966:	54ea      	strb	r2, [r5, r3]
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.hyst, &ind);
 8018968:	4631      	mov	r1, r6
	send_buffer[ind++] = appconf->app_chuk_conf.ctrl_type;
 801896a:	3301      	adds	r3, #1
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.hyst, &ind);
 801896c:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
	send_buffer[ind++] = appconf->app_chuk_conf.ctrl_type;
 8018970:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.hyst, &ind);
 8018972:	4628      	mov	r0, r5
 8018974:	f7f9 f944 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.ramp_time_pos, &ind);
 8018978:	4631      	mov	r1, r6
 801897a:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 801897e:	4628      	mov	r0, r5
 8018980:	f7f9 f93e 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.ramp_time_neg, &ind);
 8018984:	4631      	mov	r1, r6
 8018986:	ed94 0a29 	vldr	s0, [r4, #164]	; 0xa4
 801898a:	4628      	mov	r0, r5
 801898c:	f7f9 f938 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.stick_erpm_per_s_in_cc, &ind);
 8018990:	4631      	mov	r1, r6
 8018992:	ed94 0a2a 	vldr	s0, [r4, #168]	; 0xa8
 8018996:	4628      	mov	r0, r5
 8018998:	f7f9 f932 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.throttle_exp, &ind);
 801899c:	4631      	mov	r1, r6
 801899e:	ed94 0a2b 	vldr	s0, [r4, #172]	; 0xac
 80189a2:	4628      	mov	r0, r5
 80189a4:	f7f9 f92c 	bl	8011c00 <buffer_append_float32_auto>
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.throttle_exp_brake, &ind);
 80189a8:	4631      	mov	r1, r6
 80189aa:	ed94 0a2c 	vldr	s0, [r4, #176]	; 0xb0
 80189ae:	4628      	mov	r0, r5
 80189b0:	f7f9 f926 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_chuk_conf.throttle_exp_mode;
 80189b4:	9b01      	ldr	r3, [sp, #4]
 80189b6:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80189ba:	54ea      	strb	r2, [r5, r3]
	send_buffer[ind++] = appconf->app_chuk_conf.multi_esc;
 80189bc:	18ea      	adds	r2, r5, r3
 80189be:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 80189c2:	7051      	strb	r1, [r2, #1]
	send_buffer[ind++] = appconf->app_chuk_conf.tc;
 80189c4:	f894 10b6 	ldrb.w	r1, [r4, #182]	; 0xb6
 80189c8:	7091      	strb	r1, [r2, #2]
 80189ca:	3303      	adds	r3, #3
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.tc_max_diff, &ind);
 80189cc:	4631      	mov	r1, r6
 80189ce:	4628      	mov	r0, r5
 80189d0:	ed94 0a2e 	vldr	s0, [r4, #184]	; 0xb8
	send_buffer[ind++] = appconf->app_chuk_conf.tc;
 80189d4:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(send_buffer, appconf->app_chuk_conf.tc_max_diff, &ind);
 80189d6:	f7f9 f913 	bl	8011c00 <buffer_append_float32_auto>
	send_buffer[ind++] = appconf->app_nrf_conf.speed;
 80189da:	9901      	ldr	r1, [sp, #4]
 80189dc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80189e0:	546b      	strb	r3, [r5, r1]
	send_buffer[ind++] = appconf->app_nrf_conf.power;
 80189e2:	186b      	adds	r3, r5, r1
 80189e4:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
 80189e8:	705a      	strb	r2, [r3, #1]
	send_buffer[ind++] = appconf->app_nrf_conf.crc_type;
 80189ea:	f894 20be 	ldrb.w	r2, [r4, #190]	; 0xbe
 80189ee:	709a      	strb	r2, [r3, #2]
	send_buffer[ind++] = appconf->app_nrf_conf.retry_delay;
 80189f0:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf
 80189f4:	70da      	strb	r2, [r3, #3]
	send_buffer[ind++] = appconf->app_nrf_conf.retries;
 80189f6:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 80189fa:	711a      	strb	r2, [r3, #4]
	send_buffer[ind++] = appconf->app_nrf_conf.channel;
 80189fc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
 8018a00:	715a      	strb	r2, [r3, #5]
	memcpy(send_buffer + ind, appconf->app_nrf_conf.address, 3);
 8018a02:	4620      	mov	r0, r4
	send_buffer[ind++] = appconf->app_nrf_conf.channel;
 8018a04:	1d8a      	adds	r2, r1, #6
	memcpy(send_buffer + ind, appconf->app_nrf_conf.address, 3);
 8018a06:	f830 7fc2 	ldrh.w	r7, [r0, #194]!
	if (send_func) {
 8018a0a:	4e09      	ldr	r6, [pc, #36]	; (8018a30 <commands_send_appconf+0x2c0>)
	memcpy(send_buffer + ind, appconf->app_nrf_conf.address, 3);
 8018a0c:	7880      	ldrb	r0, [r0, #2]
 8018a0e:	52af      	strh	r7, [r5, r2]
 8018a10:	442a      	add	r2, r5
	if (send_func) {
 8018a12:	6836      	ldr	r6, [r6, #0]
	memcpy(send_buffer + ind, appconf->app_nrf_conf.address, 3);
 8018a14:	7090      	strb	r0, [r2, #2]
	send_buffer[ind++] = appconf->app_nrf_conf.send_crc_ack;
 8018a16:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
 8018a1a:	725a      	strb	r2, [r3, #9]
 8018a1c:	310a      	adds	r1, #10
 8018a1e:	9101      	str	r1, [sp, #4]
	if (send_func) {
 8018a20:	b10e      	cbz	r6, 8018a26 <commands_send_appconf+0x2b6>
		send_func(data, len);
 8018a22:	4628      	mov	r0, r5
 8018a24:	47b0      	blx	r6
}
 8018a26:	b003      	add	sp, #12
 8018a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	200090e8 	.word	0x200090e8
 8018a30:	200094e8 	.word	0x200094e8
	...

08018a40 <commands_process_packet>:
	if (!len) {
 8018a40:	2900      	cmp	r1, #0
 8018a42:	f000 808b 	beq.w	8018b5c <commands_process_packet+0x11c>
void commands_process_packet(unsigned char *data, unsigned int len) {
 8018a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a4a:	ed2d 8b04 	vpush	{d8-d9}
	packet_id = data[0];
 8018a4e:	4604      	mov	r4, r0
void commands_process_packet(unsigned char *data, unsigned int len) {
 8018a50:	b0b6      	sub	sp, #216	; 0xd8
	packet_id = data[0];
 8018a52:	f814 8b01 	ldrb.w	r8, [r4], #1
	int32_t ind = 0;
 8018a56:	2300      	movs	r3, #0
 8018a58:	4607      	mov	r7, r0
 8018a5a:	9302      	str	r3, [sp, #8]
	len--;
 8018a5c:	1e4d      	subs	r5, r1, #1
	switch (packet_id) {
 8018a5e:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 8018a62:	d876      	bhi.n	8018b52 <commands_process_packet+0x112>
 8018a64:	e8df f018 	tbh	[pc, r8, lsl #1]
 8018a68:	0ab708f6 	.word	0x0ab708f6
 8018a6c:	0a840aa1 	.word	0x0a840aa1
 8018a70:	0acd09cd 	.word	0x0acd09cd
 8018a74:	0adf0abb 	.word	0x0adf0abb
 8018a78:	08d608e8 	.word	0x08d608e8
 8018a7c:	007b08ca 	.word	0x007b08ca
 8018a80:	05f20075 	.word	0x05f20075
 8018a84:	03c403c4 	.word	0x03c403c4
 8018a88:	01f2020e 	.word	0x01f2020e
 8018a8c:	01e101f2 	.word	0x01e101f2
 8018a90:	007501db 	.word	0x007501db
 8018a94:	00750075 	.word	0x00750075
 8018a98:	002601b6 	.word	0x002601b6
 8018a9c:	00e80153 	.word	0x00e80153
 8018aa0:	00950097 	.word	0x00950097
 8018aa4:	09af0092 	.word	0x09af0092
 8018aa8:	095d097a 	.word	0x095d097a
 8018aac:	092f0955 	.word	0x092f0955
 8018ab0:	09140927 	.word	0x09140927
		mcconf = *mc_interface_get_configuration();
 8018ab4:	f002 fcc4 	bl	801b440 <mc_interface_get_configuration>
 8018ab8:	4cb9      	ldr	r4, [pc, #740]	; (8018da0 <commands_process_packet+0x360>)
		send_func_last = send_func;
 8018aba:	4dba      	ldr	r5, [pc, #744]	; (8018da4 <commands_process_packet+0x364>)
		float r = 0.0;
 8018abc:	ed9f 8aba 	vldr	s16, [pc, #744]	; 8018da8 <commands_process_packet+0x368>
		send_func_last = send_func;
 8018ac0:	4eba      	ldr	r6, [pc, #744]	; (8018dac <commands_process_packet+0x36c>)
		mcconf = *mc_interface_get_configuration();
 8018ac2:	4601      	mov	r1, r0
 8018ac4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f7f4 f821 	bl	800cb10 <memcpy>
		mcconf_old = mcconf;
 8018ace:	4621      	mov	r1, r4
 8018ad0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018ad4:	48b6      	ldr	r0, [pc, #728]	; (8018db0 <commands_process_packet+0x370>)
 8018ad6:	f7f4 f81b 	bl	800cb10 <memcpy>
		mcconf.motor_type = MOTOR_TYPE_FOC;
 8018ada:	2202      	movs	r2, #2
		mc_interface_set_configuration(&mcconf);
 8018adc:	4620      	mov	r0, r4
		send_func_last = send_func;
 8018ade:	682b      	ldr	r3, [r5, #0]
		mcconf.motor_type = MOTOR_TYPE_FOC;
 8018ae0:	70a2      	strb	r2, [r4, #2]
		send_func_last = send_func;
 8018ae2:	6033      	str	r3, [r6, #0]
		mc_interface_set_configuration(&mcconf);
 8018ae4:	f003 f9fc 	bl	801bee0 <mc_interface_set_configuration>
		float l = 0.0;
 8018ae8:	a936      	add	r1, sp, #216	; 0xd8
 8018aea:	ee18 3a10 	vmov	r3, s16
		bool res = mcpwm_foc_measure_res_ind(&r, &l);
 8018aee:	a803      	add	r0, sp, #12
		float l = 0.0;
 8018af0:	f841 3dc8 	str.w	r3, [r1, #-200]!
		float r = 0.0;
 8018af4:	ed8d 8a03 	vstr	s16, [sp, #12]
		bool res = mcpwm_foc_measure_res_ind(&r, &l);
 8018af8:	f005 fe9a 	bl	801e830 <mcpwm_foc_measure_res_ind>
 8018afc:	4604      	mov	r4, r0
		mc_interface_set_configuration(&mcconf_old);
 8018afe:	48ac      	ldr	r0, [pc, #688]	; (8018db0 <commands_process_packet+0x370>)
 8018b00:	f003 f9ee 	bl	801bee0 <mc_interface_set_configuration>
		if (!res) {
 8018b04:	2c00      	cmp	r4, #0
 8018b06:	f041 82a0 	bne.w	801a04a <commands_process_packet+0x160a>
			l = 0.0;
 8018b0a:	eeb0 0a48 	vmov.f32	s0, s16
			r = 0.0;
 8018b0e:	ed8d 8a03 	vstr	s16, [sp, #12]
			l = 0.0;
 8018b12:	ed8d 8a04 	vstr	s16, [sp, #16]
		send_buffer[ind++] = COMM_DETECT_MOTOR_R_L;
 8018b16:	af36      	add	r7, sp, #216	; 0xd8
 8018b18:	2301      	movs	r3, #1
 8018b1a:	f847 3dd0 	str.w	r3, [r7, #-208]!
 8018b1e:	4ca5      	ldr	r4, [pc, #660]	; (8018db4 <commands_process_packet+0x374>)
		buffer_append_float32(send_buffer, r, 1e6, &ind);
 8018b20:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8018db8 <commands_process_packet+0x378>
		send_buffer[ind++] = COMM_DETECT_MOTOR_R_L;
 8018b24:	2319      	movs	r3, #25
		buffer_append_float32(send_buffer, r, 1e6, &ind);
 8018b26:	4639      	mov	r1, r7
 8018b28:	4620      	mov	r0, r4
		send_buffer[ind++] = COMM_DETECT_MOTOR_R_L;
 8018b2a:	7023      	strb	r3, [r4, #0]
		buffer_append_float32(send_buffer, r, 1e6, &ind);
 8018b2c:	f7f9 f858 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, l, 1e3, &ind);
 8018b30:	4639      	mov	r1, r7
 8018b32:	4620      	mov	r0, r4
 8018b34:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8018dd0 <commands_process_packet+0x390>
 8018b38:	ed9d 0a04 	vldr	s0, [sp, #16]
 8018b3c:	f7f9 f850 	bl	8011be0 <buffer_append_float32>
		if (send_func_last) {
 8018b40:	6833      	ldr	r3, [r6, #0]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	f040 8128 	bne.w	8018d98 <commands_process_packet+0x358>
	if (send_func) {
 8018b48:	682b      	ldr	r3, [r5, #0]
			commands_send_packet(send_buffer, ind);
 8018b4a:	9902      	ldr	r1, [sp, #8]
	if (send_func) {
 8018b4c:	b10b      	cbz	r3, 8018b52 <commands_process_packet+0x112>
			appdata_func(data, len);
 8018b4e:	4620      	mov	r0, r4
 8018b50:	4798      	blx	r3
}
 8018b52:	b036      	add	sp, #216	; 0xd8
 8018b54:	ecbd 8b04 	vpop	{d8-d9}
 8018b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b5c:	4770      	bx	lr
		mcconf = *mc_interface_get_configuration();
 8018b5e:	f002 fc6f 	bl	801b440 <mc_interface_get_configuration>
 8018b62:	4b8f      	ldr	r3, [pc, #572]	; (8018da0 <commands_process_packet+0x360>)
 8018b64:	4601      	mov	r1, r0
 8018b66:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7f3 ffd0 	bl	800cb10 <memcpy>
		display_position_mode = data[ind++];
 8018b70:	4992      	ldr	r1, [pc, #584]	; (8018dbc <commands_process_packet+0x37c>)
 8018b72:	787b      	ldrb	r3, [r7, #1]
		if (mcconf.motor_type == MOTOR_TYPE_BLDC) {
 8018b74:	7882      	ldrb	r2, [r0, #2]
		display_position_mode = data[ind++];
 8018b76:	700b      	strb	r3, [r1, #0]
 8018b78:	2101      	movs	r1, #1
 8018b7a:	9102      	str	r1, [sp, #8]
		if (mcconf.motor_type == MOTOR_TYPE_BLDC) {
 8018b7c:	b932      	cbnz	r2, 8018b8c <commands_process_packet+0x14c>
			if (display_position_mode == DISP_POS_MODE_NONE) {
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	f001 827f 	beq.w	801a082 <commands_process_packet+0x1642>
			} else if (display_position_mode == DISP_POS_MODE_INDUCTANCE) {
 8018b84:	2b01      	cmp	r3, #1
 8018b86:	d101      	bne.n	8018b8c <commands_process_packet+0x14c>
				mcpwm_set_detect();
 8018b88:	f7fb fac2 	bl	8014110 <mcpwm_set_detect>
		timeout_reset();
 8018b8c:	f001 fb40 	bl	801a210 <timeout_reset>
		break;
 8018b90:	e7df      	b.n	8018b52 <commands_process_packet+0x112>
  __ASM volatile ("cpsid i" : : : "memory");
 8018b92:	b672      	cpsid	i
 8018b94:	e7fe      	b.n	8018b94 <commands_process_packet+0x154>
		mcconf = *mc_interface_get_configuration();
 8018b96:	f002 fc53 	bl	801b440 <mc_interface_get_configuration>
 8018b9a:	4d81      	ldr	r5, [pc, #516]	; (8018da0 <commands_process_packet+0x360>)
 8018b9c:	4601      	mov	r1, r0
 8018b9e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018ba2:	4628      	mov	r0, r5
 8018ba4:	f7f3 ffb4 	bl	800cb10 <memcpy>
		if (mcconf.m_sensor_port_mode == SENSOR_PORT_MODE_HALL) {
 8018ba8:	f895 815c 	ldrb.w	r8, [r5, #348]	; 0x15c
 8018bac:	f1b8 0f00 	cmp.w	r8, #0
 8018bb0:	f041 829d 	bne.w	801a0ee <commands_process_packet+0x16ae>
			mcconf_old = mcconf;
 8018bb4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018bb8:	4629      	mov	r1, r5
 8018bba:	487d      	ldr	r0, [pc, #500]	; (8018db0 <commands_process_packet+0x370>)
			send_func_last = send_func;
 8018bbc:	4e79      	ldr	r6, [pc, #484]	; (8018da4 <commands_process_packet+0x364>)
 8018bbe:	4f7b      	ldr	r7, [pc, #492]	; (8018dac <commands_process_packet+0x36c>)
			mcconf_old = mcconf;
 8018bc0:	f7f3 ffa6 	bl	800cb10 <memcpy>
			ind = 0;
 8018bc4:	a936      	add	r1, sp, #216	; 0xd8
			float current = buffer_get_float32(data, 1e3, &ind);
 8018bc6:	4620      	mov	r0, r4
			ind = 0;
 8018bc8:	f841 8dd0 	str.w	r8, [r1, #-208]!
			float current = buffer_get_float32(data, 1e3, &ind);
 8018bcc:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8018dd0 <commands_process_packet+0x390>
			mcconf.foc_f_sw = 10000.0;
 8018bd0:	4c7b      	ldr	r4, [pc, #492]	; (8018dc0 <commands_process_packet+0x380>)
			float current = buffer_get_float32(data, 1e3, &ind);
 8018bd2:	f7f9 f8a5 	bl	8011d20 <buffer_get_float32>
			send_func_last = send_func;
 8018bd6:	6833      	ldr	r3, [r6, #0]
			mcconf.foc_current_kp = 0.01;
 8018bd8:	497a      	ldr	r1, [pc, #488]	; (8018dc4 <commands_process_packet+0x384>)
			send_func_last = send_func;
 8018bda:	603b      	str	r3, [r7, #0]
			mcconf.motor_type = MOTOR_TYPE_FOC;
 8018bdc:	2202      	movs	r2, #2
			mcconf.foc_current_ki = 10.0;
 8018bde:	4b7a      	ldr	r3, [pc, #488]	; (8018dc8 <commands_process_packet+0x388>)
			mcconf.foc_current_kp = 0.01;
 8018be0:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
			mc_interface_set_configuration(&mcconf);
 8018be4:	4628      	mov	r0, r5
			float current = buffer_get_float32(data, 1e3, &ind);
 8018be6:	eeb0 8a40 	vmov.f32	s16, s0
			mcconf.motor_type = MOTOR_TYPE_FOC;
 8018bea:	70aa      	strb	r2, [r5, #2]
			mcconf.foc_current_ki = 10.0;
 8018bec:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
			mcconf.foc_f_sw = 10000.0;
 8018bf0:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
			mc_interface_set_configuration(&mcconf);
 8018bf4:	f003 f974 	bl	801bee0 <mc_interface_set_configuration>
			bool res = mcpwm_foc_hall_detect(current, hall_tab);
 8018bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8018bfc:	a804      	add	r0, sp, #16
 8018bfe:	f005 ff17 	bl	801ea30 <mcpwm_foc_hall_detect>
 8018c02:	4604      	mov	r4, r0
			mc_interface_set_configuration(&mcconf_old);
 8018c04:	486a      	ldr	r0, [pc, #424]	; (8018db0 <commands_process_packet+0x370>)
 8018c06:	f003 f96b 	bl	801bee0 <mc_interface_set_configuration>
			send_buffer[ind++] = COMM_DETECT_HALL_FOC;
 8018c0a:	4a6a      	ldr	r2, [pc, #424]	; (8018db4 <commands_process_packet+0x374>)
			if (send_func_last) {
 8018c0c:	683f      	ldr	r7, [r7, #0]
			send_buffer[ind++] = COMM_DETECT_HALL_FOC;
 8018c0e:	4615      	mov	r5, r2
			memcpy(send_buffer + ind, hall_tab, 8);
 8018c10:	ab04      	add	r3, sp, #16
 8018c12:	cb03      	ldmia	r3!, {r0, r1}
			send_buffer[ind++] = COMM_DETECT_HALL_FOC;
 8018c14:	231c      	movs	r3, #28
 8018c16:	f805 3b01 	strb.w	r3, [r5], #1
			send_buffer[ind++] = res ? 0 : 1;
 8018c1a:	f084 0401 	eor.w	r4, r4, #1
 8018c1e:	230a      	movs	r3, #10
			memcpy(send_buffer + ind, hall_tab, 8);
 8018c20:	f8c2 0001 	str.w	r0, [r2, #1]
			send_buffer[ind++] = res ? 0 : 1;
 8018c24:	9302      	str	r3, [sp, #8]
			memcpy(send_buffer + ind, hall_tab, 8);
 8018c26:	6069      	str	r1, [r5, #4]
			send_buffer[ind++] = res ? 0 : 1;
 8018c28:	7254      	strb	r4, [r2, #9]
			if (send_func_last) {
 8018c2a:	2f00      	cmp	r7, #0
 8018c2c:	f001 8256 	beq.w	801a0dc <commands_process_packet+0x169c>
				send_func_last(send_buffer, ind);
 8018c30:	4619      	mov	r1, r3
 8018c32:	4610      	mov	r0, r2
 8018c34:	47b8      	blx	r7
 8018c36:	e78c      	b.n	8018b52 <commands_process_packet+0x112>
		if (encoder_is_configured()) {
 8018c38:	f002 f852 	bl	801ace0 <encoder_is_configured>
 8018c3c:	4606      	mov	r6, r0
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	f001 822a 	beq.w	801a098 <commands_process_packet+0x1658>
			mcconf = *mc_interface_get_configuration();
 8018c44:	f002 fbfc 	bl	801b440 <mc_interface_get_configuration>
 8018c48:	4d55      	ldr	r5, [pc, #340]	; (8018da0 <commands_process_packet+0x360>)
			send_func_last = send_func;
 8018c4a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8018da4 <commands_process_packet+0x364>
 8018c4e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8018dac <commands_process_packet+0x36c>
			send_buffer[ind++] = COMM_DETECT_ENCODER;
 8018c52:	4e58      	ldr	r6, [pc, #352]	; (8018db4 <commands_process_packet+0x374>)
			ind = 0;
 8018c54:	af36      	add	r7, sp, #216	; 0xd8
			mcconf = *mc_interface_get_configuration();
 8018c56:	4601      	mov	r1, r0
 8018c58:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018c5c:	4628      	mov	r0, r5
 8018c5e:	f7f3 ff57 	bl	800cb10 <memcpy>
			ind = 0;
 8018c62:	f04f 0a00 	mov.w	sl, #0
			mcconf_old = mcconf;
 8018c66:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8018c6a:	4629      	mov	r1, r5
 8018c6c:	4850      	ldr	r0, [pc, #320]	; (8018db0 <commands_process_packet+0x370>)
 8018c6e:	f7f3 ff4f 	bl	800cb10 <memcpy>
			ind = 0;
 8018c72:	f847 add0 	str.w	sl, [r7, #-208]!
			float current = buffer_get_float32(data, 1e3, &ind);
 8018c76:	4620      	mov	r0, r4
			send_func_last = send_func;
 8018c78:	f8d8 3000 	ldr.w	r3, [r8]
			float current = buffer_get_float32(data, 1e3, &ind);
 8018c7c:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8018dd0 <commands_process_packet+0x390>
			send_func_last = send_func;
 8018c80:	f8c9 3000 	str.w	r3, [r9]
			float current = buffer_get_float32(data, 1e3, &ind);
 8018c84:	4639      	mov	r1, r7
 8018c86:	f7f9 f84b 	bl	8011d20 <buffer_get_float32>
			mcconf.foc_f_sw = 10000.0;
 8018c8a:	4b4d      	ldr	r3, [pc, #308]	; (8018dc0 <commands_process_packet+0x380>)
			mcconf.foc_current_kp = 0.01;
 8018c8c:	4a4d      	ldr	r2, [pc, #308]	; (8018dc4 <commands_process_packet+0x384>)
			mcconf.foc_f_sw = 10000.0;
 8018c8e:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
			mcconf.motor_type = MOTOR_TYPE_FOC;
 8018c92:	2102      	movs	r1, #2
			mcconf.foc_current_ki = 10.0;
 8018c94:	4b4c      	ldr	r3, [pc, #304]	; (8018dc8 <commands_process_packet+0x388>)
			mcconf.motor_type = MOTOR_TYPE_FOC;
 8018c96:	70a9      	strb	r1, [r5, #2]
			mc_interface_set_configuration(&mcconf);
 8018c98:	4628      	mov	r0, r5
			float current = buffer_get_float32(data, 1e3, &ind);
 8018c9a:	eeb0 8a40 	vmov.f32	s16, s0
			mcconf.foc_current_kp = 0.01;
 8018c9e:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
			mcconf.foc_current_ki = 10.0;
 8018ca2:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
			mc_interface_set_configuration(&mcconf);
 8018ca6:	f003 f91b 	bl	801bee0 <mc_interface_set_configuration>
			bool inverted = false;
 8018caa:	ab36      	add	r3, sp, #216	; 0xd8
			mcpwm_foc_encoder_detect(current, false, &offset, &ratio, &inverted);
 8018cac:	eeb0 0a48 	vmov.f32	s0, s16
			bool inverted = false;
 8018cb0:	f803 add1 	strb.w	sl, [r3, #-209]!
			mcpwm_foc_encoder_detect(current, false, &offset, &ratio, &inverted);
 8018cb4:	aa04      	add	r2, sp, #16
 8018cb6:	a903      	add	r1, sp, #12
			float offset = 0.0;
 8018cb8:	2400      	movs	r4, #0
			mcpwm_foc_encoder_detect(current, false, &offset, &ratio, &inverted);
 8018cba:	4650      	mov	r0, sl
			float offset = 0.0;
 8018cbc:	9403      	str	r4, [sp, #12]
			float ratio = 0.0;
 8018cbe:	9404      	str	r4, [sp, #16]
			mcpwm_foc_encoder_detect(current, false, &offset, &ratio, &inverted);
 8018cc0:	f005 f996 	bl	801dff0 <mcpwm_foc_encoder_detect>
			mc_interface_set_configuration(&mcconf_old);
 8018cc4:	483a      	ldr	r0, [pc, #232]	; (8018db0 <commands_process_packet+0x370>)
 8018cc6:	f003 f90b 	bl	801bee0 <mc_interface_set_configuration>
			send_buffer[ind++] = COMM_DETECT_ENCODER;
 8018cca:	221b      	movs	r2, #27
 8018ccc:	2301      	movs	r3, #1
			buffer_append_float32(send_buffer, offset, 1e6, &ind);
 8018cce:	4639      	mov	r1, r7
 8018cd0:	4630      	mov	r0, r6
 8018cd2:	eddf 0a39 	vldr	s1, [pc, #228]	; 8018db8 <commands_process_packet+0x378>
 8018cd6:	ed9d 0a03 	vldr	s0, [sp, #12]
			send_buffer[ind++] = COMM_DETECT_ENCODER;
 8018cda:	7032      	strb	r2, [r6, #0]
 8018cdc:	9302      	str	r3, [sp, #8]
			buffer_append_float32(send_buffer, offset, 1e6, &ind);
 8018cde:	f7f8 ff7f 	bl	8011be0 <buffer_append_float32>
			buffer_append_float32(send_buffer, ratio, 1e6, &ind);
 8018ce2:	4639      	mov	r1, r7
 8018ce4:	4630      	mov	r0, r6
 8018ce6:	eddf 0a34 	vldr	s1, [pc, #208]	; 8018db8 <commands_process_packet+0x378>
 8018cea:	ed9d 0a04 	vldr	s0, [sp, #16]
 8018cee:	f7f8 ff77 	bl	8011be0 <buffer_append_float32>
			send_buffer[ind++] = inverted;
 8018cf2:	9902      	ldr	r1, [sp, #8]
 8018cf4:	f89d 2007 	ldrb.w	r2, [sp, #7]
			if (send_func_last) {
 8018cf8:	f8d9 3000 	ldr.w	r3, [r9]
			send_buffer[ind++] = inverted;
 8018cfc:	5472      	strb	r2, [r6, r1]
 8018cfe:	3101      	adds	r1, #1
 8018d00:	9102      	str	r1, [sp, #8]
			if (send_func_last) {
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	f001 81c1 	beq.w	801a08a <commands_process_packet+0x164a>
		send_func(data, len);
 8018d08:	4630      	mov	r0, r6
 8018d0a:	4798      	blx	r3
 8018d0c:	e721      	b.n	8018b52 <commands_process_packet+0x112>
		float current = buffer_get_float32(data, 1e3, &ind);
 8018d0e:	a902      	add	r1, sp, #8
 8018d10:	4620      	mov	r0, r4
 8018d12:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8018dd0 <commands_process_packet+0x390>
		send_func_last = send_func;
 8018d16:	4d23      	ldr	r5, [pc, #140]	; (8018da4 <commands_process_packet+0x364>)
 8018d18:	4e24      	ldr	r6, [pc, #144]	; (8018dac <commands_process_packet+0x36c>)
		float current = buffer_get_float32(data, 1e3, &ind);
 8018d1a:	f7f9 f801 	bl	8011d20 <buffer_get_float32>
		float min_rpm = buffer_get_float32(data, 1e3, &ind);
 8018d1e:	a902      	add	r1, sp, #8
		float current = buffer_get_float32(data, 1e3, &ind);
 8018d20:	eeb0 8a40 	vmov.f32	s16, s0
		float min_rpm = buffer_get_float32(data, 1e3, &ind);
 8018d24:	4620      	mov	r0, r4
 8018d26:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8018dd0 <commands_process_packet+0x390>
 8018d2a:	f7f8 fff9 	bl	8011d20 <buffer_get_float32>
		float duty = buffer_get_float32(data, 1e3, &ind);
 8018d2e:	a902      	add	r1, sp, #8
		float min_rpm = buffer_get_float32(data, 1e3, &ind);
 8018d30:	eeb0 9a40 	vmov.f32	s18, s0
		float duty = buffer_get_float32(data, 1e3, &ind);
 8018d34:	4620      	mov	r0, r4
 8018d36:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8018dd0 <commands_process_packet+0x390>
 8018d3a:	f7f8 fff1 	bl	8011d20 <buffer_get_float32>
		float resistance = buffer_get_float32(data, 1e6, &ind);
 8018d3e:	4620      	mov	r0, r4
		float duty = buffer_get_float32(data, 1e3, &ind);
 8018d40:	eef0 8a40 	vmov.f32	s17, s0
		float resistance = buffer_get_float32(data, 1e6, &ind);
 8018d44:	a902      	add	r1, sp, #8
 8018d46:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8018db8 <commands_process_packet+0x378>
 8018d4a:	f7f8 ffe9 	bl	8011d20 <buffer_get_float32>
		send_func_last = send_func;
 8018d4e:	682b      	ldr	r3, [r5, #0]
 8018d50:	6033      	str	r3, [r6, #0]
		bool res = conf_general_measure_flux_linkage(current, duty, min_rpm, resistance, &linkage);
 8018d52:	eef0 1a40 	vmov.f32	s3, s0
 8018d56:	eeb0 1a49 	vmov.f32	s2, s18
 8018d5a:	eef0 0a68 	vmov.f32	s1, s17
 8018d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8018d62:	a804      	add	r0, sp, #16
 8018d64:	f7ff f8d4 	bl	8017f10 <conf_general_measure_flux_linkage>
		if (!res) {
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	f041 8172 	bne.w	801a052 <commands_process_packet+0x1612>
			linkage = 0.0;
 8018d6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8018da8 <commands_process_packet+0x368>
 8018d72:	eeb0 0a67 	vmov.f32	s0, s15
 8018d76:	edcd 7a04 	vstr	s15, [sp, #16]
		send_buffer[ind++] = COMM_DETECT_MOTOR_FLUX_LINKAGE;
 8018d7a:	4c0e      	ldr	r4, [pc, #56]	; (8018db4 <commands_process_packet+0x374>)
		buffer_append_float32(send_buffer, linkage, 1e7, &ind);
 8018d7c:	eddf 0a13 	vldr	s1, [pc, #76]	; 8018dcc <commands_process_packet+0x38c>
		send_buffer[ind++] = COMM_DETECT_MOTOR_FLUX_LINKAGE;
 8018d80:	2301      	movs	r3, #1
 8018d82:	221a      	movs	r2, #26
		buffer_append_float32(send_buffer, linkage, 1e7, &ind);
 8018d84:	a902      	add	r1, sp, #8
 8018d86:	4620      	mov	r0, r4
		send_buffer[ind++] = COMM_DETECT_MOTOR_FLUX_LINKAGE;
 8018d88:	9302      	str	r3, [sp, #8]
 8018d8a:	7022      	strb	r2, [r4, #0]
		buffer_append_float32(send_buffer, linkage, 1e7, &ind);
 8018d8c:	f7f8 ff28 	bl	8011be0 <buffer_append_float32>
		if (send_func_last) {
 8018d90:	6833      	ldr	r3, [r6, #0]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	f43f aed8 	beq.w	8018b48 <commands_process_packet+0x108>
			send_func_last(send_buffer, ind);
 8018d98:	4620      	mov	r0, r4
 8018d9a:	9902      	ldr	r1, [sp, #8]
 8018d9c:	4798      	blx	r3
 8018d9e:	e6d8      	b.n	8018b52 <commands_process_packet+0x112>
 8018da0:	20008d00 	.word	0x20008d00
 8018da4:	200094e8 	.word	0x200094e8
 8018da8:	00000000 	.word	0x00000000
 8018dac:	200094ec 	.word	0x200094ec
 8018db0:	20008e74 	.word	0x20008e74
 8018db4:	200090e8 	.word	0x200090e8
 8018db8:	49742400 	.word	0x49742400
 8018dbc:	20008cfc 	.word	0x20008cfc
 8018dc0:	461c4000 	.word	0x461c4000
 8018dc4:	3c23d70a 	.word	0x3c23d70a
 8018dc8:	41200000 	.word	0x41200000
 8018dcc:	4b189680 	.word	0x4b189680
 8018dd0:	447a0000 	.word	0x447a0000
		detect_current = buffer_get_float32(data, 1e3, &ind);
 8018dd4:	a902      	add	r1, sp, #8
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 8018dd0 <commands_process_packet+0x390>
 8018ddc:	f7f8 ffa0 	bl	8011d20 <buffer_get_float32>
 8018de0:	4b21      	ldr	r3, [pc, #132]	; (8018e68 <commands_process_packet+0x428>)
		detect_min_rpm = buffer_get_float32(data, 1e3, &ind);
 8018de2:	a902      	add	r1, sp, #8
		detect_current = buffer_get_float32(data, 1e3, &ind);
 8018de4:	ed83 0a00 	vstr	s0, [r3]
		detect_min_rpm = buffer_get_float32(data, 1e3, &ind);
 8018de8:	4620      	mov	r0, r4
 8018dea:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8018e6c <commands_process_packet+0x42c>
 8018dee:	f7f8 ff97 	bl	8011d20 <buffer_get_float32>
 8018df2:	4b1f      	ldr	r3, [pc, #124]	; (8018e70 <commands_process_packet+0x430>)
		detect_low_duty = buffer_get_float32(data, 1e3, &ind);
 8018df4:	a902      	add	r1, sp, #8
 8018df6:	4620      	mov	r0, r4
		detect_min_rpm = buffer_get_float32(data, 1e3, &ind);
 8018df8:	ed83 0a00 	vstr	s0, [r3]
		detect_low_duty = buffer_get_float32(data, 1e3, &ind);
 8018dfc:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8018e6c <commands_process_packet+0x42c>
 8018e00:	f7f8 ff8e 	bl	8011d20 <buffer_get_float32>
 8018e04:	491b      	ldr	r1, [pc, #108]	; (8018e74 <commands_process_packet+0x434>)
		send_func_last = send_func;
 8018e06:	4a1c      	ldr	r2, [pc, #112]	; (8018e78 <commands_process_packet+0x438>)
		chEvtSignal(detect_tp, (eventmask_t) 1);
 8018e08:	481c      	ldr	r0, [pc, #112]	; (8018e7c <commands_process_packet+0x43c>)
		send_func_last = send_func;
 8018e0a:	4b1d      	ldr	r3, [pc, #116]	; (8018e80 <commands_process_packet+0x440>)
 8018e0c:	6812      	ldr	r2, [r2, #0]
		detect_low_duty = buffer_get_float32(data, 1e3, &ind);
 8018e0e:	ed81 0a00 	vstr	s0, [r1]
		chEvtSignal(detect_tp, (eventmask_t) 1);
 8018e12:	6800      	ldr	r0, [r0, #0]
		send_func_last = send_func;
 8018e14:	601a      	str	r2, [r3, #0]
		chEvtSignal(detect_tp, (eventmask_t) 1);
 8018e16:	2101      	movs	r1, #1
 8018e18:	f7f5 f832 	bl	800de80 <chEvtSignal>
		break;
 8018e1c:	e699      	b.n	8018b52 <commands_process_packet+0x112>
		data[len] = '\0';
 8018e1e:	2300      	movs	r3, #0
		terminal_process_string((char*)data);
 8018e20:	4620      	mov	r0, r4
		data[len] = '\0';
 8018e22:	547b      	strb	r3, [r7, r1]
		terminal_process_string((char*)data);
 8018e24:	f7fd fab4 	bl	8016390 <terminal_process_string>
		break;
 8018e28:	e693      	b.n	8018b52 <commands_process_packet+0x112>
		mode = data[ind++];
 8018e2a:	a936      	add	r1, sp, #216	; 0xd8
 8018e2c:	2301      	movs	r3, #1
 8018e2e:	f841 3dd0 	str.w	r3, [r1, #-208]!
		sample_len = buffer_get_uint16(data, &ind);
 8018e32:	4620      	mov	r0, r4
		mode = data[ind++];
 8018e34:	787d      	ldrb	r5, [r7, #1]
		sample_len = buffer_get_uint16(data, &ind);
 8018e36:	f7f8 ff33 	bl	8011ca0 <buffer_get_uint16>
		decimation = data[ind++];
 8018e3a:	9b02      	ldr	r3, [sp, #8]
		mc_interface_sample_print_data(mode, sample_len, decimation);
 8018e3c:	4601      	mov	r1, r0
 8018e3e:	5ce2      	ldrb	r2, [r4, r3]
 8018e40:	4628      	mov	r0, r5
		decimation = data[ind++];
 8018e42:	3301      	adds	r3, #1
 8018e44:	9302      	str	r3, [sp, #8]
		mc_interface_sample_print_data(mode, sample_len, decimation);
 8018e46:	f003 f99b 	bl	801c180 <mc_interface_sample_print_data>
	} break;
 8018e4a:	e682      	b.n	8018b52 <commands_process_packet+0x112>
		if (packet_id == COMM_GET_APPCONF) {
 8018e4c:	f1b8 0f11 	cmp.w	r8, #17
 8018e50:	f001 8103 	beq.w	801a05a <commands_process_packet+0x161a>
			conf_general_get_default_app_configuration(&appconf);
 8018e54:	ac04      	add	r4, sp, #16
 8018e56:	4620      	mov	r0, r4
 8018e58:	f7fe fbc2 	bl	80175e0 <conf_general_get_default_app_configuration>
		commands_send_appconf(packet_id, &appconf);
 8018e5c:	4621      	mov	r1, r4
 8018e5e:	4640      	mov	r0, r8
 8018e60:	f7ff fc86 	bl	8018770 <commands_send_appconf>
		break;
 8018e64:	e675      	b.n	8018b52 <commands_process_packet+0x112>
 8018e66:	bf00      	nop
 8018e68:	20008340 	.word	0x20008340
 8018e6c:	447a0000 	.word	0x447a0000
 8018e70:	20008358 	.word	0x20008358
 8018e74:	20008354 	.word	0x20008354
 8018e78:	200094e8 	.word	0x200094e8
 8018e7c:	20008cf8 	.word	0x20008cf8
 8018e80:	200094ec 	.word	0x200094ec
		appconf = *app_get_configuration();
 8018e84:	f007 fc8c 	bl	80207a0 <app_get_configuration>
 8018e88:	22c8      	movs	r2, #200	; 0xc8
 8018e8a:	4601      	mov	r1, r0
 8018e8c:	a804      	add	r0, sp, #16
		appconf.controller_id = data[ind++];
 8018e8e:	2501      	movs	r5, #1
		appconf = *app_get_configuration();
 8018e90:	f7f3 fe3e 	bl	800cb10 <memcpy>
		appconf.controller_id = data[ind++];
 8018e94:	787b      	ldrb	r3, [r7, #1]
 8018e96:	f88d 3010 	strb.w	r3, [sp, #16]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8018e9a:	a902      	add	r1, sp, #8
 8018e9c:	4620      	mov	r0, r4
		appconf.controller_id = data[ind++];
 8018e9e:	9502      	str	r5, [sp, #8]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8018ea0:	f7f8 ff26 	bl	8011cf0 <buffer_get_uint32>
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8018ea4:	a902      	add	r1, sp, #8
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8018ea6:	9005      	str	r0, [sp, #20]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8018ea8:	4620      	mov	r0, r4
 8018eaa:	f7f8 ff49 	bl	8011d40 <buffer_get_float32_auto>
		appconf.send_can_status = data[ind++];
 8018eae:	9b02      	ldr	r3, [sp, #8]
 8018eb0:	5ce2      	ldrb	r2, [r4, r3]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8018eb2:	ed8d 0a06 	vstr	s0, [sp, #24]
		appconf.send_can_status = data[ind++];
 8018eb6:	3200      	adds	r2, #0
 8018eb8:	bf18      	it	ne
 8018eba:	2201      	movne	r2, #1
 8018ebc:	442b      	add	r3, r5
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8018ebe:	a902      	add	r1, sp, #8
 8018ec0:	4620      	mov	r0, r4
		appconf.send_can_status = data[ind++];
 8018ec2:	f88d 201c 	strb.w	r2, [sp, #28]
 8018ec6:	9302      	str	r3, [sp, #8]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8018ec8:	f7f8 feea 	bl	8011ca0 <buffer_get_uint16>
		appconf.app_to_use = data[ind++];
 8018ecc:	9b02      	ldr	r3, [sp, #8]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8018ece:	9008      	str	r0, [sp, #32]
		appconf.app_to_use = data[ind++];
 8018ed0:	1959      	adds	r1, r3, r5
 8018ed2:	5ce2      	ldrb	r2, [r4, r3]
		appconf.app_ppm_conf.ctrl_type = data[ind++];
 8018ed4:	5c61      	ldrb	r1, [r4, r1]
 8018ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018eda:	3302      	adds	r3, #2
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 8018edc:	4620      	mov	r0, r4
 8018ede:	a902      	add	r1, sp, #8
		appconf.app_to_use = data[ind++];
 8018ee0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		appconf.app_ppm_conf.ctrl_type = data[ind++];
 8018ee4:	9302      	str	r3, [sp, #8]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 8018ee6:	f7f8 ff2b 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018eea:	4620      	mov	r0, r4
 8018eec:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 8018eee:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018ef2:	f7f8 ff25 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8018ef6:	4620      	mov	r0, r4
 8018ef8:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018efa:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8018efe:	f7f8 ff1f 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8018f02:	4620      	mov	r0, r4
 8018f04:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8018f06:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8018f0a:	f7f8 ff19 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8018f0e:	4620      	mov	r0, r4
 8018f10:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8018f12:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8018f16:	f7f8 ff13 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.median_filter = data[ind++];
 8018f1a:	9b02      	ldr	r3, [sp, #8]
 8018f1c:	1959      	adds	r1, r3, r5
 8018f1e:	5ce2      	ldrb	r2, [r4, r3]
		appconf.app_ppm_conf.safe_start = data[ind++];
 8018f20:	5c60      	ldrb	r0, [r4, r1]
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8018f22:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
		appconf.app_ppm_conf.median_filter = data[ind++];
 8018f26:	3200      	adds	r2, #0
 8018f28:	bf18      	it	ne
 8018f2a:	2201      	movne	r2, #1
		appconf.app_ppm_conf.safe_start = data[ind++];
 8018f2c:	3000      	adds	r0, #0
 8018f2e:	bf18      	it	ne
 8018f30:	2001      	movne	r0, #1
 8018f32:	3302      	adds	r3, #2
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8018f34:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.safe_start = data[ind++];
 8018f36:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8018f3a:	4620      	mov	r0, r4
		appconf.app_ppm_conf.median_filter = data[ind++];
 8018f3c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		appconf.app_ppm_conf.safe_start = data[ind++];
 8018f40:	9302      	str	r3, [sp, #8]
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8018f42:	f7f8 fefd 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8018f46:	4620      	mov	r0, r4
 8018f48:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8018f4a:	ed8d 0a11 	vstr	s0, [sp, #68]	; 0x44
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8018f4e:	f7f8 fef7 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8018f52:	9b02      	ldr	r3, [sp, #8]
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8018f54:	4620      	mov	r0, r4
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8018f56:	195a      	adds	r2, r3, r5
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8018f58:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8018f5a:	5ce3      	ldrb	r3, [r4, r3]
 8018f5c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8018f60:	9202      	str	r2, [sp, #8]
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8018f62:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8018f66:	f7f8 feeb 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8018f6e:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8018f72:	f7f8 fee5 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8018f76:	9b02      	ldr	r3, [sp, #8]
 8018f78:	1959      	adds	r1, r3, r5
 8018f7a:	5ce2      	ldrb	r2, [r4, r3]
		appconf.app_ppm_conf.tc = data[ind++];
 8018f7c:	5c60      	ldrb	r0, [r4, r1]
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8018f7e:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8018f82:	3200      	adds	r2, #0
 8018f84:	bf18      	it	ne
 8018f86:	2201      	movne	r2, #1
		appconf.app_ppm_conf.tc = data[ind++];
 8018f88:	3000      	adds	r0, #0
 8018f8a:	bf18      	it	ne
 8018f8c:	2001      	movne	r0, #1
 8018f8e:	3302      	adds	r3, #2
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8018f90:	a902      	add	r1, sp, #8
		appconf.app_ppm_conf.tc = data[ind++];
 8018f92:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8018f96:	4620      	mov	r0, r4
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8018f98:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		appconf.app_ppm_conf.tc = data[ind++];
 8018f9c:	9302      	str	r3, [sp, #8]
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8018f9e:	f7f8 fecf 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.ctrl_type = data[ind++];
 8018fa2:	9b02      	ldr	r3, [sp, #8]
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018fa4:	4620      	mov	r0, r4
		appconf.app_adc_conf.ctrl_type = data[ind++];
 8018fa6:	195a      	adds	r2, r3, r5
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018fa8:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.ctrl_type = data[ind++];
 8018faa:	5ce3      	ldrb	r3, [r4, r3]
 8018fac:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8018fb0:	9202      	str	r2, [sp, #8]
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8018fb2:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018fb6:	f7f8 fec3 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8018fba:	4620      	mov	r0, r4
 8018fbc:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8018fbe:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8018fc2:	f7f8 febd 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8018fca:	ed8d 0a1a 	vstr	s0, [sp, #104]	; 0x68
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8018fce:	f7f8 feb7 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8018fd6:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8018fda:	f7f8 feb1 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8018fde:	4620      	mov	r0, r4
 8018fe0:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8018fe2:	ed8d 0a1c 	vstr	s0, [sp, #112]	; 0x70
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8018fe6:	f7f8 feab 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8018fea:	4620      	mov	r0, r4
 8018fec:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8018fee:	ed8d 0a1d 	vstr	s0, [sp, #116]	; 0x74
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8018ff2:	f7f8 fea5 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.use_filter = data[ind++];
 8018ff6:	9b02      	ldr	r3, [sp, #8]
 8018ff8:	195e      	adds	r6, r3, r5
		appconf.app_adc_conf.safe_start = data[ind++];
 8018ffa:	1c98      	adds	r0, r3, #2
 8018ffc:	f814 e006 	ldrb.w	lr, [r4, r6]
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 8019000:	5c27      	ldrb	r7, [r4, r0]
 8019002:	1cd9      	adds	r1, r3, #3
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8019004:	1d1a      	adds	r2, r3, #4
		appconf.app_adc_conf.safe_start = data[ind++];
 8019006:	f11e 0e00 	adds.w	lr, lr, #0
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 801900a:	5c66      	ldrb	r6, [r4, r1]
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 801900c:	5ca1      	ldrb	r1, [r4, r2]
		appconf.app_adc_conf.use_filter = data[ind++];
 801900e:	5ce2      	ldrb	r2, [r4, r3]
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8019010:	f103 0005 	add.w	r0, r3, #5
		appconf.app_adc_conf.safe_start = data[ind++];
 8019014:	bf18      	it	ne
 8019016:	f04f 0e01 	movne.w	lr, #1
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 801901a:	3700      	adds	r7, #0
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 801901c:	5c20      	ldrb	r0, [r4, r0]
		appconf.app_adc_conf.safe_start = data[ind++];
 801901e:	f88d e07d 	strb.w	lr, [sp, #125]	; 0x7d
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 8019022:	bf18      	it	ne
 8019024:	2701      	movne	r7, #1
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8019026:	3600      	adds	r6, #0
 8019028:	bf18      	it	ne
 801902a:	2601      	movne	r6, #1
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 801902c:	3100      	adds	r1, #0
 801902e:	bf18      	it	ne
 8019030:	2101      	movne	r1, #1
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8019032:	3000      	adds	r0, #0
 8019034:	bf18      	it	ne
 8019036:	2001      	movne	r0, #1
		appconf.app_adc_conf.use_filter = data[ind++];
 8019038:	3200      	adds	r2, #0
 801903a:	bf18      	it	ne
 801903c:	2201      	movne	r2, #1
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 801903e:	3306      	adds	r3, #6
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8019040:	f88d 1080 	strb.w	r1, [sp, #128]	; 0x80
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8019044:	f88d 0081 	strb.w	r0, [sp, #129]	; 0x81
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8019048:	a902      	add	r1, sp, #8
 801904a:	4620      	mov	r0, r4
		appconf.app_adc_conf.use_filter = data[ind++];
 801904c:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8019050:	9302      	str	r3, [sp, #8]
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 8019052:	f88d 707e 	strb.w	r7, [sp, #126]	; 0x7e
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8019056:	f88d 607f 	strb.w	r6, [sp, #127]	; 0x7f
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 801905a:	ed8d 0a1e 	vstr	s0, [sp, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 801905e:	f7f8 fe6f 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8019062:	4620      	mov	r0, r4
 8019064:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8019066:	ed8d 0a21 	vstr	s0, [sp, #132]	; 0x84
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 801906a:	f7f8 fe69 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 801906e:	9b02      	ldr	r3, [sp, #8]
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8019070:	4620      	mov	r0, r4
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 8019072:	195a      	adds	r2, r3, r5
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8019074:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 8019076:	5ce3      	ldrb	r3, [r4, r3]
 8019078:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 801907c:	9202      	str	r2, [sp, #8]
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 801907e:	ed8d 0a22 	vstr	s0, [sp, #136]	; 0x88
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8019082:	f7f8 fe5d 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8019086:	4620      	mov	r0, r4
 8019088:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 801908a:	ed8d 0a24 	vstr	s0, [sp, #144]	; 0x90
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 801908e:	f7f8 fe57 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.multi_esc = data[ind++];
 8019092:	9b02      	ldr	r3, [sp, #8]
 8019094:	1959      	adds	r1, r3, r5
 8019096:	5ce2      	ldrb	r2, [r4, r3]
		appconf.app_adc_conf.tc = data[ind++];
 8019098:	5c60      	ldrb	r0, [r4, r1]
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 801909a:	ed8d 0a25 	vstr	s0, [sp, #148]	; 0x94
		appconf.app_adc_conf.multi_esc = data[ind++];
 801909e:	3200      	adds	r2, #0
 80190a0:	bf18      	it	ne
 80190a2:	2201      	movne	r2, #1
		appconf.app_adc_conf.tc = data[ind++];
 80190a4:	3000      	adds	r0, #0
 80190a6:	bf18      	it	ne
 80190a8:	2001      	movne	r0, #1
 80190aa:	3302      	adds	r3, #2
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80190ac:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.tc = data[ind++];
 80190ae:	f88d 0099 	strb.w	r0, [sp, #153]	; 0x99
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80190b2:	4620      	mov	r0, r4
		appconf.app_adc_conf.multi_esc = data[ind++];
 80190b4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
		appconf.app_adc_conf.tc = data[ind++];
 80190b8:	9302      	str	r3, [sp, #8]
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80190ba:	f7f8 fe41 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 80190be:	a902      	add	r1, sp, #8
 80190c0:	4620      	mov	r0, r4
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80190c2:	ed8d 0a27 	vstr	s0, [sp, #156]	; 0x9c
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 80190c6:	f7f8 fdeb 	bl	8011ca0 <buffer_get_uint16>
		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 80190ca:	a902      	add	r1, sp, #8
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 80190cc:	9028      	str	r0, [sp, #160]	; 0xa0
		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 80190ce:	4620      	mov	r0, r4
 80190d0:	f7f8 fe0e 	bl	8011cf0 <buffer_get_uint32>
		appconf.app_chuk_conf.ctrl_type = data[ind++];
 80190d4:	9b02      	ldr	r3, [sp, #8]
		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 80190d6:	9029      	str	r0, [sp, #164]	; 0xa4
		appconf.app_chuk_conf.ctrl_type = data[ind++];
 80190d8:	195a      	adds	r2, r3, r5
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 80190da:	4620      	mov	r0, r4
		appconf.app_chuk_conf.ctrl_type = data[ind++];
 80190dc:	5ce3      	ldrb	r3, [r4, r3]
 80190de:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 80190e2:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.ctrl_type = data[ind++];
 80190e4:	9202      	str	r2, [sp, #8]
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 80190e6:	f7f8 fe2b 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80190ea:	4620      	mov	r0, r4
 80190ec:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 80190ee:	ed8d 0a2b 	vstr	s0, [sp, #172]	; 0xac
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80190f2:	f7f8 fe25 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80190f6:	4620      	mov	r0, r4
 80190f8:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80190fa:	ed8d 0a2c 	vstr	s0, [sp, #176]	; 0xb0
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80190fe:	f7f8 fe1f 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8019102:	4620      	mov	r0, r4
 8019104:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8019106:	ed8d 0a2d 	vstr	s0, [sp, #180]	; 0xb4
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 801910a:	f7f8 fe19 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 801910e:	4620      	mov	r0, r4
 8019110:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8019112:	ed8d 0a2e 	vstr	s0, [sp, #184]	; 0xb8
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8019116:	f7f8 fe13 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 801911a:	4620      	mov	r0, r4
 801911c:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 801911e:	ed8d 0a2f 	vstr	s0, [sp, #188]	; 0xbc
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8019122:	f7f8 fe0d 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8019126:	9b02      	ldr	r3, [sp, #8]
 8019128:	1959      	adds	r1, r3, r5
		appconf.app_chuk_conf.multi_esc = data[ind++];
 801912a:	1c9a      	adds	r2, r3, #2
 801912c:	5c66      	ldrb	r6, [r4, r1]
		appconf.app_chuk_conf.tc = data[ind++];
 801912e:	5ca2      	ldrb	r2, [r4, r2]
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8019130:	5ce1      	ldrb	r1, [r4, r3]
 8019132:	f88d 10c4 	strb.w	r1, [sp, #196]	; 0xc4
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8019136:	3600      	adds	r6, #0
 8019138:	bf18      	it	ne
 801913a:	2601      	movne	r6, #1
		appconf.app_chuk_conf.tc = data[ind++];
 801913c:	3200      	adds	r2, #0
 801913e:	bf18      	it	ne
 8019140:	2201      	movne	r2, #1
 8019142:	3303      	adds	r3, #3
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8019144:	4620      	mov	r0, r4
 8019146:	a902      	add	r1, sp, #8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8019148:	f88d 60c5 	strb.w	r6, [sp, #197]	; 0xc5
		appconf.app_chuk_conf.tc = data[ind++];
 801914c:	f88d 20c6 	strb.w	r2, [sp, #198]	; 0xc6
 8019150:	9302      	str	r3, [sp, #8]
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8019152:	ed8d 0a30 	vstr	s0, [sp, #192]	; 0xc0
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8019156:	f7f8 fdf3 	bl	8011d40 <buffer_get_float32_auto>
		appconf.app_nrf_conf.speed = data[ind++];
 801915a:	9b02      	ldr	r3, [sp, #8]
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 801915c:	ed8d 0a32 	vstr	s0, [sp, #200]	; 0xc8
		appconf.app_nrf_conf.speed = data[ind++];
 8019160:	195a      	adds	r2, r3, r5
		appconf.app_nrf_conf.power = data[ind++];
 8019162:	1c9f      	adds	r7, r3, #2
		appconf.app_nrf_conf.crc_type = data[ind++];
 8019164:	1cd8      	adds	r0, r3, #3
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8019166:	1d19      	adds	r1, r3, #4
		appconf.app_nrf_conf.retries = data[ind++];
 8019168:	1d5e      	adds	r6, r3, #5
		appconf.app_nrf_conf.power = data[ind++];
 801916a:	5ca2      	ldrb	r2, [r4, r2]
		appconf.app_nrf_conf.retry_delay = data[ind++];
 801916c:	5c20      	ldrb	r0, [r4, r0]
		appconf.app_nrf_conf.retries = data[ind++];
 801916e:	5c61      	ldrb	r1, [r4, r1]
		appconf.app_nrf_conf.crc_type = data[ind++];
 8019170:	5de7      	ldrb	r7, [r4, r7]
		appconf.app_nrf_conf.channel = data[ind++];
 8019172:	5da6      	ldrb	r6, [r4, r6]
		appconf.app_nrf_conf.power = data[ind++];
 8019174:	f88d 20cd 	strb.w	r2, [sp, #205]	; 0xcd
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8019178:	18e2      	adds	r2, r4, r3
		appconf.app_nrf_conf.crc_type = data[ind++];
 801917a:	f88d 70ce 	strb.w	r7, [sp, #206]	; 0xce
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 801917e:	7a52      	ldrb	r2, [r2, #9]
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8019180:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
		appconf.app_nrf_conf.retries = data[ind++];
 8019184:	f88d 10d0 	strb.w	r1, [sp, #208]	; 0xd0
		appconf.app_nrf_conf.channel = data[ind++];
 8019188:	1d98      	adds	r0, r3, #6
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 801918a:	1821      	adds	r1, r4, r0
		appconf.app_nrf_conf.speed = data[ind++];
 801918c:	5ce4      	ldrb	r4, [r4, r3]
 801918e:	f88d 40cc 	strb.w	r4, [sp, #204]	; 0xcc
		appconf.app_nrf_conf.channel = data[ind++];
 8019192:	9002      	str	r0, [sp, #8]
 8019194:	f88d 60d1 	strb.w	r6, [sp, #209]	; 0xd1
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8019198:	3200      	adds	r2, #0
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 801919a:	7888      	ldrb	r0, [r1, #2]
 801919c:	8809      	ldrh	r1, [r1, #0]
 801919e:	f88d 00d4 	strb.w	r0, [sp, #212]	; 0xd4
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 80191a2:	bf18      	it	ne
 80191a4:	2201      	movne	r2, #1
 80191a6:	330a      	adds	r3, #10
		conf_general_store_app_configuration(&appconf);
 80191a8:	a804      	add	r0, sp, #16
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 80191aa:	f88d 20d5 	strb.w	r2, [sp, #213]	; 0xd5
 80191ae:	9302      	str	r3, [sp, #8]
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 80191b0:	f8ad 10d2 	strh.w	r1, [sp, #210]	; 0xd2
		conf_general_store_app_configuration(&appconf);
 80191b4:	f7fe fc64 	bl	8017a80 <conf_general_store_app_configuration>
		app_set_configuration(&appconf);
 80191b8:	a804      	add	r0, sp, #16
 80191ba:	f007 faf9 	bl	80207b0 <app_set_configuration>
		timeout_configure(appconf.timeout_msec, appconf.timeout_brake_current);
 80191be:	ed9d 0a06 	vldr	s0, [sp, #24]
 80191c2:	9805      	ldr	r0, [sp, #20]
 80191c4:	f001 f814 	bl	801a1f0 <timeout_configure>
		chThdSleepMilliseconds(200);
 80191c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80191cc:	f7f4 fc08 	bl	800d9e0 <chThdSleep>
	if (send_func) {
 80191d0:	4b05      	ldr	r3, [pc, #20]	; (80191e8 <commands_process_packet+0x7a8>)
		send_buffer[ind++] = packet_id;
 80191d2:	4806      	ldr	r0, [pc, #24]	; (80191ec <commands_process_packet+0x7ac>)
	if (send_func) {
 80191d4:	681b      	ldr	r3, [r3, #0]
		send_buffer[ind++] = packet_id;
 80191d6:	9502      	str	r5, [sp, #8]
 80191d8:	2210      	movs	r2, #16
 80191da:	7002      	strb	r2, [r0, #0]
	if (send_func) {
 80191dc:	2b00      	cmp	r3, #0
 80191de:	f43f acb8 	beq.w	8018b52 <commands_process_packet+0x112>
		send_func(data, len);
 80191e2:	4629      	mov	r1, r5
 80191e4:	4798      	blx	r3
 80191e6:	e4b4      	b.n	8018b52 <commands_process_packet+0x112>
 80191e8:	200094e8 	.word	0x200094e8
 80191ec:	200090e8 	.word	0x200090e8
		if (packet_id == COMM_GET_MCCONF) {
 80191f0:	f1b8 0f0e 	cmp.w	r8, #14
 80191f4:	f000 873b 	beq.w	801a06e <commands_process_packet+0x162e>
			conf_general_get_default_mc_configuration(&mcconf);
 80191f8:	48f1      	ldr	r0, [pc, #964]	; (80195c0 <commands_process_packet+0xb80>)
 80191fa:	f7fe fa99 	bl	8017730 <conf_general_get_default_mc_configuration>
		send_buffer[ind++] = mcconf.sensor_mode;
 80191fe:	ae36      	add	r6, sp, #216	; 0xd8
		send_buffer[ind++] = mcconf.pwm_mode;
 8019200:	4def      	ldr	r5, [pc, #956]	; (80195c0 <commands_process_packet+0xb80>)
		send_buffer[ind++] = packet_id;
 8019202:	4cf0      	ldr	r4, [pc, #960]	; (80195c4 <commands_process_packet+0xb84>)
		send_buffer[ind++] = mcconf.motor_type;
 8019204:	78aa      	ldrb	r2, [r5, #2]
		send_buffer[ind++] = mcconf.comm_mode;
 8019206:	786f      	ldrb	r7, [r5, #1]
		buffer_append_float32_auto(send_buffer, mcconf.l_current_max, &ind);
 8019208:	ed95 0a01 	vldr	s0, [r5, #4]
		send_buffer[ind++] = mcconf.motor_type;
 801920c:	70e2      	strb	r2, [r4, #3]
		send_buffer[ind++] = mcconf.sensor_mode;
 801920e:	2305      	movs	r3, #5
 8019210:	f846 3dd0 	str.w	r3, [r6, #-208]!
		send_buffer[ind++] = mcconf.pwm_mode;
 8019214:	782b      	ldrb	r3, [r5, #0]
 8019216:	7063      	strb	r3, [r4, #1]
		buffer_append_float32_auto(send_buffer, mcconf.l_current_max, &ind);
 8019218:	4631      	mov	r1, r6
		send_buffer[ind++] = mcconf.sensor_mode;
 801921a:	78eb      	ldrb	r3, [r5, #3]
 801921c:	7123      	strb	r3, [r4, #4]
		buffer_append_float32_auto(send_buffer, mcconf.l_current_max, &ind);
 801921e:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.comm_mode;
 8019220:	70a7      	strb	r7, [r4, #2]
		send_buffer[ind++] = packet_id;
 8019222:	f884 8000 	strb.w	r8, [r4]
		buffer_append_float32_auto(send_buffer, mcconf.l_current_max, &ind);
 8019226:	f7f8 fceb 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_current_min, &ind);
 801922a:	4631      	mov	r1, r6
 801922c:	ed95 0a02 	vldr	s0, [r5, #8]
 8019230:	4620      	mov	r0, r4
 8019232:	f7f8 fce5 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_in_current_max, &ind);
 8019236:	4631      	mov	r1, r6
 8019238:	ed95 0a03 	vldr	s0, [r5, #12]
 801923c:	4620      	mov	r0, r4
 801923e:	f7f8 fcdf 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_in_current_min, &ind);
 8019242:	4631      	mov	r1, r6
 8019244:	ed95 0a04 	vldr	s0, [r5, #16]
 8019248:	4620      	mov	r0, r4
 801924a:	f7f8 fcd9 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_abs_current_max, &ind);
 801924e:	4631      	mov	r1, r6
 8019250:	ed95 0a05 	vldr	s0, [r5, #20]
 8019254:	4620      	mov	r0, r4
 8019256:	f7f8 fcd3 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_min_erpm, &ind);
 801925a:	4631      	mov	r1, r6
 801925c:	ed95 0a06 	vldr	s0, [r5, #24]
 8019260:	4620      	mov	r0, r4
 8019262:	f7f8 fccd 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_max_erpm, &ind);
 8019266:	4631      	mov	r1, r6
 8019268:	ed95 0a07 	vldr	s0, [r5, #28]
 801926c:	4620      	mov	r0, r4
 801926e:	f7f8 fcc7 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_erpm_start, &ind);
 8019272:	4631      	mov	r1, r6
 8019274:	ed95 0a08 	vldr	s0, [r5, #32]
 8019278:	4620      	mov	r0, r4
 801927a:	f7f8 fcc1 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_max_erpm_fbrake, &ind);
 801927e:	4631      	mov	r1, r6
 8019280:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 8019284:	4620      	mov	r0, r4
 8019286:	f7f8 fcbb 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_max_erpm_fbrake_cc, &ind);
 801928a:	4631      	mov	r1, r6
 801928c:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
 8019290:	4620      	mov	r0, r4
 8019292:	f7f8 fcb5 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_min_vin, &ind);
 8019296:	4631      	mov	r1, r6
 8019298:	ed95 0a0b 	vldr	s0, [r5, #44]	; 0x2c
 801929c:	4620      	mov	r0, r4
 801929e:	f7f8 fcaf 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_max_vin, &ind);
 80192a2:	4631      	mov	r1, r6
 80192a4:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
 80192a8:	4620      	mov	r0, r4
 80192aa:	f7f8 fca9 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_battery_cut_start, &ind);
 80192ae:	4631      	mov	r1, r6
 80192b0:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
 80192b4:	4620      	mov	r0, r4
 80192b6:	f7f8 fca3 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_battery_cut_end, &ind);
 80192ba:	4631      	mov	r1, r6
 80192bc:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
 80192c0:	4620      	mov	r0, r4
 80192c2:	f7f8 fc9d 	bl	8011c00 <buffer_append_float32_auto>
		send_buffer[ind++] = mcconf.l_slow_abs_current;
 80192c6:	9b02      	ldr	r3, [sp, #8]
 80192c8:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80192cc:	54e2      	strb	r2, [r4, r3]
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_fet_start, &ind);
 80192ce:	ed95 0a10 	vldr	s0, [r5, #64]	; 0x40
		send_buffer[ind++] = mcconf.l_slow_abs_current;
 80192d2:	3301      	adds	r3, #1
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_fet_start, &ind);
 80192d4:	4631      	mov	r1, r6
 80192d6:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.l_slow_abs_current;
 80192d8:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_fet_start, &ind);
 80192da:	f7f8 fc91 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_fet_end, &ind);
 80192de:	4631      	mov	r1, r6
 80192e0:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
 80192e4:	4620      	mov	r0, r4
 80192e6:	f7f8 fc8b 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_motor_start, &ind);
 80192ea:	4631      	mov	r1, r6
 80192ec:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
 80192f0:	4620      	mov	r0, r4
 80192f2:	f7f8 fc85 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_motor_end, &ind);
 80192f6:	4631      	mov	r1, r6
 80192f8:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
 80192fc:	4620      	mov	r0, r4
 80192fe:	f7f8 fc7f 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_temp_accel_dec, &ind);
 8019302:	4631      	mov	r1, r6
 8019304:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 8019308:	4620      	mov	r0, r4
 801930a:	f7f8 fc79 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_min_duty, &ind);
 801930e:	4631      	mov	r1, r6
 8019310:	ed95 0a15 	vldr	s0, [r5, #84]	; 0x54
 8019314:	4620      	mov	r0, r4
 8019316:	f7f8 fc73 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_max_duty, &ind);
 801931a:	4631      	mov	r1, r6
 801931c:	ed95 0a16 	vldr	s0, [r5, #88]	; 0x58
 8019320:	4620      	mov	r0, r4
 8019322:	f7f8 fc6d 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_watt_max, &ind);
 8019326:	4631      	mov	r1, r6
 8019328:	ed95 0a17 	vldr	s0, [r5, #92]	; 0x5c
 801932c:	4620      	mov	r0, r4
 801932e:	f7f8 fc67 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.l_watt_min, &ind);
 8019332:	4631      	mov	r1, r6
 8019334:	ed95 0a18 	vldr	s0, [r5, #96]	; 0x60
 8019338:	4620      	mov	r0, r4
 801933a:	f7f8 fc61 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_min_erpm, &ind);
 801933e:	4631      	mov	r1, r6
 8019340:	ed95 0a1f 	vldr	s0, [r5, #124]	; 0x7c
 8019344:	4620      	mov	r0, r4
 8019346:	f7f8 fc5b 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_min_erpm_cycle_int_limit, &ind);
 801934a:	4631      	mov	r1, r6
 801934c:	ed95 0a20 	vldr	s0, [r5, #128]	; 0x80
 8019350:	4620      	mov	r0, r4
 8019352:	f7f8 fc55 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_max_fullbreak_current_dir_change, &ind);
 8019356:	4631      	mov	r1, r6
 8019358:	ed95 0a21 	vldr	s0, [r5, #132]	; 0x84
 801935c:	4620      	mov	r0, r4
 801935e:	f7f8 fc4f 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_cycle_int_limit, &ind);
 8019362:	4631      	mov	r1, r6
 8019364:	ed95 0a22 	vldr	s0, [r5, #136]	; 0x88
 8019368:	4620      	mov	r0, r4
 801936a:	f7f8 fc49 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_phase_advance_at_br, &ind);
 801936e:	4631      	mov	r1, r6
 8019370:	ed95 0a23 	vldr	s0, [r5, #140]	; 0x8c
 8019374:	4620      	mov	r0, r4
 8019376:	f7f8 fc43 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_cycle_int_rpm_br, &ind);
 801937a:	4631      	mov	r1, r6
 801937c:	ed95 0a24 	vldr	s0, [r5, #144]	; 0x90
 8019380:	4620      	mov	r0, r4
 8019382:	f7f8 fc3d 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.sl_bemf_coupling_k, &ind);
 8019386:	4631      	mov	r1, r6
 8019388:	ed95 0a25 	vldr	s0, [r5, #148]	; 0x94
 801938c:	4620      	mov	r0, r4
 801938e:	f7f8 fc37 	bl	8011c00 <buffer_append_float32_auto>
		memcpy(send_buffer + ind, mcconf.hall_table, 8);
 8019392:	9b02      	ldr	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.hall_sl_erpm, &ind);
 8019394:	ed95 0a28 	vldr	s0, [r5, #160]	; 0xa0
		memcpy(send_buffer + ind, mcconf.hall_table, 8);
 8019398:	f105 0298 	add.w	r2, r5, #152	; 0x98
 801939c:	ca03      	ldmia	r2!, {r0, r1}
 801939e:	18e2      	adds	r2, r4, r3
 80193a0:	50e0      	str	r0, [r4, r3]
		ind += 8;
 80193a2:	3308      	adds	r3, #8
		memcpy(send_buffer + ind, mcconf.hall_table, 8);
 80193a4:	6051      	str	r1, [r2, #4]
		buffer_append_float32_auto(send_buffer, mcconf.hall_sl_erpm, &ind);
 80193a6:	4620      	mov	r0, r4
 80193a8:	4631      	mov	r1, r6
		ind += 8;
 80193aa:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.hall_sl_erpm, &ind);
 80193ac:	f7f8 fc28 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_current_kp, &ind);
 80193b0:	4631      	mov	r1, r6
 80193b2:	ed95 0a29 	vldr	s0, [r5, #164]	; 0xa4
 80193b6:	4620      	mov	r0, r4
 80193b8:	f7f8 fc22 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_current_ki, &ind);
 80193bc:	4631      	mov	r1, r6
 80193be:	ed95 0a2a 	vldr	s0, [r5, #168]	; 0xa8
 80193c2:	4620      	mov	r0, r4
 80193c4:	f7f8 fc1c 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_f_sw, &ind);
 80193c8:	4631      	mov	r1, r6
 80193ca:	ed95 0a2b 	vldr	s0, [r5, #172]	; 0xac
 80193ce:	4620      	mov	r0, r4
 80193d0:	f7f8 fc16 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_dt_us, &ind);
 80193d4:	4631      	mov	r1, r6
 80193d6:	ed95 0a2c 	vldr	s0, [r5, #176]	; 0xb0
 80193da:	4620      	mov	r0, r4
 80193dc:	f7f8 fc10 	bl	8011c00 <buffer_append_float32_auto>
		send_buffer[ind++] = mcconf.foc_encoder_inverted;
 80193e0:	9b02      	ldr	r3, [sp, #8]
 80193e2:	f895 20b8 	ldrb.w	r2, [r5, #184]	; 0xb8
 80193e6:	54e2      	strb	r2, [r4, r3]
		buffer_append_float32_auto(send_buffer, mcconf.foc_encoder_offset, &ind);
 80193e8:	ed95 0a2d 	vldr	s0, [r5, #180]	; 0xb4
		send_buffer[ind++] = mcconf.foc_encoder_inverted;
 80193ec:	3301      	adds	r3, #1
		buffer_append_float32_auto(send_buffer, mcconf.foc_encoder_offset, &ind);
 80193ee:	4631      	mov	r1, r6
 80193f0:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.foc_encoder_inverted;
 80193f2:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.foc_encoder_offset, &ind);
 80193f4:	f7f8 fc04 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_encoder_ratio, &ind);
 80193f8:	4631      	mov	r1, r6
 80193fa:	ed95 0a2f 	vldr	s0, [r5, #188]	; 0xbc
 80193fe:	4620      	mov	r0, r4
 8019400:	f7f8 fbfe 	bl	8011c00 <buffer_append_float32_auto>
		send_buffer[ind++] = mcconf.foc_sensor_mode;
 8019404:	9b02      	ldr	r3, [sp, #8]
 8019406:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
 801940a:	54e2      	strb	r2, [r4, r3]
		buffer_append_float32_auto(send_buffer, mcconf.foc_pll_kp, &ind);
 801940c:	ed95 0a35 	vldr	s0, [r5, #212]	; 0xd4
		send_buffer[ind++] = mcconf.foc_sensor_mode;
 8019410:	3301      	adds	r3, #1
		buffer_append_float32_auto(send_buffer, mcconf.foc_pll_kp, &ind);
 8019412:	4631      	mov	r1, r6
 8019414:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.foc_sensor_mode;
 8019416:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.foc_pll_kp, &ind);
 8019418:	f7f8 fbf2 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_pll_ki, &ind);
 801941c:	4631      	mov	r1, r6
 801941e:	ed95 0a36 	vldr	s0, [r5, #216]	; 0xd8
 8019422:	4620      	mov	r0, r4
 8019424:	f7f8 fbec 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_motor_l, &ind);
 8019428:	4631      	mov	r1, r6
 801942a:	ed95 0a30 	vldr	s0, [r5, #192]	; 0xc0
 801942e:	4620      	mov	r0, r4
 8019430:	f7f8 fbe6 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_motor_r, &ind);
 8019434:	4631      	mov	r1, r6
 8019436:	ed95 0a31 	vldr	s0, [r5, #196]	; 0xc4
 801943a:	4620      	mov	r0, r4
 801943c:	f7f8 fbe0 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_motor_flux_linkage, &ind);
 8019440:	4631      	mov	r1, r6
 8019442:	ed95 0a32 	vldr	s0, [r5, #200]	; 0xc8
 8019446:	4620      	mov	r0, r4
 8019448:	f7f8 fbda 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_observer_gain, &ind);
 801944c:	4631      	mov	r1, r6
 801944e:	ed95 0a33 	vldr	s0, [r5, #204]	; 0xcc
 8019452:	4620      	mov	r0, r4
 8019454:	f7f8 fbd4 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_observer_gain_slow, &ind);
 8019458:	4631      	mov	r1, r6
 801945a:	ed95 0a34 	vldr	s0, [r5, #208]	; 0xd0
 801945e:	4620      	mov	r0, r4
 8019460:	f7f8 fbce 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_duty_dowmramp_kp, &ind);
 8019464:	4631      	mov	r1, r6
 8019466:	ed95 0a37 	vldr	s0, [r5, #220]	; 0xdc
 801946a:	4620      	mov	r0, r4
 801946c:	f7f8 fbc8 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_duty_dowmramp_ki, &ind);
 8019470:	4631      	mov	r1, r6
 8019472:	ed95 0a38 	vldr	s0, [r5, #224]	; 0xe0
 8019476:	4620      	mov	r0, r4
 8019478:	f7f8 fbc2 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_openloop_rpm, &ind);
 801947c:	4631      	mov	r1, r6
 801947e:	ed95 0a39 	vldr	s0, [r5, #228]	; 0xe4
 8019482:	4620      	mov	r0, r4
 8019484:	f7f8 fbbc 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_openloop_hyst, &ind);
 8019488:	4631      	mov	r1, r6
 801948a:	ed95 0a3a 	vldr	s0, [r5, #232]	; 0xe8
 801948e:	4620      	mov	r0, r4
 8019490:	f7f8 fbb6 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_openloop_time, &ind);
 8019494:	4631      	mov	r1, r6
 8019496:	ed95 0a3b 	vldr	s0, [r5, #236]	; 0xec
 801949a:	4620      	mov	r0, r4
 801949c:	f7f8 fbb0 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_d_current_duty, &ind);
 80194a0:	4631      	mov	r1, r6
 80194a2:	ed95 0a3c 	vldr	s0, [r5, #240]	; 0xf0
 80194a6:	4620      	mov	r0, r4
 80194a8:	f7f8 fbaa 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_d_current_factor, &ind);
 80194ac:	4631      	mov	r1, r6
 80194ae:	ed95 0a3d 	vldr	s0, [r5, #244]	; 0xf4
 80194b2:	4620      	mov	r0, r4
 80194b4:	f7f8 fba4 	bl	8011c00 <buffer_append_float32_auto>
		memcpy(send_buffer + ind, mcconf.foc_hall_table, 8);
 80194b8:	462a      	mov	r2, r5
 80194ba:	9b02      	ldr	r3, [sp, #8]
 80194bc:	f852 1ff9 	ldr.w	r1, [r2, #249]!
 80194c0:	50e1      	str	r1, [r4, r3]
 80194c2:	6857      	ldr	r7, [r2, #4]
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_erpm, &ind);
 80194c4:	ed95 0a41 	vldr	s0, [r5, #260]	; 0x104
		memcpy(send_buffer + ind, mcconf.foc_hall_table, 8);
 80194c8:	18e2      	adds	r2, r4, r3
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_erpm, &ind);
 80194ca:	4631      	mov	r1, r6
		ind += 8;
 80194cc:	3308      	adds	r3, #8
		memcpy(send_buffer + ind, mcconf.foc_hall_table, 8);
 80194ce:	6057      	str	r7, [r2, #4]
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_erpm, &ind);
 80194d0:	4620      	mov	r0, r4
		ind += 8;
 80194d2:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.foc_sl_erpm, &ind);
 80194d4:	f7f8 fb94 	bl	8011c00 <buffer_append_float32_auto>
		send_buffer[ind++] = mcconf.foc_sample_v0_v7;
 80194d8:	9b02      	ldr	r3, [sp, #8]
 80194da:	f895 2108 	ldrb.w	r2, [r5, #264]	; 0x108
 80194de:	54e2      	strb	r2, [r4, r3]
		send_buffer[ind++] = mcconf.foc_sample_high_current;
 80194e0:	18e2      	adds	r2, r4, r3
 80194e2:	f895 7109 	ldrb.w	r7, [r5, #265]	; 0x109
		buffer_append_float32_auto(send_buffer, mcconf.foc_sat_comp, &ind);
 80194e6:	ed95 0a43 	vldr	s0, [r5, #268]	; 0x10c
		send_buffer[ind++] = mcconf.foc_sample_high_current;
 80194ea:	7057      	strb	r7, [r2, #1]
 80194ec:	3302      	adds	r3, #2
		buffer_append_float32_auto(send_buffer, mcconf.foc_sat_comp, &ind);
 80194ee:	4631      	mov	r1, r6
 80194f0:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.foc_sample_high_current;
 80194f2:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.foc_sat_comp, &ind);
 80194f4:	f7f8 fb84 	bl	8011c00 <buffer_append_float32_auto>
		send_buffer[ind++] = mcconf.foc_temp_comp;
 80194f8:	9b02      	ldr	r3, [sp, #8]
 80194fa:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
 80194fe:	54e2      	strb	r2, [r4, r3]
		buffer_append_float32_auto(send_buffer, mcconf.foc_temp_comp_base_temp, &ind);
 8019500:	ed95 0a45 	vldr	s0, [r5, #276]	; 0x114
		send_buffer[ind++] = mcconf.foc_temp_comp;
 8019504:	3301      	adds	r3, #1
		buffer_append_float32_auto(send_buffer, mcconf.foc_temp_comp_base_temp, &ind);
 8019506:	4631      	mov	r1, r6
 8019508:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.foc_temp_comp;
 801950a:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.foc_temp_comp_base_temp, &ind);
 801950c:	f7f8 fb78 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.s_pid_kp, &ind);
 8019510:	4631      	mov	r1, r6
 8019512:	ed95 0a46 	vldr	s0, [r5, #280]	; 0x118
 8019516:	4620      	mov	r0, r4
 8019518:	f7f8 fb72 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.s_pid_ki, &ind);
 801951c:	4631      	mov	r1, r6
 801951e:	ed95 0a47 	vldr	s0, [r5, #284]	; 0x11c
 8019522:	4620      	mov	r0, r4
 8019524:	f7f8 fb6c 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.s_pid_kd, &ind);
 8019528:	4631      	mov	r1, r6
 801952a:	ed95 0a48 	vldr	s0, [r5, #288]	; 0x120
 801952e:	4620      	mov	r0, r4
 8019530:	f7f8 fb66 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.s_pid_min_erpm, &ind);
 8019534:	4631      	mov	r1, r6
 8019536:	ed95 0a49 	vldr	s0, [r5, #292]	; 0x124
 801953a:	4620      	mov	r0, r4
 801953c:	f7f8 fb60 	bl	8011c00 <buffer_append_float32_auto>
		send_buffer[ind++] = mcconf.s_pid_allow_braking;
 8019540:	9b02      	ldr	r3, [sp, #8]
 8019542:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 8019546:	54e2      	strb	r2, [r4, r3]
		buffer_append_float32_auto(send_buffer, mcconf.p_pid_kp, &ind);
 8019548:	ed95 0a4b 	vldr	s0, [r5, #300]	; 0x12c
		send_buffer[ind++] = mcconf.s_pid_allow_braking;
 801954c:	3301      	adds	r3, #1
		buffer_append_float32_auto(send_buffer, mcconf.p_pid_kp, &ind);
 801954e:	4631      	mov	r1, r6
 8019550:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.s_pid_allow_braking;
 8019552:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.p_pid_kp, &ind);
 8019554:	f7f8 fb54 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.p_pid_ki, &ind);
 8019558:	4631      	mov	r1, r6
 801955a:	ed95 0a4c 	vldr	s0, [r5, #304]	; 0x130
 801955e:	4620      	mov	r0, r4
 8019560:	f7f8 fb4e 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.p_pid_kd, &ind);
 8019564:	4631      	mov	r1, r6
 8019566:	ed95 0a4d 	vldr	s0, [r5, #308]	; 0x134
 801956a:	4620      	mov	r0, r4
 801956c:	f7f8 fb48 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.p_pid_ang_div, &ind);
 8019570:	4631      	mov	r1, r6
 8019572:	ed95 0a4e 	vldr	s0, [r5, #312]	; 0x138
 8019576:	4620      	mov	r0, r4
 8019578:	f7f8 fb42 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.cc_startup_boost_duty, &ind);
 801957c:	4631      	mov	r1, r6
 801957e:	ed95 0a4f 	vldr	s0, [r5, #316]	; 0x13c
 8019582:	4620      	mov	r0, r4
 8019584:	f7f8 fb3c 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.cc_min_current, &ind);
 8019588:	4631      	mov	r1, r6
 801958a:	ed95 0a50 	vldr	s0, [r5, #320]	; 0x140
 801958e:	4620      	mov	r0, r4
 8019590:	f7f8 fb36 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.cc_gain, &ind);
 8019594:	4631      	mov	r1, r6
 8019596:	ed95 0a51 	vldr	s0, [r5, #324]	; 0x144
 801959a:	4620      	mov	r0, r4
 801959c:	f7f8 fb30 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.cc_ramp_step_max, &ind);
 80195a0:	ed95 0a52 	vldr	s0, [r5, #328]	; 0x148
 80195a4:	4631      	mov	r1, r6
 80195a6:	4620      	mov	r0, r4
 80195a8:	f7f8 fb2a 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_int32(send_buffer, mcconf.m_fault_stop_time_ms, &ind);
 80195ac:	4632      	mov	r2, r6
 80195ae:	f8d5 114c 	ldr.w	r1, [r5, #332]	; 0x14c
 80195b2:	4620      	mov	r0, r4
 80195b4:	f7f8 facc 	bl	8011b50 <buffer_append_int32>
		buffer_append_float32_auto(send_buffer, mcconf.m_duty_ramp_step, &ind);
 80195b8:	4631      	mov	r1, r6
 80195ba:	ed95 0a54 	vldr	s0, [r5, #336]	; 0x150
 80195be:	e003      	b.n	80195c8 <commands_process_packet+0xb88>
 80195c0:	20008d00 	.word	0x20008d00
 80195c4:	200090e8 	.word	0x200090e8
 80195c8:	4620      	mov	r0, r4
 80195ca:	f7f8 fb19 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.m_current_backoff_gain, &ind);
 80195ce:	ed95 0a55 	vldr	s0, [r5, #340]	; 0x154
 80195d2:	4631      	mov	r1, r6
 80195d4:	4620      	mov	r0, r4
 80195d6:	f7f8 fb13 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_uint32(send_buffer, mcconf.m_encoder_counts, &ind);
 80195da:	4632      	mov	r2, r6
 80195dc:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
 80195e0:	4620      	mov	r0, r4
 80195e2:	f7f8 facd 	bl	8011b80 <buffer_append_uint32>
		send_buffer[ind++] = mcconf.m_sensor_port_mode;
 80195e6:	9b02      	ldr	r3, [sp, #8]
 80195e8:	f895 215c 	ldrb.w	r2, [r5, #348]	; 0x15c
 80195ec:	54e2      	strb	r2, [r4, r3]
		send_buffer[ind++] = mcconf.m_invert_direction;
 80195ee:	18e2      	adds	r2, r4, r3
 80195f0:	f895 015d 	ldrb.w	r0, [r5, #349]	; 0x15d
 80195f4:	7050      	strb	r0, [r2, #1]
		send_buffer[ind++] = mcconf.m_drv8301_oc_adj;
 80195f6:	3304      	adds	r3, #4
		buffer_append_float32_auto(send_buffer, mcconf.m_bldc_f_sw_min, &ind);
 80195f8:	ed95 0a59 	vldr	s0, [r5, #356]	; 0x164
		send_buffer[ind++] = mcconf.m_drv8301_oc_mode;
 80195fc:	f895 715e 	ldrb.w	r7, [r5, #350]	; 0x15e
		send_buffer[ind++] = mcconf.m_drv8301_oc_adj;
 8019600:	9302      	str	r3, [sp, #8]
		buffer_append_float32_auto(send_buffer, mcconf.m_bldc_f_sw_min, &ind);
 8019602:	4631      	mov	r1, r6
		send_buffer[ind++] = mcconf.m_drv8301_oc_adj;
 8019604:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 8019608:	70d3      	strb	r3, [r2, #3]
		buffer_append_float32_auto(send_buffer, mcconf.m_bldc_f_sw_min, &ind);
 801960a:	4620      	mov	r0, r4
		send_buffer[ind++] = mcconf.m_drv8301_oc_mode;
 801960c:	7097      	strb	r7, [r2, #2]
		buffer_append_float32_auto(send_buffer, mcconf.m_bldc_f_sw_min, &ind);
 801960e:	f7f8 faf7 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.m_bldc_f_sw_max, &ind);
 8019612:	4631      	mov	r1, r6
 8019614:	ed95 0a5a 	vldr	s0, [r5, #360]	; 0x168
 8019618:	4620      	mov	r0, r4
 801961a:	f7f8 faf1 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.m_dc_f_sw, &ind);
 801961e:	4631      	mov	r1, r6
 8019620:	ed95 0a5b 	vldr	s0, [r5, #364]	; 0x16c
 8019624:	4620      	mov	r0, r4
 8019626:	f7f8 faeb 	bl	8011c00 <buffer_append_float32_auto>
		buffer_append_float32_auto(send_buffer, mcconf.m_ntc_motor_beta, &ind);
 801962a:	4631      	mov	r1, r6
 801962c:	ed95 0a5c 	vldr	s0, [r5, #368]	; 0x170
 8019630:	4620      	mov	r0, r4
 8019632:	f7f8 fae5 	bl	8011c00 <buffer_append_float32_auto>
	if (send_func) {
 8019636:	4b04      	ldr	r3, [pc, #16]	; (8019648 <commands_process_packet+0xc08>)
		commands_send_packet(send_buffer, ind);
 8019638:	9902      	ldr	r1, [sp, #8]
	if (send_func) {
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	2b00      	cmp	r3, #0
 801963e:	f47f aa86 	bne.w	8018b4e <commands_process_packet+0x10e>
 8019642:	f7ff ba86 	b.w	8018b52 <commands_process_packet+0x112>
 8019646:	bf00      	nop
 8019648:	200094e8 	.word	0x200094e8
		mcconf = *mc_interface_get_configuration();
 801964c:	f001 fef8 	bl	801b440 <mc_interface_get_configuration>
 8019650:	4de5      	ldr	r5, [pc, #916]	; (80199e8 <commands_process_packet+0xfa8>)
		mcconf.sensor_mode = data[ind++];
 8019652:	ae36      	add	r6, sp, #216	; 0xd8
		mcconf = *mc_interface_get_configuration();
 8019654:	4601      	mov	r1, r0
 8019656:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801965a:	4628      	mov	r0, r5
 801965c:	f7f3 fa58 	bl	800cb10 <memcpy>
		mcconf.sensor_mode = data[ind++];
 8019660:	2304      	movs	r3, #4
 8019662:	f846 3dd0 	str.w	r3, [r6, #-208]!
		mcconf.pwm_mode = data[ind++];
 8019666:	7879      	ldrb	r1, [r7, #1]
		mcconf.comm_mode = data[ind++];
 8019668:	f897 e002 	ldrb.w	lr, [r7, #2]
		mcconf.motor_type = data[ind++];
 801966c:	78fa      	ldrb	r2, [r7, #3]
		mcconf.sensor_mode = data[ind++];
 801966e:	793b      	ldrb	r3, [r7, #4]
		mcconf.pwm_mode = data[ind++];
 8019670:	7029      	strb	r1, [r5, #0]
		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8019672:	4620      	mov	r0, r4
 8019674:	4631      	mov	r1, r6
		mcconf.comm_mode = data[ind++];
 8019676:	f885 e001 	strb.w	lr, [r5, #1]
		mcconf.motor_type = data[ind++];
 801967a:	70aa      	strb	r2, [r5, #2]
		mcconf.sensor_mode = data[ind++];
 801967c:	70eb      	strb	r3, [r5, #3]
		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 801967e:	f7f8 fb5f 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8019682:	4631      	mov	r1, r6
 8019684:	4620      	mov	r0, r4
		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8019686:	ed85 0a01 	vstr	s0, [r5, #4]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 801968a:	f7f8 fb59 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 801968e:	4631      	mov	r1, r6
 8019690:	4620      	mov	r0, r4
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8019692:	ed85 0a02 	vstr	s0, [r5, #8]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8019696:	f7f8 fb53 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 801969a:	4631      	mov	r1, r6
 801969c:	4620      	mov	r0, r4
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 801969e:	ed85 0a03 	vstr	s0, [r5, #12]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 80196a2:	f7f8 fb4d 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 80196a6:	4631      	mov	r1, r6
 80196a8:	4620      	mov	r0, r4
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 80196aa:	ed85 0a04 	vstr	s0, [r5, #16]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 80196ae:	f7f8 fb47 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 80196b2:	4631      	mov	r1, r6
 80196b4:	4620      	mov	r0, r4
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 80196b6:	ed85 0a05 	vstr	s0, [r5, #20]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 80196ba:	f7f8 fb41 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 80196be:	4631      	mov	r1, r6
 80196c0:	4620      	mov	r0, r4
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 80196c2:	ed85 0a06 	vstr	s0, [r5, #24]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 80196c6:	f7f8 fb3b 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 80196ca:	4631      	mov	r1, r6
 80196cc:	4620      	mov	r0, r4
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 80196ce:	ed85 0a07 	vstr	s0, [r5, #28]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 80196d2:	f7f8 fb35 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 80196d6:	4631      	mov	r1, r6
 80196d8:	4620      	mov	r0, r4
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 80196da:	ed85 0a08 	vstr	s0, [r5, #32]
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 80196de:	f7f8 fb2f 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 80196e2:	4631      	mov	r1, r6
 80196e4:	4620      	mov	r0, r4
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 80196e6:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 80196ea:	f7f8 fb29 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 80196ee:	4631      	mov	r1, r6
 80196f0:	4620      	mov	r0, r4
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 80196f2:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 80196f6:	f7f8 fb23 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 80196fa:	4631      	mov	r1, r6
 80196fc:	4620      	mov	r0, r4
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 80196fe:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8019702:	f7f8 fb1d 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8019706:	4631      	mov	r1, r6
 8019708:	4620      	mov	r0, r4
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 801970a:	ed85 0a0c 	vstr	s0, [r5, #48]	; 0x30
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 801970e:	f7f8 fb17 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8019712:	4631      	mov	r1, r6
 8019714:	4620      	mov	r0, r4
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8019716:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 801971a:	f7f8 fb11 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_slow_abs_current = data[ind++];
 801971e:	9b02      	ldr	r3, [sp, #8]
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8019720:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
		mcconf.l_slow_abs_current = data[ind++];
 8019724:	5ce2      	ldrb	r2, [r4, r3]
 8019726:	3200      	adds	r2, #0
 8019728:	bf18      	it	ne
 801972a:	2201      	movne	r2, #1
 801972c:	3301      	adds	r3, #1
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 801972e:	4631      	mov	r1, r6
 8019730:	4620      	mov	r0, r4
		mcconf.l_slow_abs_current = data[ind++];
 8019732:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 8019736:	9302      	str	r3, [sp, #8]
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8019738:	f7f8 fb02 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 801973c:	4631      	mov	r1, r6
 801973e:	4620      	mov	r0, r4
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8019740:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8019744:	f7f8 fafc 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8019748:	4631      	mov	r1, r6
 801974a:	4620      	mov	r0, r4
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 801974c:	ed85 0a11 	vstr	s0, [r5, #68]	; 0x44
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8019750:	f7f8 faf6 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8019754:	4631      	mov	r1, r6
 8019756:	4620      	mov	r0, r4
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8019758:	ed85 0a12 	vstr	s0, [r5, #72]	; 0x48
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 801975c:	f7f8 faf0 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8019760:	4631      	mov	r1, r6
 8019762:	4620      	mov	r0, r4
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8019764:	ed85 0a13 	vstr	s0, [r5, #76]	; 0x4c
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8019768:	f7f8 faea 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 801976c:	4631      	mov	r1, r6
 801976e:	4620      	mov	r0, r4
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8019770:	ed85 0a14 	vstr	s0, [r5, #80]	; 0x50
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8019774:	f7f8 fae4 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8019778:	4631      	mov	r1, r6
 801977a:	4620      	mov	r0, r4
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 801977c:	ed85 0a15 	vstr	s0, [r5, #84]	; 0x54
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8019780:	f7f8 fade 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8019784:	4631      	mov	r1, r6
 8019786:	4620      	mov	r0, r4
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8019788:	ed85 0a16 	vstr	s0, [r5, #88]	; 0x58
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 801978c:	f7f8 fad8 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8019790:	4631      	mov	r1, r6
 8019792:	4620      	mov	r0, r4
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8019794:	ed85 0a17 	vstr	s0, [r5, #92]	; 0x5c
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8019798:	f7f8 fad2 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 801979c:	68e8      	ldr	r0, [r5, #12]
		mcconf.lo_current_max = mcconf.l_current_max;
 801979e:	686a      	ldr	r2, [r5, #4]
		mcconf.lo_current_min = mcconf.l_current_min;
 80197a0:	68ab      	ldr	r3, [r5, #8]
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 80197a2:	692f      	ldr	r7, [r5, #16]
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 80197a4:	66e8      	str	r0, [r5, #108]	; 0x6c
		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 80197a6:	4631      	mov	r1, r6
 80197a8:	4620      	mov	r0, r4
		mcconf.lo_current_max = mcconf.l_current_max;
 80197aa:	666a      	str	r2, [r5, #100]	; 0x64
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 80197ac:	676a      	str	r2, [r5, #116]	; 0x74
		mcconf.lo_current_min = mcconf.l_current_min;
 80197ae:	66ab      	str	r3, [r5, #104]	; 0x68
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 80197b0:	67ab      	str	r3, [r5, #120]	; 0x78
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 80197b2:	672f      	str	r7, [r5, #112]	; 0x70
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 80197b4:	ed85 0a18 	vstr	s0, [r5, #96]	; 0x60
		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 80197b8:	f7f8 fac2 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80197bc:	4631      	mov	r1, r6
 80197be:	4620      	mov	r0, r4
		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 80197c0:	ed85 0a1f 	vstr	s0, [r5, #124]	; 0x7c
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80197c4:	f7f8 fabc 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 80197c8:	4631      	mov	r1, r6
 80197ca:	4620      	mov	r0, r4
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80197cc:	ed85 0a20 	vstr	s0, [r5, #128]	; 0x80
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 80197d0:	f7f8 fab6 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80197d4:	4631      	mov	r1, r6
 80197d6:	4620      	mov	r0, r4
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 80197d8:	ed85 0a21 	vstr	s0, [r5, #132]	; 0x84
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80197dc:	f7f8 fab0 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 80197e0:	4631      	mov	r1, r6
 80197e2:	4620      	mov	r0, r4
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80197e4:	ed85 0a22 	vstr	s0, [r5, #136]	; 0x88
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 80197e8:	f7f8 faaa 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 80197ec:	4631      	mov	r1, r6
 80197ee:	4620      	mov	r0, r4
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 80197f0:	ed85 0a23 	vstr	s0, [r5, #140]	; 0x8c
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 80197f4:	f7f8 faa4 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 80197f8:	4631      	mov	r1, r6
 80197fa:	4620      	mov	r0, r4
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 80197fc:	ed85 0a24 	vstr	s0, [r5, #144]	; 0x90
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8019800:	f7f8 fa9e 	bl	8011d40 <buffer_get_float32_auto>
		memcpy(mcconf.hall_table, data + ind, 8);
 8019804:	9b02      	ldr	r3, [sp, #8]
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8019806:	ed85 0a25 	vstr	s0, [r5, #148]	; 0x94
		memcpy(mcconf.hall_table, data + ind, 8);
 801980a:	18e1      	adds	r1, r4, r3
 801980c:	f105 0298 	add.w	r2, r5, #152	; 0x98
 8019810:	6808      	ldr	r0, [r1, #0]
 8019812:	6849      	ldr	r1, [r1, #4]
		ind += 8;
 8019814:	3308      	adds	r3, #8
		memcpy(mcconf.hall_table, data + ind, 8);
 8019816:	c203      	stmia	r2!, {r0, r1}
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8019818:	4631      	mov	r1, r6
 801981a:	4620      	mov	r0, r4
		ind += 8;
 801981c:	9302      	str	r3, [sp, #8]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 801981e:	f7f8 fa8f 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8019822:	4631      	mov	r1, r6
 8019824:	4620      	mov	r0, r4
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8019826:	ed85 0a28 	vstr	s0, [r5, #160]	; 0xa0
		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 801982a:	f7f8 fa89 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 801982e:	4631      	mov	r1, r6
 8019830:	4620      	mov	r0, r4
		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8019832:	ed85 0a29 	vstr	s0, [r5, #164]	; 0xa4
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8019836:	f7f8 fa83 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 801983a:	4631      	mov	r1, r6
 801983c:	4620      	mov	r0, r4
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 801983e:	ed85 0a2a 	vstr	s0, [r5, #168]	; 0xa8
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 8019842:	f7f8 fa7d 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8019846:	4631      	mov	r1, r6
 8019848:	4620      	mov	r0, r4
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 801984a:	ed85 0a2b 	vstr	s0, [r5, #172]	; 0xac
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 801984e:	f7f8 fa77 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_encoder_inverted = data[ind++];
 8019852:	9b02      	ldr	r3, [sp, #8]
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8019854:	ed85 0a2c 	vstr	s0, [r5, #176]	; 0xb0
		mcconf.foc_encoder_inverted = data[ind++];
 8019858:	5ce2      	ldrb	r2, [r4, r3]
 801985a:	3200      	adds	r2, #0
 801985c:	bf18      	it	ne
 801985e:	2201      	movne	r2, #1
 8019860:	3301      	adds	r3, #1
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8019862:	4631      	mov	r1, r6
 8019864:	4620      	mov	r0, r4
		mcconf.foc_encoder_inverted = data[ind++];
 8019866:	f885 20b8 	strb.w	r2, [r5, #184]	; 0xb8
 801986a:	9302      	str	r3, [sp, #8]
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 801986c:	f7f8 fa68 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 8019870:	4631      	mov	r1, r6
 8019872:	4620      	mov	r0, r4
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8019874:	ed85 0a2d 	vstr	s0, [r5, #180]	; 0xb4
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 8019878:	f7f8 fa62 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_sensor_mode = data[ind++];
 801987c:	9b02      	ldr	r3, [sp, #8]
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 801987e:	ed85 0a2f 	vstr	s0, [r5, #188]	; 0xbc
		mcconf.foc_sensor_mode = data[ind++];
 8019882:	5ce2      	ldrb	r2, [r4, r3]
 8019884:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
 8019888:	3301      	adds	r3, #1
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 801988a:	4631      	mov	r1, r6
 801988c:	4620      	mov	r0, r4
		mcconf.foc_sensor_mode = data[ind++];
 801988e:	9302      	str	r3, [sp, #8]
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 8019890:	f7f8 fa56 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 8019894:	4631      	mov	r1, r6
 8019896:	4620      	mov	r0, r4
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 8019898:	ed85 0a35 	vstr	s0, [r5, #212]	; 0xd4
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 801989c:	f7f8 fa50 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80198a0:	4631      	mov	r1, r6
 80198a2:	4620      	mov	r0, r4
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80198a4:	ed85 0a36 	vstr	s0, [r5, #216]	; 0xd8
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80198a8:	f7f8 fa4a 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80198ac:	4631      	mov	r1, r6
 80198ae:	4620      	mov	r0, r4
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80198b0:	ed85 0a30 	vstr	s0, [r5, #192]	; 0xc0
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80198b4:	f7f8 fa44 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 80198b8:	4631      	mov	r1, r6
 80198ba:	4620      	mov	r0, r4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80198bc:	ed85 0a31 	vstr	s0, [r5, #196]	; 0xc4
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 80198c0:	f7f8 fa3e 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 80198c4:	4631      	mov	r1, r6
 80198c6:	4620      	mov	r0, r4
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 80198c8:	ed85 0a32 	vstr	s0, [r5, #200]	; 0xc8
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 80198cc:	f7f8 fa38 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 80198d0:	4631      	mov	r1, r6
 80198d2:	4620      	mov	r0, r4
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 80198d4:	ed85 0a33 	vstr	s0, [r5, #204]	; 0xcc
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 80198d8:	f7f8 fa32 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 80198dc:	4631      	mov	r1, r6
 80198de:	4620      	mov	r0, r4
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 80198e0:	ed85 0a34 	vstr	s0, [r5, #208]	; 0xd0
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 80198e4:	f7f8 fa2c 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 80198e8:	4631      	mov	r1, r6
 80198ea:	4620      	mov	r0, r4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 80198ec:	ed85 0a37 	vstr	s0, [r5, #220]	; 0xdc
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 80198f0:	f7f8 fa26 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 80198f4:	4631      	mov	r1, r6
 80198f6:	4620      	mov	r0, r4
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 80198f8:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 80198fc:	f7f8 fa20 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8019900:	4631      	mov	r1, r6
 8019902:	4620      	mov	r0, r4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 8019904:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8019908:	f7f8 fa1a 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 801990c:	4631      	mov	r1, r6
 801990e:	4620      	mov	r0, r4
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8019910:	ed85 0a3a 	vstr	s0, [r5, #232]	; 0xe8
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 8019914:	f7f8 fa14 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8019918:	4631      	mov	r1, r6
 801991a:	4620      	mov	r0, r4
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 801991c:	ed85 0a3b 	vstr	s0, [r5, #236]	; 0xec
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8019920:	f7f8 fa0e 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 8019924:	4631      	mov	r1, r6
 8019926:	4620      	mov	r0, r4
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8019928:	ed85 0a3c 	vstr	s0, [r5, #240]	; 0xf0
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 801992c:	f7f8 fa08 	bl	8011d40 <buffer_get_float32_auto>
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8019930:	9b02      	ldr	r3, [sp, #8]
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 8019932:	ed85 0a3d 	vstr	s0, [r5, #244]	; 0xf4
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8019936:	18e2      	adds	r2, r4, r3
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8019938:	4631      	mov	r1, r6
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 801993a:	6817      	ldr	r7, [r2, #0]
 801993c:	6852      	ldr	r2, [r2, #4]
 801993e:	f8c5 20fd 	str.w	r2, [r5, #253]	; 0xfd
		ind += 8;
 8019942:	3308      	adds	r3, #8
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8019944:	4620      	mov	r0, r4
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8019946:	f8c5 70f9 	str.w	r7, [r5, #249]	; 0xf9
		ind += 8;
 801994a:	9302      	str	r3, [sp, #8]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 801994c:	f7f8 f9f8 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_sample_v0_v7 = data[ind++];
 8019950:	9b02      	ldr	r3, [sp, #8]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8019952:	ed85 0a41 	vstr	s0, [r5, #260]	; 0x104
		mcconf.foc_sample_v0_v7 = data[ind++];
 8019956:	5ce2      	ldrb	r2, [r4, r3]
 8019958:	3200      	adds	r2, #0
 801995a:	f103 0101 	add.w	r1, r3, #1
 801995e:	bf18      	it	ne
 8019960:	2201      	movne	r2, #1
 8019962:	f885 2108 	strb.w	r2, [r5, #264]	; 0x108
		mcconf.foc_sample_high_current = data[ind++];
 8019966:	5c62      	ldrb	r2, [r4, r1]
 8019968:	3200      	adds	r2, #0
 801996a:	bf18      	it	ne
 801996c:	2201      	movne	r2, #1
 801996e:	3302      	adds	r3, #2
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8019970:	4631      	mov	r1, r6
 8019972:	4620      	mov	r0, r4
		mcconf.foc_sample_high_current = data[ind++];
 8019974:	f885 2109 	strb.w	r2, [r5, #265]	; 0x109
 8019978:	9302      	str	r3, [sp, #8]
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 801997a:	f7f8 f9e1 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.foc_temp_comp = data[ind++];
 801997e:	9b02      	ldr	r3, [sp, #8]
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8019980:	ed85 0a43 	vstr	s0, [r5, #268]	; 0x10c
		mcconf.foc_temp_comp = data[ind++];
 8019984:	5ce2      	ldrb	r2, [r4, r3]
 8019986:	3200      	adds	r2, #0
 8019988:	bf18      	it	ne
 801998a:	2201      	movne	r2, #1
 801998c:	3301      	adds	r3, #1
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 801998e:	4631      	mov	r1, r6
 8019990:	4620      	mov	r0, r4
		mcconf.foc_temp_comp = data[ind++];
 8019992:	f885 2110 	strb.w	r2, [r5, #272]	; 0x110
 8019996:	9302      	str	r3, [sp, #8]
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 8019998:	f7f8 f9d2 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 801999c:	4631      	mov	r1, r6
 801999e:	4620      	mov	r0, r4
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 80199a0:	ed85 0a45 	vstr	s0, [r5, #276]	; 0x114
		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80199a4:	f7f8 f9cc 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80199a8:	4631      	mov	r1, r6
 80199aa:	4620      	mov	r0, r4
		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80199ac:	ed85 0a46 	vstr	s0, [r5, #280]	; 0x118
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80199b0:	f7f8 f9c6 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80199b4:	4631      	mov	r1, r6
 80199b6:	4620      	mov	r0, r4
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80199b8:	ed85 0a47 	vstr	s0, [r5, #284]	; 0x11c
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80199bc:	f7f8 f9c0 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 80199c0:	4631      	mov	r1, r6
 80199c2:	4620      	mov	r0, r4
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80199c4:	ed85 0a48 	vstr	s0, [r5, #288]	; 0x120
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 80199c8:	f7f8 f9ba 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.s_pid_allow_braking = data[ind++];
 80199cc:	9b02      	ldr	r3, [sp, #8]
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 80199ce:	ed85 0a49 	vstr	s0, [r5, #292]	; 0x124
		mcconf.s_pid_allow_braking = data[ind++];
 80199d2:	5ce2      	ldrb	r2, [r4, r3]
 80199d4:	3200      	adds	r2, #0
 80199d6:	bf18      	it	ne
 80199d8:	2201      	movne	r2, #1
 80199da:	3301      	adds	r3, #1
		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 80199dc:	4631      	mov	r1, r6
 80199de:	4620      	mov	r0, r4
		mcconf.s_pid_allow_braking = data[ind++];
 80199e0:	f885 2128 	strb.w	r2, [r5, #296]	; 0x128
 80199e4:	e018      	b.n	8019a18 <commands_process_packet+0xfd8>
 80199e6:	bf00      	nop
 80199e8:	20008d00 	.word	0x20008d00
 80199ec:	42c80000 	.word	0x42c80000
 80199f0:	c2c80000 	.word	0xc2c80000
 80199f4:	43160000 	.word	0x43160000
 80199f8:	42640000 	.word	0x42640000
 80199fc:	48435000 	.word	0x48435000
 8019a00:	c8435000 	.word	0xc8435000
 8019a04:	3dcccccd 	.word	0x3dcccccd
 8019a08:	3f733333 	.word	0x3f733333
 8019a0c:	00000000 	.word	0x00000000
 8019a10:	42dc0000 	.word	0x42dc0000
 8019a14:	c2200000 	.word	0xc2200000
 8019a18:	9302      	str	r3, [sp, #8]
		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 8019a1a:	f7f8 f991 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8019a1e:	4631      	mov	r1, r6
 8019a20:	4620      	mov	r0, r4
		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 8019a22:	ed85 0a4b 	vstr	s0, [r5, #300]	; 0x12c
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8019a26:	f7f8 f98b 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8019a2a:	4631      	mov	r1, r6
 8019a2c:	4620      	mov	r0, r4
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8019a2e:	ed85 0a4c 	vstr	s0, [r5, #304]	; 0x130
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8019a32:	f7f8 f985 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8019a36:	4631      	mov	r1, r6
 8019a38:	4620      	mov	r0, r4
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8019a3a:	ed85 0a4d 	vstr	s0, [r5, #308]	; 0x134
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8019a3e:	f7f8 f97f 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 8019a42:	4631      	mov	r1, r6
 8019a44:	4620      	mov	r0, r4
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8019a46:	ed85 0a4e 	vstr	s0, [r5, #312]	; 0x138
		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 8019a4a:	f7f8 f979 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 8019a4e:	4631      	mov	r1, r6
 8019a50:	4620      	mov	r0, r4
		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 8019a52:	ed85 0a4f 	vstr	s0, [r5, #316]	; 0x13c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 8019a56:	f7f8 f973 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8019a5a:	4631      	mov	r1, r6
 8019a5c:	4620      	mov	r0, r4
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 8019a5e:	ed85 0a50 	vstr	s0, [r5, #320]	; 0x140
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8019a62:	f7f8 f96d 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 8019a66:	4631      	mov	r1, r6
 8019a68:	4620      	mov	r0, r4
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8019a6a:	ed85 0a51 	vstr	s0, [r5, #324]	; 0x144
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 8019a6e:	f7f8 f967 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8019a72:	4631      	mov	r1, r6
 8019a74:	4620      	mov	r0, r4
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 8019a76:	ed85 0a52 	vstr	s0, [r5, #328]	; 0x148
		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8019a7a:	f7f8 f921 	bl	8011cc0 <buffer_get_int32>
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8019a7e:	4631      	mov	r1, r6
		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8019a80:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8019a84:	4620      	mov	r0, r4
 8019a86:	f7f8 f95b 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 8019a8a:	4631      	mov	r1, r6
 8019a8c:	4620      	mov	r0, r4
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8019a8e:	ed85 0a54 	vstr	s0, [r5, #336]	; 0x150
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 8019a92:	f7f8 f955 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8019a96:	4631      	mov	r1, r6
 8019a98:	4620      	mov	r0, r4
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 8019a9a:	ed85 0a55 	vstr	s0, [r5, #340]	; 0x154
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8019a9e:	f7f8 f927 	bl	8011cf0 <buffer_get_uint32>
		mcconf.m_sensor_port_mode = data[ind++];
 8019aa2:	9b02      	ldr	r3, [sp, #8]
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8019aa4:	f8c5 0158 	str.w	r0, [r5, #344]	; 0x158
		mcconf.m_sensor_port_mode = data[ind++];
 8019aa8:	5ce2      	ldrb	r2, [r4, r3]
 8019aaa:	f885 215c 	strb.w	r2, [r5, #348]	; 0x15c
 8019aae:	1c5a      	adds	r2, r3, #1
		mcconf.m_invert_direction = data[ind++];
 8019ab0:	1c99      	adds	r1, r3, #2
 8019ab2:	5ca2      	ldrb	r2, [r4, r2]
 8019ab4:	3200      	adds	r2, #0
 8019ab6:	bf18      	it	ne
 8019ab8:	2201      	movne	r2, #1
 8019aba:	f885 215d 	strb.w	r2, [r5, #349]	; 0x15d
		mcconf.m_drv8301_oc_mode = data[ind++];
 8019abe:	5c62      	ldrb	r2, [r4, r1]
 8019ac0:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
 8019ac4:	1cda      	adds	r2, r3, #3
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8019ac6:	4631      	mov	r1, r6
		mcconf.m_drv8301_oc_adj = data[ind++];
 8019ac8:	5ca2      	ldrb	r2, [r4, r2]
 8019aca:	f8c5 2160 	str.w	r2, [r5, #352]	; 0x160
 8019ace:	3304      	adds	r3, #4
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8019ad0:	4620      	mov	r0, r4
		mcconf.m_drv8301_oc_adj = data[ind++];
 8019ad2:	9302      	str	r3, [sp, #8]
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8019ad4:	f7f8 f934 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 8019ad8:	4631      	mov	r1, r6
 8019ada:	4620      	mov	r0, r4
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8019adc:	ed85 0a59 	vstr	s0, [r5, #356]	; 0x164
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 8019ae0:	f7f8 f92e 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 8019ae4:	4631      	mov	r1, r6
 8019ae6:	4620      	mov	r0, r4
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 8019ae8:	ed85 0a5a 	vstr	s0, [r5, #360]	; 0x168
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 8019aec:	f7f8 f928 	bl	8011d40 <buffer_get_float32_auto>
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 8019af0:	4631      	mov	r1, r6
 8019af2:	4620      	mov	r0, r4
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 8019af4:	ed85 0a5b 	vstr	s0, [r5, #364]	; 0x16c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 8019af8:	f7f8 f922 	bl	8011d40 <buffer_get_float32_auto>
		utils_truncate_number(&mcconf.l_current_max, HW_LIM_CURRENT);
 8019afc:	ed5f 0a45 	vldr	s1, [pc, #-276]	; 80199ec <commands_process_packet+0xfac>
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 8019b00:	ed85 0a5c 	vstr	s0, [r5, #368]	; 0x170
		utils_truncate_number(&mcconf.l_current_max, HW_LIM_CURRENT);
 8019b04:	1d28      	adds	r0, r5, #4
 8019b06:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 80199f0 <commands_process_packet+0xfb0>
 8019b0a:	f7fb fff9 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_current_min, HW_LIM_CURRENT);
 8019b0e:	ed5f 0a49 	vldr	s1, [pc, #-292]	; 80199ec <commands_process_packet+0xfac>
 8019b12:	ed1f 0a49 	vldr	s0, [pc, #-292]	; 80199f0 <commands_process_packet+0xfb0>
 8019b16:	f105 0008 	add.w	r0, r5, #8
 8019b1a:	f7fb fff1 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_in_current_max, HW_LIM_CURRENT_IN);
 8019b1e:	ed5f 0a4d 	vldr	s1, [pc, #-308]	; 80199ec <commands_process_packet+0xfac>
 8019b22:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 80199f0 <commands_process_packet+0xfb0>
 8019b26:	f105 000c 	add.w	r0, r5, #12
 8019b2a:	f7fb ffe9 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_in_current_min, HW_LIM_CURRENT);
 8019b2e:	ed5f 0a51 	vldr	s1, [pc, #-324]	; 80199ec <commands_process_packet+0xfac>
 8019b32:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 80199f0 <commands_process_packet+0xfb0>
 8019b36:	f105 0010 	add.w	r0, r5, #16
 8019b3a:	f7fb ffe1 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_abs_current_max, HW_LIM_CURRENT_ABS);
 8019b3e:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 80199f4 <commands_process_packet+0xfb4>
 8019b42:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 8019a0c <commands_process_packet+0xfcc>
 8019b46:	f105 0014 	add.w	r0, r5, #20
 8019b4a:	f7fb ffd9 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_max_vin, HW_LIM_VIN);
 8019b4e:	ed5f 0a56 	vldr	s1, [pc, #-344]	; 80199f8 <commands_process_packet+0xfb8>
 8019b52:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8019b56:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8019b5a:	f7fb ffd1 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_min_vin, HW_LIM_VIN);
 8019b5e:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 80199f8 <commands_process_packet+0xfb8>
 8019b62:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8019b66:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8019b6a:	f7fb ffc9 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_max_erpm, HW_LIM_ERPM);
 8019b6e:	ed5f 0a5d 	vldr	s1, [pc, #-372]	; 80199fc <commands_process_packet+0xfbc>
 8019b72:	ed1f 0a5d 	vldr	s0, [pc, #-372]	; 8019a00 <commands_process_packet+0xfc0>
 8019b76:	f105 001c 	add.w	r0, r5, #28
 8019b7a:	f7fb ffc1 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_min_erpm, HW_LIM_ERPM);
 8019b7e:	ed5f 0a61 	vldr	s1, [pc, #-388]	; 80199fc <commands_process_packet+0xfbc>
 8019b82:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 8019a00 <commands_process_packet+0xfc0>
 8019b86:	f105 0018 	add.w	r0, r5, #24
 8019b8a:	f7fb ffb9 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_min_duty, HW_LIM_DUTY_MIN);
 8019b8e:	ed5f 0a63 	vldr	s1, [pc, #-396]	; 8019a04 <commands_process_packet+0xfc4>
 8019b92:	ed1f 0a62 	vldr	s0, [pc, #-392]	; 8019a0c <commands_process_packet+0xfcc>
 8019b96:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8019b9a:	f7fb ffb1 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_max_duty, HW_LIM_DUTY_MAX);
 8019b9e:	ed5f 0a66 	vldr	s1, [pc, #-408]	; 8019a08 <commands_process_packet+0xfc8>
 8019ba2:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8019a0c <commands_process_packet+0xfcc>
 8019ba6:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8019baa:	f7fb ffa9 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_temp_fet_start, HW_LIM_TEMP_FET);
 8019bae:	ed5f 0a68 	vldr	s1, [pc, #-416]	; 8019a10 <commands_process_packet+0xfd0>
 8019bb2:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 8019a14 <commands_process_packet+0xfd4>
 8019bb6:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8019bba:	f7fb ffa1 	bl	8015b00 <utils_truncate_number>
		utils_truncate_number(&mcconf.l_temp_fet_end, HW_LIM_TEMP_FET);
 8019bbe:	ed5f 0a6c 	vldr	s1, [pc, #-432]	; 8019a10 <commands_process_packet+0xfd0>
 8019bc2:	ed1f 0a6c 	vldr	s0, [pc, #-432]	; 8019a14 <commands_process_packet+0xfd4>
 8019bc6:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8019bca:	f7fb ff99 	bl	8015b00 <utils_truncate_number>
		conf_general_store_mc_configuration(&mcconf);
 8019bce:	4628      	mov	r0, r5
 8019bd0:	f7fd ffbe 	bl	8017b50 <conf_general_store_mc_configuration>
		mc_interface_set_configuration(&mcconf);
 8019bd4:	4628      	mov	r0, r5
 8019bd6:	f002 f983 	bl	801bee0 <mc_interface_set_configuration>
		chThdSleepMilliseconds(200);
 8019bda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8019bde:	f7f3 feff 	bl	800d9e0 <chThdSleep>
	if (send_func) {
 8019be2:	4bd7      	ldr	r3, [pc, #860]	; (8019f40 <commands_process_packet+0x1500>)
		send_buffer[ind++] = packet_id;
 8019be4:	48d7      	ldr	r0, [pc, #860]	; (8019f44 <commands_process_packet+0x1504>)
	if (send_func) {
 8019be6:	681b      	ldr	r3, [r3, #0]
		send_buffer[ind++] = packet_id;
 8019be8:	220d      	movs	r2, #13
 8019bea:	2101      	movs	r1, #1
 8019bec:	7002      	strb	r2, [r0, #0]
 8019bee:	9102      	str	r1, [sp, #8]
	if (send_func) {
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	f43e afae 	beq.w	8018b52 <commands_process_packet+0x112>
		send_func(data, len);
 8019bf6:	4798      	blx	r3
 8019bf8:	f7fe bfab 	b.w	8018b52 <commands_process_packet+0x112>
		mc_interface_set_handbrake(buffer_get_float32(data, 1e3, &ind));
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	a902      	add	r1, sp, #8
 8019c00:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8019f48 <commands_process_packet+0x1508>
 8019c04:	f7f8 f88c 	bl	8011d20 <buffer_get_float32>
 8019c08:	f002 fc8a 	bl	801c520 <mc_interface_set_handbrake>
		timeout_reset();
 8019c0c:	f000 fb00 	bl	801a210 <timeout_reset>
		break;
 8019c10:	f7fe bf9f 	b.w	8018b52 <commands_process_packet+0x112>
		mc_interface_set_pid_pos((float)buffer_get_int32(data, &ind) / 1000000.0);
 8019c14:	a902      	add	r1, sp, #8
 8019c16:	4620      	mov	r0, r4
 8019c18:	f7f8 f852 	bl	8011cc0 <buffer_get_int32>
 8019c1c:	ee07 0a10 	vmov	s14, r0
 8019c20:	eddf 7aca 	vldr	s15, [pc, #808]	; 8019f4c <commands_process_packet+0x150c>
 8019c24:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8019c28:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8019c2c:	f002 fb90 	bl	801c350 <mc_interface_set_pid_pos>
		timeout_reset();
 8019c30:	f000 faee 	bl	801a210 <timeout_reset>
		break;
 8019c34:	f7fe bf8d 	b.w	8018b52 <commands_process_packet+0x112>
		mc_interface_set_pid_speed((float)buffer_get_int32(data, &ind));
 8019c38:	a902      	add	r1, sp, #8
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	f7f8 f840 	bl	8011cc0 <buffer_get_int32>
 8019c40:	ee07 0a90 	vmov	s15, r0
 8019c44:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019c48:	f002 fb4a 	bl	801c2e0 <mc_interface_set_pid_speed>
		timeout_reset();
 8019c4c:	f000 fae0 	bl	801a210 <timeout_reset>
		break;
 8019c50:	f7fe bf7f 	b.w	8018b52 <commands_process_packet+0x112>
		strcpy((char*)(send_buffer + ind), HW_NAME);
 8019c54:	4abe      	ldr	r2, [pc, #760]	; (8019f50 <commands_process_packet+0x1510>)
		send_buffer[ind++] = COMM_FW_VERSION;
 8019c56:	4bbb      	ldr	r3, [pc, #748]	; (8019f44 <commands_process_packet+0x1504>)
		strcpy((char*)(send_buffer + ind), HW_NAME);
 8019c58:	6810      	ldr	r0, [r2, #0]
 8019c5a:	f8c3 0003 	str.w	r0, [r3, #3]
		send_buffer[ind++] = FW_VERSION_MAJOR;
 8019c5e:	2103      	movs	r1, #3
		send_buffer[ind++] = COMM_FW_VERSION;
 8019c60:	2000      	movs	r0, #0
		send_buffer[ind++] = FW_VERSION_MINOR;
 8019c62:	221f      	movs	r2, #31
		memcpy(send_buffer + ind, STM32_UUID_8, 12);
 8019c64:	4cbb      	ldr	r4, [pc, #748]	; (8019f54 <commands_process_packet+0x1514>)
		send_buffer[ind++] = COMM_FW_VERSION;
 8019c66:	7018      	strb	r0, [r3, #0]
		send_buffer[ind++] = FW_VERSION_MAJOR;
 8019c68:	7059      	strb	r1, [r3, #1]
		send_buffer[ind++] = FW_VERSION_MINOR;
 8019c6a:	709a      	strb	r2, [r3, #2]
		memcpy(send_buffer + ind, STM32_UUID_8, 12);
 8019c6c:	cc07      	ldmia	r4!, {r0, r1, r2}
	if (send_func) {
 8019c6e:	4cb4      	ldr	r4, [pc, #720]	; (8019f40 <commands_process_packet+0x1500>)
		memcpy(send_buffer + ind, STM32_UUID_8, 12);
 8019c70:	f8c3 100b 	str.w	r1, [r3, #11]
	if (send_func) {
 8019c74:	6824      	ldr	r4, [r4, #0]
		memcpy(send_buffer + ind, STM32_UUID_8, 12);
 8019c76:	f8c3 0007 	str.w	r0, [r3, #7]
		ind += 12;
 8019c7a:	2113      	movs	r1, #19
		memcpy(send_buffer + ind, STM32_UUID_8, 12);
 8019c7c:	f8c3 200f 	str.w	r2, [r3, #15]
		ind += 12;
 8019c80:	9102      	str	r1, [sp, #8]
	if (send_func) {
 8019c82:	2c00      	cmp	r4, #0
 8019c84:	f43e af65 	beq.w	8018b52 <commands_process_packet+0x112>
		send_func(data, len);
 8019c88:	4618      	mov	r0, r3
 8019c8a:	47a0      	blx	r4
 8019c8c:	f7fe bf61 	b.w	8018b52 <commands_process_packet+0x112>
		nrf_driver_start_pairing(buffer_get_int32(data, &ind));
 8019c90:	a902      	add	r1, sp, #8
 8019c92:	4620      	mov	r0, r4
 8019c94:	f7f8 f814 	bl	8011cc0 <buffer_get_int32>
 8019c98:	f00a fa5a 	bl	8024150 <nrf_driver_start_pairing>
	if (send_func) {
 8019c9c:	4ba8      	ldr	r3, [pc, #672]	; (8019f40 <commands_process_packet+0x1500>)
		send_buffer[ind++] = packet_id;
 8019c9e:	48a9      	ldr	r0, [pc, #676]	; (8019f44 <commands_process_packet+0x1504>)
	if (send_func) {
 8019ca0:	681b      	ldr	r3, [r3, #0]
		send_buffer[ind++] = packet_id;
 8019ca2:	2425      	movs	r4, #37	; 0x25
		send_buffer[ind++] = NRF_PAIR_STARTED;
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	2102      	movs	r1, #2
		send_buffer[ind++] = packet_id;
 8019ca8:	7004      	strb	r4, [r0, #0]
		send_buffer[ind++] = NRF_PAIR_STARTED;
 8019caa:	7042      	strb	r2, [r0, #1]
 8019cac:	9102      	str	r1, [sp, #8]
	if (send_func) {
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d1a1      	bne.n	8019bf6 <commands_process_packet+0x11b6>
 8019cb2:	f7fe bf4e 	b.w	8018b52 <commands_process_packet+0x112>
		if (appdata_func) {
 8019cb6:	4ba8      	ldr	r3, [pc, #672]	; (8019f58 <commands_process_packet+0x1518>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f43e af49 	beq.w	8018b52 <commands_process_packet+0x112>
			appdata_func(data, len);
 8019cc0:	4629      	mov	r1, r5
 8019cc2:	f7fe bf44 	b.w	8018b4e <commands_process_packet+0x10e>
		chuck_d_tmp.bt_c = data[ind++];
 8019cc6:	78c2      	ldrb	r2, [r0, #3]
		chuck_d_tmp.bt_z = data[ind++];
 8019cc8:	7903      	ldrb	r3, [r0, #4]
		chuck_d_tmp.js_x = data[ind++];
 8019cca:	7841      	ldrb	r1, [r0, #1]
		chuck_d_tmp.js_y = data[ind++];
 8019ccc:	7886      	ldrb	r6, [r0, #2]
		chuck_d_tmp.js_x = data[ind++];
 8019cce:	9104      	str	r1, [sp, #16]
		chuck_d_tmp.bt_c = data[ind++];
 8019cd0:	3200      	adds	r2, #0
 8019cd2:	bf18      	it	ne
 8019cd4:	2201      	movne	r2, #1
		chuck_d_tmp.bt_z = data[ind++];
 8019cd6:	3300      	adds	r3, #0
 8019cd8:	bf18      	it	ne
 8019cda:	2301      	movne	r3, #1
		chuck_d_tmp.acc_x = buffer_get_int16(data, &ind);
 8019cdc:	a902      	add	r1, sp, #8
		chuck_d_tmp.bt_z = data[ind++];
 8019cde:	2504      	movs	r5, #4
		chuck_d_tmp.acc_x = buffer_get_int16(data, &ind);
 8019ce0:	4620      	mov	r0, r4
		chuck_d_tmp.bt_c = data[ind++];
 8019ce2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		chuck_d_tmp.bt_z = data[ind++];
 8019ce6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		chuck_d_tmp.js_y = data[ind++];
 8019cea:	9605      	str	r6, [sp, #20]
		chuck_d_tmp.bt_z = data[ind++];
 8019cec:	9502      	str	r5, [sp, #8]
		chuck_d_tmp.acc_x = buffer_get_int16(data, &ind);
 8019cee:	f7f7 ffc7 	bl	8011c80 <buffer_get_int16>
		chuck_d_tmp.acc_y = buffer_get_int16(data, &ind);
 8019cf2:	a902      	add	r1, sp, #8
		chuck_d_tmp.acc_x = buffer_get_int16(data, &ind);
 8019cf4:	9006      	str	r0, [sp, #24]
		chuck_d_tmp.acc_y = buffer_get_int16(data, &ind);
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	f7f7 ffc2 	bl	8011c80 <buffer_get_int16>
		chuck_d_tmp.acc_z = buffer_get_int16(data, &ind);
 8019cfc:	a902      	add	r1, sp, #8
		chuck_d_tmp.acc_y = buffer_get_int16(data, &ind);
 8019cfe:	9007      	str	r0, [sp, #28]
		chuck_d_tmp.acc_z = buffer_get_int16(data, &ind);
 8019d00:	4620      	mov	r0, r4
 8019d02:	f7f7 ffbd 	bl	8011c80 <buffer_get_int16>
 8019d06:	9008      	str	r0, [sp, #32]
		app_nunchuk_update_output(&chuck_d_tmp);
 8019d08:	a804      	add	r0, sp, #16
 8019d0a:	f008 fcd9 	bl	80226c0 <app_nunchuk_update_output>
		break;
 8019d0e:	f7fe bf20 	b.w	8018b52 <commands_process_packet+0x112>
		comm_can_send_buffer(data[0], data + 1, len - 1, false);
 8019d12:	1e8a      	subs	r2, r1, #2
 8019d14:	2300      	movs	r3, #0
 8019d16:	1c81      	adds	r1, r0, #2
 8019d18:	7840      	ldrb	r0, [r0, #1]
 8019d1a:	f000 fdb9 	bl	801a890 <comm_can_send_buffer>
		break;
 8019d1e:	f7fe bf18 	b.w	8018b52 <commands_process_packet+0x112>
		send_buffer[ind++] = COMM_GET_DECODED_CHUK;
 8019d22:	ad36      	add	r5, sp, #216	; 0xd8
 8019d24:	4c87      	ldr	r4, [pc, #540]	; (8019f44 <commands_process_packet+0x1504>)
 8019d26:	2201      	movs	r2, #1
 8019d28:	2321      	movs	r3, #33	; 0x21
 8019d2a:	f845 2dd0 	str.w	r2, [r5, #-208]!
 8019d2e:	7023      	strb	r3, [r4, #0]
		buffer_append_int32(send_buffer, (int32_t)(app_nunchuk_get_decoded_chuk() * 1000000.0), &ind);
 8019d30:	f008 fcae 	bl	8022690 <app_nunchuk_get_decoded_chuk>
 8019d34:	eddf 7a85 	vldr	s15, [pc, #532]	; 8019f4c <commands_process_packet+0x150c>
 8019d38:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019d3c:	462a      	mov	r2, r5
 8019d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d42:	ee17 1a90 	vmov	r1, s15
 8019d46:	4620      	mov	r0, r4
 8019d48:	f7f7 ff02 	bl	8011b50 <buffer_append_int32>
	if (send_func) {
 8019d4c:	4b7c      	ldr	r3, [pc, #496]	; (8019f40 <commands_process_packet+0x1500>)
		commands_send_packet(send_buffer, ind);
 8019d4e:	9902      	ldr	r1, [sp, #8]
	if (send_func) {
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	f47e aefb 	bne.w	8018b4e <commands_process_packet+0x10e>
 8019d58:	f7fe befb 	b.w	8018b52 <commands_process_packet+0x112>
		send_buffer[ind++] = COMM_GET_DECODED_ADC;
 8019d5c:	ad36      	add	r5, sp, #216	; 0xd8
 8019d5e:	4c79      	ldr	r4, [pc, #484]	; (8019f44 <commands_process_packet+0x1504>)
		buffer_append_int32(send_buffer, (int32_t)(app_adc_get_decoded_level() * 1000000.0), &ind);
 8019d60:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8019f4c <commands_process_packet+0x150c>
		send_buffer[ind++] = COMM_GET_DECODED_ADC;
 8019d64:	2320      	movs	r3, #32
 8019d66:	2201      	movs	r2, #1
 8019d68:	7023      	strb	r3, [r4, #0]
 8019d6a:	f845 2dd0 	str.w	r2, [r5, #-208]!
		buffer_append_int32(send_buffer, (int32_t)(app_adc_get_decoded_level() * 1000000.0), &ind);
 8019d6e:	f007 ff67 	bl	8021c40 <app_adc_get_decoded_level>
 8019d72:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019d76:	462a      	mov	r2, r5
 8019d78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019d7c:	4620      	mov	r0, r4
 8019d7e:	ee17 1a90 	vmov	r1, s15
 8019d82:	f7f7 fee5 	bl	8011b50 <buffer_append_int32>
		buffer_append_int32(send_buffer, (int32_t)(app_adc_get_voltage() * 1000000.0), &ind);
 8019d86:	f007 ff63 	bl	8021c50 <app_adc_get_voltage>
 8019d8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019d8e:	462a      	mov	r2, r5
 8019d90:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019d94:	4620      	mov	r0, r4
 8019d96:	ee17 1a90 	vmov	r1, s15
 8019d9a:	f7f7 fed9 	bl	8011b50 <buffer_append_int32>
		buffer_append_int32(send_buffer, (int32_t)(app_adc_get_decoded_level2() * 1000000.0), &ind);
 8019d9e:	f007 ff5f 	bl	8021c60 <app_adc_get_decoded_level2>
 8019da2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019da6:	462a      	mov	r2, r5
 8019da8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019dac:	4620      	mov	r0, r4
 8019dae:	ee17 1a90 	vmov	r1, s15
 8019db2:	f7f7 fecd 	bl	8011b50 <buffer_append_int32>
		buffer_append_int32(send_buffer, (int32_t)(app_adc_get_voltage2() * 1000000.0), &ind);
 8019db6:	f007 ff5b 	bl	8021c70 <app_adc_get_voltage2>
 8019dba:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019dbe:	462a      	mov	r2, r5
 8019dc0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019dc4:	e7bd      	b.n	8019d42 <commands_process_packet+0x1302>
		send_buffer[ind++] = COMM_GET_DECODED_PPM;
 8019dc6:	ad36      	add	r5, sp, #216	; 0xd8
 8019dc8:	4c5e      	ldr	r4, [pc, #376]	; (8019f44 <commands_process_packet+0x1504>)
		buffer_append_int32(send_buffer, (int32_t)(app_ppm_get_decoded_level() * 1000000.0), &ind);
 8019dca:	ed9f 8a60 	vldr	s16, [pc, #384]	; 8019f4c <commands_process_packet+0x150c>
		send_buffer[ind++] = COMM_GET_DECODED_PPM;
 8019dce:	231f      	movs	r3, #31
 8019dd0:	2201      	movs	r2, #1
 8019dd2:	f845 2dd0 	str.w	r2, [r5, #-208]!
 8019dd6:	7023      	strb	r3, [r4, #0]
		buffer_append_int32(send_buffer, (int32_t)(app_ppm_get_decoded_level() * 1000000.0), &ind);
 8019dd8:	f007 f93a 	bl	8021050 <app_ppm_get_decoded_level>
 8019ddc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019de0:	462a      	mov	r2, r5
 8019de2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019de6:	4620      	mov	r0, r4
 8019de8:	ee17 1a90 	vmov	r1, s15
 8019dec:	f7f7 feb0 	bl	8011b50 <buffer_append_int32>
		buffer_append_int32(send_buffer, (int32_t)(servodec_get_last_pulse_len(0) * 1000000.0), &ind);
 8019df0:	2000      	movs	r0, #0
 8019df2:	f7fb fe05 	bl	8015a00 <servodec_get_last_pulse_len>
 8019df6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019dfa:	462a      	mov	r2, r5
 8019dfc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019e00:	e79f      	b.n	8019d42 <commands_process_packet+0x1302>
		send_buffer[ind++] = COMM_GET_VALUES;
 8019e02:	ad36      	add	r5, sp, #216	; 0xd8
 8019e04:	2301      	movs	r3, #1
 8019e06:	f845 3dd0 	str.w	r3, [r5, #-208]!
 8019e0a:	4c4e      	ldr	r4, [pc, #312]	; (8019f44 <commands_process_packet+0x1504>)
 8019e0c:	2304      	movs	r3, #4
 8019e0e:	7023      	strb	r3, [r4, #0]
		buffer_append_float16(send_buffer, mc_interface_temp_fet_filtered(), 1e1, &ind);
 8019e10:	f002 f9de 	bl	801c1d0 <mc_interface_temp_fet_filtered>
 8019e14:	4629      	mov	r1, r5
 8019e16:	4620      	mov	r0, r4
 8019e18:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8019e1c:	f7f7 fec8 	bl	8011bb0 <buffer_append_float16>
		buffer_append_float16(send_buffer, mc_interface_temp_motor_filtered(), 1e1, &ind);
 8019e20:	f002 f9de 	bl	801c1e0 <mc_interface_temp_motor_filtered>
 8019e24:	4629      	mov	r1, r5
 8019e26:	4620      	mov	r0, r4
 8019e28:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8019e2c:	f7f7 fec0 	bl	8011bb0 <buffer_append_float16>
		buffer_append_float32(send_buffer, mc_interface_read_reset_avg_motor_current(), 1e2, &ind);
 8019e30:	f002 f90e 	bl	801c050 <mc_interface_read_reset_avg_motor_current>
 8019e34:	4629      	mov	r1, r5
 8019e36:	4620      	mov	r0, r4
 8019e38:	eddf 0a48 	vldr	s1, [pc, #288]	; 8019f5c <commands_process_packet+0x151c>
 8019e3c:	f7f7 fed0 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, mc_interface_read_reset_avg_input_current(), 1e2, &ind);
 8019e40:	f002 f916 	bl	801c070 <mc_interface_read_reset_avg_input_current>
 8019e44:	4629      	mov	r1, r5
 8019e46:	4620      	mov	r0, r4
 8019e48:	eddf 0a44 	vldr	s1, [pc, #272]	; 8019f5c <commands_process_packet+0x151c>
 8019e4c:	f7f7 fec8 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, mc_interface_read_reset_avg_id(), 1e2, &ind);
 8019e50:	f002 f91e 	bl	801c090 <mc_interface_read_reset_avg_id>
 8019e54:	4629      	mov	r1, r5
 8019e56:	4620      	mov	r0, r4
 8019e58:	eddf 0a40 	vldr	s1, [pc, #256]	; 8019f5c <commands_process_packet+0x151c>
 8019e5c:	f7f7 fec0 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, mc_interface_read_reset_avg_iq(), 1e2, &ind);
 8019e60:	f002 f936 	bl	801c0d0 <mc_interface_read_reset_avg_iq>
 8019e64:	4629      	mov	r1, r5
 8019e66:	4620      	mov	r0, r4
 8019e68:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8019f5c <commands_process_packet+0x151c>
 8019e6c:	f7f7 feb8 	bl	8011be0 <buffer_append_float32>
		buffer_append_float16(send_buffer, mc_interface_get_duty_cycle_now(), 1e3, &ind);
 8019e70:	f001 fb3e 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 8019e74:	4629      	mov	r1, r5
 8019e76:	4620      	mov	r0, r4
 8019e78:	eddf 0a33 	vldr	s1, [pc, #204]	; 8019f48 <commands_process_packet+0x1508>
 8019e7c:	f7f7 fe98 	bl	8011bb0 <buffer_append_float16>
		buffer_append_float32(send_buffer, mc_interface_get_rpm(), 1e0, &ind);
 8019e80:	f001 fb76 	bl	801b570 <mc_interface_get_rpm>
 8019e84:	4629      	mov	r1, r5
 8019e86:	4620      	mov	r0, r4
 8019e88:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8019e8c:	f7f7 fea8 	bl	8011be0 <buffer_append_float32>
		buffer_append_float16(send_buffer, GET_INPUT_VOLTAGE(), 1e1, &ind);
 8019e90:	4b33      	ldr	r3, [pc, #204]	; (8019f60 <commands_process_packet+0x1520>)
 8019e92:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019f64 <commands_process_packet+0x1524>
 8019e96:	8a1b      	ldrh	r3, [r3, #16]
 8019e98:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8019f68 <commands_process_packet+0x1528>
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	ee07 3a90 	vmov	s15, r3
 8019ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019ea6:	4629      	mov	r1, r5
 8019ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019eac:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8019eb0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f7f7 fe7b 	bl	8011bb0 <buffer_append_float16>
		buffer_append_float32(send_buffer, mc_interface_get_amp_hours(false), 1e4, &ind);
 8019eba:	2000      	movs	r0, #0
 8019ebc:	f001 fb80 	bl	801b5c0 <mc_interface_get_amp_hours>
 8019ec0:	4629      	mov	r1, r5
 8019ec2:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8019f6c <commands_process_packet+0x152c>
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	f7f7 fe8a 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, mc_interface_get_amp_hours_charged(false), 1e4, &ind);
 8019ecc:	2000      	movs	r0, #0
 8019ece:	f001 fb87 	bl	801b5e0 <mc_interface_get_amp_hours_charged>
 8019ed2:	4629      	mov	r1, r5
 8019ed4:	eddf 0a25 	vldr	s1, [pc, #148]	; 8019f6c <commands_process_packet+0x152c>
 8019ed8:	4620      	mov	r0, r4
 8019eda:	f7f7 fe81 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, mc_interface_get_watt_hours(false), 1e4, &ind);
 8019ede:	2000      	movs	r0, #0
 8019ee0:	f001 fb8e 	bl	801b600 <mc_interface_get_watt_hours>
 8019ee4:	4629      	mov	r1, r5
 8019ee6:	eddf 0a21 	vldr	s1, [pc, #132]	; 8019f6c <commands_process_packet+0x152c>
 8019eea:	4620      	mov	r0, r4
 8019eec:	f7f7 fe78 	bl	8011be0 <buffer_append_float32>
		buffer_append_float32(send_buffer, mc_interface_get_watt_hours_charged(false), 1e4, &ind);
 8019ef0:	2000      	movs	r0, #0
 8019ef2:	f001 fb95 	bl	801b620 <mc_interface_get_watt_hours_charged>
 8019ef6:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8019f6c <commands_process_packet+0x152c>
 8019efa:	4629      	mov	r1, r5
 8019efc:	4620      	mov	r0, r4
 8019efe:	f7f7 fe6f 	bl	8011be0 <buffer_append_float32>
		buffer_append_int32(send_buffer, mc_interface_get_tachometer_value(false), &ind);
 8019f02:	2000      	movs	r0, #0
 8019f04:	f001 fc34 	bl	801b770 <mc_interface_get_tachometer_value>
 8019f08:	462a      	mov	r2, r5
 8019f0a:	4601      	mov	r1, r0
 8019f0c:	4620      	mov	r0, r4
 8019f0e:	f7f7 fe1f 	bl	8011b50 <buffer_append_int32>
		buffer_append_int32(send_buffer, mc_interface_get_tachometer_abs_value(false), &ind);
 8019f12:	2000      	movs	r0, #0
 8019f14:	f002 f874 	bl	801c000 <mc_interface_get_tachometer_abs_value>
 8019f18:	462a      	mov	r2, r5
 8019f1a:	4601      	mov	r1, r0
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f7f7 fe17 	bl	8011b50 <buffer_append_int32>
		send_buffer[ind++] = mc_interface_get_fault();
 8019f22:	9d02      	ldr	r5, [sp, #8]
 8019f24:	1c6b      	adds	r3, r5, #1
 8019f26:	9302      	str	r3, [sp, #8]
 8019f28:	f001 faba 	bl	801b4a0 <mc_interface_get_fault>
	if (send_func) {
 8019f2c:	4b04      	ldr	r3, [pc, #16]	; (8019f40 <commands_process_packet+0x1500>)
		send_buffer[ind++] = mc_interface_get_fault();
 8019f2e:	5560      	strb	r0, [r4, r5]
	if (send_func) {
 8019f30:	681b      	ldr	r3, [r3, #0]
		commands_send_packet(send_buffer, ind);
 8019f32:	9902      	ldr	r1, [sp, #8]
	if (send_func) {
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	f47e ae0a 	bne.w	8018b4e <commands_process_packet+0x10e>
 8019f3a:	f7fe be0a 	b.w	8018b52 <commands_process_packet+0x112>
 8019f3e:	bf00      	nop
 8019f40:	200094e8 	.word	0x200094e8
 8019f44:	200090e8 	.word	0x200090e8
 8019f48:	447a0000 	.word	0x447a0000
 8019f4c:	49742400 	.word	0x49742400
 8019f50:	0802fab4 	.word	0x0802fab4
 8019f54:	1fff7a10 	.word	0x1fff7a10
 8019f58:	20008338 	.word	0x20008338
 8019f5c:	42c80000 	.word	0x42c80000
 8019f60:	2000c034 	.word	0x2000c034
 8019f64:	3a534067 	.word	0x3a534067
 8019f68:	4195d174 	.word	0x4195d174
 8019f6c:	461c4000 	.word	0x461c4000
		new_app_offset = buffer_get_uint32(data, &ind);
 8019f70:	a902      	add	r1, sp, #8
 8019f72:	4620      	mov	r0, r4
 8019f74:	f7f7 febc 	bl	8011cf0 <buffer_get_uint32>
		flash_res = flash_helper_write_new_app_data(new_app_offset, data + ind, len - ind);
 8019f78:	9902      	ldr	r1, [sp, #8]
 8019f7a:	1a6a      	subs	r2, r5, r1
 8019f7c:	4421      	add	r1, r4
 8019f7e:	f000 ffe7 	bl	801af50 <flash_helper_write_new_app_data>
	if (send_func) {
 8019f82:	4a5f      	ldr	r2, [pc, #380]	; (801a100 <commands_process_packet+0x16c0>)
		send_buffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 8019f84:	4b5f      	ldr	r3, [pc, #380]	; (801a104 <commands_process_packet+0x16c4>)
	if (send_func) {
 8019f86:	6812      	ldr	r2, [r2, #0]
		send_buffer[ind++] = flash_res == FLASH_COMPLETE ? 1 : 0;
 8019f88:	f1a0 0009 	sub.w	r0, r0, #9
 8019f8c:	fab0 f080 	clz	r0, r0
 8019f90:	0940      	lsrs	r0, r0, #5
		send_buffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 8019f92:	2403      	movs	r4, #3
		send_buffer[ind++] = flash_res == FLASH_COMPLETE ? 1 : 0;
 8019f94:	2102      	movs	r1, #2
 8019f96:	7058      	strb	r0, [r3, #1]
		send_buffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 8019f98:	701c      	strb	r4, [r3, #0]
		send_buffer[ind++] = flash_res == FLASH_COMPLETE ? 1 : 0;
 8019f9a:	9102      	str	r1, [sp, #8]
	if (send_func) {
 8019f9c:	2a00      	cmp	r2, #0
 8019f9e:	f43e add8 	beq.w	8018b52 <commands_process_packet+0x112>
		send_func(data, len);
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	4790      	blx	r2
 8019fa6:	f7fe bdd4 	b.w	8018b52 <commands_process_packet+0x112>
		flash_res = flash_helper_erase_new_app(buffer_get_uint32(data, &ind));
 8019faa:	a902      	add	r1, sp, #8
 8019fac:	4620      	mov	r0, r4
 8019fae:	f7f7 fe9f 	bl	8011cf0 <buffer_get_uint32>
 8019fb2:	f000 ff85 	bl	801aec0 <flash_helper_erase_new_app>
	if (send_func) {
 8019fb6:	4a52      	ldr	r2, [pc, #328]	; (801a100 <commands_process_packet+0x16c0>)
		send_buffer[ind++] = COMM_ERASE_NEW_APP;
 8019fb8:	4b52      	ldr	r3, [pc, #328]	; (801a104 <commands_process_packet+0x16c4>)
	if (send_func) {
 8019fba:	6812      	ldr	r2, [r2, #0]
		send_buffer[ind++] = flash_res == FLASH_COMPLETE ? 1 : 0;
 8019fbc:	f1a0 0009 	sub.w	r0, r0, #9
 8019fc0:	fab0 f080 	clz	r0, r0
		send_buffer[ind++] = COMM_ERASE_NEW_APP;
 8019fc4:	2102      	movs	r1, #2
		send_buffer[ind++] = flash_res == FLASH_COMPLETE ? 1 : 0;
 8019fc6:	0940      	lsrs	r0, r0, #5
 8019fc8:	7058      	strb	r0, [r3, #1]
		send_buffer[ind++] = COMM_ERASE_NEW_APP;
 8019fca:	7019      	strb	r1, [r3, #0]
		send_buffer[ind++] = flash_res == FLASH_COMPLETE ? 1 : 0;
 8019fcc:	9102      	str	r1, [sp, #8]
	if (send_func) {
 8019fce:	2a00      	cmp	r2, #0
 8019fd0:	d1e7      	bne.n	8019fa2 <commands_process_packet+0x1562>
 8019fd2:	f7fe bdbe 	b.w	8018b52 <commands_process_packet+0x112>
		flash_helper_jump_to_bootloader();
 8019fd6:	f000 ffeb 	bl	801afb0 <flash_helper_jump_to_bootloader>
		break;
 8019fda:	f7fe bdba 	b.w	8018b52 <commands_process_packet+0x112>
		mc_interface_set_current((float)buffer_get_int32(data, &ind) / 1000.0);
 8019fde:	a902      	add	r1, sp, #8
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	f7f7 fe6d 	bl	8011cc0 <buffer_get_int32>
 8019fe6:	ee07 0a10 	vmov	s14, r0
 8019fea:	eddf 7a47 	vldr	s15, [pc, #284]	; 801a108 <commands_process_packet+0x16c8>
 8019fee:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8019ff2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8019ff6:	f002 f9f3 	bl	801c3e0 <mc_interface_set_current>
		timeout_reset();
 8019ffa:	f000 f909 	bl	801a210 <timeout_reset>
		break;
 8019ffe:	f7fe bda8 	b.w	8018b52 <commands_process_packet+0x112>
		mc_interface_set_duty((float)buffer_get_int32(data, &ind) / 100000.0);
 801a002:	a902      	add	r1, sp, #8
 801a004:	4620      	mov	r0, r4
 801a006:	f7f7 fe5b 	bl	8011cc0 <buffer_get_int32>
 801a00a:	ee07 0a10 	vmov	s14, r0
 801a00e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801a10c <commands_process_packet+0x16cc>
 801a012:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801a016:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801a01a:	f002 f929 	bl	801c270 <mc_interface_set_duty>
		timeout_reset();
 801a01e:	f000 f8f7 	bl	801a210 <timeout_reset>
		break;
 801a022:	f7fe bd96 	b.w	8018b52 <commands_process_packet+0x112>
		mc_interface_set_brake_current((float)buffer_get_int32(data, &ind) / 1000.0);
 801a026:	a902      	add	r1, sp, #8
 801a028:	4620      	mov	r0, r4
 801a02a:	f7f7 fe49 	bl	8011cc0 <buffer_get_int32>
 801a02e:	ee07 0a10 	vmov	s14, r0
 801a032:	eddf 7a35 	vldr	s15, [pc, #212]	; 801a108 <commands_process_packet+0x16c8>
 801a036:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801a03a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801a03e:	f002 fa27 	bl	801c490 <mc_interface_set_brake_current>
		timeout_reset();
 801a042:	f000 f8e5 	bl	801a210 <timeout_reset>
		break;
 801a046:	f7fe bd84 	b.w	8018b52 <commands_process_packet+0x112>
 801a04a:	ed9d 0a03 	vldr	s0, [sp, #12]
 801a04e:	f7fe bd62 	b.w	8018b16 <commands_process_packet+0xd6>
 801a052:	ed9d 0a04 	vldr	s0, [sp, #16]
 801a056:	f7fe be90 	b.w	8018d7a <commands_process_packet+0x33a>
			appconf = *app_get_configuration();
 801a05a:	f006 fba1 	bl	80207a0 <app_get_configuration>
 801a05e:	ac04      	add	r4, sp, #16
 801a060:	4601      	mov	r1, r0
 801a062:	22c8      	movs	r2, #200	; 0xc8
 801a064:	4620      	mov	r0, r4
 801a066:	f7f2 fd53 	bl	800cb10 <memcpy>
 801a06a:	f7fe bef7 	b.w	8018e5c <commands_process_packet+0x41c>
			mcconf = *mc_interface_get_configuration();
 801a06e:	f001 f9e7 	bl	801b440 <mc_interface_get_configuration>
 801a072:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801a076:	4601      	mov	r1, r0
 801a078:	4825      	ldr	r0, [pc, #148]	; (801a110 <commands_process_packet+0x16d0>)
 801a07a:	f7f2 fd49 	bl	800cb10 <memcpy>
 801a07e:	f7ff b8be 	b.w	80191fe <commands_process_packet+0x7be>
				mc_interface_release_motor();
 801a082:	f002 f9fd 	bl	801c480 <mc_interface_release_motor>
 801a086:	f7fe bd81 	b.w	8018b8c <commands_process_packet+0x14c>
	if (send_func) {
 801a08a:	f8d8 3000 	ldr.w	r3, [r8]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	f47e ae3a 	bne.w	8018d08 <commands_process_packet+0x2c8>
 801a094:	f7fe bd5d 	b.w	8018b52 <commands_process_packet+0x112>
			send_buffer[ind++] = COMM_DETECT_ENCODER;
 801a098:	ad36      	add	r5, sp, #216	; 0xd8
 801a09a:	2301      	movs	r3, #1
 801a09c:	f845 3dd0 	str.w	r3, [r5, #-208]!
 801a0a0:	4c18      	ldr	r4, [pc, #96]	; (801a104 <commands_process_packet+0x16c4>)
			buffer_append_float32(send_buffer, 1001.0, 1e6, &ind);
 801a0a2:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801a114 <commands_process_packet+0x16d4>
 801a0a6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801a118 <commands_process_packet+0x16d8>
			send_buffer[ind++] = COMM_DETECT_ENCODER;
 801a0aa:	231b      	movs	r3, #27
			buffer_append_float32(send_buffer, 1001.0, 1e6, &ind);
 801a0ac:	4629      	mov	r1, r5
 801a0ae:	4620      	mov	r0, r4
			send_buffer[ind++] = COMM_DETECT_ENCODER;
 801a0b0:	7023      	strb	r3, [r4, #0]
			buffer_append_float32(send_buffer, 1001.0, 1e6, &ind);
 801a0b2:	f7f7 fd95 	bl	8011be0 <buffer_append_float32>
			buffer_append_float32(send_buffer, 0.0, 1e6, &ind);
 801a0b6:	4629      	mov	r1, r5
 801a0b8:	4620      	mov	r0, r4
 801a0ba:	eddf 0a16 	vldr	s1, [pc, #88]	; 801a114 <commands_process_packet+0x16d4>
 801a0be:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801a11c <commands_process_packet+0x16dc>
 801a0c2:	f7f7 fd8d 	bl	8011be0 <buffer_append_float32>
	if (send_func) {
 801a0c6:	4b0e      	ldr	r3, [pc, #56]	; (801a100 <commands_process_packet+0x16c0>)
			send_buffer[ind++] = false;
 801a0c8:	9902      	ldr	r1, [sp, #8]
	if (send_func) {
 801a0ca:	681b      	ldr	r3, [r3, #0]
			send_buffer[ind++] = false;
 801a0cc:	5466      	strb	r6, [r4, r1]
 801a0ce:	3101      	adds	r1, #1
 801a0d0:	9102      	str	r1, [sp, #8]
	if (send_func) {
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	f47e ad3b 	bne.w	8018b4e <commands_process_packet+0x10e>
 801a0d8:	f7fe bd3b 	b.w	8018b52 <commands_process_packet+0x112>
 801a0dc:	6834      	ldr	r4, [r6, #0]
 801a0de:	2c00      	cmp	r4, #0
 801a0e0:	f43e ad37 	beq.w	8018b52 <commands_process_packet+0x112>
		send_func(data, len);
 801a0e4:	4619      	mov	r1, r3
 801a0e6:	4610      	mov	r0, r2
 801a0e8:	47a0      	blx	r4
 801a0ea:	f7fe bd32 	b.w	8018b52 <commands_process_packet+0x112>
			memset(send_buffer, 255, 8);
 801a0ee:	4b05      	ldr	r3, [pc, #20]	; (801a104 <commands_process_packet+0x16c4>)
 801a0f0:	f04f 32ff 	mov.w	r2, #4294967295
			send_buffer[ind++] = 0;
 801a0f4:	2100      	movs	r1, #0
 801a0f6:	7259      	strb	r1, [r3, #9]
			memset(send_buffer, 255, 8);
 801a0f8:	601a      	str	r2, [r3, #0]
 801a0fa:	605a      	str	r2, [r3, #4]
 801a0fc:	f7fe bd29 	b.w	8018b52 <commands_process_packet+0x112>
 801a100:	200094e8 	.word	0x200094e8
 801a104:	200090e8 	.word	0x200090e8
 801a108:	447a0000 	.word	0x447a0000
 801a10c:	47c35000 	.word	0x47c35000
 801a110:	20008d00 	.word	0x20008d00
 801a114:	49742400 	.word	0x49742400
 801a118:	447a4000 	.word	0x447a4000
 801a11c:	00000000 	.word	0x00000000

0801a120 <timeout_thread>:

float timeout_get_brake_current(void) {
	return timeout_brake_current;
}

static THD_FUNCTION(timeout_thread, arg) {
 801a120:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 801a124:	4f16      	ldr	r7, [pc, #88]	; (801a180 <timeout_thread+0x60>)
 801a126:	4a17      	ldr	r2, [pc, #92]	; (801a184 <timeout_thread+0x64>)
 801a128:	69bb      	ldr	r3, [r7, #24]
 801a12a:	4c17      	ldr	r4, [pc, #92]	; (801a188 <timeout_thread+0x68>)
 801a12c:	f8df a060 	ldr.w	sl, [pc, #96]	; 801a190 <timeout_thread+0x70>
 801a130:	f8df b060 	ldr.w	fp, [pc, #96]	; 801a194 <timeout_thread+0x74>
 801a134:	4d15      	ldr	r5, [pc, #84]	; (801a18c <timeout_thread+0x6c>)
	(void)arg;

	chRegSetThreadName("Timeout");

	for(;;) {
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) {
 801a136:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801a198 <timeout_thread+0x78>
 801a13a:	619a      	str	r2, [r3, #24]
			mc_interface_unlock();
			mc_interface_set_brake_current(timeout_brake_current);
			has_timeout = true;
		} else {
			has_timeout = false;
 801a13c:	2600      	movs	r6, #0
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) {
 801a13e:	f242 7810 	movw	r8, #10000	; 0x2710
 801a142:	6823      	ldr	r3, [r4, #0]
 801a144:	b16b      	cbz	r3, 801a162 <timeout_thread+0x42>
 801a146:	f8da 1000 	ldr.w	r1, [sl]
  return ch.vtlist.vt_systime;
 801a14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a14c:	6823      	ldr	r3, [r4, #0]
 801a14e:	fb08 f303 	mul.w	r3, r8, r3
 801a152:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  return chVTGetSystemTimeX() - start;
 801a156:	1a52      	subs	r2, r2, r1
 801a158:	fba9 1303 	umull	r1, r3, r9, r3
 801a15c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 801a160:	d804      	bhi.n	801a16c <timeout_thread+0x4c>
			has_timeout = false;
 801a162:	702e      	strb	r6, [r5, #0]
		}

		chThdSleepMilliseconds(10);
 801a164:	2064      	movs	r0, #100	; 0x64
 801a166:	f7f3 fc3b 	bl	800d9e0 <chThdSleep>
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) {
 801a16a:	e7ea      	b.n	801a142 <timeout_thread+0x22>
			mc_interface_unlock();
 801a16c:	f001 f988 	bl	801b480 <mc_interface_unlock>
			mc_interface_set_brake_current(timeout_brake_current);
 801a170:	ed9b 0a00 	vldr	s0, [fp]
 801a174:	f002 f98c 	bl	801c490 <mc_interface_set_brake_current>
			has_timeout = true;
 801a178:	2301      	movs	r3, #1
 801a17a:	702b      	strb	r3, [r5, #0]
 801a17c:	e7f2      	b.n	801a164 <timeout_thread+0x44>
 801a17e:	bf00      	nop
 801a180:	20001a40 	.word	0x20001a40
 801a184:	08030310 	.word	0x08030310
 801a188:	200094fc 	.word	0x200094fc
 801a18c:	200094f0 	.word	0x200094f0
 801a190:	200094f4 	.word	0x200094f4
 801a194:	200094f8 	.word	0x200094f8
 801a198:	10624dd3 	.word	0x10624dd3
 801a19c:	00000000 	.word	0x00000000

0801a1a0 <timeout_init>:
void timeout_init(void) {
 801a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	timeout_msec = 1000;
 801a1a2:	4a0b      	ldr	r2, [pc, #44]	; (801a1d0 <timeout_init+0x30>)
	last_update_time = 0;
 801a1a4:	490b      	ldr	r1, [pc, #44]	; (801a1d4 <timeout_init+0x34>)
	timeout_brake_current = 0.0;
 801a1a6:	4e0c      	ldr	r6, [pc, #48]	; (801a1d8 <timeout_init+0x38>)
	has_timeout = false;
 801a1a8:	4d0c      	ldr	r5, [pc, #48]	; (801a1dc <timeout_init+0x3c>)
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 801a1aa:	4b0d      	ldr	r3, [pc, #52]	; (801a1e0 <timeout_init+0x40>)
 801a1ac:	480d      	ldr	r0, [pc, #52]	; (801a1e4 <timeout_init+0x44>)
void timeout_init(void) {
 801a1ae:	b083      	sub	sp, #12
	timeout_msec = 1000;
 801a1b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801a1b4:	6014      	str	r4, [r2, #0]
	last_update_time = 0;
 801a1b6:	2400      	movs	r4, #0
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 801a1b8:	9400      	str	r4, [sp, #0]
	timeout_brake_current = 0.0;
 801a1ba:	2700      	movs	r7, #0
	last_update_time = 0;
 801a1bc:	600c      	str	r4, [r1, #0]
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 801a1be:	2240      	movs	r2, #64	; 0x40
 801a1c0:	f44f 7166 	mov.w	r1, #920	; 0x398
	timeout_brake_current = 0.0;
 801a1c4:	6037      	str	r7, [r6, #0]
	has_timeout = false;
 801a1c6:	702c      	strb	r4, [r5, #0]
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 801a1c8:	f7f3 fbd2 	bl	800d970 <chThdCreateStatic>
}
 801a1cc:	b003      	add	sp, #12
 801a1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1d0:	200094fc 	.word	0x200094fc
 801a1d4:	200094f4 	.word	0x200094f4
 801a1d8:	200094f8 	.word	0x200094f8
 801a1dc:	200094f0 	.word	0x200094f0
 801a1e0:	0801a121 	.word	0x0801a121
 801a1e4:	20009500 	.word	0x20009500
	...

0801a1f0 <timeout_configure>:
	timeout_msec = timeout;
 801a1f0:	4a02      	ldr	r2, [pc, #8]	; (801a1fc <timeout_configure+0xc>)
	timeout_brake_current = brake_current;
 801a1f2:	4b03      	ldr	r3, [pc, #12]	; (801a200 <timeout_configure+0x10>)
	timeout_msec = timeout;
 801a1f4:	6010      	str	r0, [r2, #0]
	timeout_brake_current = brake_current;
 801a1f6:	ed83 0a00 	vstr	s0, [r3]
 801a1fa:	4770      	bx	lr
 801a1fc:	200094fc 	.word	0x200094fc
 801a200:	200094f8 	.word	0x200094f8
	...

0801a210 <timeout_reset>:
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 801a210:	2320      	movs	r3, #32
 801a212:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.vt_systime;
 801a216:	4a04      	ldr	r2, [pc, #16]	; (801a228 <timeout_reset+0x18>)
 801a218:	2300      	movs	r3, #0
 801a21a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801a21c:	f383 8811 	msr	BASEPRI, r3
	last_update_time = chVTGetSystemTime();
 801a220:	4b02      	ldr	r3, [pc, #8]	; (801a22c <timeout_reset+0x1c>)
 801a222:	601a      	str	r2, [r3, #0]
 801a224:	4770      	bx	lr
 801a226:	bf00      	nop
 801a228:	20001a40 	.word	0x20001a40
 801a22c:	200094f4 	.word	0x200094f4

0801a230 <timeout_has_timeout>:
	return has_timeout;
 801a230:	4b01      	ldr	r3, [pc, #4]	; (801a238 <timeout_has_timeout+0x8>)
 801a232:	7818      	ldrb	r0, [r3, #0]
}
 801a234:	4770      	bx	lr
 801a236:	bf00      	nop
 801a238:	200094f0 	.word	0x200094f0
 801a23c:	00000000 	.word	0x00000000

0801a240 <timeout_get_timeout_msec>:
	return timeout_msec;
 801a240:	4b01      	ldr	r3, [pc, #4]	; (801a248 <timeout_get_timeout_msec+0x8>)
 801a242:	6818      	ldr	r0, [r3, #0]
}
 801a244:	4770      	bx	lr
 801a246:	bf00      	nop
 801a248:	200094fc 	.word	0x200094fc
 801a24c:	00000000 	.word	0x00000000

0801a250 <timeout_get_brake_current>:
	return timeout_brake_current;
 801a250:	4b01      	ldr	r3, [pc, #4]	; (801a258 <timeout_get_brake_current+0x8>)
 801a252:	ed93 0a00 	vldr	s0, [r3]
}
 801a256:	4770      	bx	lr
 801a258:	200094f8 	.word	0x200094f8
 801a25c:	00000000 	.word	0x00000000

0801a260 <cancom_process_thread>:
	}

	chEvtUnregister(&CANDx.rxfull_event, &el);
}

static THD_FUNCTION(cancom_process_thread, arg) {
 801a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a264:	f8df a35c 	ldr.w	sl, [pc, #860]	; 801a5c4 <cancom_process_thread+0x364>
 801a268:	4acb      	ldr	r2, [pc, #812]	; (801a598 <cancom_process_thread+0x338>)
 801a26a:	f8da 3018 	ldr.w	r3, [sl, #24]
	(void)arg;

	chRegSetThreadName("Cancom process");
	process_tp = chThdGetSelfX();
 801a26e:	49cb      	ldr	r1, [pc, #812]	; (801a59c <cancom_process_thread+0x33c>)
 801a270:	4ccb      	ldr	r4, [pc, #812]	; (801a5a0 <cancom_process_thread+0x340>)
 801a272:	4ecc      	ldr	r6, [pc, #816]	; (801a5a4 <cancom_process_thread+0x344>)
 801a274:	4fcc      	ldr	r7, [pc, #816]	; (801a5a8 <cancom_process_thread+0x348>)
 801a276:	4dcd      	ldr	r5, [pc, #820]	; (801a5ac <cancom_process_thread+0x34c>)
 801a278:	f8df 834c 	ldr.w	r8, [pc, #844]	; 801a5c8 <cancom_process_thread+0x368>
static THD_FUNCTION(cancom_process_thread, arg) {
 801a27c:	ed2d 8b04 	vpush	{d8-d9}
 801a280:	b089      	sub	sp, #36	; 0x24
 801a282:	619a      	str	r2, [r3, #24]
							ind = 0;
							stat_tmp->id = id;
							stat_tmp->rx_time = chVTGetSystemTime();
							stat_tmp->rpm = (float)buffer_get_int32(rxmsg.data8, &ind);
							stat_tmp->current = (float)buffer_get_int16(rxmsg.data8, &ind) / 10.0;
							stat_tmp->duty = (float)buffer_get_int16(rxmsg.data8, &ind) / 1000.0;
 801a284:	ed9f 8aca 	vldr	s16, [pc, #808]	; 801a5b0 <cancom_process_thread+0x350>
						mc_interface_set_brake_current_rel(buffer_get_float32(rxmsg.data8, 1e5, &ind));
 801a288:	eddf 8aca 	vldr	s17, [pc, #808]	; 801a5b4 <cancom_process_thread+0x354>
						mc_interface_set_pid_pos((float)buffer_get_int32(rxmsg.data8, &ind) / 1000000.0);
 801a28c:	ed9f 9aca 	vldr	s18, [pc, #808]	; 801a5b8 <cancom_process_thread+0x358>
	process_tp = chThdGetSelfX();
 801a290:	600b      	str	r3, [r1, #0]
	int32_t ind = 0;
 801a292:	2200      	movs	r2, #0
 801a294:	9202      	str	r2, [sp, #8]
		chEvtWaitAny((eventmask_t) 1);
 801a296:	2001      	movs	r0, #1
 801a298:	f7f3 fe02 	bl	800dea0 <chEvtWaitAny>
		while (rx_frame_read != rx_frame_write) {
 801a29c:	f8d4 c000 	ldr.w	ip, [r4]
 801a2a0:	6833      	ldr	r3, [r6, #0]
 801a2a2:	4563      	cmp	r3, ip
 801a2a4:	d0f7      	beq.n	801a296 <cancom_process_thread+0x36>
			CANRxFrame rxmsg = rx_frames[rx_frame_read++];
 801a2a6:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 801a2aa:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
 801a2ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a2b2:	f10d 090c 	add.w	r9, sp, #12
 801a2b6:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
			if (rxmsg.IDE == CAN_IDE_EXT) {
 801a2ba:	f89d 2010 	ldrb.w	r2, [sp, #16]
			CANRxFrame rxmsg = rx_frames[rx_frame_read++];
 801a2be:	f8de 3000 	ldr.w	r3, [lr]
 801a2c2:	f8c9 3000 	str.w	r3, [r9]
			if (rxmsg.IDE == CAN_IDE_EXT) {
 801a2c6:	0691      	lsls	r1, r2, #26
			CANRxFrame rxmsg = rx_frames[rx_frame_read++];
 801a2c8:	f10c 0301 	add.w	r3, ip, #1
 801a2cc:	6023      	str	r3, [r4, #0]
			if (rxmsg.IDE == CAN_IDE_EXT) {
 801a2ce:	d529      	bpl.n	801a324 <cancom_process_thread+0xc4>
				uint8_t id = rxmsg.EID & 0xFF;
 801a2d0:	9b05      	ldr	r3, [sp, #20]
 801a2d2:	f3c3 031c 	ubfx	r3, r3, #0, #29
 801a2d6:	fa5f f983 	uxtb.w	r9, r3
				if (id == 255 || id == app_get_configuration()->controller_id) {
 801a2da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
				CAN_PACKET_ID cmd = rxmsg.EID >> 8;
 801a2de:	ea4f 2b23 	mov.w	fp, r3, asr #8
				if (id == 255 || id == app_get_configuration()->controller_id) {
 801a2e2:	d02e      	beq.n	801a342 <cancom_process_thread+0xe2>
 801a2e4:	f006 fa5c 	bl	80207a0 <app_get_configuration>
 801a2e8:	7803      	ldrb	r3, [r0, #0]
 801a2ea:	454b      	cmp	r3, r9
 801a2ec:	d029      	beq.n	801a342 <cancom_process_thread+0xe2>
 801a2ee:	fa5f f38b 	uxtb.w	r3, fp
				switch (cmd) {
 801a2f2:	2b09      	cmp	r3, #9
 801a2f4:	d10d      	bne.n	801a312 <cancom_process_thread+0xb2>
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	461a      	mov	r2, r3
						if (stat_tmp->id == id || stat_tmp->id == -1) {
 801a2fa:	58e9      	ldr	r1, [r5, r3]
 801a2fc:	4549      	cmp	r1, r9
 801a2fe:	f103 0314 	add.w	r3, r3, #20
 801a302:	f000 8111 	beq.w	801a528 <cancom_process_thread+0x2c8>
 801a306:	3101      	adds	r1, #1
 801a308:	f000 810e 	beq.w	801a528 <cancom_process_thread+0x2c8>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 801a30c:	3201      	adds	r2, #1
 801a30e:	2a0a      	cmp	r2, #10
 801a310:	d1f3      	bne.n	801a2fa <cancom_process_thread+0x9a>
 801a312:	f8d4 c000 	ldr.w	ip, [r4]
				if (sid_callback) {
					sid_callback(rxmsg.SID, rxmsg.data8, rxmsg.DLC);
				}
			}

			if (rx_frame_read == RX_FRAMES_SIZE) {
 801a316:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 801a31a:	d1c1      	bne.n	801a2a0 <cancom_process_thread+0x40>
				rx_frame_read = 0;
 801a31c:	2300      	movs	r3, #0
 801a31e:	6023      	str	r3, [r4, #0]
 801a320:	469c      	mov	ip, r3
 801a322:	e7bd      	b.n	801a2a0 <cancom_process_thread+0x40>
				if (sid_callback) {
 801a324:	f8d8 9000 	ldr.w	r9, [r8]
 801a328:	f1b9 0f00 	cmp.w	r9, #0
 801a32c:	f000 80fa 	beq.w	801a524 <cancom_process_thread+0x2c4>
					sid_callback(rxmsg.SID, rxmsg.data8, rxmsg.DLC);
 801a330:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 801a334:	f002 020f 	and.w	r2, r2, #15
 801a338:	f3c0 000a 	ubfx	r0, r0, #0, #11
 801a33c:	a906      	add	r1, sp, #24
 801a33e:	47c8      	blx	r9
 801a340:	e7e7      	b.n	801a312 <cancom_process_thread+0xb2>
 801a342:	fa5f f38b 	uxtb.w	r3, fp
					switch (cmd) {
 801a346:	2b0b      	cmp	r3, #11
 801a348:	d8d3      	bhi.n	801a2f2 <cancom_process_thread+0x92>
 801a34a:	a201      	add	r2, pc, #4	; (adr r2, 801a350 <cancom_process_thread+0xf0>)
 801a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a350:	0801a4a1 	.word	0x0801a4a1
 801a354:	0801a47f 	.word	0x0801a47f
 801a358:	0801a4e1 	.word	0x0801a4e1
 801a35c:	0801a4c3 	.word	0x0801a4c3
 801a360:	0801a503 	.word	0x0801a503
 801a364:	0801a463 	.word	0x0801a463
 801a368:	0801a43b 	.word	0x0801a43b
 801a36c:	0801a3df 	.word	0x0801a3df
 801a370:	0801a3b5 	.word	0x0801a3b5
 801a374:	0801a2f3 	.word	0x0801a2f3
 801a378:	0801a39b 	.word	0x0801a39b
 801a37c:	0801a381 	.word	0x0801a381
						ind = 0;
 801a380:	2300      	movs	r3, #0
						mc_interface_set_brake_current_rel(buffer_get_float32(rxmsg.data8, 1e5, &ind));
 801a382:	a902      	add	r1, sp, #8
 801a384:	a806      	add	r0, sp, #24
 801a386:	eeb0 0a68 	vmov.f32	s0, s17
						ind = 0;
 801a38a:	9302      	str	r3, [sp, #8]
						mc_interface_set_brake_current_rel(buffer_get_float32(rxmsg.data8, 1e5, &ind));
 801a38c:	f7f7 fcc8 	bl	8011d20 <buffer_get_float32>
 801a390:	f002 f8b6 	bl	801c500 <mc_interface_set_brake_current_rel>
						timeout_reset();
 801a394:	f7ff ff3c 	bl	801a210 <timeout_reset>
						break;
 801a398:	e7bb      	b.n	801a312 <cancom_process_thread+0xb2>
						ind = 0;
 801a39a:	2300      	movs	r3, #0
						mc_interface_set_current_rel(buffer_get_float32(rxmsg.data8, 1e5, &ind));
 801a39c:	a902      	add	r1, sp, #8
 801a39e:	a806      	add	r0, sp, #24
 801a3a0:	eeb0 0a68 	vmov.f32	s0, s17
						ind = 0;
 801a3a4:	9302      	str	r3, [sp, #8]
						mc_interface_set_current_rel(buffer_get_float32(rxmsg.data8, 1e5, &ind));
 801a3a6:	f7f7 fcbb 	bl	8011d20 <buffer_get_float32>
 801a3aa:	f002 f851 	bl	801c450 <mc_interface_set_current_rel>
						timeout_reset();
 801a3ae:	f7ff ff2f 	bl	801a210 <timeout_reset>
						break;
 801a3b2:	e7ae      	b.n	801a312 <cancom_process_thread+0xb2>
						rx_buffer_last_id = rxmsg.data8[ind++];
 801a3b4:	4981      	ldr	r1, [pc, #516]	; (801a5bc <cancom_process_thread+0x35c>)
 801a3b6:	f89d 2018 	ldrb.w	r2, [sp, #24]
						if (commands_send) {
 801a3ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
						rx_buffer_last_id = rxmsg.data8[ind++];
 801a3be:	600a      	str	r2, [r1, #0]
						commands_send = rxmsg.data8[ind++];
 801a3c0:	2202      	movs	r2, #2
 801a3c2:	9202      	str	r2, [sp, #8]
						if (commands_send) {
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	f000 8101 	beq.w	801a5cc <cancom_process_thread+0x36c>
							commands_send_packet(rxmsg.data8 + ind, rxmsg.DLC - ind);
 801a3ca:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801a3ce:	f001 010f 	and.w	r1, r1, #15
 801a3d2:	3902      	subs	r1, #2
 801a3d4:	f10d 001a 	add.w	r0, sp, #26
 801a3d8:	f7fe f972 	bl	80186c0 <commands_send_packet>
 801a3dc:	e799      	b.n	801a312 <cancom_process_thread+0xb2>
						rxbuf_len = (unsigned int)rxmsg.data8[ind++] << 8;
 801a3de:	f89d 301a 	ldrb.w	r3, [sp, #26]
						rxbuf_len |= (unsigned int)rxmsg.data8[ind++];
 801a3e2:	f89d 901b 	ldrb.w	r9, [sp, #27]
						rx_buffer_last_id = rxmsg.data8[ind++];
 801a3e6:	4975      	ldr	r1, [pc, #468]	; (801a5bc <cancom_process_thread+0x35c>)
 801a3e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801a3ec:	600a      	str	r2, [r1, #0]
						rxbuf_len |= (unsigned int)rxmsg.data8[ind++];
 801a3ee:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
						if (rxbuf_len > RX_BUFFER_SIZE) {
 801a3f2:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
						rxbuf_len |= (unsigned int)rxmsg.data8[ind++];
 801a3f6:	f04f 0304 	mov.w	r3, #4
 801a3fa:	9302      	str	r3, [sp, #8]
						commands_send = rxmsg.data8[ind++];
 801a3fc:	f89d b019 	ldrb.w	fp, [sp, #25]
						if (rxbuf_len > RX_BUFFER_SIZE) {
 801a400:	d887      	bhi.n	801a312 <cancom_process_thread+0xb2>
						crc_low = rxmsg.data8[ind++];
 801a402:	2306      	movs	r3, #6
						crc_high = rxmsg.data8[ind++];
 801a404:	f89d 201c 	ldrb.w	r2, [sp, #28]
						crc_low = rxmsg.data8[ind++];
 801a408:	9302      	str	r3, [sp, #8]
						if (crc16(rx_buffer, rxbuf_len)
 801a40a:	4649      	mov	r1, r9
						crc_low = rxmsg.data8[ind++];
 801a40c:	f89d 301d 	ldrb.w	r3, [sp, #29]
						if (crc16(rx_buffer, rxbuf_len)
 801a410:	486b      	ldr	r0, [pc, #428]	; (801a5c0 <cancom_process_thread+0x360>)
						crc_high = rxmsg.data8[ind++];
 801a412:	9201      	str	r2, [sp, #4]
						crc_low = rxmsg.data8[ind++];
 801a414:	9300      	str	r3, [sp, #0]
						if (crc16(rx_buffer, rxbuf_len)
 801a416:	f7f7 fd93 	bl	8011f40 <crc16>
										| (unsigned short) crc_low)) {
 801a41a:	9b00      	ldr	r3, [sp, #0]
 801a41c:	9a01      	ldr	r2, [sp, #4]
 801a41e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						if (crc16(rx_buffer, rxbuf_len)
 801a422:	4298      	cmp	r0, r3
 801a424:	f47f af75 	bne.w	801a312 <cancom_process_thread+0xb2>
							if (commands_send) {
 801a428:	f1bb 0f00 	cmp.w	fp, #0
 801a42c:	f000 80dc 	beq.w	801a5e8 <cancom_process_thread+0x388>
								commands_send_packet(rx_buffer, rxbuf_len);
 801a430:	4649      	mov	r1, r9
 801a432:	4863      	ldr	r0, [pc, #396]	; (801a5c0 <cancom_process_thread+0x360>)
 801a434:	f7fe f944 	bl	80186c0 <commands_send_packet>
 801a438:	e76b      	b.n	801a312 <cancom_process_thread+0xb2>
 801a43a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801a43e:	ba40      	rev16	r0, r0
 801a440:	b280      	uxth	r0, r0
						if (rxbuf_ind < RX_BUFFER_SIZE) {
 801a442:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a446:	f4bf af64 	bcs.w	801a312 <cancom_process_thread+0xb2>
							memcpy(rx_buffer + rxbuf_ind, rxmsg.data8 + 2, rxmsg.DLC - 2);
 801a44a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801a44e:	4b5c      	ldr	r3, [pc, #368]	; (801a5c0 <cancom_process_thread+0x360>)
 801a450:	f002 020f 	and.w	r2, r2, #15
 801a454:	4418      	add	r0, r3
 801a456:	3a02      	subs	r2, #2
 801a458:	f10d 011a 	add.w	r1, sp, #26
 801a45c:	f7f2 fb58 	bl	800cb10 <memcpy>
 801a460:	e757      	b.n	801a312 <cancom_process_thread+0xb2>
						memcpy(rx_buffer + rxmsg.data8[0], rxmsg.data8 + 1, rxmsg.DLC - 1);
 801a462:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801a466:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801a46a:	4b55      	ldr	r3, [pc, #340]	; (801a5c0 <cancom_process_thread+0x360>)
 801a46c:	f002 020f 	and.w	r2, r2, #15
 801a470:	3a01      	subs	r2, #1
 801a472:	4418      	add	r0, r3
 801a474:	f10d 0119 	add.w	r1, sp, #25
 801a478:	f7f2 fb4a 	bl	800cb10 <memcpy>
						break;
 801a47c:	e749      	b.n	801a312 <cancom_process_thread+0xb2>
						ind = 0;
 801a47e:	2300      	movs	r3, #0
						mc_interface_set_current((float)buffer_get_int32(rxmsg.data8, &ind) / 1000.0);
 801a480:	a902      	add	r1, sp, #8
 801a482:	a806      	add	r0, sp, #24
						ind = 0;
 801a484:	9302      	str	r3, [sp, #8]
						mc_interface_set_current((float)buffer_get_int32(rxmsg.data8, &ind) / 1000.0);
 801a486:	f7f7 fc1b 	bl	8011cc0 <buffer_get_int32>
 801a48a:	ee07 0a90 	vmov	s15, r0
 801a48e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a492:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801a496:	f001 ffa3 	bl	801c3e0 <mc_interface_set_current>
						timeout_reset();
 801a49a:	f7ff feb9 	bl	801a210 <timeout_reset>
						break;
 801a49e:	e738      	b.n	801a312 <cancom_process_thread+0xb2>
						ind = 0;
 801a4a0:	2300      	movs	r3, #0
						mc_interface_set_duty((float)buffer_get_int32(rxmsg.data8, &ind) / 100000.0);
 801a4a2:	a902      	add	r1, sp, #8
 801a4a4:	a806      	add	r0, sp, #24
						ind = 0;
 801a4a6:	9302      	str	r3, [sp, #8]
						mc_interface_set_duty((float)buffer_get_int32(rxmsg.data8, &ind) / 100000.0);
 801a4a8:	f7f7 fc0a 	bl	8011cc0 <buffer_get_int32>
 801a4ac:	ee07 0a90 	vmov	s15, r0
 801a4b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a4b4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 801a4b8:	f001 feda 	bl	801c270 <mc_interface_set_duty>
						timeout_reset();
 801a4bc:	f7ff fea8 	bl	801a210 <timeout_reset>
						break;
 801a4c0:	e727      	b.n	801a312 <cancom_process_thread+0xb2>
						ind = 0;
 801a4c2:	2300      	movs	r3, #0
						mc_interface_set_pid_speed((float)buffer_get_int32(rxmsg.data8, &ind));
 801a4c4:	a902      	add	r1, sp, #8
 801a4c6:	a806      	add	r0, sp, #24
						ind = 0;
 801a4c8:	9302      	str	r3, [sp, #8]
						mc_interface_set_pid_speed((float)buffer_get_int32(rxmsg.data8, &ind));
 801a4ca:	f7f7 fbf9 	bl	8011cc0 <buffer_get_int32>
 801a4ce:	ee07 0a90 	vmov	s15, r0
 801a4d2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a4d6:	f001 ff03 	bl	801c2e0 <mc_interface_set_pid_speed>
						timeout_reset();
 801a4da:	f7ff fe99 	bl	801a210 <timeout_reset>
						break;
 801a4de:	e718      	b.n	801a312 <cancom_process_thread+0xb2>
						ind = 0;
 801a4e0:	2300      	movs	r3, #0
						mc_interface_set_brake_current((float)buffer_get_int32(rxmsg.data8, &ind) / 1000.0);
 801a4e2:	a902      	add	r1, sp, #8
 801a4e4:	a806      	add	r0, sp, #24
						ind = 0;
 801a4e6:	9302      	str	r3, [sp, #8]
						mc_interface_set_brake_current((float)buffer_get_int32(rxmsg.data8, &ind) / 1000.0);
 801a4e8:	f7f7 fbea 	bl	8011cc0 <buffer_get_int32>
 801a4ec:	ee07 0a90 	vmov	s15, r0
 801a4f0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a4f4:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801a4f8:	f001 ffca 	bl	801c490 <mc_interface_set_brake_current>
						timeout_reset();
 801a4fc:	f7ff fe88 	bl	801a210 <timeout_reset>
						break;
 801a500:	e707      	b.n	801a312 <cancom_process_thread+0xb2>
						ind = 0;
 801a502:	2300      	movs	r3, #0
						mc_interface_set_pid_pos((float)buffer_get_int32(rxmsg.data8, &ind) / 1000000.0);
 801a504:	a902      	add	r1, sp, #8
 801a506:	a806      	add	r0, sp, #24
						ind = 0;
 801a508:	9302      	str	r3, [sp, #8]
						mc_interface_set_pid_pos((float)buffer_get_int32(rxmsg.data8, &ind) / 1000000.0);
 801a50a:	f7f7 fbd9 	bl	8011cc0 <buffer_get_int32>
 801a50e:	ee07 0a90 	vmov	s15, r0
 801a512:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a516:	ee80 0a09 	vdiv.f32	s0, s0, s18
 801a51a:	f001 ff19 	bl	801c350 <mc_interface_set_pid_pos>
						timeout_reset();
 801a51e:	f7ff fe77 	bl	801a210 <timeout_reset>
						break;
 801a522:	e6f6      	b.n	801a312 <cancom_process_thread+0xb2>
 801a524:	469c      	mov	ip, r3
 801a526:	e6f6      	b.n	801a316 <cancom_process_thread+0xb6>
							stat_tmp->id = id;
 801a528:	eb02 0282 	add.w	r2, r2, r2, lsl #2
							ind = 0;
 801a52c:	2300      	movs	r3, #0
							stat_tmp->id = id;
 801a52e:	f845 9022 	str.w	r9, [r5, r2, lsl #2]
							ind = 0;
 801a532:	9302      	str	r3, [sp, #8]
							stat_tmp->id = id;
 801a534:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 801a538:	2220      	movs	r2, #32
 801a53a:	f382 8811 	msr	BASEPRI, r2
 801a53e:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 801a542:	f383 8811 	msr	BASEPRI, r3
							stat_tmp->rx_time = chVTGetSystemTime();
 801a546:	f8c9 2004 	str.w	r2, [r9, #4]
							stat_tmp->rpm = (float)buffer_get_int32(rxmsg.data8, &ind);
 801a54a:	a902      	add	r1, sp, #8
 801a54c:	a806      	add	r0, sp, #24
 801a54e:	f7f7 fbb7 	bl	8011cc0 <buffer_get_int32>
 801a552:	ee07 0a90 	vmov	s15, r0
 801a556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							stat_tmp->current = (float)buffer_get_int16(rxmsg.data8, &ind) / 10.0;
 801a55a:	a902      	add	r1, sp, #8
							stat_tmp->rpm = (float)buffer_get_int32(rxmsg.data8, &ind);
 801a55c:	edc9 7a02 	vstr	s15, [r9, #8]
							stat_tmp->current = (float)buffer_get_int16(rxmsg.data8, &ind) / 10.0;
 801a560:	a806      	add	r0, sp, #24
 801a562:	f7f7 fb8d 	bl	8011c80 <buffer_get_int16>
 801a566:	ee07 0a90 	vmov	s15, r0
 801a56a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a56e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801a572:	eec6 7a87 	vdiv.f32	s15, s13, s14
							stat_tmp->duty = (float)buffer_get_int16(rxmsg.data8, &ind) / 1000.0;
 801a576:	a902      	add	r1, sp, #8
 801a578:	a806      	add	r0, sp, #24
							stat_tmp->current = (float)buffer_get_int16(rxmsg.data8, &ind) / 10.0;
 801a57a:	edc9 7a03 	vstr	s15, [r9, #12]
							stat_tmp->duty = (float)buffer_get_int16(rxmsg.data8, &ind) / 1000.0;
 801a57e:	f7f7 fb7f 	bl	8011c80 <buffer_get_int16>
 801a582:	ee07 0a90 	vmov	s15, r0
 801a586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a58a:	f8d4 c000 	ldr.w	ip, [r4]
 801a58e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801a592:	edc9 7a04 	vstr	s15, [r9, #16]
							break;
 801a596:	e6be      	b.n	801a316 <cancom_process_thread+0xb6>
 801a598:	08030330 	.word	0x08030330
 801a59c:	2000b370 	.word	0x2000b370
 801a5a0:	2000b778 	.word	0x2000b778
 801a5a4:	2000b77c 	.word	0x2000b77c
 801a5a8:	2000b780 	.word	0x2000b780
 801a5ac:	2000bf54 	.word	0x2000bf54
 801a5b0:	447a0000 	.word	0x447a0000
 801a5b4:	47c35000 	.word	0x47c35000
 801a5b8:	49742400 	.word	0x49742400
 801a5bc:	2000b774 	.word	0x2000b774
 801a5c0:	2000b374 	.word	0x2000b374
 801a5c4:	20001a40 	.word	0x20001a40
 801a5c8:	2000bf50 	.word	0x2000bf50
							commands_set_send_func(send_packet_wrapper);
 801a5cc:	480a      	ldr	r0, [pc, #40]	; (801a5f8 <cancom_process_thread+0x398>)
 801a5ce:	f7fe f86f 	bl	80186b0 <commands_set_send_func>
							commands_process_packet(rxmsg.data8 + ind, rxmsg.DLC - ind);
 801a5d2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801a5d6:	9802      	ldr	r0, [sp, #8]
 801a5d8:	ab06      	add	r3, sp, #24
 801a5da:	f001 010f 	and.w	r1, r1, #15
 801a5de:	1a09      	subs	r1, r1, r0
 801a5e0:	4418      	add	r0, r3
 801a5e2:	f7fe fa2d 	bl	8018a40 <commands_process_packet>
 801a5e6:	e694      	b.n	801a312 <cancom_process_thread+0xb2>
								commands_set_send_func(send_packet_wrapper);
 801a5e8:	4803      	ldr	r0, [pc, #12]	; (801a5f8 <cancom_process_thread+0x398>)
 801a5ea:	f7fe f861 	bl	80186b0 <commands_set_send_func>
								commands_process_packet(rx_buffer, rxbuf_len);
 801a5ee:	4649      	mov	r1, r9
 801a5f0:	4802      	ldr	r0, [pc, #8]	; (801a5fc <cancom_process_thread+0x39c>)
 801a5f2:	f7fe fa25 	bl	8018a40 <commands_process_packet>
 801a5f6:	e68c      	b.n	801a312 <cancom_process_thread+0xb2>
 801a5f8:	0801a9f1 	.word	0x0801a9f1
 801a5fc:	2000b374 	.word	0x2000b374

0801a600 <cancom_read_thread>:
static THD_FUNCTION(cancom_read_thread, arg) {
 801a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a604:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801a6c4 <cancom_read_thread+0xc4>
 801a608:	4a29      	ldr	r2, [pc, #164]	; (801a6b0 <cancom_read_thread+0xb0>)
 801a60a:	f8da 3018 	ldr.w	r3, [sl, #24]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 801a60e:	4829      	ldr	r0, [pc, #164]	; (801a6b4 <cancom_read_thread+0xb4>)
 801a610:	619a      	str	r2, [r3, #24]
 801a612:	b08a      	sub	sp, #40	; 0x28
 801a614:	4669      	mov	r1, sp
 801a616:	f04f 33ff 	mov.w	r3, #4294967295
 801a61a:	2201      	movs	r2, #1
 801a61c:	f7f3 fbd0 	bl	800ddc0 <chEvtRegisterMaskWithFlags>
		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 801a620:	4e25      	ldr	r6, [pc, #148]	; (801a6b8 <cancom_read_thread+0xb8>)
 801a622:	4d26      	ldr	r5, [pc, #152]	; (801a6bc <cancom_read_thread+0xbc>)
 801a624:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801a6c8 <cancom_read_thread+0xc8>
  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 801a628:	f8da 3018 	ldr.w	r3, [sl, #24]
	while(!chThdShouldTerminateX()) {
 801a62c:	7f5b      	ldrb	r3, [r3, #29]
 801a62e:	f013 0404 	ands.w	r4, r3, #4
 801a632:	d136      	bne.n	801a6a2 <cancom_read_thread+0xa2>
		if (chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(10)) == 0) {
 801a634:	2164      	movs	r1, #100	; 0x64
 801a636:	f04f 30ff 	mov.w	r0, #4294967295
 801a63a:	f7f3 fc51 	bl	800dee0 <chEvtWaitAnyTimeout>
 801a63e:	2800      	cmp	r0, #0
 801a640:	d0f2      	beq.n	801a628 <cancom_read_thread+0x28>
		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 801a642:	aa05      	add	r2, sp, #20
 801a644:	4623      	mov	r3, r4
 801a646:	4621      	mov	r1, r4
 801a648:	4630      	mov	r0, r6
 801a64a:	f7f3 ff39 	bl	800e4c0 <canReceive>
		while (result == MSG_OK) {
 801a64e:	2800      	cmp	r0, #0
 801a650:	d1ea      	bne.n	801a628 <cancom_read_thread+0x28>
 801a652:	4f1b      	ldr	r7, [pc, #108]	; (801a6c0 <cancom_read_thread+0xc0>)
				rx_frame_write = 0;
 801a654:	4681      	mov	r9, r0
			rx_frames[rx_frame_write++] = rxmsg;
 801a656:	ac05      	add	r4, sp, #20
 801a658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a65a:	f8d5 e000 	ldr.w	lr, [r5]
 801a65e:	f8d4 c000 	ldr.w	ip, [r4]
 801a662:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
 801a666:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 801a66a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			chEvtSignal(process_tp, (eventmask_t) 1);
 801a66c:	2101      	movs	r1, #1
			rx_frames[rx_frame_write++] = rxmsg;
 801a66e:	eb0e 0301 	add.w	r3, lr, r1
			if (rx_frame_write == RX_FRAMES_SIZE) {
 801a672:	2b64      	cmp	r3, #100	; 0x64
			chEvtSignal(process_tp, (eventmask_t) 1);
 801a674:	6838      	ldr	r0, [r7, #0]
			rx_frames[rx_frame_write++] = rxmsg;
 801a676:	602b      	str	r3, [r5, #0]
 801a678:	f8c4 c000 	str.w	ip, [r4]
				rx_frame_write = 0;
 801a67c:	bf08      	it	eq
 801a67e:	f8c5 9000 	streq.w	r9, [r5]
			chEvtSignal(process_tp, (eventmask_t) 1);
 801a682:	f7f3 fbfd 	bl	800de80 <chEvtSignal>
			result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 801a686:	2300      	movs	r3, #0
 801a688:	4619      	mov	r1, r3
 801a68a:	aa05      	add	r2, sp, #20
 801a68c:	4630      	mov	r0, r6
 801a68e:	f7f3 ff17 	bl	800e4c0 <canReceive>
		while (result == MSG_OK) {
 801a692:	2800      	cmp	r0, #0
 801a694:	d0df      	beq.n	801a656 <cancom_read_thread+0x56>
 801a696:	f8da 3018 	ldr.w	r3, [sl, #24]
	while(!chThdShouldTerminateX()) {
 801a69a:	7f5b      	ldrb	r3, [r3, #29]
 801a69c:	f013 0404 	ands.w	r4, r3, #4
 801a6a0:	d0c8      	beq.n	801a634 <cancom_read_thread+0x34>
	chEvtUnregister(&CANDx.rxfull_event, &el);
 801a6a2:	4669      	mov	r1, sp
 801a6a4:	4803      	ldr	r0, [pc, #12]	; (801a6b4 <cancom_read_thread+0xb4>)
 801a6a6:	f7f3 fba3 	bl	800ddf0 <chEvtUnregister>
}
 801a6aa:	b00a      	add	sp, #40	; 0x28
 801a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6b0:	08030340 	.word	0x08030340
 801a6b4:	20001d5c 	.word	0x20001d5c
 801a6b8:	20001d44 	.word	0x20001d44
 801a6bc:	2000b77c 	.word	0x2000b77c
 801a6c0:	2000b370 	.word	0x2000b370
 801a6c4:	20001a40 	.word	0x20001a40
 801a6c8:	2000b780 	.word	0x2000b780
 801a6cc:	00000000 	.word	0x00000000

0801a6d0 <comm_can_init>:
void comm_can_init(void) {
 801a6d0:	b510      	push	{r4, lr}
 801a6d2:	491e      	ldr	r1, [pc, #120]	; (801a74c <comm_can_init+0x7c>)
 801a6d4:	b082      	sub	sp, #8
 801a6d6:	2300      	movs	r3, #0
		stat_msgs[i].id = -1;
 801a6d8:	f04f 32ff 	mov.w	r2, #4294967295
 801a6dc:	50ca      	str	r2, [r1, r3]
 801a6de:	3314      	adds	r3, #20
	for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 801a6e0:	2bc8      	cmp	r3, #200	; 0xc8
 801a6e2:	d1fb      	bne.n	801a6dc <comm_can_init+0xc>
	rx_frame_write = 0;
 801a6e4:	4b1a      	ldr	r3, [pc, #104]	; (801a750 <comm_can_init+0x80>)
	rx_frame_read = 0;
 801a6e6:	4a1b      	ldr	r2, [pc, #108]	; (801a754 <comm_can_init+0x84>)
	chMtxObjectInit(&can_mtx);
 801a6e8:	481b      	ldr	r0, [pc, #108]	; (801a758 <comm_can_init+0x88>)
	rx_frame_read = 0;
 801a6ea:	2400      	movs	r4, #0
	rx_frame_write = 0;
 801a6ec:	601c      	str	r4, [r3, #0]
	rx_frame_read = 0;
 801a6ee:	6014      	str	r4, [r2, #0]
	chMtxObjectInit(&can_mtx);
 801a6f0:	f7f3 faae 	bl	800dc50 <chMtxObjectInit>
	palSetPadMode(GPIOB, 8,
 801a6f4:	f240 428a 	movw	r2, #1162	; 0x48a
 801a6f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a6fc:	4817      	ldr	r0, [pc, #92]	; (801a75c <comm_can_init+0x8c>)
 801a6fe:	f7f5 fb7f 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 9,
 801a702:	f240 428a 	movw	r2, #1162	; 0x48a
 801a706:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a70a:	4814      	ldr	r0, [pc, #80]	; (801a75c <comm_can_init+0x8c>)
 801a70c:	f7f5 fb78 	bl	800fe00 <_pal_lld_setgroupmode>
	canStart(&CANDx, &cancfg);
 801a710:	4913      	ldr	r1, [pc, #76]	; (801a760 <comm_can_init+0x90>)
 801a712:	4814      	ldr	r0, [pc, #80]	; (801a764 <comm_can_init+0x94>)
 801a714:	f7f3 fe9c 	bl	800e450 <canStart>
	chThdCreateStatic(cancom_read_thread_wa, sizeof(cancom_read_thread_wa), NORMALPRIO + 1,
 801a718:	9400      	str	r4, [sp, #0]
 801a71a:	4b13      	ldr	r3, [pc, #76]	; (801a768 <comm_can_init+0x98>)
 801a71c:	4813      	ldr	r0, [pc, #76]	; (801a76c <comm_can_init+0x9c>)
 801a71e:	2241      	movs	r2, #65	; 0x41
 801a720:	f44f 7166 	mov.w	r1, #920	; 0x398
 801a724:	f7f3 f924 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(cancom_status_thread_wa, sizeof(cancom_status_thread_wa), NORMALPRIO,
 801a728:	9400      	str	r4, [sp, #0]
 801a72a:	4b11      	ldr	r3, [pc, #68]	; (801a770 <comm_can_init+0xa0>)
 801a72c:	4811      	ldr	r0, [pc, #68]	; (801a774 <comm_can_init+0xa4>)
 801a72e:	2240      	movs	r2, #64	; 0x40
 801a730:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 801a734:	f7f3 f91c 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(cancom_process_thread_wa, sizeof(cancom_process_thread_wa), NORMALPRIO,
 801a738:	9400      	str	r4, [sp, #0]
 801a73a:	4b0f      	ldr	r3, [pc, #60]	; (801a778 <comm_can_init+0xa8>)
 801a73c:	480f      	ldr	r0, [pc, #60]	; (801a77c <comm_can_init+0xac>)
 801a73e:	2240      	movs	r2, #64	; 0x40
 801a740:	f241 1198 	movw	r1, #4504	; 0x1198
 801a744:	f7f3 f914 	bl	800d970 <chThdCreateStatic>
}
 801a748:	b002      	add	sp, #8
 801a74a:	bd10      	pop	{r4, pc}
 801a74c:	2000bf54 	.word	0x2000bf54
 801a750:	2000b77c 	.word	0x2000b77c
 801a754:	2000b778 	.word	0x2000b778
 801a758:	20009898 	.word	0x20009898
 801a75c:	40020400 	.word	0x40020400
 801a760:	08030320 	.word	0x08030320
 801a764:	20001d44 	.word	0x20001d44
 801a768:	0801a601 	.word	0x0801a601
 801a76c:	2000aa40 	.word	0x2000aa40
 801a770:	0801a7e1 	.word	0x0801a7e1
 801a774:	2000add8 	.word	0x2000add8
 801a778:	0801a261 	.word	0x0801a261
 801a77c:	200098a8 	.word	0x200098a8

0801a780 <comm_can_transmit_eid>:

		chThdSleep(sleep_time);
	}
}

void comm_can_transmit_eid(uint32_t id, uint8_t *data, uint8_t len) {
 801a780:	b570      	push	{r4, r5, r6, lr}
 801a782:	b084      	sub	sp, #16
 801a784:	2a08      	cmp	r2, #8
		len = 8;
	}

#if CAN_ENABLE
	CANTxFrame txmsg;
	txmsg.IDE = CAN_IDE_EXT;
 801a786:	f89d 3000 	ldrb.w	r3, [sp]
	txmsg.EID = id;
 801a78a:	9e01      	ldr	r6, [sp, #4]
	txmsg.RTR = CAN_RTR_DATA;
	txmsg.DLC = len;
	memcpy(txmsg.data8, data, len);

	chMtxLock(&can_mtx);
 801a78c:	4d0f      	ldr	r5, [pc, #60]	; (801a7cc <comm_can_transmit_eid+0x4c>)
	txmsg.RTR = CAN_RTR_DATA;
 801a78e:	f043 0320 	orr.w	r3, r3, #32
 801a792:	bf28      	it	cs
 801a794:	2208      	movcs	r2, #8
	txmsg.DLC = len;
 801a796:	ac04      	add	r4, sp, #16
 801a798:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 801a79c:	f362 0303 	bfi	r3, r2, #0, #4
 801a7a0:	f804 3d10 	strb.w	r3, [r4, #-16]!
	txmsg.EID = id;
 801a7a4:	f360 061c 	bfi	r6, r0, #0, #29
	memcpy(txmsg.data8, data, len);
 801a7a8:	a802      	add	r0, sp, #8
	txmsg.EID = id;
 801a7aa:	9601      	str	r6, [sp, #4]
	memcpy(txmsg.data8, data, len);
 801a7ac:	f7f2 f9b0 	bl	800cb10 <memcpy>
	chMtxLock(&can_mtx);
 801a7b0:	4628      	mov	r0, r5
 801a7b2:	f7f3 fabd 	bl	800dd30 <chMtxLock>
	canTransmit(&CANDx, CAN_ANY_MAILBOX, &txmsg, MS2ST(20));
 801a7b6:	4622      	mov	r2, r4
 801a7b8:	23c8      	movs	r3, #200	; 0xc8
 801a7ba:	2100      	movs	r1, #0
 801a7bc:	4804      	ldr	r0, [pc, #16]	; (801a7d0 <comm_can_transmit_eid+0x50>)
 801a7be:	f7f3 fe57 	bl	800e470 <canTransmit>
	chMtxUnlock(&can_mtx);
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	f7f3 fac4 	bl	800dd50 <chMtxUnlock>
#else
	(void)id;
	(void)data;
	(void)len;
#endif
}
 801a7c8:	b004      	add	sp, #16
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}
 801a7cc:	20009898 	.word	0x20009898
 801a7d0:	20001d44 	.word	0x20001d44
	...

0801a7e0 <cancom_status_thread>:
static THD_FUNCTION(cancom_status_thread, arg) {
 801a7e0:	b510      	push	{r4, lr}
 801a7e2:	4b28      	ldr	r3, [pc, #160]	; (801a884 <cancom_status_thread+0xa4>)
 801a7e4:	4a28      	ldr	r2, [pc, #160]	; (801a888 <cancom_status_thread+0xa8>)
 801a7e6:	699b      	ldr	r3, [r3, #24]
 801a7e8:	ed2d 8b02 	vpush	{d8}
			int32_t send_index = 0;
 801a7ec:	2400      	movs	r4, #0
static THD_FUNCTION(cancom_status_thread, arg) {
 801a7ee:	b086      	sub	sp, #24
			buffer_append_int16(buffer, (int16_t)(mc_interface_get_duty_cycle_now() * 1000.0), &send_index);
 801a7f0:	eddf 8a26 	vldr	s17, [pc, #152]	; 801a88c <cancom_status_thread+0xac>
 801a7f4:	619a      	str	r2, [r3, #24]
			buffer_append_int16(buffer, (int16_t)(mc_interface_get_tot_current() * 10.0), &send_index);
 801a7f6:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 801a7fa:	e00b      	b.n	801a814 <cancom_status_thread+0x34>
		systime_t sleep_time = CH_CFG_ST_FREQUENCY / app_get_configuration()->send_can_status_rate_hz;
 801a7fc:	f005 ffd0 	bl	80207a0 <app_get_configuration>
 801a800:	f242 7310 	movw	r3, #10000	; 0x2710
 801a804:	6900      	ldr	r0, [r0, #16]
 801a806:	fbb3 f0f0 	udiv	r0, r3, r0
			sleep_time = 1;
 801a80a:	2800      	cmp	r0, #0
		chThdSleep(sleep_time);
 801a80c:	bf08      	it	eq
 801a80e:	2001      	moveq	r0, #1
 801a810:	f7f3 f8e6 	bl	800d9e0 <chThdSleep>
		if (app_get_configuration()->send_can_status) {
 801a814:	f005 ffc4 	bl	80207a0 <app_get_configuration>
 801a818:	7b03      	ldrb	r3, [r0, #12]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d0ee      	beq.n	801a7fc <cancom_status_thread+0x1c>
			int32_t send_index = 0;
 801a81e:	9403      	str	r4, [sp, #12]
			buffer_append_int32(buffer, (int32_t)mc_interface_get_rpm(), &send_index);
 801a820:	f000 fea6 	bl	801b570 <mc_interface_get_rpm>
 801a824:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a828:	aa03      	add	r2, sp, #12
 801a82a:	ee17 1a90 	vmov	r1, s15
 801a82e:	a804      	add	r0, sp, #16
 801a830:	f7f7 f98e 	bl	8011b50 <buffer_append_int32>
			buffer_append_int16(buffer, (int16_t)(mc_interface_get_tot_current() * 10.0), &send_index);
 801a834:	f000 ff04 	bl	801b640 <mc_interface_get_tot_current>
 801a838:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a83c:	aa03      	add	r2, sp, #12
 801a83e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a842:	a804      	add	r0, sp, #16
 801a844:	edcd 7a01 	vstr	s15, [sp, #4]
 801a848:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801a84c:	f7f7 f960 	bl	8011b10 <buffer_append_int16>
			buffer_append_int16(buffer, (int16_t)(mc_interface_get_duty_cycle_now() * 1000.0), &send_index);
 801a850:	f000 fe4e 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 801a854:	ee20 0a28 	vmul.f32	s0, s0, s17
 801a858:	aa03      	add	r2, sp, #12
 801a85a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a85e:	a804      	add	r0, sp, #16
 801a860:	edcd 7a01 	vstr	s15, [sp, #4]
 801a864:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801a868:	f7f7 f952 	bl	8011b10 <buffer_append_int16>
			comm_can_transmit_eid(app_get_configuration()->controller_id |
 801a86c:	f005 ff98 	bl	80207a0 <app_get_configuration>
 801a870:	7800      	ldrb	r0, [r0, #0]
 801a872:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801a876:	f440 6010 	orr.w	r0, r0, #2304	; 0x900
 801a87a:	a904      	add	r1, sp, #16
 801a87c:	f7ff ff80 	bl	801a780 <comm_can_transmit_eid>
 801a880:	e7bc      	b.n	801a7fc <cancom_status_thread+0x1c>
 801a882:	bf00      	nop
 801a884:	20001a40 	.word	0x20001a40
 801a888:	08030350 	.word	0x08030350
 801a88c:	447a0000 	.word	0x447a0000

0801a890 <comm_can_send_buffer>:
 *
 * @param send
 * If true, this packet will be passed to the send function of commands.
 * Otherwise, it will be passed to the process function.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, bool send) {
 801a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a894:	b087      	sub	sp, #28
	uint8_t send_buffer[8];

	if (len <= 6) {
 801a896:	2a06      	cmp	r2, #6
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, bool send) {
 801a898:	4616      	mov	r6, r2
 801a89a:	9001      	str	r0, [sp, #4]
 801a89c:	468b      	mov	fp, r1
 801a89e:	9302      	str	r3, [sp, #8]
	if (len <= 6) {
 801a8a0:	d97c      	bls.n	801a99c <comm_can_send_buffer+0x10c>
 801a8a2:	f04f 0900 	mov.w	r9, #0
 801a8a6:	b2d3      	uxtb	r3, r2
 801a8a8:	464c      	mov	r4, r9
 801a8aa:	f440 67a0 	orr.w	r7, r0, #1280	; 0x500
 801a8ae:	9303      	str	r3, [sp, #12]
 801a8b0:	460d      	mov	r5, r1
		comm_can_transmit_eid(controller_id |
				((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
	} else {
		unsigned int end_a = 0;
		for (unsigned int i = 0;i < len;i += 7) {
			if (i > 255) {
 801a8b2:	f240 1803 	movw	r8, #259	; 0x103
 801a8b6:	e001      	b.n	801a8bc <comm_can_send_buffer+0x2c>
 801a8b8:	4544      	cmp	r4, r8
 801a8ba:	d03f      	beq.n	801a93c <comm_can_send_buffer+0xac>
				break;
			}

			end_a = i + 7;
 801a8bc:	3407      	adds	r4, #7

			uint8_t send_len = 7;
			send_buffer[0] = i;
 801a8be:	fa5f f389 	uxtb.w	r3, r9

			if ((i + 7) <= len) {
 801a8c2:	42a6      	cmp	r6, r4
			send_buffer[0] = i;
 801a8c4:	f88d 3010 	strb.w	r3, [sp, #16]
			if ((i + 7) <= len) {
 801a8c8:	f0c0 8082 	bcc.w	801a9d0 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 1, data + i, send_len);
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	88aa      	ldrh	r2, [r5, #4]
 801a8d0:	f8cd 3011 	str.w	r3, [sp, #17]
 801a8d4:	79ab      	ldrb	r3, [r5, #6]
 801a8d6:	f8ad 2015 	strh.w	r2, [sp, #21]
 801a8da:	f88d 3017 	strb.w	r3, [sp, #23]
 801a8de:	2208      	movs	r2, #8
			} else {
				send_len = len - i;
				memcpy(send_buffer + 1, data + i, send_len);
			}

			comm_can_transmit_eid(controller_id |
 801a8e0:	a904      	add	r1, sp, #16
 801a8e2:	4638      	mov	r0, r7
 801a8e4:	f7ff ff4c 	bl	801a780 <comm_can_transmit_eid>
		for (unsigned int i = 0;i < len;i += 7) {
 801a8e8:	42a6      	cmp	r6, r4
 801a8ea:	f109 0907 	add.w	r9, r9, #7
 801a8ee:	f105 0507 	add.w	r5, r5, #7
 801a8f2:	d8e1      	bhi.n	801a8b8 <comm_can_send_buffer+0x28>
			comm_can_transmit_eid(controller_id |
					((uint32_t)CAN_PACKET_FILL_RX_BUFFER_LONG << 8), send_buffer, send_len + 2);
		}

		uint32_t ind = 0;
		send_buffer[ind++] = app_get_configuration()->controller_id;
 801a8f4:	f005 ff54 	bl	80207a0 <app_get_configuration>
 801a8f8:	7802      	ldrb	r2, [r0, #0]
 801a8fa:	f88d 2010 	strb.w	r2, [sp, #16]
		send_buffer[ind++] = send;
 801a8fe:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801a902:	f88d 2011 	strb.w	r2, [sp, #17]
		send_buffer[ind++] = len >> 8;
 801a906:	0a33      	lsrs	r3, r6, #8
		send_buffer[ind++] = len & 0xFF;
 801a908:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801a90c:	f88d 2013 	strb.w	r2, [sp, #19]
		unsigned short crc = crc16(data, len);
 801a910:	4631      	mov	r1, r6
 801a912:	4658      	mov	r0, fp
		send_buffer[ind++] = len >> 8;
 801a914:	f88d 3012 	strb.w	r3, [sp, #18]
		unsigned short crc = crc16(data, len);
 801a918:	f7f7 fb12 	bl	8011f40 <crc16>
		send_buffer[ind++] = (uint8_t)(crc >> 8);
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);

		comm_can_transmit_eid(controller_id |
 801a91c:	9a01      	ldr	r2, [sp, #4]
		unsigned short crc = crc16(data, len);
 801a91e:	4603      	mov	r3, r0
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 801a920:	0a04      	lsrs	r4, r0, #8
		comm_can_transmit_eid(controller_id |
 801a922:	a904      	add	r1, sp, #16
 801a924:	f442 60e0 	orr.w	r0, r2, #1792	; 0x700
 801a928:	2206      	movs	r2, #6
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 801a92a:	f88d 3015 	strb.w	r3, [sp, #21]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 801a92e:	f88d 4014 	strb.w	r4, [sp, #20]
		comm_can_transmit_eid(controller_id |
 801a932:	f7ff ff25 	bl	801a780 <comm_can_transmit_eid>
				((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
	}
}
 801a936:	b007      	add	sp, #28
 801a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a93c:	9b01      	ldr	r3, [sp, #4]
 801a93e:	f443 68c0 	orr.w	r8, r3, #1536	; 0x600
				memcpy(send_buffer + 2, data + i, send_len);
 801a942:	9b03      	ldr	r3, [sp, #12]
 801a944:	f20b 1a03 	addw	sl, fp, #259	; 0x103
 801a948:	1d9f      	adds	r7, r3, #6
 801a94a:	f103 0908 	add.w	r9, r3, #8
 801a94e:	e010      	b.n	801a972 <comm_can_send_buffer+0xe2>
				memcpy(send_buffer + 2, data + i, send_len);
 801a950:	f8da 2000 	ldr.w	r2, [sl]
 801a954:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801a958:	f8cd 2012 	str.w	r2, [sp, #18]
 801a95c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a960:	2208      	movs	r2, #8
			comm_can_transmit_eid(controller_id |
 801a962:	a904      	add	r1, sp, #16
 801a964:	4640      	mov	r0, r8
 801a966:	f7ff ff0b 	bl	801a780 <comm_can_transmit_eid>
		for (unsigned int i = end_a;i < len;i += 6) {
 801a96a:	42a6      	cmp	r6, r4
 801a96c:	f10a 0a06 	add.w	sl, sl, #6
 801a970:	d9c0      	bls.n	801a8f4 <comm_can_send_buffer+0x64>
			send_buffer[0] = i >> 8;
 801a972:	0a23      	lsrs	r3, r4, #8
			send_buffer[1] = i & 0xFF;
 801a974:	f88d 4011 	strb.w	r4, [sp, #17]
			if ((i + 6) <= len) {
 801a978:	3406      	adds	r4, #6
 801a97a:	b2e5      	uxtb	r5, r4
 801a97c:	42a6      	cmp	r6, r4
			send_buffer[0] = i >> 8;
 801a97e:	f88d 3010 	strb.w	r3, [sp, #16]
				memcpy(send_buffer + 2, data + i, send_len);
 801a982:	eba7 0205 	sub.w	r2, r7, r5
			if ((i + 6) <= len) {
 801a986:	d2e3      	bcs.n	801a950 <comm_can_send_buffer+0xc0>
				memcpy(send_buffer + 2, data + i, send_len);
 801a988:	b2d2      	uxtb	r2, r2
 801a98a:	4651      	mov	r1, sl
 801a98c:	f10d 0012 	add.w	r0, sp, #18
 801a990:	f7f2 f8be 	bl	800cb10 <memcpy>
 801a994:	eba9 0205 	sub.w	r2, r9, r5
 801a998:	b2d2      	uxtb	r2, r2
 801a99a:	e7e2      	b.n	801a962 <comm_can_send_buffer+0xd2>
		send_buffer[ind++] = app_get_configuration()->controller_id;
 801a99c:	f005 ff00 	bl	80207a0 <app_get_configuration>
 801a9a0:	7803      	ldrb	r3, [r0, #0]
 801a9a2:	f88d 3010 	strb.w	r3, [sp, #16]
		memcpy(send_buffer + ind, data, len);
 801a9a6:	4659      	mov	r1, fp
		send_buffer[ind++] = send;
 801a9a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801a9ac:	f88d 3011 	strb.w	r3, [sp, #17]
		memcpy(send_buffer + ind, data, len);
 801a9b0:	4632      	mov	r2, r6
 801a9b2:	f10d 0012 	add.w	r0, sp, #18
 801a9b6:	f7f2 f8ab 	bl	800cb10 <memcpy>
		comm_can_transmit_eid(controller_id |
 801a9ba:	9b01      	ldr	r3, [sp, #4]
		ind += len;
 801a9bc:	1cb2      	adds	r2, r6, #2
		comm_can_transmit_eid(controller_id |
 801a9be:	b2d2      	uxtb	r2, r2
 801a9c0:	f443 6000 	orr.w	r0, r3, #2048	; 0x800
 801a9c4:	a904      	add	r1, sp, #16
 801a9c6:	f7ff fedb 	bl	801a780 <comm_can_transmit_eid>
}
 801a9ca:	b007      	add	sp, #28
 801a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(send_buffer + 1, data + i, send_len);
 801a9d0:	9a03      	ldr	r2, [sp, #12]
 801a9d2:	1ad3      	subs	r3, r2, r3
 801a9d4:	b2da      	uxtb	r2, r3
 801a9d6:	4629      	mov	r1, r5
 801a9d8:	f10d 0011 	add.w	r0, sp, #17
 801a9dc:	f7f2 f898 	bl	800cb10 <memcpy>
 801a9e0:	9b03      	ldr	r3, [sp, #12]
 801a9e2:	f1c4 0208 	rsb	r2, r4, #8
 801a9e6:	441a      	add	r2, r3
 801a9e8:	b2d2      	uxtb	r2, r2
 801a9ea:	e779      	b.n	801a8e0 <comm_can_send_buffer+0x50>
 801a9ec:	0000      	movs	r0, r0
	...

0801a9f0 <send_packet_wrapper>:
	}

	return 0;
}

static void send_packet_wrapper(unsigned char *data, unsigned int len) {
 801a9f0:	b410      	push	{r4}
	comm_can_send_buffer(rx_buffer_last_id, data, len, true);
 801a9f2:	4c04      	ldr	r4, [pc, #16]	; (801aa04 <send_packet_wrapper+0x14>)
 801a9f4:	460a      	mov	r2, r1
 801a9f6:	2301      	movs	r3, #1
 801a9f8:	4601      	mov	r1, r0
 801a9fa:	7820      	ldrb	r0, [r4, #0]
}
 801a9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	comm_can_send_buffer(rx_buffer_last_id, data, len, true);
 801aa00:	f7ff bf46 	b.w	801a890 <comm_can_send_buffer>
 801aa04:	2000b774 	.word	0x2000b774
	...

0801aa10 <comm_can_set_duty>:
void comm_can_set_duty(uint8_t controller_id, float duty) {
 801aa10:	b510      	push	{r4, lr}
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 801aa12:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801aa44 <comm_can_set_duty+0x34>
 801aa16:	ee20 0a27 	vmul.f32	s0, s0, s15
void comm_can_set_duty(uint8_t controller_id, float duty) {
 801aa1a:	b082      	sub	sp, #8
	int32_t send_index = 0;
 801aa1c:	aa02      	add	r2, sp, #8
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 801aa1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int32_t send_index = 0;
 801aa22:	2300      	movs	r3, #0
 801aa24:	f842 3d08 	str.w	r3, [r2, #-8]!
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 801aa28:	ee17 1a90 	vmov	r1, s15
void comm_can_set_duty(uint8_t controller_id, float duty) {
 801aa2c:	4604      	mov	r4, r0
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 801aa2e:	a801      	add	r0, sp, #4
 801aa30:	f7f7 f88e 	bl	8011b50 <buffer_append_int32>
	comm_can_transmit_eid(controller_id |
 801aa34:	a901      	add	r1, sp, #4
 801aa36:	4620      	mov	r0, r4
 801aa38:	f89d 2000 	ldrb.w	r2, [sp]
 801aa3c:	f7ff fea0 	bl	801a780 <comm_can_transmit_eid>
}
 801aa40:	b002      	add	sp, #8
 801aa42:	bd10      	pop	{r4, pc}
 801aa44:	47c35000 	.word	0x47c35000
	...

0801aa50 <comm_can_set_current>:
void comm_can_set_current(uint8_t controller_id, float current) {
 801aa50:	b510      	push	{r4, lr}
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aa52:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801aa88 <comm_can_set_current+0x38>
 801aa56:	ee20 0a27 	vmul.f32	s0, s0, s15
void comm_can_set_current(uint8_t controller_id, float current) {
 801aa5a:	b082      	sub	sp, #8
	int32_t send_index = 0;
 801aa5c:	aa02      	add	r2, sp, #8
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aa5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int32_t send_index = 0;
 801aa62:	2300      	movs	r3, #0
 801aa64:	f842 3d08 	str.w	r3, [r2, #-8]!
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aa68:	ee17 1a90 	vmov	r1, s15
void comm_can_set_current(uint8_t controller_id, float current) {
 801aa6c:	4604      	mov	r4, r0
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aa6e:	a801      	add	r0, sp, #4
 801aa70:	f7f7 f86e 	bl	8011b50 <buffer_append_int32>
	comm_can_transmit_eid(controller_id |
 801aa74:	a901      	add	r1, sp, #4
 801aa76:	f444 7080 	orr.w	r0, r4, #256	; 0x100
 801aa7a:	f89d 2000 	ldrb.w	r2, [sp]
 801aa7e:	f7ff fe7f 	bl	801a780 <comm_can_transmit_eid>
}
 801aa82:	b002      	add	sp, #8
 801aa84:	bd10      	pop	{r4, pc}
 801aa86:	bf00      	nop
 801aa88:	447a0000 	.word	0x447a0000
 801aa8c:	00000000 	.word	0x00000000

0801aa90 <comm_can_set_current_brake>:
void comm_can_set_current_brake(uint8_t controller_id, float current) {
 801aa90:	b510      	push	{r4, lr}
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aa92:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801aac8 <comm_can_set_current_brake+0x38>
 801aa96:	ee20 0a27 	vmul.f32	s0, s0, s15
void comm_can_set_current_brake(uint8_t controller_id, float current) {
 801aa9a:	b082      	sub	sp, #8
	int32_t send_index = 0;
 801aa9c:	aa02      	add	r2, sp, #8
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aa9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int32_t send_index = 0;
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	f842 3d08 	str.w	r3, [r2, #-8]!
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aaa8:	ee17 1a90 	vmov	r1, s15
void comm_can_set_current_brake(uint8_t controller_id, float current) {
 801aaac:	4604      	mov	r4, r0
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 801aaae:	a801      	add	r0, sp, #4
 801aab0:	f7f7 f84e 	bl	8011b50 <buffer_append_int32>
	comm_can_transmit_eid(controller_id |
 801aab4:	a901      	add	r1, sp, #4
 801aab6:	f444 7000 	orr.w	r0, r4, #512	; 0x200
 801aaba:	f89d 2000 	ldrb.w	r2, [sp]
 801aabe:	f7ff fe5f 	bl	801a780 <comm_can_transmit_eid>
}
 801aac2:	b002      	add	sp, #8
 801aac4:	bd10      	pop	{r4, pc}
 801aac6:	bf00      	nop
 801aac8:	447a0000 	.word	0x447a0000
 801aacc:	00000000 	.word	0x00000000

0801aad0 <comm_can_get_status_msg_index>:
	if (index < CAN_STATUS_MSGS_TO_STORE) {
 801aad0:	2809      	cmp	r0, #9
		return &stat_msgs[index];
 801aad2:	bfdd      	ittte	le
 801aad4:	4b03      	ldrle	r3, [pc, #12]	; (801aae4 <comm_can_get_status_msg_index+0x14>)
 801aad6:	eb00 0080 	addle.w	r0, r0, r0, lsl #2
 801aada:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
		return 0;
 801aade:	2000      	movgt	r0, #0
}
 801aae0:	4770      	bx	lr
 801aae2:	bf00      	nop
 801aae4:	2000bf54 	.word	0x2000bf54
	...

0801aaf0 <led_external_set_state>:
	state = LED_EXT_OFF;
	chThdCreateStatic(led_thread_wa, sizeof(led_thread_wa), LOWPRIO, led_thread, NULL);
}

void led_external_set_state(LED_EXT_STATE new_state) {
	state = new_state;
 801aaf0:	4b01      	ldr	r3, [pc, #4]	; (801aaf8 <led_external_set_state+0x8>)
 801aaf2:	7018      	strb	r0, [r3, #0]
 801aaf4:	4770      	bx	lr
 801aaf6:	bf00      	nop
 801aaf8:	2000c01d 	.word	0x2000c01d
 801aafc:	00000000 	.word	0x00000000

0801ab00 <led_external_set_reversed>:
}

void led_external_set_reversed(bool newstate) {
	reverse_leds = newstate;
 801ab00:	4b01      	ldr	r3, [pc, #4]	; (801ab08 <led_external_set_reversed+0x8>)
 801ab02:	7018      	strb	r0, [r3, #0]
 801ab04:	4770      	bx	lr
 801ab06:	bf00      	nop
 801ab08:	2000c01c 	.word	0x2000c01c
 801ab0c:	00000000 	.word	0x00000000

0801ab10 <encoder_deinit>:
static void spi_transfer(uint16_t *in_buf, const uint16_t *out_buf, int length);
static void spi_begin(void);
static void spi_end(void);
static void spi_delay(void);

void encoder_deinit(void) {
 801ab10:	b510      	push	{r4, lr}
	nvicDisableVector(HW_ENC_EXTI_CH);
 801ab12:	2028      	movs	r0, #40	; 0x28
 801ab14:	f7f4 fb14 	bl	800f140 <nvicDisableVector>
	nvicDisableVector(HW_ENC_TIM_ISR_CH);

	TIM_DeInit(HW_ENC_TIM);

	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT_PULLUP);
 801ab18:	4c14      	ldr	r4, [pc, #80]	; (801ab6c <encoder_deinit+0x5c>)
	nvicDisableVector(HW_ENC_TIM_ISR_CH);
 801ab1a:	201e      	movs	r0, #30
 801ab1c:	f7f4 fb10 	bl	800f140 <nvicDisableVector>
	TIM_DeInit(HW_ENC_TIM);
 801ab20:	4813      	ldr	r0, [pc, #76]	; (801ab70 <encoder_deinit+0x60>)
 801ab22:	f009 ff25 	bl	8024970 <TIM_DeInit>
	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT_PULLUP);
 801ab26:	4620      	mov	r0, r4
 801ab28:	2220      	movs	r2, #32
 801ab2a:	2180      	movs	r1, #128	; 0x80
 801ab2c:	f7f5 f968 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN, PAL_MODE_INPUT_PULLUP);
 801ab30:	4620      	mov	r0, r4
 801ab32:	2220      	movs	r2, #32
 801ab34:	2140      	movs	r1, #64	; 0x40
 801ab36:	f7f5 f963 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_CS_GPIO, SPI_SW_CS_PIN, PAL_MODE_INPUT_PULLUP);
 801ab3a:	2220      	movs	r2, #32
 801ab3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ab40:	480c      	ldr	r0, [pc, #48]	; (801ab74 <encoder_deinit+0x64>)
 801ab42:	f7f5 f95d 	bl	800fe00 <_pal_lld_setgroupmode>

	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 801ab46:	4620      	mov	r0, r4
 801ab48:	2220      	movs	r2, #32
 801ab4a:	2140      	movs	r1, #64	; 0x40
 801ab4c:	f7f5 f958 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 801ab50:	4620      	mov	r0, r4
 801ab52:	2220      	movs	r2, #32
 801ab54:	2180      	movs	r1, #128	; 0x80
 801ab56:	f7f5 f953 	bl	800fe00 <_pal_lld_setgroupmode>

	index_found = false;
 801ab5a:	4c07      	ldr	r4, [pc, #28]	; (801ab78 <encoder_deinit+0x68>)
	mode = ENCODER_MODE_NONE;
 801ab5c:	4807      	ldr	r0, [pc, #28]	; (801ab7c <encoder_deinit+0x6c>)
	last_enc_angle = 0.0;
 801ab5e:	4a08      	ldr	r2, [pc, #32]	; (801ab80 <encoder_deinit+0x70>)
	index_found = false;
 801ab60:	2300      	movs	r3, #0
	last_enc_angle = 0.0;
 801ab62:	2100      	movs	r1, #0
	index_found = false;
 801ab64:	7023      	strb	r3, [r4, #0]
	mode = ENCODER_MODE_NONE;
 801ab66:	7003      	strb	r3, [r0, #0]
	last_enc_angle = 0.0;
 801ab68:	6011      	str	r1, [r2, #0]
 801ab6a:	bd10      	pop	{r4, pc}
 801ab6c:	40020400 	.word	0x40020400
 801ab70:	40000800 	.word	0x40000800
 801ab74:	40020800 	.word	0x40020800
 801ab78:	2000c028 	.word	0x2000c028
 801ab7c:	2000c030 	.word	0x2000c030
 801ab80:	2000c02c 	.word	0x2000c02c
	...

0801ab90 <encoder_init_abi>:
}

void encoder_init_abi(uint32_t counts) {
 801ab90:	b570      	push	{r4, r5, r6, lr}
	EXTI_InitTypeDef   EXTI_InitStructure;

	// Initialize variables
	index_found = false;
	enc_counts = counts;
 801ab92:	4e28      	ldr	r6, [pc, #160]	; (801ac34 <encoder_init_abi+0xa4>)

	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 801ab94:	4c28      	ldr	r4, [pc, #160]	; (801ac38 <encoder_init_abi+0xa8>)
	index_found = false;
 801ab96:	4b29      	ldr	r3, [pc, #164]	; (801ac3c <encoder_init_abi+0xac>)
	enc_counts = counts;
 801ab98:	6030      	str	r0, [r6, #0]
void encoder_init_abi(uint32_t counts) {
 801ab9a:	b082      	sub	sp, #8
	index_found = false;
 801ab9c:	2500      	movs	r5, #0
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 801ab9e:	4620      	mov	r0, r4
 801aba0:	f44f 7281 	mov.w	r2, #258	; 0x102
 801aba4:	2140      	movs	r1, #64	; 0x40
	index_found = false;
 801aba6:	701d      	strb	r5, [r3, #0]
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 801aba8:	f7f5 f92a 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 801abac:	f44f 7281 	mov.w	r2, #258	; 0x102
 801abb0:	4620      	mov	r0, r4
 801abb2:	2180      	movs	r1, #128	; 0x80
 801abb4:	f7f5 f924 	bl	800fe00 <_pal_lld_setgroupmode>
//	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));

	// Enable timer clock
	HW_ENC_TIM_CLK_EN();
 801abb8:	2101      	movs	r1, #1
 801abba:	2004      	movs	r0, #4

	// Enable SYSCFG clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	TIM_EncoderInterfaceConfig (HW_ENC_TIM, TIM_EncoderMode_TI12,
 801abbc:	f5a4 34fe 	sub.w	r4, r4, #130048	; 0x1fc00
	HW_ENC_TIM_CLK_EN();
 801abc0:	f009 fe7e 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801abc4:	2101      	movs	r1, #1
 801abc6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801abca:	f009 fe89 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	TIM_EncoderInterfaceConfig (HW_ENC_TIM, TIM_EncoderMode_TI12,
 801abce:	462a      	mov	r2, r5
 801abd0:	462b      	mov	r3, r5
 801abd2:	4620      	mov	r0, r4
 801abd4:	2103      	movs	r1, #3
 801abd6:	f00a fa4b 	bl	8025070 <TIM_EncoderInterfaceConfig>
			TIM_ICPolarity_Rising,
			TIM_ICPolarity_Rising);
	TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 801abda:	6831      	ldr	r1, [r6, #0]
 801abdc:	4620      	mov	r0, r4
 801abde:	3901      	subs	r1, #1
 801abe0:	f009 fff6 	bl	8024bd0 <TIM_SetAutoreload>

	// Filter
	HW_ENC_TIM->CCMR1 |= 6 << 12 | 6 << 4;
 801abe4:	69a3      	ldr	r3, [r4, #24]
 801abe6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 801abea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801abee:	61a3      	str	r3, [r4, #24]
	HW_ENC_TIM->CCMR2 |= 6 << 4;
 801abf0:	69e3      	ldr	r3, [r4, #28]
 801abf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801abf6:	61e3      	str	r3, [r4, #28]

	TIM_Cmd(HW_ENC_TIM, ENABLE);
 801abf8:	4620      	mov	r0, r4
 801abfa:	2101      	movs	r1, #1
 801abfc:	f00a f800 	bl	8024c00 <TIM_Cmd>

	// Interrupt on index pulse

	// Connect EXTI Line to pin
	SYSCFG_EXTILineConfig(HW_ENC_EXTI_PORTSRC, HW_ENC_EXTI_PINSRC);
 801ac00:	210b      	movs	r1, #11
 801ac02:	2002      	movs	r0, #2
 801ac04:	f009 fe9c 	bl	8024940 <SYSCFG_EXTILineConfig>

	// Configure EXTI Line
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801ac08:	2401      	movs	r4, #1
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
 801ac0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 801ac0e:	2308      	movs	r3, #8
	EXTI_Init(&EXTI_InitStructure);
 801ac10:	4668      	mov	r0, sp
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 801ac12:	f88d 3005 	strb.w	r3, [sp, #5]
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
 801ac16:	9200      	str	r2, [sp, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 801ac18:	f88d 5004 	strb.w	r5, [sp, #4]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801ac1c:	f88d 4006 	strb.w	r4, [sp, #6]
	EXTI_Init(&EXTI_InitStructure);
 801ac20:	f009 fd16 	bl	8024650 <EXTI_Init>

	// Enable and set EXTI Line Interrupt to the highest priority
	nvicEnableVector(HW_ENC_EXTI_CH, 0);
 801ac24:	4629      	mov	r1, r5
 801ac26:	2028      	movs	r0, #40	; 0x28
 801ac28:	f7f4 fa6a 	bl	800f100 <nvicEnableVector>

	mode = ENCODER_MODE_ABI;
 801ac2c:	4b04      	ldr	r3, [pc, #16]	; (801ac40 <encoder_init_abi+0xb0>)
 801ac2e:	701c      	strb	r4, [r3, #0]
}
 801ac30:	b002      	add	sp, #8
 801ac32:	bd70      	pop	{r4, r5, r6, pc}
 801ac34:	2000103c 	.word	0x2000103c
 801ac38:	40020400 	.word	0x40020400
 801ac3c:	2000c028 	.word	0x2000c028
 801ac40:	2000c030 	.word	0x2000c030
	...

0801ac50 <encoder_init_as5047p_spi>:

void encoder_init_as5047p_spi(void) {
 801ac50:	b530      	push	{r4, r5, lr}
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT);
 801ac52:	4d1e      	ldr	r5, [pc, #120]	; (801accc <encoder_init_as5047p_spi+0x7c>)
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 801ac54:	4c1e      	ldr	r4, [pc, #120]	; (801acd0 <encoder_init_as5047p_spi+0x80>)
void encoder_init_as5047p_spi(void) {
 801ac56:	b085      	sub	sp, #20
	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT);
 801ac58:	4628      	mov	r0, r5
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	2180      	movs	r1, #128	; 0x80
 801ac5e:	f7f5 f8cf 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 801ac62:	4628      	mov	r0, r5
 801ac64:	2219      	movs	r2, #25
 801ac66:	2140      	movs	r1, #64	; 0x40
 801ac68:	f7f5 f8ca 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_CS_GPIO, SPI_SW_CS_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 801ac6c:	2219      	movs	r2, #25
 801ac6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ac72:	4818      	ldr	r0, [pc, #96]	; (801acd4 <encoder_init_as5047p_spi+0x84>)
 801ac74:	f7f5 f8c4 	bl	800fe00 <_pal_lld_setgroupmode>
	HW_ENC_TIM_CLK_EN();
 801ac78:	2101      	movs	r1, #1
 801ac7a:	2004      	movs	r0, #4
 801ac7c:	f009 fe20 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801ac80:	2300      	movs	r3, #0
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 801ac82:	4620      	mov	r0, r4
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
 801ac84:	f241 0267 	movw	r2, #4199	; 0x1067
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 801ac88:	a901      	add	r1, sp, #4
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801ac8a:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 801ac8e:	f8ad 3006 	strh.w	r3, [sp, #6]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801ac92:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 801ac96:	f88d 300e 	strb.w	r3, [sp, #14]
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
 801ac9a:	9202      	str	r2, [sp, #8]
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 801ac9c:	f009 ff48 	bl	8024b30 <TIM_TimeBaseInit>

	// Enable overflow interrupt
	TIM_ITConfig(HW_ENC_TIM, TIM_IT_Update, ENABLE);
 801aca0:	2201      	movs	r2, #1
 801aca2:	4611      	mov	r1, r2
 801aca4:	4620      	mov	r0, r4
 801aca6:	f00a f9a3 	bl	8024ff0 <TIM_ITConfig>

	// Enable timer
	TIM_Cmd(HW_ENC_TIM, ENABLE);
 801acaa:	4620      	mov	r0, r4
 801acac:	2101      	movs	r1, #1
 801acae:	f009 ffa7 	bl	8024c00 <TIM_Cmd>

	nvicEnableVector(HW_ENC_TIM_ISR_CH, 6);
 801acb2:	2106      	movs	r1, #6
 801acb4:	201e      	movs	r0, #30
 801acb6:	f7f4 fa23 	bl	800f100 <nvicEnableVector>

	mode = ENCODER_MODE_AS5047P_SPI;
 801acba:	4907      	ldr	r1, [pc, #28]	; (801acd8 <encoder_init_as5047p_spi+0x88>)
	index_found = true;
 801acbc:	4b07      	ldr	r3, [pc, #28]	; (801acdc <encoder_init_as5047p_spi+0x8c>)
	mode = ENCODER_MODE_AS5047P_SPI;
 801acbe:	2002      	movs	r0, #2
	index_found = true;
 801acc0:	2201      	movs	r2, #1
	mode = ENCODER_MODE_AS5047P_SPI;
 801acc2:	7008      	strb	r0, [r1, #0]
	index_found = true;
 801acc4:	701a      	strb	r2, [r3, #0]
}
 801acc6:	b005      	add	sp, #20
 801acc8:	bd30      	pop	{r4, r5, pc}
 801acca:	bf00      	nop
 801accc:	40020400 	.word	0x40020400
 801acd0:	40000800 	.word	0x40000800
 801acd4:	40020800 	.word	0x40020800
 801acd8:	2000c030 	.word	0x2000c030
 801acdc:	2000c028 	.word	0x2000c028

0801ace0 <encoder_is_configured>:

bool encoder_is_configured(void) {
	return mode != ENCODER_MODE_NONE;
 801ace0:	4b02      	ldr	r3, [pc, #8]	; (801acec <encoder_is_configured+0xc>)
 801ace2:	7818      	ldrb	r0, [r3, #0]
}
 801ace4:	3000      	adds	r0, #0
 801ace6:	bf18      	it	ne
 801ace8:	2001      	movne	r0, #1
 801acea:	4770      	bx	lr
 801acec:	2000c030 	.word	0x2000c030

0801acf0 <encoder_read_deg>:

float encoder_read_deg(void) {
	static float angle = 0.0;

	switch (mode) {
 801acf0:	4b12      	ldr	r3, [pc, #72]	; (801ad3c <encoder_read_deg+0x4c>)
 801acf2:	781b      	ldrb	r3, [r3, #0]
 801acf4:	2b01      	cmp	r3, #1
 801acf6:	d00c      	beq.n	801ad12 <encoder_read_deg+0x22>
 801acf8:	2b02      	cmp	r3, #2
 801acfa:	d106      	bne.n	801ad0a <encoder_read_deg+0x1a>
	case ENCODER_MODE_ABI:
		angle = ((float)HW_ENC_TIM->CNT * 360.0) / (float)enc_counts;
		break;

	case ENCODER_MODE_AS5047P_SPI:
		angle = last_enc_angle;
 801acfc:	4a10      	ldr	r2, [pc, #64]	; (801ad40 <encoder_read_deg+0x50>)
 801acfe:	4b11      	ldr	r3, [pc, #68]	; (801ad44 <encoder_read_deg+0x54>)
 801ad00:	ed92 0a00 	vldr	s0, [r2]
 801ad04:	ed83 0a00 	vstr	s0, [r3]
	default:
		break;
	}

	return angle;
}
 801ad08:	4770      	bx	lr
 801ad0a:	4b0e      	ldr	r3, [pc, #56]	; (801ad44 <encoder_read_deg+0x54>)
 801ad0c:	ed93 0a00 	vldr	s0, [r3]
 801ad10:	4770      	bx	lr
		angle = ((float)HW_ENC_TIM->CNT * 360.0) / (float)enc_counts;
 801ad12:	4a0d      	ldr	r2, [pc, #52]	; (801ad48 <encoder_read_deg+0x58>)
 801ad14:	4b0d      	ldr	r3, [pc, #52]	; (801ad4c <encoder_read_deg+0x5c>)
 801ad16:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 801ad1a:	ed93 7a00 	vldr	s14, [r3]
 801ad1e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801ad50 <encoder_read_deg+0x60>
 801ad22:	4b08      	ldr	r3, [pc, #32]	; (801ad44 <encoder_read_deg+0x54>)
 801ad24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801ad2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad30:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801ad34:	ed83 0a00 	vstr	s0, [r3]
		break;
 801ad38:	4770      	bx	lr
 801ad3a:	bf00      	nop
 801ad3c:	2000c030 	.word	0x2000c030
 801ad40:	2000c02c 	.word	0x2000c02c
 801ad44:	2000c020 	.word	0x2000c020
 801ad48:	40000800 	.word	0x40000800
 801ad4c:	2000103c 	.word	0x2000103c
 801ad50:	43b40000 	.word	0x43b40000
	...

0801ad60 <encoder_reset>:

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 801ad60:	bf00      	nop
 801ad62:	bf00      	nop
 801ad64:	bf00      	nop
 801ad66:	bf00      	nop
	// most likely are noise.
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	if (palReadPad(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3)) {
 801ad68:	4b17      	ldr	r3, [pc, #92]	; (801adc8 <encoder_reset+0x68>)
 801ad6a:	691b      	ldr	r3, [r3, #16]
 801ad6c:	051b      	lsls	r3, r3, #20
 801ad6e:	d51a      	bpl.n	801ada6 <encoder_reset+0x46>
		const unsigned int cnt = HW_ENC_TIM->CNT;
		static int bad_pulses = 0;
		const unsigned int lim = enc_counts / 20;

		if (index_found) {
 801ad70:	4a16      	ldr	r2, [pc, #88]	; (801adcc <encoder_reset+0x6c>)
		const unsigned int cnt = HW_ENC_TIM->CNT;
 801ad72:	4917      	ldr	r1, [pc, #92]	; (801add0 <encoder_reset+0x70>)
		if (index_found) {
 801ad74:	7813      	ldrb	r3, [r2, #0]
		const unsigned int cnt = HW_ENC_TIM->CNT;
 801ad76:	6a48      	ldr	r0, [r1, #36]	; 0x24
		if (index_found) {
 801ad78:	b1b3      	cbz	r3, 801ada8 <encoder_reset+0x48>
		const unsigned int lim = enc_counts / 20;
 801ad7a:	4916      	ldr	r1, [pc, #88]	; (801add4 <encoder_reset+0x74>)
 801ad7c:	4b16      	ldr	r3, [pc, #88]	; (801add8 <encoder_reset+0x78>)
 801ad7e:	6809      	ldr	r1, [r1, #0]
void encoder_reset(void) {
 801ad80:	b500      	push	{lr}
		const unsigned int lim = enc_counts / 20;
 801ad82:	fba3 e301 	umull	lr, r3, r3, r1
 801ad86:	091b      	lsrs	r3, r3, #4
			// Some plausibility filtering.
			if (cnt > (enc_counts - lim) || cnt < lim) {
 801ad88:	1ac9      	subs	r1, r1, r3
 801ad8a:	4288      	cmp	r0, r1
 801ad8c:	d812      	bhi.n	801adb4 <encoder_reset+0x54>
 801ad8e:	4298      	cmp	r0, r3
 801ad90:	d310      	bcc.n	801adb4 <encoder_reset+0x54>
				HW_ENC_TIM->CNT = 0;
				bad_pulses = 0;
			} else {
				bad_pulses++;
 801ad92:	4912      	ldr	r1, [pc, #72]	; (801addc <encoder_reset+0x7c>)
 801ad94:	680b      	ldr	r3, [r1, #0]
 801ad96:	3301      	adds	r3, #1

				if (bad_pulses > 5) {
 801ad98:	2b05      	cmp	r3, #5
				bad_pulses++;
 801ad9a:	600b      	str	r3, [r1, #0]
				if (bad_pulses > 5) {
 801ad9c:	dd11      	ble.n	801adc2 <encoder_reset+0x62>
					index_found = 0;
 801ad9e:	2300      	movs	r3, #0
 801ada0:	7013      	strb	r3, [r2, #0]
 801ada2:	f85d fb04 	ldr.w	pc, [sp], #4
 801ada6:	4770      	bx	lr
				}
			}
		} else {
			HW_ENC_TIM->CNT = 0;
			index_found = true;
			bad_pulses = 0;
 801ada8:	480c      	ldr	r0, [pc, #48]	; (801addc <encoder_reset+0x7c>)
			HW_ENC_TIM->CNT = 0;
 801adaa:	624b      	str	r3, [r1, #36]	; 0x24
			index_found = true;
 801adac:	2101      	movs	r1, #1
			bad_pulses = 0;
 801adae:	6003      	str	r3, [r0, #0]
			index_found = true;
 801adb0:	7011      	strb	r1, [r2, #0]
		}
	}
}
 801adb2:	4770      	bx	lr
				HW_ENC_TIM->CNT = 0;
 801adb4:	4906      	ldr	r1, [pc, #24]	; (801add0 <encoder_reset+0x70>)
				bad_pulses = 0;
 801adb6:	4a09      	ldr	r2, [pc, #36]	; (801addc <encoder_reset+0x7c>)
				HW_ENC_TIM->CNT = 0;
 801adb8:	2300      	movs	r3, #0
 801adba:	624b      	str	r3, [r1, #36]	; 0x24
				bad_pulses = 0;
 801adbc:	6013      	str	r3, [r2, #0]
 801adbe:	f85d fb04 	ldr.w	pc, [sp], #4
 801adc2:	f85d fb04 	ldr.w	pc, [sp], #4
 801adc6:	bf00      	nop
 801adc8:	40020800 	.word	0x40020800
 801adcc:	2000c028 	.word	0x2000c028
 801add0:	40000800 	.word	0x40000800
 801add4:	2000103c 	.word	0x2000103c
 801add8:	cccccccd 	.word	0xcccccccd
 801addc:	2000c024 	.word	0x2000c024

0801ade0 <encoder_tim_isr>:
		}
	}
}

static void spi_begin(void) {
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801ade0:	4b22      	ldr	r3, [pc, #136]	; (801ae6c <encoder_tim_isr+0x8c>)
void encoder_tim_isr(void) {
 801ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801ade6:	f44f 6200 	mov.w	r2, #2048	; 0x800
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801adea:	2740      	movs	r7, #64	; 0x40
 801adec:	4d20      	ldr	r5, [pc, #128]	; (801ae70 <encoder_tim_isr+0x90>)
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801adee:	835a      	strh	r2, [r3, #26]
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801adf0:	46b8      	mov	r8, r7
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801adf2:	2610      	movs	r6, #16
 801adf4:	2400      	movs	r4, #0
 801adf6:	bf00      	nop
 801adf8:	bf00      	nop
 801adfa:	bf00      	nop
 801adfc:	bf00      	nop
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801adfe:	f8a5 8018 	strh.w	r8, [r5, #24]
 801ae02:	bf00      	nop
 801ae04:	bf00      	nop
 801ae06:	bf00      	nop
 801ae08:	bf00      	nop
			r1 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 801ae0a:	6928      	ldr	r0, [r5, #16]
 801ae0c:	bf00      	nop
			r2 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 801ae0e:	6929      	ldr	r1, [r5, #16]
 801ae10:	bf00      	nop
			r3 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 801ae12:	692a      	ldr	r2, [r5, #16]
			recieve <<= 1;
 801ae14:	0064      	lsls	r4, r4, #1
			if (utils_middle_of_3_int(r1, r2, r3)) {
 801ae16:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 801ae1a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801ae1e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			recieve <<= 1;
 801ae22:	b2a4      	uxth	r4, r4
			if (utils_middle_of_3_int(r1, r2, r3)) {
 801ae24:	f7fa ff7c 	bl	8015d20 <utils_middle_of_3_int>
 801ae28:	b108      	cbz	r0, 801ae2e <encoder_tim_isr+0x4e>
				recieve |= 1;
 801ae2a:	f044 0401 	orr.w	r4, r4, #1
			palClearPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801ae2e:	836f      	strh	r7, [r5, #26]
 801ae30:	bf00      	nop
 801ae32:	bf00      	nop
 801ae34:	bf00      	nop
 801ae36:	bf00      	nop
		for (int bit = 0;bit < 16;bit++) {
 801ae38:	3e01      	subs	r6, #1
 801ae3a:	d1dc      	bne.n	801adf6 <encoder_tim_isr+0x16>
	last_enc_angle = ((float)pos * 360.0) / 16384.0;
 801ae3c:	f3c4 030d 	ubfx	r3, r4, #0, #14
 801ae40:	ee07 3a90 	vmov	s15, r3
 801ae44:	eddf 6a0b 	vldr	s13, [pc, #44]	; 801ae74 <encoder_tim_isr+0x94>
 801ae48:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801ae78 <encoder_tim_isr+0x98>
}

static void spi_end(void) {
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801ae4c:	4a07      	ldr	r2, [pc, #28]	; (801ae6c <encoder_tim_isr+0x8c>)
	last_enc_angle = ((float)pos * 360.0) / 16384.0;
 801ae4e:	4b0b      	ldr	r3, [pc, #44]	; (801ae7c <encoder_tim_isr+0x9c>)
 801ae50:	eef8 7a67 	vcvt.f32.u32	s15, s15
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801ae54:	f44f 6100 	mov.w	r1, #2048	; 0x800
	last_enc_angle = ((float)pos * 360.0) / 16384.0;
 801ae58:	ee67 7aa6 	vmul.f32	s15, s15, s13
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801ae5c:	8311      	strh	r1, [r2, #24]
	last_enc_angle = ((float)pos * 360.0) / 16384.0;
 801ae5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ae62:	edc3 7a00 	vstr	s15, [r3]
 801ae66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae6a:	bf00      	nop
 801ae6c:	40020800 	.word	0x40020800
 801ae70:	40020400 	.word	0x40020400
 801ae74:	43b40000 	.word	0x43b40000
 801ae78:	38800000 	.word	0x38800000
 801ae7c:	2000c02c 	.word	0x2000c02c

0801ae80 <encoder_set_counts>:
	if (counts != enc_counts) {
 801ae80:	4a07      	ldr	r2, [pc, #28]	; (801aea0 <encoder_set_counts+0x20>)
void encoder_set_counts(uint32_t counts) {
 801ae82:	b508      	push	{r3, lr}
	if (counts != enc_counts) {
 801ae84:	6813      	ldr	r3, [r2, #0]
 801ae86:	4283      	cmp	r3, r0
 801ae88:	d008      	beq.n	801ae9c <encoder_set_counts+0x1c>
 801ae8a:	4603      	mov	r3, r0
		TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 801ae8c:	1e41      	subs	r1, r0, #1
 801ae8e:	4805      	ldr	r0, [pc, #20]	; (801aea4 <encoder_set_counts+0x24>)
		enc_counts = counts;
 801ae90:	6013      	str	r3, [r2, #0]
		TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 801ae92:	f009 fe9d 	bl	8024bd0 <TIM_SetAutoreload>
		index_found = false;
 801ae96:	4b04      	ldr	r3, [pc, #16]	; (801aea8 <encoder_set_counts+0x28>)
 801ae98:	2200      	movs	r2, #0
 801ae9a:	701a      	strb	r2, [r3, #0]
 801ae9c:	bd08      	pop	{r3, pc}
 801ae9e:	bf00      	nop
 801aea0:	2000103c 	.word	0x2000103c
 801aea4:	40000800 	.word	0x40000800
 801aea8:	2000c028 	.word	0x2000c028
 801aeac:	00000000 	.word	0x00000000

0801aeb0 <encoder_index_found>:
	return index_found;
 801aeb0:	4b01      	ldr	r3, [pc, #4]	; (801aeb8 <encoder_index_found+0x8>)
}
 801aeb2:	7818      	ldrb	r0, [r3, #0]
 801aeb4:	4770      	bx	lr
 801aeb6:	bf00      	nop
 801aeb8:	2000c028 	.word	0x2000c028
 801aebc:	00000000 	.word	0x00000000

0801aec0 <flash_helper_erase_new_app>:
		FLASH_Sector_9,
		FLASH_Sector_10,
		FLASH_Sector_11
};

uint16_t flash_helper_erase_new_app(uint32_t new_app_size) {
 801aec0:	b510      	push	{r4, lr}
 801aec2:	4604      	mov	r4, r0
	FLASH_Unlock();
 801aec4:	f009 fc1c 	bl	8024700 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 801aec8:	20f2      	movs	r0, #242	; 0xf2
 801aeca:	f009 fc29 	bl	8024720 <FLASH_ClearFlag>
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

	new_app_size += flash_addr[NEW_APP_BASE];

	mc_interface_unlock();
 801aece:	f000 fad7 	bl	801b480 <mc_interface_unlock>
	mc_interface_release_motor();
 801aed2:	f001 fad5 	bl	801c480 <mc_interface_release_motor>
	utils_sys_lock_cnt();
 801aed6:	f7fb f923 	bl	8016120 <utils_sys_lock_cnt>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, DISABLE);
 801aeda:	2100      	movs	r1, #0
 801aedc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801aee0:	f009 fcee 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	new_app_size += flash_addr[NEW_APP_BASE];
 801aee4:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000

	for (int i = 0;i < NEW_APP_SECTORS;i++) {
		if (new_app_size > flash_addr[NEW_APP_BASE + i]) {
 801aee8:	4b14      	ldr	r3, [pc, #80]	; (801af3c <flash_helper_erase_new_app+0x7c>)
	new_app_size += flash_addr[NEW_APP_BASE];
 801aeea:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
		if (new_app_size > flash_addr[NEW_APP_BASE + i]) {
 801aeee:	429c      	cmp	r4, r3
 801aef0:	d91a      	bls.n	801af28 <flash_helper_erase_new_app+0x68>
			uint16_t res = FLASH_EraseSector(flash_sector[NEW_APP_BASE + i], VoltageRange_3);
 801aef2:	2102      	movs	r1, #2
 801aef4:	2040      	movs	r0, #64	; 0x40
 801aef6:	f009 fc53 	bl	80247a0 <FLASH_EraseSector>
 801aefa:	b280      	uxth	r0, r0
			if (res != FLASH_COMPLETE) {
 801aefc:	2809      	cmp	r0, #9
 801aefe:	d11c      	bne.n	801af3a <flash_helper_erase_new_app+0x7a>
		if (new_app_size > flash_addr[NEW_APP_BASE + i]) {
 801af00:	4b0f      	ldr	r3, [pc, #60]	; (801af40 <flash_helper_erase_new_app+0x80>)
 801af02:	429c      	cmp	r4, r3
 801af04:	d910      	bls.n	801af28 <flash_helper_erase_new_app+0x68>
			uint16_t res = FLASH_EraseSector(flash_sector[NEW_APP_BASE + i], VoltageRange_3);
 801af06:	2102      	movs	r1, #2
 801af08:	2048      	movs	r0, #72	; 0x48
 801af0a:	f009 fc49 	bl	80247a0 <FLASH_EraseSector>
 801af0e:	b280      	uxth	r0, r0
			if (res != FLASH_COMPLETE) {
 801af10:	2809      	cmp	r0, #9
 801af12:	d112      	bne.n	801af3a <flash_helper_erase_new_app+0x7a>
		if (new_app_size > flash_addr[NEW_APP_BASE + i]) {
 801af14:	4b0b      	ldr	r3, [pc, #44]	; (801af44 <flash_helper_erase_new_app+0x84>)
 801af16:	429c      	cmp	r4, r3
 801af18:	d906      	bls.n	801af28 <flash_helper_erase_new_app+0x68>
			uint16_t res = FLASH_EraseSector(flash_sector[NEW_APP_BASE + i], VoltageRange_3);
 801af1a:	2102      	movs	r1, #2
 801af1c:	2050      	movs	r0, #80	; 0x50
 801af1e:	f009 fc3f 	bl	80247a0 <FLASH_EraseSector>
 801af22:	b280      	uxth	r0, r0
			if (res != FLASH_COMPLETE) {
 801af24:	2809      	cmp	r0, #9
 801af26:	d108      	bne.n	801af3a <flash_helper_erase_new_app+0x7a>
		} else {
			break;
		}
	}

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 801af28:	2101      	movs	r1, #1
 801af2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801af2e:	f009 fcc7 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	utils_sys_unlock_cnt();
 801af32:	f7fb f905 	bl	8016140 <utils_sys_unlock_cnt>

	return FLASH_COMPLETE;
 801af36:	2009      	movs	r0, #9
 801af38:	bd10      	pop	{r4, pc}
}
 801af3a:	bd10      	pop	{r4, pc}
 801af3c:	08080000 	.word	0x08080000
 801af40:	080a0000 	.word	0x080a0000
 801af44:	080c0000 	.word	0x080c0000
	...

0801af50 <flash_helper_write_new_app_data>:

uint16_t flash_helper_write_new_app_data(uint32_t offset, uint8_t *data, uint32_t len) {
 801af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af52:	4605      	mov	r5, r0
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 801af54:	20f2      	movs	r0, #242	; 0xf2
uint16_t flash_helper_write_new_app_data(uint32_t offset, uint8_t *data, uint32_t len) {
 801af56:	460e      	mov	r6, r1
 801af58:	4617      	mov	r7, r2
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 801af5a:	f009 fbe1 	bl	8024720 <FLASH_ClearFlag>
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

	mc_interface_unlock();
 801af5e:	f000 fa8f 	bl	801b480 <mc_interface_unlock>
	mc_interface_release_motor();
 801af62:	f001 fa8d 	bl	801c480 <mc_interface_release_motor>
	utils_sys_lock_cnt();
 801af66:	f7fb f8db 	bl	8016120 <utils_sys_lock_cnt>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, DISABLE);
 801af6a:	2100      	movs	r1, #0
 801af6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801af70:	f009 fca6 	bl	80248c0 <RCC_APB1PeriphClockCmd>

	for (uint32_t i = 0;i < len;i++) {
 801af74:	b197      	cbz	r7, 801af9c <flash_helper_write_new_app_data+0x4c>
 801af76:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 801af7a:	4634      	mov	r4, r6
 801af7c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801af80:	443e      	add	r6, r7
 801af82:	1b2d      	subs	r5, r5, r4
 801af84:	e001      	b.n	801af8a <flash_helper_write_new_app_data+0x3a>
 801af86:	42b4      	cmp	r4, r6
 801af88:	d008      	beq.n	801af9c <flash_helper_write_new_app_data+0x4c>
 801af8a:	1928      	adds	r0, r5, r4
		uint16_t res = FLASH_ProgramByte(flash_addr[NEW_APP_BASE] + offset + i, data[i]);
 801af8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af90:	f009 fc66 	bl	8024860 <FLASH_ProgramByte>
 801af94:	b280      	uxth	r0, r0
		if (res != FLASH_COMPLETE) {
 801af96:	2809      	cmp	r0, #9
 801af98:	d0f5      	beq.n	801af86 <flash_helper_write_new_app_data+0x36>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
	utils_sys_unlock_cnt();

	return FLASH_COMPLETE;
}
 801af9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 801af9c:	2101      	movs	r1, #1
 801af9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801afa2:	f009 fc8d 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	utils_sys_unlock_cnt();
 801afa6:	f7fb f8cb 	bl	8016140 <utils_sys_unlock_cnt>
	return FLASH_COMPLETE;
 801afaa:	2009      	movs	r0, #9
 801afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afae:	bf00      	nop

0801afb0 <flash_helper_jump_to_bootloader>:

/**
 * Stop the system and jump to the bootloader.
 */
void flash_helper_jump_to_bootloader(void) {
 801afb0:	b580      	push	{r7, lr}
 801afb2:	af00      	add	r7, sp, #0
	typedef void (*pFunction)(void);

	mc_interface_unlock();
 801afb4:	f000 fa64 	bl	801b480 <mc_interface_unlock>
	mc_interface_release_motor();
 801afb8:	f001 fa62 	bl	801c480 <mc_interface_release_motor>
	usbDisconnectBus(&USBD1);
 801afbc:	481a      	ldr	r0, [pc, #104]	; (801b028 <flash_helper_jump_to_bootloader+0x78>)
 801afbe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801afc0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801afc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801afc6:	6393      	str	r3, [r2, #56]	; 0x38
	usbStop(&USBD1);
 801afc8:	f7f3 fda2 	bl	800eb10 <usbStop>

	uartStop(&HW_UART_DEV);
 801afcc:	4817      	ldr	r0, [pc, #92]	; (801b02c <flash_helper_jump_to_bootloader+0x7c>)
 801afce:	f7f3 fd4f 	bl	800ea70 <uartStop>
	palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT);
 801afd2:	2200      	movs	r2, #0
 801afd4:	2140      	movs	r1, #64	; 0x40
 801afd6:	4816      	ldr	r0, [pc, #88]	; (801b030 <flash_helper_jump_to_bootloader+0x80>)
 801afd8:	f7f4 ff12 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_INPUT);
 801afdc:	2200      	movs	r2, #0
 801afde:	2180      	movs	r1, #128	; 0x80
 801afe0:	4813      	ldr	r0, [pc, #76]	; (801b030 <flash_helper_jump_to_bootloader+0x80>)
 801afe2:	f7f4 ff0d 	bl	800fe00 <_pal_lld_setgroupmode>

	// Disable watchdog
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, DISABLE);
 801afe6:	2100      	movs	r1, #0
 801afe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801afec:	f009 fc68 	bl	80248c0 <RCC_APB1PeriphClockCmd>
  __ASM volatile ("cpsid i" : : : "memory");
 801aff0:	b672      	cpsid	i
	// Variable that will be loaded with the start address of the application
	volatile uint32_t* jump_address;
	const volatile uint32_t* bootloader_address = (volatile uint32_t*)0x080E0000;

	// Get jump address from application vector table
	jump_address = (volatile uint32_t*) bootloader_address[1];
 801aff2:	4a10      	ldr	r2, [pc, #64]	; (801b034 <flash_helper_jump_to_bootloader+0x84>)

	// Load this address into function pointer
	jump_to_bootloader = (pFunction) jump_address;

	// Clear pending interrupts
	SCB->ICSR = SCB_ICSR_PENDSVCLR_Msk;
 801aff4:	4b10      	ldr	r3, [pc, #64]	; (801b038 <flash_helper_jump_to_bootloader+0x88>)
	jump_address = (volatile uint32_t*) bootloader_address[1];
 801aff6:	6810      	ldr	r0, [r2, #0]
	SCB->ICSR = SCB_ICSR_PENDSVCLR_Msk;
 801aff8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801affc:	605a      	str	r2, [r3, #4]

	// Disable all interrupts
	for(int i = 0;i < 8;i++) {
 801affe:	2200      	movs	r2, #0
 801b000:	0093      	lsls	r3, r2, #2
 801b002:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 801b006:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 801b00a:	3201      	adds	r2, #1
		NVIC->ICER[i] = NVIC->IABR[i];
 801b00c:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 801b010:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	for(int i = 0;i < 8;i++) {
 801b014:	2a08      	cmp	r2, #8
 801b016:	d1f3      	bne.n	801b000 <flash_helper_jump_to_bootloader+0x50>
	}

	// Set stack pointer
	__set_MSP((uint32_t) (bootloader_address[0]));
 801b018:	4b08      	ldr	r3, [pc, #32]	; (801b03c <flash_helper_jump_to_bootloader+0x8c>)
 801b01a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 801b01c:	f383 8808 	msr	MSP, r3

	// Jump to the bootloader
	jump_to_bootloader();
}
 801b020:	46bd      	mov	sp, r7
 801b022:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	jump_to_bootloader();
 801b026:	4700      	bx	r0
 801b028:	20001db0 	.word	0x20001db0
 801b02c:	200020b4 	.word	0x200020b4
 801b030:	40020800 	.word	0x40020800
 801b034:	080e0004 	.word	0x080e0004
 801b038:	e000ed00 	.word	0xe000ed00
 801b03c:	080e0000 	.word	0x080e0000

0801b040 <flash_helper_get_sector_address>:

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
 801b040:	2200      	movs	r2, #0
 801b042:	4908      	ldr	r1, [pc, #32]	; (801b064 <flash_helper_get_sector_address+0x24>)
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 801b044:	4613      	mov	r3, r2
 801b046:	e001      	b.n	801b04c <flash_helper_get_sector_address+0xc>
 801b048:	f831 2f02 	ldrh.w	r2, [r1, #2]!
		if (flash_sector[i] == fsector) {
 801b04c:	4282      	cmp	r2, r0
 801b04e:	d004      	beq.n	801b05a <flash_helper_get_sector_address+0x1a>
	for (int i = 0;i < FLASH_SECTORS;i++) {
 801b050:	3301      	adds	r3, #1
 801b052:	2b0c      	cmp	r3, #12
 801b054:	d1f8      	bne.n	801b048 <flash_helper_get_sector_address+0x8>
	uint8_t *res = 0;
 801b056:	2000      	movs	r0, #0
			break;
		}
	}

	return res;
}
 801b058:	4770      	bx	lr
			res = (uint8_t *)flash_addr[i];
 801b05a:	4a03      	ldr	r2, [pc, #12]	; (801b068 <flash_helper_get_sector_address+0x28>)
 801b05c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
			break;
 801b060:	4770      	bx	lr
 801b062:	bf00      	nop
 801b064:	08030390 	.word	0x08030390
 801b068:	08030360 	.word	0x08030360
 801b06c:	00000000 	.word	0x00000000

0801b070 <sample_send_thread>:

		chThdSleepMilliseconds(1);
	}
}

static THD_FUNCTION(sample_send_thread, arg) {
 801b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b074:	4b7c      	ldr	r3, [pc, #496]	; (801b268 <sample_send_thread+0x1f8>)
	(void)arg;

	chRegSetThreadName("SampleSender");

	sample_send_tp = chThdGetSelfX();
 801b076:	4a7d      	ldr	r2, [pc, #500]	; (801b26c <sample_send_thread+0x1fc>)
 801b078:	699b      	ldr	r3, [r3, #24]
 801b07a:	497d      	ldr	r1, [pc, #500]	; (801b270 <sample_send_thread+0x200>)
 801b07c:	4e7d      	ldr	r6, [pc, #500]	; (801b274 <sample_send_thread+0x204>)
 801b07e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b2ac <sample_send_thread+0x23c>
 801b082:	f8df a22c 	ldr.w	sl, [pc, #556]	; 801b2b0 <sample_send_thread+0x240>
static THD_FUNCTION(sample_send_thread, arg) {
 801b086:	ed2d 8b06 	vpush	{d8-d10}
			while (ind_samp < 0) {
				ind_samp += ADC_SAMPLE_MAX_LEN;
			}

			buffer[index++] = COMM_SAMPLE_PRINT;
			buffer_append_float32_auto(buffer, (float)m_curr0_samples[ind_samp] * FAC_CURRENT, &index);
 801b08a:	eddf 9a7b 	vldr	s19, [pc, #492]	; 801b278 <sample_send_thread+0x208>
			buffer_append_float32_auto(buffer, (float)m_curr1_samples[ind_samp] * FAC_CURRENT, &index);
			buffer_append_float32_auto(buffer, ((float)m_ph1_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
 801b08e:	ed9f 9a7b 	vldr	s18, [pc, #492]	; 801b27c <sample_send_thread+0x20c>
 801b092:	eddf 8a7b 	vldr	s17, [pc, #492]	; 801b280 <sample_send_thread+0x210>
 801b096:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 801b284 <sample_send_thread+0x214>
			buffer_append_float32_auto(buffer, ((float)m_ph2_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
			buffer_append_float32_auto(buffer, ((float)m_ph3_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
			buffer_append_float32_auto(buffer, ((float)m_vzero_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
			buffer_append_float32_auto(buffer, (float)m_curr_fir_samples[ind_samp] / (8.0 / FAC_CURRENT), &index);
 801b09a:	ed9f aa7b 	vldr	s20, [pc, #492]	; 801b288 <sample_send_thread+0x218>
 801b09e:	6199      	str	r1, [r3, #24]
static THD_FUNCTION(sample_send_thread, arg) {
 801b0a0:	b08d      	sub	sp, #52	; 0x34
	sample_send_tp = chThdGetSelfX();
 801b0a2:	6013      	str	r3, [r2, #0]
		chEvtWaitAny((eventmask_t) 1);
 801b0a4:	2001      	movs	r0, #1
 801b0a6:	f7f2 fefb 	bl	800dea0 <chEvtWaitAny>
		switch (m_sample_mode_last) {
 801b0aa:	4b78      	ldr	r3, [pc, #480]	; (801b28c <sample_send_thread+0x21c>)
 801b0ac:	781b      	ldrb	r3, [r3, #0]
 801b0ae:	3b01      	subs	r3, #1
 801b0b0:	2b05      	cmp	r3, #5
 801b0b2:	d8f7      	bhi.n	801b0a4 <sample_send_thread+0x34>
 801b0b4:	e8df f003 	tbb	[pc, r3]
 801b0b8:	0303cccc 	.word	0x0303cccc
 801b0bc:	0303      	.short	0x0303
			offset = m_sample_trigger - m_sample_len;
 801b0be:	4b74      	ldr	r3, [pc, #464]	; (801b290 <sample_send_thread+0x220>)
 801b0c0:	f8d3 9000 	ldr.w	r9, [r3]
 801b0c4:	4b73      	ldr	r3, [pc, #460]	; (801b294 <sample_send_thread+0x224>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
			len = ADC_SAMPLE_MAX_LEN;
 801b0c8:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
			offset = m_sample_trigger - m_sample_len;
 801b0cc:	eba9 0903 	sub.w	r9, r9, r3
			while (ind_samp >= ADC_SAMPLE_MAX_LEN) {
 801b0d0:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
			len = ADC_SAMPLE_MAX_LEN;
 801b0d4:	f04f 0700 	mov.w	r7, #0
			int ind_samp = i + offset;
 801b0d8:	464c      	mov	r4, r9
			while (ind_samp >= ADC_SAMPLE_MAX_LEN) {
 801b0da:	f2c0 80b1 	blt.w	801b240 <sample_send_thread+0x1d0>
				ind_samp -= ADC_SAMPLE_MAX_LEN;
 801b0de:	f5a4 64fa 	sub.w	r4, r4, #2000	; 0x7d0
			while (ind_samp >= ADC_SAMPLE_MAX_LEN) {
 801b0e2:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 801b0e6:	dafa      	bge.n	801b0de <sample_send_thread+0x6e>
			buffer_append_float32_auto(buffer, (float)m_curr0_samples[ind_samp] * FAC_CURRENT, &index);
 801b0e8:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 801b0ec:	b21b      	sxth	r3, r3
 801b0ee:	ee07 3a90 	vmov	s15, r3
 801b0f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
			buffer[index++] = COMM_SAMPLE_PRINT;
 801b0f6:	2201      	movs	r2, #1
			buffer_append_float32_auto(buffer, (float)m_curr1_samples[ind_samp] * FAC_CURRENT, &index);
 801b0f8:	fa04 f502 	lsl.w	r5, r4, r2
			buffer[index++] = COMM_SAMPLE_PRINT;
 801b0fc:	2313      	movs	r3, #19
			buffer_append_float32_auto(buffer, (float)m_curr0_samples[ind_samp] * FAC_CURRENT, &index);
 801b0fe:	ee20 0a29 	vmul.f32	s0, s0, s19
 801b102:	a901      	add	r1, sp, #4
 801b104:	a802      	add	r0, sp, #8
			buffer[index++] = COMM_SAMPLE_PRINT;
 801b106:	9201      	str	r2, [sp, #4]
 801b108:	f88d 3008 	strb.w	r3, [sp, #8]
			buffer_append_float32_auto(buffer, (float)m_curr0_samples[ind_samp] * FAC_CURRENT, &index);
 801b10c:	f7f6 fd78 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, (float)m_curr1_samples[ind_samp] * FAC_CURRENT, &index);
 801b110:	1973      	adds	r3, r6, r5
 801b112:	a901      	add	r1, sp, #4
 801b114:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 801b118:	b21b      	sxth	r3, r3
 801b11a:	ee07 3a90 	vmov	s15, r3
 801b11e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b122:	a802      	add	r0, sp, #8
 801b124:	ee20 0a29 	vmul.f32	s0, s0, s19
 801b128:	f7f6 fd6a 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, ((float)m_ph1_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
 801b12c:	eb0b 0305 	add.w	r3, fp, r5
 801b130:	a901      	add	r1, sp, #4
 801b132:	f8b3 3e48 	ldrh.w	r3, [r3, #3656]	; 0xe48
 801b136:	b21b      	sxth	r3, r3
 801b138:	ee07 3a90 	vmov	s15, r3
 801b13c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b140:	a802      	add	r0, sp, #8
 801b142:	ee20 0a09 	vmul.f32	s0, s0, s18
		for (int i = 0;i < len;i++) {
 801b146:	3701      	adds	r7, #1
			buffer_append_float32_auto(buffer, ((float)m_ph1_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
 801b148:	ee20 0a28 	vmul.f32	s0, s0, s17
 801b14c:	f109 0901 	add.w	r9, r9, #1
 801b150:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b154:	f7f6 fd54 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, ((float)m_ph2_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
 801b158:	eb0a 0305 	add.w	r3, sl, r5
 801b15c:	a901      	add	r1, sp, #4
 801b15e:	f8b3 3cf0 	ldrh.w	r3, [r3, #3312]	; 0xcf0
 801b162:	b21b      	sxth	r3, r3
 801b164:	ee07 3a90 	vmov	s15, r3
 801b168:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b16c:	a802      	add	r0, sp, #8
 801b16e:	ee20 0a09 	vmul.f32	s0, s0, s18
 801b172:	ee20 0a28 	vmul.f32	s0, s0, s17
 801b176:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b17a:	f7f6 fd41 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, ((float)m_ph3_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
 801b17e:	4b46      	ldr	r3, [pc, #280]	; (801b298 <sample_send_thread+0x228>)
 801b180:	442b      	add	r3, r5
 801b182:	a901      	add	r1, sp, #4
 801b184:	f8b3 3b98 	ldrh.w	r3, [r3, #2968]	; 0xb98
 801b188:	b21b      	sxth	r3, r3
 801b18a:	ee07 3a90 	vmov	s15, r3
 801b18e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b192:	a802      	add	r0, sp, #8
 801b194:	ee20 0a09 	vmul.f32	s0, s0, s18
 801b198:	ee20 0a28 	vmul.f32	s0, s0, s17
 801b19c:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b1a0:	f7f6 fd2e 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, ((float)m_vzero_samples[ind_samp] / 4096.0 * V_REG) * ((VIN_R1 + VIN_R2) / VIN_R2), &index);
 801b1a4:	4b3d      	ldr	r3, [pc, #244]	; (801b29c <sample_send_thread+0x22c>)
 801b1a6:	442b      	add	r3, r5
 801b1a8:	a901      	add	r1, sp, #4
 801b1aa:	f8b3 3a40 	ldrh.w	r3, [r3, #2624]	; 0xa40
 801b1ae:	b21b      	sxth	r3, r3
 801b1b0:	ee07 3a90 	vmov	s15, r3
 801b1b4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b1b8:	a802      	add	r0, sp, #8
 801b1ba:	ee20 0a09 	vmul.f32	s0, s0, s18
 801b1be:	ee20 0a28 	vmul.f32	s0, s0, s17
 801b1c2:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b1c6:	f7f6 fd1b 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, (float)m_curr_fir_samples[ind_samp] / (8.0 / FAC_CURRENT), &index);
 801b1ca:	4b35      	ldr	r3, [pc, #212]	; (801b2a0 <sample_send_thread+0x230>)
 801b1cc:	442b      	add	r3, r5
 801b1ce:	a901      	add	r1, sp, #4
 801b1d0:	f8b3 38e8 	ldrh.w	r3, [r3, #2280]	; 0x8e8
 801b1d4:	b21b      	sxth	r3, r3
 801b1d6:	ee07 3a90 	vmov	s15, r3
 801b1da:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b1de:	a802      	add	r0, sp, #8
 801b1e0:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 801b1e4:	f7f6 fd0c 	bl	8011c00 <buffer_append_float32_auto>
			buffer_append_float32_auto(buffer, (float)m_f_sw_samples[ind_samp] * 10.0, &index);
 801b1e8:	4b2e      	ldr	r3, [pc, #184]	; (801b2a4 <sample_send_thread+0x234>)
 801b1ea:	441d      	add	r5, r3
 801b1ec:	a901      	add	r1, sp, #4
 801b1ee:	f8b5 3790 	ldrh.w	r3, [r5, #1936]	; 0x790
 801b1f2:	b21b      	sxth	r3, r3
 801b1f4:	a802      	add	r0, sp, #8
 801b1f6:	ee07 3a90 	vmov	s15, r3
 801b1fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1fe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801b202:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b206:	f7f6 fcfb 	bl	8011c00 <buffer_append_float32_auto>
			buffer[index++] = m_status_samples[ind_samp];
 801b20a:	4a27      	ldr	r2, [pc, #156]	; (801b2a8 <sample_send_thread+0x238>)
 801b20c:	9b01      	ldr	r3, [sp, #4]
 801b20e:	4414      	add	r4, r2
 801b210:	aa0c      	add	r2, sp, #48	; 0x30
 801b212:	441a      	add	r2, r3
 801b214:	f894 1638 	ldrb.w	r1, [r4, #1592]	; 0x638
 801b218:	f802 1c28 	strb.w	r1, [r2, #-40]
			buffer[index++] = m_phase_samples[ind_samp];
 801b21c:	3302      	adds	r3, #2
 801b21e:	f894 4e08 	ldrb.w	r4, [r4, #3592]	; 0xe08
 801b222:	f802 4c27 	strb.w	r4, [r2, #-39]

			commands_send_packet(buffer, index);
 801b226:	4619      	mov	r1, r3
 801b228:	a802      	add	r0, sp, #8
			buffer[index++] = m_phase_samples[ind_samp];
 801b22a:	9301      	str	r3, [sp, #4]
			commands_send_packet(buffer, index);
 801b22c:	f7fd fa48 	bl	80186c0 <commands_send_packet>
		for (int i = 0;i < len;i++) {
 801b230:	4547      	cmp	r7, r8
 801b232:	f6bf af37 	bge.w	801b0a4 <sample_send_thread+0x34>
			while (ind_samp >= ADC_SAMPLE_MAX_LEN) {
 801b236:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
			int ind_samp = i + offset;
 801b23a:	464c      	mov	r4, r9
			while (ind_samp >= ADC_SAMPLE_MAX_LEN) {
 801b23c:	f6bf af4f 	bge.w	801b0de <sample_send_thread+0x6e>
			while (ind_samp < 0) {
 801b240:	f1b9 0f00 	cmp.w	r9, #0
 801b244:	f6bf af50 	bge.w	801b0e8 <sample_send_thread+0x78>
 801b248:	f514 64fa 	adds.w	r4, r4, #2000	; 0x7d0
 801b24c:	d4fc      	bmi.n	801b248 <sample_send_thread+0x1d8>
 801b24e:	e74b      	b.n	801b0e8 <sample_send_thread+0x78>
			len = m_sample_len;
 801b250:	4b10      	ldr	r3, [pc, #64]	; (801b294 <sample_send_thread+0x224>)
 801b252:	f8d3 8000 	ldr.w	r8, [r3]
		for (int i = 0;i < len;i++) {
 801b256:	f1b8 0f00 	cmp.w	r8, #0
		int offset = 0;
 801b25a:	bfc8      	it	gt
 801b25c:	f04f 0900 	movgt.w	r9, #0
		for (int i = 0;i < len;i++) {
 801b260:	f73f af36 	bgt.w	801b0d0 <sample_send_thread+0x60>
 801b264:	e71e      	b.n	801b0a4 <sample_send_thread+0x34>
 801b266:	bf00      	nop
 801b268:	20001a40 	.word	0x20001a40
 801b26c:	2000c7d8 	.word	0x2000c7d8
 801b270:	080303e0 	.word	0x080303e0
 801b274:	10000000 	.word	0x10000000
 801b278:	3da50a50 	.word	0x3da50a50
 801b27c:	39800000 	.word	0x39800000
 801b280:	40533333 	.word	0x40533333
 801b284:	4195d174 	.word	0x4195d174
 801b288:	42c68ba4 	.word	0x42c68ba4
 801b28c:	2000c221 	.word	0x2000c221
 801b290:	2000c228 	.word	0x2000c228
 801b294:	2000c21c 	.word	0x2000c21c
 801b298:	100032e8 	.word	0x100032e8
 801b29c:	100043e0 	.word	0x100043e0
 801b2a0:	100054d8 	.word	0x100054d8
 801b2a4:	100065d0 	.word	0x100065d0
 801b2a8:	100076c8 	.word	0x100076c8
 801b2ac:	100010f8 	.word	0x100010f8
 801b2b0:	100021f0 	.word	0x100021f0
	...

0801b2c0 <mc_interface_init>:
void mc_interface_init(mc_configuration *configuration) {
 801b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	m_conf = *configuration;
 801b2c2:	4d3d      	ldr	r5, [pc, #244]	; (801b3b8 <mc_interface_init+0xf8>)
	m_cycles_running = 0;
 801b2c4:	4e3d      	ldr	r6, [pc, #244]	; (801b3bc <mc_interface_init+0xfc>)
	m_input_current_sum = 0.0;
 801b2c6:	4f3e      	ldr	r7, [pc, #248]	; (801b3c0 <mc_interface_init+0x100>)
void mc_interface_init(mc_configuration *configuration) {
 801b2c8:	b083      	sub	sp, #12
	m_conf = *configuration;
 801b2ca:	4601      	mov	r1, r0
 801b2cc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801b2d0:	4628      	mov	r0, r5
 801b2d2:	f7f1 fc1d 	bl	800cb10 <memcpy>
	m_lock_enabled = false;
 801b2d6:	4a3b      	ldr	r2, [pc, #236]	; (801b3c4 <mc_interface_init+0x104>)
	m_lock_override_once = false;
 801b2d8:	493b      	ldr	r1, [pc, #236]	; (801b3c8 <mc_interface_init+0x108>)
	m_motor_current_sum = 0.0;
 801b2da:	483c      	ldr	r0, [pc, #240]	; (801b3cc <mc_interface_init+0x10c>)
	m_sample_len = 1000;
 801b2dc:	f8df e154 	ldr.w	lr, [pc, #340]	; 801b434 <mc_interface_init+0x174>
	m_motor_current_sum = 0.0;
 801b2e0:	2300      	movs	r3, #0
	m_fault_now = FAULT_CODE_NONE;
 801b2e2:	2400      	movs	r4, #0
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801b2e4:	9400      	str	r4, [sp, #0]
	m_cycles_running = 0;
 801b2e6:	6034      	str	r4, [r6, #0]
	m_lock_enabled = false;
 801b2e8:	7014      	strb	r4, [r2, #0]
	m_motor_current_iterations = 0.0;
 801b2ea:	4e39      	ldr	r6, [pc, #228]	; (801b3d0 <mc_interface_init+0x110>)
	m_lock_override_once = false;
 801b2ec:	700c      	strb	r4, [r1, #0]
	m_input_current_iterations = 0.0;
 801b2ee:	4a39      	ldr	r2, [pc, #228]	; (801b3d4 <mc_interface_init+0x114>)
	m_motor_current_sum = 0.0;
 801b2f0:	6003      	str	r3, [r0, #0]
	m_motor_id_sum = 0.0;
 801b2f2:	4939      	ldr	r1, [pc, #228]	; (801b3d8 <mc_interface_init+0x118>)
	m_motor_iq_sum = 0.0;
 801b2f4:	4839      	ldr	r0, [pc, #228]	; (801b3dc <mc_interface_init+0x11c>)
	m_input_current_sum = 0.0;
 801b2f6:	603b      	str	r3, [r7, #0]
	m_motor_current_iterations = 0.0;
 801b2f8:	6033      	str	r3, [r6, #0]
	m_motor_id_iterations = 0.0;
 801b2fa:	4f39      	ldr	r7, [pc, #228]	; (801b3e0 <mc_interface_init+0x120>)
	m_input_current_iterations = 0.0;
 801b2fc:	6013      	str	r3, [r2, #0]
	m_motor_iq_iterations = 0.0;
 801b2fe:	4e39      	ldr	r6, [pc, #228]	; (801b3e4 <mc_interface_init+0x124>)
	m_motor_id_sum = 0.0;
 801b300:	600b      	str	r3, [r1, #0]
	m_amp_seconds = 0.0;
 801b302:	4a39      	ldr	r2, [pc, #228]	; (801b3e8 <mc_interface_init+0x128>)
	m_motor_iq_sum = 0.0;
 801b304:	6003      	str	r3, [r0, #0]
	m_amp_seconds_charged = 0.0;
 801b306:	4939      	ldr	r1, [pc, #228]	; (801b3ec <mc_interface_init+0x12c>)
	m_watt_seconds = 0.0;
 801b308:	4839      	ldr	r0, [pc, #228]	; (801b3f0 <mc_interface_init+0x130>)
	m_motor_id_iterations = 0.0;
 801b30a:	603b      	str	r3, [r7, #0]
	m_motor_iq_iterations = 0.0;
 801b30c:	6033      	str	r3, [r6, #0]
	m_watt_seconds_charged = 0.0;
 801b30e:	4f39      	ldr	r7, [pc, #228]	; (801b3f4 <mc_interface_init+0x134>)
	m_amp_seconds = 0.0;
 801b310:	6013      	str	r3, [r2, #0]
	m_position_set = 0.0;
 801b312:	4e39      	ldr	r6, [pc, #228]	; (801b3f8 <mc_interface_init+0x138>)
	m_amp_seconds_charged = 0.0;
 801b314:	600b      	str	r3, [r1, #0]
	m_last_adc_duration_sample = 0.0;
 801b316:	4a39      	ldr	r2, [pc, #228]	; (801b3fc <mc_interface_init+0x13c>)
	m_watt_seconds = 0.0;
 801b318:	6003      	str	r3, [r0, #0]
	m_temp_fet = 0.0;
 801b31a:	4939      	ldr	r1, [pc, #228]	; (801b400 <mc_interface_init+0x140>)
	m_temp_motor = 0.0;
 801b31c:	4839      	ldr	r0, [pc, #228]	; (801b404 <mc_interface_init+0x144>)
	m_watt_seconds_charged = 0.0;
 801b31e:	603b      	str	r3, [r7, #0]
	m_position_set = 0.0;
 801b320:	6033      	str	r3, [r6, #0]
	m_last_adc_duration_sample = 0.0;
 801b322:	6013      	str	r3, [r2, #0]
	m_temp_fet = 0.0;
 801b324:	600b      	str	r3, [r1, #0]
	m_temp_motor = 0.0;
 801b326:	6003      	str	r3, [r0, #0]
	m_fault_now = FAULT_CODE_NONE;
 801b328:	4b37      	ldr	r3, [pc, #220]	; (801b408 <mc_interface_init+0x148>)
	m_sample_int = 1;
 801b32a:	4e38      	ldr	r6, [pc, #224]	; (801b40c <mc_interface_init+0x14c>)
	m_fault_now = FAULT_CODE_NONE;
 801b32c:	701c      	strb	r4, [r3, #0]
	m_sample_len = 1000;
 801b32e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b332:	f8ce 3000 	str.w	r3, [lr]
	m_sample_int = 1;
 801b336:	2301      	movs	r3, #1
 801b338:	6033      	str	r3, [r6, #0]
	m_sample_now = 0;
 801b33a:	4a35      	ldr	r2, [pc, #212]	; (801b410 <mc_interface_init+0x150>)
	m_sample_trigger = 0;
 801b33c:	4935      	ldr	r1, [pc, #212]	; (801b414 <mc_interface_init+0x154>)
	m_sample_mode = DEBUG_SAMPLING_OFF;
 801b33e:	4836      	ldr	r0, [pc, #216]	; (801b418 <mc_interface_init+0x158>)
	m_ignore_iterations = 0;
 801b340:	4f36      	ldr	r7, [pc, #216]	; (801b41c <mc_interface_init+0x15c>)
	m_sample_mode_last = DEBUG_SAMPLING_OFF;
 801b342:	4e37      	ldr	r6, [pc, #220]	; (801b420 <mc_interface_init+0x160>)
	m_sample_now = 0;
 801b344:	6014      	str	r4, [r2, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801b346:	4b37      	ldr	r3, [pc, #220]	; (801b424 <mc_interface_init+0x164>)
	m_sample_trigger = 0;
 801b348:	600c      	str	r4, [r1, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801b34a:	2240      	movs	r2, #64	; 0x40
	m_sample_mode = DEBUG_SAMPLING_OFF;
 801b34c:	7004      	strb	r4, [r0, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801b34e:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 801b352:	4835      	ldr	r0, [pc, #212]	; (801b428 <mc_interface_init+0x168>)
	m_ignore_iterations = 0;
 801b354:	603c      	str	r4, [r7, #0]
	m_sample_mode_last = DEBUG_SAMPLING_OFF;
 801b356:	7034      	strb	r4, [r6, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801b358:	f7f2 fb0a 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 801b35c:	4b33      	ldr	r3, [pc, #204]	; (801b42c <mc_interface_init+0x16c>)
 801b35e:	9400      	str	r4, [sp, #0]
 801b360:	4833      	ldr	r0, [pc, #204]	; (801b430 <mc_interface_init+0x170>)
 801b362:	223f      	movs	r2, #63	; 0x3f
 801b364:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 801b368:	f7f2 fb02 	bl	800d970 <chThdCreateStatic>
	switch (m_conf.m_sensor_port_mode) {
 801b36c:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
 801b370:	b2db      	uxtb	r3, r3
 801b372:	2b01      	cmp	r3, #1
 801b374:	d01b      	beq.n	801b3ae <mc_interface_init+0xee>
 801b376:	2b02      	cmp	r3, #2
 801b378:	d00b      	beq.n	801b392 <mc_interface_init+0xd2>
	switch (m_conf.motor_type) {
 801b37a:	78ab      	ldrb	r3, [r5, #2]
 801b37c:	b2db      	uxtb	r3, r3
 801b37e:	2b01      	cmp	r3, #1
 801b380:	d90d      	bls.n	801b39e <mc_interface_init+0xde>
 801b382:	2b02      	cmp	r3, #2
 801b384:	d111      	bne.n	801b3aa <mc_interface_init+0xea>
		mcpwm_foc_init(&m_conf);
 801b386:	480c      	ldr	r0, [pc, #48]	; (801b3b8 <mc_interface_init+0xf8>)
}
 801b388:	b003      	add	sp, #12
 801b38a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		mcpwm_foc_init(&m_conf);
 801b38e:	f002 b8bf 	b.w	801d510 <mcpwm_foc_init>
		encoder_init_as5047p_spi();
 801b392:	f7ff fc5d 	bl	801ac50 <encoder_init_as5047p_spi>
	switch (m_conf.motor_type) {
 801b396:	78ab      	ldrb	r3, [r5, #2]
 801b398:	b2db      	uxtb	r3, r3
 801b39a:	2b01      	cmp	r3, #1
 801b39c:	d8f1      	bhi.n	801b382 <mc_interface_init+0xc2>
		mcpwm_init(&m_conf);
 801b39e:	4806      	ldr	r0, [pc, #24]	; (801b3b8 <mc_interface_init+0xf8>)
}
 801b3a0:	b003      	add	sp, #12
 801b3a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		mcpwm_init(&m_conf);
 801b3a6:	f7f7 bfc3 	b.w	8013330 <mcpwm_init>
}
 801b3aa:	b003      	add	sp, #12
 801b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		encoder_init_abi(m_conf.m_encoder_counts);
 801b3ae:	f8d5 0158 	ldr.w	r0, [r5, #344]	; 0x158
 801b3b2:	f7ff fbed 	bl	801ab90 <encoder_init_abi>
		break;
 801b3b6:	e7e0      	b.n	801b37a <mc_interface_init+0xba>
 801b3b8:	2000c06c 	.word	0x2000c06c
 801b3bc:	2000c1e0 	.word	0x2000c1e0
 801b3c0:	2000c1f0 	.word	0x2000c1f0
 801b3c4:	2000c1f8 	.word	0x2000c1f8
 801b3c8:	2000c1f9 	.word	0x2000c1f9
 801b3cc:	2000c200 	.word	0x2000c200
 801b3d0:	2000c1fc 	.word	0x2000c1fc
 801b3d4:	2000c1ec 	.word	0x2000c1ec
 801b3d8:	2000c208 	.word	0x2000c208
 801b3dc:	2000c210 	.word	0x2000c210
 801b3e0:	2000c204 	.word	0x2000c204
 801b3e4:	2000c20c 	.word	0x2000c20c
 801b3e8:	2000c064 	.word	0x2000c064
 801b3ec:	2000c068 	.word	0x2000c068
 801b3f0:	2000c234 	.word	0x2000c234
 801b3f4:	2000c238 	.word	0x2000c238
 801b3f8:	2000c214 	.word	0x2000c214
 801b3fc:	2000c1f4 	.word	0x2000c1f4
 801b400:	2000c22c 	.word	0x2000c22c
 801b404:	2000c230 	.word	0x2000c230
 801b408:	2000c1e4 	.word	0x2000c1e4
 801b40c:	2000c218 	.word	0x2000c218
 801b410:	2000c224 	.word	0x2000c224
 801b414:	2000c228 	.word	0x2000c228
 801b418:	2000c220 	.word	0x2000c220
 801b41c:	2000c1e8 	.word	0x2000c1e8
 801b420:	2000c221 	.word	0x2000c221
 801b424:	0801bfb1 	.word	0x0801bfb1
 801b428:	2000c7e0 	.word	0x2000c7e0
 801b42c:	0801b071 	.word	0x0801b071
 801b430:	2000c240 	.word	0x2000c240
 801b434:	2000c21c 	.word	0x2000c21c
	...

0801b440 <mc_interface_get_configuration>:
}
 801b440:	4800      	ldr	r0, [pc, #0]	; (801b444 <mc_interface_get_configuration+0x4>)
 801b442:	4770      	bx	lr
 801b444:	2000c06c 	.word	0x2000c06c
	...

0801b450 <mc_interface_dccal_done>:
	switch (m_conf.motor_type) {
 801b450:	4b06      	ldr	r3, [pc, #24]	; (801b46c <mc_interface_dccal_done+0x1c>)
 801b452:	789b      	ldrb	r3, [r3, #2]
 801b454:	b2db      	uxtb	r3, r3
 801b456:	2b01      	cmp	r3, #1
 801b458:	d905      	bls.n	801b466 <mc_interface_dccal_done+0x16>
 801b45a:	2b02      	cmp	r3, #2
 801b45c:	d101      	bne.n	801b462 <mc_interface_dccal_done+0x12>
		ret = mcpwm_foc_is_dccal_done();
 801b45e:	f002 bb9f 	b.w	801dba0 <mcpwm_foc_is_dccal_done>
}
 801b462:	2000      	movs	r0, #0
 801b464:	4770      	bx	lr
		ret = mcpwm_is_dccal_done();
 801b466:	f7f8 bf3b 	b.w	80142e0 <mcpwm_is_dccal_done>
 801b46a:	bf00      	nop
 801b46c:	2000c06c 	.word	0x2000c06c

0801b470 <mc_interface_lock>:
	m_lock_enabled = true;
 801b470:	4b01      	ldr	r3, [pc, #4]	; (801b478 <mc_interface_lock+0x8>)
 801b472:	2201      	movs	r2, #1
 801b474:	701a      	strb	r2, [r3, #0]
 801b476:	4770      	bx	lr
 801b478:	2000c1f8 	.word	0x2000c1f8
 801b47c:	00000000 	.word	0x00000000

0801b480 <mc_interface_unlock>:
	m_lock_enabled = false;
 801b480:	4b01      	ldr	r3, [pc, #4]	; (801b488 <mc_interface_unlock+0x8>)
 801b482:	2200      	movs	r2, #0
 801b484:	701a      	strb	r2, [r3, #0]
 801b486:	4770      	bx	lr
 801b488:	2000c1f8 	.word	0x2000c1f8
 801b48c:	00000000 	.word	0x00000000

0801b490 <mc_interface_lock_override_once>:
	m_lock_override_once = true;
 801b490:	4b01      	ldr	r3, [pc, #4]	; (801b498 <mc_interface_lock_override_once+0x8>)
 801b492:	2201      	movs	r2, #1
 801b494:	701a      	strb	r2, [r3, #0]
 801b496:	4770      	bx	lr
 801b498:	2000c1f9 	.word	0x2000c1f9
 801b49c:	00000000 	.word	0x00000000

0801b4a0 <mc_interface_get_fault>:
	return m_fault_now;
 801b4a0:	4b01      	ldr	r3, [pc, #4]	; (801b4a8 <mc_interface_get_fault+0x8>)
}
 801b4a2:	7818      	ldrb	r0, [r3, #0]
 801b4a4:	4770      	bx	lr
 801b4a6:	bf00      	nop
 801b4a8:	2000c1e4 	.word	0x2000c1e4
 801b4ac:	00000000 	.word	0x00000000

0801b4b0 <mc_interface_fault_to_string>:
const char* mc_interface_fault_to_string(mc_fault_code fault) {
 801b4b0:	2806      	cmp	r0, #6
 801b4b2:	bf9a      	itte	ls
 801b4b4:	4b02      	ldrls	r3, [pc, #8]	; (801b4c0 <mc_interface_fault_to_string+0x10>)
 801b4b6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801b4ba:	4802      	ldrhi	r0, [pc, #8]	; (801b4c4 <mc_interface_fault_to_string+0x14>)
}
 801b4bc:	4770      	bx	lr
 801b4be:	bf00      	nop
 801b4c0:	080303b0 	.word	0x080303b0
 801b4c4:	080303d0 	.word	0x080303d0
	...

0801b4d0 <mc_interface_get_state>:
	switch (m_conf.motor_type) {
 801b4d0:	4b06      	ldr	r3, [pc, #24]	; (801b4ec <mc_interface_get_state+0x1c>)
 801b4d2:	789b      	ldrb	r3, [r3, #2]
 801b4d4:	b2db      	uxtb	r3, r3
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	d905      	bls.n	801b4e6 <mc_interface_get_state+0x16>
 801b4da:	2b02      	cmp	r3, #2
 801b4dc:	d101      	bne.n	801b4e2 <mc_interface_get_state+0x12>
		ret = mcpwm_foc_get_state();
 801b4de:	f002 bb57 	b.w	801db90 <mcpwm_foc_get_state>
}
 801b4e2:	2000      	movs	r0, #0
 801b4e4:	4770      	bx	lr
		ret = mcpwm_get_state();
 801b4e6:	f7f8 bb4b 	b.w	8013b80 <mcpwm_get_state>
 801b4ea:	bf00      	nop
 801b4ec:	2000c06c 	.word	0x2000c06c

0801b4f0 <mc_interface_get_duty_cycle_now>:
float mc_interface_get_duty_cycle_now(void) {
 801b4f0:	b510      	push	{r4, lr}
	switch (m_conf.motor_type) {
 801b4f2:	4c0e      	ldr	r4, [pc, #56]	; (801b52c <mc_interface_get_duty_cycle_now+0x3c>)
 801b4f4:	78a3      	ldrb	r3, [r4, #2]
 801b4f6:	b2db      	uxtb	r3, r3
 801b4f8:	2b01      	cmp	r3, #1
 801b4fa:	d913      	bls.n	801b524 <mc_interface_get_duty_cycle_now+0x34>
 801b4fc:	2b02      	cmp	r3, #2
 801b4fe:	d00e      	beq.n	801b51e <mc_interface_get_duty_cycle_now+0x2e>
	float ret = 0.0;
 801b500:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801b530 <mc_interface_get_duty_cycle_now+0x40>
	return DIR_MULT * ret;
 801b504:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
 801b508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b512:	bf08      	it	eq
 801b514:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801b518:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b51c:	bd10      	pop	{r4, pc}
		ret = mcpwm_foc_get_duty_cycle_now();
 801b51e:	f002 fc5f 	bl	801dde0 <mcpwm_foc_get_duty_cycle_now>
		break;
 801b522:	e7ef      	b.n	801b504 <mc_interface_get_duty_cycle_now+0x14>
		ret = mcpwm_get_duty_cycle_now();
 801b524:	f7f8 fb04 	bl	8013b30 <mcpwm_get_duty_cycle_now>
		break;
 801b528:	e7ec      	b.n	801b504 <mc_interface_get_duty_cycle_now+0x14>
 801b52a:	bf00      	nop
 801b52c:	2000c06c 	.word	0x2000c06c
	...

0801b540 <mc_interface_get_sampling_frequency_now>:
	switch (m_conf.motor_type) {
 801b540:	4b06      	ldr	r3, [pc, #24]	; (801b55c <mc_interface_get_sampling_frequency_now+0x1c>)
 801b542:	789b      	ldrb	r3, [r3, #2]
 801b544:	b2db      	uxtb	r3, r3
 801b546:	2b01      	cmp	r3, #1
 801b548:	d906      	bls.n	801b558 <mc_interface_get_sampling_frequency_now+0x18>
 801b54a:	2b02      	cmp	r3, #2
 801b54c:	d101      	bne.n	801b552 <mc_interface_get_sampling_frequency_now+0x12>
		ret = mcpwm_foc_get_sampling_frequency_now();
 801b54e:	f002 bc57 	b.w	801de00 <mcpwm_foc_get_sampling_frequency_now>
}
 801b552:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801b560 <mc_interface_get_sampling_frequency_now+0x20>
 801b556:	4770      	bx	lr
		ret = mcpwm_get_switching_frequency_now();
 801b558:	f7f8 baf2 	b.w	8013b40 <mcpwm_get_switching_frequency_now>
 801b55c:	2000c06c 	.word	0x2000c06c
	...

0801b570 <mc_interface_get_rpm>:
float mc_interface_get_rpm(void) {
 801b570:	b510      	push	{r4, lr}
	switch (m_conf.motor_type) {
 801b572:	4c0e      	ldr	r4, [pc, #56]	; (801b5ac <mc_interface_get_rpm+0x3c>)
 801b574:	78a3      	ldrb	r3, [r4, #2]
 801b576:	b2db      	uxtb	r3, r3
 801b578:	2b01      	cmp	r3, #1
 801b57a:	d913      	bls.n	801b5a4 <mc_interface_get_rpm+0x34>
 801b57c:	2b02      	cmp	r3, #2
 801b57e:	d00e      	beq.n	801b59e <mc_interface_get_rpm+0x2e>
	float ret = 0.0;
 801b580:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801b5b0 <mc_interface_get_rpm+0x40>
	return DIR_MULT * ret;
 801b584:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
 801b588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b592:	bf08      	it	eq
 801b594:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801b598:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b59c:	bd10      	pop	{r4, pc}
		ret = mcpwm_foc_get_rpm();
 801b59e:	f002 fc3f 	bl	801de20 <mcpwm_foc_get_rpm>
		break;
 801b5a2:	e7ef      	b.n	801b584 <mc_interface_get_rpm+0x14>
		ret = mcpwm_get_rpm();
 801b5a4:	f7f8 fad4 	bl	8013b50 <mcpwm_get_rpm>
		break;
 801b5a8:	e7ec      	b.n	801b584 <mc_interface_get_rpm+0x14>
 801b5aa:	bf00      	nop
 801b5ac:	2000c06c 	.word	0x2000c06c
	...

0801b5c0 <mc_interface_get_amp_hours>:
	float val = m_amp_seconds / 3600;
 801b5c0:	4b05      	ldr	r3, [pc, #20]	; (801b5d8 <mc_interface_get_amp_hours+0x18>)
 801b5c2:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b5dc <mc_interface_get_amp_hours+0x1c>
 801b5c6:	ed93 7a00 	vldr	s14, [r3]
 801b5ca:	ee87 0a27 	vdiv.f32	s0, s14, s15
	if (reset) {
 801b5ce:	b108      	cbz	r0, 801b5d4 <mc_interface_get_amp_hours+0x14>
		m_amp_seconds = 0.0;
 801b5d0:	2200      	movs	r2, #0
 801b5d2:	601a      	str	r2, [r3, #0]
}
 801b5d4:	4770      	bx	lr
 801b5d6:	bf00      	nop
 801b5d8:	2000c064 	.word	0x2000c064
 801b5dc:	45610000 	.word	0x45610000

0801b5e0 <mc_interface_get_amp_hours_charged>:
	float val = m_amp_seconds_charged / 3600;
 801b5e0:	4b05      	ldr	r3, [pc, #20]	; (801b5f8 <mc_interface_get_amp_hours_charged+0x18>)
 801b5e2:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b5fc <mc_interface_get_amp_hours_charged+0x1c>
 801b5e6:	ed93 7a00 	vldr	s14, [r3]
 801b5ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
	if (reset) {
 801b5ee:	b108      	cbz	r0, 801b5f4 <mc_interface_get_amp_hours_charged+0x14>
		m_amp_seconds_charged = 0.0;
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	601a      	str	r2, [r3, #0]
}
 801b5f4:	4770      	bx	lr
 801b5f6:	bf00      	nop
 801b5f8:	2000c068 	.word	0x2000c068
 801b5fc:	45610000 	.word	0x45610000

0801b600 <mc_interface_get_watt_hours>:
	float val = m_watt_seconds / 3600;
 801b600:	4b05      	ldr	r3, [pc, #20]	; (801b618 <mc_interface_get_watt_hours+0x18>)
 801b602:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b61c <mc_interface_get_watt_hours+0x1c>
 801b606:	ed93 7a00 	vldr	s14, [r3]
 801b60a:	ee87 0a27 	vdiv.f32	s0, s14, s15
	if (reset) {
 801b60e:	b108      	cbz	r0, 801b614 <mc_interface_get_watt_hours+0x14>
		m_watt_seconds = 0.0;
 801b610:	2200      	movs	r2, #0
 801b612:	601a      	str	r2, [r3, #0]
}
 801b614:	4770      	bx	lr
 801b616:	bf00      	nop
 801b618:	2000c234 	.word	0x2000c234
 801b61c:	45610000 	.word	0x45610000

0801b620 <mc_interface_get_watt_hours_charged>:
	float val = m_watt_seconds_charged / 3600;
 801b620:	4b05      	ldr	r3, [pc, #20]	; (801b638 <mc_interface_get_watt_hours_charged+0x18>)
 801b622:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b63c <mc_interface_get_watt_hours_charged+0x1c>
 801b626:	ed93 7a00 	vldr	s14, [r3]
 801b62a:	ee87 0a27 	vdiv.f32	s0, s14, s15
	if (reset) {
 801b62e:	b108      	cbz	r0, 801b634 <mc_interface_get_watt_hours_charged+0x14>
		m_watt_seconds_charged = 0.0;
 801b630:	2200      	movs	r2, #0
 801b632:	601a      	str	r2, [r3, #0]
}
 801b634:	4770      	bx	lr
 801b636:	bf00      	nop
 801b638:	2000c238 	.word	0x2000c238
 801b63c:	45610000 	.word	0x45610000

0801b640 <mc_interface_get_tot_current>:
	switch (m_conf.motor_type) {
 801b640:	4b06      	ldr	r3, [pc, #24]	; (801b65c <mc_interface_get_tot_current+0x1c>)
 801b642:	789b      	ldrb	r3, [r3, #2]
 801b644:	b2db      	uxtb	r3, r3
 801b646:	2b01      	cmp	r3, #1
 801b648:	d906      	bls.n	801b658 <mc_interface_get_tot_current+0x18>
 801b64a:	2b02      	cmp	r3, #2
 801b64c:	d101      	bne.n	801b652 <mc_interface_get_tot_current+0x12>
		ret = mcpwm_foc_get_tot_current();
 801b64e:	f002 bbf7 	b.w	801de40 <mcpwm_foc_get_tot_current>
}
 801b652:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801b660 <mc_interface_get_tot_current+0x20>
 801b656:	4770      	bx	lr
		ret = mcpwm_get_tot_current();
 801b658:	f7f8 baaa 	b.w	8013bb0 <mcpwm_get_tot_current>
 801b65c:	2000c06c 	.word	0x2000c06c
	...

0801b670 <mc_interface_get_tot_current_filtered>:
	switch (m_conf.motor_type) {
 801b670:	4b06      	ldr	r3, [pc, #24]	; (801b68c <mc_interface_get_tot_current_filtered+0x1c>)
 801b672:	789b      	ldrb	r3, [r3, #2]
 801b674:	b2db      	uxtb	r3, r3
 801b676:	2b01      	cmp	r3, #1
 801b678:	d906      	bls.n	801b688 <mc_interface_get_tot_current_filtered+0x18>
 801b67a:	2b02      	cmp	r3, #2
 801b67c:	d101      	bne.n	801b682 <mc_interface_get_tot_current_filtered+0x12>
		ret = mcpwm_foc_get_tot_current_filtered();
 801b67e:	f002 bbf7 	b.w	801de70 <mcpwm_foc_get_tot_current_filtered>
}
 801b682:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801b690 <mc_interface_get_tot_current_filtered+0x20>
 801b686:	4770      	bx	lr
		ret = mcpwm_get_tot_current_filtered();
 801b688:	f7f8 ba9a 	b.w	8013bc0 <mcpwm_get_tot_current_filtered>
 801b68c:	2000c06c 	.word	0x2000c06c
	...

0801b6a0 <mc_interface_get_tot_current_directional>:
float mc_interface_get_tot_current_directional(void) {
 801b6a0:	b510      	push	{r4, lr}
	switch (m_conf.motor_type) {
 801b6a2:	4c0e      	ldr	r4, [pc, #56]	; (801b6dc <mc_interface_get_tot_current_directional+0x3c>)
 801b6a4:	78a3      	ldrb	r3, [r4, #2]
 801b6a6:	b2db      	uxtb	r3, r3
 801b6a8:	2b01      	cmp	r3, #1
 801b6aa:	d913      	bls.n	801b6d4 <mc_interface_get_tot_current_directional+0x34>
 801b6ac:	2b02      	cmp	r3, #2
 801b6ae:	d00e      	beq.n	801b6ce <mc_interface_get_tot_current_directional+0x2e>
	float ret = 0.0;
 801b6b0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801b6e0 <mc_interface_get_tot_current_directional+0x40>
	return DIR_MULT * ret;
 801b6b4:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
 801b6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b6c2:	bf08      	it	eq
 801b6c4:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801b6c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b6cc:	bd10      	pop	{r4, pc}
		ret = mcpwm_foc_get_tot_current_directional();
 801b6ce:	f002 fbf7 	bl	801dec0 <mcpwm_foc_get_tot_current_directional>
		break;
 801b6d2:	e7ef      	b.n	801b6b4 <mc_interface_get_tot_current_directional+0x14>
		ret = mcpwm_get_tot_current_directional();
 801b6d4:	f7f8 fa7c 	bl	8013bd0 <mcpwm_get_tot_current_directional>
		break;
 801b6d8:	e7ec      	b.n	801b6b4 <mc_interface_get_tot_current_directional+0x14>
 801b6da:	bf00      	nop
 801b6dc:	2000c06c 	.word	0x2000c06c
	...

0801b6f0 <mc_interface_get_tot_current_directional_filtered>:
float mc_interface_get_tot_current_directional_filtered(void) {
 801b6f0:	b510      	push	{r4, lr}
	switch (m_conf.motor_type) {
 801b6f2:	4c0e      	ldr	r4, [pc, #56]	; (801b72c <mc_interface_get_tot_current_directional_filtered+0x3c>)
 801b6f4:	78a3      	ldrb	r3, [r4, #2]
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	2b01      	cmp	r3, #1
 801b6fa:	d913      	bls.n	801b724 <mc_interface_get_tot_current_directional_filtered+0x34>
 801b6fc:	2b02      	cmp	r3, #2
 801b6fe:	d00e      	beq.n	801b71e <mc_interface_get_tot_current_directional_filtered+0x2e>
	float ret = 0.0;
 801b700:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801b730 <mc_interface_get_tot_current_directional_filtered+0x40>
	return DIR_MULT * ret;
 801b704:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
 801b708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b712:	bf08      	it	eq
 801b714:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801b718:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b71c:	bd10      	pop	{r4, pc}
		ret = mcpwm_foc_get_tot_current_directional_filtered();
 801b71e:	f002 fbd7 	bl	801ded0 <mcpwm_foc_get_tot_current_directional_filtered>
		break;
 801b722:	e7ef      	b.n	801b704 <mc_interface_get_tot_current_directional_filtered+0x14>
		ret = mcpwm_get_tot_current_directional_filtered();
 801b724:	f7f8 fa6c 	bl	8013c00 <mcpwm_get_tot_current_directional_filtered>
		break;
 801b728:	e7ec      	b.n	801b704 <mc_interface_get_tot_current_directional_filtered+0x14>
 801b72a:	bf00      	nop
 801b72c:	2000c06c 	.word	0x2000c06c
	...

0801b740 <mc_interface_get_tot_current_in_filtered>:
	switch (m_conf.motor_type) {
 801b740:	4b06      	ldr	r3, [pc, #24]	; (801b75c <mc_interface_get_tot_current_in_filtered+0x1c>)
 801b742:	789b      	ldrb	r3, [r3, #2]
 801b744:	b2db      	uxtb	r3, r3
 801b746:	2b01      	cmp	r3, #1
 801b748:	d906      	bls.n	801b758 <mc_interface_get_tot_current_in_filtered+0x18>
 801b74a:	2b02      	cmp	r3, #2
 801b74c:	d101      	bne.n	801b752 <mc_interface_get_tot_current_in_filtered+0x12>
		ret = mcpwm_foc_get_tot_current_in_filtered();
 801b74e:	f002 bbd7 	b.w	801df00 <mcpwm_foc_get_tot_current_in_filtered>
}
 801b752:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801b760 <mc_interface_get_tot_current_in_filtered+0x20>
 801b756:	4770      	bx	lr
		ret = mcpwm_get_tot_current_in_filtered();
 801b758:	f7f8 ba6a 	b.w	8013c30 <mcpwm_get_tot_current_in_filtered>
 801b75c:	2000c06c 	.word	0x2000c06c
	...

0801b770 <mc_interface_get_tachometer_value>:
int mc_interface_get_tachometer_value(bool reset) {
 801b770:	b510      	push	{r4, lr}
	switch (m_conf.motor_type) {
 801b772:	4c14      	ldr	r4, [pc, #80]	; (801b7c4 <mc_interface_get_tachometer_value+0x54>)
 801b774:	78a3      	ldrb	r3, [r4, #2]
 801b776:	b2db      	uxtb	r3, r3
 801b778:	2b01      	cmp	r3, #1
 801b77a:	d91b      	bls.n	801b7b4 <mc_interface_get_tachometer_value+0x44>
 801b77c:	2b02      	cmp	r3, #2
 801b77e:	d012      	beq.n	801b7a6 <mc_interface_get_tachometer_value+0x36>
 801b780:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801b7c8 <mc_interface_get_tachometer_value+0x58>
	return DIR_MULT * ret;
 801b784:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
 801b788:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b792:	bf18      	it	ne
 801b794:	eef0 7a66 	vmovne.f32	s15, s13
 801b798:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 801b79c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7a0:	ee17 0a90 	vmov	r0, s15
 801b7a4:	bd10      	pop	{r4, pc}
		ret = mcpwm_foc_get_tachometer_value(reset);
 801b7a6:	f002 fbb3 	bl	801df10 <mcpwm_foc_get_tachometer_value>
 801b7aa:	ee07 0a90 	vmov	s15, r0
 801b7ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		break;
 801b7b2:	e7e7      	b.n	801b784 <mc_interface_get_tachometer_value+0x14>
		ret = mcpwm_get_tachometer_value(reset);
 801b7b4:	f7f8 fa4c 	bl	8013c50 <mcpwm_get_tachometer_value>
 801b7b8:	ee07 0a90 	vmov	s15, r0
 801b7bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		break;
 801b7c0:	e7e0      	b.n	801b784 <mc_interface_get_tachometer_value+0x14>
 801b7c2:	bf00      	nop
 801b7c4:	2000c06c 	.word	0x2000c06c
	...

0801b7d0 <mc_interface_fault_stop.part.3>:
void mc_interface_fault_stop(mc_fault_code fault) {
 801b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7d2:	b093      	sub	sp, #76	; 0x4c
 801b7d4:	4605      	mov	r5, r0
	if (mc_interface_dccal_done() && m_fault_now == FAULT_CODE_NONE) {
 801b7d6:	f7ff fe3b 	bl	801b450 <mc_interface_dccal_done>
 801b7da:	4c40      	ldr	r4, [pc, #256]	; (801b8dc <mc_interface_fault_stop.part.3+0x10c>)
 801b7dc:	b108      	cbz	r0, 801b7e2 <mc_interface_fault_stop.part.3+0x12>
 801b7de:	7826      	ldrb	r6, [r4, #0]
 801b7e0:	b1a6      	cbz	r6, 801b80c <mc_interface_fault_stop.part.3+0x3c>
	m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801b7e2:	4b3f      	ldr	r3, [pc, #252]	; (801b8e0 <mc_interface_fault_stop.part.3+0x110>)
 801b7e4:	4a3f      	ldr	r2, [pc, #252]	; (801b8e4 <mc_interface_fault_stop.part.3+0x114>)
 801b7e6:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	switch (m_conf.motor_type) {
 801b7ea:	789b      	ldrb	r3, [r3, #2]
	m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801b7ec:	6011      	str	r1, [r2, #0]
	switch (m_conf.motor_type) {
 801b7ee:	b2db      	uxtb	r3, r3
 801b7f0:	2b01      	cmp	r3, #1
 801b7f2:	d906      	bls.n	801b802 <mc_interface_fault_stop.part.3+0x32>
 801b7f4:	2b02      	cmp	r3, #2
 801b7f6:	d101      	bne.n	801b7fc <mc_interface_fault_stop.part.3+0x2c>
		mcpwm_foc_stop_pwm();
 801b7f8:	f002 fa4a 	bl	801dc90 <mcpwm_foc_stop_pwm>
	m_fault_now = fault;
 801b7fc:	7025      	strb	r5, [r4, #0]
}
 801b7fe:	b013      	add	sp, #76	; 0x4c
 801b800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mcpwm_stop_pwm();
 801b802:	f7f8 fa45 	bl	8013c90 <mcpwm_stop_pwm>
	m_fault_now = fault;
 801b806:	7025      	strb	r5, [r4, #0]
}
 801b808:	b013      	add	sp, #76	; 0x4c
 801b80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		utils_sys_lock_cnt();
 801b80c:	f7fa fc88 	bl	8016120 <utils_sys_lock_cnt>
		volatile int val_samp = TIM8->CCR1;
 801b810:	4a35      	ldr	r2, [pc, #212]	; (801b8e8 <mc_interface_fault_stop.part.3+0x118>)
		volatile int current_samp = TIM1->CCR4;
 801b812:	4b36      	ldr	r3, [pc, #216]	; (801b8ec <mc_interface_fault_stop.part.3+0x11c>)
		volatile int val_samp = TIM8->CCR1;
 801b814:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b816:	9201      	str	r2, [sp, #4]
		volatile int current_samp = TIM1->CCR4;
 801b818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b81a:	9202      	str	r2, [sp, #8]
		volatile int tim_top = TIM1->ARR;
 801b81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b81e:	9303      	str	r3, [sp, #12]
		utils_sys_unlock_cnt();
 801b820:	f7fa fc8e 	bl	8016140 <utils_sys_unlock_cnt>
		fdata.fault = fault;
 801b824:	f88d 5010 	strb.w	r5, [sp, #16]
		fdata.current = mc_interface_get_tot_current();
 801b828:	f7ff ff0a 	bl	801b640 <mc_interface_get_tot_current>
		fdata.voltage = GET_INPUT_VOLTAGE();
 801b82c:	4f30      	ldr	r7, [pc, #192]	; (801b8f0 <mc_interface_fault_stop.part.3+0x120>)
		fdata.current = mc_interface_get_tot_current();
 801b82e:	ed8d 0a05 	vstr	s0, [sp, #20]
		fdata.current_filtered = mc_interface_get_tot_current_filtered();
 801b832:	f7ff ff1d 	bl	801b670 <mc_interface_get_tot_current_filtered>
		fdata.voltage = GET_INPUT_VOLTAGE();
 801b836:	8a3b      	ldrh	r3, [r7, #16]
 801b838:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801b8f4 <mc_interface_fault_stop.part.3+0x124>
 801b83c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801b8f8 <mc_interface_fault_stop.part.3+0x128>
		fdata.current_filtered = mc_interface_get_tot_current_filtered();
 801b840:	ed8d 0a06 	vstr	s0, [sp, #24]
		fdata.voltage = GET_INPUT_VOLTAGE();
 801b844:	b29b      	uxth	r3, r3
 801b846:	ee07 3a90 	vmov	s15, r3
 801b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b84e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b852:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b856:	edcd 7a07 	vstr	s15, [sp, #28]
		fdata.duty = mc_interface_get_duty_cycle_now();
 801b85a:	f7ff fe49 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
 801b85e:	ed8d 0a08 	vstr	s0, [sp, #32]
		fdata.rpm = mc_interface_get_rpm();
 801b862:	f7ff fe85 	bl	801b570 <mc_interface_get_rpm>
		fdata.tacho = mc_interface_get_tachometer_value(false);
 801b866:	4630      	mov	r0, r6
		fdata.rpm = mc_interface_get_rpm();
 801b868:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
		fdata.tacho = mc_interface_get_tachometer_value(false);
 801b86c:	f7ff ff80 	bl	801b770 <mc_interface_get_tachometer_value>
		fdata.cycles_running = m_cycles_running;
 801b870:	4b22      	ldr	r3, [pc, #136]	; (801b8fc <mc_interface_fault_stop.part.3+0x12c>)
		fdata.tacho = mc_interface_get_tachometer_value(false);
 801b872:	900a      	str	r0, [sp, #40]	; 0x28
		fdata.cycles_running = m_cycles_running;
 801b874:	6818      	ldr	r0, [r3, #0]
		fdata.tim_val_samp = val_samp;
 801b876:	9901      	ldr	r1, [sp, #4]
		fdata.tim_current_samp = current_samp;
 801b878:	9a02      	ldr	r2, [sp, #8]
		fdata.tim_top = tim_top;
 801b87a:	9b03      	ldr	r3, [sp, #12]
		fdata.tim_val_samp = val_samp;
 801b87c:	910c      	str	r1, [sp, #48]	; 0x30
		fdata.tim_current_samp = current_samp;
 801b87e:	920d      	str	r2, [sp, #52]	; 0x34
		fdata.tim_top = tim_top;
 801b880:	930e      	str	r3, [sp, #56]	; 0x38
		fdata.cycles_running = m_cycles_running;
 801b882:	900b      	str	r0, [sp, #44]	; 0x2c
		fdata.comm_step = mcpwm_get_comm_step();
 801b884:	f7f8 f94c 	bl	8013b20 <mcpwm_get_comm_step>
		fdata.temperature = NTC_TEMP(ADC_IND_TEMP_MOS);
 801b888:	897b      	ldrh	r3, [r7, #10]
 801b88a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801b900 <mc_interface_fault_stop.part.3+0x130>
 801b88e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801b904 <mc_interface_fault_stop.part.3+0x134>
		fdata.comm_step = mcpwm_get_comm_step();
 801b892:	900f      	str	r0, [sp, #60]	; 0x3c
		fdata.temperature = NTC_TEMP(ADC_IND_TEMP_MOS);
 801b894:	b29b      	uxth	r3, r3
 801b896:	ee07 3a90 	vmov	s15, r3
 801b89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b8a2:	ee37 7a40 	vsub.f32	s14, s14, s0
 801b8a6:	ee87 0a00 	vdiv.f32	s0, s14, s0
 801b8aa:	f009 ffc9 	bl	8025840 <logf>
		terminal_add_fault_data(&fdata);
 801b8ae:	a804      	add	r0, sp, #16
		fdata.temperature = NTC_TEMP(ADC_IND_TEMP_MOS);
 801b8b0:	eddf 6a15 	vldr	s13, [pc, #84]	; 801b908 <mc_interface_fault_stop.part.3+0x138>
 801b8b4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801b90c <mc_interface_fault_stop.part.3+0x13c>
 801b8b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801b910 <mc_interface_fault_stop.part.3+0x140>
 801b8bc:	ee80 0a26 	vdiv.f32	s0, s0, s13
 801b8c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b8c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8d0:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
		terminal_add_fault_data(&fdata);
 801b8d4:	f7fb fde4 	bl	80174a0 <terminal_add_fault_data>
 801b8d8:	e783      	b.n	801b7e2 <mc_interface_fault_stop.part.3+0x12>
 801b8da:	bf00      	nop
 801b8dc:	2000c1e4 	.word	0x2000c1e4
 801b8e0:	2000c06c 	.word	0x2000c06c
 801b8e4:	2000c1e8 	.word	0x2000c1e8
 801b8e8:	40010400 	.word	0x40010400
 801b8ec:	40010000 	.word	0x40010000
 801b8f0:	2000c034 	.word	0x2000c034
 801b8f4:	3a534067 	.word	0x3a534067
 801b8f8:	4195d174 	.word	0x4195d174
 801b8fc:	2000c1e0 	.word	0x2000c1e0
 801b900:	4c1c363c 	.word	0x4c1c363c
 801b904:	461c4000 	.word	0x461c4000
 801b908:	4556a000 	.word	0x4556a000
 801b90c:	3b5bcf0f 	.word	0x3b5bcf0f
 801b910:	43889333 	.word	0x43889333
	...

0801b920 <update_override_limits.constprop.4>:
static void update_override_limits(volatile mc_configuration *conf) {
 801b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const float v_in = GET_INPUT_VOLTAGE();
 801b922:	4fdd      	ldr	r7, [pc, #884]	; (801bc98 <update_override_limits.constprop.4+0x378>)
 801b924:	ed9f 7add 	vldr	s14, [pc, #884]	; 801bc9c <update_override_limits.constprop.4+0x37c>
 801b928:	8a3b      	ldrh	r3, [r7, #16]
	UTILS_LP_FAST(m_temp_fet, NTC_TEMP(ADC_IND_TEMP_MOS), 0.1);
 801b92a:	4edd      	ldr	r6, [pc, #884]	; (801bca0 <update_override_limits.constprop.4+0x380>)
	const float v_in = GET_INPUT_VOLTAGE();
 801b92c:	eddf 7add 	vldr	s15, [pc, #884]	; 801bca4 <update_override_limits.constprop.4+0x384>
	UTILS_LP_FAST(m_temp_motor, NTC_TEMP_MOTOR(conf->m_ntc_motor_beta), 0.1);
 801b930:	4ddd      	ldr	r5, [pc, #884]	; (801bca8 <update_override_limits.constprop.4+0x388>)
 801b932:	4cde      	ldr	r4, [pc, #888]	; (801bcac <update_override_limits.constprop.4+0x38c>)
	const float v_in = GET_INPUT_VOLTAGE();
 801b934:	b29b      	uxth	r3, r3
static void update_override_limits(volatile mc_configuration *conf) {
 801b936:	ed2d 8b0a 	vpush	{d8-d12}
	const float v_in = GET_INPUT_VOLTAGE();
 801b93a:	ee08 3a10 	vmov	s16, r3
 801b93e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	UTILS_LP_FAST(m_temp_fet, NTC_TEMP(ADC_IND_TEMP_MOS), 0.1);
 801b942:	eddf 8adb 	vldr	s17, [pc, #876]	; 801bcb0 <update_override_limits.constprop.4+0x390>
 801b946:	ed9f badb 	vldr	s22, [pc, #876]	; 801bcb4 <update_override_limits.constprop.4+0x394>
 801b94a:	eddf aadb 	vldr	s21, [pc, #876]	; 801bcb8 <update_override_limits.constprop.4+0x398>
 801b94e:	ed9f aadb 	vldr	s20, [pc, #876]	; 801bcbc <update_override_limits.constprop.4+0x39c>
	const float v_in = GET_INPUT_VOLTAGE();
 801b952:	ee28 8a07 	vmul.f32	s16, s16, s14
	UTILS_LP_FAST(m_temp_fet, NTC_TEMP(ADC_IND_TEMP_MOS), 0.1);
 801b956:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	const float v_in = GET_INPUT_VOLTAGE();
 801b95a:	ee28 8a27 	vmul.f32	s16, s16, s15
	const float rpm_now = mc_interface_get_rpm();
 801b95e:	f7ff fe07 	bl	801b570 <mc_interface_get_rpm>
	UTILS_LP_FAST(m_temp_fet, NTC_TEMP(ADC_IND_TEMP_MOS), 0.1);
 801b962:	edd6 9a00 	vldr	s19, [r6]
 801b966:	897b      	ldrh	r3, [r7, #10]
 801b968:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 801bcc0 <update_override_limits.constprop.4+0x3a0>
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	ee07 3a90 	vmov	s15, r3
 801b972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	const float rpm_now = mc_interface_get_rpm();
 801b976:	eeb0 9a40 	vmov.f32	s18, s0
	UTILS_LP_FAST(m_temp_fet, NTC_TEMP(ADC_IND_TEMP_MOS), 0.1);
 801b97a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801b97e:	ee30 0a68 	vsub.f32	s0, s0, s17
 801b982:	ee80 0a28 	vdiv.f32	s0, s0, s17
 801b986:	f009 ff5b 	bl	8025840 <logf>
 801b98a:	ed9f 7ace 	vldr	s14, [pc, #824]	; 801bcc4 <update_override_limits.constprop.4+0x3a4>
 801b98e:	edd6 7a00 	vldr	s15, [r6]
	UTILS_LP_FAST(m_temp_motor, NTC_TEMP_MOTOR(conf->m_ntc_motor_beta), 0.1);
 801b992:	eddf 6acd 	vldr	s13, [pc, #820]	; 801bcc8 <update_override_limits.constprop.4+0x3a8>
	UTILS_LP_FAST(m_temp_fet, NTC_TEMP(ADC_IND_TEMP_MOS), 0.1);
 801b996:	ee80 0a07 	vdiv.f32	s0, s0, s14
 801b99a:	ee30 0a0b 	vadd.f32	s0, s0, s22
 801b99e:	ee8b 7a80 	vdiv.f32	s14, s23, s0
 801b9a2:	ee37 7a6a 	vsub.f32	s14, s14, s21
 801b9a6:	ee79 9ac7 	vsub.f32	s19, s19, s14
 801b9aa:	eee9 7aca 	vfms.f32	s15, s19, s20
 801b9ae:	edc6 7a00 	vstr	s15, [r6]
	UTILS_LP_FAST(m_temp_motor, NTC_TEMP_MOTOR(conf->m_ntc_motor_beta), 0.1);
 801b9b2:	edd5 9a00 	vldr	s19, [r5]
 801b9b6:	8afb      	ldrh	r3, [r7, #22]
 801b9b8:	b29b      	uxth	r3, r3
 801b9ba:	ee07 3a90 	vmov	s15, r3
 801b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b9c6:	ee77 7a6b 	vsub.f32	s15, s14, s23
 801b9ca:	ee88 0aa7 	vdiv.f32	s0, s17, s15
 801b9ce:	ee80 0a28 	vdiv.f32	s0, s0, s17
 801b9d2:	f009 ff35 	bl	8025840 <logf>
 801b9d6:	ed94 7a5c 	vldr	s14, [r4, #368]	; 0x170
 801b9da:	edd5 7a00 	vldr	s15, [r5]
 801b9de:	ee80 0a07 	vdiv.f32	s0, s0, s14
 801b9e2:	ee30 0a0b 	vadd.f32	s0, s0, s22
 801b9e6:	ee8b 7a80 	vdiv.f32	s14, s23, s0
 801b9ea:	ee37 7a6a 	vsub.f32	s14, s14, s21
 801b9ee:	ee79 9ac7 	vsub.f32	s19, s19, s14
 801b9f2:	eee9 7aca 	vfms.f32	s15, s19, s20
 801b9f6:	edc5 7a00 	vstr	s15, [r5]
	if (m_temp_fet < conf->l_temp_fet_start) {
 801b9fa:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 801b9fe:	edd6 7a00 	vldr	s15, [r6]
 801ba02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0a:	f340 80f0 	ble.w	801bbee <update_override_limits.constprop.4+0x2ce>
		lo_min_mos = conf->l_current_min;
 801ba0e:	edd4 8a02 	vldr	s17, [r4, #8]
		lo_max_mos = conf->l_current_max;
 801ba12:	ed94 aa01 	vldr	s20, [r4, #4]
	if (m_temp_motor < conf->l_temp_motor_start) {
 801ba16:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 801ba1a:	edd5 7a00 	vldr	s15, [r5]
 801ba1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba26:	f340 8120 	ble.w	801bc6a <update_override_limits.constprop.4+0x34a>
		lo_min_mot = conf->l_current_min;
 801ba2a:	edd4 9a02 	vldr	s19, [r4, #8]
		lo_max_mot = conf->l_current_max;
 801ba2e:	edd4 aa01 	vldr	s21, [r4, #4]
	const float temp_fet_accel_start = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_fet_start, 25.0);
 801ba32:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801ba36:	eddf 0aa6 	vldr	s1, [pc, #664]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801ba3a:	edd4 1a10 	vldr	s3, [r4, #64]	; 0x40
 801ba3e:	eeb3 2a09 	vmov.f32	s4, #57	; 0x41c80000  25.0
 801ba42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801ba46:	f7fa f89b 	bl	8015b80 <utils_map>
	const float temp_fet_accel_end = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_fet_end, 25.0);
 801ba4a:	eddf 0aa1 	vldr	s1, [pc, #644]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
	const float temp_fet_accel_start = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_fet_start, 25.0);
 801ba4e:	eef0 ba40 	vmov.f32	s23, s0
	const float temp_fet_accel_end = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_fet_end, 25.0);
 801ba52:	eeb3 2a09 	vmov.f32	s4, #57	; 0x41c80000  25.0
 801ba56:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801ba5a:	edd4 1a11 	vldr	s3, [r4, #68]	; 0x44
 801ba5e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801ba62:	f7fa f88d 	bl	8015b80 <utils_map>
	const float temp_motor_accel_start = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_motor_start, 25.0);
 801ba66:	eddf 0a9a 	vldr	s1, [pc, #616]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801ba6a:	eeb3 2a09 	vmov.f32	s4, #57	; 0x41c80000  25.0
 801ba6e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	const float temp_fet_accel_end = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_fet_end, 25.0);
 801ba72:	eef0 ca40 	vmov.f32	s25, s0
	const float temp_motor_accel_start = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_motor_start, 25.0);
 801ba76:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801ba7a:	edd4 1a12 	vldr	s3, [r4, #72]	; 0x48
 801ba7e:	f7fa f87f 	bl	8015b80 <utils_map>
	const float temp_motor_accel_end = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_motor_end, 25.0);
 801ba82:	eddf 0a93 	vldr	s1, [pc, #588]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
	const float temp_motor_accel_start = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_motor_start, 25.0);
 801ba86:	eeb0 ba40 	vmov.f32	s22, s0
	const float temp_motor_accel_end = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_motor_end, 25.0);
 801ba8a:	eeb3 2a09 	vmov.f32	s4, #57	; 0x41c80000  25.0
 801ba8e:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801ba92:	edd4 1a13 	vldr	s3, [r4, #76]	; 0x4c
 801ba96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801ba9a:	f7fa f871 	bl	8015b80 <utils_map>
	if (m_temp_fet < temp_fet_accel_start) {
 801ba9e:	edd6 7a00 	vldr	s15, [r6]
 801baa2:	eef4 bae7 	vcmpe.f32	s23, s15
 801baa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	const float temp_motor_accel_end = utils_map(conf->l_temp_accel_dec, 0.0, 1.0, conf->l_temp_motor_end, 25.0);
 801baaa:	eeb0 ca40 	vmov.f32	s24, s0
	if (m_temp_fet < temp_fet_accel_start) {
 801baae:	f340 80d1 	ble.w	801bc54 <update_override_limits.constprop.4+0x334>
		lo_fet_temp_accel = conf->l_current_max;
 801bab2:	edd4 ba01 	vldr	s23, [r4, #4]
	if (m_temp_motor < temp_motor_accel_start) {
 801bab6:	edd5 7a00 	vldr	s15, [r5]
 801baba:	eeb4 bae7 	vcmpe.f32	s22, s15
 801babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bac2:	f340 80bc 	ble.w	801bc3e <update_override_limits.constprop.4+0x31e>
		lo_motor_temp_accel = conf->l_current_max;
 801bac6:	ed94 ba01 	vldr	s22, [r4, #4]
	const float rpm_pos_cut_start = conf->l_max_erpm * conf->l_erpm_start;
 801baca:	edd4 0a07 	vldr	s1, [r4, #28]
 801bace:	edd4 7a08 	vldr	s15, [r4, #32]
	const float rpm_pos_cut_end = conf->l_max_erpm;
 801bad2:	ed94 1a07 	vldr	s2, [r4, #28]
	const float rpm_pos_cut_start = conf->l_max_erpm * conf->l_erpm_start;
 801bad6:	ee60 0aa7 	vmul.f32	s1, s1, s15
	if (rpm_now < rpm_pos_cut_start) {
 801bada:	eeb4 9ae0 	vcmpe.f32	s18, s1
 801bade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bae2:	f140 80a3 	bpl.w	801bc2c <update_override_limits.constprop.4+0x30c>
		lo_max_rpm = conf->l_current_max;
 801bae6:	ed94 ca01 	vldr	s24, [r4, #4]
	const float rpm_neg_cut_start = conf->l_min_erpm * conf->l_erpm_start;
 801baea:	edd4 0a06 	vldr	s1, [r4, #24]
 801baee:	edd4 7a08 	vldr	s15, [r4, #32]
	const float rpm_neg_cut_end = conf->l_min_erpm;
 801baf2:	ed94 1a06 	vldr	s2, [r4, #24]
	const float rpm_neg_cut_start = conf->l_min_erpm * conf->l_erpm_start;
 801baf6:	ee60 0aa7 	vmul.f32	s1, s1, s15
	if (rpm_now > rpm_neg_cut_start) {
 801bafa:	eeb4 9ae0 	vcmpe.f32	s18, s1
 801bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb02:	f340 808a 	ble.w	801bc1a <update_override_limits.constprop.4+0x2fa>
		lo_min_rpm = conf->l_current_max;
 801bb06:	ed94 9a01 	vldr	s18, [r4, #4]
	float lo_max = utils_min_abs(lo_max_mos, lo_max_mot);
 801bb0a:	eef0 0a6a 	vmov.f32	s1, s21
 801bb0e:	eeb0 0a4a 	vmov.f32	s0, s20
 801bb12:	f7fa fa35 	bl	8015f80 <utils_min_abs>
	float lo_min = utils_min_abs(lo_min_mos, lo_min_mot);
 801bb16:	eef0 0a69 	vmov.f32	s1, s19
	float lo_max = utils_min_abs(lo_max_mos, lo_max_mot);
 801bb1a:	eeb0 aa40 	vmov.f32	s20, s0
	float lo_min = utils_min_abs(lo_min_mos, lo_min_mot);
 801bb1e:	eeb0 0a68 	vmov.f32	s0, s17
 801bb22:	f7fa fa2d 	bl	8015f80 <utils_min_abs>
	lo_max = utils_min_abs(lo_max, lo_max_rpm);
 801bb26:	eef0 0a4c 	vmov.f32	s1, s24
	float lo_min = utils_min_abs(lo_min_mos, lo_min_mot);
 801bb2a:	eef0 8a40 	vmov.f32	s17, s0
	lo_max = utils_min_abs(lo_max, lo_max_rpm);
 801bb2e:	eeb0 0a4a 	vmov.f32	s0, s20
 801bb32:	f7fa fa25 	bl	8015f80 <utils_min_abs>
	lo_max = utils_min_abs(lo_max, lo_min_rpm);
 801bb36:	eef0 0a49 	vmov.f32	s1, s18
 801bb3a:	f7fa fa21 	bl	8015f80 <utils_min_abs>
	lo_max = utils_min_abs(lo_max, lo_fet_temp_accel);
 801bb3e:	eef0 0a6b 	vmov.f32	s1, s23
 801bb42:	f7fa fa1d 	bl	8015f80 <utils_min_abs>
	lo_max = utils_min_abs(lo_max, lo_motor_temp_accel);
 801bb46:	eef0 0a4b 	vmov.f32	s1, s22
 801bb4a:	f7fa fa19 	bl	8015f80 <utils_min_abs>
	if (lo_max < conf->cc_min_current) {
 801bb4e:	edd4 7a50 	vldr	s15, [r4, #320]	; 0x140
 801bb52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		lo_max = conf->cc_min_current;
 801bb5a:	bf48      	it	mi
 801bb5c:	ed94 0a50 	vldrmi	s0, [r4, #320]	; 0x140
	if (lo_min > -conf->cc_min_current) {
 801bb60:	edd4 7a50 	vldr	s15, [r4, #320]	; 0x140
 801bb64:	eef1 7a67 	vneg.f32	s15, s15
 801bb68:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		lo_min = -conf->cc_min_current;
 801bb70:	bfc8      	it	gt
 801bb72:	edd4 8a50 	vldrgt	s17, [r4, #320]	; 0x140
	conf->lo_current_max = lo_max;
 801bb76:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
		lo_min = -conf->cc_min_current;
 801bb7a:	bfc8      	it	gt
 801bb7c:	eef1 8a68 	vneggt.f32	s17, s17
	conf->lo_current_min = lo_min;
 801bb80:	edc4 8a1a 	vstr	s17, [r4, #104]	; 0x68
	if (v_in > conf->l_battery_cut_start) {
 801bb84:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bb88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb90:	f300 813e 	bgt.w	801be10 <update_override_limits.constprop.4+0x4f0>
	} else if (v_in < conf->l_battery_cut_end) {
 801bb94:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 801bb98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bba0:	f140 8127 	bpl.w	801bdf2 <update_override_limits.constprop.4+0x4d2>
		lo_in_max_batt = 0.0;
 801bba4:	eddf 0a4a 	vldr	s1, [pc, #296]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
	const float lo_in_max_watt = conf->l_watt_max / v_in;
 801bba8:	ed94 0a17 	vldr	s0, [r4, #92]	; 0x5c
	const float lo_in_min_watt = conf->l_watt_min / v_in;
 801bbac:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 801bbb0:	eec7 8a08 	vdiv.f32	s17, s14, s16
	const float lo_in_max = utils_min_abs(lo_in_max_watt, lo_in_max_batt);
 801bbb4:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801bbb8:	f7fa f9e2 	bl	8015f80 <utils_min_abs>
	conf->lo_in_current_max = utils_min_abs(conf->l_in_current_max, lo_in_max);
 801bbbc:	edd4 7a03 	vldr	s15, [r4, #12]
 801bbc0:	eef0 0a40 	vmov.f32	s1, s0
 801bbc4:	eeb0 0a67 	vmov.f32	s0, s15
 801bbc8:	f7fa f9da 	bl	8015f80 <utils_min_abs>
 801bbcc:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
	conf->lo_in_current_min = utils_min_abs(conf->l_in_current_min, lo_in_min);
 801bbd0:	eef0 0a68 	vmov.f32	s1, s17
 801bbd4:	ed94 0a04 	vldr	s0, [r4, #16]
 801bbd8:	f7fa f9d2 	bl	8015f80 <utils_min_abs>
}
 801bbdc:	ecbd 8b0a 	vpop	{d8-d12}
	conf->lo_in_current_min = utils_min_abs(conf->l_in_current_min, lo_in_min);
 801bbe0:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
	conf->lo_current_motor_max_now = conf->lo_current_max;
 801bbe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bbe6:	6763      	str	r3, [r4, #116]	; 0x74
	conf->lo_current_motor_min_now = conf->lo_current_min;
 801bbe8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801bbea:	67a3      	str	r3, [r4, #120]	; 0x78
}
 801bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (m_temp_fet > conf->l_temp_fet_end) {
 801bbee:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 801bbf2:	edd6 7a00 	vldr	s15, [r6]
 801bbf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbfe:	d569      	bpl.n	801bcd4 <update_override_limits.constprop.4+0x3b4>
	if (m_fault_now == fault) {
 801bc00:	4b32      	ldr	r3, [pc, #200]	; (801bccc <update_override_limits.constprop.4+0x3ac>)
 801bc02:	781b      	ldrb	r3, [r3, #0]
 801bc04:	2b05      	cmp	r3, #5
 801bc06:	f000 8156 	beq.w	801beb6 <update_override_limits.constprop.4+0x596>
		lo_min_mos = 0.0;
 801bc0a:	eddf 8a31 	vldr	s17, [pc, #196]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bc0e:	2005      	movs	r0, #5
		lo_max_mos = 0.0;
 801bc10:	eeb0 aa68 	vmov.f32	s20, s17
 801bc14:	f7ff fddc 	bl	801b7d0 <mc_interface_fault_stop.part.3>
 801bc18:	e6fd      	b.n	801ba16 <update_override_limits.constprop.4+0xf6>
	} else if (rpm_now < rpm_neg_cut_end) {
 801bc1a:	eeb4 9ac1 	vcmpe.f32	s18, s2
 801bc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc22:	f140 80f8 	bpl.w	801be16 <update_override_limits.constprop.4+0x4f6>
		lo_min_rpm = 0.0;
 801bc26:	ed9f 9a2a 	vldr	s18, [pc, #168]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bc2a:	e76e      	b.n	801bb0a <update_override_limits.constprop.4+0x1ea>
	} else if (rpm_now > rpm_pos_cut_end) {
 801bc2c:	eeb4 9ac1 	vcmpe.f32	s18, s2
 801bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc34:	f340 80fa 	ble.w	801be2c <update_override_limits.constprop.4+0x50c>
		lo_max_rpm = 0.0;
 801bc38:	ed9f ca25 	vldr	s24, [pc, #148]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bc3c:	e755      	b.n	801baea <update_override_limits.constprop.4+0x1ca>
	} else if (m_temp_motor > temp_motor_accel_end) {
 801bc3e:	edd5 7a00 	vldr	s15, [r5]
 801bc42:	eeb4 cae7 	vcmpe.f32	s24, s15
 801bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc4a:	f140 80fa 	bpl.w	801be42 <update_override_limits.constprop.4+0x522>
		lo_motor_temp_accel = 0.0;
 801bc4e:	ed9f ba20 	vldr	s22, [pc, #128]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bc52:	e73a      	b.n	801baca <update_override_limits.constprop.4+0x1aa>
	} else if (m_temp_fet > temp_fet_accel_end) {
 801bc54:	edd6 7a00 	vldr	s15, [r6]
 801bc58:	eef4 cae7 	vcmpe.f32	s25, s15
 801bc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc60:	f140 80fe 	bpl.w	801be60 <update_override_limits.constprop.4+0x540>
		lo_fet_temp_accel = 0.0;
 801bc64:	eddf ba1a 	vldr	s23, [pc, #104]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bc68:	e725      	b.n	801bab6 <update_override_limits.constprop.4+0x196>
	} else if (m_temp_motor > conf->l_temp_motor_end) {
 801bc6a:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 801bc6e:	edd5 7a00 	vldr	s15, [r5]
 801bc72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc7a:	d57a      	bpl.n	801bd72 <update_override_limits.constprop.4+0x452>
	if (m_fault_now == fault) {
 801bc7c:	4b13      	ldr	r3, [pc, #76]	; (801bccc <update_override_limits.constprop.4+0x3ac>)
 801bc7e:	781b      	ldrb	r3, [r3, #0]
 801bc80:	2b06      	cmp	r3, #6
 801bc82:	f000 810f 	beq.w	801bea4 <update_override_limits.constprop.4+0x584>
		lo_min_mot = 0.0;
 801bc86:	eddf 9a12 	vldr	s19, [pc, #72]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bc8a:	2006      	movs	r0, #6
		lo_max_mot = 0.0;
 801bc8c:	eef0 aa69 	vmov.f32	s21, s19
 801bc90:	f7ff fd9e 	bl	801b7d0 <mc_interface_fault_stop.part.3>
 801bc94:	e6cd      	b.n	801ba32 <update_override_limits.constprop.4+0x112>
 801bc96:	bf00      	nop
 801bc98:	2000c034 	.word	0x2000c034
 801bc9c:	3a534067 	.word	0x3a534067
 801bca0:	2000c22c 	.word	0x2000c22c
 801bca4:	4195d174 	.word	0x4195d174
 801bca8:	2000c230 	.word	0x2000c230
 801bcac:	2000c06c 	.word	0x2000c06c
 801bcb0:	461c4000 	.word	0x461c4000
 801bcb4:	3b5bcf0f 	.word	0x3b5bcf0f
 801bcb8:	43889333 	.word	0x43889333
 801bcbc:	3dcccccd 	.word	0x3dcccccd
 801bcc0:	4c1c363c 	.word	0x4c1c363c
 801bcc4:	4556a000 	.word	0x4556a000
 801bcc8:	457ff000 	.word	0x457ff000
 801bccc:	2000c1e4 	.word	0x2000c1e4
 801bcd0:	00000000 	.word	0x00000000
		float maxc = fabsf(conf->l_current_max);
 801bcd4:	edd4 1a01 	vldr	s3, [r4, #4]
		if (fabsf(conf->l_current_min) > maxc) {
 801bcd8:	edd4 7a02 	vldr	s15, [r4, #8]
		maxc = utils_map(m_temp_fet, conf->l_temp_fet_start, conf->l_temp_fet_end, maxc, 0.0);
 801bcdc:	ed1f 2a04 	vldr	s4, [pc, #-16]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
		float maxc = fabsf(conf->l_current_max);
 801bce0:	eef0 1ae1 	vabs.f32	s3, s3
		if (fabsf(conf->l_current_min) > maxc) {
 801bce4:	eef0 7ae7 	vabs.f32	s15, s15
 801bce8:	eef4 1ae7 	vcmpe.f32	s3, s15
 801bcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			maxc = fabsf(conf->l_current_min);
 801bcf0:	bf48      	it	mi
 801bcf2:	edd4 1a02 	vldrmi	s3, [r4, #8]
		maxc = utils_map(m_temp_fet, conf->l_temp_fet_start, conf->l_temp_fet_end, maxc, 0.0);
 801bcf6:	ed96 0a00 	vldr	s0, [r6]
 801bcfa:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
 801bcfe:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
			maxc = fabsf(conf->l_current_min);
 801bd02:	bf48      	it	mi
 801bd04:	eef0 1ae1 	vabsmi.f32	s3, s3
		maxc = utils_map(m_temp_fet, conf->l_temp_fet_start, conf->l_temp_fet_end, maxc, 0.0);
 801bd08:	f7f9 ff3a 	bl	8015b80 <utils_map>
		if (fabsf(conf->l_current_max) > maxc) {
 801bd0c:	edd4 7a01 	vldr	s15, [r4, #4]
 801bd10:	eef0 7ae7 	vabs.f32	s15, s15
 801bd14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd1c:	f140 80af 	bpl.w	801be7e <update_override_limits.constprop.4+0x55e>
			lo_max_mos = SIGN(conf->l_current_max) * maxc;
 801bd20:	edd4 7a01 	vldr	s15, [r4, #4]
 801bd24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd2c:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
 801bd30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bd34:	bf58      	it	pl
 801bd36:	eeb0 aa67 	vmovpl.f32	s20, s15
 801bd3a:	ee20 aa0a 	vmul.f32	s20, s0, s20
		if (fabsf(conf->l_current_min) > maxc) {
 801bd3e:	edd4 7a02 	vldr	s15, [r4, #8]
 801bd42:	eef0 7ae7 	vabs.f32	s15, s15
 801bd46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd4e:	f140 80be 	bpl.w	801bece <update_override_limits.constprop.4+0x5ae>
			lo_min_mos = SIGN(conf->l_current_min) * maxc;
 801bd52:	edd4 7a02 	vldr	s15, [r4, #8]
 801bd56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd5e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 801bd62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bd66:	bf58      	it	pl
 801bd68:	eef0 8a67 	vmovpl.f32	s17, s15
 801bd6c:	ee60 8a28 	vmul.f32	s17, s0, s17
 801bd70:	e651      	b.n	801ba16 <update_override_limits.constprop.4+0xf6>
		float maxc = fabsf(conf->l_current_max);
 801bd72:	edd4 1a01 	vldr	s3, [r4, #4]
		if (fabsf(conf->l_current_min) > maxc) {
 801bd76:	edd4 7a02 	vldr	s15, [r4, #8]
		maxc = utils_map(m_temp_motor, conf->l_temp_motor_start, conf->l_temp_motor_end, maxc, 0.0);
 801bd7a:	ed1f 2a2b 	vldr	s4, [pc, #-172]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
		float maxc = fabsf(conf->l_current_max);
 801bd7e:	eef0 1ae1 	vabs.f32	s3, s3
		if (fabsf(conf->l_current_min) > maxc) {
 801bd82:	eef0 7ae7 	vabs.f32	s15, s15
 801bd86:	eef4 1ae7 	vcmpe.f32	s3, s15
 801bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			maxc = fabsf(conf->l_current_min);
 801bd8e:	bf48      	it	mi
 801bd90:	edd4 1a02 	vldrmi	s3, [r4, #8]
		maxc = utils_map(m_temp_motor, conf->l_temp_motor_start, conf->l_temp_motor_end, maxc, 0.0);
 801bd94:	ed95 0a00 	vldr	s0, [r5]
 801bd98:	edd4 0a12 	vldr	s1, [r4, #72]	; 0x48
 801bd9c:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
			maxc = fabsf(conf->l_current_min);
 801bda0:	bf48      	it	mi
 801bda2:	eef0 1ae1 	vabsmi.f32	s3, s3
		maxc = utils_map(m_temp_motor, conf->l_temp_motor_start, conf->l_temp_motor_end, maxc, 0.0);
 801bda6:	f7f9 feeb 	bl	8015b80 <utils_map>
		if (fabsf(conf->l_current_max) > maxc) {
 801bdaa:	edd4 7a01 	vldr	s15, [r4, #4]
 801bdae:	eef0 7ae7 	vabs.f32	s15, s15
 801bdb2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdba:	d463      	bmi.n	801be84 <update_override_limits.constprop.4+0x564>
	float lo_max_mot = 0.0;
 801bdbc:	ed5f aa3c 	vldr	s21, [pc, #-240]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
		if (fabsf(conf->l_current_min) > maxc) {
 801bdc0:	edd4 7a02 	vldr	s15, [r4, #8]
 801bdc4:	eef0 7ae7 	vabs.f32	s15, s15
 801bdc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdd0:	d57a      	bpl.n	801bec8 <update_override_limits.constprop.4+0x5a8>
			lo_min_mot = SIGN(conf->l_current_min) * maxc;
 801bdd2:	edd4 7a02 	vldr	s15, [r4, #8]
 801bdd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdde:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
 801bde2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bde6:	bf58      	it	pl
 801bde8:	eef0 9a67 	vmovpl.f32	s19, s15
 801bdec:	ee60 9a29 	vmul.f32	s19, s0, s19
 801bdf0:	e61f      	b.n	801ba32 <update_override_limits.constprop.4+0x112>
		lo_in_max_batt = utils_map(v_in, conf->l_battery_cut_start,
 801bdf2:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 801bdf6:	ed1f 2a4a 	vldr	s4, [pc, #-296]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801bdfa:	ed94 1a0e 	vldr	s2, [r4, #56]	; 0x38
 801bdfe:	edd4 1a03 	vldr	s3, [r4, #12]
 801be02:	eeb0 0a48 	vmov.f32	s0, s16
 801be06:	f7f9 febb 	bl	8015b80 <utils_map>
 801be0a:	eef0 0a40 	vmov.f32	s1, s0
 801be0e:	e6cb      	b.n	801bba8 <update_override_limits.constprop.4+0x288>
		lo_in_max_batt = conf->l_in_current_max;
 801be10:	edd4 0a03 	vldr	s1, [r4, #12]
 801be14:	e6c8      	b.n	801bba8 <update_override_limits.constprop.4+0x288>
		lo_min_rpm = utils_map(rpm_now, rpm_neg_cut_start, rpm_neg_cut_end, conf->l_current_max, 0.0);
 801be16:	eeb0 0a49 	vmov.f32	s0, s18
 801be1a:	edd4 1a01 	vldr	s3, [r4, #4]
 801be1e:	ed1f 2a54 	vldr	s4, [pc, #-336]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801be22:	f7f9 fead 	bl	8015b80 <utils_map>
 801be26:	eeb0 9a40 	vmov.f32	s18, s0
 801be2a:	e66e      	b.n	801bb0a <update_override_limits.constprop.4+0x1ea>
		lo_max_rpm = utils_map(rpm_now, rpm_pos_cut_start, rpm_pos_cut_end, conf->l_current_max, 0.0);
 801be2c:	edd4 1a01 	vldr	s3, [r4, #4]
 801be30:	ed1f 2a59 	vldr	s4, [pc, #-356]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801be34:	eeb0 0a49 	vmov.f32	s0, s18
 801be38:	f7f9 fea2 	bl	8015b80 <utils_map>
 801be3c:	eeb0 ca40 	vmov.f32	s24, s0
 801be40:	e653      	b.n	801baea <update_override_limits.constprop.4+0x1ca>
		lo_motor_temp_accel = utils_map(m_temp_motor, temp_motor_accel_start,
 801be42:	ed95 0a00 	vldr	s0, [r5]
 801be46:	ed1f 2a5e 	vldr	s4, [pc, #-376]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801be4a:	edd4 1a01 	vldr	s3, [r4, #4]
 801be4e:	eef0 0a4b 	vmov.f32	s1, s22
 801be52:	eeb0 1a4c 	vmov.f32	s2, s24
 801be56:	f7f9 fe93 	bl	8015b80 <utils_map>
 801be5a:	eeb0 ba40 	vmov.f32	s22, s0
 801be5e:	e634      	b.n	801baca <update_override_limits.constprop.4+0x1aa>
		lo_fet_temp_accel = utils_map(m_temp_fet, temp_fet_accel_start,
 801be60:	ed96 0a00 	vldr	s0, [r6]
 801be64:	ed1f 2a66 	vldr	s4, [pc, #-408]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801be68:	edd4 1a01 	vldr	s3, [r4, #4]
 801be6c:	eef0 0a6b 	vmov.f32	s1, s23
 801be70:	eeb0 1a6c 	vmov.f32	s2, s25
 801be74:	f7f9 fe84 	bl	8015b80 <utils_map>
 801be78:	eef0 ba40 	vmov.f32	s23, s0
 801be7c:	e61b      	b.n	801bab6 <update_override_limits.constprop.4+0x196>
	float lo_max_mos = 0.0;
 801be7e:	ed1f aa6c 	vldr	s20, [pc, #-432]	; 801bcd0 <update_override_limits.constprop.4+0x3b0>
 801be82:	e75c      	b.n	801bd3e <update_override_limits.constprop.4+0x41e>
			lo_max_mot = SIGN(conf->l_current_max) * maxc;
 801be84:	edd4 7a01 	vldr	s15, [r4, #4]
 801be88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be90:	eeff aa00 	vmov.f32	s21, #240	; 0xbf800000 -1.0
 801be94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801be98:	bf58      	it	pl
 801be9a:	eef0 aa67 	vmovpl.f32	s21, s15
 801be9e:	ee60 aa2a 	vmul.f32	s21, s0, s21
 801bea2:	e78d      	b.n	801bdc0 <update_override_limits.constprop.4+0x4a0>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801bea4:	4b0b      	ldr	r3, [pc, #44]	; (801bed4 <update_override_limits.constprop.4+0x5b4>)
		lo_min_mot = 0.0;
 801bea6:	eddf 9a0c 	vldr	s19, [pc, #48]	; 801bed8 <update_override_limits.constprop.4+0x5b8>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801beaa:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801beae:	601a      	str	r2, [r3, #0]
		lo_max_mot = 0.0;
 801beb0:	eef0 aa69 	vmov.f32	s21, s19
 801beb4:	e5bd      	b.n	801ba32 <update_override_limits.constprop.4+0x112>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801beb6:	4b07      	ldr	r3, [pc, #28]	; (801bed4 <update_override_limits.constprop.4+0x5b4>)
		lo_min_mos = 0.0;
 801beb8:	eddf 8a07 	vldr	s17, [pc, #28]	; 801bed8 <update_override_limits.constprop.4+0x5b8>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801bebc:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801bec0:	601a      	str	r2, [r3, #0]
		lo_max_mos = 0.0;
 801bec2:	eeb0 aa68 	vmov.f32	s20, s17
 801bec6:	e5a6      	b.n	801ba16 <update_override_limits.constprop.4+0xf6>
	float lo_min_mot = 0.0;
 801bec8:	eddf 9a03 	vldr	s19, [pc, #12]	; 801bed8 <update_override_limits.constprop.4+0x5b8>
 801becc:	e5b1      	b.n	801ba32 <update_override_limits.constprop.4+0x112>
	float lo_min_mos = 0.0;
 801bece:	eddf 8a02 	vldr	s17, [pc, #8]	; 801bed8 <update_override_limits.constprop.4+0x5b8>
 801bed2:	e5a0      	b.n	801ba16 <update_override_limits.constprop.4+0xf6>
 801bed4:	2000c1e8 	.word	0x2000c1e8
	...

0801bee0 <mc_interface_set_configuration>:
void mc_interface_set_configuration(mc_configuration *configuration) {
 801bee0:	b538      	push	{r3, r4, r5, lr}
	if (m_conf.m_sensor_port_mode != configuration->m_sensor_port_mode) {
 801bee2:	4d32      	ldr	r5, [pc, #200]	; (801bfac <mc_interface_set_configuration+0xcc>)
 801bee4:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
 801bee8:	f895 215c 	ldrb.w	r2, [r5, #348]	; 0x15c
 801beec:	429a      	cmp	r2, r3
void mc_interface_set_configuration(mc_configuration *configuration) {
 801beee:	4604      	mov	r4, r0
	if (m_conf.m_sensor_port_mode != configuration->m_sensor_port_mode) {
 801bef0:	d007      	beq.n	801bf02 <mc_interface_set_configuration+0x22>
		encoder_deinit();
 801bef2:	f7fe fe0d 	bl	801ab10 <encoder_deinit>
		switch (configuration->m_sensor_port_mode) {
 801bef6:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
 801befa:	2b01      	cmp	r3, #1
 801befc:	d03f      	beq.n	801bf7e <mc_interface_set_configuration+0x9e>
 801befe:	2b02      	cmp	r3, #2
 801bf00:	d032      	beq.n	801bf68 <mc_interface_set_configuration+0x88>
	if (configuration->m_sensor_port_mode == SENSOR_PORT_MODE_ABI) {
 801bf02:	2b01      	cmp	r3, #1
 801bf04:	d036      	beq.n	801bf74 <mc_interface_set_configuration+0x94>
	if (m_conf.motor_type == MOTOR_TYPE_FOC
 801bf06:	78ab      	ldrb	r3, [r5, #2]
 801bf08:	2b02      	cmp	r3, #2
 801bf0a:	d01e      	beq.n	801bf4a <mc_interface_set_configuration+0x6a>
	} else if (m_conf.motor_type != MOTOR_TYPE_FOC
 801bf0c:	78ab      	ldrb	r3, [r5, #2]
 801bf0e:	2b02      	cmp	r3, #2
 801bf10:	d002      	beq.n	801bf18 <mc_interface_set_configuration+0x38>
			&& configuration->motor_type == MOTOR_TYPE_FOC) {
 801bf12:	78a3      	ldrb	r3, [r4, #2]
 801bf14:	2b02      	cmp	r3, #2
 801bf16:	d03c      	beq.n	801bf92 <mc_interface_set_configuration+0xb2>
		m_conf = *configuration;
 801bf18:	4621      	mov	r1, r4
 801bf1a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801bf1e:	4823      	ldr	r0, [pc, #140]	; (801bfac <mc_interface_set_configuration+0xcc>)
 801bf20:	f7f0 fdf6 	bl	800cb10 <memcpy>
	update_override_limits(&m_conf);
 801bf24:	f7ff fcfc 	bl	801b920 <update_override_limits.constprop.4>
	switch (m_conf.motor_type) {
 801bf28:	78ab      	ldrb	r3, [r5, #2]
 801bf2a:	b2db      	uxtb	r3, r3
 801bf2c:	2b01      	cmp	r3, #1
 801bf2e:	d907      	bls.n	801bf40 <mc_interface_set_configuration+0x60>
 801bf30:	2b02      	cmp	r3, #2
 801bf32:	d104      	bne.n	801bf3e <mc_interface_set_configuration+0x5e>
		mcpwm_foc_set_configuration(&m_conf);
 801bf34:	481d      	ldr	r0, [pc, #116]	; (801bfac <mc_interface_set_configuration+0xcc>)
}
 801bf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mcpwm_foc_set_configuration(&m_conf);
 801bf3a:	f001 bdf1 	b.w	801db20 <mcpwm_foc_set_configuration>
 801bf3e:	bd38      	pop	{r3, r4, r5, pc}
		mcpwm_set_configuration(&m_conf);
 801bf40:	481a      	ldr	r0, [pc, #104]	; (801bfac <mc_interface_set_configuration+0xcc>)
}
 801bf42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mcpwm_set_configuration(&m_conf);
 801bf46:	f7f7 bd43 	b.w	80139d0 <mcpwm_set_configuration>
			&& configuration->motor_type != MOTOR_TYPE_FOC) {
 801bf4a:	78a3      	ldrb	r3, [r4, #2]
 801bf4c:	2b02      	cmp	r3, #2
 801bf4e:	d01d      	beq.n	801bf8c <mc_interface_set_configuration+0xac>
		mcpwm_foc_deinit();
 801bf50:	f001 fda6 	bl	801daa0 <mcpwm_foc_deinit>
		m_conf = *configuration;
 801bf54:	4621      	mov	r1, r4
 801bf56:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801bf5a:	4814      	ldr	r0, [pc, #80]	; (801bfac <mc_interface_set_configuration+0xcc>)
 801bf5c:	f7f0 fdd8 	bl	800cb10 <memcpy>
		mcpwm_init(&m_conf);
 801bf60:	4812      	ldr	r0, [pc, #72]	; (801bfac <mc_interface_set_configuration+0xcc>)
 801bf62:	f7f7 f9e5 	bl	8013330 <mcpwm_init>
 801bf66:	e7dd      	b.n	801bf24 <mc_interface_set_configuration+0x44>
			encoder_init_as5047p_spi();
 801bf68:	f7fe fe72 	bl	801ac50 <encoder_init_as5047p_spi>
 801bf6c:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
	if (configuration->m_sensor_port_mode == SENSOR_PORT_MODE_ABI) {
 801bf70:	2b01      	cmp	r3, #1
 801bf72:	d1c8      	bne.n	801bf06 <mc_interface_set_configuration+0x26>
		encoder_set_counts(configuration->m_encoder_counts);
 801bf74:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
 801bf78:	f7fe ff82 	bl	801ae80 <encoder_set_counts>
 801bf7c:	e7c3      	b.n	801bf06 <mc_interface_set_configuration+0x26>
			encoder_init_abi(configuration->m_encoder_counts);
 801bf7e:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
 801bf82:	f7fe fe05 	bl	801ab90 <encoder_init_abi>
 801bf86:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
			break;
 801bf8a:	e7ba      	b.n	801bf02 <mc_interface_set_configuration+0x22>
	} else if (m_conf.motor_type != MOTOR_TYPE_FOC
 801bf8c:	78ab      	ldrb	r3, [r5, #2]
 801bf8e:	2b02      	cmp	r3, #2
 801bf90:	d0c2      	beq.n	801bf18 <mc_interface_set_configuration+0x38>
		mcpwm_deinit();
 801bf92:	f7f7 f95d 	bl	8013250 <mcpwm_deinit>
		m_conf = *configuration;
 801bf96:	4621      	mov	r1, r4
 801bf98:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801bf9c:	4803      	ldr	r0, [pc, #12]	; (801bfac <mc_interface_set_configuration+0xcc>)
 801bf9e:	f7f0 fdb7 	bl	800cb10 <memcpy>
		mcpwm_foc_init(&m_conf);
 801bfa2:	4802      	ldr	r0, [pc, #8]	; (801bfac <mc_interface_set_configuration+0xcc>)
 801bfa4:	f001 fab4 	bl	801d510 <mcpwm_foc_init>
 801bfa8:	e7bc      	b.n	801bf24 <mc_interface_set_configuration+0x44>
 801bfaa:	bf00      	nop
 801bfac:	2000c06c 	.word	0x2000c06c

0801bfb0 <timer_thread>:
 801bfb0:	4b0c      	ldr	r3, [pc, #48]	; (801bfe4 <timer_thread+0x34>)
 801bfb2:	4a0d      	ldr	r2, [pc, #52]	; (801bfe8 <timer_thread+0x38>)
 801bfb4:	699b      	ldr	r3, [r3, #24]
 801bfb6:	4c0d      	ldr	r4, [pc, #52]	; (801bfec <timer_thread+0x3c>)
			if (!IS_DRV_FAULT()) {
 801bfb8:	4d0d      	ldr	r5, [pc, #52]	; (801bff0 <timer_thread+0x40>)
static THD_FUNCTION(timer_thread, arg) {
 801bfba:	b580      	push	{r7, lr}
				m_fault_now = FAULT_CODE_NONE;
 801bfbc:	2600      	movs	r6, #0
 801bfbe:	4f0d      	ldr	r7, [pc, #52]	; (801bff4 <timer_thread+0x44>)
 801bfc0:	619a      	str	r2, [r3, #24]
 801bfc2:	e005      	b.n	801bfd0 <timer_thread+0x20>
			m_ignore_iterations--;
 801bfc4:	6023      	str	r3, [r4, #0]
		update_override_limits(&m_conf);
 801bfc6:	f7ff fcab 	bl	801b920 <update_override_limits.constprop.4>
		chThdSleepMilliseconds(1);
 801bfca:	200a      	movs	r0, #10
 801bfcc:	f7f1 fd08 	bl	800d9e0 <chThdSleep>
		if (m_ignore_iterations > 0) {
 801bfd0:	6823      	ldr	r3, [r4, #0]
 801bfd2:	2b00      	cmp	r3, #0
			m_ignore_iterations--;
 801bfd4:	f103 33ff 	add.w	r3, r3, #4294967295
		if (m_ignore_iterations > 0) {
 801bfd8:	dcf4      	bgt.n	801bfc4 <timer_thread+0x14>
			if (!IS_DRV_FAULT()) {
 801bfda:	692b      	ldr	r3, [r5, #16]
 801bfdc:	04db      	lsls	r3, r3, #19
				m_fault_now = FAULT_CODE_NONE;
 801bfde:	bf48      	it	mi
 801bfe0:	703e      	strbmi	r6, [r7, #0]
 801bfe2:	e7f0      	b.n	801bfc6 <timer_thread+0x16>
 801bfe4:	20001a40 	.word	0x20001a40
 801bfe8:	080304a0 	.word	0x080304a0
 801bfec:	2000c1e8 	.word	0x2000c1e8
 801bff0:	40020800 	.word	0x40020800
 801bff4:	2000c1e4 	.word	0x2000c1e4
	...

0801c000 <mc_interface_get_tachometer_abs_value>:
	switch (m_conf.motor_type) {
 801c000:	4b06      	ldr	r3, [pc, #24]	; (801c01c <mc_interface_get_tachometer_abs_value+0x1c>)
 801c002:	789b      	ldrb	r3, [r3, #2]
 801c004:	b2db      	uxtb	r3, r3
 801c006:	2b01      	cmp	r3, #1
 801c008:	d905      	bls.n	801c016 <mc_interface_get_tachometer_abs_value+0x16>
 801c00a:	2b02      	cmp	r3, #2
 801c00c:	d101      	bne.n	801c012 <mc_interface_get_tachometer_abs_value+0x12>
		ret = mcpwm_foc_get_tachometer_abs_value(reset);
 801c00e:	f001 bf8f 	b.w	801df30 <mcpwm_foc_get_tachometer_abs_value>
}
 801c012:	2000      	movs	r0, #0
 801c014:	4770      	bx	lr
		ret = mcpwm_get_tachometer_abs_value(reset);
 801c016:	f7f7 be2b 	b.w	8013c70 <mcpwm_get_tachometer_abs_value>
 801c01a:	bf00      	nop
 801c01c:	2000c06c 	.word	0x2000c06c

0801c020 <mc_interface_get_last_inj_adc_isr_duration>:
	switch (m_conf.motor_type) {
 801c020:	4b06      	ldr	r3, [pc, #24]	; (801c03c <mc_interface_get_last_inj_adc_isr_duration+0x1c>)
 801c022:	789b      	ldrb	r3, [r3, #2]
 801c024:	b2db      	uxtb	r3, r3
 801c026:	2b01      	cmp	r3, #1
 801c028:	d906      	bls.n	801c038 <mc_interface_get_last_inj_adc_isr_duration+0x18>
 801c02a:	2b02      	cmp	r3, #2
 801c02c:	d101      	bne.n	801c032 <mc_interface_get_last_inj_adc_isr_duration+0x12>
		ret = mcpwm_foc_get_last_inj_adc_isr_duration();
 801c02e:	f002 beef 	b.w	801ee10 <mcpwm_foc_get_last_inj_adc_isr_duration>
}
 801c032:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801c040 <mc_interface_get_last_inj_adc_isr_duration+0x20>
 801c036:	4770      	bx	lr
		ret = mcpwm_get_last_inj_adc_isr_duration();
 801c038:	f7f8 b93a 	b.w	80142b0 <mcpwm_get_last_inj_adc_isr_duration>
 801c03c:	2000c06c 	.word	0x2000c06c
	...

0801c050 <mc_interface_read_reset_avg_motor_current>:
	float res = m_motor_current_sum / m_motor_current_iterations;
 801c050:	4905      	ldr	r1, [pc, #20]	; (801c068 <mc_interface_read_reset_avg_motor_current+0x18>)
 801c052:	4b06      	ldr	r3, [pc, #24]	; (801c06c <mc_interface_read_reset_avg_motor_current+0x1c>)
 801c054:	ed91 0a00 	vldr	s0, [r1]
 801c058:	edd3 7a00 	vldr	s15, [r3]
	m_motor_current_sum = 0.0;
 801c05c:	2200      	movs	r2, #0
 801c05e:	600a      	str	r2, [r1, #0]
}
 801c060:	ee80 0a27 	vdiv.f32	s0, s0, s15
	m_motor_current_iterations = 0.0;
 801c064:	601a      	str	r2, [r3, #0]
}
 801c066:	4770      	bx	lr
 801c068:	2000c200 	.word	0x2000c200
 801c06c:	2000c1fc 	.word	0x2000c1fc

0801c070 <mc_interface_read_reset_avg_input_current>:
	float res = m_input_current_sum / m_input_current_iterations;
 801c070:	4905      	ldr	r1, [pc, #20]	; (801c088 <mc_interface_read_reset_avg_input_current+0x18>)
 801c072:	4b06      	ldr	r3, [pc, #24]	; (801c08c <mc_interface_read_reset_avg_input_current+0x1c>)
 801c074:	ed91 0a00 	vldr	s0, [r1]
 801c078:	edd3 7a00 	vldr	s15, [r3]
	m_input_current_sum = 0.0;
 801c07c:	2200      	movs	r2, #0
 801c07e:	600a      	str	r2, [r1, #0]
}
 801c080:	ee80 0a27 	vdiv.f32	s0, s0, s15
	m_input_current_iterations = 0.0;
 801c084:	601a      	str	r2, [r3, #0]
}
 801c086:	4770      	bx	lr
 801c088:	2000c1f0 	.word	0x2000c1f0
 801c08c:	2000c1ec 	.word	0x2000c1ec

0801c090 <mc_interface_read_reset_avg_id>:
	float res = m_motor_id_sum / m_motor_id_iterations;
 801c090:	490c      	ldr	r1, [pc, #48]	; (801c0c4 <mc_interface_read_reset_avg_id+0x34>)
 801c092:	4b0d      	ldr	r3, [pc, #52]	; (801c0c8 <mc_interface_read_reset_avg_id+0x38>)
 801c094:	ed91 7a00 	vldr	s14, [r1]
 801c098:	edd3 7a00 	vldr	s15, [r3]
	return DIR_MULT * res; // TODO: DIR_MULT?
 801c09c:	480b      	ldr	r0, [pc, #44]	; (801c0cc <mc_interface_read_reset_avg_id+0x3c>)
	float res = m_motor_id_sum / m_motor_id_iterations;
 801c09e:	ee87 0a27 	vdiv.f32	s0, s14, s15
	m_motor_id_sum = 0.0;
 801c0a2:	2200      	movs	r2, #0
 801c0a4:	600a      	str	r2, [r1, #0]
	m_motor_id_iterations = 0.0;
 801c0a6:	601a      	str	r2, [r3, #0]
	return DIR_MULT * res; // TODO: DIR_MULT?
 801c0a8:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c0b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c0b6:	bf08      	it	eq
 801c0b8:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801c0bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c0c0:	4770      	bx	lr
 801c0c2:	bf00      	nop
 801c0c4:	2000c208 	.word	0x2000c208
 801c0c8:	2000c204 	.word	0x2000c204
 801c0cc:	2000c06c 	.word	0x2000c06c

0801c0d0 <mc_interface_read_reset_avg_iq>:
	float res = m_motor_iq_sum / m_motor_iq_iterations;
 801c0d0:	490c      	ldr	r1, [pc, #48]	; (801c104 <mc_interface_read_reset_avg_iq+0x34>)
 801c0d2:	4b0d      	ldr	r3, [pc, #52]	; (801c108 <mc_interface_read_reset_avg_iq+0x38>)
 801c0d4:	ed91 7a00 	vldr	s14, [r1]
 801c0d8:	edd3 7a00 	vldr	s15, [r3]
	return DIR_MULT * res;
 801c0dc:	480b      	ldr	r0, [pc, #44]	; (801c10c <mc_interface_read_reset_avg_iq+0x3c>)
	float res = m_motor_iq_sum / m_motor_iq_iterations;
 801c0de:	ee87 0a27 	vdiv.f32	s0, s14, s15
	m_motor_iq_sum = 0.0;
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	600a      	str	r2, [r1, #0]
	m_motor_iq_iterations = 0.0;
 801c0e6:	601a      	str	r2, [r3, #0]
	return DIR_MULT * res;
 801c0e8:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c0f2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c0f6:	bf08      	it	eq
 801c0f8:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801c0fc:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c100:	4770      	bx	lr
 801c102:	bf00      	nop
 801c104:	2000c210 	.word	0x2000c210
 801c108:	2000c20c 	.word	0x2000c20c
 801c10c:	2000c06c 	.word	0x2000c06c

0801c110 <mc_interface_get_pid_pos_set>:
	return m_position_set;
 801c110:	4b01      	ldr	r3, [pc, #4]	; (801c118 <mc_interface_get_pid_pos_set+0x8>)
 801c112:	ed93 0a00 	vldr	s0, [r3]
}
 801c116:	4770      	bx	lr
 801c118:	2000c214 	.word	0x2000c214
 801c11c:	00000000 	.word	0x00000000

0801c120 <mc_interface_get_pid_pos_now>:
float mc_interface_get_pid_pos_now(void) {
 801c120:	b510      	push	{r4, lr}
	switch (m_conf.motor_type) {
 801c122:	4c0e      	ldr	r4, [pc, #56]	; (801c15c <mc_interface_get_pid_pos_now+0x3c>)
 801c124:	78a3      	ldrb	r3, [r4, #2]
 801c126:	b2db      	uxtb	r3, r3
 801c128:	2b01      	cmp	r3, #1
 801c12a:	d913      	bls.n	801c154 <mc_interface_get_pid_pos_now+0x34>
 801c12c:	2b02      	cmp	r3, #2
 801c12e:	d00e      	beq.n	801c14e <mc_interface_get_pid_pos_now+0x2e>
	float ret = 0.0;
 801c130:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801c160 <mc_interface_get_pid_pos_now+0x40>
	return DIR_MULT * ret;
 801c134:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
 801c138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c142:	bf08      	it	eq
 801c144:	eef0 7a47 	vmoveq.f32	s15, s14
}
 801c148:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c14c:	bd10      	pop	{r4, pc}
		ret = mcpwm_foc_get_pid_pos_now();
 801c14e:	f001 fe4f 	bl	801ddf0 <mcpwm_foc_get_pid_pos_now>
		break;
 801c152:	e7ef      	b.n	801c134 <mc_interface_get_pid_pos_now+0x14>
		ret = encoder_read_deg();
 801c154:	f7fe fdcc 	bl	801acf0 <encoder_read_deg>
		break;
 801c158:	e7ec      	b.n	801c134 <mc_interface_get_pid_pos_now+0x14>
 801c15a:	bf00      	nop
 801c15c:	2000c06c 	.word	0x2000c06c
	...

0801c170 <mc_interface_get_last_sample_adc_isr_duration>:
	return m_last_adc_duration_sample;
 801c170:	4b01      	ldr	r3, [pc, #4]	; (801c178 <mc_interface_get_last_sample_adc_isr_duration+0x8>)
 801c172:	ed93 0a00 	vldr	s0, [r3]
}
 801c176:	4770      	bx	lr
 801c178:	2000c1f4 	.word	0x2000c1f4
 801c17c:	00000000 	.word	0x00000000

0801c180 <mc_interface_sample_print_data>:
void mc_interface_sample_print_data(debug_sampling_mode mode, uint16_t len, uint8_t decimation) {
 801c180:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 801c184:	bf28      	it	cs
 801c186:	f44f 61fa 	movcs.w	r1, #2000	; 0x7d0
	if (mode == DEBUG_SAMPLING_SEND_LAST_SAMPLES) {
 801c18a:	2807      	cmp	r0, #7
 801c18c:	d00f      	beq.n	801c1ae <mc_interface_sample_print_data+0x2e>
void mc_interface_sample_print_data(debug_sampling_mode mode, uint16_t len, uint8_t decimation) {
 801c18e:	b5f0      	push	{r4, r5, r6, r7, lr}
		m_sample_trigger = -1;
 801c190:	4f09      	ldr	r7, [pc, #36]	; (801c1b8 <mc_interface_sample_print_data+0x38>)
		m_sample_now = 0;
 801c192:	4e0a      	ldr	r6, [pc, #40]	; (801c1bc <mc_interface_sample_print_data+0x3c>)
		m_sample_len = len;
 801c194:	4d0a      	ldr	r5, [pc, #40]	; (801c1c0 <mc_interface_sample_print_data+0x40>)
		m_sample_int = decimation;
 801c196:	4c0b      	ldr	r4, [pc, #44]	; (801c1c4 <mc_interface_sample_print_data+0x44>)
		m_sample_mode = mode;
 801c198:	4b0b      	ldr	r3, [pc, #44]	; (801c1c8 <mc_interface_sample_print_data+0x48>)
		m_sample_trigger = -1;
 801c19a:	f04f 3eff 	mov.w	lr, #4294967295
 801c19e:	f8c7 e000 	str.w	lr, [r7]
		m_sample_now = 0;
 801c1a2:	2700      	movs	r7, #0
 801c1a4:	6037      	str	r7, [r6, #0]
		m_sample_len = len;
 801c1a6:	6029      	str	r1, [r5, #0]
		m_sample_int = decimation;
 801c1a8:	6022      	str	r2, [r4, #0]
		m_sample_mode = mode;
 801c1aa:	7018      	strb	r0, [r3, #0]
 801c1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chEvtSignal(sample_send_tp, (eventmask_t) 1);
 801c1ae:	4b07      	ldr	r3, [pc, #28]	; (801c1cc <mc_interface_sample_print_data+0x4c>)
 801c1b0:	2101      	movs	r1, #1
 801c1b2:	6818      	ldr	r0, [r3, #0]
 801c1b4:	f7f1 be64 	b.w	800de80 <chEvtSignal>
 801c1b8:	2000c228 	.word	0x2000c228
 801c1bc:	2000c224 	.word	0x2000c224
 801c1c0:	2000c21c 	.word	0x2000c21c
 801c1c4:	2000c218 	.word	0x2000c218
 801c1c8:	2000c220 	.word	0x2000c220
 801c1cc:	2000c7d8 	.word	0x2000c7d8

0801c1d0 <mc_interface_temp_fet_filtered>:
	return m_temp_fet;
 801c1d0:	4b01      	ldr	r3, [pc, #4]	; (801c1d8 <mc_interface_temp_fet_filtered+0x8>)
 801c1d2:	ed93 0a00 	vldr	s0, [r3]
}
 801c1d6:	4770      	bx	lr
 801c1d8:	2000c22c 	.word	0x2000c22c
 801c1dc:	00000000 	.word	0x00000000

0801c1e0 <mc_interface_temp_motor_filtered>:
	return m_temp_motor;
 801c1e0:	4b01      	ldr	r3, [pc, #4]	; (801c1e8 <mc_interface_temp_motor_filtered+0x8>)
 801c1e2:	ed93 0a00 	vldr	s0, [r3]
}
 801c1e6:	4770      	bx	lr
 801c1e8:	2000c230 	.word	0x2000c230
 801c1ec:	00000000 	.word	0x00000000

0801c1f0 <mc_interface_try_input>:
int mc_interface_try_input(void) {
 801c1f0:	b510      	push	{r4, lr}
	if (mc_interface_get_state() == MC_STATE_DETECTING) {
 801c1f2:	f7ff f96d 	bl	801b4d0 <mc_interface_get_state>
 801c1f6:	2801      	cmp	r0, #1
 801c1f8:	d024      	beq.n	801c244 <mc_interface_try_input+0x54>
	int retval = m_ignore_iterations;
 801c1fa:	4b16      	ldr	r3, [pc, #88]	; (801c254 <mc_interface_try_input+0x64>)
 801c1fc:	681c      	ldr	r4, [r3, #0]
	if (!m_ignore_iterations && m_lock_enabled) {
 801c1fe:	b914      	cbnz	r4, 801c206 <mc_interface_try_input+0x16>
 801c200:	4b15      	ldr	r3, [pc, #84]	; (801c258 <mc_interface_try_input+0x68>)
 801c202:	781b      	ldrb	r3, [r3, #0]
 801c204:	b963      	cbnz	r3, 801c220 <mc_interface_try_input+0x30>
	switch (m_conf.motor_type) {
 801c206:	4b15      	ldr	r3, [pc, #84]	; (801c25c <mc_interface_try_input+0x6c>)
 801c208:	789b      	ldrb	r3, [r3, #2]
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	2b01      	cmp	r3, #1
 801c20e:	d911      	bls.n	801c234 <mc_interface_try_input+0x44>
 801c210:	2b02      	cmp	r3, #2
 801c212:	d103      	bne.n	801c21c <mc_interface_try_input+0x2c>
		if (!mcpwm_foc_init_done()) {
 801c214:	f001 fc7c 	bl	801db10 <mcpwm_foc_init_done>
 801c218:	b900      	cbnz	r0, 801c21c <mc_interface_try_input+0x2c>
			retval = 1;
 801c21a:	2401      	movs	r4, #1
}
 801c21c:	4620      	mov	r0, r4
 801c21e:	bd10      	pop	{r4, pc}
		if (!m_lock_override_once) {
 801c220:	4b0f      	ldr	r3, [pc, #60]	; (801c260 <mc_interface_try_input+0x70>)
 801c222:	781a      	ldrb	r2, [r3, #0]
 801c224:	b962      	cbnz	r2, 801c240 <mc_interface_try_input+0x50>
	switch (m_conf.motor_type) {
 801c226:	4b0d      	ldr	r3, [pc, #52]	; (801c25c <mc_interface_try_input+0x6c>)
 801c228:	789b      	ldrb	r3, [r3, #2]
 801c22a:	b2db      	uxtb	r3, r3
 801c22c:	2b01      	cmp	r3, #1
			retval = 1;
 801c22e:	f04f 0401 	mov.w	r4, #1
	switch (m_conf.motor_type) {
 801c232:	d8ed      	bhi.n	801c210 <mc_interface_try_input+0x20>
		if (!mcpwm_init_done()) {
 801c234:	f7f7 f84c 	bl	80132d0 <mcpwm_init_done>
 801c238:	2800      	cmp	r0, #0
 801c23a:	d0ee      	beq.n	801c21a <mc_interface_try_input+0x2a>
}
 801c23c:	4620      	mov	r0, r4
 801c23e:	bd10      	pop	{r4, pc}
			m_lock_override_once = false;
 801c240:	701c      	strb	r4, [r3, #0]
 801c242:	e7e0      	b.n	801c206 <mc_interface_try_input+0x16>
		mcpwm_stop_pwm();
 801c244:	f7f7 fd24 	bl	8013c90 <mcpwm_stop_pwm>
		m_ignore_iterations = MCPWM_DETECT_STOP_TIME;
 801c248:	4b02      	ldr	r3, [pc, #8]	; (801c254 <mc_interface_try_input+0x64>)
 801c24a:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801c24e:	601c      	str	r4, [r3, #0]
 801c250:	e7d9      	b.n	801c206 <mc_interface_try_input+0x16>
 801c252:	bf00      	nop
 801c254:	2000c1e8 	.word	0x2000c1e8
 801c258:	2000c1f8 	.word	0x2000c1f8
 801c25c:	2000c06c 	.word	0x2000c06c
 801c260:	2000c1f9 	.word	0x2000c1f9
	...

0801c270 <mc_interface_set_duty>:
void mc_interface_set_duty(float dutyCycle) {
 801c270:	b508      	push	{r3, lr}
 801c272:	ed2d 8b02 	vpush	{d8}
 801c276:	eeb0 8a40 	vmov.f32	s16, s0
	if (mc_interface_try_input()) {
 801c27a:	f7ff ffb9 	bl	801c1f0 <mc_interface_try_input>
 801c27e:	b9c0      	cbnz	r0, 801c2b2 <mc_interface_set_duty+0x42>
	switch (m_conf.motor_type) {
 801c280:	4a16      	ldr	r2, [pc, #88]	; (801c2dc <mc_interface_set_duty+0x6c>)
 801c282:	7893      	ldrb	r3, [r2, #2]
 801c284:	b2db      	uxtb	r3, r3
 801c286:	2b01      	cmp	r3, #1
 801c288:	d916      	bls.n	801c2b8 <mc_interface_set_duty+0x48>
 801c28a:	2b02      	cmp	r3, #2
 801c28c:	d111      	bne.n	801c2b2 <mc_interface_set_duty+0x42>
		mcpwm_foc_set_duty(DIR_MULT * dutyCycle);
 801c28e:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c292:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c296:	2b00      	cmp	r3, #0
 801c298:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c29c:	bf08      	it	eq
 801c29e:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c2a2:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 801c2a6:	ecbd 8b02 	vpop	{d8}
 801c2aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_foc_set_duty(DIR_MULT * dutyCycle);
 801c2ae:	f001 bc7f 	b.w	801dbb0 <mcpwm_foc_set_duty>
}
 801c2b2:	ecbd 8b02 	vpop	{d8}
 801c2b6:	bd08      	pop	{r3, pc}
		mcpwm_set_duty(DIR_MULT * dutyCycle);
 801c2b8:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c2bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c2c6:	bf08      	it	eq
 801c2c8:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c2cc:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 801c2d0:	ecbd 8b02 	vpop	{d8}
 801c2d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_set_duty(DIR_MULT * dutyCycle);
 801c2d8:	f7f8 b9f2 	b.w	80146c0 <mcpwm_set_duty>
 801c2dc:	2000c06c 	.word	0x2000c06c

0801c2e0 <mc_interface_set_pid_speed>:
void mc_interface_set_pid_speed(float rpm) {
 801c2e0:	b508      	push	{r3, lr}
 801c2e2:	ed2d 8b02 	vpush	{d8}
 801c2e6:	eeb0 8a40 	vmov.f32	s16, s0
	if (mc_interface_try_input()) {
 801c2ea:	f7ff ff81 	bl	801c1f0 <mc_interface_try_input>
 801c2ee:	b9c0      	cbnz	r0, 801c322 <mc_interface_set_pid_speed+0x42>
	switch (m_conf.motor_type) {
 801c2f0:	4a16      	ldr	r2, [pc, #88]	; (801c34c <mc_interface_set_pid_speed+0x6c>)
 801c2f2:	7893      	ldrb	r3, [r2, #2]
 801c2f4:	b2db      	uxtb	r3, r3
 801c2f6:	2b01      	cmp	r3, #1
 801c2f8:	d916      	bls.n	801c328 <mc_interface_set_pid_speed+0x48>
 801c2fa:	2b02      	cmp	r3, #2
 801c2fc:	d111      	bne.n	801c322 <mc_interface_set_pid_speed+0x42>
		mcpwm_foc_set_pid_speed(DIR_MULT * rpm);
 801c2fe:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c302:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c306:	2b00      	cmp	r3, #0
 801c308:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c30c:	bf08      	it	eq
 801c30e:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c312:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 801c316:	ecbd 8b02 	vpop	{d8}
 801c31a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_foc_set_pid_speed(DIR_MULT * rpm);
 801c31e:	f001 bc5f 	b.w	801dbe0 <mcpwm_foc_set_pid_speed>
}
 801c322:	ecbd 8b02 	vpop	{d8}
 801c326:	bd08      	pop	{r3, pc}
		mcpwm_set_pid_speed(DIR_MULT * rpm);
 801c328:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c32c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c330:	2b00      	cmp	r3, #0
 801c332:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c336:	bf08      	it	eq
 801c338:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c33c:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 801c340:	ecbd 8b02 	vpop	{d8}
 801c344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_set_pid_speed(DIR_MULT * rpm);
 801c348:	f7f7 bb6a 	b.w	8013a20 <mcpwm_set_pid_speed>
 801c34c:	2000c06c 	.word	0x2000c06c

0801c350 <mc_interface_set_pid_pos>:
void mc_interface_set_pid_pos(float pos) {
 801c350:	b508      	push	{r3, lr}
 801c352:	ed2d 8b02 	vpush	{d8}
 801c356:	eeb0 8a40 	vmov.f32	s16, s0
	if (mc_interface_try_input()) {
 801c35a:	f7ff ff49 	bl	801c1f0 <mc_interface_try_input>
 801c35e:	b9e8      	cbnz	r0, 801c39c <mc_interface_set_pid_pos+0x4c>
	m_position_set = pos;
 801c360:	4a1a      	ldr	r2, [pc, #104]	; (801c3cc <mc_interface_set_pid_pos+0x7c>)
	switch (m_conf.motor_type) {
 801c362:	491b      	ldr	r1, [pc, #108]	; (801c3d0 <mc_interface_set_pid_pos+0x80>)
	m_position_set = pos;
 801c364:	ed82 8a00 	vstr	s16, [r2]
	switch (m_conf.motor_type) {
 801c368:	788b      	ldrb	r3, [r1, #2]
 801c36a:	b2db      	uxtb	r3, r3
 801c36c:	2b01      	cmp	r3, #1
 801c36e:	d918      	bls.n	801c3a2 <mc_interface_set_pid_pos+0x52>
 801c370:	2b02      	cmp	r3, #2
 801c372:	d113      	bne.n	801c39c <mc_interface_set_pid_pos+0x4c>
}
 801c374:	ecbd 8b02 	vpop	{d8}
		mcpwm_foc_set_pid_pos(DIR_MULT * m_position_set);
 801c378:	f891 315d 	ldrb.w	r3, [r1, #349]	; 0x15d
 801c37c:	ed92 0a00 	vldr	s0, [r2]
 801c380:	2b00      	cmp	r3, #0
 801c382:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c38a:	bf08      	it	eq
 801c38c:	eef0 7a47 	vmoveq.f32	s15, s14
 801c390:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 801c394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_foc_set_pid_pos(DIR_MULT * m_position_set);
 801c398:	f001 bc3a 	b.w	801dc10 <mcpwm_foc_set_pid_pos>
}
 801c39c:	ecbd 8b02 	vpop	{d8}
 801c3a0:	bd08      	pop	{r3, pc}
 801c3a2:	ecbd 8b02 	vpop	{d8}
		mcpwm_set_pid_pos(DIR_MULT * m_position_set);
 801c3a6:	f891 315d 	ldrb.w	r3, [r1, #349]	; 0x15d
 801c3aa:	ed92 0a00 	vldr	s0, [r2]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c3b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c3b8:	bf08      	it	eq
 801c3ba:	eef0 7a47 	vmoveq.f32	s15, s14
 801c3be:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 801c3c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_set_pid_pos(DIR_MULT * m_position_set);
 801c3c6:	f7f8 bb6b 	b.w	8014aa0 <mcpwm_set_pid_pos>
 801c3ca:	bf00      	nop
 801c3cc:	2000c214 	.word	0x2000c214
 801c3d0:	2000c06c 	.word	0x2000c06c
	...

0801c3e0 <mc_interface_set_current>:
void mc_interface_set_current(float current) {
 801c3e0:	b508      	push	{r3, lr}
 801c3e2:	ed2d 8b02 	vpush	{d8}
 801c3e6:	eeb0 8a40 	vmov.f32	s16, s0
	if (mc_interface_try_input()) {
 801c3ea:	f7ff ff01 	bl	801c1f0 <mc_interface_try_input>
 801c3ee:	b9c0      	cbnz	r0, 801c422 <mc_interface_set_current+0x42>
	switch (m_conf.motor_type) {
 801c3f0:	4a16      	ldr	r2, [pc, #88]	; (801c44c <mc_interface_set_current+0x6c>)
 801c3f2:	7893      	ldrb	r3, [r2, #2]
 801c3f4:	b2db      	uxtb	r3, r3
 801c3f6:	2b01      	cmp	r3, #1
 801c3f8:	d916      	bls.n	801c428 <mc_interface_set_current+0x48>
 801c3fa:	2b02      	cmp	r3, #2
 801c3fc:	d111      	bne.n	801c422 <mc_interface_set_current+0x42>
		mcpwm_foc_set_current(DIR_MULT * current);
 801c3fe:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c402:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c406:	2b00      	cmp	r3, #0
 801c408:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c40c:	bf08      	it	eq
 801c40e:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c412:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 801c416:	ecbd 8b02 	vpop	{d8}
 801c41a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_foc_set_current(DIR_MULT * current);
 801c41e:	f001 bc0f 	b.w	801dc40 <mcpwm_foc_set_current>
}
 801c422:	ecbd 8b02 	vpop	{d8}
 801c426:	bd08      	pop	{r3, pc}
		mcpwm_set_current(DIR_MULT * current);
 801c428:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c42c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c430:	2b00      	cmp	r3, #0
 801c432:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c436:	bf08      	it	eq
 801c438:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c43c:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 801c440:	ecbd 8b02 	vpop	{d8}
 801c444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_set_current(DIR_MULT * current);
 801c448:	f7f8 bb4a 	b.w	8014ae0 <mcpwm_set_current>
 801c44c:	2000c06c 	.word	0x2000c06c

0801c450 <mc_interface_set_current_rel>:
	if (val > 0.0) {
 801c450:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		mc_interface_set_current(val * m_conf.lo_current_motor_max_now);
 801c458:	4b07      	ldr	r3, [pc, #28]	; (801c478 <mc_interface_set_current_rel+0x28>)
	if (val > 0.0) {
 801c45a:	dd05      	ble.n	801c468 <mc_interface_set_current_rel+0x18>
		mc_interface_set_current(val * m_conf.lo_current_motor_max_now);
 801c45c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 801c460:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c464:	f7ff bfbc 	b.w	801c3e0 <mc_interface_set_current>
		mc_interface_set_current(val * fabsf(m_conf.lo_current_motor_min_now));
 801c468:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 801c46c:	eef0 7ae7 	vabs.f32	s15, s15
 801c470:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c474:	f7ff bfb4 	b.w	801c3e0 <mc_interface_set_current>
 801c478:	2000c06c 	.word	0x2000c06c
 801c47c:	00000000 	.word	0x00000000

0801c480 <mc_interface_release_motor>:
	mc_interface_set_current(0.0);
 801c480:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c488 <mc_interface_release_motor+0x8>
 801c484:	f7ff bfac 	b.w	801c3e0 <mc_interface_set_current>
	...

0801c490 <mc_interface_set_brake_current>:
void mc_interface_set_brake_current(float current) {
 801c490:	b508      	push	{r3, lr}
 801c492:	ed2d 8b02 	vpush	{d8}
 801c496:	eeb0 8a40 	vmov.f32	s16, s0
	if (mc_interface_try_input()) {
 801c49a:	f7ff fea9 	bl	801c1f0 <mc_interface_try_input>
 801c49e:	b9c0      	cbnz	r0, 801c4d2 <mc_interface_set_brake_current+0x42>
	switch (m_conf.motor_type) {
 801c4a0:	4a16      	ldr	r2, [pc, #88]	; (801c4fc <mc_interface_set_brake_current+0x6c>)
 801c4a2:	7893      	ldrb	r3, [r2, #2]
 801c4a4:	b2db      	uxtb	r3, r3
 801c4a6:	2b01      	cmp	r3, #1
 801c4a8:	d916      	bls.n	801c4d8 <mc_interface_set_brake_current+0x48>
 801c4aa:	2b02      	cmp	r3, #2
 801c4ac:	d111      	bne.n	801c4d2 <mc_interface_set_brake_current+0x42>
		mcpwm_foc_set_brake_current(DIR_MULT * current);
 801c4ae:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c4b2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c4bc:	bf08      	it	eq
 801c4be:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c4c2:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 801c4c6:	ecbd 8b02 	vpop	{d8}
 801c4ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_foc_set_brake_current(DIR_MULT * current);
 801c4ce:	f001 bbe7 	b.w	801dca0 <mcpwm_foc_set_brake_current>
}
 801c4d2:	ecbd 8b02 	vpop	{d8}
 801c4d6:	bd08      	pop	{r3, pc}
		mcpwm_set_brake_current(DIR_MULT * current);
 801c4d8:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 801c4dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c4e6:	bf08      	it	eq
 801c4e8:	eeb0 0a67 	vmoveq.f32	s0, s15
 801c4ec:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 801c4f0:	ecbd 8b02 	vpop	{d8}
 801c4f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_set_brake_current(DIR_MULT * current);
 801c4f8:	f7f7 baa2 	b.w	8013a40 <mcpwm_set_brake_current>
 801c4fc:	2000c06c 	.word	0x2000c06c

0801c500 <mc_interface_set_brake_current_rel>:
	mc_interface_set_brake_current(val * m_conf.lo_current_motor_max_now);
 801c500:	4b03      	ldr	r3, [pc, #12]	; (801c510 <mc_interface_set_brake_current_rel+0x10>)
 801c502:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 801c506:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c50a:	f7ff bfc1 	b.w	801c490 <mc_interface_set_brake_current>
 801c50e:	bf00      	nop
 801c510:	2000c06c 	.word	0x2000c06c
	...

0801c520 <mc_interface_set_handbrake>:
void mc_interface_set_handbrake(float current) {
 801c520:	b508      	push	{r3, lr}
 801c522:	ed2d 8b02 	vpush	{d8}
 801c526:	eeb0 8a40 	vmov.f32	s16, s0
	if (mc_interface_try_input()) {
 801c52a:	f7ff fe61 	bl	801c1f0 <mc_interface_try_input>
 801c52e:	b970      	cbnz	r0, 801c54e <mc_interface_set_handbrake+0x2e>
	switch (m_conf.motor_type) {
 801c530:	4b0c      	ldr	r3, [pc, #48]	; (801c564 <mc_interface_set_handbrake+0x44>)
 801c532:	789b      	ldrb	r3, [r3, #2]
 801c534:	b2db      	uxtb	r3, r3
 801c536:	2b01      	cmp	r3, #1
 801c538:	d90c      	bls.n	801c554 <mc_interface_set_handbrake+0x34>
 801c53a:	2b02      	cmp	r3, #2
 801c53c:	d107      	bne.n	801c54e <mc_interface_set_handbrake+0x2e>
		mcpwm_foc_set_handbrake(current);
 801c53e:	eeb0 0a48 	vmov.f32	s0, s16
}
 801c542:	ecbd 8b02 	vpop	{d8}
 801c546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_foc_set_handbrake(current);
 801c54a:	f001 bbd1 	b.w	801dcf0 <mcpwm_foc_set_handbrake>
}
 801c54e:	ecbd 8b02 	vpop	{d8}
 801c552:	bd08      	pop	{r3, pc}
		mcpwm_set_brake_current(current);
 801c554:	eeb0 0a48 	vmov.f32	s0, s16
}
 801c558:	ecbd 8b02 	vpop	{d8}
 801c55c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mcpwm_set_brake_current(current);
 801c560:	f7f7 ba6e 	b.w	8013a40 <mcpwm_set_brake_current>
 801c564:	2000c06c 	.word	0x2000c06c
	...

0801c570 <mc_interface_mc_timer_isr>:
void mc_interface_mc_timer_isr(void) {
 801c570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c574:	ed2d 8b04 	vpush	{d8-d9}
	const float input_voltage = GET_INPUT_VOLTAGE();
 801c578:	4ec3      	ldr	r6, [pc, #780]	; (801c888 <mc_interface_mc_timer_isr+0x318>)
	if (input_voltage < m_conf.l_min_vin ||
 801c57a:	4cc4      	ldr	r4, [pc, #784]	; (801c88c <mc_interface_mc_timer_isr+0x31c>)
void mc_interface_mc_timer_isr(void) {
 801c57c:	b083      	sub	sp, #12
	ledpwm_update_pwm(); // LED PWM Driver update
 801c57e:	f7f5 ff5f 	bl	8012440 <ledpwm_update_pwm>
	const float input_voltage = GET_INPUT_VOLTAGE();
 801c582:	8a33      	ldrh	r3, [r6, #16]
 801c584:	eddf 6ac2 	vldr	s13, [pc, #776]	; 801c890 <mc_interface_mc_timer_isr+0x320>
 801c588:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 801c894 <mc_interface_mc_timer_isr+0x324>
	if (input_voltage < m_conf.l_min_vin ||
 801c58c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
	const float input_voltage = GET_INPUT_VOLTAGE();
 801c590:	b29b      	uxth	r3, r3
 801c592:	ee08 3a10 	vmov	s16, r3
 801c596:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 801c59a:	ee28 8a26 	vmul.f32	s16, s16, s13
 801c59e:	ee28 8a07 	vmul.f32	s16, s16, s14
	if (input_voltage < m_conf.l_min_vin ||
 801c5a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5aa:	d407      	bmi.n	801c5bc <mc_interface_mc_timer_isr+0x4c>
			input_voltage > m_conf.l_max_vin) {
 801c5ac:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
	if (input_voltage < m_conf.l_min_vin ||
 801c5b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5b8:	f340 81dd 	ble.w	801c976 <mc_interface_mc_timer_isr+0x406>
		wrong_voltage_iterations++;
 801c5bc:	4ab6      	ldr	r2, [pc, #728]	; (801c898 <mc_interface_mc_timer_isr+0x328>)
 801c5be:	6813      	ldr	r3, [r2, #0]
 801c5c0:	3301      	adds	r3, #1
		if ((wrong_voltage_iterations >= 8)) {
 801c5c2:	2b07      	cmp	r3, #7
		wrong_voltage_iterations++;
 801c5c4:	6013      	str	r3, [r2, #0]
		if ((wrong_voltage_iterations >= 8)) {
 801c5c6:	f300 81bd 	bgt.w	801c944 <mc_interface_mc_timer_isr+0x3d4>
	if (mc_interface_get_state() == MC_STATE_RUNNING) {
 801c5ca:	f7fe ff81 	bl	801b4d0 <mc_interface_get_state>
 801c5ce:	2802      	cmp	r0, #2
 801c5d0:	f000 81cc 	beq.w	801c96c <mc_interface_mc_timer_isr+0x3fc>
		m_cycles_running = 0;
 801c5d4:	4bb1      	ldr	r3, [pc, #708]	; (801c89c <mc_interface_mc_timer_isr+0x32c>)
 801c5d6:	2200      	movs	r2, #0
 801c5d8:	601a      	str	r2, [r3, #0]
	if (pwn_done_func) {
 801c5da:	4bb1      	ldr	r3, [pc, #708]	; (801c8a0 <mc_interface_mc_timer_isr+0x330>)
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	b103      	cbz	r3, 801c5e2 <mc_interface_mc_timer_isr+0x72>
		pwn_done_func();
 801c5e0:	4798      	blx	r3
	const float current = mc_interface_get_tot_current_filtered();
 801c5e2:	f7ff f845 	bl	801b670 <mc_interface_get_tot_current_filtered>
 801c5e6:	eef0 8a40 	vmov.f32	s17, s0
	const float current_in = mc_interface_get_tot_current_in_filtered();
 801c5ea:	f7ff f8a9 	bl	801b740 <mc_interface_get_tot_current_in_filtered>
	m_motor_current_sum += current;
 801c5ee:	48ad      	ldr	r0, [pc, #692]	; (801c8a4 <mc_interface_mc_timer_isr+0x334>)
	m_input_current_sum += current_in;
 801c5f0:	49ad      	ldr	r1, [pc, #692]	; (801c8a8 <mc_interface_mc_timer_isr+0x338>)
	m_motor_current_sum += current;
 801c5f2:	edd0 7a00 	vldr	s15, [r0]
	m_motor_current_iterations++;
 801c5f6:	4aad      	ldr	r2, [pc, #692]	; (801c8ac <mc_interface_mc_timer_isr+0x33c>)
	m_input_current_iterations++;
 801c5f8:	4bad      	ldr	r3, [pc, #692]	; (801c8b0 <mc_interface_mc_timer_isr+0x340>)
	m_motor_current_sum += current;
 801c5fa:	ee78 7aa7 	vadd.f32	s15, s17, s15
	m_motor_current_iterations++;
 801c5fe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	m_motor_current_sum += current;
 801c602:	edc0 7a00 	vstr	s15, [r0]
	m_input_current_sum += current_in;
 801c606:	edd1 7a00 	vldr	s15, [r1]
 801c60a:	ee70 7a27 	vadd.f32	s15, s0, s15
	const float current_in = mc_interface_get_tot_current_in_filtered();
 801c60e:	eef0 9a40 	vmov.f32	s19, s0
	m_input_current_sum += current_in;
 801c612:	edc1 7a00 	vstr	s15, [r1]
	m_motor_current_iterations++;
 801c616:	edd2 7a00 	vldr	s15, [r2]
 801c61a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801c61e:	edc2 7a00 	vstr	s15, [r2]
	m_input_current_iterations++;
 801c622:	edd3 7a00 	vldr	s15, [r3]
 801c626:	ee77 7a89 	vadd.f32	s15, s15, s18
 801c62a:	edc3 7a00 	vstr	s15, [r3]
	m_motor_id_sum += mcpwm_foc_get_id();
 801c62e:	f001 fc57 	bl	801dee0 <mcpwm_foc_get_id>
 801c632:	4ba0      	ldr	r3, [pc, #640]	; (801c8b4 <mc_interface_mc_timer_isr+0x344>)
 801c634:	edd3 7a00 	vldr	s15, [r3]
 801c638:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c63c:	ed83 0a00 	vstr	s0, [r3]
	m_motor_iq_sum += mcpwm_foc_get_iq();
 801c640:	f001 fc56 	bl	801def0 <mcpwm_foc_get_iq>
 801c644:	499c      	ldr	r1, [pc, #624]	; (801c8b8 <mc_interface_mc_timer_isr+0x348>)
	m_motor_id_iterations++;
 801c646:	4a9d      	ldr	r2, [pc, #628]	; (801c8bc <mc_interface_mc_timer_isr+0x34c>)
	m_motor_iq_sum += mcpwm_foc_get_iq();
 801c648:	edd1 7a00 	vldr	s15, [r1]
	m_motor_iq_iterations++;
 801c64c:	4b9c      	ldr	r3, [pc, #624]	; (801c8c0 <mc_interface_mc_timer_isr+0x350>)
	m_motor_iq_sum += mcpwm_foc_get_iq();
 801c64e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c652:	ed81 0a00 	vstr	s0, [r1]
	m_motor_id_iterations++;
 801c656:	edd2 7a00 	vldr	s15, [r2]
 801c65a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801c65e:	edc2 7a00 	vstr	s15, [r2]
	m_motor_iq_iterations++;
 801c662:	edd3 7a00 	vldr	s15, [r3]
 801c666:	ee37 9a89 	vadd.f32	s18, s15, s18
 801c66a:	ed83 9a00 	vstr	s18, [r3]
	float abs_current = mc_interface_get_tot_current();
 801c66e:	f7fe ffe7 	bl	801b640 <mc_interface_get_tot_current>
	if (m_conf.motor_type == MOTOR_TYPE_FOC) {
 801c672:	78a3      	ldrb	r3, [r4, #2]
 801c674:	2b02      	cmp	r3, #2
	float abs_current = mc_interface_get_tot_current();
 801c676:	eeb0 9a40 	vmov.f32	s18, s0
	if (m_conf.motor_type == MOTOR_TYPE_FOC) {
 801c67a:	f000 81fb 	beq.w	801ca74 <mc_interface_mc_timer_isr+0x504>
	float abs_current_filtered = current;
 801c67e:	eeb0 0a68 	vmov.f32	s0, s17
	if (m_conf.l_slow_abs_current) {
 801c682:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
		if (fabsf(abs_current_filtered) > m_conf.l_abs_current_max) {
 801c686:	edd4 7a05 	vldr	s15, [r4, #20]
	if (m_conf.l_slow_abs_current) {
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	f000 814c 	beq.w	801c928 <mc_interface_mc_timer_isr+0x3b8>
		if (fabsf(abs_current_filtered) > m_conf.l_abs_current_max) {
 801c690:	eeb0 0ac0 	vabs.f32	s0, s0
 801c694:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69c:	dd07      	ble.n	801c6ae <mc_interface_mc_timer_isr+0x13e>
	if (m_fault_now == fault) {
 801c69e:	4b89      	ldr	r3, [pc, #548]	; (801c8c4 <mc_interface_mc_timer_isr+0x354>)
 801c6a0:	781b      	ldrb	r3, [r3, #0]
 801c6a2:	2b04      	cmp	r3, #4
 801c6a4:	f000 81ce 	beq.w	801ca44 <mc_interface_mc_timer_isr+0x4d4>
 801c6a8:	2004      	movs	r0, #4
 801c6aa:	f7ff f891 	bl	801b7d0 <mc_interface_fault_stop.part.3>
	if (IS_DRV_FAULT()) {
 801c6ae:	4b86      	ldr	r3, [pc, #536]	; (801c8c8 <mc_interface_mc_timer_isr+0x358>)
 801c6b0:	691b      	ldr	r3, [r3, #16]
 801c6b2:	04db      	lsls	r3, r3, #19
 801c6b4:	d408      	bmi.n	801c6c8 <mc_interface_mc_timer_isr+0x158>
	if (m_fault_now == fault) {
 801c6b6:	4b83      	ldr	r3, [pc, #524]	; (801c8c4 <mc_interface_mc_timer_isr+0x354>)
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	2b03      	cmp	r3, #3
 801c6bc:	f040 81cb 	bne.w	801ca56 <mc_interface_mc_timer_isr+0x4e6>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801c6c0:	4b82      	ldr	r3, [pc, #520]	; (801c8cc <mc_interface_mc_timer_isr+0x35c>)
 801c6c2:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801c6c6:	601a      	str	r2, [r3, #0]
	const float f_samp = mc_interface_get_sampling_frequency_now();
 801c6c8:	f7fe ff3a 	bl	801b540 <mc_interface_get_sampling_frequency_now>
	if (fabsf(current) > 1.0) {
 801c6cc:	eef0 8ae8 	vabs.f32	s17, s17
 801c6d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c6d4:	eef4 8ae6 	vcmpe.f32	s17, s13
 801c6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	const float f_samp = mc_interface_get_sampling_frequency_now();
 801c6dc:	eeb0 9a40 	vmov.f32	s18, s0
	if (fabsf(current) > 1.0) {
 801c6e0:	dd2f      	ble.n	801c742 <mc_interface_mc_timer_isr+0x1d2>
		curr_diff_samples += 1.0 / f_samp;
 801c6e2:	ee86 7a80 	vdiv.f32	s14, s13, s0
 801c6e6:	4a7a      	ldr	r2, [pc, #488]	; (801c8d0 <mc_interface_mc_timer_isr+0x360>)
		curr_diff_sum += current_in / f_samp;
 801c6e8:	4b7a      	ldr	r3, [pc, #488]	; (801c8d4 <mc_interface_mc_timer_isr+0x364>)
 801c6ea:	eec9 7a80 	vdiv.f32	s15, s19, s0
		curr_diff_samples += 1.0 / f_samp;
 801c6ee:	ed92 6a00 	vldr	s12, [r2]
		curr_diff_sum += current_in / f_samp;
 801c6f2:	edd3 5a00 	vldr	s11, [r3]
		if (curr_diff_samples >= 0.01) {
 801c6f6:	eddf 6a78 	vldr	s13, [pc, #480]	; 801c8d8 <mc_interface_mc_timer_isr+0x368>
		curr_diff_samples += 1.0 / f_samp;
 801c6fa:	ee37 7a06 	vadd.f32	s14, s14, s12
		curr_diff_sum += current_in / f_samp;
 801c6fe:	ee77 7aa5 	vadd.f32	s15, s15, s11
		if (curr_diff_samples >= 0.01) {
 801c702:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		curr_diff_sum += current_in / f_samp;
 801c70a:	edc3 7a00 	vstr	s15, [r3]
		curr_diff_samples += 1.0 / f_samp;
 801c70e:	ed82 7a00 	vstr	s14, [r2]
		if (curr_diff_samples >= 0.01) {
 801c712:	db16      	blt.n	801c742 <mc_interface_mc_timer_isr+0x1d2>
			if (curr_diff_sum > 0.0) {
 801c714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c71c:	f340 81b1 	ble.w	801ca82 <mc_interface_mc_timer_isr+0x512>
				m_amp_seconds += curr_diff_sum;
 801c720:	486e      	ldr	r0, [pc, #440]	; (801c8dc <mc_interface_mc_timer_isr+0x36c>)
				m_watt_seconds += curr_diff_sum * input_voltage;
 801c722:	496f      	ldr	r1, [pc, #444]	; (801c8e0 <mc_interface_mc_timer_isr+0x370>)
				m_amp_seconds += curr_diff_sum;
 801c724:	ed90 7a00 	vldr	s14, [r0]
 801c728:	ee37 7a87 	vadd.f32	s14, s15, s14
 801c72c:	ed80 7a00 	vstr	s14, [r0]
				m_watt_seconds += curr_diff_sum * input_voltage;
 801c730:	ed91 7a00 	vldr	s14, [r1]
 801c734:	eea8 7a27 	vfma.f32	s14, s16, s15
 801c738:	ed81 7a00 	vstr	s14, [r1]
			curr_diff_samples = 0.0;
 801c73c:	2100      	movs	r1, #0
 801c73e:	6011      	str	r1, [r2, #0]
			curr_diff_sum = 0.0;
 801c740:	6019      	str	r1, [r3, #0]
	switch (m_sample_mode) {
 801c742:	4f68      	ldr	r7, [pc, #416]	; (801c8e4 <mc_interface_mc_timer_isr+0x374>)
 801c744:	783b      	ldrb	r3, [r7, #0]
 801c746:	3b01      	subs	r3, #1
 801c748:	2b05      	cmp	r3, #5
 801c74a:	f200 8097 	bhi.w	801c87c <mc_interface_mc_timer_isr+0x30c>
 801c74e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c752:	0006      	.short	0x0006
 801c754:	012b0151 	.word	0x012b0151
 801c758:	012b0116 	.word	0x012b0116
 801c75c:	0116      	.short	0x0116
		if (m_sample_now == m_sample_len) {
 801c75e:	4d62      	ldr	r5, [pc, #392]	; (801c8e8 <mc_interface_mc_timer_isr+0x378>)
 801c760:	4b62      	ldr	r3, [pc, #392]	; (801c8ec <mc_interface_mc_timer_isr+0x37c>)
 801c762:	682a      	ldr	r2, [r5, #0]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	429a      	cmp	r2, r3
 801c768:	f000 823b 	beq.w	801cbe2 <mc_interface_mc_timer_isr+0x672>
		a++;
 801c76c:	4a60      	ldr	r2, [pc, #384]	; (801c8f0 <mc_interface_mc_timer_isr+0x380>)
		if (a >= m_sample_int) {
 801c76e:	4961      	ldr	r1, [pc, #388]	; (801c8f4 <mc_interface_mc_timer_isr+0x384>)
		a++;
 801c770:	6813      	ldr	r3, [r2, #0]
		if (a >= m_sample_int) {
 801c772:	6809      	ldr	r1, [r1, #0]
		a++;
 801c774:	3301      	adds	r3, #1
		if (a >= m_sample_int) {
 801c776:	428b      	cmp	r3, r1
		a++;
 801c778:	6013      	str	r3, [r2, #0]
		if (a >= m_sample_int) {
 801c77a:	db7f      	blt.n	801c87c <mc_interface_mc_timer_isr+0x30c>
			if (m_sample_now >= ADC_SAMPLE_MAX_LEN) {
 801c77c:	6829      	ldr	r1, [r5, #0]
			a = 0;
 801c77e:	2300      	movs	r3, #0
			if (m_sample_now >= ADC_SAMPLE_MAX_LEN) {
 801c780:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
				m_sample_now = 0;
 801c784:	bfa8      	it	ge
 801c786:	602b      	strge	r3, [r5, #0]
			a = 0;
 801c788:	6013      	str	r3, [r2, #0]
			if (m_conf.motor_type == MOTOR_TYPE_FOC) {
 801c78a:	78a3      	ldrb	r3, [r4, #2]
 801c78c:	2b02      	cmp	r3, #2
 801c78e:	f000 8203 	beq.w	801cb98 <mc_interface_mc_timer_isr+0x628>
				zero = mcpwm_vzero;
 801c792:	4b59      	ldr	r3, [pc, #356]	; (801c8f8 <mc_interface_mc_timer_isr+0x388>)
				m_phase_samples[m_sample_now] = 0;
 801c794:	4f59      	ldr	r7, [pc, #356]	; (801c8fc <mc_interface_mc_timer_isr+0x38c>)
				zero = mcpwm_vzero;
 801c796:	681c      	ldr	r4, [r3, #0]
				m_phase_samples[m_sample_now] = 0;
 801c798:	682b      	ldr	r3, [r5, #0]
 801c79a:	443b      	add	r3, r7
 801c79c:	2200      	movs	r2, #0
				zero = mcpwm_vzero;
 801c79e:	b224      	sxth	r4, r4
				m_phase_samples[m_sample_now] = 0;
 801c7a0:	f883 2e08 	strb.w	r2, [r3, #3592]	; 0xe08
			if (mc_interface_get_state() == MC_STATE_DETECTING) {
 801c7a4:	f7fe fe94 	bl	801b4d0 <mc_interface_get_state>
 801c7a8:	2801      	cmp	r0, #1
 801c7aa:	f000 81a2 	beq.w	801caf2 <mc_interface_mc_timer_isr+0x582>
				m_curr0_samples[m_sample_now] = ADC_curr_norm_value[0];
 801c7ae:	4954      	ldr	r1, [pc, #336]	; (801c900 <mc_interface_mc_timer_isr+0x390>)
 801c7b0:	f8d5 e000 	ldr.w	lr, [r5]
 801c7b4:	680a      	ldr	r2, [r1, #0]
 801c7b6:	4b53      	ldr	r3, [pc, #332]	; (801c904 <mc_interface_mc_timer_isr+0x394>)
				m_ph1_samples[m_sample_now] = ADC_V_L1 - zero;
 801c7b8:	4853      	ldr	r0, [pc, #332]	; (801c908 <mc_interface_mc_timer_isr+0x398>)
				m_curr0_samples[m_sample_now] = ADC_curr_norm_value[0];
 801c7ba:	b212      	sxth	r2, r2
 801c7bc:	f823 201e 	strh.w	r2, [r3, lr, lsl #1]
				m_curr1_samples[m_sample_now] = ADC_curr_norm_value[1];
 801c7c0:	f8d5 c000 	ldr.w	ip, [r5]
 801c7c4:	684a      	ldr	r2, [r1, #4]
				m_ph2_samples[m_sample_now] = ADC_V_L2 - zero;
 801c7c6:	f8df e15c 	ldr.w	lr, [pc, #348]	; 801c924 <mc_interface_mc_timer_isr+0x3b4>
				m_ph3_samples[m_sample_now] = ADC_V_L3 - zero;
 801c7ca:	4950      	ldr	r1, [pc, #320]	; (801c90c <mc_interface_mc_timer_isr+0x39c>)
				m_curr1_samples[m_sample_now] = ADC_curr_norm_value[1];
 801c7cc:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 801c7d0:	b212      	sxth	r2, r2
 801c7d2:	f8a3 2fa0 	strh.w	r2, [r3, #4000]	; 0xfa0
				m_ph1_samples[m_sample_now] = ADC_V_L1 - zero;
 801c7d6:	682b      	ldr	r3, [r5, #0]
 801c7d8:	88b2      	ldrh	r2, [r6, #4]
 801c7da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c7de:	b2a0      	uxth	r0, r4
 801c7e0:	1a12      	subs	r2, r2, r0
 801c7e2:	b212      	sxth	r2, r2
 801c7e4:	f8a3 2e48 	strh.w	r2, [r3, #3656]	; 0xe48
				m_ph2_samples[m_sample_now] = ADC_V_L2 - zero;
 801c7e8:	682b      	ldr	r3, [r5, #0]
 801c7ea:	8872      	ldrh	r2, [r6, #2]
 801c7ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801c7f0:	1a12      	subs	r2, r2, r0
 801c7f2:	b212      	sxth	r2, r2
 801c7f4:	f8a3 2cf0 	strh.w	r2, [r3, #3312]	; 0xcf0
				m_ph3_samples[m_sample_now] = ADC_V_L3 - zero;
 801c7f8:	682a      	ldr	r2, [r5, #0]
 801c7fa:	8833      	ldrh	r3, [r6, #0]
 801c7fc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c800:	1a1b      	subs	r3, r3, r0
 801c802:	b21b      	sxth	r3, r3
 801c804:	f8a2 3b98 	strh.w	r3, [r2, #2968]	; 0xb98
			m_vzero_samples[m_sample_now] = zero;
 801c808:	682a      	ldr	r2, [r5, #0]
 801c80a:	4b41      	ldr	r3, [pc, #260]	; (801c910 <mc_interface_mc_timer_isr+0x3a0>)
 801c80c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801c810:	f8a3 4a40 	strh.w	r4, [r3, #2624]	; 0xa40
			m_curr_fir_samples[m_sample_now] = (int16_t)(mc_interface_get_tot_current() * (8.0 / FAC_CURRENT));
 801c814:	682c      	ldr	r4, [r5, #0]
 801c816:	f7fe ff13 	bl	801b640 <mc_interface_get_tot_current>
			m_f_sw_samples[m_sample_now] = (int16_t)(f_samp / 10.0);
 801c81a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801c81e:	ee89 7a27 	vdiv.f32	s14, s18, s15
			m_curr_fir_samples[m_sample_now] = (int16_t)(mc_interface_get_tot_current() * (8.0 / FAC_CURRENT));
 801c822:	493c      	ldr	r1, [pc, #240]	; (801c914 <mc_interface_mc_timer_isr+0x3a4>)
			m_f_sw_samples[m_sample_now] = (int16_t)(f_samp / 10.0);
 801c824:	4b3c      	ldr	r3, [pc, #240]	; (801c918 <mc_interface_mc_timer_isr+0x3a8>)
			m_curr_fir_samples[m_sample_now] = (int16_t)(mc_interface_get_tot_current() * (8.0 / FAC_CURRENT));
 801c826:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 801c82a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 801c91c <mc_interface_mc_timer_isr+0x3ac>
 801c82e:	ee20 0a27 	vmul.f32	s0, s0, s15
			m_f_sw_samples[m_sample_now] = (int16_t)(f_samp / 10.0);
 801c832:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801c836:	edcd 7a01 	vstr	s15, [sp, #4]
			m_curr_fir_samples[m_sample_now] = (int16_t)(mc_interface_get_tot_current() * (8.0 / FAC_CURRENT));
 801c83a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			m_f_sw_samples[m_sample_now] = (int16_t)(f_samp / 10.0);
 801c83e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
			m_curr_fir_samples[m_sample_now] = (int16_t)(mc_interface_get_tot_current() * (8.0 / FAC_CURRENT));
 801c842:	edcd 7a00 	vstr	s15, [sp]
 801c846:	f9bd 0000 	ldrsh.w	r0, [sp]
 801c84a:	f8a1 08e8 	strh.w	r0, [r1, #2280]	; 0x8e8
			m_f_sw_samples[m_sample_now] = (int16_t)(f_samp / 10.0);
 801c84e:	6829      	ldr	r1, [r5, #0]
 801c850:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801c854:	f8a3 2790 	strh.w	r2, [r3, #1936]	; 0x790
			m_status_samples[m_sample_now] = mcpwm_get_comm_step() | (mcpwm_read_hall_phase() << 3);
 801c858:	682e      	ldr	r6, [r5, #0]
 801c85a:	f7f7 f961 	bl	8013b20 <mcpwm_get_comm_step>
 801c85e:	4604      	mov	r4, r0
 801c860:	f7f7 fdae 	bl	80143c0 <mcpwm_read_hall_phase>
 801c864:	4437      	add	r7, r6
 801c866:	ea44 00c0 	orr.w	r0, r4, r0, lsl #3
 801c86a:	b2c0      	uxtb	r0, r0
 801c86c:	f887 0638 	strb.w	r0, [r7, #1592]	; 0x638
			m_sample_now++;
 801c870:	682b      	ldr	r3, [r5, #0]
	return m_last_adc_duration_sample;
 801c872:	4a2b      	ldr	r2, [pc, #172]	; (801c920 <mc_interface_mc_timer_isr+0x3b0>)
			m_sample_now++;
 801c874:	3301      	adds	r3, #1
 801c876:	602b      	str	r3, [r5, #0]
	return m_last_adc_duration_sample;
 801c878:	6813      	ldr	r3, [r2, #0]
			m_last_adc_duration_sample = mc_interface_get_last_sample_adc_isr_duration();
 801c87a:	6013      	str	r3, [r2, #0]
}
 801c87c:	b003      	add	sp, #12
 801c87e:	ecbd 8b04 	vpop	{d8-d9}
 801c882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c886:	bf00      	nop
 801c888:	2000c034 	.word	0x2000c034
 801c88c:	2000c06c 	.word	0x2000c06c
 801c890:	3a534067 	.word	0x3a534067
 801c894:	4195d174 	.word	0x4195d174
 801c898:	2000cd78 	.word	0x2000cd78
 801c89c:	2000c1e0 	.word	0x2000c1e0
 801c8a0:	2000c23c 	.word	0x2000c23c
 801c8a4:	2000c200 	.word	0x2000c200
 801c8a8:	2000c1f0 	.word	0x2000c1f0
 801c8ac:	2000c1fc 	.word	0x2000c1fc
 801c8b0:	2000c1ec 	.word	0x2000c1ec
 801c8b4:	2000c208 	.word	0x2000c208
 801c8b8:	2000c210 	.word	0x2000c210
 801c8bc:	2000c204 	.word	0x2000c204
 801c8c0:	2000c20c 	.word	0x2000c20c
 801c8c4:	2000c1e4 	.word	0x2000c1e4
 801c8c8:	40020800 	.word	0x40020800
 801c8cc:	2000c1e8 	.word	0x2000c1e8
 801c8d0:	2000c05c 	.word	0x2000c05c
 801c8d4:	2000c060 	.word	0x2000c060
 801c8d8:	3c23d70a 	.word	0x3c23d70a
 801c8dc:	2000c064 	.word	0x2000c064
 801c8e0:	2000c234 	.word	0x2000c234
 801c8e4:	2000c220 	.word	0x2000c220
 801c8e8:	2000c224 	.word	0x2000c224
 801c8ec:	2000c21c 	.word	0x2000c21c
 801c8f0:	2000c058 	.word	0x2000c058
 801c8f4:	2000c218 	.word	0x2000c218
 801c8f8:	20005400 	.word	0x20005400
 801c8fc:	100076c8 	.word	0x100076c8
 801c900:	2000c04c 	.word	0x2000c04c
 801c904:	10000000 	.word	0x10000000
 801c908:	100010f8 	.word	0x100010f8
 801c90c:	100032e8 	.word	0x100032e8
 801c910:	100043e0 	.word	0x100043e0
 801c914:	100054d8 	.word	0x100054d8
 801c918:	100065d0 	.word	0x100065d0
 801c91c:	42c68ba4 	.word	0x42c68ba4
 801c920:	2000c1f4 	.word	0x2000c1f4
 801c924:	100021f0 	.word	0x100021f0
		if (fabsf(abs_current) > m_conf.l_abs_current_max) {
 801c928:	eeb0 9ac9 	vabs.f32	s18, s18
 801c92c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801c930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c934:	f77f aebb 	ble.w	801c6ae <mc_interface_mc_timer_isr+0x13e>
	if (m_fault_now == fault) {
 801c938:	4bc5      	ldr	r3, [pc, #788]	; (801cc50 <mc_interface_mc_timer_isr+0x6e0>)
 801c93a:	781b      	ldrb	r3, [r3, #0]
 801c93c:	2b04      	cmp	r3, #4
 801c93e:	f47f aeb3 	bne.w	801c6a8 <mc_interface_mc_timer_isr+0x138>
 801c942:	e07f      	b.n	801ca44 <mc_interface_mc_timer_isr+0x4d4>
			mc_interface_fault_stop(input_voltage < m_conf.l_min_vin ?
 801c944:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
	if (m_fault_now == fault) {
 801c948:	4bc1      	ldr	r3, [pc, #772]	; (801cc50 <mc_interface_mc_timer_isr+0x6e0>)
			mc_interface_fault_stop(input_voltage < m_conf.l_min_vin ?
 801c94a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (m_fault_now == fault) {
 801c952:	781b      	ldrb	r3, [r3, #0]
			mc_interface_fault_stop(input_voltage < m_conf.l_min_vin ?
 801c954:	bf4c      	ite	mi
 801c956:	2002      	movmi	r0, #2
 801c958:	2001      	movpl	r0, #1
	if (m_fault_now == fault) {
 801c95a:	4283      	cmp	r3, r0
 801c95c:	d07f      	beq.n	801ca5e <mc_interface_mc_timer_isr+0x4ee>
 801c95e:	f7fe ff37 	bl	801b7d0 <mc_interface_fault_stop.part.3>
	if (mc_interface_get_state() == MC_STATE_RUNNING) {
 801c962:	f7fe fdb5 	bl	801b4d0 <mc_interface_get_state>
 801c966:	2802      	cmp	r0, #2
 801c968:	f47f ae34 	bne.w	801c5d4 <mc_interface_mc_timer_isr+0x64>
		m_cycles_running++;
 801c96c:	4ab9      	ldr	r2, [pc, #740]	; (801cc54 <mc_interface_mc_timer_isr+0x6e4>)
 801c96e:	6813      	ldr	r3, [r2, #0]
 801c970:	3301      	adds	r3, #1
 801c972:	6013      	str	r3, [r2, #0]
 801c974:	e631      	b.n	801c5da <mc_interface_mc_timer_isr+0x6a>
		wrong_voltage_iterations = 0;
 801c976:	4bb8      	ldr	r3, [pc, #736]	; (801cc58 <mc_interface_mc_timer_isr+0x6e8>)
 801c978:	2200      	movs	r2, #0
 801c97a:	601a      	str	r2, [r3, #0]
 801c97c:	e625      	b.n	801c5ca <mc_interface_mc_timer_isr+0x5a>
		if (m_sample_trigger >= 0) {
 801c97e:	f8df 8328 	ldr.w	r8, [pc, #808]	; 801cca8 <mc_interface_mc_timer_isr+0x738>
 801c982:	f8d8 3000 	ldr.w	r3, [r8]
 801c986:	2b00      	cmp	r3, #0
 801c988:	db71      	blt.n	801ca6e <mc_interface_mc_timer_isr+0x4fe>
			sample_last = m_sample_trigger - m_sample_len;
 801c98a:	4ab4      	ldr	r2, [pc, #720]	; (801cc5c <mc_interface_mc_timer_isr+0x6ec>)
 801c98c:	f8d8 3000 	ldr.w	r3, [r8]
 801c990:	6812      	ldr	r2, [r2, #0]
			if (sample_last < 0) {
 801c992:	1a9b      	subs	r3, r3, r2
 801c994:	f100 814f 	bmi.w	801cc36 <mc_interface_mc_timer_isr+0x6c6>
		if (m_sample_now == sample_last) {
 801c998:	4db1      	ldr	r5, [pc, #708]	; (801cc60 <mc_interface_mc_timer_isr+0x6f0>)
 801c99a:	682a      	ldr	r2, [r5, #0]
 801c99c:	4293      	cmp	r3, r2
 801c99e:	d07f      	beq.n	801caa0 <mc_interface_mc_timer_isr+0x530>
		if (m_fault_now != FAULT_CODE_NONE && m_sample_trigger < 0) {
 801c9a0:	4bab      	ldr	r3, [pc, #684]	; (801cc50 <mc_interface_mc_timer_isr+0x6e0>)
 801c9a2:	781b      	ldrb	r3, [r3, #0]
 801c9a4:	b9bb      	cbnz	r3, 801c9d6 <mc_interface_mc_timer_isr+0x466>
 801c9a6:	e6e1      	b.n	801c76c <mc_interface_mc_timer_isr+0x1fc>
		if (m_sample_trigger >= 0) {
 801c9a8:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 801cca8 <mc_interface_mc_timer_isr+0x738>
 801c9ac:	f8d8 3000 	ldr.w	r3, [r8]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	db59      	blt.n	801ca68 <mc_interface_mc_timer_isr+0x4f8>
			sample_last = m_sample_trigger - m_sample_len;
 801c9b4:	4aa9      	ldr	r2, [pc, #676]	; (801cc5c <mc_interface_mc_timer_isr+0x6ec>)
 801c9b6:	f8d8 3000 	ldr.w	r3, [r8]
 801c9ba:	6812      	ldr	r2, [r2, #0]
			if (sample_last < 0) {
 801c9bc:	1a9b      	subs	r3, r3, r2
 801c9be:	f100 8137 	bmi.w	801cc30 <mc_interface_mc_timer_isr+0x6c0>
		if (m_sample_now == sample_last) {
 801c9c2:	4da7      	ldr	r5, [pc, #668]	; (801cc60 <mc_interface_mc_timer_isr+0x6f0>)
 801c9c4:	682a      	ldr	r2, [r5, #0]
 801c9c6:	4293      	cmp	r3, r2
 801c9c8:	f000 8081 	beq.w	801cace <mc_interface_mc_timer_isr+0x55e>
		if (mc_interface_get_state() == MC_STATE_RUNNING && m_sample_trigger < 0) {
 801c9cc:	f7fe fd80 	bl	801b4d0 <mc_interface_get_state>
 801c9d0:	2802      	cmp	r0, #2
 801c9d2:	f47f aecb 	bne.w	801c76c <mc_interface_mc_timer_isr+0x1fc>
		if (m_fault_now != FAULT_CODE_NONE && m_sample_trigger < 0) {
 801c9d6:	f8d8 3000 	ldr.w	r3, [r8]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	f6bf aec6 	bge.w	801c76c <mc_interface_mc_timer_isr+0x1fc>
		sample = true;
 801c9e0:	f04f 0901 	mov.w	r9, #1
			m_sample_trigger = m_sample_now;
 801c9e4:	682b      	ldr	r3, [r5, #0]
 801c9e6:	f8c8 3000 	str.w	r3, [r8]
	if (sample) {
 801c9ea:	f1b9 0f00 	cmp.w	r9, #0
 801c9ee:	f47f aebd 	bne.w	801c76c <mc_interface_mc_timer_isr+0x1fc>
 801c9f2:	e743      	b.n	801c87c <mc_interface_mc_timer_isr+0x30c>
		if (mc_interface_get_state() == MC_STATE_RUNNING || m_sample_now > 0) {
 801c9f4:	f7fe fd6c 	bl	801b4d0 <mc_interface_get_state>
 801c9f8:	2802      	cmp	r0, #2
 801c9fa:	4d99      	ldr	r5, [pc, #612]	; (801cc60 <mc_interface_mc_timer_isr+0x6f0>)
 801c9fc:	d003      	beq.n	801ca06 <mc_interface_mc_timer_isr+0x496>
 801c9fe:	682b      	ldr	r3, [r5, #0]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	f340 811b 	ble.w	801cc3c <mc_interface_mc_timer_isr+0x6cc>
		if (m_sample_now == m_sample_len) {
 801ca06:	4b95      	ldr	r3, [pc, #596]	; (801cc5c <mc_interface_mc_timer_isr+0x6ec>)
 801ca08:	682a      	ldr	r2, [r5, #0]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	429a      	cmp	r2, r3
 801ca0e:	f47f aead 	bne.w	801c76c <mc_interface_mc_timer_isr+0x1fc>
 801ca12:	f04f 0901 	mov.w	r9, #1
			m_sample_mode_last = m_sample_mode;
 801ca16:	783b      	ldrb	r3, [r7, #0]
 801ca18:	4a92      	ldr	r2, [pc, #584]	; (801cc64 <mc_interface_mc_timer_isr+0x6f4>)
 801ca1a:	b2db      	uxtb	r3, r3
			m_sample_mode = DEBUG_SAMPLING_OFF;
 801ca1c:	f04f 0800 	mov.w	r8, #0
			m_sample_mode_last = m_sample_mode;
 801ca20:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 801ca22:	2320      	movs	r3, #32
			m_sample_mode = DEBUG_SAMPLING_OFF;
 801ca24:	f887 8000 	strb.w	r8, [r7]
 801ca28:	f383 8811 	msr	BASEPRI, r3
			chEvtSignalI(sample_send_tp, (eventmask_t) 1);
 801ca2c:	4b8e      	ldr	r3, [pc, #568]	; (801cc68 <mc_interface_mc_timer_isr+0x6f8>)
 801ca2e:	2101      	movs	r1, #1
 801ca30:	6818      	ldr	r0, [r3, #0]
 801ca32:	f7f1 f9f5 	bl	800de20 <chEvtSignalI>
 801ca36:	f388 8811 	msr	BASEPRI, r8
	if (sample) {
 801ca3a:	f1b9 0f00 	cmp.w	r9, #0
 801ca3e:	f47f ae95 	bne.w	801c76c <mc_interface_mc_timer_isr+0x1fc>
 801ca42:	e71b      	b.n	801c87c <mc_interface_mc_timer_isr+0x30c>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801ca44:	4b89      	ldr	r3, [pc, #548]	; (801cc6c <mc_interface_mc_timer_isr+0x6fc>)
 801ca46:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801ca4a:	601a      	str	r2, [r3, #0]
	if (IS_DRV_FAULT()) {
 801ca4c:	4b88      	ldr	r3, [pc, #544]	; (801cc70 <mc_interface_mc_timer_isr+0x700>)
 801ca4e:	691b      	ldr	r3, [r3, #16]
 801ca50:	04da      	lsls	r2, r3, #19
 801ca52:	f53f ae39 	bmi.w	801c6c8 <mc_interface_mc_timer_isr+0x158>
 801ca56:	2003      	movs	r0, #3
 801ca58:	f7fe feba 	bl	801b7d0 <mc_interface_fault_stop.part.3>
 801ca5c:	e634      	b.n	801c6c8 <mc_interface_mc_timer_isr+0x158>
		m_ignore_iterations = m_conf.m_fault_stop_time_ms;
 801ca5e:	4b83      	ldr	r3, [pc, #524]	; (801cc6c <mc_interface_mc_timer_isr+0x6fc>)
 801ca60:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801ca64:	601a      	str	r2, [r3, #0]
 801ca66:	e5b0      	b.n	801c5ca <mc_interface_mc_timer_isr+0x5a>
		int sample_last = -1;
 801ca68:	f04f 33ff 	mov.w	r3, #4294967295
 801ca6c:	e7a9      	b.n	801c9c2 <mc_interface_mc_timer_isr+0x452>
		int sample_last = -1;
 801ca6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca72:	e791      	b.n	801c998 <mc_interface_mc_timer_isr+0x428>
		abs_current = mcpwm_foc_get_abs_motor_current();
 801ca74:	f001 fa14 	bl	801dea0 <mcpwm_foc_get_abs_motor_current>
 801ca78:	eeb0 9a40 	vmov.f32	s18, s0
		abs_current_filtered = mcpwm_foc_get_abs_motor_current_filtered();
 801ca7c:	f001 fa18 	bl	801deb0 <mcpwm_foc_get_abs_motor_current_filtered>
 801ca80:	e5ff      	b.n	801c682 <mc_interface_mc_timer_isr+0x112>
				m_amp_seconds_charged -= curr_diff_sum;
 801ca82:	487c      	ldr	r0, [pc, #496]	; (801cc74 <mc_interface_mc_timer_isr+0x704>)
				m_watt_seconds_charged -= curr_diff_sum * input_voltage;
 801ca84:	497c      	ldr	r1, [pc, #496]	; (801cc78 <mc_interface_mc_timer_isr+0x708>)
				m_amp_seconds_charged -= curr_diff_sum;
 801ca86:	ed90 7a00 	vldr	s14, [r0]
 801ca8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ca8e:	ed80 7a00 	vstr	s14, [r0]
				m_watt_seconds_charged -= curr_diff_sum * input_voltage;
 801ca92:	ed91 7a00 	vldr	s14, [r1]
 801ca96:	eea8 7a67 	vfms.f32	s14, s16, s15
 801ca9a:	ed81 7a00 	vstr	s14, [r1]
 801ca9e:	e64d      	b.n	801c73c <mc_interface_mc_timer_isr+0x1cc>
			m_sample_mode_last = m_sample_mode;
 801caa0:	783b      	ldrb	r3, [r7, #0]
 801caa2:	4a70      	ldr	r2, [pc, #448]	; (801cc64 <mc_interface_mc_timer_isr+0x6f4>)
 801caa4:	b2db      	uxtb	r3, r3
 801caa6:	7013      	strb	r3, [r2, #0]
			if (m_sample_mode == DEBUG_SAMPLING_TRIGGER_FAULT) {
 801caa8:	783b      	ldrb	r3, [r7, #0]
 801caaa:	2b04      	cmp	r3, #4
 801caac:	f000 80b4 	beq.w	801cc18 <mc_interface_mc_timer_isr+0x6a8>
		if (m_fault_now != FAULT_CODE_NONE && m_sample_trigger < 0) {
 801cab0:	4b67      	ldr	r3, [pc, #412]	; (801cc50 <mc_interface_mc_timer_isr+0x6e0>)
 801cab2:	781b      	ldrb	r3, [r3, #0]
			m_sample_mode = DEBUG_SAMPLING_OFF;
 801cab4:	f04f 0900 	mov.w	r9, #0
 801cab8:	f887 9000 	strb.w	r9, [r7]
		if (m_fault_now != FAULT_CODE_NONE && m_sample_trigger < 0) {
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	f43f aedd 	beq.w	801c87c <mc_interface_mc_timer_isr+0x30c>
 801cac2:	f8d8 3000 	ldr.w	r3, [r8]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	f6bf aed8 	bge.w	801c87c <mc_interface_mc_timer_isr+0x30c>
 801cacc:	e78a      	b.n	801c9e4 <mc_interface_mc_timer_isr+0x474>
			m_sample_mode_last = m_sample_mode;
 801cace:	783b      	ldrb	r3, [r7, #0]
 801cad0:	4a64      	ldr	r2, [pc, #400]	; (801cc64 <mc_interface_mc_timer_isr+0x6f4>)
 801cad2:	b2db      	uxtb	r3, r3
 801cad4:	7013      	strb	r3, [r2, #0]
			if (m_sample_mode == DEBUG_SAMPLING_TRIGGER_START) {
 801cad6:	783b      	ldrb	r3, [r7, #0]
 801cad8:	2b03      	cmp	r3, #3
 801cada:	f000 8091 	beq.w	801cc00 <mc_interface_mc_timer_isr+0x690>
			m_sample_mode = DEBUG_SAMPLING_OFF;
 801cade:	f04f 0900 	mov.w	r9, #0
 801cae2:	f887 9000 	strb.w	r9, [r7]
		if (mc_interface_get_state() == MC_STATE_RUNNING && m_sample_trigger < 0) {
 801cae6:	f7fe fcf3 	bl	801b4d0 <mc_interface_get_state>
 801caea:	2802      	cmp	r0, #2
 801caec:	f47f aec6 	bne.w	801c87c <mc_interface_mc_timer_isr+0x30c>
 801caf0:	e7e7      	b.n	801cac2 <mc_interface_mc_timer_isr+0x552>
				m_curr0_samples[m_sample_now] = (int16_t)mcpwm_detect_currents[mcpwm_get_comm_step() - 1];
 801caf2:	f8d5 8000 	ldr.w	r8, [r5]
 801caf6:	4e61      	ldr	r6, [pc, #388]	; (801cc7c <mc_interface_mc_timer_isr+0x70c>)
 801caf8:	f7f7 f812 	bl	8013b20 <mcpwm_get_comm_step>
 801cafc:	4b60      	ldr	r3, [pc, #384]	; (801cc80 <mc_interface_mc_timer_isr+0x710>)
 801cafe:	3801      	subs	r0, #1
 801cb00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801cb04:	edd3 7a00 	vldr	s15, [r3]
 801cb08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb0c:	edcd 7a00 	vstr	s15, [sp]
 801cb10:	f9bd 3000 	ldrsh.w	r3, [sp]
 801cb14:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
				m_curr1_samples[m_sample_now] = (int16_t)mcpwm_detect_currents_diff[mcpwm_get_comm_step() - 1];
 801cb18:	f8d5 8000 	ldr.w	r8, [r5]
 801cb1c:	f7f7 f800 	bl	8013b20 <mcpwm_get_comm_step>
 801cb20:	4b58      	ldr	r3, [pc, #352]	; (801cc84 <mc_interface_mc_timer_isr+0x714>)
				m_ph1_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[0];
 801cb22:	4a59      	ldr	r2, [pc, #356]	; (801cc88 <mc_interface_mc_timer_isr+0x718>)
				m_ph2_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[1];
 801cb24:	4959      	ldr	r1, [pc, #356]	; (801cc8c <mc_interface_mc_timer_isr+0x71c>)
				m_curr1_samples[m_sample_now] = (int16_t)mcpwm_detect_currents_diff[mcpwm_get_comm_step() - 1];
 801cb26:	3801      	subs	r0, #1
 801cb28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801cb2c:	edd3 7a00 	vldr	s15, [r3]
				m_ph1_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[0];
 801cb30:	4857      	ldr	r0, [pc, #348]	; (801cc90 <mc_interface_mc_timer_isr+0x720>)
				m_curr1_samples[m_sample_now] = (int16_t)mcpwm_detect_currents_diff[mcpwm_get_comm_step() - 1];
 801cb32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb36:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 801cb3a:	edcd 7a00 	vstr	s15, [sp]
 801cb3e:	f9bd 3000 	ldrsh.w	r3, [sp]
 801cb42:	f8a6 3fa0 	strh.w	r3, [r6, #4000]	; 0xfa0
				m_ph1_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[0];
 801cb46:	682e      	ldr	r6, [r5, #0]
 801cb48:	edd2 7a00 	vldr	s15, [r2]
				m_ph3_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[2];
 801cb4c:	4b51      	ldr	r3, [pc, #324]	; (801cc94 <mc_interface_mc_timer_isr+0x724>)
				m_ph1_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[0];
 801cb4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb52:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801cb56:	edcd 7a00 	vstr	s15, [sp]
 801cb5a:	f9bd 6000 	ldrsh.w	r6, [sp]
 801cb5e:	f8a0 6e48 	strh.w	r6, [r0, #3656]	; 0xe48
				m_ph2_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[1];
 801cb62:	6828      	ldr	r0, [r5, #0]
 801cb64:	edd2 7a01 	vldr	s15, [r2, #4]
 801cb68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb6c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801cb70:	edcd 7a00 	vstr	s15, [sp]
 801cb74:	f9bd 0000 	ldrsh.w	r0, [sp]
 801cb78:	f8a1 0cf0 	strh.w	r0, [r1, #3312]	; 0xcf0
				m_ph3_samples[m_sample_now] = (int16_t)mcpwm_detect_voltages[2];
 801cb7c:	6829      	ldr	r1, [r5, #0]
 801cb7e:	edd2 7a02 	vldr	s15, [r2, #8]
 801cb82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb86:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801cb8a:	edcd 7a00 	vstr	s15, [sp]
 801cb8e:	f9bd 2000 	ldrsh.w	r2, [sp]
 801cb92:	f8a3 2b98 	strh.w	r2, [r3, #2968]	; 0xb98
 801cb96:	e637      	b.n	801c808 <mc_interface_mc_timer_isr+0x298>
				zero = (ADC_V_L1 + ADC_V_L2 + ADC_V_L3) / 3;
 801cb98:	88b2      	ldrh	r2, [r6, #4]
 801cb9a:	8871      	ldrh	r1, [r6, #2]
 801cb9c:	8833      	ldrh	r3, [r6, #0]
 801cb9e:	4c3e      	ldr	r4, [pc, #248]	; (801cc98 <mc_interface_mc_timer_isr+0x728>)
				m_phase_samples[m_sample_now] = (uint8_t)(mcpwm_foc_get_phase() / 360.0 * 250.0);
 801cba0:	f8d5 8000 	ldr.w	r8, [r5]
 801cba4:	4f3d      	ldr	r7, [pc, #244]	; (801cc9c <mc_interface_mc_timer_isr+0x72c>)
				zero = (ADC_V_L1 + ADC_V_L2 + ADC_V_L3) / 3;
 801cba6:	b289      	uxth	r1, r1
 801cba8:	fa11 f282 	uxtah	r2, r1, r2
 801cbac:	fa12 f383 	uxtah	r3, r2, r3
 801cbb0:	fb84 2403 	smull	r2, r4, r4, r3
 801cbb4:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
				m_phase_samples[m_sample_now] = (uint8_t)(mcpwm_foc_get_phase() / 360.0 * 250.0);
 801cbb8:	f001 f9ca 	bl	801df50 <mcpwm_foc_get_phase>
 801cbbc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801cca0 <mc_interface_mc_timer_isr+0x730>
 801cbc0:	eddf 7a38 	vldr	s15, [pc, #224]	; 801cca4 <mc_interface_mc_timer_isr+0x734>
 801cbc4:	ee80 0a07 	vdiv.f32	s0, s0, s14
 801cbc8:	44b8      	add	r8, r7
				zero = (ADC_V_L1 + ADC_V_L2 + ADC_V_L3) / 3;
 801cbca:	b224      	sxth	r4, r4
				m_phase_samples[m_sample_now] = (uint8_t)(mcpwm_foc_get_phase() / 360.0 * 250.0);
 801cbcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801cbd0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801cbd4:	edcd 7a00 	vstr	s15, [sp]
 801cbd8:	f99d 3000 	ldrsb.w	r3, [sp]
 801cbdc:	f888 3e08 	strb.w	r3, [r8, #3592]	; 0xe08
 801cbe0:	e5e0      	b.n	801c7a4 <mc_interface_mc_timer_isr+0x234>
			m_sample_mode_last = DEBUG_SAMPLING_NOW;
 801cbe2:	4a20      	ldr	r2, [pc, #128]	; (801cc64 <mc_interface_mc_timer_isr+0x6f4>)
			m_sample_mode = DEBUG_SAMPLING_OFF;
 801cbe4:	2400      	movs	r4, #0
			m_sample_mode_last = DEBUG_SAMPLING_NOW;
 801cbe6:	2101      	movs	r1, #1
			m_sample_mode = DEBUG_SAMPLING_OFF;
 801cbe8:	703c      	strb	r4, [r7, #0]
 801cbea:	2320      	movs	r3, #32
			m_sample_mode_last = DEBUG_SAMPLING_NOW;
 801cbec:	7011      	strb	r1, [r2, #0]
 801cbee:	f383 8811 	msr	BASEPRI, r3
			chEvtSignalI(sample_send_tp, (eventmask_t) 1);
 801cbf2:	4b1d      	ldr	r3, [pc, #116]	; (801cc68 <mc_interface_mc_timer_isr+0x6f8>)
 801cbf4:	6818      	ldr	r0, [r3, #0]
 801cbf6:	f7f1 f913 	bl	800de20 <chEvtSignalI>
 801cbfa:	f384 8811 	msr	BASEPRI, r4
 801cbfe:	e63d      	b.n	801c87c <mc_interface_mc_timer_isr+0x30c>
 801cc00:	2320      	movs	r3, #32
 801cc02:	f383 8811 	msr	BASEPRI, r3
				chEvtSignalI(sample_send_tp, (eventmask_t) 1);
 801cc06:	4b18      	ldr	r3, [pc, #96]	; (801cc68 <mc_interface_mc_timer_isr+0x6f8>)
 801cc08:	2101      	movs	r1, #1
 801cc0a:	6818      	ldr	r0, [r3, #0]
 801cc0c:	f7f1 f908 	bl	800de20 <chEvtSignalI>
 801cc10:	2300      	movs	r3, #0
 801cc12:	f383 8811 	msr	BASEPRI, r3
 801cc16:	e762      	b.n	801cade <mc_interface_mc_timer_isr+0x56e>
 801cc18:	2320      	movs	r3, #32
 801cc1a:	f383 8811 	msr	BASEPRI, r3
				chEvtSignalI(sample_send_tp, (eventmask_t) 1);
 801cc1e:	4b12      	ldr	r3, [pc, #72]	; (801cc68 <mc_interface_mc_timer_isr+0x6f8>)
 801cc20:	2101      	movs	r1, #1
 801cc22:	6818      	ldr	r0, [r3, #0]
 801cc24:	f7f1 f8fc 	bl	800de20 <chEvtSignalI>
 801cc28:	2300      	movs	r3, #0
 801cc2a:	f383 8811 	msr	BASEPRI, r3
 801cc2e:	e73f      	b.n	801cab0 <mc_interface_mc_timer_isr+0x540>
				sample_last += ADC_SAMPLE_MAX_LEN;
 801cc30:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801cc34:	e6c5      	b.n	801c9c2 <mc_interface_mc_timer_isr+0x452>
				sample_last += ADC_SAMPLE_MAX_LEN;
 801cc36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801cc3a:	e6ad      	b.n	801c998 <mc_interface_mc_timer_isr+0x428>
		if (m_sample_now == m_sample_len) {
 801cc3c:	4b07      	ldr	r3, [pc, #28]	; (801cc5c <mc_interface_mc_timer_isr+0x6ec>)
 801cc3e:	682a      	ldr	r2, [r5, #0]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	429a      	cmp	r2, r3
 801cc44:	f47f ae1a 	bne.w	801c87c <mc_interface_mc_timer_isr+0x30c>
	bool sample = false;
 801cc48:	f04f 0900 	mov.w	r9, #0
 801cc4c:	e6e3      	b.n	801ca16 <mc_interface_mc_timer_isr+0x4a6>
 801cc4e:	bf00      	nop
 801cc50:	2000c1e4 	.word	0x2000c1e4
 801cc54:	2000c1e0 	.word	0x2000c1e0
 801cc58:	2000cd78 	.word	0x2000cd78
 801cc5c:	2000c21c 	.word	0x2000c21c
 801cc60:	2000c224 	.word	0x2000c224
 801cc64:	2000c221 	.word	0x2000c221
 801cc68:	2000c7d8 	.word	0x2000c7d8
 801cc6c:	2000c1e8 	.word	0x2000c1e8
 801cc70:	40020800 	.word	0x40020800
 801cc74:	2000c068 	.word	0x2000c068
 801cc78:	2000c238 	.word	0x2000c238
 801cc7c:	10000000 	.word	0x10000000
 801cc80:	200053a0 	.word	0x200053a0
 801cc84:	200053d0 	.word	0x200053d0
 801cc88:	200053e8 	.word	0x200053e8
 801cc8c:	100021f0 	.word	0x100021f0
 801cc90:	100010f8 	.word	0x100010f8
 801cc94:	100032e8 	.word	0x100032e8
 801cc98:	55555556 	.word	0x55555556
 801cc9c:	100076c8 	.word	0x100076c8
 801cca0:	43b40000 	.word	0x43b40000
 801cca4:	437a0000 	.word	0x437a0000
 801cca8:	2000c228 	.word	0x2000c228
 801ccac:	00000000 	.word	0x00000000

0801ccb0 <mc_interface_adc_inj_int_handler>:
	switch (m_conf.motor_type) {
 801ccb0:	4b03      	ldr	r3, [pc, #12]	; (801ccc0 <mc_interface_adc_inj_int_handler+0x10>)
 801ccb2:	789b      	ldrb	r3, [r3, #2]
 801ccb4:	2b01      	cmp	r3, #1
 801ccb6:	d900      	bls.n	801ccba <mc_interface_adc_inj_int_handler+0xa>
 801ccb8:	4770      	bx	lr
		mcpwm_adc_inj_int_handler();
 801ccba:	f7f7 b801 	b.w	8013cc0 <mcpwm_adc_inj_int_handler>
 801ccbe:	bf00      	nop
 801ccc0:	2000c06c 	.word	0x2000c06c
	...

0801ccd0 <correct_encoder>:
			(utils_middle_of_3_int(h2_1, h2_2, h2_3) << 1) |
			(utils_middle_of_3_int(h3_1, h3_2, h3_3) << 2);
}

static float correct_encoder(float obs_angle, float enc_angle, float speed) {
	float rpm_abs = fabsf(speed / ((2.0 * M_PI) / 60.0));
 801ccd0:	eddf 6a14 	vldr	s13, [pc, #80]	; 801cd24 <correct_encoder+0x54>
	static bool using_encoder = true;

	// Hysteresis 5 % of total speed
	float hyst = m_conf->foc_sl_erpm * 0.05;
 801ccd4:	4b14      	ldr	r3, [pc, #80]	; (801cd28 <correct_encoder+0x58>)
	if (using_encoder) {
 801ccd6:	4a15      	ldr	r2, [pc, #84]	; (801cd2c <correct_encoder+0x5c>)
	float hyst = m_conf->foc_sl_erpm * 0.05;
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801cd30 <correct_encoder+0x60>
 801ccde:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
	if (using_encoder) {
 801cce2:	7811      	ldrb	r1, [r2, #0]
	float rpm_abs = fabsf(speed / ((2.0 * M_PI) / 60.0));
 801cce4:	ee81 1a26 	vdiv.f32	s2, s2, s13
	float hyst = m_conf->foc_sl_erpm * 0.05;
 801cce8:	ee67 7a87 	vmul.f32	s15, s15, s14
	float rpm_abs = fabsf(speed / ((2.0 * M_PI) / 60.0));
 801ccec:	eeb0 1ac1 	vabs.f32	s2, s2
		if (rpm_abs > (m_conf->foc_sl_erpm + hyst)) {
 801ccf0:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
	if (using_encoder) {
 801ccf4:	b149      	cbz	r1, 801cd0a <correct_encoder+0x3a>
		if (rpm_abs > (m_conf->foc_sl_erpm + hyst)) {
 801ccf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ccfa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801ccfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd02:	dc0c      	bgt.n	801cd1e <correct_encoder+0x4e>
		if (rpm_abs < (m_conf->foc_sl_erpm - hyst)) {
			using_encoder = true;
		}
	}

	return using_encoder ? enc_angle : obs_angle;
 801cd04:	eeb0 0a60 	vmov.f32	s0, s1
}
 801cd08:	4770      	bx	lr
		if (rpm_abs < (m_conf->foc_sl_erpm - hyst)) {
 801cd0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cd0e:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801cd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd16:	d5f7      	bpl.n	801cd08 <correct_encoder+0x38>
			using_encoder = true;
 801cd18:	2301      	movs	r3, #1
 801cd1a:	7013      	strb	r3, [r2, #0]
 801cd1c:	e7f2      	b.n	801cd04 <correct_encoder+0x34>
			using_encoder = false;
 801cd1e:	2300      	movs	r3, #0
 801cd20:	7013      	strb	r3, [r2, #0]
 801cd22:	4770      	bx	lr
 801cd24:	3dd67750 	.word	0x3dd67750
 801cd28:	2000cda0 	.word	0x2000cda0
 801cd2c:	20001044 	.word	0x20001044
 801cd30:	3d4ccccd 	.word	0x3d4ccccd
	...

0801cd40 <start_pwm_hw>:
static void start_pwm_hw(void) {
 801cd40:	b510      	push	{r4, lr}
	TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_OCMode_PWM1);
 801cd42:	4c19      	ldr	r4, [pc, #100]	; (801cda8 <start_pwm_hw+0x68>)
 801cd44:	2260      	movs	r2, #96	; 0x60
 801cd46:	4620      	mov	r0, r4
 801cd48:	2100      	movs	r1, #0
 801cd4a:	f008 f861 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 801cd4e:	4620      	mov	r0, r4
 801cd50:	2201      	movs	r2, #1
 801cd52:	2100      	movs	r1, #0
 801cd54:	f008 f8b4 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Enable);
 801cd58:	4620      	mov	r0, r4
 801cd5a:	2204      	movs	r2, #4
 801cd5c:	2100      	movs	r1, #0
 801cd5e:	f008 f8c7 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_OCMode_PWM1);
 801cd62:	4620      	mov	r0, r4
 801cd64:	2260      	movs	r2, #96	; 0x60
 801cd66:	2104      	movs	r1, #4
 801cd68:	f008 f852 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	2201      	movs	r2, #1
 801cd70:	2104      	movs	r1, #4
 801cd72:	f008 f8a5 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Enable);
 801cd76:	2204      	movs	r2, #4
 801cd78:	4611      	mov	r1, r2
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	f008 f8b8 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_OCMode_PWM1);
 801cd80:	4620      	mov	r0, r4
 801cd82:	2260      	movs	r2, #96	; 0x60
 801cd84:	2108      	movs	r1, #8
 801cd86:	f008 f843 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	2201      	movs	r2, #1
 801cd8e:	2108      	movs	r1, #8
 801cd90:	f008 f896 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Enable);
 801cd94:	2204      	movs	r2, #4
 801cd96:	4620      	mov	r0, r4
 801cd98:	2108      	movs	r1, #8
 801cd9a:	f008 f8a9 	bl	8024ef0 <TIM_CCxNCmd>
	m_output_on = true;
 801cd9e:	4b03      	ldr	r3, [pc, #12]	; (801cdac <start_pwm_hw+0x6c>)
 801cda0:	2201      	movs	r2, #1
 801cda2:	701a      	strb	r2, [r3, #0]
 801cda4:	bd10      	pop	{r4, pc}
 801cda6:	bf00      	nop
 801cda8:	40010000 	.word	0x40010000
 801cdac:	2000ce40 	.word	0x2000ce40

0801cdb0 <stop_pwm_hw>:
static void stop_pwm_hw(void) {
 801cdb0:	b510      	push	{r4, lr}
	TIM_SelectOCxM(TIM1, TIM_Channel_1, TIM_ForcedAction_InActive);
 801cdb2:	4c1b      	ldr	r4, [pc, #108]	; (801ce20 <stop_pwm_hw+0x70>)
 801cdb4:	2240      	movs	r2, #64	; 0x40
 801cdb6:	4620      	mov	r0, r4
 801cdb8:	2100      	movs	r1, #0
 801cdba:	f008 f829 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_1, TIM_CCx_Enable);
 801cdbe:	4620      	mov	r0, r4
 801cdc0:	2201      	movs	r2, #1
 801cdc2:	2100      	movs	r1, #0
 801cdc4:	f008 f87c 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_1, TIM_CCxN_Disable);
 801cdc8:	2200      	movs	r2, #0
 801cdca:	4611      	mov	r1, r2
 801cdcc:	4620      	mov	r0, r4
 801cdce:	f008 f88f 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_2, TIM_ForcedAction_InActive);
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	2240      	movs	r2, #64	; 0x40
 801cdd6:	2104      	movs	r1, #4
 801cdd8:	f008 f81a 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_2, TIM_CCx_Enable);
 801cddc:	4620      	mov	r0, r4
 801cdde:	2201      	movs	r2, #1
 801cde0:	2104      	movs	r1, #4
 801cde2:	f008 f86d 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_2, TIM_CCxN_Disable);
 801cde6:	4620      	mov	r0, r4
 801cde8:	2200      	movs	r2, #0
 801cdea:	2104      	movs	r1, #4
 801cdec:	f008 f880 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_SelectOCxM(TIM1, TIM_Channel_3, TIM_ForcedAction_InActive);
 801cdf0:	4620      	mov	r0, r4
 801cdf2:	2240      	movs	r2, #64	; 0x40
 801cdf4:	2108      	movs	r1, #8
 801cdf6:	f008 f80b 	bl	8024e10 <TIM_SelectOCxM>
	TIM_CCxCmd(TIM1, TIM_Channel_3, TIM_CCx_Enable);
 801cdfa:	4620      	mov	r0, r4
 801cdfc:	2201      	movs	r2, #1
 801cdfe:	2108      	movs	r1, #8
 801ce00:	f008 f85e 	bl	8024ec0 <TIM_CCxCmd>
	TIM_CCxNCmd(TIM1, TIM_Channel_3, TIM_CCxN_Disable);
 801ce04:	2200      	movs	r2, #0
 801ce06:	4620      	mov	r0, r4
 801ce08:	2108      	movs	r1, #8
 801ce0a:	f008 f871 	bl	8024ef0 <TIM_CCxNCmd>
	TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 801ce0e:	4620      	mov	r0, r4
 801ce10:	2120      	movs	r1, #32
 801ce12:	f008 f8bd 	bl	8024f90 <TIM_GenerateEvent>
	m_output_on = false;
 801ce16:	4b03      	ldr	r3, [pc, #12]	; (801ce24 <stop_pwm_hw+0x74>)
 801ce18:	2200      	movs	r2, #0
 801ce1a:	701a      	strb	r2, [r3, #0]
 801ce1c:	bd10      	pop	{r4, pc}
 801ce1e:	bf00      	nop
 801ce20:	40010000 	.word	0x40010000
 801ce24:	2000ce40 	.word	0x2000ce40
	...

0801ce30 <read_hall>:
static int read_hall(void) {
 801ce30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int h1_1 = READ_HALL1();
 801ce34:	4b16      	ldr	r3, [pc, #88]	; (801ce90 <read_hall+0x60>)
	int h3_1 = READ_HALL3();
 801ce36:	4c17      	ldr	r4, [pc, #92]	; (801ce94 <read_hall+0x64>)
	int h1_1 = READ_HALL1();
 801ce38:	6918      	ldr	r0, [r3, #16]
	int h2_1 = READ_HALL2();
 801ce3a:	691d      	ldr	r5, [r3, #16]
	int h3_1 = READ_HALL3();
 801ce3c:	6926      	ldr	r6, [r4, #16]
	int h1_2 = READ_HALL1();
 801ce3e:	6919      	ldr	r1, [r3, #16]
	int h2_2 = READ_HALL2();
 801ce40:	f8d3 9010 	ldr.w	r9, [r3, #16]
	int h3_2 = READ_HALL3();
 801ce44:	6927      	ldr	r7, [r4, #16]
	int h1_3 = READ_HALL1();
 801ce46:	691a      	ldr	r2, [r3, #16]
	int h2_3 = READ_HALL2();
 801ce48:	f8d3 a010 	ldr.w	sl, [r3, #16]
	int h3_3 = READ_HALL3();
 801ce4c:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return utils_middle_of_3_int(h1_1, h1_2, h1_3) |
 801ce50:	f3c1 1180 	ubfx	r1, r1, #6, #1
 801ce54:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801ce58:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801ce5c:	f7f8 ff60 	bl	8015d20 <utils_middle_of_3_int>
			(utils_middle_of_3_int(h2_1, h2_2, h2_3) << 1) |
 801ce60:	f3ca 12c0 	ubfx	r2, sl, #7, #1
	return utils_middle_of_3_int(h1_1, h1_2, h1_3) |
 801ce64:	4604      	mov	r4, r0
			(utils_middle_of_3_int(h2_1, h2_2, h2_3) << 1) |
 801ce66:	f3c9 11c0 	ubfx	r1, r9, #7, #1
 801ce6a:	f3c5 10c0 	ubfx	r0, r5, #7, #1
 801ce6e:	f7f8 ff57 	bl	8015d20 <utils_middle_of_3_int>
			(utils_middle_of_3_int(h3_1, h3_2, h3_3) << 2);
 801ce72:	f3c8 22c0 	ubfx	r2, r8, #11, #1
			(utils_middle_of_3_int(h2_1, h2_2, h2_3) << 1) |
 801ce76:	4605      	mov	r5, r0
			(utils_middle_of_3_int(h3_1, h3_2, h3_3) << 2);
 801ce78:	f3c7 21c0 	ubfx	r1, r7, #11, #1
 801ce7c:	f3c6 20c0 	ubfx	r0, r6, #11, #1
 801ce80:	f7f8 ff4e 	bl	8015d20 <utils_middle_of_3_int>
 801ce84:	0080      	lsls	r0, r0, #2
			(utils_middle_of_3_int(h2_1, h2_2, h2_3) << 1) |
 801ce86:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
}
 801ce8a:	4320      	orrs	r0, r4
 801ce8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce90:	40020400 	.word	0x40020400
 801ce94:	40020800 	.word	0x40020800
	...

0801cea0 <correct_hall>:

static float correct_hall(float angle, float speed, float dt) {
 801cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static int ang_hall_int_prev = -1;
	float rpm_abs = fabsf(speed / ((2.0 * M_PI) / 60.0));
 801cea2:	eddf 6a6b 	vldr	s13, [pc, #428]	; 801d050 <correct_hall+0x1b0>
	static bool using_hall = true;

	// Hysteresis 5 % of total speed
	float hyst = m_conf->foc_sl_erpm * 0.1;
 801cea6:	4a6b      	ldr	r2, [pc, #428]	; (801d054 <correct_hall+0x1b4>)
	if (using_hall) {
 801cea8:	4b6b      	ldr	r3, [pc, #428]	; (801d058 <correct_hall+0x1b8>)
	float hyst = m_conf->foc_sl_erpm * 0.1;
 801ceaa:	6815      	ldr	r5, [r2, #0]
 801ceac:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801d05c <correct_hall+0x1bc>
 801ceb0:	edd5 7a41 	vldr	s15, [r5, #260]	; 0x104
	if (using_hall) {
 801ceb4:	781a      	ldrb	r2, [r3, #0]
static float correct_hall(float angle, float speed, float dt) {
 801ceb6:	ed2d 8b02 	vpush	{d8}
	float rpm_abs = fabsf(speed / ((2.0 * M_PI) / 60.0));
 801ceba:	ee80 8aa6 	vdiv.f32	s16, s1, s13
	float hyst = m_conf->foc_sl_erpm * 0.1;
 801cebe:	ee67 7a87 	vmul.f32	s15, s15, s14
	float rpm_abs = fabsf(speed / ((2.0 * M_PI) / 60.0));
 801cec2:	eeb0 8ac8 	vabs.f32	s16, s16
		if (rpm_abs > (m_conf->foc_sl_erpm + hyst)) {
 801cec6:	ed95 7a41 	vldr	s14, [r5, #260]	; 0x104
	if (using_hall) {
 801ceca:	b17a      	cbz	r2, 801ceec <correct_hall+0x4c>
		if (rpm_abs > (m_conf->foc_sl_erpm + hyst)) {
 801cecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ced0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ced4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ced8:	dd11      	ble.n	801cefe <correct_hall+0x5e>
			using_hall = false;
 801ceda:	2200      	movs	r2, #0
 801cedc:	701a      	strb	r2, [r3, #0]
				angle = m_phase_now_observer_override;
			}
		}
	} else {
		// We are running sensorless.
		ang_hall_int_prev = -2;
 801cede:	4b60      	ldr	r3, [pc, #384]	; (801d060 <correct_hall+0x1c0>)
 801cee0:	f06f 0201 	mvn.w	r2, #1
 801cee4:	601a      	str	r2, [r3, #0]
	}

	return angle;
}
 801cee6:	ecbd 8b02 	vpop	{d8}
 801ceea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpm_abs < (m_conf->foc_sl_erpm - hyst)) {
 801ceec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cef0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cef8:	d5f1      	bpl.n	801cede <correct_hall+0x3e>
			using_hall = true;
 801cefa:	2201      	movs	r2, #1
 801cefc:	701a      	strb	r2, [r3, #0]
 801cefe:	ee11 7a10 	vmov	r7, s2
 801cf02:	ee10 4a10 	vmov	r4, s0
 801cf06:	ee10 6a90 	vmov	r6, s1
		int ang_hall_int = m_conf->foc_hall_table[read_hall()];
 801cf0a:	f7ff ff91 	bl	801ce30 <read_hall>
 801cf0e:	4428      	add	r0, r5
 801cf10:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
 801cf14:	b2db      	uxtb	r3, r3
		if (ang_hall_int < 201) {
 801cf16:	2bc8      	cmp	r3, #200	; 0xc8
 801cf18:	dc50      	bgt.n	801cfbc <correct_hall+0x11c>
			float ang_hall_now = (((float)ang_hall_int / 200.0) * 360.0) * M_PI / 180.0;
 801cf1a:	ee07 3a90 	vmov	s15, r3
 801cf1e:	eddf 5a51 	vldr	s11, [pc, #324]	; 801d064 <correct_hall+0x1c4>
 801cf22:	ed9f 6a51 	vldr	s12, [pc, #324]	; 801d068 <correct_hall+0x1c8>
			if (ang_hall_int_prev < 0) {
 801cf26:	494e      	ldr	r1, [pc, #312]	; (801d060 <correct_hall+0x1c0>)
			float ang_hall_now = (((float)ang_hall_int / 200.0) * 360.0) * M_PI / 180.0;
 801cf28:	ed9f 7a50 	vldr	s14, [pc, #320]	; 801d06c <correct_hall+0x1cc>
			if (ang_hall_int_prev < 0) {
 801cf2c:	680a      	ldr	r2, [r1, #0]
			float ang_hall_now = (((float)ang_hall_int / 200.0) * 360.0) * M_PI / 180.0;
 801cf2e:	eddf 6a50 	vldr	s13, [pc, #320]	; 801d070 <correct_hall+0x1d0>
 801cf32:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
			if (ang_hall_int_prev < 0) {
 801cf36:	2a00      	cmp	r2, #0
			float ang_hall_now = (((float)ang_hall_int / 200.0) * 360.0) * M_PI / 180.0;
 801cf38:	eec5 7a25 	vdiv.f32	s15, s10, s11
 801cf3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cf40:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cf44:	eec7 0aa6 	vdiv.f32	s1, s15, s13
			if (ang_hall_int_prev < 0) {
 801cf48:	db6e      	blt.n	801d028 <correct_hall+0x188>
			} else if (ang_hall_int != ang_hall_int_prev) {
 801cf4a:	4293      	cmp	r3, r2
 801cf4c:	d070      	beq.n	801d030 <correct_hall+0x190>
				int ang_avg = abs(ang_hall_int - ang_hall_int_prev);
 801cf4e:	1a98      	subs	r0, r3, r2
 801cf50:	2800      	cmp	r0, #0
 801cf52:	bfb8      	it	lt
 801cf54:	4240      	neglt	r0, r0
				if (ang_avg < 100) {
 801cf56:	2863      	cmp	r0, #99	; 0x63
 801cf58:	dd40      	ble.n	801cfdc <correct_hall+0x13c>
				} else if (ang_avg != 100) {
 801cf5a:	2864      	cmp	r0, #100	; 0x64
 801cf5c:	d019      	beq.n	801cf92 <correct_hall+0xf2>
					ang_avg = (ang_hall_int + ang_hall_int_prev) / 2 + 100;
 801cf5e:	441a      	add	r2, r3
 801cf60:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801cf64:	1052      	asrs	r2, r2, #1
 801cf66:	4c43      	ldr	r4, [pc, #268]	; (801d074 <correct_hall+0x1d4>)
 801cf68:	3264      	adds	r2, #100	; 0x64
 801cf6a:	fb84 0402 	smull	r0, r4, r4, r2
 801cf6e:	17d0      	asrs	r0, r2, #31
 801cf70:	ebc0 10a4 	rsb	r0, r0, r4, asr #6
 801cf74:	24c8      	movs	r4, #200	; 0xc8
 801cf76:	fb04 2210 	mls	r2, r4, r0, r2
 801cf7a:	ee07 2a90 	vmov	s15, r2
 801cf7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf82:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 801cf86:	ee25 6a06 	vmul.f32	s12, s10, s12
 801cf8a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801cf8e:	ee86 7a26 	vdiv.f32	s14, s12, s13
				ang_hall = (((float)ang_avg / 200.0) * 360.0) * M_PI / 180.0;
 801cf92:	4c39      	ldr	r4, [pc, #228]	; (801d078 <correct_hall+0x1d8>)
 801cf94:	ed84 7a00 	vstr	s14, [r4]
			if (rpm_abs < 100) {
 801cf98:	eddf 8a38 	vldr	s17, [pc, #224]	; 801d07c <correct_hall+0x1dc>
			ang_hall_int_prev = ang_hall_int;
 801cf9c:	600b      	str	r3, [r1, #0]
			if (rpm_abs < 100) {
 801cf9e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfa6:	d527      	bpl.n	801cff8 <correct_hall+0x158>
				ang_hall = ang_hall_now;
 801cfa8:	edc4 0a00 	vstr	s1, [r4]
			utils_norm_angle_rad(&ang_hall);
 801cfac:	4832      	ldr	r0, [pc, #200]	; (801d078 <correct_hall+0x1d8>)
 801cfae:	f7f8 fd77 	bl	8015aa0 <utils_norm_angle_rad>
}
 801cfb2:	ecbd 8b02 	vpop	{d8}
			angle = ang_hall;
 801cfb6:	ed94 0a00 	vldr	s0, [r4]
}
 801cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (m_phase_observer_override && m_state == MC_STATE_RUNNING) {
 801cfbc:	4b30      	ldr	r3, [pc, #192]	; (801d080 <correct_hall+0x1e0>)
			ang_hall_int_prev = -1;
 801cfbe:	4a28      	ldr	r2, [pc, #160]	; (801d060 <correct_hall+0x1c0>)
			if (m_phase_observer_override && m_state == MC_STATE_RUNNING) {
 801cfc0:	781b      	ldrb	r3, [r3, #0]
			ang_hall_int_prev = -1;
 801cfc2:	f04f 31ff 	mov.w	r1, #4294967295
 801cfc6:	6011      	str	r1, [r2, #0]
			if (m_phase_observer_override && m_state == MC_STATE_RUNNING) {
 801cfc8:	b11b      	cbz	r3, 801cfd2 <correct_hall+0x132>
 801cfca:	4b2e      	ldr	r3, [pc, #184]	; (801d084 <correct_hall+0x1e4>)
 801cfcc:	781b      	ldrb	r3, [r3, #0]
 801cfce:	2b02      	cmp	r3, #2
 801cfd0:	d030      	beq.n	801d034 <correct_hall+0x194>
}
 801cfd2:	ecbd 8b02 	vpop	{d8}
 801cfd6:	ee00 4a10 	vmov	s0, r4
 801cfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					ang_avg = (ang_hall_int + ang_hall_int_prev) / 2;
 801cfdc:	441a      	add	r2, r3
 801cfde:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801cfe2:	4824      	ldr	r0, [pc, #144]	; (801d074 <correct_hall+0x1d4>)
 801cfe4:	1054      	asrs	r4, r2, #1
 801cfe6:	fb80 5004 	smull	r5, r0, r0, r4
 801cfea:	17d2      	asrs	r2, r2, #31
 801cfec:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 801cff0:	20c8      	movs	r0, #200	; 0xc8
 801cff2:	fb00 4212 	mls	r2, r0, r2, r4
 801cff6:	e7c0      	b.n	801cf7a <correct_hall+0xda>
				float diff = utils_angle_difference_rad(ang_hall, ang_hall_now);
 801cff8:	ed94 0a00 	vldr	s0, [r4]
 801cffc:	f7f8 fe28 	bl	8015c50 <utils_angle_difference_rad>
				if (fabsf(diff) < ((2.0 * M_PI) / 12.0)) {
 801d000:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d088 <correct_hall+0x1e8>
 801d004:	eeb0 7ac0 	vabs.f32	s14, s0
 801d008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d010:	d514      	bpl.n	801d03c <correct_hall+0x19c>
					ang_hall += speed * dt;
 801d012:	edd4 7a00 	vldr	s15, [r4]
 801d016:	ee07 6a10 	vmov	s14, r6
 801d01a:	ee06 7a90 	vmov	s13, r7
 801d01e:	eee7 7a26 	vfma.f32	s15, s14, s13
 801d022:	edc4 7a00 	vstr	s15, [r4]
 801d026:	e7c1      	b.n	801cfac <correct_hall+0x10c>
					ang_hall = ((ang_hall_int / 200.0) * 360.0) * M_PI / 180.0;
 801d028:	4c13      	ldr	r4, [pc, #76]	; (801d078 <correct_hall+0x1d8>)
 801d02a:	edc4 0a00 	vstr	s1, [r4]
 801d02e:	e7b3      	b.n	801cf98 <correct_hall+0xf8>
 801d030:	4c11      	ldr	r4, [pc, #68]	; (801d078 <correct_hall+0x1d8>)
 801d032:	e7b1      	b.n	801cf98 <correct_hall+0xf8>
				angle = m_phase_now_observer_override;
 801d034:	4b15      	ldr	r3, [pc, #84]	; (801d08c <correct_hall+0x1ec>)
 801d036:	ed93 0a00 	vldr	s0, [r3]
 801d03a:	e754      	b.n	801cee6 <correct_hall+0x46>
					ang_hall -= diff / 100.0;
 801d03c:	ee80 7a28 	vdiv.f32	s14, s0, s17
 801d040:	edd4 7a00 	vldr	s15, [r4]
 801d044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d048:	edc4 7a00 	vstr	s15, [r4]
 801d04c:	e7ae      	b.n	801cfac <correct_hall+0x10c>
 801d04e:	bf00      	nop
 801d050:	3dd67750 	.word	0x3dd67750
 801d054:	2000cda0 	.word	0x2000cda0
 801d058:	20001045 	.word	0x20001045
 801d05c:	3dcccccd 	.word	0x3dcccccd
 801d060:	20001040 	.word	0x20001040
 801d064:	43480000 	.word	0x43480000
 801d068:	43b40000 	.word	0x43b40000
 801d06c:	40490fdb 	.word	0x40490fdb
 801d070:	43340000 	.word	0x43340000
 801d074:	51eb851f 	.word	0x51eb851f
 801d078:	2000cd7c 	.word	0x2000cd7c
 801d07c:	42c80000 	.word	0x42c80000
 801d080:	2000ce58 	.word	0x2000ce58
 801d084:	2000ce84 	.word	0x2000ce84
 801d088:	3f060a92 	.word	0x3f060a92
 801d08c:	2000ce50 	.word	0x2000ce50

0801d090 <timer_thread>:
 801d090:	4bc8      	ldr	r3, [pc, #800]	; (801d3b4 <timer_thread+0x324>)
 801d092:	49c9      	ldr	r1, [pc, #804]	; (801d3b8 <timer_thread+0x328>)
 801d094:	699a      	ldr	r2, [r3, #24]
		if (timer_thd_stop) {
 801d096:	4bc9      	ldr	r3, [pc, #804]	; (801d3bc <timer_thread+0x32c>)
 801d098:	6191      	str	r1, [r2, #24]
 801d09a:	781b      	ldrb	r3, [r3, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	f040 8227 	bne.w	801d4f0 <timer_thread+0x460>
static THD_FUNCTION(timer_thread, arg) {
 801d0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a6:	ed2d 8b0a 	vpush	{d8-d12}
 801d0aa:	4cc5      	ldr	r4, [pc, #788]	; (801d3c0 <timer_thread+0x330>)
 801d0ac:	4dc5      	ldr	r5, [pc, #788]	; (801d3c4 <timer_thread+0x334>)
 801d0ae:	f8df a34c 	ldr.w	sl, [pc, #844]	; 801d3fc <timer_thread+0x36c>
 801d0b2:	4ec5      	ldr	r6, [pc, #788]	; (801d3c8 <timer_thread+0x338>)
 801d0b4:	f8df 935c 	ldr.w	r9, [pc, #860]	; 801d414 <timer_thread+0x384>
 801d0b8:	f8df b35c 	ldr.w	fp, [pc, #860]	; 801d418 <timer_thread+0x388>
 801d0bc:	4fc3      	ldr	r7, [pc, #780]	; (801d3cc <timer_thread+0x33c>)
 801d0be:	f8df 8328 	ldr.w	r8, [pc, #808]	; 801d3e8 <timer_thread+0x358>
		float openloop_rpm = utils_map(fabsf(m_motor_state.iq_target),
 801d0c2:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 801d3d0 <timer_thread+0x340>
		const float min_rads = (openloop_rpm * 2.0 * M_PI) / 60.0;
 801d0c6:	ed9f aac3 	vldr	s20, [pc, #780]	; 801d3d4 <timer_thread+0x344>
 801d0ca:	eddf 9ac3 	vldr	s19, [pc, #780]	; 801d3d8 <timer_thread+0x348>
			add_min_speed = -min_rads * dt;
 801d0ce:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 801d3dc <timer_thread+0x34c>
		if (min_rpm_hyst_timer > m_conf->foc_sl_openloop_hyst && min_rpm_timer <= 0.0001) {
 801d0d2:	eddf aac3 	vldr	s21, [pc, #780]	; 801d3e0 <timer_thread+0x350>
static THD_FUNCTION(timer_thread, arg) {
 801d0d6:	b089      	sub	sp, #36	; 0x24
 801d0d8:	e081      	b.n	801d1de <timer_thread+0x14e>
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE || fabsf(m_motor_state.duty_now) < 0.001) {
 801d0da:	f899 3000 	ldrb.w	r3, [r9]
			min_rpm_hyst_timer += dt;
 801d0de:	ee77 7a89 	vadd.f32	s15, s15, s18
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE || fabsf(m_motor_state.duty_now) < 0.001) {
 801d0e2:	2b03      	cmp	r3, #3
			min_rpm_hyst_timer += dt;
 801d0e4:	edc6 7a00 	vstr	s15, [r6]
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE || fabsf(m_motor_state.duty_now) < 0.001) {
 801d0e8:	f000 80ca 	beq.w	801d280 <timer_thread+0x1f0>
 801d0ec:	edd4 7a03 	vldr	s15, [r4, #12]
 801d0f0:	eef0 7ae7 	vabs.f32	s15, s15
 801d0f4:	eef4 7ac9 	vcmpe.f32	s15, s18
 801d0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0fc:	f100 80c0 	bmi.w	801d280 <timer_thread+0x1f0>
 801d100:	ed96 7a00 	vldr	s14, [r6]
		if (min_rpm_hyst_timer > m_conf->foc_sl_openloop_hyst && min_rpm_timer <= 0.0001) {
 801d104:	682b      	ldr	r3, [r5, #0]
 801d106:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 801d10a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d112:	edd7 7a00 	vldr	s15, [r7]
 801d116:	f140 80bb 	bpl.w	801d290 <timer_thread+0x200>
 801d11a:	eef4 7aea 	vcmpe.f32	s15, s21
 801d11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d122:	f200 80b5 	bhi.w	801d290 <timer_thread+0x200>
			min_rpm_timer = m_conf->foc_sl_openloop_time;
 801d126:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
		if (min_rpm_timer > 0.0) {
 801d12a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			min_rpm_timer = m_conf->foc_sl_openloop_time;
 801d132:	edc7 7a00 	vstr	s15, [r7]
		if (min_rpm_timer > 0.0) {
 801d136:	f340 80b7 	ble.w	801d2a8 <timer_thread+0x218>
			m_phase_now_observer_override += add_min_speed;
 801d13a:	edd8 7a00 	vldr	s15, [r8]
 801d13e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801d142:	edc8 8a00 	vstr	s17, [r8]
				if (m_motor_state.duty_now > 0.0) {
 801d146:	edd4 7a03 	vldr	s15, [r4, #12]
 801d14a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d152:	f340 811d 	ble.w	801d390 <timer_thread+0x300>
					m_phase_now_observer_override += M_PI / 2.0;
 801d156:	ed98 7a00 	vldr	s14, [r8]
 801d15a:	eddf 7aa2 	vldr	s15, [pc, #648]	; 801d3e4 <timer_thread+0x354>
 801d15e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d162:	edc8 7a00 	vstr	s15, [r8]
			utils_norm_angle_rad((float*)&m_phase_now_observer_override);
 801d166:	48a0      	ldr	r0, [pc, #640]	; (801d3e8 <timer_thread+0x358>)
 801d168:	f7f8 fc9a 	bl	8015aa0 <utils_norm_angle_rad>
			m_phase_observer_override = true;
 801d16c:	2301      	movs	r3, #1
		if (m_state == MC_STATE_RUNNING) {
 801d16e:	4a9f      	ldr	r2, [pc, #636]	; (801d3ec <timer_thread+0x35c>)
			min_rpm_timer -= dt;
 801d170:	edd7 7a00 	vldr	s15, [r7]
			m_phase_observer_override = true;
 801d174:	f88b 3000 	strb.w	r3, [fp]
		if (m_state == MC_STATE_RUNNING) {
 801d178:	7812      	ldrb	r2, [r2, #0]
			min_rpm_hyst_timer = 0.0;
 801d17a:	ed86 8a00 	vstr	s16, [r6]
			min_rpm_timer -= dt;
 801d17e:	ee77 7ac9 	vsub.f32	s15, s15, s18
		if (m_state == MC_STATE_RUNNING) {
 801d182:	2a02      	cmp	r2, #2
			min_rpm_timer -= dt;
 801d184:	edc7 7a00 	vstr	s15, [r7]
 801d188:	682b      	ldr	r3, [r5, #0]
		if (m_state == MC_STATE_RUNNING) {
 801d18a:	f000 8099 	beq.w	801d2c0 <timer_thread+0x230>
		m_gamma_now = utils_map(fabsf(m_motor_state.duty_now), 0.0, 1.0,
 801d18e:	ed94 0a03 	vldr	s0, [r4, #12]
				m_conf->foc_observer_gain * m_conf->foc_observer_gain_slow, m_conf->foc_observer_gain);
 801d192:	edd3 1a33 	vldr	s3, [r3, #204]	; 0xcc
 801d196:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
		m_gamma_now = utils_map(fabsf(m_motor_state.duty_now), 0.0, 1.0,
 801d19a:	ed93 2a33 	vldr	s4, [r3, #204]	; 0xcc
 801d19e:	eeb0 0ac0 	vabs.f32	s0, s0
 801d1a2:	ee61 1aa7 	vmul.f32	s3, s3, s15
 801d1a6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d1aa:	eef0 0a48 	vmov.f32	s1, s16
 801d1ae:	f7f8 fce7 	bl	8015b80 <utils_map>
 801d1b2:	4b8f      	ldr	r3, [pc, #572]	; (801d3f0 <timer_thread+0x360>)
 801d1b4:	ed83 0a00 	vstr	s0, [r3]
	if (m_control_mode != CONTROL_MODE_SPEED) {
 801d1b8:	f899 3000 	ldrb.w	r3, [r9]
 801d1bc:	2b01      	cmp	r3, #1
 801d1be:	f000 80c8 	beq.w	801d352 <timer_thread+0x2c2>
		i_term = 0.0;
 801d1c2:	4b8c      	ldr	r3, [pc, #560]	; (801d3f4 <timer_thread+0x364>)
 801d1c4:	ed83 8a00 	vstr	s16, [r3]
		prev_error = 0.0;
 801d1c8:	4b8b      	ldr	r3, [pc, #556]	; (801d3f8 <timer_thread+0x368>)
 801d1ca:	ed83 8a00 	vstr	s16, [r3]
		chThdSleepMilliseconds(1);
 801d1ce:	200a      	movs	r0, #10
 801d1d0:	f7f0 fc06 	bl	800d9e0 <chThdSleep>
		if (timer_thd_stop) {
 801d1d4:	4b79      	ldr	r3, [pc, #484]	; (801d3bc <timer_thread+0x32c>)
 801d1d6:	781b      	ldrb	r3, [r3, #0]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	f040 80e2 	bne.w	801d3a2 <timer_thread+0x312>
				0.0, m_conf->l_current_max,
 801d1de:	682b      	ldr	r3, [r5, #0]
		float openloop_rpm = utils_map(fabsf(m_motor_state.iq_target),
 801d1e0:	ed94 0a01 	vldr	s0, [r4, #4]
 801d1e4:	eddf 0a7a 	vldr	s1, [pc, #488]	; 801d3d0 <timer_thread+0x340>
 801d1e8:	ed93 1a01 	vldr	s2, [r3, #4]
 801d1ec:	ed93 2a39 	vldr	s4, [r3, #228]	; 0xe4
 801d1f0:	eef0 1a48 	vmov.f32	s3, s16
 801d1f4:	eeb0 0ac0 	vabs.f32	s0, s0
 801d1f8:	f7f8 fcc2 	bl	8015b80 <utils_map>
		utils_truncate_number_abs(&openloop_rpm, m_conf->foc_openloop_rpm);
 801d1fc:	682b      	ldr	r3, [r5, #0]
		float openloop_rpm = utils_map(fabsf(m_motor_state.iq_target),
 801d1fe:	ed8d 0a02 	vstr	s0, [sp, #8]
		utils_truncate_number_abs(&openloop_rpm, m_conf->foc_openloop_rpm);
 801d202:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 801d206:	a802      	add	r0, sp, #8
 801d208:	eeb0 0a67 	vmov.f32	s0, s15
 801d20c:	f7f8 fca0 	bl	8015b50 <utils_truncate_number_abs>
		const float min_rads = (openloop_rpm * 2.0 * M_PI) / 60.0;
 801d210:	eddd 7a02 	vldr	s15, [sp, #8]
		if (m_motor_state.duty_now > 0.0) {
 801d214:	ed94 7a03 	vldr	s14, [r4, #12]
		utils_norm_angle_rad((float*)&m_phase_now_encoder_no_index);
 801d218:	4878      	ldr	r0, [pc, #480]	; (801d3fc <timer_thread+0x36c>)
		const float min_rads = (openloop_rpm * 2.0 * M_PI) / 60.0;
 801d21a:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if (m_motor_state.duty_now > 0.0) {
 801d21e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
		const float min_rads = (openloop_rpm * 2.0 * M_PI) / 60.0;
 801d222:	ee67 7a8a 	vmul.f32	s15, s15, s20
		if (m_motor_state.duty_now > 0.0) {
 801d226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		const float min_rads = (openloop_rpm * 2.0 * M_PI) / 60.0;
 801d22a:	ee87 baa9 	vdiv.f32	s22, s15, s19
		m_phase_now_encoder_no_index += add_min_speed;
 801d22e:	edda 7a00 	vldr	s15, [sl]
			add_min_speed = min_rads * dt;
 801d232:	bfcc      	ite	gt
 801d234:	ee6b 8a09 	vmulgt.f32	s17, s22, s18
			add_min_speed = -min_rads * dt;
 801d238:	ee6b 8a49 	vnmulle.f32	s17, s22, s18
		m_phase_now_encoder_no_index += add_min_speed;
 801d23c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801d240:	edca 7a00 	vstr	s15, [sl]
		utils_norm_angle_rad((float*)&m_phase_now_encoder_no_index);
 801d244:	f7f8 fc2c 	bl	8015aa0 <utils_norm_angle_rad>
		if (fabsf(m_pll_speed) < min_rads) {
 801d248:	4b6d      	ldr	r3, [pc, #436]	; (801d400 <timer_thread+0x370>)
 801d24a:	edd3 7a00 	vldr	s15, [r3]
 801d24e:	eef0 7ae7 	vabs.f32	s15, s15
 801d252:	eeb4 bae7 	vcmpe.f32	s22, s15
 801d256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			min_rpm_hyst_timer += dt;
 801d25a:	edd6 7a00 	vldr	s15, [r6]
		if (fabsf(m_pll_speed) < min_rads) {
 801d25e:	f73f af3c 	bgt.w	801d0da <timer_thread+0x4a>
		} else if (min_rpm_hyst_timer > 0.0) {
 801d262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			min_rpm_hyst_timer -= dt;
 801d26a:	bfc8      	it	gt
 801d26c:	ee77 7ac9 	vsubgt.f32	s15, s15, s18
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE || fabsf(m_motor_state.duty_now) < 0.001) {
 801d270:	f899 3000 	ldrb.w	r3, [r9]
			min_rpm_hyst_timer -= dt;
 801d274:	bfc8      	it	gt
 801d276:	edc6 7a00 	vstrgt	s15, [r6]
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE || fabsf(m_motor_state.duty_now) < 0.001) {
 801d27a:	2b03      	cmp	r3, #3
 801d27c:	f47f af36 	bne.w	801d0ec <timer_thread+0x5c>
			m_phase_observer_override = false;
 801d280:	2300      	movs	r3, #0
 801d282:	eeb0 7a48 	vmov.f32	s14, s16
			min_rpm_hyst_timer = 0.0;
 801d286:	ed86 8a00 	vstr	s16, [r6]
			m_phase_observer_override = false;
 801d28a:	f88b 3000 	strb.w	r3, [fp]
 801d28e:	e739      	b.n	801d104 <timer_thread+0x74>
		if (min_rpm_timer > 0.0) {
 801d290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d298:	dd06      	ble.n	801d2a8 <timer_thread+0x218>
			m_phase_now_observer_override += add_min_speed;
 801d29a:	edd8 7a00 	vldr	s15, [r8]
 801d29e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801d2a2:	edc8 8a00 	vstr	s17, [r8]
 801d2a6:	e75e      	b.n	801d166 <timer_thread+0xd6>
			m_phase_now_observer_override = m_phase_now_observer;
 801d2a8:	4a56      	ldr	r2, [pc, #344]	; (801d404 <timer_thread+0x374>)
 801d2aa:	6811      	ldr	r1, [r2, #0]
 801d2ac:	f8c8 1000 	str.w	r1, [r8]
			m_phase_observer_override = false;
 801d2b0:	2200      	movs	r2, #0
 801d2b2:	f88b 2000 	strb.w	r2, [fp]
		if (m_state == MC_STATE_RUNNING) {
 801d2b6:	4a4d      	ldr	r2, [pc, #308]	; (801d3ec <timer_thread+0x35c>)
 801d2b8:	7812      	ldrb	r2, [r2, #0]
 801d2ba:	2a02      	cmp	r2, #2
 801d2bc:	f47f af67 	bne.w	801d18e <timer_thread+0xfe>
			const volatile float vd_tmp = m_motor_state.vd;
 801d2c0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801d2c2:	9203      	str	r2, [sp, #12]
			const volatile float vq_tmp = m_motor_state.vq;
 801d2c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d2c6:	9204      	str	r2, [sp, #16]
			const volatile float id_tmp = m_motor_state.id;
 801d2c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d2ca:	9205      	str	r2, [sp, #20]
			const volatile float iq_tmp = m_motor_state.iq;
 801d2cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d2ce:	9206      	str	r2, [sp, #24]
			m_samples.avg_current_tot += sqrtf(SQ(id_tmp) + SQ(iq_tmp));
 801d2d0:	eddd 6a05 	vldr	s13, [sp, #20]
 801d2d4:	ed9d 7a05 	vldr	s14, [sp, #20]
 801d2d8:	eddd 7a06 	vldr	s15, [sp, #24]
 801d2dc:	ed9d 0a06 	vldr	s0, [sp, #24]
 801d2e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d2e4:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d2e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801d2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2f0:	eef1 8ac0 	vsqrt.f32	s17, s0
 801d2f4:	d503      	bpl.n	801d2fe <timer_thread+0x26e>
 801d2f6:	9300      	str	r3, [sp, #0]
 801d2f8:	f008 fcd2 	bl	8025ca0 <sqrtf>
 801d2fc:	9b00      	ldr	r3, [sp, #0]
 801d2fe:	4a42      	ldr	r2, [pc, #264]	; (801d408 <timer_thread+0x378>)
 801d300:	edd2 7a01 	vldr	s15, [r2, #4]
 801d304:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801d308:	edc2 8a01 	vstr	s17, [r2, #4]
			m_samples.avg_voltage_tot += sqrtf(SQ(vd_tmp) + SQ(vq_tmp));
 801d30c:	eddd 6a03 	vldr	s13, [sp, #12]
 801d310:	ed9d 7a03 	vldr	s14, [sp, #12]
 801d314:	eddd 7a04 	vldr	s15, [sp, #16]
 801d318:	ed9d 0a04 	vldr	s0, [sp, #16]
 801d31c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d320:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d324:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801d328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d32c:	eef1 8ac0 	vsqrt.f32	s17, s0
 801d330:	d505      	bpl.n	801d33e <timer_thread+0x2ae>
 801d332:	9201      	str	r2, [sp, #4]
 801d334:	9300      	str	r3, [sp, #0]
 801d336:	f008 fcb3 	bl	8025ca0 <sqrtf>
 801d33a:	9a01      	ldr	r2, [sp, #4]
 801d33c:	9b00      	ldr	r3, [sp, #0]
 801d33e:	edd2 7a02 	vldr	s15, [r2, #8]
 801d342:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801d346:	edc2 8a02 	vstr	s17, [r2, #8]
			m_samples.sample_num++;
 801d34a:	6811      	ldr	r1, [r2, #0]
 801d34c:	3101      	adds	r1, #1
 801d34e:	6011      	str	r1, [r2, #0]
 801d350:	e71d      	b.n	801d18e <timer_thread+0xfe>
	return m_pll_speed / ((2.0 * M_PI) / 60.0);
 801d352:	4b2b      	ldr	r3, [pc, #172]	; (801d400 <timer_thread+0x370>)
 801d354:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801d40c <timer_thread+0x37c>
 801d358:	ed93 6a00 	vldr	s12, [r3]
	float error = m_speed_pid_set_rpm - rpm;
 801d35c:	4b2c      	ldr	r3, [pc, #176]	; (801d410 <timer_thread+0x380>)
	if (fabsf(m_speed_pid_set_rpm) < m_conf->s_pid_min_erpm) {
 801d35e:	682a      	ldr	r2, [r5, #0]
	float error = m_speed_pid_set_rpm - rpm;
 801d360:	edd3 8a00 	vldr	s17, [r3]
	if (fabsf(m_speed_pid_set_rpm) < m_conf->s_pid_min_erpm) {
 801d364:	edd3 7a00 	vldr	s15, [r3]
 801d368:	ed92 7a49 	vldr	s14, [r2, #292]	; 0x124
	return m_pll_speed / ((2.0 * M_PI) / 60.0);
 801d36c:	ee86 ba26 	vdiv.f32	s22, s12, s13
	if (fabsf(m_speed_pid_set_rpm) < m_conf->s_pid_min_erpm) {
 801d370:	eef0 7ae7 	vabs.f32	s15, s15
 801d374:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float error = m_speed_pid_set_rpm - rpm;
 801d37c:	ee78 8acb 	vsub.f32	s17, s17, s22
	if (fabsf(m_speed_pid_set_rpm) < m_conf->s_pid_min_erpm) {
 801d380:	d54c      	bpl.n	801d41c <timer_thread+0x38c>
		i_term = 0.0;
 801d382:	4b1c      	ldr	r3, [pc, #112]	; (801d3f4 <timer_thread+0x364>)
 801d384:	ed83 8a00 	vstr	s16, [r3]
		prev_error = error;
 801d388:	4b1b      	ldr	r3, [pc, #108]	; (801d3f8 <timer_thread+0x368>)
 801d38a:	edc3 8a00 	vstr	s17, [r3]
 801d38e:	e71e      	b.n	801d1ce <timer_thread+0x13e>
					m_phase_now_observer_override -= M_PI / 2.0;
 801d390:	ed98 7a00 	vldr	s14, [r8]
 801d394:	eddf 7a13 	vldr	s15, [pc, #76]	; 801d3e4 <timer_thread+0x354>
 801d398:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d39c:	edc8 7a00 	vstr	s15, [r8]
 801d3a0:	e6e1      	b.n	801d166 <timer_thread+0xd6>
			timer_thd_stop = false;
 801d3a2:	4a06      	ldr	r2, [pc, #24]	; (801d3bc <timer_thread+0x32c>)
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	7013      	strb	r3, [r2, #0]
}
 801d3a8:	b009      	add	sp, #36	; 0x24
 801d3aa:	ecbd 8b0a 	vpop	{d8-d12}
 801d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3b2:	bf00      	nop
 801d3b4:	20001a40 	.word	0x20001a40
 801d3b8:	08030690 	.word	0x08030690
 801d3bc:	2000ceac 	.word	0x2000ceac
 801d3c0:	2000cdd4 	.word	0x2000cdd4
 801d3c4:	2000cda0 	.word	0x2000cda0
 801d3c8:	2000ce90 	.word	0x2000ce90
 801d3cc:	2000ce94 	.word	0x2000ce94
 801d3d0:	00000000 	.word	0x00000000
 801d3d4:	40490fdb 	.word	0x40490fdb
 801d3d8:	42700000 	.word	0x42700000
 801d3dc:	3a83126f 	.word	0x3a83126f
 801d3e0:	38d1b717 	.word	0x38d1b717
 801d3e4:	3fc90fdb 	.word	0x3fc90fdb
 801d3e8:	2000ce50 	.word	0x2000ce50
 801d3ec:	2000ce84 	.word	0x2000ce84
 801d3f0:	2000cdc4 	.word	0x2000cdc4
 801d3f4:	2000cd94 	.word	0x2000cd94
 801d3f8:	2000cea4 	.word	0x2000cea4
 801d3fc:	2000ce48 	.word	0x2000ce48
 801d400:	2000ce60 	.word	0x2000ce60
 801d404:	2000ce4c 	.word	0x2000ce4c
 801d408:	2000ce6c 	.word	0x2000ce6c
 801d40c:	3dd67750 	.word	0x3dd67750
 801d410:	2000ce80 	.word	0x2000ce80
 801d414:	2000cda4 	.word	0x2000cda4
 801d418:	2000ce58 	.word	0x2000ce58
	p_term = error * m_conf->s_pid_kp * (1.0 / 20.0);
 801d41c:	edd2 ca46 	vldr	s25, [r2, #280]	; 0x118
	i_term += error * (m_conf->s_pid_ki * dt) * (1.0 / 20.0);
 801d420:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
	d_term = (error - prev_error) * (m_conf->s_pid_kd / dt) * (1.0 / 20.0);
 801d424:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
	i_term += error * (m_conf->s_pid_ki * dt) * (1.0 / 20.0);
 801d428:	4b33      	ldr	r3, [pc, #204]	; (801d4f8 <timer_thread+0x468>)
 801d42a:	ed9f ca34 	vldr	s24, [pc, #208]	; 801d4fc <timer_thread+0x46c>
 801d42e:	edd3 6a00 	vldr	s13, [r3]
	d_term = (error - prev_error) * (m_conf->s_pid_kd / dt) * (1.0 / 20.0);
 801d432:	4b33      	ldr	r3, [pc, #204]	; (801d500 <timer_thread+0x470>)
	utils_truncate_number(&i_term, -1.0, 1.0);
 801d434:	4830      	ldr	r0, [pc, #192]	; (801d4f8 <timer_thread+0x468>)
	d_term = (error - prev_error) * (m_conf->s_pid_kd / dt) * (1.0 / 20.0);
 801d436:	edd3 ba00 	vldr	s23, [r3]
 801d43a:	eec6 7a09 	vdiv.f32	s15, s12, s18
	i_term += error * (m_conf->s_pid_ki * dt) * (1.0 / 20.0);
 801d43e:	4603      	mov	r3, r0
 801d440:	ee27 7a09 	vmul.f32	s14, s14, s18
	d_term = (error - prev_error) * (m_conf->s_pid_kd / dt) * (1.0 / 20.0);
 801d444:	ee78 baeb 	vsub.f32	s23, s17, s23
	i_term += error * (m_conf->s_pid_ki * dt) * (1.0 / 20.0);
 801d448:	ee27 7a28 	vmul.f32	s14, s14, s17
	utils_truncate_number(&i_term, -1.0, 1.0);
 801d44c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	i_term += error * (m_conf->s_pid_ki * dt) * (1.0 / 20.0);
 801d450:	eee7 6a0c 	vfma.f32	s13, s14, s24
	utils_truncate_number(&i_term, -1.0, 1.0);
 801d454:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	i_term += error * (m_conf->s_pid_ki * dt) * (1.0 / 20.0);
 801d458:	edc3 6a00 	vstr	s13, [r3]
	d_term = (error - prev_error) * (m_conf->s_pid_kd / dt) * (1.0 / 20.0);
 801d45c:	ee6b baa7 	vmul.f32	s23, s23, s15
	utils_truncate_number(&i_term, -1.0, 1.0);
 801d460:	f7f8 fb4e 	bl	8015b00 <utils_truncate_number>
	float output = p_term + i_term + d_term;
 801d464:	4b24      	ldr	r3, [pc, #144]	; (801d4f8 <timer_thread+0x468>)
	p_term = error * m_conf->s_pid_kp * (1.0 / 20.0);
 801d466:	ee68 caac 	vmul.f32	s25, s17, s25
	float output = p_term + i_term + d_term;
 801d46a:	edd3 7a00 	vldr	s15, [r3]
	prev_error = error;
 801d46e:	4b24      	ldr	r3, [pc, #144]	; (801d500 <timer_thread+0x470>)
	float output = p_term + i_term + d_term;
 801d470:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801d474:	a808      	add	r0, sp, #32
	utils_truncate_number(&output, -1.0, 1.0);
 801d476:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	float output = p_term + i_term + d_term;
 801d47a:	eeeb 7a8c 	vfma.f32	s15, s23, s24
	utils_truncate_number(&output, -1.0, 1.0);
 801d47e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	float output = p_term + i_term + d_term;
 801d482:	ed60 7a01 	vstmdb	r0!, {s15}
	prev_error = error;
 801d486:	edc3 8a00 	vstr	s17, [r3]
	utils_truncate_number(&output, -1.0, 1.0);
 801d48a:	f7f8 fb39 	bl	8015b00 <utils_truncate_number>
	if (!m_conf->s_pid_allow_braking) {
 801d48e:	682b      	ldr	r3, [r5, #0]
 801d490:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 801d494:	b9fa      	cbnz	r2, 801d4d6 <timer_thread+0x446>
		if (rpm > 0.0 && output < 0.0) {
 801d496:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 801d49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d49e:	eddd 7a07 	vldr	s15, [sp, #28]
 801d4a2:	dd04      	ble.n	801d4ae <timer_thread+0x41e>
 801d4a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4ac:	d41d      	bmi.n	801d4ea <timer_thread+0x45a>
		if (rpm < 0.0 && output > 0.0) {
 801d4ae:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 801d4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4b6:	d506      	bpl.n	801d4c6 <timer_thread+0x436>
 801d4b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4c0:	bfc8      	it	gt
 801d4c2:	eef0 7a48 	vmovgt.f32	s15, s16
	m_iq_set = output * m_conf->lo_current_max;
 801d4c6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 801d4ca:	4b0e      	ldr	r3, [pc, #56]	; (801d504 <timer_thread+0x474>)
 801d4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4d0:	edc3 7a00 	vstr	s15, [r3]
 801d4d4:	e67b      	b.n	801d1ce <timer_thread+0x13e>
 801d4d6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 801d4da:	eddd 7a07 	vldr	s15, [sp, #28]
 801d4de:	4b09      	ldr	r3, [pc, #36]	; (801d504 <timer_thread+0x474>)
 801d4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4e4:	edc3 7a00 	vstr	s15, [r3]
 801d4e8:	e671      	b.n	801d1ce <timer_thread+0x13e>
		if (rpm > 0.0 && output < 0.0) {
 801d4ea:	eddf 7a07 	vldr	s15, [pc, #28]	; 801d508 <timer_thread+0x478>
 801d4ee:	e7ea      	b.n	801d4c6 <timer_thread+0x436>
			timer_thd_stop = false;
 801d4f0:	4a06      	ldr	r2, [pc, #24]	; (801d50c <timer_thread+0x47c>)
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	7013      	strb	r3, [r2, #0]
 801d4f6:	4770      	bx	lr
 801d4f8:	2000cd94 	.word	0x2000cd94
 801d4fc:	3d4ccccd 	.word	0x3d4ccccd
 801d500:	2000cea4 	.word	0x2000cea4
 801d504:	2000cdd0 	.word	0x2000cdd0
 801d508:	00000000 	.word	0x00000000
 801d50c:	2000ceac 	.word	0x2000ceac

0801d510 <mcpwm_foc_init>:
void mcpwm_foc_init(volatile mc_configuration *configuration) {
 801d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d514:	b0a9      	sub	sp, #164	; 0xa4
 801d516:	4681      	mov	r9, r0
	utils_sys_lock_cnt();
 801d518:	f7f8 fe02 	bl	8016120 <utils_sys_lock_cnt>
	m_conf = configuration;
 801d51c:	4bd1      	ldr	r3, [pc, #836]	; (801d864 <mcpwm_foc_init+0x354>)
	m_state = MC_STATE_OFF;
 801d51e:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 801d8ec <mcpwm_foc_init+0x3dc>
	m_conf = configuration;
 801d522:	f8c3 9000 	str.w	r9, [r3]
	m_init_done = false;
 801d526:	4bd0      	ldr	r3, [pc, #832]	; (801d868 <mcpwm_foc_init+0x358>)
	m_control_mode = CONTROL_MODE_NONE;
 801d528:	48d0      	ldr	r0, [pc, #832]	; (801d86c <mcpwm_foc_init+0x35c>)
	m_curr_samples = 0;
 801d52a:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 801d8f0 <mcpwm_foc_init+0x3e0>
	m_phase_now_override = 0.0;
 801d52e:	eddf 7ad0 	vldr	s15, [pc, #832]	; 801d870 <mcpwm_foc_init+0x360>
	m_phase_override = false;
 801d532:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 801d8f4 <mcpwm_foc_init+0x3e4>
	m_phase_now_override = 0.0;
 801d536:	f8df c3c0 	ldr.w	ip, [pc, #960]	; 801d8f8 <mcpwm_foc_init+0x3e8>
	m_duty_cycle_set = 0.0;
 801d53a:	f8df e3c0 	ldr.w	lr, [pc, #960]	; 801d8fc <mcpwm_foc_init+0x3ec>
	m_id_set = 0.0;
 801d53e:	4fcd      	ldr	r7, [pc, #820]	; (801d874 <mcpwm_foc_init+0x364>)
	m_iq_set = 0.0;
 801d540:	49cd      	ldr	r1, [pc, #820]	; (801d878 <mcpwm_foc_init+0x368>)
	m_openloop_speed = 0.0;
 801d542:	4ace      	ldr	r2, [pc, #824]	; (801d87c <mcpwm_foc_init+0x36c>)
	TIM_DeInit(TIM1);
 801d544:	4dce      	ldr	r5, [pc, #824]	; (801d880 <mcpwm_foc_init+0x370>)
	TIM_DeInit(TIM8);
 801d546:	4ecf      	ldr	r6, [pc, #828]	; (801d884 <mcpwm_foc_init+0x374>)
	m_init_done = false;
 801d548:	2400      	movs	r4, #0
 801d54a:	701c      	strb	r4, [r3, #0]
	m_curr0_sum = 0;
 801d54c:	4bce      	ldr	r3, [pc, #824]	; (801d888 <mcpwm_foc_init+0x378>)
	m_state = MC_STATE_OFF;
 801d54e:	f88a 4000 	strb.w	r4, [sl]
	m_control_mode = CONTROL_MODE_NONE;
 801d552:	f04f 0907 	mov.w	r9, #7
 801d556:	f880 9000 	strb.w	r9, [r0]
	m_curr0_sum = 0;
 801d55a:	601c      	str	r4, [r3, #0]
	m_curr1_sum = 0;
 801d55c:	4bcb      	ldr	r3, [pc, #812]	; (801d88c <mcpwm_foc_init+0x37c>)
	m_phase_now_encoder = 0.0;
 801d55e:	48cc      	ldr	r0, [pc, #816]	; (801d890 <mcpwm_foc_init+0x380>)
	m_curr1_sum = 0;
 801d560:	601c      	str	r4, [r3, #0]
	m_dccal_done = false;
 801d562:	4bcc      	ldr	r3, [pc, #816]	; (801d894 <mcpwm_foc_init+0x384>)
	m_curr_samples = 0;
 801d564:	f8cb 4000 	str.w	r4, [fp]
	m_dccal_done = false;
 801d568:	701c      	strb	r4, [r3, #0]
	m_output_on = false;
 801d56a:	4bcb      	ldr	r3, [pc, #812]	; (801d898 <mcpwm_foc_init+0x388>)
	m_phase_override = false;
 801d56c:	f888 4000 	strb.w	r4, [r8]
	m_phase_now_override = 0.0;
 801d570:	edcc 7a00 	vstr	s15, [ip]
	m_duty_cycle_set = 0.0;
 801d574:	edce 7a00 	vstr	s15, [lr]
	m_id_set = 0.0;
 801d578:	edc7 7a00 	vstr	s15, [r7]
	m_iq_set = 0.0;
 801d57c:	edc1 7a00 	vstr	s15, [r1]
	m_openloop_speed = 0.0;
 801d580:	edc2 7a00 	vstr	s15, [r2]
	m_output_on = false;
 801d584:	701c      	strb	r4, [r3, #0]
	m_pos_pid_set = 0.0;
 801d586:	4bc5      	ldr	r3, [pc, #788]	; (801d89c <mcpwm_foc_init+0x38c>)
	m_phase_now_observer = 0.0;
 801d588:	4ac5      	ldr	r2, [pc, #788]	; (801d8a0 <mcpwm_foc_init+0x390>)
	m_pos_pid_set = 0.0;
 801d58a:	edc3 7a00 	vstr	s15, [r3]
	m_speed_pid_set_rpm = 0.0;
 801d58e:	4bc5      	ldr	r3, [pc, #788]	; (801d8a4 <mcpwm_foc_init+0x394>)
	m_tachometer_abs = 0;
 801d590:	f8df c36c 	ldr.w	ip, [pc, #876]	; 801d900 <mcpwm_foc_init+0x3f0>
	m_speed_pid_set_rpm = 0.0;
 801d594:	edc3 7a00 	vstr	s15, [r3]
	m_phase_now_observer = 0.0;
 801d598:	edc2 7a00 	vstr	s15, [r2]
	m_phase_now_observer_override = 0.0;
 801d59c:	4ac2      	ldr	r2, [pc, #776]	; (801d8a8 <mcpwm_foc_init+0x398>)
	m_phase_now_encoder_no_index = 0.0;
 801d59e:	4bc3      	ldr	r3, [pc, #780]	; (801d8ac <mcpwm_foc_init+0x39c>)
	m_phase_now_observer_override = 0.0;
 801d5a0:	edc2 7a00 	vstr	s15, [r2]
	m_phase_observer_override = false;
 801d5a4:	4ac2      	ldr	r2, [pc, #776]	; (801d8b0 <mcpwm_foc_init+0x3a0>)
	last_inj_adc_isr_duration = 0;
 801d5a6:	f8df e35c 	ldr.w	lr, [pc, #860]	; 801d904 <mcpwm_foc_init+0x3f4>
	m_phase_observer_override = false;
 801d5aa:	7014      	strb	r4, [r2, #0]
	m_phase_now_encoder = 0.0;
 801d5ac:	edc0 7a00 	vstr	s15, [r0]
	m_phase_now_encoder_no_index = 0.0;
 801d5b0:	edc3 7a00 	vstr	s15, [r3]
	m_observer_x1 = 0.0;
 801d5b4:	4bbf      	ldr	r3, [pc, #764]	; (801d8b4 <mcpwm_foc_init+0x3a4>)
	m_pll_phase = 0.0;
 801d5b6:	f8df a350 	ldr.w	sl, [pc, #848]	; 801d908 <mcpwm_foc_init+0x3f8>
	m_observer_x1 = 0.0;
 801d5ba:	edc3 7a00 	vstr	s15, [r3]
	m_observer_x2 = 0.0;
 801d5be:	4bbe      	ldr	r3, [pc, #760]	; (801d8b8 <mcpwm_foc_init+0x3a8>)
	m_pll_speed = 0.0;
 801d5c0:	f8df 9348 	ldr.w	r9, [pc, #840]	; 801d90c <mcpwm_foc_init+0x3fc>
	m_observer_x2 = 0.0;
 801d5c4:	edc3 7a00 	vstr	s15, [r3]
	m_tachometer = 0;
 801d5c8:	f8df 8344 	ldr.w	r8, [pc, #836]	; 801d910 <mcpwm_foc_init+0x400>
	m_gamma_now = 0.0;
 801d5cc:	4bbb      	ldr	r3, [pc, #748]	; (801d8bc <mcpwm_foc_init+0x3ac>)
	m_pos_pid_now = 0.0;
 801d5ce:	4fbc      	ldr	r7, [pc, #752]	; (801d8c0 <mcpwm_foc_init+0x3b0>)
	memset((void*)&m_motor_state, 0, sizeof(motor_state_t));
 801d5d0:	48bc      	ldr	r0, [pc, #752]	; (801d8c4 <mcpwm_foc_init+0x3b4>)
	m_pll_phase = 0.0;
 801d5d2:	edca 7a00 	vstr	s15, [sl]
	memset((void*)&m_motor_state, 0, sizeof(motor_state_t));
 801d5d6:	4621      	mov	r1, r4
 801d5d8:	2260      	movs	r2, #96	; 0x60
	m_pll_speed = 0.0;
 801d5da:	edc9 7a00 	vstr	s15, [r9]
	m_tachometer = 0;
 801d5de:	f8c8 4000 	str.w	r4, [r8]
	m_tachometer_abs = 0;
 801d5e2:	f8cc 4000 	str.w	r4, [ip]
	last_inj_adc_isr_duration = 0;
 801d5e6:	edce 7a00 	vstr	s15, [lr]
	m_pos_pid_now = 0.0;
 801d5ea:	edc7 7a00 	vstr	s15, [r7]
	m_gamma_now = 0.0;
 801d5ee:	edc3 7a00 	vstr	s15, [r3]
	memset((void*)&m_motor_state, 0, sizeof(motor_state_t));
 801d5f2:	f00a fb45 	bl	8027c80 <memset>
	memset((void*)&m_samples, 0, sizeof(mc_sample_t));
 801d5f6:	4bb4      	ldr	r3, [pc, #720]	; (801d8c8 <mcpwm_foc_init+0x3b8>)
	TIM_DeInit(TIM1);
 801d5f8:	4628      	mov	r0, r5
	memset((void*)&m_samples, 0, sizeof(mc_sample_t));
 801d5fa:	601c      	str	r4, [r3, #0]
 801d5fc:	605c      	str	r4, [r3, #4]
 801d5fe:	609c      	str	r4, [r3, #8]
 801d600:	60dc      	str	r4, [r3, #12]
 801d602:	611c      	str	r4, [r3, #16]
	TIM_DeInit(TIM1);
 801d604:	f007 f9b4 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM8);
 801d608:	4630      	mov	r0, r6
 801d60a:	f007 f9b1 	bl	8024970 <TIM_DeInit>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 801d60e:	2101      	movs	r1, #1
	TIM1->CNT = 0;
 801d610:	626c      	str	r4, [r5, #36]	; 0x24
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 801d612:	4608      	mov	r0, r1
	TIM8->CNT = 0;
 801d614:	6274      	str	r4, [r6, #36]	; 0x24
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 801d616:	f007 f963 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801d61a:	4b92      	ldr	r3, [pc, #584]	; (801d864 <mcpwm_foc_init+0x354>)
 801d61c:	4aab      	ldr	r2, [pc, #684]	; (801d8cc <mcpwm_foc_init+0x3bc>)
 801d61e:	681b      	ldr	r3, [r3, #0]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801d620:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801d624:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801d628:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801d62c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 801d630:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801d632:	ee17 3a90 	vmov	r3, s15
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 801d636:	a903      	add	r1, sp, #12
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 801d638:	f04f 0720 	mov.w	r7, #32
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801d63c:	fb92 f3f3 	sdiv	r3, r2, r3
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 801d640:	f88d 4016 	strb.w	r4, [sp, #22]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 801d644:	f8ad 700e 	strh.w	r7, [sp, #14]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801d648:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 801d64a:	f007 fa71 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 801d64e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 801d650:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 801d654:	085b      	lsrs	r3, r3, #1
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 801d656:	2701      	movs	r7, #1
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 801d658:	f04f 0260 	mov.w	r2, #96	; 0x60
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 801d65c:	4628      	mov	r0, r5
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 801d65e:	f04f 0904 	mov.w	r9, #4
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 801d662:	f44f 7a80 	mov.w	sl, #256	; 0x100
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 801d666:	a90e      	add	r1, sp, #56	; 0x38
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 801d668:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801d66a:	f44f 7300 	mov.w	r3, #512	; 0x200
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 801d66e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801d672:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 801d676:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 801d67a:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 801d67e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 801d682:	f8ad a048 	strh.w	sl, [sp, #72]	; 0x48
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 801d686:	f007 facb 	bl	8024c20 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 801d68a:	4628      	mov	r0, r5
 801d68c:	a90e      	add	r1, sp, #56	; 0x38
 801d68e:	f007 fb07 	bl	8024ca0 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 801d692:	4628      	mov	r0, r5
 801d694:	a90e      	add	r1, sp, #56	; 0x38
 801d696:	f007 fb43 	bl	8024d20 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 801d69a:	4628      	mov	r0, r5
 801d69c:	a90e      	add	r1, sp, #56	; 0x38
 801d69e:	f007 fb7f 	bl	8024da0 <TIM_OC4Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	2108      	movs	r1, #8
 801d6a6:	f007 fbdb 	bl	8024e60 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801d6aa:	4628      	mov	r0, r5
 801d6ac:	2108      	movs	r1, #8
 801d6ae:	f007 fbdf 	bl	8024e70 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801d6b2:	4628      	mov	r0, r5
 801d6b4:	2108      	movs	r1, #8
 801d6b6:	f007 fbeb 	bl	8024e90 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801d6ba:	4628      	mov	r0, r5
 801d6bc:	2108      	movs	r1, #8
 801d6be:	f007 fbef 	bl	8024ea0 <TIM_OC4PreloadConfig>
	TIM_BDTRInitStructure.TIM_DeadTime = HW_DEAD_TIME_VALUE;
 801d6c2:	233c      	movs	r3, #60	; 0x3c
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 801d6c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 801d6c8:	4628      	mov	r0, r5
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 801d6ca:	f44f 6880 	mov.w	r8, #1024	; 0x400
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 801d6ce:	a906      	add	r1, sp, #24
	TIM_BDTRInitStructure.TIM_DeadTime = HW_DEAD_TIME_VALUE;
 801d6d0:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 801d6d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 801d6d8:	f8ad 2018 	strh.w	r2, [sp, #24]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 801d6dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 801d6e0:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 801d6e4:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 801d6e8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 801d6ec:	f8ad 801a 	strh.w	r8, [sp, #26]
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 801d6f0:	f007 fc16 	bl	8024f20 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 801d6f4:	4628      	mov	r0, r5
 801d6f6:	4639      	mov	r1, r7
 801d6f8:	f007 fc3a 	bl	8024f70 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 801d6fc:	4628      	mov	r0, r5
 801d6fe:	4639      	mov	r1, r7
 801d700:	f007 fa6e 	bl	8024be0 <TIM_ARRPreloadConfig>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 801d704:	4639      	mov	r1, r7
 801d706:	4872      	ldr	r0, [pc, #456]	; (801d8d0 <mcpwm_foc_init+0x3c0>)
 801d708:	f007 f8ca 	bl	80248a0 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 801d70c:	4639      	mov	r1, r7
 801d70e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 801d712:	f007 f8e5 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),
 801d716:	4623      	mov	r3, r4
 801d718:	4a6e      	ldr	r2, [pc, #440]	; (801d8d4 <mcpwm_foc_init+0x3c4>)
 801d71a:	486f      	ldr	r0, [pc, #444]	; (801d8d8 <mcpwm_foc_init+0x3c8>)
 801d71c:	2103      	movs	r1, #3
 801d71e:	f7f1 fedf 	bl	800f4e0 <dmaStreamAllocate>
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 801d722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d726:	9320      	str	r3, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 801d728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 801d72c:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801d914 <mcpwm_foc_init+0x404>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 801d730:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 801d918 <mcpwm_foc_init+0x408>
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801d734:	4869      	ldr	r0, [pc, #420]	; (801d8dc <mcpwm_foc_init+0x3cc>)
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 801d736:	9321      	str	r3, [sp, #132]	; 0x84
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 801d738:	220c      	movs	r2, #12
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 801d73a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801d73e:	a919      	add	r1, sp, #100	; 0x64
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 801d740:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 801d744:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 801d748:	9323      	str	r3, [sp, #140]	; 0x8c
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 801d74a:	921d      	str	r2, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 801d74c:	9419      	str	r4, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 801d74e:	941c      	str	r4, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801d750:	941e      	str	r4, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 801d752:	9424      	str	r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 801d754:	9425      	str	r4, [sp, #148]	; 0x94
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 801d756:	9426      	str	r4, [sp, #152]	; 0x98
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801d758:	9427      	str	r4, [sp, #156]	; 0x9c
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801d75a:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 801d75e:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801d762:	f006 ff15 	bl	8024590 <DMA_Init>
	DMA_Cmd(DMA2_Stream4, ENABLE);
 801d766:	4639      	mov	r1, r7
 801d768:	485c      	ldr	r0, [pc, #368]	; (801d8dc <mcpwm_foc_init+0x3cc>)
 801d76a:	f006 ff41 	bl	80245f0 <DMA_Cmd>
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 801d76e:	2110      	movs	r1, #16
 801d770:	463a      	mov	r2, r7
 801d772:	485a      	ldr	r0, [pc, #360]	; (801d8dc <mcpwm_foc_init+0x3cc>)
 801d774:	f006 ff4c 	bl	8024610 <DMA_ITConfig>
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 801d778:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 801d77a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInit(&ADC_CommonInitStructure);
 801d77e:	a80a      	add	r0, sp, #40	; 0x28
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 801d780:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 801d782:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 801d784:	920a      	str	r2, [sp, #40]	; 0x28
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 801d786:	930c      	str	r3, [sp, #48]	; 0x30
	ADC_CommonInit(&ADC_CommonInitStructure);
 801d788:	f006 fd6a 	bl	8024260 <ADC_CommonInit>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 801d78c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 801d790:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
	ADC_Init(ADC1, &ADC_InitStructure);
 801d794:	a913      	add	r1, sp, #76	; 0x4c
 801d796:	4852      	ldr	r0, [pc, #328]	; (801d8e0 <mcpwm_foc_init+0x3d0>)
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 801d798:	9215      	str	r2, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 801d79a:	9316      	str	r3, [sp, #88]	; 0x58
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 801d79c:	9413      	str	r4, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 801d79e:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 801d7a2:	9417      	str	r4, [sp, #92]	; 0x5c
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 801d7a4:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 801d7a8:	f88d 9060 	strb.w	r9, [sp, #96]	; 0x60
	ADC_Init(ADC1, &ADC_InitStructure);
 801d7ac:	f006 fd30 	bl	8024210 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 801d7b0:	a913      	add	r1, sp, #76	; 0x4c
 801d7b2:	484c      	ldr	r0, [pc, #304]	; (801d8e4 <mcpwm_foc_init+0x3d4>)
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 801d7b4:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_ExternalTrigConv = 0;
 801d7b6:	9416      	str	r4, [sp, #88]	; 0x58
	ADC_Init(ADC2, &ADC_InitStructure);
 801d7b8:	f006 fd2a 	bl	8024210 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 801d7bc:	a913      	add	r1, sp, #76	; 0x4c
 801d7be:	484a      	ldr	r0, [pc, #296]	; (801d8e8 <mcpwm_foc_init+0x3d8>)
 801d7c0:	f006 fd26 	bl	8024210 <ADC_Init>
	ADC_TempSensorVrefintCmd(ENABLE);
 801d7c4:	4638      	mov	r0, r7
 801d7c6:	f006 fd73 	bl	80242b0 <ADC_TempSensorVrefintCmd>
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 801d7ca:	4638      	mov	r0, r7
 801d7cc:	f006 fdc8 	bl	8024360 <ADC_MultiModeDMARequestAfterLastTransferCmd>
	hw_setup_adc_channels();
 801d7d0:	f002 fec6 	bl	8020560 <hw_setup_adc_channels>
	ADC_Cmd(ADC1, ENABLE);
 801d7d4:	4639      	mov	r1, r7
 801d7d6:	4842      	ldr	r0, [pc, #264]	; (801d8e0 <mcpwm_foc_init+0x3d0>)
 801d7d8:	f006 fd5a 	bl	8024290 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 801d7dc:	4639      	mov	r1, r7
 801d7de:	4841      	ldr	r0, [pc, #260]	; (801d8e4 <mcpwm_foc_init+0x3d4>)
 801d7e0:	f006 fd56 	bl	8024290 <ADC_Cmd>
	ADC_Cmd(ADC3, ENABLE);
 801d7e4:	4639      	mov	r1, r7
 801d7e6:	4840      	ldr	r0, [pc, #256]	; (801d8e8 <mcpwm_foc_init+0x3d8>)
 801d7e8:	f006 fd52 	bl	8024290 <ADC_Cmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 801d7ec:	4639      	mov	r1, r7
 801d7ee:	2002      	movs	r0, #2
 801d7f0:	f007 f876 	bl	80248e0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 801d7f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 801d7f8:	a903      	add	r1, sp, #12
 801d7fa:	4630      	mov	r0, r6
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801d7fc:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 801d800:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801d804:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 801d808:	f88d 4016 	strb.w	r4, [sp, #22]
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 801d80c:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 801d80e:	f007 f98f 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 801d812:	f04f 0260 	mov.w	r2, #96	; 0x60
	TIM_OCInitStructure.TIM_Pulse = 500;
 801d816:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
 801d81a:	a90e      	add	r1, sp, #56	; 0x38
 801d81c:	4630      	mov	r0, r6
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 801d81e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801d822:	f44f 7200 	mov.w	r2, #512	; 0x200
	TIM_OCInitStructure.TIM_Pulse = 500;
 801d826:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801d828:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 801d82c:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 801d830:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 801d834:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 801d838:	f8ad a048 	strh.w	sl, [sp, #72]	; 0x48
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
 801d83c:	f007 f9f0 	bl	8024c20 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 801d840:	4630      	mov	r0, r6
 801d842:	2108      	movs	r1, #8
 801d844:	f007 fb0c 	bl	8024e60 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);
 801d848:	a90e      	add	r1, sp, #56	; 0x38
 801d84a:	4630      	mov	r0, r6
 801d84c:	f007 fa28 	bl	8024ca0 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 801d850:	4630      	mov	r0, r6
 801d852:	2108      	movs	r1, #8
 801d854:	f007 fb0c 	bl	8024e70 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);
 801d858:	a90e      	add	r1, sp, #56	; 0x38
 801d85a:	4630      	mov	r0, r6
 801d85c:	f007 fa60 	bl	8024d20 <TIM_OC3Init>
 801d860:	e05c      	b.n	801d91c <mcpwm_foc_init+0x40c>
 801d862:	bf00      	nop
 801d864:	2000cda0 	.word	0x2000cda0
 801d868:	2000cdcc 	.word	0x2000cdcc
 801d86c:	2000cda4 	.word	0x2000cda4
 801d870:	00000000 	.word	0x00000000
 801d874:	2000cdc8 	.word	0x2000cdc8
 801d878:	2000cdd0 	.word	0x2000cdd0
 801d87c:	2000ce3c 	.word	0x2000ce3c
 801d880:	40010000 	.word	0x40010000
 801d884:	40010400 	.word	0x40010400
 801d888:	2000cdac 	.word	0x2000cdac
 801d88c:	2000cdb4 	.word	0x2000cdb4
 801d890:	2000ce44 	.word	0x2000ce44
 801d894:	2000cdbc 	.word	0x2000cdbc
 801d898:	2000ce40 	.word	0x2000ce40
 801d89c:	2000ce68 	.word	0x2000ce68
 801d8a0:	2000ce4c 	.word	0x2000ce4c
 801d8a4:	2000ce80 	.word	0x2000ce80
 801d8a8:	2000ce50 	.word	0x2000ce50
 801d8ac:	2000ce48 	.word	0x2000ce48
 801d8b0:	2000ce58 	.word	0x2000ce58
 801d8b4:	2000ce34 	.word	0x2000ce34
 801d8b8:	2000ce38 	.word	0x2000ce38
 801d8bc:	2000cdc4 	.word	0x2000cdc4
 801d8c0:	2000ce64 	.word	0x2000ce64
 801d8c4:	2000cdd4 	.word	0x2000cdd4
 801d8c8:	2000ce6c 	.word	0x2000ce6c
 801d8cc:	0a037a00 	.word	0x0a037a00
 801d8d0:	00400005 	.word	0x00400005
 801d8d4:	0801f031 	.word	0x0801f031
 801d8d8:	0802eb10 	.word	0x0802eb10
 801d8dc:	40026470 	.word	0x40026470
 801d8e0:	40012000 	.word	0x40012000
 801d8e4:	40012100 	.word	0x40012100
 801d8e8:	40012200 	.word	0x40012200
 801d8ec:	2000ce84 	.word	0x2000ce84
 801d8f0:	2000cdb8 	.word	0x2000cdb8
 801d8f4:	2000ce59 	.word	0x2000ce59
 801d8f8:	2000ce54 	.word	0x2000ce54
 801d8fc:	2000cdc0 	.word	0x2000cdc0
 801d900:	2000ce8c 	.word	0x2000ce8c
 801d904:	2000cd9c 	.word	0x2000cd9c
 801d908:	2000ce5c 	.word	0x2000ce5c
 801d90c:	2000ce60 	.word	0x2000ce60
 801d910:	2000ce88 	.word	0x2000ce88
 801d914:	2000c034 	.word	0x2000c034
 801d918:	40012308 	.word	0x40012308
	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 801d91c:	4630      	mov	r0, r6
 801d91e:	2108      	movs	r1, #8
 801d920:	f007 fab6 	bl	8024e90 <TIM_OC3PreloadConfig>
	TIM_ARRPreloadConfig(TIM8, ENABLE);
 801d924:	4639      	mov	r1, r7
 801d926:	4630      	mov	r0, r6
 801d928:	f007 f95a 	bl	8024be0 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 801d92c:	4639      	mov	r1, r7
 801d92e:	4630      	mov	r0, r6
 801d930:	f007 fb1e 	bl	8024f70 <TIM_CCPreloadControl>
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 801d934:	4639      	mov	r1, r7
 801d936:	4630      	mov	r0, r6
 801d938:	f007 fb0a 	bl	8024f50 <TIM_CtrlPWMOutputs>
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 801d93c:	4628      	mov	r0, r5
 801d93e:	2120      	movs	r1, #32
 801d940:	f007 fb66 	bl	8025010 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 801d944:	4628      	mov	r0, r5
 801d946:	2180      	movs	r1, #128	; 0x80
 801d948:	f007 fb82 	bl	8025050 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 801d94c:	4621      	mov	r1, r4
 801d94e:	4630      	mov	r0, r6
 801d950:	f007 fb56 	bl	8025000 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 801d954:	4649      	mov	r1, r9
 801d956:	4630      	mov	r0, r6
 801d958:	f007 fb6a 	bl	8025030 <TIM_SelectSlaveMode>
	TIM_Cmd(TIM1, ENABLE);
 801d95c:	4628      	mov	r0, r5
 801d95e:	4639      	mov	r1, r7
 801d960:	f007 f94e 	bl	8024c00 <TIM_Cmd>
	TIM_Cmd(TIM8, ENABLE);
 801d964:	4639      	mov	r1, r7
 801d966:	4630      	mov	r0, r6
 801d968:	f007 f94a 	bl	8024c00 <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 801d96c:	4628      	mov	r0, r5
 801d96e:	4639      	mov	r1, r7
 801d970:	f007 faee 	bl	8024f50 <TIM_CtrlPWMOutputs>
	stop_pwm_hw();
 801d974:	f7ff fa1c 	bl	801cdb0 <stop_pwm_hw>
	TIMER_UPDATE_SAMP(MCPWM_FOC_CURRENT_SAMP_OFFSET);
 801d978:	2102      	movs	r1, #2
	TIM_ITConfig(TIM8, TIM_IT_CC1, ENABLE);
 801d97a:	463a      	mov	r2, r7
	TIMER_UPDATE_SAMP(MCPWM_FOC_CURRENT_SAMP_OFFSET);
 801d97c:	6371      	str	r1, [r6, #52]	; 0x34
	TIM_ITConfig(TIM8, TIM_IT_CC1, ENABLE);
 801d97e:	4630      	mov	r0, r6
 801d980:	f007 fb36 	bl	8024ff0 <TIM_ITConfig>
	nvicEnableVector(TIM8_CC_IRQn, 6);
 801d984:	2106      	movs	r1, #6
 801d986:	202e      	movs	r0, #46	; 0x2e
 801d988:	f7f1 fbba 	bl	800f100 <nvicEnableVector>
	ENABLE_GATE();
 801d98c:	f505 3584 	add.w	r5, r5, #67584	; 0x10800
	utils_sys_unlock_cnt();
 801d990:	f7f8 fbd6 	bl	8016140 <utils_sys_unlock_cnt>
	DCCAL_OFF();
 801d994:	4b36      	ldr	r3, [pc, #216]	; (801da70 <mcpwm_foc_init+0x560>)
	ENABLE_GATE();
 801d996:	f8a5 8018 	strh.w	r8, [r5, #24]
	DCCAL_OFF();
 801d99a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d99e:	835a      	strh	r2, [r3, #26]
	DCCAL_ON();
 801d9a0:	f241 3489 	movw	r4, #5001	; 0x1389
 801d9a4:	831a      	strh	r2, [r3, #24]
 801d9a6:	e003      	b.n	801d9b0 <mcpwm_foc_init+0x4a0>
		chThdSleepMilliseconds(1);
 801d9a8:	f7f0 f81a 	bl	800d9e0 <chThdSleep>
		if (cnt > 5000) {
 801d9ac:	3c01      	subs	r4, #1
 801d9ae:	d004      	beq.n	801d9ba <mcpwm_foc_init+0x4aa>
	while(IS_DRV_FAULT()){
 801d9b0:	692b      	ldr	r3, [r5, #16]
 801d9b2:	04db      	lsls	r3, r3, #19
		chThdSleepMilliseconds(1);
 801d9b4:	f04f 000a 	mov.w	r0, #10
	while(IS_DRV_FAULT()){
 801d9b8:	d5f6      	bpl.n	801d9a8 <mcpwm_foc_init+0x498>
	chThdSleepMilliseconds(1000);
 801d9ba:	f242 7010 	movw	r0, #10000	; 0x2710
 801d9be:	f7f0 f80f 	bl	800d9e0 <chThdSleep>
	m_curr0_sum = 0;
 801d9c2:	4a2c      	ldr	r2, [pc, #176]	; (801da74 <mcpwm_foc_init+0x564>)
 801d9c4:	2300      	movs	r3, #0
 801d9c6:	6013      	str	r3, [r2, #0]
	m_curr1_sum = 0;
 801d9c8:	4a2b      	ldr	r2, [pc, #172]	; (801da78 <mcpwm_foc_init+0x568>)
 801d9ca:	6013      	str	r3, [r2, #0]
	m_curr_samples = 0;
 801d9cc:	f8cb 3000 	str.w	r3, [fp]
	while(m_curr_samples < 4000) {};
 801d9d0:	f8db 3000 	ldr.w	r3, [fp]
 801d9d4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 801d9d8:	dbfa      	blt.n	801d9d0 <mcpwm_foc_init+0x4c0>
	m_curr0_offset = m_curr0_sum / m_curr_samples;
 801d9da:	4a28      	ldr	r2, [pc, #160]	; (801da7c <mcpwm_foc_init+0x56c>)
 801d9dc:	4b25      	ldr	r3, [pc, #148]	; (801da74 <mcpwm_foc_init+0x564>)
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	f8db 1000 	ldr.w	r1, [fp]
 801d9e4:	fb93 f3f1 	sdiv	r3, r3, r1
	m_curr1_offset = m_curr1_sum / m_curr_samples;
 801d9e8:	4925      	ldr	r1, [pc, #148]	; (801da80 <mcpwm_foc_init+0x570>)
	m_curr0_offset = m_curr0_sum / m_curr_samples;
 801d9ea:	6013      	str	r3, [r2, #0]
	m_curr1_offset = m_curr1_sum / m_curr_samples;
 801d9ec:	4b22      	ldr	r3, [pc, #136]	; (801da78 <mcpwm_foc_init+0x568>)
	DCCAL_OFF();
 801d9ee:	4a20      	ldr	r2, [pc, #128]	; (801da70 <mcpwm_foc_init+0x560>)
	m_curr1_offset = m_curr1_sum / m_curr_samples;
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	f8db 0000 	ldr.w	r0, [fp]
 801d9f6:	fb93 f3f0 	sdiv	r3, r3, r0
	m_dccal_done = true;
 801d9fa:	2401      	movs	r4, #1
	m_curr1_offset = m_curr1_sum / m_curr_samples;
 801d9fc:	600b      	str	r3, [r1, #0]
	DCCAL_OFF();
 801d9fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	m_dccal_done = true;
 801da02:	4b20      	ldr	r3, [pc, #128]	; (801da84 <mcpwm_foc_init+0x574>)
	DCCAL_OFF();
 801da04:	8350      	strh	r0, [r2, #26]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 801da06:	4621      	mov	r1, r4
 801da08:	2040      	movs	r0, #64	; 0x40
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801da0a:	2500      	movs	r5, #0
	m_dccal_done = true;
 801da0c:	701c      	strb	r4, [r3, #0]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 801da0e:	f006 ff57 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 801da12:	f04f 32ff 	mov.w	r2, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = (uint16_t)(((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1);
 801da16:	2307      	movs	r3, #7
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 801da18:	a903      	add	r1, sp, #12
 801da1a:	481b      	ldr	r0, [pc, #108]	; (801da88 <mcpwm_foc_init+0x578>)
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 801da1c:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = (uint16_t)(((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1);
 801da1e:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801da22:	f8ad 5014 	strh.w	r5, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 801da26:	f8ad 500e 	strh.w	r5, [sp, #14]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 801da2a:	f007 f881 	bl	8024b30 <TIM_TimeBaseInit>
	TIM_Cmd(TIM12, ENABLE);
 801da2e:	4621      	mov	r1, r4
 801da30:	4815      	ldr	r0, [pc, #84]	; (801da88 <mcpwm_foc_init+0x578>)
 801da32:	f007 f8e5 	bl	8024c00 <TIM_Cmd>
	timer_thd_stop = false;
 801da36:	4a15      	ldr	r2, [pc, #84]	; (801da8c <mcpwm_foc_init+0x57c>)
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801da38:	4b15      	ldr	r3, [pc, #84]	; (801da90 <mcpwm_foc_init+0x580>)
 801da3a:	9500      	str	r5, [sp, #0]
 801da3c:	f640 1198 	movw	r1, #2456	; 0x998
	timer_thd_stop = false;
 801da40:	7015      	strb	r5, [r2, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801da42:	4814      	ldr	r0, [pc, #80]	; (801da94 <mcpwm_foc_init+0x584>)
 801da44:	2240      	movs	r2, #64	; 0x40
 801da46:	f7ef ff93 	bl	800d970 <chThdCreateStatic>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 801da4a:	4621      	mov	r1, r4
 801da4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801da50:	f006 ff36 	bl	80248c0 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 801da54:	4628      	mov	r0, r5
 801da56:	f007 fb3b 	bl	80250d0 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 801da5a:	20ff      	movs	r0, #255	; 0xff
 801da5c:	f007 fb48 	bl	80250f0 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 801da60:	2064      	movs	r0, #100	; 0x64
 801da62:	f007 fb65 	bl	8025130 <WWDG_Enable>
	m_init_done = true;
 801da66:	4b0c      	ldr	r3, [pc, #48]	; (801da98 <mcpwm_foc_init+0x588>)
 801da68:	701c      	strb	r4, [r3, #0]
}
 801da6a:	b029      	add	sp, #164	; 0xa4
 801da6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da70:	40020400 	.word	0x40020400
 801da74:	2000cdac 	.word	0x2000cdac
 801da78:	2000cdb4 	.word	0x2000cdb4
 801da7c:	2000cda8 	.word	0x2000cda8
 801da80:	2000cdb0 	.word	0x2000cdb0
 801da84:	2000cdbc 	.word	0x2000cdbc
 801da88:	40001800 	.word	0x40001800
 801da8c:	2000ceac 	.word	0x2000ceac
 801da90:	0801d091 	.word	0x0801d091
 801da94:	2000ceb0 	.word	0x2000ceb0
 801da98:	2000cdcc 	.word	0x2000cdcc
 801da9c:	00000000 	.word	0x00000000

0801daa0 <mcpwm_foc_deinit>:
	m_init_done = false;
 801daa0:	4b13      	ldr	r3, [pc, #76]	; (801daf0 <mcpwm_foc_deinit+0x50>)
void mcpwm_foc_deinit(void) {
 801daa2:	b510      	push	{r4, lr}
	m_init_done = false;
 801daa4:	2200      	movs	r2, #0
	timer_thd_stop = true;
 801daa6:	4c13      	ldr	r4, [pc, #76]	; (801daf4 <mcpwm_foc_deinit+0x54>)
	m_init_done = false;
 801daa8:	701a      	strb	r2, [r3, #0]
	WWDG_DeInit();
 801daaa:	f007 fb01 	bl	80250b0 <WWDG_DeInit>
	timer_thd_stop = true;
 801daae:	2301      	movs	r3, #1
 801dab0:	7023      	strb	r3, [r4, #0]
	while (timer_thd_stop) {
 801dab2:	7823      	ldrb	r3, [r4, #0]
 801dab4:	b12b      	cbz	r3, 801dac2 <mcpwm_foc_deinit+0x22>
		chThdSleepMilliseconds(1);
 801dab6:	200a      	movs	r0, #10
 801dab8:	f7ef ff92 	bl	800d9e0 <chThdSleep>
	while (timer_thd_stop) {
 801dabc:	7823      	ldrb	r3, [r4, #0]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d1f9      	bne.n	801dab6 <mcpwm_foc_deinit+0x16>
	TIM_DeInit(TIM1);
 801dac2:	480d      	ldr	r0, [pc, #52]	; (801daf8 <mcpwm_foc_deinit+0x58>)
 801dac4:	f006 ff54 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM8);
 801dac8:	480c      	ldr	r0, [pc, #48]	; (801dafc <mcpwm_foc_deinit+0x5c>)
 801daca:	f006 ff51 	bl	8024970 <TIM_DeInit>
	TIM_DeInit(TIM12);
 801dace:	480c      	ldr	r0, [pc, #48]	; (801db00 <mcpwm_foc_deinit+0x60>)
 801dad0:	f006 ff4e 	bl	8024970 <TIM_DeInit>
	ADC_DeInit();
 801dad4:	f006 fb8c 	bl	80241f0 <ADC_DeInit>
	DMA_DeInit(DMA2_Stream4);
 801dad8:	480a      	ldr	r0, [pc, #40]	; (801db04 <mcpwm_foc_deinit+0x64>)
 801dada:	f006 fcc1 	bl	8024460 <DMA_DeInit>
	nvicDisableVector(ADC_IRQn);
 801dade:	2012      	movs	r0, #18
 801dae0:	f7f1 fb2e 	bl	800f140 <nvicDisableVector>
	dmaStreamRelease(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)));
 801dae4:	4808      	ldr	r0, [pc, #32]	; (801db08 <mcpwm_foc_deinit+0x68>)
}
 801dae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dmaStreamRelease(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)));
 801daea:	f7f1 bd41 	b.w	800f570 <dmaStreamRelease>
 801daee:	bf00      	nop
 801daf0:	2000cdcc 	.word	0x2000cdcc
 801daf4:	2000ceac 	.word	0x2000ceac
 801daf8:	40010000 	.word	0x40010000
 801dafc:	40010400 	.word	0x40010400
 801db00:	40001800 	.word	0x40001800
 801db04:	40026470 	.word	0x40026470
 801db08:	0802eb10 	.word	0x0802eb10
 801db0c:	00000000 	.word	0x00000000

0801db10 <mcpwm_foc_init_done>:
	return m_init_done;
 801db10:	4b01      	ldr	r3, [pc, #4]	; (801db18 <mcpwm_foc_init_done+0x8>)
 801db12:	7818      	ldrb	r0, [r3, #0]
}
 801db14:	4770      	bx	lr
 801db16:	bf00      	nop
 801db18:	2000cdcc 	.word	0x2000cdcc
 801db1c:	00000000 	.word	0x00000000

0801db20 <mcpwm_foc_set_configuration>:
void mcpwm_foc_set_configuration(volatile mc_configuration *configuration) {
 801db20:	b510      	push	{r4, lr}
	m_conf = configuration;
 801db22:	4c14      	ldr	r4, [pc, #80]	; (801db74 <mcpwm_foc_set_configuration+0x54>)
	m_control_mode = CONTROL_MODE_NONE;
 801db24:	4914      	ldr	r1, [pc, #80]	; (801db78 <mcpwm_foc_set_configuration+0x58>)
	m_state = MC_STATE_OFF;
 801db26:	4b15      	ldr	r3, [pc, #84]	; (801db7c <mcpwm_foc_set_configuration+0x5c>)
	m_conf = configuration;
 801db28:	6020      	str	r0, [r4, #0]
	m_state = MC_STATE_OFF;
 801db2a:	2200      	movs	r2, #0
	m_control_mode = CONTROL_MODE_NONE;
 801db2c:	2007      	movs	r0, #7
 801db2e:	7008      	strb	r0, [r1, #0]
	m_state = MC_STATE_OFF;
 801db30:	701a      	strb	r2, [r3, #0]
	stop_pwm_hw();
 801db32:	f7ff f93d 	bl	801cdb0 <stop_pwm_hw>
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801db36:	6823      	ldr	r3, [r4, #0]
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801db38:	4a11      	ldr	r2, [pc, #68]	; (801db80 <mcpwm_foc_set_configuration+0x60>)
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801db3a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801db3e:	6811      	ldr	r1, [r2, #0]
 801db40:	4b10      	ldr	r3, [pc, #64]	; (801db84 <mcpwm_foc_set_configuration+0x64>)
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801db42:	4811      	ldr	r0, [pc, #68]	; (801db88 <mcpwm_foc_set_configuration+0x68>)
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801db44:	f041 0102 	orr.w	r1, r1, #2
 801db48:	6011      	str	r1, [r2, #0]
 801db4a:	6819      	ldr	r1, [r3, #0]
 801db4c:	2402      	movs	r4, #2
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801db4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801db52:	4321      	orrs	r1, r4
 801db54:	6019      	str	r1, [r3, #0]
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801db56:	ee17 1a90 	vmov	r1, s15
 801db5a:	fb90 f1f1 	sdiv	r1, r0, r1
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801db5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 801db60:	635c      	str	r4, [r3, #52]	; 0x34
 801db62:	6811      	ldr	r1, [r2, #0]
 801db64:	f021 0102 	bic.w	r1, r1, #2
 801db68:	6011      	str	r1, [r2, #0]
 801db6a:	681a      	ldr	r2, [r3, #0]
 801db6c:	f022 0202 	bic.w	r2, r2, #2
 801db70:	601a      	str	r2, [r3, #0]
 801db72:	bd10      	pop	{r4, pc}
 801db74:	2000cda0 	.word	0x2000cda0
 801db78:	2000cda4 	.word	0x2000cda4
 801db7c:	2000ce84 	.word	0x2000ce84
 801db80:	40010000 	.word	0x40010000
 801db84:	40010400 	.word	0x40010400
 801db88:	0a037a00 	.word	0x0a037a00
 801db8c:	00000000 	.word	0x00000000

0801db90 <mcpwm_foc_get_state>:
	return m_state;
 801db90:	4b01      	ldr	r3, [pc, #4]	; (801db98 <mcpwm_foc_get_state+0x8>)
 801db92:	7818      	ldrb	r0, [r3, #0]
}
 801db94:	4770      	bx	lr
 801db96:	bf00      	nop
 801db98:	2000ce84 	.word	0x2000ce84
 801db9c:	00000000 	.word	0x00000000

0801dba0 <mcpwm_foc_is_dccal_done>:
	return m_dccal_done;
 801dba0:	4b01      	ldr	r3, [pc, #4]	; (801dba8 <mcpwm_foc_is_dccal_done+0x8>)
 801dba2:	7818      	ldrb	r0, [r3, #0]
}
 801dba4:	4770      	bx	lr
 801dba6:	bf00      	nop
 801dba8:	2000cdbc 	.word	0x2000cdbc
 801dbac:	00000000 	.word	0x00000000

0801dbb0 <mcpwm_foc_set_duty>:
	m_duty_cycle_set = dutyCycle;
 801dbb0:	4a06      	ldr	r2, [pc, #24]	; (801dbcc <mcpwm_foc_set_duty+0x1c>)
	m_control_mode = CONTROL_MODE_DUTY;
 801dbb2:	4907      	ldr	r1, [pc, #28]	; (801dbd0 <mcpwm_foc_set_duty+0x20>)
	if (m_state != MC_STATE_RUNNING) {
 801dbb4:	4b07      	ldr	r3, [pc, #28]	; (801dbd4 <mcpwm_foc_set_duty+0x24>)
	m_control_mode = CONTROL_MODE_DUTY;
 801dbb6:	2000      	movs	r0, #0
 801dbb8:	7008      	strb	r0, [r1, #0]
	m_duty_cycle_set = dutyCycle;
 801dbba:	ed82 0a00 	vstr	s0, [r2]
	if (m_state != MC_STATE_RUNNING) {
 801dbbe:	781a      	ldrb	r2, [r3, #0]
 801dbc0:	2a02      	cmp	r2, #2
		m_state = MC_STATE_RUNNING;
 801dbc2:	bf1c      	itt	ne
 801dbc4:	2202      	movne	r2, #2
 801dbc6:	701a      	strbne	r2, [r3, #0]
 801dbc8:	4770      	bx	lr
 801dbca:	bf00      	nop
 801dbcc:	2000cdc0 	.word	0x2000cdc0
 801dbd0:	2000cda4 	.word	0x2000cda4
 801dbd4:	2000ce84 	.word	0x2000ce84
	...

0801dbe0 <mcpwm_foc_set_pid_speed>:
	m_speed_pid_set_rpm = rpm;
 801dbe0:	4a06      	ldr	r2, [pc, #24]	; (801dbfc <mcpwm_foc_set_pid_speed+0x1c>)
	m_control_mode = CONTROL_MODE_SPEED;
 801dbe2:	4907      	ldr	r1, [pc, #28]	; (801dc00 <mcpwm_foc_set_pid_speed+0x20>)
	if (m_state != MC_STATE_RUNNING) {
 801dbe4:	4b07      	ldr	r3, [pc, #28]	; (801dc04 <mcpwm_foc_set_pid_speed+0x24>)
	m_control_mode = CONTROL_MODE_SPEED;
 801dbe6:	2001      	movs	r0, #1
 801dbe8:	7008      	strb	r0, [r1, #0]
	m_speed_pid_set_rpm = rpm;
 801dbea:	ed82 0a00 	vstr	s0, [r2]
	if (m_state != MC_STATE_RUNNING) {
 801dbee:	781a      	ldrb	r2, [r3, #0]
 801dbf0:	2a02      	cmp	r2, #2
		m_state = MC_STATE_RUNNING;
 801dbf2:	bf1c      	itt	ne
 801dbf4:	2202      	movne	r2, #2
 801dbf6:	701a      	strbne	r2, [r3, #0]
 801dbf8:	4770      	bx	lr
 801dbfa:	bf00      	nop
 801dbfc:	2000ce80 	.word	0x2000ce80
 801dc00:	2000cda4 	.word	0x2000cda4
 801dc04:	2000ce84 	.word	0x2000ce84
	...

0801dc10 <mcpwm_foc_set_pid_pos>:
	m_pos_pid_set = pos;
 801dc10:	4a06      	ldr	r2, [pc, #24]	; (801dc2c <mcpwm_foc_set_pid_pos+0x1c>)
	m_control_mode = CONTROL_MODE_POS;
 801dc12:	4907      	ldr	r1, [pc, #28]	; (801dc30 <mcpwm_foc_set_pid_pos+0x20>)
	if (m_state != MC_STATE_RUNNING) {
 801dc14:	4b07      	ldr	r3, [pc, #28]	; (801dc34 <mcpwm_foc_set_pid_pos+0x24>)
	m_control_mode = CONTROL_MODE_POS;
 801dc16:	2004      	movs	r0, #4
 801dc18:	7008      	strb	r0, [r1, #0]
	m_pos_pid_set = pos;
 801dc1a:	ed82 0a00 	vstr	s0, [r2]
	if (m_state != MC_STATE_RUNNING) {
 801dc1e:	781a      	ldrb	r2, [r3, #0]
 801dc20:	2a02      	cmp	r2, #2
		m_state = MC_STATE_RUNNING;
 801dc22:	bf1c      	itt	ne
 801dc24:	2202      	movne	r2, #2
 801dc26:	701a      	strbne	r2, [r3, #0]
 801dc28:	4770      	bx	lr
 801dc2a:	bf00      	nop
 801dc2c:	2000ce68 	.word	0x2000ce68
 801dc30:	2000cda4 	.word	0x2000cda4
 801dc34:	2000ce84 	.word	0x2000ce84
	...

0801dc40 <mcpwm_foc_set_current>:
	if (fabsf(current) < m_conf->cc_min_current) {
 801dc40:	4b0f      	ldr	r3, [pc, #60]	; (801dc80 <mcpwm_foc_set_current+0x40>)
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801dc48:	eeb0 7ac0 	vabs.f32	s14, s0
 801dc4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801dc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc54:	d40b      	bmi.n	801dc6e <mcpwm_foc_set_current+0x2e>
	m_iq_set = current;
 801dc56:	490b      	ldr	r1, [pc, #44]	; (801dc84 <mcpwm_foc_set_current+0x44>)
	m_control_mode = CONTROL_MODE_CURRENT;
 801dc58:	480b      	ldr	r0, [pc, #44]	; (801dc88 <mcpwm_foc_set_current+0x48>)
	if (m_state != MC_STATE_RUNNING) {
 801dc5a:	4b0c      	ldr	r3, [pc, #48]	; (801dc8c <mcpwm_foc_set_current+0x4c>)
	m_control_mode = CONTROL_MODE_CURRENT;
 801dc5c:	2202      	movs	r2, #2
 801dc5e:	7002      	strb	r2, [r0, #0]
	m_iq_set = current;
 801dc60:	ed81 0a00 	vstr	s0, [r1]
	if (m_state != MC_STATE_RUNNING) {
 801dc64:	7819      	ldrb	r1, [r3, #0]
 801dc66:	4291      	cmp	r1, r2
		m_state = MC_STATE_RUNNING;
 801dc68:	bf18      	it	ne
 801dc6a:	701a      	strbne	r2, [r3, #0]
 801dc6c:	4770      	bx	lr
		m_control_mode = CONTROL_MODE_NONE;
 801dc6e:	4906      	ldr	r1, [pc, #24]	; (801dc88 <mcpwm_foc_set_current+0x48>)
		m_state = MC_STATE_OFF;
 801dc70:	4b06      	ldr	r3, [pc, #24]	; (801dc8c <mcpwm_foc_set_current+0x4c>)
		m_control_mode = CONTROL_MODE_NONE;
 801dc72:	2007      	movs	r0, #7
		m_state = MC_STATE_OFF;
 801dc74:	2200      	movs	r2, #0
		m_control_mode = CONTROL_MODE_NONE;
 801dc76:	7008      	strb	r0, [r1, #0]
		m_state = MC_STATE_OFF;
 801dc78:	701a      	strb	r2, [r3, #0]
		stop_pwm_hw();
 801dc7a:	f7ff b899 	b.w	801cdb0 <stop_pwm_hw>
 801dc7e:	bf00      	nop
 801dc80:	2000cda0 	.word	0x2000cda0
 801dc84:	2000cdd0 	.word	0x2000cdd0
 801dc88:	2000cda4 	.word	0x2000cda4
 801dc8c:	2000ce84 	.word	0x2000ce84

0801dc90 <mcpwm_foc_stop_pwm>:
	mcpwm_foc_set_current(0.0);
 801dc90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801dc98 <mcpwm_foc_stop_pwm+0x8>
 801dc94:	f7ff bfd4 	b.w	801dc40 <mcpwm_foc_set_current>
	...

0801dca0 <mcpwm_foc_set_brake_current>:
	if (fabsf(current) < m_conf->cc_min_current) {
 801dca0:	4b0f      	ldr	r3, [pc, #60]	; (801dce0 <mcpwm_foc_set_brake_current+0x40>)
		m_control_mode = CONTROL_MODE_NONE;
 801dca2:	4910      	ldr	r1, [pc, #64]	; (801dce4 <mcpwm_foc_set_brake_current+0x44>)
	if (fabsf(current) < m_conf->cc_min_current) {
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801dcaa:	eeb0 7ac0 	vabs.f32	s14, s0
 801dcae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801dcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcb6:	d40b      	bmi.n	801dcd0 <mcpwm_foc_set_brake_current+0x30>
	m_iq_set = current;
 801dcb8:	4a0b      	ldr	r2, [pc, #44]	; (801dce8 <mcpwm_foc_set_brake_current+0x48>)
	if (m_state != MC_STATE_RUNNING) {
 801dcba:	4b0c      	ldr	r3, [pc, #48]	; (801dcec <mcpwm_foc_set_brake_current+0x4c>)
	m_control_mode = CONTROL_MODE_CURRENT_BRAKE;
 801dcbc:	2003      	movs	r0, #3
 801dcbe:	7008      	strb	r0, [r1, #0]
	m_iq_set = current;
 801dcc0:	ed82 0a00 	vstr	s0, [r2]
	if (m_state != MC_STATE_RUNNING) {
 801dcc4:	781a      	ldrb	r2, [r3, #0]
 801dcc6:	2a02      	cmp	r2, #2
		m_state = MC_STATE_RUNNING;
 801dcc8:	bf1c      	itt	ne
 801dcca:	2202      	movne	r2, #2
 801dccc:	701a      	strbne	r2, [r3, #0]
 801dcce:	4770      	bx	lr
		m_state = MC_STATE_OFF;
 801dcd0:	4b06      	ldr	r3, [pc, #24]	; (801dcec <mcpwm_foc_set_brake_current+0x4c>)
		m_control_mode = CONTROL_MODE_NONE;
 801dcd2:	2007      	movs	r0, #7
		m_state = MC_STATE_OFF;
 801dcd4:	2200      	movs	r2, #0
		m_control_mode = CONTROL_MODE_NONE;
 801dcd6:	7008      	strb	r0, [r1, #0]
		m_state = MC_STATE_OFF;
 801dcd8:	701a      	strb	r2, [r3, #0]
		stop_pwm_hw();
 801dcda:	f7ff b869 	b.w	801cdb0 <stop_pwm_hw>
 801dcde:	bf00      	nop
 801dce0:	2000cda0 	.word	0x2000cda0
 801dce4:	2000cda4 	.word	0x2000cda4
 801dce8:	2000cdd0 	.word	0x2000cdd0
 801dcec:	2000ce84 	.word	0x2000ce84

0801dcf0 <mcpwm_foc_set_handbrake>:
	if (fabsf(current) < m_conf->cc_min_current) {
 801dcf0:	4b0f      	ldr	r3, [pc, #60]	; (801dd30 <mcpwm_foc_set_handbrake+0x40>)
		m_control_mode = CONTROL_MODE_NONE;
 801dcf2:	4910      	ldr	r1, [pc, #64]	; (801dd34 <mcpwm_foc_set_handbrake+0x44>)
	if (fabsf(current) < m_conf->cc_min_current) {
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801dcfa:	eeb0 7ac0 	vabs.f32	s14, s0
 801dcfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801dd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd06:	d40b      	bmi.n	801dd20 <mcpwm_foc_set_handbrake+0x30>
	m_iq_set = current;
 801dd08:	4a0b      	ldr	r2, [pc, #44]	; (801dd38 <mcpwm_foc_set_handbrake+0x48>)
	if (m_state != MC_STATE_RUNNING) {
 801dd0a:	4b0c      	ldr	r3, [pc, #48]	; (801dd3c <mcpwm_foc_set_handbrake+0x4c>)
	m_control_mode = CONTROL_MODE_HANDBRAKE;
 801dd0c:	2005      	movs	r0, #5
 801dd0e:	7008      	strb	r0, [r1, #0]
	m_iq_set = current;
 801dd10:	ed82 0a00 	vstr	s0, [r2]
	if (m_state != MC_STATE_RUNNING) {
 801dd14:	781a      	ldrb	r2, [r3, #0]
 801dd16:	2a02      	cmp	r2, #2
		m_state = MC_STATE_RUNNING;
 801dd18:	bf1c      	itt	ne
 801dd1a:	2202      	movne	r2, #2
 801dd1c:	701a      	strbne	r2, [r3, #0]
 801dd1e:	4770      	bx	lr
		m_state = MC_STATE_OFF;
 801dd20:	4b06      	ldr	r3, [pc, #24]	; (801dd3c <mcpwm_foc_set_handbrake+0x4c>)
		m_control_mode = CONTROL_MODE_NONE;
 801dd22:	2007      	movs	r0, #7
		m_state = MC_STATE_OFF;
 801dd24:	2200      	movs	r2, #0
		m_control_mode = CONTROL_MODE_NONE;
 801dd26:	7008      	strb	r0, [r1, #0]
		m_state = MC_STATE_OFF;
 801dd28:	701a      	strb	r2, [r3, #0]
		stop_pwm_hw();
 801dd2a:	f7ff b841 	b.w	801cdb0 <stop_pwm_hw>
 801dd2e:	bf00      	nop
 801dd30:	2000cda0 	.word	0x2000cda0
 801dd34:	2000cda4 	.word	0x2000cda4
 801dd38:	2000cdd0 	.word	0x2000cdd0
 801dd3c:	2000ce84 	.word	0x2000ce84

0801dd40 <mcpwm_foc_set_openloop>:
void mcpwm_foc_set_openloop(float current, float rpm) {
 801dd40:	b530      	push	{r4, r5, lr}
	if (fabsf(current) < m_conf->cc_min_current) {
 801dd42:	4b1f      	ldr	r3, [pc, #124]	; (801ddc0 <mcpwm_foc_set_openloop+0x80>)
 801dd44:	681b      	ldr	r3, [r3, #0]
void mcpwm_foc_set_openloop(float current, float rpm) {
 801dd46:	ed2d 8b02 	vpush	{d8}
	if (fabsf(current) < m_conf->cc_min_current) {
 801dd4a:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801dd4e:	eeb0 7ac0 	vabs.f32	s14, s0
 801dd52:	eeb4 7ae7 	vcmpe.f32	s14, s15
void mcpwm_foc_set_openloop(float current, float rpm) {
 801dd56:	b083      	sub	sp, #12
	if (fabsf(current) < m_conf->cc_min_current) {
 801dd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void mcpwm_foc_set_openloop(float current, float rpm) {
 801dd5c:	ed8d 0a01 	vstr	s0, [sp, #4]
	if (fabsf(current) < m_conf->cc_min_current) {
 801dd60:	d421      	bmi.n	801dda6 <mcpwm_foc_set_openloop+0x66>
	utils_truncate_number(&current, -m_conf->l_current_max, m_conf->l_current_max);
 801dd62:	ed93 0a01 	vldr	s0, [r3, #4]
	m_control_mode = CONTROL_MODE_OPENLOOP;
 801dd66:	4c17      	ldr	r4, [pc, #92]	; (801ddc4 <mcpwm_foc_set_openloop+0x84>)
 801dd68:	eeb0 8a60 	vmov.f32	s16, s1
	utils_truncate_number(&current, -m_conf->l_current_max, m_conf->l_current_max);
 801dd6c:	eeb1 0a40 	vneg.f32	s0, s0
 801dd70:	edd3 0a01 	vldr	s1, [r3, #4]
 801dd74:	a801      	add	r0, sp, #4
 801dd76:	f7f7 fec3 	bl	8015b00 <utils_truncate_number>
	m_openloop_speed = rpm * ((2.0 * M_PI) / 60.0);
 801dd7a:	eddf 7a13 	vldr	s15, [pc, #76]	; 801ddc8 <mcpwm_foc_set_openloop+0x88>
	m_iq_set = current;
 801dd7e:	4913      	ldr	r1, [pc, #76]	; (801ddcc <mcpwm_foc_set_openloop+0x8c>)
	m_openloop_speed = rpm * ((2.0 * M_PI) / 60.0);
 801dd80:	4a13      	ldr	r2, [pc, #76]	; (801ddd0 <mcpwm_foc_set_openloop+0x90>)
	if (m_state != MC_STATE_RUNNING) {
 801dd82:	4b14      	ldr	r3, [pc, #80]	; (801ddd4 <mcpwm_foc_set_openloop+0x94>)
	m_iq_set = current;
 801dd84:	9801      	ldr	r0, [sp, #4]
	m_openloop_speed = rpm * ((2.0 * M_PI) / 60.0);
 801dd86:	ee28 8a27 	vmul.f32	s16, s16, s15
	m_control_mode = CONTROL_MODE_OPENLOOP;
 801dd8a:	2506      	movs	r5, #6
 801dd8c:	7025      	strb	r5, [r4, #0]
	m_iq_set = current;
 801dd8e:	6008      	str	r0, [r1, #0]
	m_openloop_speed = rpm * ((2.0 * M_PI) / 60.0);
 801dd90:	ed82 8a00 	vstr	s16, [r2]
	if (m_state != MC_STATE_RUNNING) {
 801dd94:	781a      	ldrb	r2, [r3, #0]
 801dd96:	2a02      	cmp	r2, #2
		m_state = MC_STATE_RUNNING;
 801dd98:	bf1c      	itt	ne
 801dd9a:	2202      	movne	r2, #2
 801dd9c:	701a      	strbne	r2, [r3, #0]
}
 801dd9e:	b003      	add	sp, #12
 801dda0:	ecbd 8b02 	vpop	{d8}
 801dda4:	bd30      	pop	{r4, r5, pc}
		m_control_mode = CONTROL_MODE_NONE;
 801dda6:	4907      	ldr	r1, [pc, #28]	; (801ddc4 <mcpwm_foc_set_openloop+0x84>)
		m_state = MC_STATE_OFF;
 801dda8:	4b0a      	ldr	r3, [pc, #40]	; (801ddd4 <mcpwm_foc_set_openloop+0x94>)
		m_control_mode = CONTROL_MODE_NONE;
 801ddaa:	2007      	movs	r0, #7
		m_state = MC_STATE_OFF;
 801ddac:	2200      	movs	r2, #0
		m_control_mode = CONTROL_MODE_NONE;
 801ddae:	7008      	strb	r0, [r1, #0]
		m_state = MC_STATE_OFF;
 801ddb0:	701a      	strb	r2, [r3, #0]
		stop_pwm_hw();
 801ddb2:	f7fe fffd 	bl	801cdb0 <stop_pwm_hw>
}
 801ddb6:	b003      	add	sp, #12
 801ddb8:	ecbd 8b02 	vpop	{d8}
 801ddbc:	bd30      	pop	{r4, r5, pc}
 801ddbe:	bf00      	nop
 801ddc0:	2000cda0 	.word	0x2000cda0
 801ddc4:	2000cda4 	.word	0x2000cda4
 801ddc8:	3dd67750 	.word	0x3dd67750
 801ddcc:	2000cdd0 	.word	0x2000cdd0
 801ddd0:	2000ce3c 	.word	0x2000ce3c
 801ddd4:	2000ce84 	.word	0x2000ce84
	...

0801dde0 <mcpwm_foc_get_duty_cycle_now>:
	return m_motor_state.duty_now;
 801dde0:	4b01      	ldr	r3, [pc, #4]	; (801dde8 <mcpwm_foc_get_duty_cycle_now+0x8>)
 801dde2:	ed93 0a03 	vldr	s0, [r3, #12]
}
 801dde6:	4770      	bx	lr
 801dde8:	2000cdd4 	.word	0x2000cdd4
 801ddec:	00000000 	.word	0x00000000

0801ddf0 <mcpwm_foc_get_pid_pos_now>:
	return m_pos_pid_now;
 801ddf0:	4b01      	ldr	r3, [pc, #4]	; (801ddf8 <mcpwm_foc_get_pid_pos_now+0x8>)
 801ddf2:	ed93 0a00 	vldr	s0, [r3]
}
 801ddf6:	4770      	bx	lr
 801ddf8:	2000ce64 	.word	0x2000ce64
 801ddfc:	00000000 	.word	0x00000000

0801de00 <mcpwm_foc_get_sampling_frequency_now>:
	return m_conf->foc_f_sw / 2.0;
 801de00:	4b04      	ldr	r3, [pc, #16]	; (801de14 <mcpwm_foc_get_sampling_frequency_now+0x14>)
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	ed93 0a2b 	vldr	s0, [r3, #172]	; 0xac
 801de08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
}
 801de0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801de10:	4770      	bx	lr
 801de12:	bf00      	nop
 801de14:	2000cda0 	.word	0x2000cda0
	...

0801de20 <mcpwm_foc_get_rpm>:
	return m_pll_speed / ((2.0 * M_PI) / 60.0);
 801de20:	4b03      	ldr	r3, [pc, #12]	; (801de30 <mcpwm_foc_get_rpm+0x10>)
 801de22:	eddf 7a04 	vldr	s15, [pc, #16]	; 801de34 <mcpwm_foc_get_rpm+0x14>
 801de26:	ed93 0a00 	vldr	s0, [r3]
}
 801de2a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801de2e:	4770      	bx	lr
 801de30:	2000ce60 	.word	0x2000ce60
 801de34:	3dd67750 	.word	0x3dd67750
	...

0801de40 <mcpwm_foc_get_tot_current>:
	return SIGN(m_motor_state.vq) * m_motor_state.iq;
 801de40:	4b09      	ldr	r3, [pc, #36]	; (801de68 <mcpwm_foc_get_tot_current+0x28>)
 801de42:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801de46:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 801de4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de56:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801de5a:	bf58      	it	pl
 801de5c:	eef0 7a47 	vmovpl.f32	s15, s14
}
 801de60:	ee27 0a80 	vmul.f32	s0, s15, s0
 801de64:	4770      	bx	lr
 801de66:	bf00      	nop
 801de68:	2000cdd4 	.word	0x2000cdd4
 801de6c:	00000000 	.word	0x00000000

0801de70 <mcpwm_foc_get_tot_current_filtered>:
	return SIGN(m_motor_state.vq) * m_motor_state.iq_filter;
 801de70:	4b09      	ldr	r3, [pc, #36]	; (801de98 <mcpwm_foc_get_tot_current_filtered+0x28>)
 801de72:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801de76:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 801de7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801de7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de86:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801de8a:	bf58      	it	pl
 801de8c:	eef0 7a47 	vmovpl.f32	s15, s14
}
 801de90:	ee27 0a80 	vmul.f32	s0, s15, s0
 801de94:	4770      	bx	lr
 801de96:	bf00      	nop
 801de98:	2000cdd4 	.word	0x2000cdd4
 801de9c:	00000000 	.word	0x00000000

0801dea0 <mcpwm_foc_get_abs_motor_current>:
	return m_motor_state.i_abs;
 801dea0:	4b01      	ldr	r3, [pc, #4]	; (801dea8 <mcpwm_foc_get_abs_motor_current+0x8>)
 801dea2:	ed93 0a07 	vldr	s0, [r3, #28]
}
 801dea6:	4770      	bx	lr
 801dea8:	2000cdd4 	.word	0x2000cdd4
 801deac:	00000000 	.word	0x00000000

0801deb0 <mcpwm_foc_get_abs_motor_current_filtered>:
	return m_motor_state.i_abs_filter;
 801deb0:	4b01      	ldr	r3, [pc, #4]	; (801deb8 <mcpwm_foc_get_abs_motor_current_filtered+0x8>)
 801deb2:	ed93 0a08 	vldr	s0, [r3, #32]
}
 801deb6:	4770      	bx	lr
 801deb8:	2000cdd4 	.word	0x2000cdd4
 801debc:	00000000 	.word	0x00000000

0801dec0 <mcpwm_foc_get_tot_current_directional>:
 801dec0:	4b01      	ldr	r3, [pc, #4]	; (801dec8 <mcpwm_foc_get_tot_current_directional+0x8>)
 801dec2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 801dec6:	4770      	bx	lr
 801dec8:	2000cdd4 	.word	0x2000cdd4
 801decc:	00000000 	.word	0x00000000

0801ded0 <mcpwm_foc_get_tot_current_directional_filtered>:
	return m_motor_state.iq_filter;
 801ded0:	4b01      	ldr	r3, [pc, #4]	; (801ded8 <mcpwm_foc_get_tot_current_directional_filtered+0x8>)
 801ded2:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
}
 801ded6:	4770      	bx	lr
 801ded8:	2000cdd4 	.word	0x2000cdd4
 801dedc:	00000000 	.word	0x00000000

0801dee0 <mcpwm_foc_get_id>:
	return m_motor_state.id;
 801dee0:	4b01      	ldr	r3, [pc, #4]	; (801dee8 <mcpwm_foc_get_id+0x8>)
 801dee2:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
}
 801dee6:	4770      	bx	lr
 801dee8:	2000cdd4 	.word	0x2000cdd4
 801deec:	00000000 	.word	0x00000000

0801def0 <mcpwm_foc_get_iq>:
	return m_motor_state.iq;
 801def0:	4b01      	ldr	r3, [pc, #4]	; (801def8 <mcpwm_foc_get_iq+0x8>)
 801def2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
}
 801def6:	4770      	bx	lr
 801def8:	2000cdd4 	.word	0x2000cdd4
 801defc:	00000000 	.word	0x00000000

0801df00 <mcpwm_foc_get_tot_current_in_filtered>:
	return m_motor_state.i_bus; // TODO: Calculate filtered current?
 801df00:	4b01      	ldr	r3, [pc, #4]	; (801df08 <mcpwm_foc_get_tot_current_in_filtered+0x8>)
 801df02:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
}
 801df06:	4770      	bx	lr
 801df08:	2000cdd4 	.word	0x2000cdd4
 801df0c:	00000000 	.word	0x00000000

0801df10 <mcpwm_foc_get_tachometer_value>:
	int val = m_tachometer;
 801df10:	4b03      	ldr	r3, [pc, #12]	; (801df20 <mcpwm_foc_get_tachometer_value+0x10>)
 801df12:	681a      	ldr	r2, [r3, #0]
	if (reset) {
 801df14:	b108      	cbz	r0, 801df1a <mcpwm_foc_get_tachometer_value+0xa>
		m_tachometer = 0;
 801df16:	2100      	movs	r1, #0
 801df18:	6019      	str	r1, [r3, #0]
}
 801df1a:	4610      	mov	r0, r2
 801df1c:	4770      	bx	lr
 801df1e:	bf00      	nop
 801df20:	2000ce88 	.word	0x2000ce88
	...

0801df30 <mcpwm_foc_get_tachometer_abs_value>:
	int val = m_tachometer_abs;
 801df30:	4b03      	ldr	r3, [pc, #12]	; (801df40 <mcpwm_foc_get_tachometer_abs_value+0x10>)
 801df32:	681a      	ldr	r2, [r3, #0]
	if (reset) {
 801df34:	b108      	cbz	r0, 801df3a <mcpwm_foc_get_tachometer_abs_value+0xa>
		m_tachometer_abs = 0;
 801df36:	2100      	movs	r1, #0
 801df38:	6019      	str	r1, [r3, #0]
}
 801df3a:	4610      	mov	r0, r2
 801df3c:	4770      	bx	lr
 801df3e:	bf00      	nop
 801df40:	2000ce8c 	.word	0x2000ce8c
	...

0801df50 <mcpwm_foc_get_phase>:
float mcpwm_foc_get_phase(void) {
 801df50:	b500      	push	{lr}
	float angle = m_motor_state.phase * (180.0 / M_PI);
 801df52:	4b09      	ldr	r3, [pc, #36]	; (801df78 <mcpwm_foc_get_phase+0x28>)
 801df54:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801df7c <mcpwm_foc_get_phase+0x2c>
 801df58:	edd3 7a04 	vldr	s15, [r3, #16]
float mcpwm_foc_get_phase(void) {
 801df5c:	b083      	sub	sp, #12
	float angle = m_motor_state.phase * (180.0 / M_PI);
 801df5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801df62:	a802      	add	r0, sp, #8
 801df64:	ed60 7a01 	vstmdb	r0!, {s15}
	utils_norm_angle(&angle);
 801df68:	f7f7 fd7a 	bl	8015a60 <utils_norm_angle>
}
 801df6c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801df70:	b003      	add	sp, #12
 801df72:	f85d fb04 	ldr.w	pc, [sp], #4
 801df76:	bf00      	nop
 801df78:	2000cdd4 	.word	0x2000cdd4
 801df7c:	42652ee0 	.word	0x42652ee0

0801df80 <mcpwm_foc_get_phase_observer>:
float mcpwm_foc_get_phase_observer(void) {
 801df80:	b500      	push	{lr}
	float angle = m_phase_now_observer * (180.0 / M_PI);
 801df82:	4b09      	ldr	r3, [pc, #36]	; (801dfa8 <mcpwm_foc_get_phase_observer+0x28>)
 801df84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801dfac <mcpwm_foc_get_phase_observer+0x2c>
 801df88:	edd3 7a00 	vldr	s15, [r3]
float mcpwm_foc_get_phase_observer(void) {
 801df8c:	b083      	sub	sp, #12
	float angle = m_phase_now_observer * (180.0 / M_PI);
 801df8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801df92:	a802      	add	r0, sp, #8
 801df94:	ed60 7a01 	vstmdb	r0!, {s15}
	utils_norm_angle(&angle);
 801df98:	f7f7 fd62 	bl	8015a60 <utils_norm_angle>
}
 801df9c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801dfa0:	b003      	add	sp, #12
 801dfa2:	f85d fb04 	ldr.w	pc, [sp], #4
 801dfa6:	bf00      	nop
 801dfa8:	2000ce4c 	.word	0x2000ce4c
 801dfac:	42652ee0 	.word	0x42652ee0

0801dfb0 <mcpwm_foc_get_phase_encoder>:
float mcpwm_foc_get_phase_encoder(void) {
 801dfb0:	b500      	push	{lr}
	float angle = m_phase_now_encoder * (180.0 / M_PI);
 801dfb2:	4b09      	ldr	r3, [pc, #36]	; (801dfd8 <mcpwm_foc_get_phase_encoder+0x28>)
 801dfb4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801dfdc <mcpwm_foc_get_phase_encoder+0x2c>
 801dfb8:	edd3 7a00 	vldr	s15, [r3]
float mcpwm_foc_get_phase_encoder(void) {
 801dfbc:	b083      	sub	sp, #12
	float angle = m_phase_now_encoder * (180.0 / M_PI);
 801dfbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dfc2:	a802      	add	r0, sp, #8
 801dfc4:	ed60 7a01 	vstmdb	r0!, {s15}
	utils_norm_angle(&angle);
 801dfc8:	f7f7 fd4a 	bl	8015a60 <utils_norm_angle>
}
 801dfcc:	ed9d 0a01 	vldr	s0, [sp, #4]
 801dfd0:	b003      	add	sp, #12
 801dfd2:	f85d fb04 	ldr.w	pc, [sp], #4
 801dfd6:	bf00      	nop
 801dfd8:	2000ce44 	.word	0x2000ce44
 801dfdc:	42652ee0 	.word	0x42652ee0

0801dfe0 <mcpwm_foc_get_vq>:
	return m_motor_state.vq;
 801dfe0:	4b01      	ldr	r3, [pc, #4]	; (801dfe8 <mcpwm_foc_get_vq+0x8>)
 801dfe2:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
}
 801dfe6:	4770      	bx	lr
 801dfe8:	2000cdd4 	.word	0x2000cdd4
 801dfec:	00000000 	.word	0x00000000

0801dff0 <mcpwm_foc_encoder_detect>:
void mcpwm_foc_encoder_detect(float current, bool print, float *offset, float *ratio, bool *inverted) {
 801dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dff4:	ed2d 8b0e 	vpush	{d8-d14}
 801dff8:	b087      	sub	sp, #28
 801dffa:	eeb0 9a40 	vmov.f32	s18, s0
 801dffe:	4607      	mov	r7, r0
 801e000:	4689      	mov	r9, r1
 801e002:	9202      	str	r2, [sp, #8]
 801e004:	9303      	str	r3, [sp, #12]
	mc_interface_lock();
 801e006:	f7fd fa33 	bl	801b470 <mc_interface_lock>
	m_phase_override = true;
 801e00a:	49c4      	ldr	r1, [pc, #784]	; (801e31c <mcpwm_foc_encoder_detect+0x32c>)
	m_iq_set = 0.0;
 801e00c:	ed9f 8ac4 	vldr	s16, [pc, #784]	; 801e320 <mcpwm_foc_encoder_detect+0x330>
	float offset_old = m_conf->foc_encoder_offset;
 801e010:	f8df 833c 	ldr.w	r8, [pc, #828]	; 801e350 <mcpwm_foc_encoder_detect+0x360>
		for (float i = 0.0;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e014:	eddf 8ac3 	vldr	s17, [pc, #780]	; 801e324 <mcpwm_foc_encoder_detect+0x334>
 801e018:	4cc3      	ldr	r4, [pc, #780]	; (801e328 <mcpwm_foc_encoder_detect+0x338>)
	m_phase_override = true;
 801e01a:	2201      	movs	r2, #1
 801e01c:	700a      	strb	r2, [r1, #0]
	m_id_set = current;
 801e01e:	4ac3      	ldr	r2, [pc, #780]	; (801e32c <mcpwm_foc_encoder_detect+0x33c>)
 801e020:	ed82 9a00 	vstr	s18, [r2]
	m_iq_set = 0.0;
 801e024:	4ac2      	ldr	r2, [pc, #776]	; (801e330 <mcpwm_foc_encoder_detect+0x340>)
 801e026:	ed82 8a00 	vstr	s16, [r2]
	m_control_mode = CONTROL_MODE_CURRENT;
 801e02a:	4ac2      	ldr	r2, [pc, #776]	; (801e334 <mcpwm_foc_encoder_detect+0x344>)
 801e02c:	2302      	movs	r3, #2
 801e02e:	7013      	strb	r3, [r2, #0]
	m_state = MC_STATE_RUNNING;
 801e030:	4ac1      	ldr	r2, [pc, #772]	; (801e338 <mcpwm_foc_encoder_detect+0x348>)
 801e032:	7013      	strb	r3, [r2, #0]
	systime_t tout = timeout_get_timeout_msec();
 801e034:	f7fc f904 	bl	801a240 <timeout_get_timeout_msec>
 801e038:	9001      	str	r0, [sp, #4]
	float tout_c = timeout_get_brake_current();
 801e03a:	f7fc f909 	bl	801a250 <timeout_get_brake_current>
 801e03e:	eeb0 aa40 	vmov.f32	s20, s0
	timeout_reset();
 801e042:	f7fc f8e5 	bl	801a210 <timeout_reset>
	timeout_configure(600000, 0.0);
 801e046:	eeb0 0a48 	vmov.f32	s0, s16
 801e04a:	48bc      	ldr	r0, [pc, #752]	; (801e33c <mcpwm_foc_encoder_detect+0x34c>)
 801e04c:	f7fc f8d0 	bl	801a1f0 <timeout_configure>
	float offset_old = m_conf->foc_encoder_offset;
 801e050:	f8d8 3000 	ldr.w	r3, [r8]
 801e054:	edd3 aa2d 	vldr	s21, [r3, #180]	; 0xb4
	float inverted_old = m_conf->foc_encoder_inverted;
 801e058:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	float ratio_old = m_conf->foc_encoder_ratio;
 801e05c:	ed93 ba2f 	vldr	s22, [r3, #188]	; 0xbc
	m_conf->foc_encoder_offset = 0.0;
 801e060:	ed83 8a2d 	vstr	s16, [r3, #180]	; 0xb4
	float inverted_old = m_conf->foc_encoder_inverted;
 801e064:	ee09 2a90 	vmov	s19, r2
	m_conf->foc_encoder_inverted = false;
 801e068:	2200      	movs	r2, #0
 801e06a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	float inverted_old = m_conf->foc_encoder_inverted;
 801e06e:	eef8 9a69 	vcvt.f32.u32	s19, s19
	m_conf->foc_encoder_ratio = 1.0;
 801e072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e076:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	while(!encoder_index_found()) {
 801e07a:	251f      	movs	r5, #31
 801e07c:	f7fc ff18 	bl	801aeb0 <encoder_index_found>
 801e080:	b970      	cbnz	r0, 801e0a0 <mcpwm_foc_encoder_detect+0xb0>
 801e082:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 801e320 <mcpwm_foc_encoder_detect+0x330>
 801e086:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
			chThdSleepMilliseconds(1);
 801e08a:	200a      	movs	r0, #10
			m_phase_now_override = i;
 801e08c:	ed84 8a00 	vstr	s16, [r4]
			chThdSleepMilliseconds(1);
 801e090:	f7ef fca6 	bl	800d9e0 <chThdSleep>
		for (float i = 0.0;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e094:	3e01      	subs	r6, #1
 801e096:	ee38 8a28 	vadd.f32	s16, s16, s17
 801e09a:	d1f6      	bne.n	801e08a <mcpwm_foc_encoder_detect+0x9a>
		if (cnt > 30) {
 801e09c:	3d01      	subs	r5, #1
 801e09e:	d1ed      	bne.n	801e07c <mcpwm_foc_encoder_detect+0x8c>
	if (print) {
 801e0a0:	2f00      	cmp	r7, #0
 801e0a2:	f040 827e 	bne.w	801e5a2 <mcpwm_foc_encoder_detect+0x5b2>
	while(!encoder_index_found()) {
 801e0a6:	ed9f 8a9e 	vldr	s16, [pc, #632]	; 801e320 <mcpwm_foc_encoder_detect+0x330>
	for (float i = 0.0;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e0aa:	eddf 8a9e 	vldr	s17, [pc, #632]	; 801e324 <mcpwm_foc_encoder_detect+0x334>
	while(!encoder_index_found()) {
 801e0ae:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
		chThdSleepMilliseconds(1);
 801e0b2:	200a      	movs	r0, #10
		m_phase_now_override = i;
 801e0b4:	ed84 8a00 	vstr	s16, [r4]
		chThdSleepMilliseconds(1);
 801e0b8:	f7ef fc92 	bl	800d9e0 <chThdSleep>
	for (float i = 0.0;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e0bc:	3d01      	subs	r5, #1
 801e0be:	ee38 8a28 	vadd.f32	s16, s16, s17
 801e0c2:	d1f6      	bne.n	801e0b2 <mcpwm_foc_encoder_detect+0xc2>
	if (print) {
 801e0c4:	2f00      	cmp	r7, #0
 801e0c6:	f040 8268 	bne.w	801e59a <mcpwm_foc_encoder_detect+0x5aa>
	float first = m_phase_now_encoder;
 801e0ca:	4d9d      	ldr	r5, [pc, #628]	; (801e340 <mcpwm_foc_encoder_detect+0x350>)
	float c_sum = 0.0;
 801e0cc:	eddf ba94 	vldr	s23, [pc, #592]	; 801e320 <mcpwm_foc_encoder_detect+0x330>
		for (float i = phase_ovr_tmp; i < phase_ovr_tmp + (2.0 / 3.0) * M_PI;
 801e0d0:	eddf ca9c 	vldr	s25, [pc, #624]	; 801e344 <mcpwm_foc_encoder_detect+0x354>
				i += (2.0 * M_PI) / 500.0) {
 801e0d4:	ed9f 9a93 	vldr	s18, [pc, #588]	; 801e324 <mcpwm_foc_encoder_detect+0x334>
		utils_norm_angle_rad((float*)&m_phase_now_override);
 801e0d8:	f8df a24c 	ldr.w	sl, [pc, #588]	; 801e328 <mcpwm_foc_encoder_detect+0x338>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e0dc:	ed9f ea9f 	vldr	s28, [pc, #636]	; 801e35c <mcpwm_foc_encoder_detect+0x36c>
 801e0e0:	eddf da9d 	vldr	s27, [pc, #628]	; 801e358 <mcpwm_foc_encoder_detect+0x368>
 801e0e4:	f8df b26c 	ldr.w	fp, [pc, #620]	; 801e354 <mcpwm_foc_encoder_detect+0x364>
	chThdSleepMilliseconds(1000);
 801e0e8:	f242 7010 	movw	r0, #10000	; 0x2710
 801e0ec:	f7ef fc78 	bl	800d9e0 <chThdSleep>
	float first = m_phase_now_encoder;
 801e0f0:	ed95 da00 	vldr	s26, [r5]
	float s_sum = 0.0;
 801e0f4:	eeb0 ca6b 	vmov.f32	s24, s23
	for (int i = 0; i < it_rat; i++) {
 801e0f8:	2600      	movs	r6, #0
		float phase_old = m_phase_now_encoder;
 801e0fa:	edd5 ea00 	vldr	s29, [r5]
		float phase_ovr_tmp = m_phase_now_override;
 801e0fe:	ed94 8a00 	vldr	s16, [r4]
		for (float i = phase_ovr_tmp; i < phase_ovr_tmp + (2.0 / 3.0) * M_PI;
 801e102:	ee78 8a2c 	vadd.f32	s17, s16, s25
 801e106:	eef4 8ac8 	vcmpe.f32	s17, s16
 801e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e10e:	dd0b      	ble.n	801e128 <mcpwm_foc_encoder_detect+0x138>
			chThdSleepMilliseconds(1);
 801e110:	200a      	movs	r0, #10
			m_phase_now_override = i;
 801e112:	ed84 8a00 	vstr	s16, [r4]
			chThdSleepMilliseconds(1);
 801e116:	f7ef fc63 	bl	800d9e0 <chThdSleep>
				i += (2.0 * M_PI) / 500.0) {
 801e11a:	ee38 8a09 	vadd.f32	s16, s16, s18
		for (float i = phase_ovr_tmp; i < phase_ovr_tmp + (2.0 / 3.0) * M_PI;
 801e11e:	eef4 8ac8 	vcmpe.f32	s17, s16
 801e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e126:	dcf3      	bgt.n	801e110 <mcpwm_foc_encoder_detect+0x120>
		utils_norm_angle_rad((float*)&m_phase_now_override);
 801e128:	4650      	mov	r0, sl
 801e12a:	f7f7 fcb9 	bl	8015aa0 <utils_norm_angle_rad>
		chThdSleepMilliseconds(300);
 801e12e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801e132:	f7ef fc55 	bl	800d9e0 <chThdSleep>
		float diff = utils_angle_difference_rad(m_phase_now_encoder, phase_old);
 801e136:	eef0 0a6e 	vmov.f32	s1, s29
 801e13a:	ed95 0a00 	vldr	s0, [r5]
 801e13e:	f7f7 fd87 	bl	8015c50 <utils_angle_difference_rad>
		sincosf(diff, &s, &c);
 801e142:	a905      	add	r1, sp, #20
 801e144:	a804      	add	r0, sp, #16
		float diff = utils_angle_difference_rad(m_phase_now_encoder, phase_old);
 801e146:	eeb0 8a40 	vmov.f32	s16, s0
		sincosf(diff, &s, &c);
 801e14a:	f007 fd91 	bl	8025c70 <sincosf>
		s_sum += s;
 801e14e:	ed9d 7a04 	vldr	s14, [sp, #16]
		c_sum += c;
 801e152:	eddd 7a05 	vldr	s15, [sp, #20]
		s_sum += s;
 801e156:	ee3c ca07 	vadd.f32	s24, s24, s14
		c_sum += c;
 801e15a:	ee7b baa7 	vadd.f32	s23, s23, s15
		if (print) {
 801e15e:	2f00      	cmp	r7, #0
 801e160:	f040 81bf 	bne.w	801e4e2 <mcpwm_foc_encoder_detect+0x4f2>
		if (i > 3 && fabsf(utils_angle_difference_rad(m_phase_now_encoder, first)) < fabsf(diff / 2.0)) {
 801e164:	2e03      	cmp	r6, #3
 801e166:	dd12      	ble.n	801e18e <mcpwm_foc_encoder_detect+0x19e>
 801e168:	ed95 0a00 	vldr	s0, [r5]
 801e16c:	eef0 0a4d 	vmov.f32	s1, s26
 801e170:	f7f7 fd6e 	bl	8015c50 <utils_angle_difference_rad>
 801e174:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e178:	ee28 8a27 	vmul.f32	s16, s16, s15
 801e17c:	eeb0 0ac0 	vabs.f32	s0, s0
 801e180:	eeb0 8ac8 	vabs.f32	s16, s16
 801e184:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801e188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e18c:	d402      	bmi.n	801e194 <mcpwm_foc_encoder_detect+0x1a4>
	for (int i = 0; i < it_rat; i++) {
 801e18e:	3601      	adds	r6, #1
 801e190:	2e14      	cmp	r6, #20
 801e192:	d1b2      	bne.n	801e0fa <mcpwm_foc_encoder_detect+0x10a>
	first = m_phase_now_encoder;
 801e194:	ed95 da00 	vldr	s26, [r5]
		for (float i = phase_ovr_tmp; i > phase_ovr_tmp - (2.0 / 3.0) * M_PI;
 801e198:	eddf ca6a 	vldr	s25, [pc, #424]	; 801e344 <mcpwm_foc_encoder_detect+0x354>
				i -= (2.0 * M_PI) / 500.0) {
 801e19c:	ed9f 9a61 	vldr	s18, [pc, #388]	; 801e324 <mcpwm_foc_encoder_detect+0x334>
		utils_norm_angle_rad((float*)&m_phase_now_override);
 801e1a0:	f8df a184 	ldr.w	sl, [pc, #388]	; 801e328 <mcpwm_foc_encoder_detect+0x338>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e1a4:	ed9f ea6d 	vldr	s28, [pc, #436]	; 801e35c <mcpwm_foc_encoder_detect+0x36c>
 801e1a8:	eddf da6b 	vldr	s27, [pc, #428]	; 801e358 <mcpwm_foc_encoder_detect+0x368>
 801e1ac:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 801e354 <mcpwm_foc_encoder_detect+0x364>
	for (int i = 0; i < it_rat; i++) {
 801e1b0:	2600      	movs	r6, #0
		float phase_old = m_phase_now_encoder;
 801e1b2:	edd5 ea00 	vldr	s29, [r5]
		float phase_ovr_tmp = m_phase_now_override;
 801e1b6:	ed94 8a00 	vldr	s16, [r4]
		for (float i = phase_ovr_tmp; i > phase_ovr_tmp - (2.0 / 3.0) * M_PI;
 801e1ba:	ee78 8a6c 	vsub.f32	s17, s16, s25
 801e1be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1c6:	dd0b      	ble.n	801e1e0 <mcpwm_foc_encoder_detect+0x1f0>
			chThdSleepMilliseconds(1);
 801e1c8:	200a      	movs	r0, #10
			m_phase_now_override = i;
 801e1ca:	ed84 8a00 	vstr	s16, [r4]
			chThdSleepMilliseconds(1);
 801e1ce:	f7ef fc07 	bl	800d9e0 <chThdSleep>
				i -= (2.0 * M_PI) / 500.0) {
 801e1d2:	ee38 8a49 	vsub.f32	s16, s16, s18
		for (float i = phase_ovr_tmp; i > phase_ovr_tmp - (2.0 / 3.0) * M_PI;
 801e1d6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1de:	dcf3      	bgt.n	801e1c8 <mcpwm_foc_encoder_detect+0x1d8>
		utils_norm_angle_rad((float*)&m_phase_now_override);
 801e1e0:	4650      	mov	r0, sl
 801e1e2:	f7f7 fc5d 	bl	8015aa0 <utils_norm_angle_rad>
		chThdSleepMilliseconds(300);
 801e1e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801e1ea:	f7ef fbf9 	bl	800d9e0 <chThdSleep>
		float diff = utils_angle_difference_rad(phase_old, m_phase_now_encoder);
 801e1ee:	edd5 0a00 	vldr	s1, [r5]
 801e1f2:	eeb0 0a6e 	vmov.f32	s0, s29
 801e1f6:	f7f7 fd2b 	bl	8015c50 <utils_angle_difference_rad>
		sincosf(diff, &s, &c);
 801e1fa:	a905      	add	r1, sp, #20
 801e1fc:	a804      	add	r0, sp, #16
		float diff = utils_angle_difference_rad(phase_old, m_phase_now_encoder);
 801e1fe:	eeb0 8a40 	vmov.f32	s16, s0
		sincosf(diff, &s, &c);
 801e202:	f007 fd35 	bl	8025c70 <sincosf>
		s_sum += s;
 801e206:	ed9d 7a04 	vldr	s14, [sp, #16]
		c_sum += c;
 801e20a:	eddd 7a05 	vldr	s15, [sp, #20]
		s_sum += s;
 801e20e:	ee3c ca07 	vadd.f32	s24, s24, s14
		c_sum += c;
 801e212:	ee7b baa7 	vadd.f32	s23, s23, s15
		if (print) {
 801e216:	2f00      	cmp	r7, #0
 801e218:	f040 8171 	bne.w	801e4fe <mcpwm_foc_encoder_detect+0x50e>
		if (i > 3 && fabsf(utils_angle_difference_rad(m_phase_now_encoder, first)) < fabsf(diff / 2.0)) {
 801e21c:	2e03      	cmp	r6, #3
 801e21e:	dd12      	ble.n	801e246 <mcpwm_foc_encoder_detect+0x256>
 801e220:	ed95 0a00 	vldr	s0, [r5]
 801e224:	eef0 0a4d 	vmov.f32	s1, s26
 801e228:	f7f7 fd12 	bl	8015c50 <utils_angle_difference_rad>
 801e22c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e230:	ee28 8a27 	vmul.f32	s16, s16, s15
 801e234:	eeb0 0ac0 	vabs.f32	s0, s0
 801e238:	eeb0 8ac8 	vabs.f32	s16, s16
 801e23c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e244:	d402      	bmi.n	801e24c <mcpwm_foc_encoder_detect+0x25c>
	for (int i = 0; i < it_rat; i++) {
 801e246:	3601      	adds	r6, #1
 801e248:	2e14      	cmp	r6, #20
 801e24a:	d1b2      	bne.n	801e1b2 <mcpwm_foc_encoder_detect+0x1c2>
	float diff = atan2f(s_sum, c_sum) * 180.0 / M_PI;
 801e24c:	eef0 0a6b 	vmov.f32	s1, s23
 801e250:	eeb0 0a4c 	vmov.f32	s0, s24
 801e254:	f007 fa0c 	bl	8025670 <atan2f>
 801e258:	eddf 7a40 	vldr	s15, [pc, #256]	; 801e35c <mcpwm_foc_encoder_detect+0x36c>
 801e25c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801e358 <mcpwm_foc_encoder_detect+0x368>
	*inverted = diff < 0.0;
 801e260:	9b03      	ldr	r3, [sp, #12]
	*ratio = roundf(((2.0 / 3.0) * 180.0) /
 801e262:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801e348 <mcpwm_foc_encoder_detect+0x358>
	float diff = atan2f(s_sum, c_sum) * 180.0 / M_PI;
 801e266:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e26a:	eec0 7a26 	vdiv.f32	s15, s0, s13
	*inverted = diff < 0.0;
 801e26e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e276:	bf4c      	ite	mi
 801e278:	2601      	movmi	r6, #1
 801e27a:	2600      	movpl	r6, #0
			fabsf(diff));
 801e27c:	eef0 7ae7 	vabs.f32	s15, s15
	*inverted = diff < 0.0;
 801e280:	701e      	strb	r6, [r3, #0]
	*ratio = roundf(((2.0 / 3.0) * 180.0) /
 801e282:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801e286:	f007 f84b 	bl	8025320 <roundf>
	m_conf->foc_encoder_inverted = *inverted;
 801e28a:	f8d8 3000 	ldr.w	r3, [r8]
	*ratio = roundf(((2.0 / 3.0) * 180.0) /
 801e28e:	9a02      	ldr	r2, [sp, #8]
 801e290:	ed82 0a00 	vstr	s0, [r2]
	m_conf->foc_encoder_inverted = *inverted;
 801e294:	f883 60b8 	strb.w	r6, [r3, #184]	; 0xb8
	m_conf->foc_encoder_ratio = *ratio;
 801e298:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
	if (print) {
 801e29c:	2f00      	cmp	r7, #0
 801e29e:	f040 814c 	bne.w	801e53a <mcpwm_foc_encoder_detect+0x54a>
	for (float i = m_phase_now_override;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e2a2:	ed94 8a00 	vldr	s16, [r4]
 801e2a6:	eddf 7a29 	vldr	s15, [pc, #164]	; 801e34c <mcpwm_foc_encoder_detect+0x35c>
 801e2aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2b2:	f140 815d 	bpl.w	801e570 <mcpwm_foc_encoder_detect+0x580>
 801e2b6:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 801e324 <mcpwm_foc_encoder_detect+0x334>
 801e2ba:	eddf 8a24 	vldr	s17, [pc, #144]	; 801e34c <mcpwm_foc_encoder_detect+0x35c>
		m_phase_now_override = i;
 801e2be:	ed84 8a00 	vstr	s16, [r4]
		chThdSleepMilliseconds(2);
 801e2c2:	2014      	movs	r0, #20
 801e2c4:	f7ef fb8c 	bl	800d9e0 <chThdSleep>
	for (float i = m_phase_now_override;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e2c8:	ee38 8a09 	vadd.f32	s16, s16, s18
 801e2cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2d4:	d4f3      	bmi.n	801e2be <mcpwm_foc_encoder_detect+0x2ce>
	if (print) {
 801e2d6:	2f00      	cmp	r7, #0
 801e2d8:	f040 813c 	bne.w	801e554 <mcpwm_foc_encoder_detect+0x564>
	const int it_ofs = m_conf->foc_encoder_ratio * 3.0;
 801e2dc:	f8d8 3000 	ldr.w	r3, [r8]
 801e2e0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 801e2e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801e2e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e2ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e2f0:	ee17 aa90 	vmov	sl, s15
	for (int i = 0;i < it_ofs;i++) {
 801e2f4:	f1ba 0f00 	cmp.w	sl, #0
 801e2f8:	f340 8157 	ble.w	801e5aa <mcpwm_foc_encoder_detect+0x5ba>
	for (int i = 0; i < it_rat; i++) {
 801e2fc:	ed9f 8a08 	vldr	s16, [pc, #32]	; 801e320 <mcpwm_foc_encoder_detect+0x330>
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e300:	eddf ba15 	vldr	s23, [pc, #84]	; 801e358 <mcpwm_foc_encoder_detect+0x368>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e304:	ed9f ca15 	vldr	s24, [pc, #84]	; 801e35c <mcpwm_foc_encoder_detect+0x36c>
 801e308:	f8df b048 	ldr.w	fp, [pc, #72]	; 801e354 <mcpwm_foc_encoder_detect+0x364>
 801e30c:	ee07 aa90 	vmov	s15, sl
	for (int i = 0; i < it_rat; i++) {
 801e310:	eef0 8a48 	vmov.f32	s17, s16
 801e314:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 801e318:	2600      	movs	r6, #0
 801e31a:	e025      	b.n	801e368 <mcpwm_foc_encoder_detect+0x378>
 801e31c:	2000ce59 	.word	0x2000ce59
 801e320:	00000000 	.word	0x00000000
 801e324:	3c4de32e 	.word	0x3c4de32e
 801e328:	2000ce54 	.word	0x2000ce54
 801e32c:	2000cdc8 	.word	0x2000cdc8
 801e330:	2000cdd0 	.word	0x2000cdd0
 801e334:	2000cda4 	.word	0x2000cda4
 801e338:	2000ce84 	.word	0x2000ce84
 801e33c:	000927c0 	.word	0x000927c0
 801e340:	2000ce44 	.word	0x2000ce44
 801e344:	40060a92 	.word	0x40060a92
 801e348:	42f00000 	.word	0x42f00000
 801e34c:	40c90fdb 	.word	0x40c90fdb
 801e350:	2000cda0 	.word	0x2000cda0
 801e354:	0802f6a4 	.word	0x0802f6a4
 801e358:	40490fdb 	.word	0x40490fdb
 801e35c:	43340000 	.word	0x43340000
	for (int i = 0;i < it_ofs;i++) {
 801e360:	45b2      	cmp	sl, r6
 801e362:	d03b      	beq.n	801e3dc <mcpwm_foc_encoder_detect+0x3ec>
 801e364:	f8d8 3000 	ldr.w	r3, [r8]
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e368:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 801e36c:	ee07 6a90 	vmov	s15, r6
 801e370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		chThdSleepMilliseconds(500);
 801e374:	f241 3088 	movw	r0, #5000	; 0x1388
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e378:	ee77 7aa7 	vadd.f32	s15, s15, s15
	for (int i = 0;i < it_ofs;i++) {
 801e37c:	3601      	adds	r6, #1
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e37e:	ee67 7aab 	vmul.f32	s15, s15, s23
 801e382:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e386:	ee87 7a89 	vdiv.f32	s14, s15, s18
 801e38a:	ed84 7a00 	vstr	s14, [r4]
		chThdSleepMilliseconds(500);
 801e38e:	f7ef fb27 	bl	800d9e0 <chThdSleep>
		float diff = utils_angle_difference_rad(m_phase_now_encoder, m_phase_now_override);
 801e392:	ed95 0a00 	vldr	s0, [r5]
 801e396:	edd4 0a00 	vldr	s1, [r4]
 801e39a:	f7f7 fc59 	bl	8015c50 <utils_angle_difference_rad>
		sincosf(diff, &s, &c);
 801e39e:	a905      	add	r1, sp, #20
 801e3a0:	a804      	add	r0, sp, #16
		float diff = utils_angle_difference_rad(m_phase_now_encoder, m_phase_now_override);
 801e3a2:	eef0 ca40 	vmov.f32	s25, s0
		sincosf(diff, &s, &c);
 801e3a6:	f007 fc63 	bl	8025c70 <sincosf>
		s_sum += s;
 801e3aa:	ed9d 7a04 	vldr	s14, [sp, #16]
		c_sum += c;
 801e3ae:	eddd 7a05 	vldr	s15, [sp, #20]
		s_sum += s;
 801e3b2:	ee78 8a87 	vadd.f32	s17, s17, s14
		c_sum += c;
 801e3b6:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (print) {
 801e3ba:	2f00      	cmp	r7, #0
 801e3bc:	d0d0      	beq.n	801e360 <mcpwm_foc_encoder_detect+0x370>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e3be:	ee6c ca8c 	vmul.f32	s25, s25, s24
 801e3c2:	eecc 7aab 	vdiv.f32	s15, s25, s23
 801e3c6:	ee17 0a90 	vmov	r0, s15
 801e3ca:	f7ee f81d 	bl	800c408 <__aeabi_f2d>
 801e3ce:	4602      	mov	r2, r0
 801e3d0:	460b      	mov	r3, r1
 801e3d2:	4658      	mov	r0, fp
 801e3d4:	f7fa f97c 	bl	80186d0 <commands_printf>
	for (int i = 0;i < it_ofs;i++) {
 801e3d8:	45b2      	cmp	sl, r6
 801e3da:	d1c3      	bne.n	801e364 <mcpwm_foc_encoder_detect+0x374>
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e3dc:	ed5f ba22 	vldr	s23, [pc, #-136]	; 801e358 <mcpwm_foc_encoder_detect+0x368>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e3e0:	ed1f ca22 	vldr	s24, [pc, #-136]	; 801e35c <mcpwm_foc_encoder_detect+0x36c>
 801e3e4:	f8df a208 	ldr.w	sl, [pc, #520]	; 801e5f0 <mcpwm_foc_encoder_detect+0x600>
 801e3e8:	e001      	b.n	801e3ee <mcpwm_foc_encoder_detect+0x3fe>
	for (int i = it_ofs;i > 0;i--) {
 801e3ea:	3e01      	subs	r6, #1
 801e3ec:	d03a      	beq.n	801e464 <mcpwm_foc_encoder_detect+0x474>
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e3ee:	ee07 6a90 	vmov	s15, r6
 801e3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e3f6:	f8d8 3000 	ldr.w	r3, [r8]
 801e3fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801e3fe:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 801e402:	ee67 7aab 	vmul.f32	s15, s15, s23
		chThdSleepMilliseconds(500);
 801e406:	f241 3088 	movw	r0, #5000	; 0x1388
		m_phase_now_override = ((float)i * 2.0 * M_PI * m_conf->foc_encoder_ratio) / ((float)it_ofs);
 801e40a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e40e:	ee87 7a89 	vdiv.f32	s14, s15, s18
 801e412:	ed84 7a00 	vstr	s14, [r4]
		chThdSleepMilliseconds(500);
 801e416:	f7ef fae3 	bl	800d9e0 <chThdSleep>
		float diff = utils_angle_difference_rad(m_phase_now_encoder, m_phase_now_override);
 801e41a:	ed95 0a00 	vldr	s0, [r5]
 801e41e:	edd4 0a00 	vldr	s1, [r4]
 801e422:	f7f7 fc15 	bl	8015c50 <utils_angle_difference_rad>
		sincosf(diff, &s, &c);
 801e426:	a905      	add	r1, sp, #20
 801e428:	a804      	add	r0, sp, #16
		float diff = utils_angle_difference_rad(m_phase_now_encoder, m_phase_now_override);
 801e42a:	eef0 ca40 	vmov.f32	s25, s0
		sincosf(diff, &s, &c);
 801e42e:	f007 fc1f 	bl	8025c70 <sincosf>
		s_sum += s;
 801e432:	ed9d 7a04 	vldr	s14, [sp, #16]
		c_sum += c;
 801e436:	eddd 7a05 	vldr	s15, [sp, #20]
		s_sum += s;
 801e43a:	ee78 8a87 	vadd.f32	s17, s17, s14
		c_sum += c;
 801e43e:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (print) {
 801e442:	2f00      	cmp	r7, #0
 801e444:	d0d1      	beq.n	801e3ea <mcpwm_foc_encoder_detect+0x3fa>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e446:	ee6c ca8c 	vmul.f32	s25, s25, s24
 801e44a:	eecc 7aab 	vdiv.f32	s15, s25, s23
 801e44e:	ee17 0a90 	vmov	r0, s15
 801e452:	f7ed ffd9 	bl	800c408 <__aeabi_f2d>
 801e456:	4602      	mov	r2, r0
 801e458:	460b      	mov	r3, r1
 801e45a:	4650      	mov	r0, sl
 801e45c:	f7fa f938 	bl	80186d0 <commands_printf>
	for (int i = it_ofs;i > 0;i--) {
 801e460:	3e01      	subs	r6, #1
 801e462:	d1c4      	bne.n	801e3ee <mcpwm_foc_encoder_detect+0x3fe>
	*offset = atan2f(s_sum, c_sum) * 180.0 / M_PI;
 801e464:	eef0 0a48 	vmov.f32	s1, s16
 801e468:	eeb0 0a68 	vmov.f32	s0, s17
 801e46c:	f007 f900 	bl	8025670 <atan2f>
 801e470:	eddf 7a50 	vldr	s15, [pc, #320]	; 801e5b4 <mcpwm_foc_encoder_detect+0x5c4>
 801e474:	eddf 6a50 	vldr	s13, [pc, #320]	; 801e5b8 <mcpwm_foc_encoder_detect+0x5c8>
 801e478:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e47c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e480:	ed89 7a00 	vstr	s14, [r9]
	if (print) {
 801e484:	2f00      	cmp	r7, #0
 801e486:	d148      	bne.n	801e51a <mcpwm_foc_encoder_detect+0x52a>
	utils_norm_angle(offset);
 801e488:	4648      	mov	r0, r9
 801e48a:	f7f7 fae9 	bl	8015a60 <utils_norm_angle>
	m_iq_set = 0.0;
 801e48e:	484b      	ldr	r0, [pc, #300]	; (801e5bc <mcpwm_foc_encoder_detect+0x5cc>)
	m_id_set = 0.0;
 801e490:	494b      	ldr	r1, [pc, #300]	; (801e5c0 <mcpwm_foc_encoder_detect+0x5d0>)
 801e492:	2200      	movs	r2, #0
 801e494:	600a      	str	r2, [r1, #0]
	m_iq_set = 0.0;
 801e496:	6002      	str	r2, [r0, #0]
	m_phase_override = false;
 801e498:	4a4a      	ldr	r2, [pc, #296]	; (801e5c4 <mcpwm_foc_encoder_detect+0x5d4>)
 801e49a:	2300      	movs	r3, #0
 801e49c:	7013      	strb	r3, [r2, #0]
	m_control_mode = CONTROL_MODE_NONE;
 801e49e:	4a4a      	ldr	r2, [pc, #296]	; (801e5c8 <mcpwm_foc_encoder_detect+0x5d8>)
 801e4a0:	2107      	movs	r1, #7
 801e4a2:	7011      	strb	r1, [r2, #0]
	m_state = MC_STATE_OFF;
 801e4a4:	4a49      	ldr	r2, [pc, #292]	; (801e5cc <mcpwm_foc_encoder_detect+0x5dc>)
 801e4a6:	7013      	strb	r3, [r2, #0]
	stop_pwm_hw();
 801e4a8:	f7fe fc82 	bl	801cdb0 <stop_pwm_hw>
	m_conf->foc_encoder_inverted = inverted_old;
 801e4ac:	eef5 9a40 	vcmp.f32	s19, #0.0
 801e4b0:	f8d8 3000 	ldr.w	r3, [r8]
	timeout_configure(tout, tout_c);
 801e4b4:	9801      	ldr	r0, [sp, #4]
	m_conf->foc_encoder_inverted = inverted_old;
 801e4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ba:	bf14      	ite	ne
 801e4bc:	2201      	movne	r2, #1
 801e4be:	2200      	moveq	r2, #0
 801e4c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	timeout_configure(tout, tout_c);
 801e4c4:	eeb0 0a4a 	vmov.f32	s0, s20
	m_conf->foc_encoder_offset = offset_old;
 801e4c8:	edc3 aa2d 	vstr	s21, [r3, #180]	; 0xb4
	m_conf->foc_encoder_ratio = ratio_old;
 801e4cc:	ed83 ba2f 	vstr	s22, [r3, #188]	; 0xbc
	timeout_configure(tout, tout_c);
 801e4d0:	f7fb fe8e 	bl	801a1f0 <timeout_configure>
}
 801e4d4:	b007      	add	sp, #28
 801e4d6:	ecbd 8b0e 	vpop	{d8-d14}
 801e4da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mc_interface_unlock();
 801e4de:	f7fc bfcf 	b.w	801b480 <mc_interface_unlock>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e4e2:	ee68 7a0e 	vmul.f32	s15, s16, s28
 801e4e6:	ee87 7aad 	vdiv.f32	s14, s15, s27
 801e4ea:	ee17 0a10 	vmov	r0, s14
 801e4ee:	f7ed ff8b 	bl	800c408 <__aeabi_f2d>
 801e4f2:	4602      	mov	r2, r0
 801e4f4:	460b      	mov	r3, r1
 801e4f6:	4658      	mov	r0, fp
 801e4f8:	f7fa f8ea 	bl	80186d0 <commands_printf>
 801e4fc:	e632      	b.n	801e164 <mcpwm_foc_encoder_detect+0x174>
			commands_printf("%.2f", (double)(diff * 180.0 / M_PI));
 801e4fe:	ee68 7a0e 	vmul.f32	s15, s16, s28
 801e502:	ee87 7aad 	vdiv.f32	s14, s15, s27
 801e506:	ee17 0a10 	vmov	r0, s14
 801e50a:	f7ed ff7d 	bl	800c408 <__aeabi_f2d>
 801e50e:	4602      	mov	r2, r0
 801e510:	460b      	mov	r3, r1
 801e512:	4658      	mov	r0, fp
 801e514:	f7fa f8dc 	bl	80186d0 <commands_printf>
 801e518:	e680      	b.n	801e21c <mcpwm_foc_encoder_detect+0x22c>
		commands_printf("Avg: %.2f", (double)*offset);
 801e51a:	ee17 0a10 	vmov	r0, s14
 801e51e:	f7ed ff73 	bl	800c408 <__aeabi_f2d>
 801e522:	4602      	mov	r2, r0
 801e524:	460b      	mov	r3, r1
 801e526:	482a      	ldr	r0, [pc, #168]	; (801e5d0 <mcpwm_foc_encoder_detect+0x5e0>)
 801e528:	f7fa f8d2 	bl	80186d0 <commands_printf>
	utils_norm_angle(offset);
 801e52c:	4648      	mov	r0, r9
 801e52e:	f7f7 fa97 	bl	8015a60 <utils_norm_angle>
		commands_printf("Offset detected");
 801e532:	4828      	ldr	r0, [pc, #160]	; (801e5d4 <mcpwm_foc_encoder_detect+0x5e4>)
 801e534:	f7fa f8cc 	bl	80186d0 <commands_printf>
 801e538:	e7a9      	b.n	801e48e <mcpwm_foc_encoder_detect+0x49e>
		commands_printf("Inversion and ratio detected");
 801e53a:	4827      	ldr	r0, [pc, #156]	; (801e5d8 <mcpwm_foc_encoder_detect+0x5e8>)
 801e53c:	f7fa f8c8 	bl	80186d0 <commands_printf>
	for (float i = m_phase_now_override;i < 2.0 * M_PI;i += (2.0 * M_PI) / 500.0) {
 801e540:	ed94 8a00 	vldr	s16, [r4]
 801e544:	eddf 7a25 	vldr	s15, [pc, #148]	; 801e5dc <mcpwm_foc_encoder_detect+0x5ec>
 801e548:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e550:	f53f aeb1 	bmi.w	801e2b6 <mcpwm_foc_encoder_detect+0x2c6>
		commands_printf("Rotated for sync");
 801e554:	4822      	ldr	r0, [pc, #136]	; (801e5e0 <mcpwm_foc_encoder_detect+0x5f0>)
 801e556:	f7fa f8bb 	bl	80186d0 <commands_printf>
		commands_printf("Enc: %.2f", (double)encoder_read_deg());
 801e55a:	f7fc fbc9 	bl	801acf0 <encoder_read_deg>
 801e55e:	ee10 0a10 	vmov	r0, s0
 801e562:	f7ed ff51 	bl	800c408 <__aeabi_f2d>
 801e566:	4602      	mov	r2, r0
 801e568:	460b      	mov	r3, r1
 801e56a:	481e      	ldr	r0, [pc, #120]	; (801e5e4 <mcpwm_foc_encoder_detect+0x5f4>)
 801e56c:	f7fa f8b0 	bl	80186d0 <commands_printf>
	const int it_ofs = m_conf->foc_encoder_ratio * 3.0;
 801e570:	f8d8 3000 	ldr.w	r3, [r8]
 801e574:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 801e578:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801e57c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e584:	ee17 aa90 	vmov	sl, s15
	for (int i = 0;i < it_ofs;i++) {
 801e588:	f1ba 0f00 	cmp.w	sl, #0
 801e58c:	f73f aeb6 	bgt.w	801e2fc <mcpwm_foc_encoder_detect+0x30c>
	c_sum = 0.0;
 801e590:	ed9f 8a15 	vldr	s16, [pc, #84]	; 801e5e8 <mcpwm_foc_encoder_detect+0x5f8>
	s_sum = 0.0;
 801e594:	eef0 8a48 	vmov.f32	s17, s16
 801e598:	e764      	b.n	801e464 <mcpwm_foc_encoder_detect+0x474>
		commands_printf("Rotated for sync");
 801e59a:	4811      	ldr	r0, [pc, #68]	; (801e5e0 <mcpwm_foc_encoder_detect+0x5f0>)
 801e59c:	f7fa f898 	bl	80186d0 <commands_printf>
 801e5a0:	e593      	b.n	801e0ca <mcpwm_foc_encoder_detect+0xda>
		commands_printf("Index found");
 801e5a2:	4812      	ldr	r0, [pc, #72]	; (801e5ec <mcpwm_foc_encoder_detect+0x5fc>)
 801e5a4:	f7fa f894 	bl	80186d0 <commands_printf>
 801e5a8:	e57d      	b.n	801e0a6 <mcpwm_foc_encoder_detect+0xb6>
	*offset = atan2f(s_sum, c_sum) * 180.0 / M_PI;
 801e5aa:	2300      	movs	r3, #0
 801e5ac:	f8c9 3000 	str.w	r3, [r9]
 801e5b0:	e76a      	b.n	801e488 <mcpwm_foc_encoder_detect+0x498>
 801e5b2:	bf00      	nop
 801e5b4:	43340000 	.word	0x43340000
 801e5b8:	40490fdb 	.word	0x40490fdb
 801e5bc:	2000cdd0 	.word	0x2000cdd0
 801e5c0:	2000cdc8 	.word	0x2000cdc8
 801e5c4:	2000ce59 	.word	0x2000ce59
 801e5c8:	2000cda4 	.word	0x2000cda4
 801e5cc:	2000ce84 	.word	0x2000ce84
 801e5d0:	080304fc 	.word	0x080304fc
 801e5d4:	08030508 	.word	0x08030508
 801e5d8:	080304d0 	.word	0x080304d0
 801e5dc:	40c90fdb 	.word	0x40c90fdb
 801e5e0:	080304bc 	.word	0x080304bc
 801e5e4:	080304f0 	.word	0x080304f0
 801e5e8:	00000000 	.word	0x00000000
 801e5ec:	080304b0 	.word	0x080304b0
 801e5f0:	0802f6a4 	.word	0x0802f6a4
	...

0801e600 <mcpwm_foc_measure_resistance>:
float mcpwm_foc_measure_resistance(float current, int samples) {
 801e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e604:	ed2d 8b04 	vpush	{d8-d9}
 801e608:	b083      	sub	sp, #12
 801e60a:	eef0 8a40 	vmov.f32	s17, s0
	m_phase_now_override = 0.0;
 801e60e:	ed9f 8a38 	vldr	s16, [pc, #224]	; 801e6f0 <mcpwm_foc_measure_resistance+0xf0>
	m_phase_override = true;
 801e612:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 801e708 <mcpwm_foc_measure_resistance+0x108>
	m_id_set = 0.0;
 801e616:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801e70c <mcpwm_foc_measure_resistance+0x10c>
	m_iq_set = current;
 801e61a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801e710 <mcpwm_foc_measure_resistance+0x110>
	m_control_mode = CONTROL_MODE_CURRENT;
 801e61e:	4e35      	ldr	r6, [pc, #212]	; (801e6f4 <mcpwm_foc_measure_resistance+0xf4>)
	m_state = MC_STATE_RUNNING;
 801e620:	4f35      	ldr	r7, [pc, #212]	; (801e6f8 <mcpwm_foc_measure_resistance+0xf8>)
	m_samples.avg_current_tot = 0.0;
 801e622:	4c36      	ldr	r4, [pc, #216]	; (801e6fc <mcpwm_foc_measure_resistance+0xfc>)
float mcpwm_foc_measure_resistance(float current, int samples) {
 801e624:	4605      	mov	r5, r0
	mc_interface_lock();
 801e626:	f7fc ff23 	bl	801b470 <mc_interface_lock>
	m_phase_now_override = 0.0;
 801e62a:	4a35      	ldr	r2, [pc, #212]	; (801e700 <mcpwm_foc_measure_resistance+0x100>)
	m_control_mode = CONTROL_MODE_CURRENT;
 801e62c:	2302      	movs	r3, #2
	m_phase_override = true;
 801e62e:	2101      	movs	r1, #1
 801e630:	f889 1000 	strb.w	r1, [r9]
	m_phase_now_override = 0.0;
 801e634:	ed82 8a00 	vstr	s16, [r2]
	m_id_set = 0.0;
 801e638:	ed8a 8a00 	vstr	s16, [sl]
	m_iq_set = current;
 801e63c:	edc8 8a00 	vstr	s17, [r8]
	m_control_mode = CONTROL_MODE_CURRENT;
 801e640:	7033      	strb	r3, [r6, #0]
	m_state = MC_STATE_RUNNING;
 801e642:	703b      	strb	r3, [r7, #0]
	systime_t tout = timeout_get_timeout_msec();
 801e644:	f7fb fdfc 	bl	801a240 <timeout_get_timeout_msec>
 801e648:	9001      	str	r0, [sp, #4]
	float tout_c = timeout_get_brake_current();
 801e64a:	f7fb fe01 	bl	801a250 <timeout_get_brake_current>
 801e64e:	eef0 8a40 	vmov.f32	s17, s0
	timeout_reset();
 801e652:	f7fb fddd 	bl	801a210 <timeout_reset>
	timeout_configure(60000, 0.0);
 801e656:	eeb0 0a48 	vmov.f32	s0, s16
 801e65a:	f64e 2060 	movw	r0, #60000	; 0xea60
 801e65e:	f7fb fdc7 	bl	801a1f0 <timeout_configure>
	chThdSleepMilliseconds(500);
 801e662:	f241 3088 	movw	r0, #5000	; 0x1388
 801e666:	f7ef f9bb 	bl	800d9e0 <chThdSleep>
	m_samples.sample_num = 0;
 801e66a:	2300      	movs	r3, #0
	m_samples.avg_current_tot = 0.0;
 801e66c:	ed84 8a01 	vstr	s16, [r4, #4]
	while (m_samples.sample_num < samples) {
 801e670:	f242 7b11 	movw	fp, #10001	; 0x2711
	m_samples.avg_voltage_tot = 0.0;
 801e674:	ed84 8a02 	vstr	s16, [r4, #8]
	m_samples.sample_num = 0;
 801e678:	6023      	str	r3, [r4, #0]
	while (m_samples.sample_num < samples) {
 801e67a:	e004      	b.n	801e686 <mcpwm_foc_measure_resistance+0x86>
		chThdSleepMilliseconds(1);
 801e67c:	f7ef f9b0 	bl	800d9e0 <chThdSleep>
		if (cnt > 10000) {
 801e680:	f1bb 0b01 	subs.w	fp, fp, #1
 801e684:	d004      	beq.n	801e690 <mcpwm_foc_measure_resistance+0x90>
	while (m_samples.sample_num < samples) {
 801e686:	6822      	ldr	r2, [r4, #0]
 801e688:	42aa      	cmp	r2, r5
		chThdSleepMilliseconds(1);
 801e68a:	f04f 000a 	mov.w	r0, #10
	while (m_samples.sample_num < samples) {
 801e68e:	dbf5      	blt.n	801e67c <mcpwm_foc_measure_resistance+0x7c>
	const float current_avg = m_samples.avg_current_tot / (float)m_samples.sample_num;
 801e690:	ed94 6a01 	vldr	s12, [r4, #4]
 801e694:	ed94 7a00 	vldr	s14, [r4]
	const float voltage_avg = m_samples.avg_voltage_tot / (float)m_samples.sample_num;
 801e698:	edd4 6a02 	vldr	s13, [r4, #8]
 801e69c:	edd4 7a00 	vldr	s15, [r4]
	const float current_avg = m_samples.avg_current_tot / (float)m_samples.sample_num;
 801e6a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	const float voltage_avg = m_samples.avg_voltage_tot / (float)m_samples.sample_num;
 801e6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	const float current_avg = m_samples.avg_current_tot / (float)m_samples.sample_num;
 801e6a8:	ee86 8a07 	vdiv.f32	s16, s12, s14
	m_id_set = 0.0;
 801e6ac:	2200      	movs	r2, #0
	m_phase_override = false;
 801e6ae:	2300      	movs	r3, #0
	m_control_mode = CONTROL_MODE_NONE;
 801e6b0:	2107      	movs	r1, #7
	m_id_set = 0.0;
 801e6b2:	f8ca 2000 	str.w	r2, [sl]
	m_iq_set = 0.0;
 801e6b6:	f8c8 2000 	str.w	r2, [r8]
	m_phase_override = false;
 801e6ba:	f889 3000 	strb.w	r3, [r9]
	m_control_mode = CONTROL_MODE_NONE;
 801e6be:	7031      	strb	r1, [r6, #0]
	m_state = MC_STATE_OFF;
 801e6c0:	703b      	strb	r3, [r7, #0]
	const float voltage_avg = m_samples.avg_voltage_tot / (float)m_samples.sample_num;
 801e6c2:	ee86 9aa7 	vdiv.f32	s18, s13, s15
	stop_pwm_hw();
 801e6c6:	f7fe fb73 	bl	801cdb0 <stop_pwm_hw>
	timeout_configure(tout, tout_c);
 801e6ca:	9801      	ldr	r0, [sp, #4]
 801e6cc:	eeb0 0a68 	vmov.f32	s0, s17
 801e6d0:	f7fb fd8e 	bl	801a1f0 <timeout_configure>
	mc_interface_unlock();
 801e6d4:	f7fc fed4 	bl	801b480 <mc_interface_unlock>
	return (voltage_avg / current_avg) * (2.0 / 3.0);
 801e6d8:	ee89 0a08 	vdiv.f32	s0, s18, s16
 801e6dc:	eddf 7a09 	vldr	s15, [pc, #36]	; 801e704 <mcpwm_foc_measure_resistance+0x104>
 801e6e0:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801e6e4:	b003      	add	sp, #12
 801e6e6:	ecbd 8b04 	vpop	{d8-d9}
 801e6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ee:	bf00      	nop
 801e6f0:	00000000 	.word	0x00000000
 801e6f4:	2000cda4 	.word	0x2000cda4
 801e6f8:	2000ce84 	.word	0x2000ce84
 801e6fc:	2000ce6c 	.word	0x2000ce6c
 801e700:	2000ce54 	.word	0x2000ce54
 801e704:	3f2aaaab 	.word	0x3f2aaaab
 801e708:	2000ce59 	.word	0x2000ce59
 801e70c:	2000cdc8 	.word	0x2000cdc8
 801e710:	2000cdd0 	.word	0x2000cdd0
	...

0801e720 <mcpwm_foc_measure_inductance>:
float mcpwm_foc_measure_inductance(float duty, int samples, float *curr) {
 801e720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	m_samples.avg_current_tot = 0.0;
 801e724:	4d39      	ldr	r5, [pc, #228]	; (801e80c <mcpwm_foc_measure_inductance+0xec>)
float mcpwm_foc_measure_inductance(float duty, int samples, float *curr) {
 801e726:	ed2d 8b02 	vpush	{d8}
	m_samples.avg_current_tot = 0.0;
 801e72a:	eddf 8a39 	vldr	s17, [pc, #228]	; 801e810 <mcpwm_foc_measure_inductance+0xf0>
	m_samples.sample_num = 0;
 801e72e:	2700      	movs	r7, #0
float mcpwm_foc_measure_inductance(float duty, int samples, float *curr) {
 801e730:	468a      	mov	sl, r1
	m_samples.avg_current_tot = 0.0;
 801e732:	edc5 8a01 	vstr	s17, [r5, #4]
float mcpwm_foc_measure_inductance(float duty, int samples, float *curr) {
 801e736:	4680      	mov	r8, r0
	m_samples.avg_voltage_tot = 0.0;
 801e738:	edc5 8a02 	vstr	s17, [r5, #8]
	m_samples.sample_num = 0;
 801e73c:	602f      	str	r7, [r5, #0]
	m_samples.measure_inductance_duty = duty;
 801e73e:	ed85 0a04 	vstr	s0, [r5, #16]
	systime_t tout = timeout_get_timeout_msec();
 801e742:	f7fb fd7d 	bl	801a240 <timeout_get_timeout_msec>
 801e746:	4683      	mov	fp, r0
	float tout_c = timeout_get_brake_current();
 801e748:	f7fb fd82 	bl	801a250 <timeout_get_brake_current>
 801e74c:	eeb0 8a40 	vmov.f32	s16, s0
	timeout_reset();
 801e750:	f7fb fd5e 	bl	801a210 <timeout_reset>
	timeout_configure(60000, 0.0);
 801e754:	eeb0 0a68 	vmov.f32	s0, s17
 801e758:	f64e 2060 	movw	r0, #60000	; 0xea60
 801e75c:	f7fb fd48 	bl	801a1f0 <timeout_configure>
	mc_interface_lock();
 801e760:	f7fc fe86 	bl	801b470 <mc_interface_lock>
	for (int i = 0;i < samples;i++) {
 801e764:	45b8      	cmp	r8, r7
 801e766:	dd10      	ble.n	801e78a <mcpwm_foc_measure_inductance+0x6a>
 801e768:	463c      	mov	r4, r7
		m_samples.measure_inductance_now = true;
 801e76a:	f04f 0901 	mov.w	r9, #1
			if (to_cnt > 50000) {
 801e76e:	f24c 3650 	movw	r6, #50000	; 0xc350
		m_samples.measure_inductance_now = true;
 801e772:	f885 900c 	strb.w	r9, [r5, #12]
 801e776:	e002      	b.n	801e77e <mcpwm_foc_measure_inductance+0x5e>
		} while (m_samples.measure_inductance_now);
 801e778:	7b2b      	ldrb	r3, [r5, #12]
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d042      	beq.n	801e804 <mcpwm_foc_measure_inductance+0xe4>
			to_cnt++;
 801e77e:	3401      	adds	r4, #1
			chThdSleepMicroseconds(100);
 801e780:	2001      	movs	r0, #1
 801e782:	f7ef f92d 	bl	800d9e0 <chThdSleep>
			if (to_cnt > 50000) {
 801e786:	42b4      	cmp	r4, r6
 801e788:	ddf6      	ble.n	801e778 <mcpwm_foc_measure_inductance+0x58>
	timeout_configure(tout, tout_c);
 801e78a:	eeb0 0a48 	vmov.f32	s0, s16
 801e78e:	4658      	mov	r0, fp
 801e790:	f7fb fd2e 	bl	801a1f0 <timeout_configure>
	mc_interface_unlock();
 801e794:	f7fc fe74 	bl	801b480 <mc_interface_unlock>
	float t = (float)TIM1->ARR * m_samples.measure_inductance_duty / (float)SYSTEM_CORE_CLOCK -
 801e798:	4b1e      	ldr	r3, [pc, #120]	; (801e814 <mcpwm_foc_measure_inductance+0xf4>)
	float avg_current = m_samples.avg_current_tot / (float)m_samples.sample_num;
 801e79a:	edd5 4a01 	vldr	s9, [r5, #4]
 801e79e:	edd5 6a00 	vldr	s13, [r5]
	float avg_voltage = m_samples.avg_voltage_tot / (float)m_samples.sample_num;
 801e7a2:	ed95 5a02 	vldr	s10, [r5, #8]
 801e7a6:	ed95 7a00 	vldr	s14, [r5]
	float t = (float)TIM1->ARR * m_samples.measure_inductance_duty / (float)SYSTEM_CORE_CLOCK -
 801e7aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801e7ae:	ed95 6a04 	vldr	s12, [r5, #16]
 801e7b2:	ed9f 4a19 	vldr	s8, [pc, #100]	; 801e818 <mcpwm_foc_measure_inductance+0xf8>
 801e7b6:	eddf 5a19 	vldr	s11, [pc, #100]	; 801e81c <mcpwm_foc_measure_inductance+0xfc>
 801e7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float avg_current = m_samples.avg_current_tot / (float)m_samples.sample_num;
 801e7be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float t = (float)TIM1->ARR * m_samples.measure_inductance_duty / (float)SYSTEM_CORE_CLOCK -
 801e7c2:	ee67 7a86 	vmul.f32	s15, s15, s12
	float avg_voltage = m_samples.avg_voltage_tot / (float)m_samples.sample_num;
 801e7c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float t = (float)TIM1->ARR * m_samples.measure_inductance_duty / (float)SYSTEM_CORE_CLOCK -
 801e7ca:	ee87 6a84 	vdiv.f32	s12, s15, s8
	float avg_current = m_samples.avg_current_tot / (float)m_samples.sample_num;
 801e7ce:	ee84 4aa6 	vdiv.f32	s8, s9, s13
	float avg_voltage = m_samples.avg_voltage_tot / (float)m_samples.sample_num;
 801e7d2:	eec5 7a07 	vdiv.f32	s15, s10, s14
	float t = (float)TIM1->ARR * m_samples.measure_inductance_duty / (float)SYSTEM_CORE_CLOCK -
 801e7d6:	ee36 6a65 	vsub.f32	s12, s12, s11
	if (curr) {
 801e7da:	f1ba 0f00 	cmp.w	sl, #0
 801e7de:	d001      	beq.n	801e7e4 <mcpwm_foc_measure_inductance+0xc4>
		*curr = avg_current;
 801e7e0:	ed8a 4a00 	vstr	s8, [sl]
	return ((avg_voltage * t) / avg_current) * 1e6 * (2.0 /  3.0);
 801e7e4:	ee27 6a86 	vmul.f32	s12, s15, s12
}
 801e7e8:	ecbd 8b02 	vpop	{d8}
	return ((avg_voltage * t) / avg_current) * 1e6 * (2.0 /  3.0);
 801e7ec:	ee86 0a04 	vdiv.f32	s0, s12, s8
 801e7f0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801e820 <mcpwm_foc_measure_inductance+0x100>
 801e7f4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801e824 <mcpwm_foc_measure_inductance+0x104>
 801e7f8:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e7fc:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801e800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0;i < samples;i++) {
 801e804:	3701      	adds	r7, #1
 801e806:	45b8      	cmp	r8, r7
 801e808:	d1b3      	bne.n	801e772 <mcpwm_foc_measure_inductance+0x52>
 801e80a:	e7be      	b.n	801e78a <mcpwm_foc_measure_inductance+0x6a>
 801e80c:	2000ce6c 	.word	0x2000ce6c
 801e810:	00000000 	.word	0x00000000
 801e814:	40010000 	.word	0x40010000
 801e818:	4d2037a0 	.word	0x4d2037a0
 801e81c:	34bfbd57 	.word	0x34bfbd57
 801e820:	49742400 	.word	0x49742400
 801e824:	3f2aaaab 	.word	0x3f2aaaab
	...

0801e830 <mcpwm_foc_measure_res_ind>:
bool mcpwm_foc_measure_res_ind(float *res, float *ind) {
 801e830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const float f_sw_old = m_conf->foc_f_sw;
 801e834:	4d73      	ldr	r5, [pc, #460]	; (801ea04 <mcpwm_foc_measure_res_ind+0x1d4>)
	m_conf->foc_f_sw = 10000.0;
 801e836:	4a74      	ldr	r2, [pc, #464]	; (801ea08 <mcpwm_foc_measure_res_ind+0x1d8>)
	const float f_sw_old = m_conf->foc_f_sw;
 801e838:	682b      	ldr	r3, [r5, #0]
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e83a:	4c74      	ldr	r4, [pc, #464]	; (801ea0c <mcpwm_foc_measure_res_ind+0x1dc>)
	const float f_sw_old = m_conf->foc_f_sw;
 801e83c:	f8d3 90ac 	ldr.w	r9, [r3, #172]	; 0xac
	m_conf->foc_current_kp = 0.01;
 801e840:	4e73      	ldr	r6, [pc, #460]	; (801ea10 <mcpwm_foc_measure_res_ind+0x1e0>)
	const float kp_old = m_conf->foc_current_kp;
 801e842:	f8d3 80a4 	ldr.w	r8, [r3, #164]	; 0xa4
	const float ki_old = m_conf->foc_current_ki;
 801e846:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
bool mcpwm_foc_measure_res_ind(float *res, float *ind) {
 801e84a:	ed2d 8b04 	vpush	{d8-d9}
	m_conf->foc_f_sw = 10000.0;
 801e84e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	m_conf->foc_current_ki = 10.0;
 801e852:	4a70      	ldr	r2, [pc, #448]	; (801ea14 <mcpwm_foc_measure_res_ind+0x1e4>)
	m_conf->foc_current_kp = 0.01;
 801e854:	f8c3 60a4 	str.w	r6, [r3, #164]	; 0xa4
	m_conf->foc_current_ki = 10.0;
 801e858:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e85c:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e860:	f8d4 e000 	ldr.w	lr, [r4]
 801e864:	4a6c      	ldr	r2, [pc, #432]	; (801ea18 <mcpwm_foc_measure_res_ind+0x1e8>)
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e866:	4e6d      	ldr	r6, [pc, #436]	; (801ea1c <mcpwm_foc_measure_res_ind+0x1ec>)
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e868:	f04e 0e02 	orr.w	lr, lr, #2
 801e86c:	f8c4 e000 	str.w	lr, [r4]
 801e870:	f8d2 e000 	ldr.w	lr, [r2]
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e878:	f04e 0e02 	orr.w	lr, lr, #2
 801e87c:	f8c2 e000 	str.w	lr, [r2]
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e880:	ee17 ea90 	vmov	lr, s15
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e884:	f04f 0c02 	mov.w	ip, #2
	uint32_t top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e888:	fb96 f6fe 	sdiv	r6, r6, lr
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e88c:	62e6      	str	r6, [r4, #44]	; 0x2c
 801e88e:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
 801e892:	6826      	ldr	r6, [r4, #0]
 801e894:	f026 0602 	bic.w	r6, r6, #2
 801e898:	6026      	str	r6, [r4, #0]
 801e89a:	6814      	ldr	r4, [r2, #0]
 801e89c:	f024 0402 	bic.w	r4, r4, #2
 801e8a0:	6014      	str	r4, [r2, #0]
	for (float i = 2.0;i < (m_conf->l_current_max / 2.0);i *= 1.5) {
 801e8a2:	edd3 7a01 	vldr	s15, [r3, #4]
 801e8a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e8aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e8ae:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801e8b2:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
bool mcpwm_foc_measure_res_ind(float *res, float *ind) {
 801e8ba:	b083      	sub	sp, #12
 801e8bc:	4604      	mov	r4, r0
 801e8be:	460e      	mov	r6, r1
	for (float i = 2.0;i < (m_conf->l_current_max / 2.0);i *= 1.5) {
 801e8c0:	dd26      	ble.n	801e910 <mcpwm_foc_measure_res_ind+0xe0>
		if (i > (1.0 / res_tmp)) {
 801e8c2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	for (float i = 2.0;i < (m_conf->l_current_max / 2.0);i *= 1.5) {
 801e8c6:	eeb7 9a08 	vmov.f32	s18, #120	; 0x3fc00000  1.5
 801e8ca:	e00b      	b.n	801e8e4 <mcpwm_foc_measure_res_ind+0xb4>
 801e8cc:	682b      	ldr	r3, [r5, #0]
 801e8ce:	edd3 7a01 	vldr	s15, [r3, #4]
 801e8d2:	ee28 8a09 	vmul.f32	s16, s16, s18
 801e8d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e8da:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8e2:	dd15      	ble.n	801e910 <mcpwm_foc_measure_res_ind+0xe0>
		res_tmp = mcpwm_foc_measure_resistance(i, 20);
 801e8e4:	2014      	movs	r0, #20
 801e8e6:	eeb0 0a48 	vmov.f32	s0, s16
 801e8ea:	f7ff fe89 	bl	801e600 <mcpwm_foc_measure_resistance>
		if (i > (1.0 / res_tmp)) {
 801e8ee:	ee88 0a80 	vdiv.f32	s0, s17, s0
	for (float i = 2.0;i < (m_conf->l_current_max / 2.0);i *= 1.5) {
 801e8f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		if (i > (1.0 / res_tmp)) {
 801e8f6:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801e8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8fe:	d5e5      	bpl.n	801e8cc <mcpwm_foc_measure_res_ind+0x9c>
	if (i_last < 0.01) {
 801e900:	eddf 7a47 	vldr	s15, [pc, #284]	; 801ea20 <mcpwm_foc_measure_res_ind+0x1f0>
 801e904:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e90c:	d506      	bpl.n	801e91c <mcpwm_foc_measure_res_ind+0xec>
 801e90e:	682b      	ldr	r3, [r5, #0]
		i_last = (m_conf->l_current_max / 2.0);
 801e910:	ed93 8a01 	vldr	s16, [r3, #4]
 801e914:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e918:	ee28 8a27 	vmul.f32	s16, s16, s15
	*res = mcpwm_foc_measure_resistance(i_last, 200);
 801e91c:	20c8      	movs	r0, #200	; 0xc8
 801e91e:	eeb0 0a48 	vmov.f32	s0, s16
 801e922:	f7ff fe6d 	bl	801e600 <mcpwm_foc_measure_resistance>
	m_conf->foc_f_sw = 3000.0;
 801e926:	682b      	ldr	r3, [r5, #0]
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e928:	4a38      	ldr	r2, [pc, #224]	; (801ea0c <mcpwm_foc_measure_res_ind+0x1dc>)
	m_conf->foc_f_sw = 3000.0;
 801e92a:	493e      	ldr	r1, [pc, #248]	; (801ea24 <mcpwm_foc_measure_res_ind+0x1f4>)
	*res = mcpwm_foc_measure_resistance(i_last, 200);
 801e92c:	ed84 0a00 	vstr	s0, [r4]
	m_conf->foc_f_sw = 3000.0;
 801e930:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e934:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e938:	6811      	ldr	r1, [r2, #0]
 801e93a:	4b37      	ldr	r3, [pc, #220]	; (801ea18 <mcpwm_foc_measure_res_ind+0x1e8>)
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e93c:	4837      	ldr	r0, [pc, #220]	; (801ea1c <mcpwm_foc_measure_res_ind+0x1ec>)
	for (float i = 0.02;i < 0.5;i *= 1.5) {
 801e93e:	eddf 8a3a 	vldr	s17, [pc, #232]	; 801ea28 <mcpwm_foc_measure_res_ind+0x1f8>
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e942:	f041 0102 	orr.w	r1, r1, #2
 801e946:	6011      	str	r1, [r2, #0]
 801e948:	6819      	ldr	r1, [r3, #0]
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e94a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e94e:	f041 0102 	orr.w	r1, r1, #2
 801e952:	6019      	str	r1, [r3, #0]
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e954:	ee17 1a90 	vmov	r1, s15
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e958:	2402      	movs	r4, #2
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e95a:	fb90 f1f1 	sdiv	r1, r0, r1
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e95e:	62d1      	str	r1, [r2, #44]	; 0x2c
 801e960:	635c      	str	r4, [r3, #52]	; 0x34
 801e962:	6811      	ldr	r1, [r2, #0]
 801e964:	f021 0102 	bic.w	r1, r1, #2
 801e968:	6011      	str	r1, [r2, #0]
 801e96a:	681a      	ldr	r2, [r3, #0]
 801e96c:	f022 0202 	bic.w	r2, r2, #2
 801e970:	601a      	str	r2, [r3, #0]
 801e972:	2408      	movs	r4, #8
	for (float i = 0.02;i < 0.5;i *= 1.5) {
 801e974:	eeb7 9a08 	vmov.f32	s18, #120	; 0x3fc00000  1.5
 801e978:	e001      	b.n	801e97e <mcpwm_foc_measure_res_ind+0x14e>
 801e97a:	eef0 8a67 	vmov.f32	s17, s15
		mcpwm_foc_measure_inductance(i, 20, &i_tmp);
 801e97e:	a901      	add	r1, sp, #4
 801e980:	2014      	movs	r0, #20
 801e982:	eeb0 0a68 	vmov.f32	s0, s17
 801e986:	f7ff fecb 	bl	801e720 <mcpwm_foc_measure_inductance>
		if (i_tmp >= i_last) {
 801e98a:	eddd 7a01 	vldr	s15, [sp, #4]
 801e98e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e996:	d903      	bls.n	801e9a0 <mcpwm_foc_measure_res_ind+0x170>
	for (float i = 0.02;i < 0.5;i *= 1.5) {
 801e998:	3c01      	subs	r4, #1
 801e99a:	ee68 7a89 	vmul.f32	s15, s17, s18
 801e99e:	d1ec      	bne.n	801e97a <mcpwm_foc_measure_res_ind+0x14a>
	*ind = mcpwm_foc_measure_inductance(duty_last, 200, 0);
 801e9a0:	eeb0 0a68 	vmov.f32	s0, s17
 801e9a4:	2100      	movs	r1, #0
 801e9a6:	20c8      	movs	r0, #200	; 0xc8
 801e9a8:	f7ff feba 	bl	801e720 <mcpwm_foc_measure_inductance>
	m_conf->foc_f_sw = f_sw_old;
 801e9ac:	682b      	ldr	r3, [r5, #0]
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e9ae:	4a17      	ldr	r2, [pc, #92]	; (801ea0c <mcpwm_foc_measure_res_ind+0x1dc>)
	*ind = mcpwm_foc_measure_inductance(duty_last, 200, 0);
 801e9b0:	ed86 0a00 	vstr	s0, [r6]
	m_conf->foc_f_sw = f_sw_old;
 801e9b4:	f8c3 90ac 	str.w	r9, [r3, #172]	; 0xac
	m_conf->foc_current_kp = kp_old;
 801e9b8:	f8c3 80a4 	str.w	r8, [r3, #164]	; 0xa4
	m_conf->foc_current_ki = ki_old;
 801e9bc:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e9c0:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e9c4:	6811      	ldr	r1, [r2, #0]
 801e9c6:	4b14      	ldr	r3, [pc, #80]	; (801ea18 <mcpwm_foc_measure_res_ind+0x1e8>)
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e9c8:	4814      	ldr	r0, [pc, #80]	; (801ea1c <mcpwm_foc_measure_res_ind+0x1ec>)
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e9ca:	f041 0102 	orr.w	r1, r1, #2
 801e9ce:	6011      	str	r1, [r2, #0]
 801e9d0:	6819      	ldr	r1, [r3, #0]
 801e9d2:	2402      	movs	r4, #2
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e9d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e9d8:	4321      	orrs	r1, r4
 801e9da:	6019      	str	r1, [r3, #0]
	top = SYSTEM_CORE_CLOCK / (int)m_conf->foc_f_sw;
 801e9dc:	ee17 1a90 	vmov	r1, s15
 801e9e0:	fb90 f1f1 	sdiv	r1, r0, r1
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e9e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 801e9e6:	635c      	str	r4, [r3, #52]	; 0x34
 801e9e8:	6811      	ldr	r1, [r2, #0]
 801e9ea:	f021 0102 	bic.w	r1, r1, #2
 801e9ee:	6011      	str	r1, [r2, #0]
 801e9f0:	681a      	ldr	r2, [r3, #0]
}
 801e9f2:	2001      	movs	r0, #1
	TIMER_UPDATE_SAMP_TOP(MCPWM_FOC_CURRENT_SAMP_OFFSET, top);
 801e9f4:	f022 0202 	bic.w	r2, r2, #2
 801e9f8:	601a      	str	r2, [r3, #0]
}
 801e9fa:	b003      	add	sp, #12
 801e9fc:	ecbd 8b04 	vpop	{d8-d9}
 801ea00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea04:	2000cda0 	.word	0x2000cda0
 801ea08:	461c4000 	.word	0x461c4000
 801ea0c:	40010000 	.word	0x40010000
 801ea10:	3c23d70a 	.word	0x3c23d70a
 801ea14:	41200000 	.word	0x41200000
 801ea18:	40010400 	.word	0x40010400
 801ea1c:	0a037a00 	.word	0x0a037a00
 801ea20:	3c23d70a 	.word	0x3c23d70a
 801ea24:	453b8000 	.word	0x453b8000
 801ea28:	3ca3d70a 	.word	0x3ca3d70a
 801ea2c:	00000000 	.word	0x00000000

0801ea30 <mcpwm_foc_hall_detect>:
bool mcpwm_foc_hall_detect(float current, uint8_t *hall_table) {
 801ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea34:	ed2d 8b04 	vpush	{d8-d9}
 801ea38:	b09d      	sub	sp, #116	; 0x74
 801ea3a:	eeb0 8a40 	vmov.f32	s16, s0
 801ea3e:	9001      	str	r0, [sp, #4]
	mc_interface_lock();
 801ea40:	f7fc fd16 	bl	801b470 <mc_interface_lock>
	m_phase_override = true;
 801ea44:	4986      	ldr	r1, [pc, #536]	; (801ec60 <mcpwm_foc_hall_detect+0x230>)
	m_iq_set = 0.0;
 801ea46:	eddf 9a87 	vldr	s19, [pc, #540]	; 801ec64 <mcpwm_foc_hall_detect+0x234>
	m_id_set = current;
 801ea4a:	f8df b238 	ldr.w	fp, [pc, #568]	; 801ec84 <mcpwm_foc_hall_detect+0x254>
	m_iq_set = 0.0;
 801ea4e:	f8df a238 	ldr.w	sl, [pc, #568]	; 801ec88 <mcpwm_foc_hall_detect+0x258>
	m_state = MC_STATE_RUNNING;
 801ea52:	4f85      	ldr	r7, [pc, #532]	; (801ec68 <mcpwm_foc_hall_detect+0x238>)
	m_phase_now_override = 0;
 801ea54:	4c85      	ldr	r4, [pc, #532]	; (801ec6c <mcpwm_foc_hall_detect+0x23c>)
			m_phase_now_override = (float)i * M_PI / 180.0;
 801ea56:	ed9f 9a86 	vldr	s18, [pc, #536]	; 801ec70 <mcpwm_foc_hall_detect+0x240>
 801ea5a:	eddf 8a86 	vldr	s17, [pc, #536]	; 801ec74 <mcpwm_foc_hall_detect+0x244>
	m_phase_override = true;
 801ea5e:	2201      	movs	r2, #1
 801ea60:	700a      	strb	r2, [r1, #0]
	m_control_mode = CONTROL_MODE_CURRENT;
 801ea62:	4a85      	ldr	r2, [pc, #532]	; (801ec78 <mcpwm_foc_hall_detect+0x248>)
	m_id_set = current;
 801ea64:	ed8b 8a00 	vstr	s16, [fp]
	m_control_mode = CONTROL_MODE_CURRENT;
 801ea68:	2302      	movs	r3, #2
	m_iq_set = 0.0;
 801ea6a:	edca 9a00 	vstr	s19, [sl]
	m_control_mode = CONTROL_MODE_CURRENT;
 801ea6e:	7013      	strb	r3, [r2, #0]
	m_state = MC_STATE_RUNNING;
 801ea70:	703b      	strb	r3, [r7, #0]
	systime_t tout = timeout_get_timeout_msec();
 801ea72:	f7fb fbe5 	bl	801a240 <timeout_get_timeout_msec>
 801ea76:	9000      	str	r0, [sp, #0]
	float tout_c = timeout_get_brake_current();
 801ea78:	f7fb fbea 	bl	801a250 <timeout_get_brake_current>
 801ea7c:	eeb0 8a40 	vmov.f32	s16, s0
	timeout_reset();
 801ea80:	f7fb fbc6 	bl	801a210 <timeout_reset>
	timeout_configure(60000, 0.0);
 801ea84:	eeb0 0a69 	vmov.f32	s0, s19
 801ea88:	f64e 2060 	movw	r0, #60000	; 0xea60
 801ea8c:	f7fb fbb0 	bl	801a1f0 <timeout_configure>
	chThdSleepMilliseconds(1000);
 801ea90:	f242 7010 	movw	r0, #10000	; 0x2710
	m_phase_now_override = 0;
 801ea94:	edc4 9a00 	vstr	s19, [r4]
	memset(cos_hall, 0, sizeof(cos_hall));
 801ea98:	ae0c      	add	r6, sp, #48	; 0x30
	chThdSleepMilliseconds(1000);
 801ea9a:	f7ee ffa1 	bl	800d9e0 <chThdSleep>
	memset(sin_hall, 0, sizeof(sin_hall));
 801ea9e:	2220      	movs	r2, #32
 801eaa0:	2100      	movs	r1, #0
 801eaa2:	a804      	add	r0, sp, #16
 801eaa4:	f009 f8ec 	bl	8027c80 <memset>
	memset(cos_hall, 0, sizeof(cos_hall));
 801eaa8:	2220      	movs	r2, #32
 801eaaa:	2100      	movs	r1, #0
 801eaac:	4630      	mov	r0, r6
 801eaae:	f009 f8e7 	bl	8027c80 <memset>
	memset(hall_iterations, 0, sizeof(hall_iterations));
 801eab2:	2220      	movs	r2, #32
 801eab4:	2100      	movs	r1, #0
 801eab6:	a814      	add	r0, sp, #80	; 0x50
 801eab8:	f009 f8e2 	bl	8027c80 <memset>
 801eabc:	2503      	movs	r5, #3
bool mcpwm_foc_hall_detect(float current, uint8_t *hall_table) {
 801eabe:	f04f 0900 	mov.w	r9, #0
			m_phase_now_override = (float)i * M_PI / 180.0;
 801eac2:	ee07 9a90 	vmov	s15, r9
 801eac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			chThdSleepMilliseconds(5);
 801eaca:	2032      	movs	r0, #50	; 0x32
			m_phase_now_override = (float)i * M_PI / 180.0;
 801eacc:	ee67 7a89 	vmul.f32	s15, s15, s18
		for (int i = 0;i < 360;i++) {
 801ead0:	f109 0901 	add.w	r9, r9, #1
			m_phase_now_override = (float)i * M_PI / 180.0;
 801ead4:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801ead8:	ed84 7a00 	vstr	s14, [r4]
			chThdSleepMilliseconds(5);
 801eadc:	f7ee ff80 	bl	800d9e0 <chThdSleep>
			int hall = read_hall();
 801eae0:	f7fe f9a6 	bl	801ce30 <read_hall>
			sincosf(m_phase_now_override, &s, &c);
 801eae4:	ed94 0a00 	vldr	s0, [r4]
			int hall = read_hall();
 801eae8:	4680      	mov	r8, r0
			sincosf(m_phase_now_override, &s, &c);
 801eaea:	a903      	add	r1, sp, #12
 801eaec:	a802      	add	r0, sp, #8
 801eaee:	f007 f8bf 	bl	8025c70 <sincosf>
			sin_hall[hall] += s;
 801eaf2:	ab1c      	add	r3, sp, #112	; 0x70
 801eaf4:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 801eaf8:	ed10 6a18 	vldr	s12, [r0, #-96]	; 0xffffffa0
			cos_hall[hall] += c;
 801eafc:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
			sin_hall[hall] += s;
 801eb00:	eddd 6a02 	vldr	s13, [sp, #8]
			cos_hall[hall] += c;
 801eb04:	eddd 7a03 	vldr	s15, [sp, #12]
			hall_iterations[hall]++;
 801eb08:	f850 3c20 	ldr.w	r3, [r0, #-32]
			sin_hall[hall] += s;
 801eb0c:	ee76 6a26 	vadd.f32	s13, s12, s13
			cos_hall[hall] += c;
 801eb10:	ee77 7a27 	vadd.f32	s15, s14, s15
			hall_iterations[hall]++;
 801eb14:	3301      	adds	r3, #1
		for (int i = 0;i < 360;i++) {
 801eb16:	f5b9 7fb4 	cmp.w	r9, #360	; 0x168
			sin_hall[hall] += s;
 801eb1a:	ed40 6a18 	vstr	s13, [r0, #-96]	; 0xffffffa0
			cos_hall[hall] += c;
 801eb1e:	ed40 7a10 	vstr	s15, [r0, #-64]	; 0xffffffc0
			hall_iterations[hall]++;
 801eb22:	f840 3c20 	str.w	r3, [r0, #-32]
		for (int i = 0;i < 360;i++) {
 801eb26:	d1cc      	bne.n	801eac2 <mcpwm_foc_hall_detect+0x92>
	for (int i = 0;i < 3;i++) {
 801eb28:	3d01      	subs	r5, #1
 801eb2a:	d1c8      	bne.n	801eabe <mcpwm_foc_hall_detect+0x8e>
			m_phase_now_override = (float)i * M_PI / 180.0;
 801eb2c:	ed9f 9a50 	vldr	s18, [pc, #320]	; 801ec70 <mcpwm_foc_hall_detect+0x240>
 801eb30:	eddf 8a50 	vldr	s17, [pc, #320]	; 801ec74 <mcpwm_foc_hall_detect+0x244>
 801eb34:	2503      	movs	r5, #3
	memset(hall_iterations, 0, sizeof(hall_iterations));
 801eb36:	f44f 79b4 	mov.w	r9, #360	; 0x168
			m_phase_now_override = (float)i * M_PI / 180.0;
 801eb3a:	ee07 9a90 	vmov	s15, r9
 801eb3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			chThdSleepMilliseconds(5);
 801eb42:	2032      	movs	r0, #50	; 0x32
			m_phase_now_override = (float)i * M_PI / 180.0;
 801eb44:	ee67 7a89 	vmul.f32	s15, s15, s18
		for (int i = 360;i >= 0;i--) {
 801eb48:	f109 39ff 	add.w	r9, r9, #4294967295
			m_phase_now_override = (float)i * M_PI / 180.0;
 801eb4c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801eb50:	ed84 7a00 	vstr	s14, [r4]
			chThdSleepMilliseconds(5);
 801eb54:	f7ee ff44 	bl	800d9e0 <chThdSleep>
			int hall = read_hall();
 801eb58:	f7fe f96a 	bl	801ce30 <read_hall>
			sincosf(m_phase_now_override, &s, &c);
 801eb5c:	ed94 0a00 	vldr	s0, [r4]
			int hall = read_hall();
 801eb60:	4680      	mov	r8, r0
			sincosf(m_phase_now_override, &s, &c);
 801eb62:	a903      	add	r1, sp, #12
 801eb64:	a802      	add	r0, sp, #8
 801eb66:	f007 f883 	bl	8025c70 <sincosf>
			sin_hall[hall] += s;
 801eb6a:	ab1c      	add	r3, sp, #112	; 0x70
 801eb6c:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 801eb70:	ed10 6a18 	vldr	s12, [r0, #-96]	; 0xffffffa0
			cos_hall[hall] += c;
 801eb74:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
			sin_hall[hall] += s;
 801eb78:	eddd 6a02 	vldr	s13, [sp, #8]
			cos_hall[hall] += c;
 801eb7c:	eddd 7a03 	vldr	s15, [sp, #12]
			hall_iterations[hall]++;
 801eb80:	f850 3c20 	ldr.w	r3, [r0, #-32]
			sin_hall[hall] += s;
 801eb84:	ee76 6a26 	vadd.f32	s13, s12, s13
			cos_hall[hall] += c;
 801eb88:	ee77 7a27 	vadd.f32	s15, s14, s15
			hall_iterations[hall]++;
 801eb8c:	3301      	adds	r3, #1
		for (int i = 360;i >= 0;i--) {
 801eb8e:	f1b9 3fff 	cmp.w	r9, #4294967295
			sin_hall[hall] += s;
 801eb92:	ed40 6a18 	vstr	s13, [r0, #-96]	; 0xffffffa0
			cos_hall[hall] += c;
 801eb96:	ed40 7a10 	vstr	s15, [r0, #-64]	; 0xffffffc0
			hall_iterations[hall]++;
 801eb9a:	f840 3c20 	str.w	r3, [r0, #-32]
		for (int i = 360;i >= 0;i--) {
 801eb9e:	d1cc      	bne.n	801eb3a <mcpwm_foc_hall_detect+0x10a>
	for (int i = 0;i < 3;i++) {
 801eba0:	3d01      	subs	r5, #1
 801eba2:	d1c8      	bne.n	801eb36 <mcpwm_foc_hall_detect+0x106>
	m_id_set = 0.0;
 801eba4:	2300      	movs	r3, #0
 801eba6:	f8cb 3000 	str.w	r3, [fp]
	m_iq_set = 0.0;
 801ebaa:	f8ca 3000 	str.w	r3, [sl]
	m_phase_override = false;
 801ebae:	4b2c      	ldr	r3, [pc, #176]	; (801ec60 <mcpwm_foc_hall_detect+0x230>)
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 801ebb0:	eddf 9a30 	vldr	s19, [pc, #192]	; 801ec74 <mcpwm_foc_hall_detect+0x244>
	m_phase_override = false;
 801ebb4:	701d      	strb	r5, [r3, #0]
	m_control_mode = CONTROL_MODE_NONE;
 801ebb6:	4b30      	ldr	r3, [pc, #192]	; (801ec78 <mcpwm_foc_hall_detect+0x248>)
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 801ebb8:	ed9f 9a2d 	vldr	s18, [pc, #180]	; 801ec70 <mcpwm_foc_hall_detect+0x240>
			hall_table[i] = (uint8_t)(ang * 200.0 / 360.0);
 801ebbc:	eddf 8a2f 	vldr	s17, [pc, #188]	; 801ec7c <mcpwm_foc_hall_detect+0x24c>
	m_control_mode = CONTROL_MODE_NONE;
 801ebc0:	2207      	movs	r2, #7
 801ebc2:	701a      	strb	r2, [r3, #0]
	m_state = MC_STATE_OFF;
 801ebc4:	703d      	strb	r5, [r7, #0]
	stop_pwm_hw();
 801ebc6:	f7fe f8f3 	bl	801cdb0 <stop_pwm_hw>
	timeout_configure(tout, tout_c);
 801ebca:	eeb0 0a48 	vmov.f32	s0, s16
 801ebce:	9800      	ldr	r0, [sp, #0]
			hall_table[i] = (uint8_t)(ang * 200.0 / 360.0);
 801ebd0:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 801ec80 <mcpwm_foc_hall_detect+0x250>
	timeout_configure(tout, tout_c);
 801ebd4:	f7fb fb0c 	bl	801a1f0 <timeout_configure>
 801ebd8:	ac04      	add	r4, sp, #16
 801ebda:	9f01      	ldr	r7, [sp, #4]
 801ebdc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 801ebe0:	46b0      	mov	r8, r6
			hall_table[i] = 255;
 801ebe2:	f04f 0aff 	mov.w	sl, #255	; 0xff
 801ebe6:	e00a      	b.n	801ebfe <mcpwm_foc_hall_detect+0x1ce>
 801ebe8:	3404      	adds	r4, #4
	for(int i = 0;i < 8;i++) {
 801ebea:	42b4      	cmp	r4, r6
			hall_table[i] = 255;
 801ebec:	f887 a000 	strb.w	sl, [r7]
			fails++;
 801ebf0:	f105 0501 	add.w	r5, r5, #1
 801ebf4:	f108 0804 	add.w	r8, r8, #4
 801ebf8:	f107 0701 	add.w	r7, r7, #1
	for(int i = 0;i < 8;i++) {
 801ebfc:	d024      	beq.n	801ec48 <mcpwm_foc_hall_detect+0x218>
		if (hall_iterations[i] > 30) {
 801ebfe:	f859 3f04 	ldr.w	r3, [r9, #4]!
 801ec02:	2b1e      	cmp	r3, #30
 801ec04:	ddf0      	ble.n	801ebe8 <mcpwm_foc_hall_detect+0x1b8>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 801ec06:	edd8 0a00 	vldr	s1, [r8]
 801ec0a:	ed94 0a00 	vldr	s0, [r4]
 801ec0e:	f006 fd2f 	bl	8025670 <atan2f>
 801ec12:	ee20 0a29 	vmul.f32	s0, s0, s19
			utils_norm_angle(&ang);
 801ec16:	a803      	add	r0, sp, #12
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 801ec18:	eec0 7a09 	vdiv.f32	s15, s0, s18
 801ec1c:	3404      	adds	r4, #4
 801ec1e:	f108 0804 	add.w	r8, r8, #4
 801ec22:	3701      	adds	r7, #1
 801ec24:	edcd 7a03 	vstr	s15, [sp, #12]
			utils_norm_angle(&ang);
 801ec28:	f7f6 ff1a 	bl	8015a60 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 200.0 / 360.0);
 801ec2c:	ed9d 7a03 	vldr	s14, [sp, #12]
 801ec30:	ee27 7a28 	vmul.f32	s14, s14, s17
	for(int i = 0;i < 8;i++) {
 801ec34:	42b4      	cmp	r4, r6
			hall_table[i] = (uint8_t)(ang * 200.0 / 360.0);
 801ec36:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801ec3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ec3e:	ee17 3a90 	vmov	r3, s15
 801ec42:	f807 3c01 	strb.w	r3, [r7, #-1]
	for(int i = 0;i < 8;i++) {
 801ec46:	d1da      	bne.n	801ebfe <mcpwm_foc_hall_detect+0x1ce>
	mc_interface_unlock();
 801ec48:	f7fc fc1a 	bl	801b480 <mc_interface_unlock>
}
 801ec4c:	f1a5 0002 	sub.w	r0, r5, #2
 801ec50:	fab0 f080 	clz	r0, r0
 801ec54:	0940      	lsrs	r0, r0, #5
 801ec56:	b01d      	add	sp, #116	; 0x74
 801ec58:	ecbd 8b04 	vpop	{d8-d9}
 801ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec60:	2000ce59 	.word	0x2000ce59
 801ec64:	00000000 	.word	0x00000000
 801ec68:	2000ce84 	.word	0x2000ce84
 801ec6c:	2000ce54 	.word	0x2000ce54
 801ec70:	40490fdb 	.word	0x40490fdb
 801ec74:	43340000 	.word	0x43340000
 801ec78:	2000cda4 	.word	0x2000cda4
 801ec7c:	43480000 	.word	0x43480000
 801ec80:	43b40000 	.word	0x43b40000
 801ec84:	2000cdc8 	.word	0x2000cdc8
 801ec88:	2000cdd0 	.word	0x2000cdd0
 801ec8c:	00000000 	.word	0x00000000

0801ec90 <mcpwm_foc_print_state>:
void mcpwm_foc_print_state(void) {
 801ec90:	b510      	push	{r4, lr}
	commands_printf("Mod d:        %.2f", (double)m_motor_state.mod_d);
 801ec92:	4c4a      	ldr	r4, [pc, #296]	; (801edbc <mcpwm_foc_print_state+0x12c>)
 801ec94:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ec96:	f7ed fbb7 	bl	800c408 <__aeabi_f2d>
 801ec9a:	4602      	mov	r2, r0
 801ec9c:	460b      	mov	r3, r1
 801ec9e:	4848      	ldr	r0, [pc, #288]	; (801edc0 <mcpwm_foc_print_state+0x130>)
 801eca0:	f7f9 fd16 	bl	80186d0 <commands_printf>
	commands_printf("Mod q:        %.2f", (double)m_motor_state.mod_q);
 801eca4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801eca6:	f7ed fbaf 	bl	800c408 <__aeabi_f2d>
 801ecaa:	4602      	mov	r2, r0
 801ecac:	460b      	mov	r3, r1
 801ecae:	4845      	ldr	r0, [pc, #276]	; (801edc4 <mcpwm_foc_print_state+0x134>)
 801ecb0:	f7f9 fd0e 	bl	80186d0 <commands_printf>
	commands_printf("Duty:         %.2f", (double)m_motor_state.duty_now);
 801ecb4:	68e0      	ldr	r0, [r4, #12]
 801ecb6:	f7ed fba7 	bl	800c408 <__aeabi_f2d>
 801ecba:	4602      	mov	r2, r0
 801ecbc:	460b      	mov	r3, r1
 801ecbe:	4842      	ldr	r0, [pc, #264]	; (801edc8 <mcpwm_foc_print_state+0x138>)
 801ecc0:	f7f9 fd06 	bl	80186d0 <commands_printf>
	commands_printf("Vd:           %.2f", (double)m_motor_state.vd);
 801ecc4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801ecc6:	f7ed fb9f 	bl	800c408 <__aeabi_f2d>
 801ecca:	4602      	mov	r2, r0
 801eccc:	460b      	mov	r3, r1
 801ecce:	483f      	ldr	r0, [pc, #252]	; (801edcc <mcpwm_foc_print_state+0x13c>)
 801ecd0:	f7f9 fcfe 	bl	80186d0 <commands_printf>
	commands_printf("Vq:           %.2f", (double)m_motor_state.vq);
 801ecd4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801ecd6:	f7ed fb97 	bl	800c408 <__aeabi_f2d>
 801ecda:	4602      	mov	r2, r0
 801ecdc:	460b      	mov	r3, r1
 801ecde:	483c      	ldr	r0, [pc, #240]	; (801edd0 <mcpwm_foc_print_state+0x140>)
 801ece0:	f7f9 fcf6 	bl	80186d0 <commands_printf>
	commands_printf("Phase:        %.2f", (double)m_motor_state.phase);
 801ece4:	6920      	ldr	r0, [r4, #16]
 801ece6:	f7ed fb8f 	bl	800c408 <__aeabi_f2d>
 801ecea:	4602      	mov	r2, r0
 801ecec:	460b      	mov	r3, r1
 801ecee:	4839      	ldr	r0, [pc, #228]	; (801edd4 <mcpwm_foc_print_state+0x144>)
 801ecf0:	f7f9 fcee 	bl	80186d0 <commands_printf>
	commands_printf("V_alpha:      %.2f", (double)m_motor_state.v_alpha);
 801ecf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801ecf6:	f7ed fb87 	bl	800c408 <__aeabi_f2d>
 801ecfa:	4602      	mov	r2, r0
 801ecfc:	460b      	mov	r3, r1
 801ecfe:	4836      	ldr	r0, [pc, #216]	; (801edd8 <mcpwm_foc_print_state+0x148>)
 801ed00:	f7f9 fce6 	bl	80186d0 <commands_printf>
	commands_printf("V_beta:       %.2f", (double)m_motor_state.v_beta);
 801ed04:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ed06:	f7ed fb7f 	bl	800c408 <__aeabi_f2d>
 801ed0a:	4602      	mov	r2, r0
 801ed0c:	460b      	mov	r3, r1
 801ed0e:	4833      	ldr	r0, [pc, #204]	; (801eddc <mcpwm_foc_print_state+0x14c>)
 801ed10:	f7f9 fcde 	bl	80186d0 <commands_printf>
	commands_printf("id:           %.2f", (double)m_motor_state.id);
 801ed14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ed16:	f7ed fb77 	bl	800c408 <__aeabi_f2d>
 801ed1a:	4602      	mov	r2, r0
 801ed1c:	460b      	mov	r3, r1
 801ed1e:	4830      	ldr	r0, [pc, #192]	; (801ede0 <mcpwm_foc_print_state+0x150>)
 801ed20:	f7f9 fcd6 	bl	80186d0 <commands_printf>
	commands_printf("iq:           %.2f", (double)m_motor_state.iq);
 801ed24:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ed26:	f7ed fb6f 	bl	800c408 <__aeabi_f2d>
 801ed2a:	4602      	mov	r2, r0
 801ed2c:	460b      	mov	r3, r1
 801ed2e:	482d      	ldr	r0, [pc, #180]	; (801ede4 <mcpwm_foc_print_state+0x154>)
 801ed30:	f7f9 fcce 	bl	80186d0 <commands_printf>
	commands_printf("id_filter:    %.2f", (double)m_motor_state.id_filter);
 801ed34:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ed36:	f7ed fb67 	bl	800c408 <__aeabi_f2d>
 801ed3a:	4602      	mov	r2, r0
 801ed3c:	460b      	mov	r3, r1
 801ed3e:	482a      	ldr	r0, [pc, #168]	; (801ede8 <mcpwm_foc_print_state+0x158>)
 801ed40:	f7f9 fcc6 	bl	80186d0 <commands_printf>
	commands_printf("iq_filter:    %.2f", (double)m_motor_state.iq_filter);
 801ed44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ed46:	f7ed fb5f 	bl	800c408 <__aeabi_f2d>
 801ed4a:	4602      	mov	r2, r0
 801ed4c:	460b      	mov	r3, r1
 801ed4e:	4827      	ldr	r0, [pc, #156]	; (801edec <mcpwm_foc_print_state+0x15c>)
 801ed50:	f7f9 fcbe 	bl	80186d0 <commands_printf>
	commands_printf("id_target:    %.2f", (double)m_motor_state.id_target);
 801ed54:	6820      	ldr	r0, [r4, #0]
 801ed56:	f7ed fb57 	bl	800c408 <__aeabi_f2d>
 801ed5a:	4602      	mov	r2, r0
 801ed5c:	460b      	mov	r3, r1
 801ed5e:	4824      	ldr	r0, [pc, #144]	; (801edf0 <mcpwm_foc_print_state+0x160>)
 801ed60:	f7f9 fcb6 	bl	80186d0 <commands_printf>
	commands_printf("iq_target:    %.2f", (double)m_motor_state.iq_target);
 801ed64:	6860      	ldr	r0, [r4, #4]
 801ed66:	f7ed fb4f 	bl	800c408 <__aeabi_f2d>
 801ed6a:	4602      	mov	r2, r0
 801ed6c:	460b      	mov	r3, r1
 801ed6e:	4821      	ldr	r0, [pc, #132]	; (801edf4 <mcpwm_foc_print_state+0x164>)
 801ed70:	f7f9 fcae 	bl	80186d0 <commands_printf>
	commands_printf("i_abs:        %.2f", (double)m_motor_state.i_abs);
 801ed74:	69e0      	ldr	r0, [r4, #28]
 801ed76:	f7ed fb47 	bl	800c408 <__aeabi_f2d>
 801ed7a:	4602      	mov	r2, r0
 801ed7c:	460b      	mov	r3, r1
 801ed7e:	481e      	ldr	r0, [pc, #120]	; (801edf8 <mcpwm_foc_print_state+0x168>)
 801ed80:	f7f9 fca6 	bl	80186d0 <commands_printf>
	commands_printf("i_abs_filter: %.2f", (double)m_motor_state.i_abs_filter);
 801ed84:	6a20      	ldr	r0, [r4, #32]
 801ed86:	f7ed fb3f 	bl	800c408 <__aeabi_f2d>
 801ed8a:	4602      	mov	r2, r0
 801ed8c:	460b      	mov	r3, r1
 801ed8e:	481b      	ldr	r0, [pc, #108]	; (801edfc <mcpwm_foc_print_state+0x16c>)
 801ed90:	f7f9 fc9e 	bl	80186d0 <commands_printf>
	commands_printf("Obs_x1:       %.2f", (double)m_observer_x1);
 801ed94:	4b1a      	ldr	r3, [pc, #104]	; (801ee00 <mcpwm_foc_print_state+0x170>)
 801ed96:	6818      	ldr	r0, [r3, #0]
 801ed98:	f7ed fb36 	bl	800c408 <__aeabi_f2d>
 801ed9c:	4602      	mov	r2, r0
 801ed9e:	460b      	mov	r3, r1
 801eda0:	4818      	ldr	r0, [pc, #96]	; (801ee04 <mcpwm_foc_print_state+0x174>)
 801eda2:	f7f9 fc95 	bl	80186d0 <commands_printf>
	commands_printf("Obs_x2:       %.2f", (double)m_observer_x2);
 801eda6:	4b18      	ldr	r3, [pc, #96]	; (801ee08 <mcpwm_foc_print_state+0x178>)
 801eda8:	6818      	ldr	r0, [r3, #0]
 801edaa:	f7ed fb2d 	bl	800c408 <__aeabi_f2d>
}
 801edae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	commands_printf("Obs_x2:       %.2f", (double)m_observer_x2);
 801edb2:	4602      	mov	r2, r0
 801edb4:	460b      	mov	r3, r1
 801edb6:	4815      	ldr	r0, [pc, #84]	; (801ee0c <mcpwm_foc_print_state+0x17c>)
 801edb8:	f7f9 bc8a 	b.w	80186d0 <commands_printf>
 801edbc:	2000cdd4 	.word	0x2000cdd4
 801edc0:	08030520 	.word	0x08030520
 801edc4:	08030534 	.word	0x08030534
 801edc8:	08030548 	.word	0x08030548
 801edcc:	0803055c 	.word	0x0803055c
 801edd0:	08030570 	.word	0x08030570
 801edd4:	08030584 	.word	0x08030584
 801edd8:	08030598 	.word	0x08030598
 801eddc:	080305ac 	.word	0x080305ac
 801ede0:	080305c0 	.word	0x080305c0
 801ede4:	080305d4 	.word	0x080305d4
 801ede8:	080305e8 	.word	0x080305e8
 801edec:	080305fc 	.word	0x080305fc
 801edf0:	08030610 	.word	0x08030610
 801edf4:	08030624 	.word	0x08030624
 801edf8:	08030638 	.word	0x08030638
 801edfc:	0803064c 	.word	0x0803064c
 801ee00:	2000ce34 	.word	0x2000ce34
 801ee04:	08030660 	.word	0x08030660
 801ee08:	2000ce38 	.word	0x2000ce38
 801ee0c:	08030674 	.word	0x08030674

0801ee10 <mcpwm_foc_get_last_inj_adc_isr_duration>:
	return last_inj_adc_isr_duration;
 801ee10:	4b01      	ldr	r3, [pc, #4]	; (801ee18 <mcpwm_foc_get_last_inj_adc_isr_duration+0x8>)
 801ee12:	ed93 0a00 	vldr	s0, [r3]
}
 801ee16:	4770      	bx	lr
 801ee18:	2000cd9c 	.word	0x2000cd9c
 801ee1c:	00000000 	.word	0x00000000

0801ee20 <mcpwm_foc_tim_sample_int_handler>:
	if (m_init_done) {
 801ee20:	4b03      	ldr	r3, [pc, #12]	; (801ee30 <mcpwm_foc_tim_sample_int_handler+0x10>)
 801ee22:	781b      	ldrb	r3, [r3, #0]
 801ee24:	b903      	cbnz	r3, 801ee28 <mcpwm_foc_tim_sample_int_handler+0x8>
 801ee26:	4770      	bx	lr
		TIM_GenerateEvent(TIM1, TIM_EventSource_COM);
 801ee28:	2120      	movs	r1, #32
 801ee2a:	4802      	ldr	r0, [pc, #8]	; (801ee34 <mcpwm_foc_tim_sample_int_handler+0x14>)
 801ee2c:	f006 b8b0 	b.w	8024f90 <TIM_GenerateEvent>
 801ee30:	2000cdcc 	.word	0x2000cdcc
 801ee34:	40010000 	.word	0x40010000
	...

0801ee40 <observer_update>:
		float dt, volatile float *x1, volatile float *x2, volatile float *phase) {
 801ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
	const float L = (3.0 / 2.0) * m_conf->foc_motor_l;
 801ee42:	4e75      	ldr	r6, [pc, #468]	; (801f018 <observer_update+0x1d8>)
	const float sign = (m_motor_state.iq * m_motor_state.vq) >= 0.0 ? 1.0 : -1.0;
 801ee44:	4c75      	ldr	r4, [pc, #468]	; (801f01c <observer_update+0x1dc>)
	const float L = (3.0 / 2.0) * m_conf->foc_motor_l;
 801ee46:	6833      	ldr	r3, [r6, #0]
		float dt, volatile float *x1, volatile float *x2, volatile float *phase) {
 801ee48:	ed2d 8b0a 	vpush	{d8-d12}
	const float L = (3.0 / 2.0) * m_conf->foc_motor_l;
 801ee4c:	ed93 ba30 	vldr	s22, [r3, #192]	; 0xc0
	const float lambda = m_conf->foc_motor_flux_linkage;
 801ee50:	ed93 8a32 	vldr	s16, [r3, #200]	; 0xc8
	float R = (3.0 / 2.0) * m_conf->foc_motor_r;
 801ee54:	edd3 aa31 	vldr	s21, [r3, #196]	; 0xc4
	const float sign = (m_motor_state.iq * m_motor_state.vq) >= 0.0 ? 1.0 : -1.0;
 801ee58:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 801ee5c:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
	R -= R * sign * m_conf->foc_sat_comp * (m_motor_state.i_abs_filter / m_conf->l_current_max);
 801ee60:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 801ee64:	ed94 5a08 	vldr	s10, [r4, #32]
 801ee68:	edd3 5a01 	vldr	s11, [r3, #4]
 801ee6c:	ee85 6a25 	vdiv.f32	s12, s10, s11
		float dt, volatile float *x1, volatile float *x2, volatile float *phase) {
 801ee70:	b083      	sub	sp, #12
 801ee72:	4617      	mov	r7, r2
 801ee74:	4605      	mov	r5, r0
 801ee76:	460c      	mov	r4, r1
	const float sign = (m_motor_state.iq * m_motor_state.vq) >= 0.0 ? 1.0 : -1.0;
 801ee78:	ee67 7aa6 	vmul.f32	s15, s15, s13
	const float L = (3.0 / 2.0) * m_conf->foc_motor_l;
 801ee7c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
	const float sign = (m_motor_state.iq * m_motor_state.vq) >= 0.0 ? 1.0 : -1.0;
 801ee80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	float R = (3.0 / 2.0) * m_conf->foc_motor_r;
 801ee84:	ee6a aaa6 	vmul.f32	s21, s21, s13
	const float sign = (m_motor_state.iq * m_motor_state.vq) >= 0.0 ? 1.0 : -1.0;
 801ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee8c:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
 801ee90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ee94:	bfb8      	it	lt
 801ee96:	eef0 7a65 	vmovlt.f32	s15, s11
	R -= R * sign * m_conf->foc_sat_comp * (m_motor_state.i_abs_filter / m_conf->l_current_max);
 801ee9a:	ee67 7aaa 	vmul.f32	s15, s15, s21
		float dt, volatile float *x1, volatile float *x2, volatile float *phase) {
 801ee9e:	eeb0 9a40 	vmov.f32	s18, s0
 801eea2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801eea6:	eef0 8a60 	vmov.f32	s17, s1
 801eeaa:	eef0 ba41 	vmov.f32	s23, s2
 801eeae:	eef0 ca61 	vmov.f32	s25, s3
 801eeb2:	eef0 9a42 	vmov.f32	s19, s4
	const float L = (3.0 / 2.0) * m_conf->foc_motor_l;
 801eeb6:	ee2b ba26 	vmul.f32	s22, s22, s13
	R -= R * sign * m_conf->foc_sat_comp * (m_motor_state.i_abs_filter / m_conf->l_current_max);
 801eeba:	eee7 aa86 	vfma.f32	s21, s15, s12
	const float t = mc_interface_temp_motor_filtered();
 801eebe:	f7fd f98f 	bl	801c1e0 <mc_interface_temp_motor_filtered>
	if (m_conf->foc_temp_comp && t > -5.0) {
 801eec2:	6833      	ldr	r3, [r6, #0]
 801eec4:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 801eec8:	b13a      	cbz	r2, 801eeda <observer_update+0x9a>
 801eeca:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801eece:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801eed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eed6:	f300 8093 	bgt.w	801f000 <observer_update+0x1c0>
	const float gamma_half = m_gamma_now * 0.5;
 801eeda:	4b51      	ldr	r3, [pc, #324]	; (801f020 <observer_update+0x1e0>)
	const float dt_iteration = dt / (float)iterations;
 801eedc:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 801eee0:	ee89 caa7 	vdiv.f32	s24, s19, s15
 801eee4:	2606      	movs	r6, #6
	const float R_ia = R * i_alpha;
 801eee6:	ee6a 7aab 	vmul.f32	s15, s21, s23
	const float lambda_2 = SQ(lambda);
 801eeea:	ee28 8a08 	vmul.f32	s16, s16, s16
	const float R_ib = R * i_beta;
 801eeee:	ee6a aaac 	vmul.f32	s21, s21, s25
	const float gamma_half = m_gamma_now * 0.5;
 801eef2:	ed93 aa00 	vldr	s20, [r3]
 801eef6:	eddf 9a4b 	vldr	s19, [pc, #300]	; 801f024 <observer_update+0x1e4>
 801eefa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801eefe:	ee78 8aea 	vsub.f32	s17, s17, s21
	const float L_ia = L * i_alpha;
 801ef02:	ee6b ba2b 	vmul.f32	s23, s22, s23
	const float gamma_half = m_gamma_now * 0.5;
 801ef06:	ee2a aa07 	vmul.f32	s20, s20, s14
 801ef0a:	ee68 9a29 	vmul.f32	s19, s16, s19
 801ef0e:	ee39 9a67 	vsub.f32	s18, s18, s15
	const float L_ib = L * i_beta;
 801ef12:	ee2b ba2c 	vmul.f32	s22, s22, s25
			gamma_tmp *= 10.0;
 801ef16:	eef2 aa04 	vmov.f32	s21, #36	; 0x41200000  10.0
 801ef1a:	e027      	b.n	801ef6c <observer_update+0x12c>
 801ef1c:	ee6a 5a2a 	vmul.f32	s11, s20, s21
		float x1_dot = -R_ia + v_alpha + gamma_tmp * (*x1 - L_ia) * err;
 801ef20:	ed95 7a00 	vldr	s14, [r5]
		float x2_dot = -R_ib + v_beta + gamma_tmp * (*x2 - L_ib) * err;
 801ef24:	edd4 7a00 	vldr	s15, [r4]
		float x1_dot = -R_ia + v_alpha + gamma_tmp * (*x1 - L_ia) * err;
 801ef28:	ed9d 6a01 	vldr	s12, [sp, #4]
		*x1 += x1_dot * dt_iteration;
 801ef2c:	edd5 6a00 	vldr	s13, [r5]
		float x1_dot = -R_ia + v_alpha + gamma_tmp * (*x1 - L_ia) * err;
 801ef30:	ee37 7a6b 	vsub.f32	s14, s14, s23
		float x2_dot = -R_ib + v_beta + gamma_tmp * (*x2 - L_ib) * err;
 801ef34:	ee77 7acb 	vsub.f32	s15, s15, s22
		float x1_dot = -R_ia + v_alpha + gamma_tmp * (*x1 - L_ia) * err;
 801ef38:	ee27 7a25 	vmul.f32	s14, s14, s11
		float x2_dot = -R_ib + v_beta + gamma_tmp * (*x2 - L_ib) * err;
 801ef3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
		float x1_dot = -R_ia + v_alpha + gamma_tmp * (*x1 - L_ia) * err;
 801ef40:	eef0 5a49 	vmov.f32	s11, s18
 801ef44:	eee7 5a06 	vfma.f32	s11, s14, s12
	for (int i = 0;i < iterations;i++) {
 801ef48:	3e01      	subs	r6, #1
		float x2_dot = -R_ib + v_beta + gamma_tmp * (*x2 - L_ib) * err;
 801ef4a:	eeb0 7a68 	vmov.f32	s14, s17
 801ef4e:	eea6 7a27 	vfma.f32	s14, s12, s15
		*x1 += x1_dot * dt_iteration;
 801ef52:	eef0 7a66 	vmov.f32	s15, s13
 801ef56:	eeec 7a25 	vfma.f32	s15, s24, s11
 801ef5a:	edc5 7a00 	vstr	s15, [r5]
		*x2 += x2_dot * dt_iteration;
 801ef5e:	edd4 7a00 	vldr	s15, [r4]
 801ef62:	eeec 7a07 	vfma.f32	s15, s24, s14
 801ef66:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0;i < iterations;i++) {
 801ef6a:	d021      	beq.n	801efb0 <observer_update+0x170>
		float err = lambda_2 - (SQ(*x1 - L_ia) + SQ(*x2 - L_ib));
 801ef6c:	edd5 6a00 	vldr	s13, [r5]
 801ef70:	ed95 7a00 	vldr	s14, [r5]
 801ef74:	edd4 7a00 	vldr	s15, [r4]
 801ef78:	ed94 6a00 	vldr	s12, [r4]
 801ef7c:	ee77 7acb 	vsub.f32	s15, s15, s22
 801ef80:	ee36 6a4b 	vsub.f32	s12, s12, s22
 801ef84:	ee76 6aeb 	vsub.f32	s13, s13, s23
 801ef88:	ee37 7a6b 	vsub.f32	s14, s14, s23
 801ef8c:	ee67 7a86 	vmul.f32	s15, s15, s12
		if (utils_truncate_number_abs(&err, lambda_2 * 0.2)) {
 801ef90:	eeb0 0a69 	vmov.f32	s0, s19
		float err = lambda_2 - (SQ(*x1 - L_ia) + SQ(*x2 - L_ib));
 801ef94:	eee6 7a87 	vfma.f32	s15, s13, s14
		if (utils_truncate_number_abs(&err, lambda_2 * 0.2)) {
 801ef98:	a801      	add	r0, sp, #4
		float err = lambda_2 - (SQ(*x1 - L_ia) + SQ(*x2 - L_ib));
 801ef9a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801ef9e:	edcd 7a01 	vstr	s15, [sp, #4]
		if (utils_truncate_number_abs(&err, lambda_2 * 0.2)) {
 801efa2:	f7f6 fdd5 	bl	8015b50 <utils_truncate_number_abs>
 801efa6:	2800      	cmp	r0, #0
 801efa8:	d1b8      	bne.n	801ef1c <observer_update+0xdc>
		float gamma_tmp = gamma_half;
 801efaa:	eef0 5a4a 	vmov.f32	s11, s20
 801efae:	e7b7      	b.n	801ef20 <observer_update+0xe0>
	UTILS_NAN_ZERO(*x1);
 801efb0:	ed95 7a00 	vldr	s14, [r5]
 801efb4:	edd5 7a00 	vldr	s15, [r5]
 801efb8:	eeb4 7a67 	vcmp.f32	s14, s15
 801efbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efc0:	bf0c      	ite	eq
 801efc2:	682b      	ldreq	r3, [r5, #0]
 801efc4:	2300      	movne	r3, #0
 801efc6:	602b      	str	r3, [r5, #0]
	UTILS_NAN_ZERO(*x2);
 801efc8:	ed94 7a00 	vldr	s14, [r4]
 801efcc:	edd4 7a00 	vldr	s15, [r4]
 801efd0:	eeb4 7a67 	vcmp.f32	s14, s15
 801efd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efd8:	bf0c      	ite	eq
 801efda:	6823      	ldreq	r3, [r4, #0]
 801efdc:	2300      	movne	r3, #0
 801efde:	6023      	str	r3, [r4, #0]
	*phase = utils_fast_atan2(*x2 - L_ib, *x1 - L_ia);
 801efe0:	ed94 0a00 	vldr	s0, [r4]
 801efe4:	edd5 0a00 	vldr	s1, [r5]
 801efe8:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801efec:	ee70 0aeb 	vsub.f32	s1, s1, s23
 801eff0:	f7f6 feb6 	bl	8015d60 <utils_fast_atan2>
 801eff4:	ed87 0a00 	vstr	s0, [r7]
}
 801eff8:	b003      	add	sp, #12
 801effa:	ecbd 8b0a 	vpop	{d8-d12}
 801effe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		R += R * 0.00386 * (t - m_conf->foc_temp_comp_base_temp);
 801f000:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f028 <observer_update+0x1e8>
 801f004:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
 801f008:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 801f00c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f010:	eee7 aa80 	vfma.f32	s21, s15, s0
 801f014:	e761      	b.n	801eeda <observer_update+0x9a>
 801f016:	bf00      	nop
 801f018:	2000cda0 	.word	0x2000cda0
 801f01c:	2000cdd4 	.word	0x2000cdd4
 801f020:	2000cdc4 	.word	0x2000cdc4
 801f024:	3e4ccccd 	.word	0x3e4ccccd
 801f028:	3b7cf80e 	.word	0x3b7cf80e
 801f02c:	00000000 	.word	0x00000000

0801f030 <mcpwm_foc_adc_int_handler>:
void mcpwm_foc_adc_int_handler(void *p, uint32_t flags) {
 801f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TIM12->CNT = 0;
 801f034:	4a36      	ldr	r2, [pc, #216]	; (801f110 <mcpwm_foc_adc_int_handler+0xe0>)
	bool is_v7 = !(TIM1->CR1 & TIM_CR1_DIR);
 801f036:	4b37      	ldr	r3, [pc, #220]	; (801f114 <mcpwm_foc_adc_int_handler+0xe4>)
	if (!m_samples.measure_inductance_now) {
 801f038:	4d37      	ldr	r5, [pc, #220]	; (801f118 <mcpwm_foc_adc_int_handler+0xe8>)
	TIM12->CNT = 0;
 801f03a:	2100      	movs	r1, #0
void mcpwm_foc_adc_int_handler(void *p, uint32_t flags) {
 801f03c:	ed2d 8b06 	vpush	{d8-d10}
	TIM12->CNT = 0;
 801f040:	6251      	str	r1, [r2, #36]	; 0x24
	bool is_v7 = !(TIM1->CR1 & TIM_CR1_DIR);
 801f042:	681c      	ldr	r4, [r3, #0]
	if (!m_samples.measure_inductance_now) {
 801f044:	7b2b      	ldrb	r3, [r5, #12]
void mcpwm_foc_adc_int_handler(void *p, uint32_t flags) {
 801f046:	b089      	sub	sp, #36	; 0x24
	bool is_v7 = !(TIM1->CR1 & TIM_CR1_DIR);
 801f048:	f004 0410 	and.w	r4, r4, #16
	if (!m_samples.measure_inductance_now) {
 801f04c:	b92b      	cbnz	r3, 801f05a <mcpwm_foc_adc_int_handler+0x2a>
		if (is_v7) {
 801f04e:	b924      	cbnz	r4, 801f05a <mcpwm_foc_adc_int_handler+0x2a>
}
 801f050:	b009      	add	sp, #36	; 0x24
 801f052:	ecbd 8b06 	vpop	{d8-d10}
 801f056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int curr0 = ADC_Value[ADC_IND_CURR1];
 801f05a:	4e30      	ldr	r6, [pc, #192]	; (801f11c <mcpwm_foc_adc_int_handler+0xec>)
	m_curr0_sum += curr0;
 801f05c:	4f30      	ldr	r7, [pc, #192]	; (801f120 <mcpwm_foc_adc_int_handler+0xf0>)
	WWDG_SetCounter(100);
 801f05e:	2064      	movs	r0, #100	; 0x64
 801f060:	f006 f85e 	bl	8025120 <WWDG_SetCounter>
	int curr0 = ADC_Value[ADC_IND_CURR1];
 801f064:	8930      	ldrh	r0, [r6, #8]
	int curr1 = ADC_Value[ADC_IND_CURR2];
 801f066:	88f2      	ldrh	r2, [r6, #6]
	m_curr0_sum += curr0;
 801f068:	683b      	ldr	r3, [r7, #0]
	m_curr1_sum += curr1;
 801f06a:	492e      	ldr	r1, [pc, #184]	; (801f124 <mcpwm_foc_adc_int_handler+0xf4>)
	m_curr_samples++;
 801f06c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 801f134 <mcpwm_foc_adc_int_handler+0x104>
	curr0 -= m_curr0_offset;
 801f070:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 801f138 <mcpwm_foc_adc_int_handler+0x108>
	int curr0 = ADC_Value[ADC_IND_CURR1];
 801f074:	b280      	uxth	r0, r0
	m_curr0_sum += curr0;
 801f076:	4403      	add	r3, r0
 801f078:	603b      	str	r3, [r7, #0]
	m_curr1_sum += curr1;
 801f07a:	680b      	ldr	r3, [r1, #0]
	curr1 -= m_curr1_offset;
 801f07c:	4f2a      	ldr	r7, [pc, #168]	; (801f128 <mcpwm_foc_adc_int_handler+0xf8>)
	int curr1 = ADC_Value[ADC_IND_CURR2];
 801f07e:	b292      	uxth	r2, r2
	m_curr1_sum += curr1;
 801f080:	4413      	add	r3, r2
 801f082:	600b      	str	r3, [r1, #0]
	curr0 -= m_curr0_offset;
 801f084:	f8dc c000 	ldr.w	ip, [ip]
	curr1 -= m_curr1_offset;
 801f088:	6839      	ldr	r1, [r7, #0]
	m_curr_samples++;
 801f08a:	f8de 7000 	ldr.w	r7, [lr]
	ADC_curr_norm_value[0] = curr0;
 801f08e:	4b27      	ldr	r3, [pc, #156]	; (801f12c <mcpwm_foc_adc_int_handler+0xfc>)
	curr1 -= m_curr1_offset;
 801f090:	1a51      	subs	r1, r2, r1
	m_curr_samples++;
 801f092:	3701      	adds	r7, #1
	curr0 -= m_curr0_offset;
 801f094:	eba0 000c 	sub.w	r0, r0, ip
	m_curr_samples++;
 801f098:	f8ce 7000 	str.w	r7, [lr]
	ADC_curr_norm_value[0] = curr0;
 801f09c:	6018      	str	r0, [r3, #0]
	ADC_curr_norm_value[1] = curr1;
 801f09e:	6059      	str	r1, [r3, #4]
	ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);
 801f0a0:	681a      	ldr	r2, [r3, #0]
 801f0a2:	685f      	ldr	r7, [r3, #4]
 801f0a4:	443a      	add	r2, r7
 801f0a6:	4252      	negs	r2, r2
 801f0a8:	609a      	str	r2, [r3, #8]
	float ia = ADC_curr_norm_value[0] * FAC_CURRENT;
 801f0aa:	f8d3 9000 	ldr.w	r9, [r3]
	float ib = ADC_curr_norm_value[1] * FAC_CURRENT;
 801f0ae:	f8d3 a004 	ldr.w	sl, [r3, #4]
	if (m_samples.measure_inductance_now) {
 801f0b2:	7b2b      	ldrb	r3, [r5, #12]
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	d041      	beq.n	801f13c <mcpwm_foc_adc_int_handler+0x10c>
		if (!is_v7) {
 801f0b8:	2c00      	cmp	r4, #0
 801f0ba:	d1c9      	bne.n	801f050 <mcpwm_foc_adc_int_handler+0x20>
		const uint32_t duty_cnt = (uint32_t)((float)TIM1->ARR * m_samples.measure_inductance_duty);
 801f0bc:	4a15      	ldr	r2, [pc, #84]	; (801f114 <mcpwm_foc_adc_int_handler+0xe4>)
		if (inductance_state == 0) {
 801f0be:	4f1c      	ldr	r7, [pc, #112]	; (801f130 <mcpwm_foc_adc_int_handler+0x100>)
		const uint32_t duty_cnt = (uint32_t)((float)TIM1->ARR * m_samples.measure_inductance_duty);
 801f0c0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 801f0c4:	ed95 7a04 	vldr	s14, [r5, #16]
		if (inductance_state == 0) {
 801f0c8:	683b      	ldr	r3, [r7, #0]
		const uint32_t duty_cnt = (uint32_t)((float)TIM1->ARR * m_samples.measure_inductance_duty);
 801f0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f0d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (inductance_state == 0) {
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	f000 8254 	beq.w	801f584 <mcpwm_foc_adc_int_handler+0x554>
		} else if (inductance_state == 2) {
 801f0dc:	2b02      	cmp	r3, #2
 801f0de:	f000 862e 	beq.w	801fd3e <mcpwm_foc_adc_int_handler+0xd0e>
		} else if (inductance_state == 3) {
 801f0e2:	2b03      	cmp	r3, #3
 801f0e4:	f000 8662 	beq.w	801fdac <mcpwm_foc_adc_int_handler+0xd7c>
		} else if (inductance_state == 5) {
 801f0e8:	2b05      	cmp	r3, #5
 801f0ea:	f000 866a 	beq.w	801fdc2 <mcpwm_foc_adc_int_handler+0xd92>
		} else if (inductance_state == 6) {
 801f0ee:	2b06      	cmp	r3, #6
 801f0f0:	f000 859e 	beq.w	801fc30 <mcpwm_foc_adc_int_handler+0xc00>
		} else if (inductance_state == 8) {
 801f0f4:	2b08      	cmp	r3, #8
 801f0f6:	f000 87a9 	beq.w	802004c <mcpwm_foc_adc_int_handler+0x101c>
		} else if (inductance_state == 9) {
 801f0fa:	2b09      	cmp	r3, #9
 801f0fc:	f001 80ad 	beq.w	802025a <mcpwm_foc_adc_int_handler+0x122a>
		} else if (inductance_state == 10) {
 801f100:	2b0a      	cmp	r3, #10
 801f102:	f040 825a 	bne.w	801f5ba <mcpwm_foc_adc_int_handler+0x58a>
			inductance_state = 0;
 801f106:	2300      	movs	r3, #0
 801f108:	603b      	str	r3, [r7, #0]
			m_samples.measure_inductance_now = false;
 801f10a:	732b      	strb	r3, [r5, #12]
			return;
 801f10c:	e7a0      	b.n	801f050 <mcpwm_foc_adc_int_handler+0x20>
 801f10e:	bf00      	nop
 801f110:	40001800 	.word	0x40001800
 801f114:	40010000 	.word	0x40010000
 801f118:	2000ce6c 	.word	0x2000ce6c
 801f11c:	2000c034 	.word	0x2000c034
 801f120:	2000cdac 	.word	0x2000cdac
 801f124:	2000cdb4 	.word	0x2000cdb4
 801f128:	2000cdb0 	.word	0x2000cdb0
 801f12c:	2000c04c 	.word	0x2000c04c
 801f130:	2000cd98 	.word	0x2000cd98
 801f134:	2000cdb8 	.word	0x2000cdb8
 801f138:	2000cda8 	.word	0x2000cda8
	const float dt = 1.0 / (m_conf->foc_f_sw / 2.0);
 801f13c:	4ddb      	ldr	r5, [pc, #876]	; (801f4ac <mcpwm_foc_adc_int_handler+0x47c>)
	UTILS_LP_FAST(m_motor_state.v_bus, GET_INPUT_VOLTAGE(), 0.1);
 801f13e:	4cdc      	ldr	r4, [pc, #880]	; (801f4b0 <mcpwm_foc_adc_int_handler+0x480>)
	const float dt = 1.0 / (m_conf->foc_f_sw / 2.0);
 801f140:	682b      	ldr	r3, [r5, #0]
	UTILS_LP_FAST(m_motor_state.v_bus, GET_INPUT_VOLTAGE(), 0.1);
 801f142:	eddf 5adc 	vldr	s11, [pc, #880]	; 801f4b4 <mcpwm_foc_adc_int_handler+0x484>
	const float dt = 1.0 / (m_conf->foc_f_sw / 2.0);
 801f146:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
	UTILS_LP_FAST(m_motor_state.v_bus, GET_INPUT_VOLTAGE(), 0.1);
 801f14a:	ed94 6a0a 	vldr	s12, [r4, #40]	; 0x28
 801f14e:	8a33      	ldrh	r3, [r6, #16]
 801f150:	eddf 4ad9 	vldr	s9, [pc, #868]	; 801f4b8 <mcpwm_foc_adc_int_handler+0x488>
 801f154:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801f158:	ed9f 5ad8 	vldr	s10, [pc, #864]	; 801f4bc <mcpwm_foc_adc_int_handler+0x48c>
 801f15c:	b29b      	uxth	r3, r3
 801f15e:	ee07 3a90 	vmov	s15, r3
 801f162:	eef8 7a67 	vcvt.f32.u32	s15, s15
	const float dt = 1.0 / (m_conf->foc_f_sw / 2.0);
 801f166:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	UTILS_LP_FAST(m_motor_state.v_bus, GET_INPUT_VOLTAGE(), 0.1);
 801f16a:	ee65 7ae7 	vnmul.f32	s15, s11, s15
	const float dt = 1.0 / (m_conf->foc_f_sw / 2.0);
 801f16e:	ee66 6a84 	vmul.f32	s13, s13, s8
	UTILS_LP_FAST(m_motor_state.v_bus, GET_INPUT_VOLTAGE(), 0.1);
 801f172:	eea7 6aa4 	vfma.f32	s12, s15, s9
 801f176:	eef0 7a46 	vmov.f32	s15, s12
 801f17a:	eea7 7ac5 	vfms.f32	s14, s15, s10
	const float dt = 1.0 / (m_conf->foc_f_sw / 2.0);
 801f17e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f182:	eec6 8a26 	vdiv.f32	s17, s12, s13
	UTILS_LP_FAST(m_motor_state.v_bus, GET_INPUT_VOLTAGE(), 0.1);
 801f186:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
	if (encoder_is_configured()) {
 801f18a:	f7fb fda9 	bl	801ace0 <encoder_is_configured>
 801f18e:	2800      	cmp	r0, #0
 801f190:	f040 8237 	bne.w	801f602 <mcpwm_foc_adc_int_handler+0x5d2>
	float enc_ang = 0;
 801f194:	ed9f 9aca 	vldr	s18, [pc, #808]	; 801f4c0 <mcpwm_foc_adc_int_handler+0x490>
 801f198:	af07      	add	r7, sp, #28
	const float phase_diff = utils_angle_difference_rad(m_motor_state.phase, phase_before);
 801f19a:	f8df b368 	ldr.w	fp, [pc, #872]	; 801f504 <mcpwm_foc_adc_int_handler+0x4d4>
	if (m_state == MC_STATE_RUNNING) {
 801f19e:	f8df 8368 	ldr.w	r8, [pc, #872]	; 801f508 <mcpwm_foc_adc_int_handler+0x4d8>
	const float phase_diff = utils_angle_difference_rad(m_motor_state.phase, phase_before);
 801f1a2:	ed94 0a04 	vldr	s0, [r4, #16]
 801f1a6:	eddb 0a00 	vldr	s1, [fp]
 801f1aa:	f7f6 fd51 	bl	8015c50 <utils_angle_difference_rad>
	phase_before = m_motor_state.phase;
 801f1ae:	6922      	ldr	r2, [r4, #16]
	if (m_state == MC_STATE_RUNNING) {
 801f1b0:	f898 3000 	ldrb.w	r3, [r8]
	phase_before = m_motor_state.phase;
 801f1b4:	f8cb 2000 	str.w	r2, [fp]
	if (m_state == MC_STATE_RUNNING) {
 801f1b8:	2b02      	cmp	r3, #2
	const float phase_diff = utils_angle_difference_rad(m_motor_state.phase, phase_before);
 801f1ba:	eeb0 8a40 	vmov.f32	s16, s0
	if (m_state == MC_STATE_RUNNING) {
 801f1be:	f000 825b 	beq.w	801f678 <mcpwm_foc_adc_int_handler+0x648>
		float Va = ADC_VOLTS(ADC_IND_SENS1) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1c2:	88b2      	ldrh	r2, [r6, #4]
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1c4:	8831      	ldrh	r1, [r6, #0]
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1c6:	8873      	ldrh	r3, [r6, #2]
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1c8:	ed9f 4abe 	vldr	s8, [pc, #760]	; 801f4c4 <mcpwm_foc_adc_int_handler+0x494>
 801f1cc:	eddf 4abe 	vldr	s9, [pc, #760]	; 801f4c8 <mcpwm_foc_adc_int_handler+0x498>
 801f1d0:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 801f4b8 <mcpwm_foc_adc_int_handler+0x488>
		m_motor_state.v_alpha = (2.0 / 3.0) * Va - (1.0 / 3.0) * Vb - (1.0 / 3.0) * Vc;
 801f1d4:	ed9f 3abd 	vldr	s6, [pc, #756]	; 801f4cc <mcpwm_foc_adc_int_handler+0x49c>
 801f1d8:	eddf 2abd 	vldr	s5, [pc, #756]	; 801f4d0 <mcpwm_foc_adc_int_handler+0x4a0>
		m_motor_state.v_beta = ONE_BY_SQRT3 * Vb - ONE_BY_SQRT3 * Vc;
 801f1dc:	eddf 3abd 	vldr	s7, [pc, #756]	; 801f4d4 <mcpwm_foc_adc_int_handler+0x4a4>
		observer_update(m_motor_state.v_alpha, m_motor_state.v_beta,
 801f1e0:	f8df 9328 	ldr.w	r9, [pc, #808]	; 801f50c <mcpwm_foc_adc_int_handler+0x4dc>
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1e4:	b289      	uxth	r1, r1
 801f1e6:	ee07 1a90 	vmov	s15, r1
		float Va = ADC_VOLTS(ADC_IND_SENS1) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1ea:	b292      	uxth	r2, r2
 801f1ec:	ee07 2a10 	vmov	s14, r2
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1f4:	b29b      	uxth	r3, r3
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f1f6:	eec6 7a84 	vdiv.f32	s15, s13, s8
		utils_fast_sincos_better(m_motor_state.phase, &s, &c);
 801f1fa:	f10d 0b18 	add.w	fp, sp, #24
 801f1fe:	4659      	mov	r1, fp
 801f200:	4638      	mov	r0, r7
		float Va = ADC_VOLTS(ADC_IND_SENS1) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f202:	eef8 5a47 	vcvt.f32.u32	s11, s14
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f206:	ee07 3a10 	vmov	s14, r3
		float Va = ADC_VOLTS(ADC_IND_SENS1) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f20a:	ee85 6a84 	vdiv.f32	s12, s11, s8
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f20e:	eef8 6a47 	vcvt.f32.u32	s13, s14
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f212:	ee67 7aa4 	vmul.f32	s15, s15, s9
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f216:	ee86 7a84 	vdiv.f32	s14, s13, s8
		float Vb = ADC_VOLTS(ADC_IND_SENS3) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f21a:	ee67 7a85 	vmul.f32	s15, s15, s10
		float Va = ADC_VOLTS(ADC_IND_SENS1) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f21e:	ee26 6a24 	vmul.f32	s12, s12, s9
		m_motor_state.v_alpha = (2.0 / 3.0) * Va - (1.0 / 3.0) * Vb - (1.0 / 3.0) * Vc;
 801f222:	ee63 6a67 	vnmul.f32	s13, s6, s15
		float Va = ADC_VOLTS(ADC_IND_SENS1) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f226:	ee26 6a05 	vmul.f32	s12, s12, s10
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f22a:	ee27 7a24 	vmul.f32	s14, s14, s9
		m_motor_state.v_alpha = (2.0 / 3.0) * Va - (1.0 / 3.0) * Vb - (1.0 / 3.0) * Vc;
 801f22e:	eee6 6a22 	vfma.f32	s13, s12, s5
		float Vc = ADC_VOLTS(ADC_IND_SENS2) * ((VIN_R1 + VIN_R2) / VIN_R2);
 801f232:	ee27 7a05 	vmul.f32	s14, s14, s10
		m_motor_state.v_beta = ONE_BY_SQRT3 * Vb - ONE_BY_SQRT3 * Vc;
 801f236:	ee23 6ac7 	vnmul.f32	s12, s7, s14
		m_motor_state.v_alpha = (2.0 / 3.0) * Va - (1.0 / 3.0) * Vb - (1.0 / 3.0) * Vc;
 801f23a:	eee7 6a43 	vfms.f32	s13, s14, s6
		m_motor_state.v_beta = ONE_BY_SQRT3 * Vb - ONE_BY_SQRT3 * Vc;
 801f23e:	eea7 6aa3 	vfma.f32	s12, s15, s7
		m_motor_state.v_alpha = (2.0 / 3.0) * Va - (1.0 / 3.0) * Vb - (1.0 / 3.0) * Vc;
 801f242:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		m_motor_state.v_beta = ONE_BY_SQRT3 * Vb - ONE_BY_SQRT3 * Vc;
 801f246:	ed84 6a0c 	vstr	s12, [r4, #48]	; 0x30
		utils_fast_sincos_better(m_motor_state.phase, &s, &c);
 801f24a:	ed94 0a04 	vldr	s0, [r4, #16]
 801f24e:	f7f6 fe0f 	bl	8015e70 <utils_fast_sincos_better>
		float vd_tmp = c * m_motor_state.v_alpha + s * m_motor_state.v_beta;
 801f252:	ed94 4a0b 	vldr	s8, [r4, #44]	; 0x2c
 801f256:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
		float vq_tmp = c * m_motor_state.v_beta  - s * m_motor_state.v_alpha;
 801f25a:	edd4 4a0c 	vldr	s9, [r4, #48]	; 0x30
 801f25e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
		UTILS_NAN_ZERO(m_motor_state.vd);
 801f262:	ed94 5a13 	vldr	s10, [r4, #76]	; 0x4c
 801f266:	edd4 5a13 	vldr	s11, [r4, #76]	; 0x4c
		float vd_tmp = c * m_motor_state.v_alpha + s * m_motor_state.v_beta;
 801f26a:	ed9d 6a07 	vldr	s12, [sp, #28]
 801f26e:	eddd 6a06 	vldr	s13, [sp, #24]
		observer_update(m_motor_state.v_alpha, m_motor_state.v_beta,
 801f272:	4999      	ldr	r1, [pc, #612]	; (801f4d8 <mcpwm_foc_adc_int_handler+0x4a8>)
 801f274:	4899      	ldr	r0, [pc, #612]	; (801f4dc <mcpwm_foc_adc_int_handler+0x4ac>)
		UTILS_NAN_ZERO(m_motor_state.vd);
 801f276:	eeb4 5a65 	vcmp.f32	s10, s11
 801f27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f27e:	bf08      	it	eq
 801f280:	6ce3      	ldreq	r3, [r4, #76]	; 0x4c
		UTILS_LP_FAST(m_motor_state.vd, vd_tmp, 0.2);
 801f282:	ed9f 5a97 	vldr	s10, [pc, #604]	; 801f4e0 <mcpwm_foc_adc_int_handler+0x4b0>
		m_motor_state.mod_d = m_motor_state.vd / ((2.0 / 3.0) * m_motor_state.v_bus);
 801f286:	eddf 5a92 	vldr	s11, [pc, #584]	; 801f4d0 <mcpwm_foc_adc_int_handler+0x4a0>
		UTILS_NAN_ZERO(m_motor_state.vd);
 801f28a:	bf18      	it	ne
 801f28c:	2300      	movne	r3, #0
		float vd_tmp = c * m_motor_state.v_alpha + s * m_motor_state.v_beta;
 801f28e:	ee27 7a06 	vmul.f32	s14, s14, s12
		float vq_tmp = c * m_motor_state.v_beta  - s * m_motor_state.v_alpha;
 801f292:	ee67 7ac6 	vnmul.f32	s15, s15, s12
		UTILS_NAN_ZERO(m_motor_state.vd);
 801f296:	64e3      	str	r3, [r4, #76]	; 0x4c
		UTILS_NAN_ZERO(m_motor_state.vq);
 801f298:	ed94 6a14 	vldr	s12, [r4, #80]	; 0x50
		float vd_tmp = c * m_motor_state.v_alpha + s * m_motor_state.v_beta;
 801f29c:	eea4 7a26 	vfma.f32	s14, s8, s13
		observer_update(m_motor_state.v_alpha, m_motor_state.v_beta,
 801f2a0:	464a      	mov	r2, r9
		float vq_tmp = c * m_motor_state.v_beta  - s * m_motor_state.v_alpha;
 801f2a2:	eee6 7aa4 	vfma.f32	s15, s13, s9
		UTILS_NAN_ZERO(m_motor_state.vq);
 801f2a6:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 801f2aa:	eeb4 6a66 	vcmp.f32	s12, s13
 801f2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2b2:	bf0c      	ite	eq
 801f2b4:	6d23      	ldreq	r3, [r4, #80]	; 0x50
 801f2b6:	2300      	movne	r3, #0
 801f2b8:	6523      	str	r3, [r4, #80]	; 0x50
		UTILS_LP_FAST(m_motor_state.vd, vd_tmp, 0.2);
 801f2ba:	ed94 6a13 	vldr	s12, [r4, #76]	; 0x4c
 801f2be:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
 801f2c2:	ee36 7a47 	vsub.f32	s14, s12, s14
		m_motor_state.i_alpha = 0.0;
 801f2c6:	2300      	movs	r3, #0
		UTILS_LP_FAST(m_motor_state.vd, vd_tmp, 0.2);
 801f2c8:	eee7 6a45 	vfms.f32	s13, s14, s10
		observer_update(m_motor_state.v_alpha, m_motor_state.v_beta,
 801f2cc:	eeb0 2a68 	vmov.f32	s4, s17
		UTILS_LP_FAST(m_motor_state.vd, vd_tmp, 0.2);
 801f2d0:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
		UTILS_LP_FAST(m_motor_state.vq, vq_tmp, 0.2);
 801f2d4:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 801f2d8:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 801f2dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f2e0:	eea7 7ac5 	vfms.f32	s14, s15, s10
 801f2e4:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
		m_motor_state.vd_int = m_motor_state.vd;
 801f2e8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 801f2ea:	6566      	str	r6, [r4, #84]	; 0x54
		m_motor_state.vq_int = m_motor_state.vq;
 801f2ec:	6d26      	ldr	r6, [r4, #80]	; 0x50
 801f2ee:	65a6      	str	r6, [r4, #88]	; 0x58
		m_motor_state.mod_d = m_motor_state.vd / ((2.0 / 3.0) * m_motor_state.v_bus);
 801f2f0:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
 801f2f4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801f2f8:	ee27 7a25 	vmul.f32	s14, s14, s11
 801f2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f300:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
		m_motor_state.mod_q = m_motor_state.vq / ((2.0 / 3.0) * m_motor_state.v_bus);
 801f304:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 801f308:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 801f30c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801f310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f314:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
		m_motor_state.i_alpha = 0.0;
 801f318:	6163      	str	r3, [r4, #20]
		m_motor_state.i_beta = 0.0;
 801f31a:	61a3      	str	r3, [r4, #24]
		m_motor_state.id = 0.0;
 801f31c:	63e3      	str	r3, [r4, #60]	; 0x3c
		m_motor_state.iq = 0.0;
 801f31e:	6423      	str	r3, [r4, #64]	; 0x40
		m_motor_state.id_filter = 0.0;
 801f320:	6463      	str	r3, [r4, #68]	; 0x44
		m_motor_state.iq_filter = 0.0;
 801f322:	64a3      	str	r3, [r4, #72]	; 0x48
		m_motor_state.i_bus = 0.0;
 801f324:	6263      	str	r3, [r4, #36]	; 0x24
		m_motor_state.i_abs = 0.0;
 801f326:	61e3      	str	r3, [r4, #28]
		m_motor_state.i_abs_filter = 0.0;
 801f328:	6223      	str	r3, [r4, #32]
		observer_update(m_motor_state.v_alpha, m_motor_state.v_beta,
 801f32a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801f32e:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 801f332:	ed94 1a05 	vldr	s2, [r4, #20]
 801f336:	edd4 1a06 	vldr	s3, [r4, #24]
 801f33a:	f7ff fd81 	bl	801ee40 <observer_update>
		switch (m_conf->foc_sensor_mode) {
 801f33e:	682b      	ldr	r3, [r5, #0]
 801f340:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 801f344:	b2db      	uxtb	r3, r3
 801f346:	2b01      	cmp	r3, #1
 801f348:	f000 8518 	beq.w	801fd7c <mcpwm_foc_adc_int_handler+0xd4c>
 801f34c:	f0c0 8528 	bcc.w	801fda0 <mcpwm_foc_adc_int_handler+0xd70>
 801f350:	2b02      	cmp	r3, #2
			m_phase_now_observer = correct_hall(m_phase_now_observer, m_pll_speed, dt);
 801f352:	4e64      	ldr	r6, [pc, #400]	; (801f4e4 <mcpwm_foc_adc_int_handler+0x4b4>)
		switch (m_conf->foc_sensor_mode) {
 801f354:	f000 8454 	beq.w	801fc00 <mcpwm_foc_adc_int_handler+0xbd0>
 801f358:	f10d 0910 	add.w	r9, sp, #16
 801f35c:	f10d 0a14 	add.w	sl, sp, #20
	m_motor_state.duty_now = SIGN(m_motor_state.vq) *
 801f360:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
			sqrtf(m_motor_state.mod_d * m_motor_state.mod_d +
 801f364:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 801f368:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
					m_motor_state.mod_q * m_motor_state.mod_q) / SQRT3_BY_2;
 801f36c:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801f370:	ed94 6a0e 	vldr	s12, [r4, #56]	; 0x38
 801f374:	ee20 0a06 	vmul.f32	s0, s0, s12
	m_motor_state.duty_now = SIGN(m_motor_state.vq) *
 801f378:	eef5 6ac0 	vcmpe.f32	s13, #0.0
			sqrtf(m_motor_state.mod_d * m_motor_state.mod_d +
 801f37c:	eea7 0a27 	vfma.f32	s0, s14, s15
	m_motor_state.duty_now = SIGN(m_motor_state.vq) *
 801f380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f384:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 801f388:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f38c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801f390:	bf58      	it	pl
 801f392:	eeb0 8a67 	vmovpl.f32	s16, s15
 801f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			sqrtf(m_motor_state.mod_d * m_motor_state.mod_d +
 801f39a:	eef1 9ac0 	vsqrt.f32	s19, s0
 801f39e:	d501      	bpl.n	801f3a4 <mcpwm_foc_adc_int_handler+0x374>
 801f3a0:	f006 fc7e 	bl	8025ca0 <sqrtf>
					m_motor_state.mod_q * m_motor_state.mod_q) / SQRT3_BY_2;
 801f3a4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 801f4e8 <mcpwm_foc_adc_int_handler+0x4b8>
	UTILS_NAN_ZERO(*phase_var);
 801f3a8:	4b50      	ldr	r3, [pc, #320]	; (801f4ec <mcpwm_foc_adc_int_handler+0x4bc>)
	float delta_theta = phase - *phase_var;
 801f3aa:	9301      	str	r3, [sp, #4]
	m_motor_state.duty_now = SIGN(m_motor_state.vq) *
 801f3ac:	ee28 8a29 	vmul.f32	s16, s16, s19
	utils_norm_angle_rad(&delta_theta);
 801f3b0:	4638      	mov	r0, r7
					m_motor_state.mod_q * m_motor_state.mod_q) / SQRT3_BY_2;
 801f3b2:	eec8 7a07 	vdiv.f32	s15, s16, s14
	m_motor_state.duty_now = SIGN(m_motor_state.vq) *
 801f3b6:	edc4 7a03 	vstr	s15, [r4, #12]
	pll_run(m_motor_state.phase, dt, &m_pll_phase, &m_pll_speed);
 801f3ba:	edd4 7a04 	vldr	s15, [r4, #16]
	UTILS_NAN_ZERO(*phase_var);
 801f3be:	edd3 6a00 	vldr	s13, [r3]
 801f3c2:	ed93 7a00 	vldr	s14, [r3]
 801f3c6:	eef4 6a47 	vcmp.f32	s13, s14
 801f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3ce:	bf0c      	ite	eq
 801f3d0:	681a      	ldreq	r2, [r3, #0]
 801f3d2:	2200      	movne	r2, #0
 801f3d4:	601a      	str	r2, [r3, #0]
	float delta_theta = phase - *phase_var;
 801f3d6:	ed93 7a00 	vldr	s14, [r3]
 801f3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f3de:	edcd 7a07 	vstr	s15, [sp, #28]
	utils_norm_angle_rad(&delta_theta);
 801f3e2:	f7f6 fb5d 	bl	8015aa0 <utils_norm_angle_rad>
	UTILS_NAN_ZERO(*speed_var);
 801f3e6:	ed96 7a00 	vldr	s14, [r6]
 801f3ea:	edd6 7a00 	vldr	s15, [r6]
	*phase_var += (*speed_var + m_conf->foc_pll_kp * delta_theta) * dt;
 801f3ee:	682a      	ldr	r2, [r5, #0]
 801f3f0:	eddd 6a07 	vldr	s13, [sp, #28]
	UTILS_NAN_ZERO(*speed_var);
 801f3f4:	9b01      	ldr	r3, [sp, #4]
	utils_norm_angle_rad((float*)phase_var);
 801f3f6:	483d      	ldr	r0, [pc, #244]	; (801f4ec <mcpwm_foc_adc_int_handler+0x4bc>)
	UTILS_NAN_ZERO(*speed_var);
 801f3f8:	eeb4 7a67 	vcmp.f32	s14, s15
 801f3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f400:	bf0c      	ite	eq
 801f402:	6831      	ldreq	r1, [r6, #0]
 801f404:	2100      	movne	r1, #0
 801f406:	6031      	str	r1, [r6, #0]
	*phase_var += (*speed_var + m_conf->foc_pll_kp * delta_theta) * dt;
 801f408:	ed96 7a00 	vldr	s14, [r6]
 801f40c:	ed92 6a35 	vldr	s12, [r2, #212]	; 0xd4
 801f410:	edd3 7a00 	vldr	s15, [r3]
 801f414:	eea6 7a26 	vfma.f32	s14, s12, s13
 801f418:	eee8 7a87 	vfma.f32	s15, s17, s14
 801f41c:	edc3 7a00 	vstr	s15, [r3]
	utils_norm_angle_rad((float*)phase_var);
 801f420:	f7f6 fb3e 	bl	8015aa0 <utils_norm_angle_rad>
	*speed_var += m_conf->foc_pll_ki * delta_theta * dt;
 801f424:	682b      	ldr	r3, [r5, #0]
 801f426:	eddd 6a07 	vldr	s13, [sp, #28]
 801f42a:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 801f42e:	edd6 7a00 	vldr	s15, [r6]
 801f432:	ee27 7a26 	vmul.f32	s14, s14, s13
	utils_norm_angle_rad(&ph_tmp);
 801f436:	4648      	mov	r0, r9
	*speed_var += m_conf->foc_pll_ki * delta_theta * dt;
 801f438:	eee8 7a87 	vfma.f32	s15, s17, s14
 801f43c:	edc6 7a00 	vstr	s15, [r6]
	float ph_tmp = m_motor_state.phase;
 801f440:	6923      	ldr	r3, [r4, #16]
 801f442:	9304      	str	r3, [sp, #16]
	utils_norm_angle_rad(&ph_tmp);
 801f444:	f7f6 fb2c 	bl	8015aa0 <utils_norm_angle_rad>
	int step = (int)floorf((ph_tmp + M_PI) / (2.0 * M_PI) * 6.0);
 801f448:	eddd 7a04 	vldr	s15, [sp, #16]
 801f44c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801f4f0 <mcpwm_foc_adc_int_handler+0x4c0>
 801f450:	eddf 6a28 	vldr	s13, [pc, #160]	; 801f4f4 <mcpwm_foc_adc_int_handler+0x4c4>
 801f454:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f458:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801f45c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 801f460:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f464:	f005 feb4 	bl	80251d0 <floorf>
 801f468:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	utils_truncate_number_int(&step, 0, 5);
 801f46c:	2205      	movs	r2, #5
 801f46e:	2100      	movs	r1, #0
 801f470:	4650      	mov	r0, sl
	int step = (int)floorf((ph_tmp + M_PI) / (2.0 * M_PI) * 6.0);
 801f472:	ed8d 0a05 	vstr	s0, [sp, #20]
	utils_truncate_number_int(&step, 0, 5);
 801f476:	f7f6 fb5b 	bl	8015b30 <utils_truncate_number_int>
	int diff = step - step_last;
 801f47a:	4a1f      	ldr	r2, [pc, #124]	; (801f4f8 <mcpwm_foc_adc_int_handler+0x4c8>)
 801f47c:	9b05      	ldr	r3, [sp, #20]
 801f47e:	6811      	ldr	r1, [r2, #0]
	step_last = step;
 801f480:	6013      	str	r3, [r2, #0]
	int diff = step - step_last;
 801f482:	1a5b      	subs	r3, r3, r1
	if (diff > 3) {
 801f484:	2b03      	cmp	r3, #3
 801f486:	f340 80b8 	ble.w	801f5fa <mcpwm_foc_adc_int_handler+0x5ca>
		diff -= 6;
 801f48a:	3b06      	subs	r3, #6
	m_tachometer += diff;
 801f48c:	481b      	ldr	r0, [pc, #108]	; (801f4fc <mcpwm_foc_adc_int_handler+0x4cc>)
	m_tachometer_abs += abs(diff);
 801f48e:	491c      	ldr	r1, [pc, #112]	; (801f500 <mcpwm_foc_adc_int_handler+0x4d0>)
	m_tachometer += diff;
 801f490:	6802      	ldr	r2, [r0, #0]
 801f492:	441a      	add	r2, r3
 801f494:	6002      	str	r2, [r0, #0]
	m_tachometer_abs += abs(diff);
 801f496:	2b00      	cmp	r3, #0
 801f498:	680a      	ldr	r2, [r1, #0]
 801f49a:	bfb8      	it	lt
 801f49c:	425b      	neglt	r3, r3
 801f49e:	4413      	add	r3, r2
 801f4a0:	600b      	str	r3, [r1, #0]
	if (encoder_is_configured()) {
 801f4a2:	f7fb fc1d 	bl	801ace0 <encoder_is_configured>
 801f4a6:	2800      	cmp	r0, #0
 801f4a8:	d13e      	bne.n	801f528 <mcpwm_foc_adc_int_handler+0x4f8>
 801f4aa:	e037      	b.n	801f51c <mcpwm_foc_adc_int_handler+0x4ec>
 801f4ac:	2000cda0 	.word	0x2000cda0
 801f4b0:	2000cdd4 	.word	0x2000cdd4
 801f4b4:	3a534067 	.word	0x3a534067
 801f4b8:	4195d174 	.word	0x4195d174
 801f4bc:	3dcccccd 	.word	0x3dcccccd
 801f4c0:	00000000 	.word	0x00000000
 801f4c4:	457ff000 	.word	0x457ff000
 801f4c8:	40533333 	.word	0x40533333
 801f4cc:	3eaaaaab 	.word	0x3eaaaaab
 801f4d0:	3f2aaaab 	.word	0x3f2aaaab
 801f4d4:	3f13cd3a 	.word	0x3f13cd3a
 801f4d8:	2000ce38 	.word	0x2000ce38
 801f4dc:	2000ce34 	.word	0x2000ce34
 801f4e0:	3e4ccccd 	.word	0x3e4ccccd
 801f4e4:	2000ce60 	.word	0x2000ce60
 801f4e8:	3f5db3d7 	.word	0x3f5db3d7
 801f4ec:	2000ce5c 	.word	0x2000ce5c
 801f4f0:	40490fdb 	.word	0x40490fdb
 801f4f4:	40c90fdb 	.word	0x40c90fdb
 801f4f8:	2000cea8 	.word	0x2000cea8
 801f4fc:	2000ce88 	.word	0x2000ce88
 801f500:	2000ce8c 	.word	0x2000ce8c
 801f504:	2000ce9c 	.word	0x2000ce9c
 801f508:	2000ce84 	.word	0x2000ce84
 801f50c:	2000ce4c 	.word	0x2000ce4c
 801f510:	42652ee0 	.word	0x42652ee0
 801f514:	3f7ae148 	.word	0x3f7ae148
 801f518:	3f828f5c 	.word	0x3f828f5c
		angle_now = m_motor_state.phase * (180.0 / M_PI);
 801f51c:	ed94 9a04 	vldr	s18, [r4, #16]
 801f520:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 801f510 <mcpwm_foc_adc_int_handler+0x4e0>
 801f524:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (m_conf->p_pid_ang_div > 0.98 && m_conf->p_pid_ang_div < 1.02) {
 801f528:	682b      	ldr	r3, [r5, #0]
 801f52a:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 801f514 <mcpwm_foc_adc_int_handler+0x4e4>
 801f52e:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 801f532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f53a:	dd45      	ble.n	801f5c8 <mcpwm_foc_adc_int_handler+0x598>
 801f53c:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 801f540:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; 801f518 <mcpwm_foc_adc_int_handler+0x4e8>
 801f544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f54c:	d53c      	bpl.n	801f5c8 <mcpwm_foc_adc_int_handler+0x598>
		m_pos_pid_now = angle_now;
 801f54e:	4c3f      	ldr	r4, [pc, #252]	; (801f64c <mcpwm_foc_adc_int_handler+0x61c>)
 801f550:	ed84 9a00 	vstr	s18, [r4]
	if (m_state == MC_STATE_RUNNING) {
 801f554:	f898 3000 	ldrb.w	r3, [r8]
 801f558:	2b02      	cmp	r3, #2
 801f55a:	f000 83fe 	beq.w	801fd5a <mcpwm_foc_adc_int_handler+0xd2a>
	mc_interface_mc_timer_isr();
 801f55e:	f7fd f807 	bl	801c570 <mc_interface_mc_timer_isr>
	last_inj_adc_isr_duration = (float) TIM12->CNT / 10000000.0;
 801f562:	4b3b      	ldr	r3, [pc, #236]	; (801f650 <mcpwm_foc_adc_int_handler+0x620>)
 801f564:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801f654 <mcpwm_foc_adc_int_handler+0x624>
 801f568:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801f56c:	4b3a      	ldr	r3, [pc, #232]	; (801f658 <mcpwm_foc_adc_int_handler+0x628>)
 801f56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f576:	ed83 7a00 	vstr	s14, [r3]
}
 801f57a:	b009      	add	sp, #36	; 0x24
 801f57c:	ecbd 8b06 	vpop	{d8-d10}
 801f580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			TIMER_UPDATE_DUTY_SAMP(0, 0, 0, samp_time);
 801f584:	6813      	ldr	r3, [r2, #0]
 801f586:	4935      	ldr	r1, [pc, #212]	; (801f65c <mcpwm_foc_adc_int_handler+0x62c>)
 801f588:	f043 0302 	orr.w	r3, r3, #2
 801f58c:	6013      	str	r3, [r2, #0]
 801f58e:	6808      	ldr	r0, [r1, #0]
		const uint32_t samp_time = duty_cnt - MCPWM_FOC_INDUCTANCE_SAMPLE_CNT_OFFSET;
 801f590:	ee17 3a90 	vmov	r3, s15
			TIMER_UPDATE_DUTY_SAMP(0, 0, 0, samp_time);
 801f594:	f040 0002 	orr.w	r0, r0, #2
		const uint32_t samp_time = duty_cnt - MCPWM_FOC_INDUCTANCE_SAMPLE_CNT_OFFSET;
 801f598:	3b0a      	subs	r3, #10
			TIMER_UPDATE_DUTY_SAMP(0, 0, 0, samp_time);
 801f59a:	6008      	str	r0, [r1, #0]
 801f59c:	6354      	str	r4, [r2, #52]	; 0x34
 801f59e:	6394      	str	r4, [r2, #56]	; 0x38
 801f5a0:	63d4      	str	r4, [r2, #60]	; 0x3c
 801f5a2:	634b      	str	r3, [r1, #52]	; 0x34
 801f5a4:	6813      	ldr	r3, [r2, #0]
 801f5a6:	f023 0302 	bic.w	r3, r3, #2
 801f5aa:	6013      	str	r3, [r2, #0]
 801f5ac:	680b      	ldr	r3, [r1, #0]
 801f5ae:	f023 0302 	bic.w	r3, r3, #2
 801f5b2:	600b      	str	r3, [r1, #0]
			start_pwm_hw();
 801f5b4:	f7fd fbc4 	bl	801cd40 <start_pwm_hw>
 801f5b8:	683b      	ldr	r3, [r7, #0]
		inductance_state++;
 801f5ba:	3301      	adds	r3, #1
 801f5bc:	603b      	str	r3, [r7, #0]
}
 801f5be:	b009      	add	sp, #36	; 0x24
 801f5c0:	ecbd 8b06 	vpop	{d8-d10}
 801f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float diff_f = utils_angle_difference(angle_now, angle_last);
 801f5c8:	4e25      	ldr	r6, [pc, #148]	; (801f660 <mcpwm_foc_adc_int_handler+0x630>)
		m_pos_pid_now += diff_f / m_conf->p_pid_ang_div;
 801f5ca:	4c20      	ldr	r4, [pc, #128]	; (801f64c <mcpwm_foc_adc_int_handler+0x61c>)
		float diff_f = utils_angle_difference(angle_now, angle_last);
 801f5cc:	edd6 0a00 	vldr	s1, [r6]
 801f5d0:	eeb0 0a49 	vmov.f32	s0, s18
 801f5d4:	f7f6 fb0c 	bl	8015bf0 <utils_angle_difference>
		m_pos_pid_now += diff_f / m_conf->p_pid_ang_div;
 801f5d8:	682b      	ldr	r3, [r5, #0]
		angle_last = angle_now;
 801f5da:	ed86 9a00 	vstr	s18, [r6]
		m_pos_pid_now += diff_f / m_conf->p_pid_ang_div;
 801f5de:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 801f5e2:	edd4 7a00 	vldr	s15, [r4]
 801f5e6:	ee80 0a07 	vdiv.f32	s0, s0, s14
		utils_norm_angle((float*)&m_pos_pid_now);
 801f5ea:	4620      	mov	r0, r4
		m_pos_pid_now += diff_f / m_conf->p_pid_ang_div;
 801f5ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f5f0:	ed84 0a00 	vstr	s0, [r4]
		utils_norm_angle((float*)&m_pos_pid_now);
 801f5f4:	f7f6 fa34 	bl	8015a60 <utils_norm_angle>
 801f5f8:	e7ac      	b.n	801f554 <mcpwm_foc_adc_int_handler+0x524>
	} else if (diff < -2) {
 801f5fa:	1c9a      	adds	r2, r3, #2
		diff += 6;
 801f5fc:	bfb8      	it	lt
 801f5fe:	3306      	addlt	r3, #6
 801f600:	e744      	b.n	801f48c <mcpwm_foc_adc_int_handler+0x45c>
		enc_ang = encoder_read_deg();
 801f602:	f7fb fb75 	bl	801acf0 <encoder_read_deg>
		if (m_conf->foc_encoder_inverted) {
 801f606:	682b      	ldr	r3, [r5, #0]
		float phase_tmp = enc_ang;
 801f608:	ed8d 0a07 	vstr	s0, [sp, #28]
		if (m_conf->foc_encoder_inverted) {
 801f60c:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
		enc_ang = encoder_read_deg();
 801f610:	eeb0 9a40 	vmov.f32	s18, s0
		if (m_conf->foc_encoder_inverted) {
 801f614:	2a00      	cmp	r2, #0
 801f616:	f040 8306 	bne.w	801fc26 <mcpwm_foc_adc_int_handler+0xbf6>
 801f61a:	eeb0 7a40 	vmov.f32	s14, s0
		phase_tmp *= m_conf->foc_encoder_ratio;
 801f61e:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
		phase_tmp -= m_conf->foc_encoder_offset;
 801f622:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 801f626:	eed6 7a87 	vfnms.f32	s15, s13, s14
 801f62a:	af08      	add	r7, sp, #32
 801f62c:	ed67 7a01 	vstmdb	r7!, {s15}
		utils_norm_angle((float*)&phase_tmp);
 801f630:	4638      	mov	r0, r7
 801f632:	f7f6 fa15 	bl	8015a60 <utils_norm_angle>
		m_phase_now_encoder = phase_tmp * (M_PI / 180.0);
 801f636:	eddd 7a07 	vldr	s15, [sp, #28]
 801f63a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801f664 <mcpwm_foc_adc_int_handler+0x634>
 801f63e:	4b0a      	ldr	r3, [pc, #40]	; (801f668 <mcpwm_foc_adc_int_handler+0x638>)
 801f640:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f644:	edc3 7a00 	vstr	s15, [r3]
 801f648:	e5a7      	b.n	801f19a <mcpwm_foc_adc_int_handler+0x16a>
 801f64a:	bf00      	nop
 801f64c:	2000ce64 	.word	0x2000ce64
 801f650:	40001800 	.word	0x40001800
 801f654:	4b189680 	.word	0x4b189680
 801f658:	2000cd9c 	.word	0x2000cd9c
 801f65c:	40010400 	.word	0x40010400
 801f660:	2000cd80 	.word	0x2000cd80
 801f664:	3c8efa35 	.word	0x3c8efa35
 801f668:	2000ce44 	.word	0x2000ce44
 801f66c:	3da50a50 	.word	0x3da50a50
 801f670:	3f93cd3a 	.word	0x3f93cd3a
 801f674:	3f13cd3a 	.word	0x3f13cd3a
	float ib = ADC_curr_norm_value[1] * FAC_CURRENT;
 801f678:	ee07 aa90 	vmov	s15, sl
	float ia = ADC_curr_norm_value[0] * FAC_CURRENT;
 801f67c:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 801f66c <mcpwm_foc_adc_int_handler+0x63c>
		m_motor_state.i_beta = ONE_BY_SQRT3 * ia + TWO_BY_SQRT3 * ib;
 801f680:	ed1f 5a05 	vldr	s10, [pc, #-20]	; 801f670 <mcpwm_foc_adc_int_handler+0x640>
 801f684:	ed5f 5a05 	vldr	s11, [pc, #-20]	; 801f674 <mcpwm_foc_adc_int_handler+0x644>
		float id_set_tmp = m_id_set;
 801f688:	49e9      	ldr	r1, [pc, #932]	; (801fa30 <mcpwm_foc_adc_int_handler+0xa00>)
		float iq_set_tmp = m_iq_set;
 801f68a:	4aea      	ldr	r2, [pc, #936]	; (801fa34 <mcpwm_foc_adc_int_handler+0xa04>)
		m_motor_state.max_duty = m_conf->l_max_duty;
 801f68c:	682b      	ldr	r3, [r5, #0]
		UTILS_LP_FAST(duty_filtered, m_motor_state.duty_now, 0.1);
 801f68e:	f8df a3d8 	ldr.w	sl, [pc, #984]	; 801fa68 <mcpwm_foc_adc_int_handler+0xa38>
 801f692:	ed9f 6ae9 	vldr	s12, [pc, #932]	; 801fa38 <mcpwm_foc_adc_int_handler+0xa08>
	float ia = ADC_curr_norm_value[0] * FAC_CURRENT;
 801f696:	ee07 9a10 	vmov	s14, r9
	float ib = ADC_curr_norm_value[1] * FAC_CURRENT;
 801f69a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float ia = ADC_curr_norm_value[0] * FAC_CURRENT;
 801f69e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float ib = ADC_curr_norm_value[1] * FAC_CURRENT;
 801f6a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
	float ia = ADC_curr_norm_value[0] * FAC_CURRENT;
 801f6a6:	ee27 7a26 	vmul.f32	s14, s14, s13
		m_motor_state.i_beta = ONE_BY_SQRT3 * ia + TWO_BY_SQRT3 * ib;
 801f6aa:	ee67 7a85 	vmul.f32	s15, s15, s10
		m_motor_state.i_alpha = ia;
 801f6ae:	ed84 7a05 	vstr	s14, [r4, #20]
		m_motor_state.i_beta = ONE_BY_SQRT3 * ia + TWO_BY_SQRT3 * ib;
 801f6b2:	eee7 7a25 	vfma.f32	s15, s14, s11
		utils_truncate_number(&duty_filtered, -1.0, 1.0);
 801f6b6:	4650      	mov	r0, sl
		bool control_duty = m_control_mode == CONTROL_MODE_DUTY;
 801f6b8:	f8df 93b0 	ldr.w	r9, [pc, #944]	; 801fa6c <mcpwm_foc_adc_int_handler+0xa3c>
		UTILS_LP_FAST(duty_filtered, m_motor_state.duty_now, 0.1);
 801f6bc:	ed9a 7a00 	vldr	s14, [sl]
		m_motor_state.i_beta = ONE_BY_SQRT3 * ia + TWO_BY_SQRT3 * ib;
 801f6c0:	edc4 7a06 	vstr	s15, [r4, #24]
		const float duty_abs = fabsf(m_motor_state.duty_now);
 801f6c4:	edd4 9a03 	vldr	s19, [r4, #12]
		float id_set_tmp = m_id_set;
 801f6c8:	6809      	ldr	r1, [r1, #0]
		float iq_set_tmp = m_iq_set;
 801f6ca:	6812      	ldr	r2, [r2, #0]
 801f6cc:	9204      	str	r2, [sp, #16]
		m_motor_state.max_duty = m_conf->l_max_duty;
 801f6ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f6d0:	60a3      	str	r3, [r4, #8]
		UTILS_LP_FAST(duty_filtered, m_motor_state.duty_now, 0.1);
 801f6d2:	edd4 7a03 	vldr	s15, [r4, #12]
		float id_set_tmp = m_id_set;
 801f6d6:	9103      	str	r1, [sp, #12]
		UTILS_LP_FAST(duty_filtered, m_motor_state.duty_now, 0.1);
 801f6d8:	ee77 7a67 	vsub.f32	s15, s14, s15
		utils_truncate_number(&duty_filtered, -1.0, 1.0);
 801f6dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
		UTILS_LP_FAST(duty_filtered, m_motor_state.duty_now, 0.1);
 801f6e0:	eea7 7ac6 	vfms.f32	s14, s15, s12
		utils_truncate_number(&duty_filtered, -1.0, 1.0);
 801f6e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		UTILS_LP_FAST(duty_filtered, m_motor_state.duty_now, 0.1);
 801f6e8:	ed8a 7a00 	vstr	s14, [sl]
		utils_truncate_number(&duty_filtered, -1.0, 1.0);
 801f6ec:	f7f6 fa08 	bl	8015b00 <utils_truncate_number>
		float duty_set = m_duty_cycle_set;
 801f6f0:	4bd2      	ldr	r3, [pc, #840]	; (801fa3c <mcpwm_foc_adc_int_handler+0xa0c>)
 801f6f2:	edd3 7a00 	vldr	s15, [r3]
		bool control_duty = m_control_mode == CONTROL_MODE_DUTY;
 801f6f6:	f899 3000 	ldrb.w	r3, [r9]
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE
 801f6fa:	f899 2000 	ldrb.w	r2, [r9]
 801f6fe:	2a03      	cmp	r2, #3
		const float duty_abs = fabsf(m_motor_state.duty_now);
 801f700:	eef0 9ae9 	vabs.f32	s19, s19
		bool control_duty = m_control_mode == CONTROL_MODE_DUTY;
 801f704:	b2db      	uxtb	r3, r3
		if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE
 801f706:	f000 82c0 	beq.w	801fc8a <mcpwm_foc_adc_int_handler+0xc5a>
		if (m_control_mode == CONTROL_MODE_SPEED &&
 801f70a:	f899 2000 	ldrb.w	r2, [r9]
 801f70e:	2a01      	cmp	r2, #1
 801f710:	f000 8302 	beq.w	801fd18 <mcpwm_foc_adc_int_handler+0xce8>
		if (control_duty) {
 801f714:	2b00      	cmp	r3, #0
 801f716:	f000 846d 	beq.w	801fff4 <mcpwm_foc_adc_int_handler+0xfc4>
		} else if (m_control_mode == CONTROL_MODE_CURRENT_BRAKE) {
 801f71a:	f899 3000 	ldrb.w	r3, [r9]
 801f71e:	2b03      	cmp	r3, #3
 801f720:	f000 854f 	beq.w	80201c2 <mcpwm_foc_adc_int_handler+0x1192>
		if (!m_phase_override) {
 801f724:	f8df a348 	ldr.w	sl, [pc, #840]	; 801fa70 <mcpwm_foc_adc_int_handler+0xa40>
 801f728:	f89a 3000 	ldrb.w	r3, [sl]
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	f000 83ea 	beq.w	801ff06 <mcpwm_foc_adc_int_handler+0xed6>
		switch (m_conf->foc_sensor_mode) {
 801f732:	682a      	ldr	r2, [r5, #0]
 801f734:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
 801f738:	b2db      	uxtb	r3, r3
 801f73a:	2b01      	cmp	r3, #1
 801f73c:	f000 8476 	beq.w	802002c <mcpwm_foc_adc_int_handler+0xffc>
 801f740:	f0c0 845c 	bcc.w	801fffc <mcpwm_foc_adc_int_handler+0xfcc>
 801f744:	2b02      	cmp	r3, #2
 801f746:	f040 834b 	bne.w	801fde0 <mcpwm_foc_adc_int_handler+0xdb0>
			m_phase_now_observer = correct_hall(m_phase_now_observer, m_pll_speed, dt);
 801f74a:	f8df b328 	ldr.w	fp, [pc, #808]	; 801fa74 <mcpwm_foc_adc_int_handler+0xa44>
 801f74e:	4ebc      	ldr	r6, [pc, #752]	; (801fa40 <mcpwm_foc_adc_int_handler+0xa10>)
 801f750:	ed9b 0a00 	vldr	s0, [fp]
 801f754:	edd6 0a00 	vldr	s1, [r6]
 801f758:	eeb0 1a68 	vmov.f32	s2, s17
 801f75c:	f7fd fba0 	bl	801cea0 <correct_hall>
 801f760:	ed8b 0a00 	vstr	s0, [fp]
			m_motor_state.phase = m_phase_now_observer;
 801f764:	f8db 3000 	ldr.w	r3, [fp]
 801f768:	6123      	str	r3, [r4, #16]
			if (!m_phase_override) {
 801f76a:	f89a 3000 	ldrb.w	r3, [sl]
 801f76e:	b90b      	cbnz	r3, 801f774 <mcpwm_foc_adc_int_handler+0x744>
				id_set_tmp = 0.0;
 801f770:	2300      	movs	r3, #0
 801f772:	9303      	str	r3, [sp, #12]
		if (m_control_mode == CONTROL_MODE_HANDBRAKE) {
 801f774:	f899 3000 	ldrb.w	r3, [r9]
 801f778:	2b05      	cmp	r3, #5
 801f77a:	f000 83e3 	beq.w	801ff44 <mcpwm_foc_adc_int_handler+0xf14>
		} else if (m_control_mode == CONTROL_MODE_OPENLOOP) {
 801f77e:	f899 3000 	ldrb.w	r3, [r9]
 801f782:	2b06      	cmp	r3, #6
 801f784:	f000 8556 	beq.w	8020234 <mcpwm_foc_adc_int_handler+0x1204>
		if (m_phase_override) {
 801f788:	f89a 3000 	ldrb.w	r3, [sl]
 801f78c:	b113      	cbz	r3, 801f794 <mcpwm_foc_adc_int_handler+0x764>
			m_motor_state.phase = m_phase_now_override;
 801f78e:	4bad      	ldr	r3, [pc, #692]	; (801fa44 <mcpwm_foc_adc_int_handler+0xa14>)
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	6123      	str	r3, [r4, #16]
		const float mod_q = m_motor_state.mod_q;
 801f794:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
		if (mod_q > 0.001) {
 801f798:	eddf 7aab 	vldr	s15, [pc, #684]	; 801fa48 <mcpwm_foc_adc_int_handler+0xa18>
 801f79c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7a4:	f300 83bf 	bgt.w	801ff26 <mcpwm_foc_adc_int_handler+0xef6>
		} else if (mod_q < -0.001) {
 801f7a8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801fa4c <mcpwm_foc_adc_int_handler+0xa1c>
 801f7ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7b4:	f100 8450 	bmi.w	8020058 <mcpwm_foc_adc_int_handler+0x1028>
 801f7b8:	f10d 0910 	add.w	r9, sp, #16
		if (mod_q > 0.0) {
 801f7bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801f7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			utils_truncate_number(&iq_set_tmp, m_conf->lo_current_min, m_conf->lo_current_max);
 801f7c4:	682b      	ldr	r3, [r5, #0]
		if (mod_q > 0.0) {
 801f7c6:	f340 83f9 	ble.w	801ffbc <mcpwm_foc_adc_int_handler+0xf8c>
			utils_truncate_number(&iq_set_tmp, m_conf->lo_current_min, m_conf->lo_current_max);
 801f7ca:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
 801f7ce:	edd3 0a19 	vldr	s1, [r3, #100]	; 0x64
 801f7d2:	4648      	mov	r0, r9
 801f7d4:	f7f6 f994 	bl	8015b00 <utils_truncate_number>
				utils_max_abs(m_conf->lo_current_max, m_conf->lo_current_min));
 801f7d8:	682b      	ldr	r3, [r5, #0]
			(2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f7da:	ed9f 8aab 	vldr	s16, [pc, #684]	; 801fa88 <mcpwm_foc_adc_int_handler+0xa58>
		utils_saturate_vector_2d(&id_set_tmp, &iq_set_tmp,
 801f7de:	ed93 0a19 	vldr	s0, [r3, #100]	; 0x64
 801f7e2:	edd3 0a1a 	vldr	s1, [r3, #104]	; 0x68
			(2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f7e6:	eddf 9a9a 	vldr	s19, [pc, #616]	; 801fa50 <mcpwm_foc_adc_int_handler+0xa20>
		utils_saturate_vector_2d(&id_set_tmp, &iq_set_tmp,
 801f7ea:	f7f6 fbd9 	bl	8015fa0 <utils_max_abs>
 801f7ee:	4649      	mov	r1, r9
 801f7f0:	a803      	add	r0, sp, #12
 801f7f2:	f7f6 faf5 	bl	8015de0 <utils_saturate_vector_2d>
		m_motor_state.id_target = id_set_tmp;
 801f7f6:	9a03      	ldr	r2, [sp, #12]
		m_motor_state.iq_target = iq_set_tmp;
 801f7f8:	9b04      	ldr	r3, [sp, #16]
		m_motor_state.id_target = id_set_tmp;
 801f7fa:	6022      	str	r2, [r4, #0]
	utils_fast_sincos_better(state_m->phase, &s, &c);
 801f7fc:	f10d 0a14 	add.w	sl, sp, #20
		m_motor_state.iq_target = iq_set_tmp;
 801f800:	6063      	str	r3, [r4, #4]
	utils_fast_sincos_better(state_m->phase, &s, &c);
 801f802:	f10d 0b18 	add.w	fp, sp, #24
 801f806:	4651      	mov	r1, sl
 801f808:	ed94 0a04 	vldr	s0, [r4, #16]
 801f80c:	4658      	mov	r0, fp
 801f80e:	f7f6 fb2f 	bl	8015e70 <utils_fast_sincos_better>
	float max_duty = fabsf(state_m->max_duty);
 801f812:	edd4 7a02 	vldr	s15, [r4, #8]
	utils_truncate_number(&max_duty, 0.0, m_conf->l_max_duty);
 801f816:	682b      	ldr	r3, [r5, #0]
 801f818:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 801fa54 <mcpwm_foc_adc_int_handler+0xa24>
	float max_duty = fabsf(state_m->max_duty);
 801f81c:	eef0 7ae7 	vabs.f32	s15, s15
 801f820:	edcd 7a07 	vstr	s15, [sp, #28]
	utils_truncate_number(&max_duty, 0.0, m_conf->l_max_duty);
 801f824:	edd3 0a16 	vldr	s1, [r3, #88]	; 0x58
 801f828:	4638      	mov	r0, r7
 801f82a:	f7f6 f969 	bl	8015b00 <utils_truncate_number>
	state_m->id = c * state_m->i_alpha + s * state_m->i_beta;
 801f82e:	edd4 7a05 	vldr	s15, [r4, #20]
 801f832:	eddd 5a06 	vldr	s11, [sp, #24]
 801f836:	ed94 7a06 	vldr	s14, [r4, #24]
 801f83a:	ed9d 6a05 	vldr	s12, [sp, #20]
	UTILS_LP_FAST(state_m->id_filter, state_m->id, MCPWM_FOC_I_FILTER_CONST);
 801f83e:	eddf 6a7e 	vldr	s13, [pc, #504]	; 801fa38 <mcpwm_foc_adc_int_handler+0xa08>
	state_m->vd = state_m->vd_int + Ierr_d * m_conf->foc_current_kp;
 801f842:	682b      	ldr	r3, [r5, #0]
	utils_saturate_vector_2d((float*)&state_m->vd, (float*)&state_m->vq,
 801f844:	4984      	ldr	r1, [pc, #528]	; (801fa58 <mcpwm_foc_adc_int_handler+0xa28>)
	state_m->id = c * state_m->i_alpha + s * state_m->i_beta;
 801f846:	ee27 7a25 	vmul.f32	s14, s14, s11
	utils_saturate_vector_2d((float*)&state_m->vd, (float*)&state_m->vq,
 801f84a:	1f08      	subs	r0, r1, #4
	state_m->id = c * state_m->i_alpha + s * state_m->i_beta;
 801f84c:	eea7 7a86 	vfma.f32	s14, s15, s12
 801f850:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
	state_m->iq = c * state_m->i_beta  - s * state_m->i_alpha;
 801f854:	ed94 7a06 	vldr	s14, [r4, #24]
 801f858:	edd4 7a05 	vldr	s15, [r4, #20]
 801f85c:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 801f860:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f864:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	UTILS_LP_FAST(state_m->id_filter, state_m->id, MCPWM_FOC_I_FILTER_CONST);
 801f868:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 801f86c:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
 801f870:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 801f874:	ee37 7a46 	vsub.f32	s14, s14, s12
 801f878:	eee7 7a66 	vfms.f32	s15, s14, s13
 801f87c:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	UTILS_LP_FAST(state_m->iq_filter, state_m->iq, MCPWM_FOC_I_FILTER_CONST);
 801f880:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 801f884:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 801f888:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 801f88c:	ee37 7a46 	vsub.f32	s14, s14, s12
 801f890:	eee7 7a66 	vfms.f32	s15, s14, s13
 801f894:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	float Ierr_d = state_m->id_target - state_m->id;
 801f898:	ed94 7a00 	vldr	s14, [r4]
 801f89c:	ed94 5a0f 	vldr	s10, [r4, #60]	; 0x3c
	float Ierr_q = state_m->iq_target - state_m->iq;
 801f8a0:	edd4 7a01 	vldr	s15, [r4, #4]
 801f8a4:	edd4 5a10 	vldr	s11, [r4, #64]	; 0x40
	state_m->vd = state_m->vd_int + Ierr_d * m_conf->foc_current_kp;
 801f8a8:	edd4 6a15 	vldr	s13, [r4, #84]	; 0x54
 801f8ac:	ed93 6a29 	vldr	s12, [r3, #164]	; 0xa4
	float Ierr_d = state_m->id_target - state_m->id;
 801f8b0:	ee37 7a45 	vsub.f32	s14, s14, s10
	float Ierr_q = state_m->iq_target - state_m->iq;
 801f8b4:	ee77 7ae5 	vsub.f32	s15, s15, s11
	state_m->vd = state_m->vd_int + Ierr_d * m_conf->foc_current_kp;
 801f8b8:	eee7 6a06 	vfma.f32	s13, s14, s12
 801f8bc:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
	state_m->vq = state_m->vq_int + Ierr_q * m_conf->foc_current_kp;
 801f8c0:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 801f8c4:	ed93 6a29 	vldr	s12, [r3, #164]	; 0xa4
 801f8c8:	eee7 6a86 	vfma.f32	s13, s15, s12
 801f8cc:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
	state_m->vd_int += Ierr_d * (m_conf->foc_current_ki * dt);
 801f8d0:	ed93 6a2a 	vldr	s12, [r3, #168]	; 0xa8
 801f8d4:	edd4 6a15 	vldr	s13, [r4, #84]	; 0x54
 801f8d8:	ee28 6a86 	vmul.f32	s12, s17, s12
 801f8dc:	eee7 6a06 	vfma.f32	s13, s14, s12
 801f8e0:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
	state_m->vq_int += Ierr_q * (m_conf->foc_current_ki * dt);
 801f8e4:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 801f8e8:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 801f8ec:	ee68 6aa6 	vmul.f32	s13, s17, s13
 801f8f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801f8f4:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
			(2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f8f8:	eddd 7a07 	vldr	s15, [sp, #28]
 801f8fc:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801f900:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f904:	ee67 7aa9 	vmul.f32	s15, s15, s19
	utils_saturate_vector_2d((float*)&state_m->vd, (float*)&state_m->vq,
 801f908:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f90c:	f7f6 fa68 	bl	8015de0 <utils_saturate_vector_2d>
	state_m->mod_d = state_m->vd / ((2.0 / 3.0) * state_m->v_bus);
 801f910:	ed94 6a13 	vldr	s12, [r4, #76]	; 0x4c
 801f914:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
	utils_truncate_number_abs((float*)&state_m->vd_int, (2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f918:	eddd 7a07 	vldr	s15, [sp, #28]
 801f91c:	484f      	ldr	r0, [pc, #316]	; (801fa5c <mcpwm_foc_adc_int_handler+0xa2c>)
	state_m->mod_d = state_m->vd / ((2.0 / 3.0) * state_m->v_bus);
 801f91e:	ee27 7a08 	vmul.f32	s14, s14, s16
	utils_truncate_number_abs((float*)&state_m->vd_int, (2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f922:	ee67 7a88 	vmul.f32	s15, s15, s16
	state_m->mod_d = state_m->vd / ((2.0 / 3.0) * state_m->v_bus);
 801f926:	eec6 6a07 	vdiv.f32	s13, s12, s14
	utils_truncate_number_abs((float*)&state_m->vd_int, (2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f92a:	ee67 7aa9 	vmul.f32	s15, s15, s19
	state_m->mod_d = state_m->vd / ((2.0 / 3.0) * state_m->v_bus);
 801f92e:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
	state_m->mod_q = state_m->vq / ((2.0 / 3.0) * state_m->v_bus);
 801f932:	ed94 6a14 	vldr	s12, [r4, #80]	; 0x50
 801f936:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801f93a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801f93e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801f942:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
	utils_truncate_number_abs((float*)&state_m->vd_int, (2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f946:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801f94a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f94e:	f7f6 f8ff 	bl	8015b50 <utils_truncate_number_abs>
	utils_truncate_number_abs((float*)&state_m->vq_int, (2.0 / 3.0) * max_duty * SQRT3_BY_2 * state_m->v_bus);
 801f952:	eddd 7a07 	vldr	s15, [sp, #28]
 801f956:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801f95a:	4841      	ldr	r0, [pc, #260]	; (801fa60 <mcpwm_foc_adc_int_handler+0xa30>)
 801f95c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f960:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801f964:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f968:	f7f6 f8f2 	bl	8015b50 <utils_truncate_number_abs>
	state_m->i_bus = state_m->mod_d * state_m->id + state_m->mod_q * state_m->iq;
 801f96c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 801f970:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801f974:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 801f978:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 801f97c:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f980:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f984:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	state_m->i_abs = sqrtf(SQ(state_m->id) + SQ(state_m->iq));
 801f988:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801f98c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 801f990:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801f994:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 801f998:	ee20 0a26 	vmul.f32	s0, s0, s13
 801f99c:	eea7 0a27 	vfma.f32	s0, s14, s15
 801f9a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801f9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9a8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801f9ac:	d501      	bpl.n	801f9b2 <mcpwm_foc_adc_int_handler+0x982>
 801f9ae:	f006 f977 	bl	8025ca0 <sqrtf>
 801f9b2:	ed84 8a07 	vstr	s16, [r4, #28]
	state_m->i_abs_filter = sqrtf(SQ(state_m->id_filter) + SQ(state_m->iq_filter));
 801f9b6:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 801f9ba:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 801f9be:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 801f9c2:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
 801f9c6:	ee20 0a26 	vmul.f32	s0, s0, s13
 801f9ca:	eea7 0a27 	vfma.f32	s0, s14, s15
 801f9ce:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9d6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801f9da:	d501      	bpl.n	801f9e0 <mcpwm_foc_adc_int_handler+0x9b0>
 801f9dc:	f006 f960 	bl	8025ca0 <sqrtf>
 801f9e0:	ed84 8a08 	vstr	s16, [r4, #32]
	float mod_alpha = c * state_m->mod_d - s * state_m->mod_q;
 801f9e4:	edd4 2a0d 	vldr	s5, [r4, #52]	; 0x34
 801f9e8:	ed9d 6a06 	vldr	s12, [sp, #24]
 801f9ec:	edd4 5a0e 	vldr	s11, [r4, #56]	; 0x38
	float mod_beta  = c * state_m->mod_q + s * state_m->mod_d;
 801f9f0:	ed94 3a0e 	vldr	s6, [r4, #56]	; 0x38
 801f9f4:	ed94 2a0d 	vldr	s4, [r4, #52]	; 0x34
	const float i_alpha_filter = c * state_m->id_target - s * state_m->iq_target;
 801f9f8:	ed94 4a00 	vldr	s8, [r4]
 801f9fc:	ed94 7a01 	vldr	s14, [r4, #4]
	const float i_beta_filter = c * state_m->iq_target + s * state_m->id_target;
 801fa00:	edd4 1a01 	vldr	s3, [r4, #4]
 801fa04:	edd4 7a00 	vldr	s15, [r4]
	float mod_alpha = c * state_m->mod_d - s * state_m->mod_q;
 801fa08:	ed9d 5a05 	vldr	s10, [sp, #20]
	const float ib_filter = -0.5 * i_alpha_filter + SQRT3_BY_2 * i_beta_filter;
 801fa0c:	eddf 4a10 	vldr	s9, [pc, #64]	; 801fa50 <mcpwm_foc_adc_int_handler+0xa20>
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801fa10:	eddf 6a14 	vldr	s13, [pc, #80]	; 801fa64 <mcpwm_foc_adc_int_handler+0xa34>
 801fa14:	eddf 3a1c 	vldr	s7, [pc, #112]	; 801fa88 <mcpwm_foc_adc_int_handler+0xa58>
	const float i_beta_filter = c * state_m->iq_target + s * state_m->id_target;
 801fa18:	ee66 7a27 	vmul.f32	s15, s12, s15
	const float i_alpha_filter = c * state_m->id_target - s * state_m->iq_target;
 801fa1c:	ee27 7a46 	vnmul.f32	s14, s14, s12
	const float i_beta_filter = c * state_m->iq_target + s * state_m->id_target;
 801fa20:	eee5 7a21 	vfma.f32	s15, s10, s3
	const float i_alpha_filter = c * state_m->id_target - s * state_m->iq_target;
 801fa24:	eea5 7a04 	vfma.f32	s14, s10, s8
	const float ib_filter = -0.5 * i_alpha_filter + SQRT3_BY_2 * i_beta_filter;
 801fa28:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801fa2c:	e02e      	b.n	801fa8c <mcpwm_foc_adc_int_handler+0xa5c>
 801fa2e:	bf00      	nop
 801fa30:	2000cdc8 	.word	0x2000cdc8
 801fa34:	2000cdd0 	.word	0x2000cdd0
 801fa38:	3dcccccd 	.word	0x3dcccccd
 801fa3c:	2000cdc0 	.word	0x2000cdc0
 801fa40:	2000ce60 	.word	0x2000ce60
 801fa44:	2000ce54 	.word	0x2000ce54
 801fa48:	3a83126f 	.word	0x3a83126f
 801fa4c:	ba83126f 	.word	0xba83126f
 801fa50:	3f5db3d7 	.word	0x3f5db3d7
 801fa54:	00000000 	.word	0x00000000
 801fa58:	2000ce24 	.word	0x2000ce24
 801fa5c:	2000ce28 	.word	0x2000ce28
 801fa60:	2000ce2c 	.word	0x2000ce2c
 801fa64:	bf2aaaab 	.word	0xbf2aaaab
 801fa68:	2000cd88 	.word	0x2000cd88
 801fa6c:	2000cda4 	.word	0x2000cda4
 801fa70:	2000ce59 	.word	0x2000ce59
 801fa74:	2000ce4c 	.word	0x2000ce4c
 801fa78:	3eaaaaab 	.word	0x3eaaaaab
 801fa7c:	bf13cd3a 	.word	0xbf13cd3a
 801fa80:	3f13cd3a 	.word	0x3f13cd3a
 801fa84:	358637bd 	.word	0x358637bd
 801fa88:	3f2aaaab 	.word	0x3f2aaaab
 801fa8c:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
 801fa90:	eeb0 4a67 	vmov.f32	s8, s15
 801fa94:	eea7 4a24 	vfma.f32	s8, s14, s9
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801fa98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801fa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float mod_alpha = c * state_m->mod_d - s * state_m->mod_q;
 801faa0:	ee66 5a65 	vnmul.f32	s11, s12, s11
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801faa4:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
	float mod_beta  = c * state_m->mod_q + s * state_m->mod_d;
 801faa8:	ee26 6a02 	vmul.f32	s12, s12, s4
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801faac:	bf58      	it	pl
 801faae:	eef0 6a63 	vmovpl.f32	s13, s7
 801fab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	const float ic_filter = -0.5 * i_alpha_filter - SQRT3_BY_2 * i_beta_filter;
 801fab6:	eed7 7a24 	vfnms.f32	s15, s14, s9
	float mod_alpha = c * state_m->mod_d - s * state_m->mod_q;
 801faba:	eee2 5a85 	vfma.f32	s11, s5, s10
	float mod_beta  = c * state_m->mod_q + s * state_m->mod_d;
 801fabe:	eea5 6a03 	vfma.f32	s12, s10, s6
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801fac2:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 801fa78 <mcpwm_foc_adc_int_handler+0xa48>
 801fac6:	f100 826c 	bmi.w	801ffa2 <mcpwm_foc_adc_int_handler+0xf72>
 801faca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801face:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fad2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801fad6:	f100 82c5 	bmi.w	8020064 <mcpwm_foc_adc_int_handler+0x1034>
	const float mod_beta_filter_sgn = ONE_BY_SQRT3 * SIGN(ib_filter) - ONE_BY_SQRT3 * SIGN(ic_filter);
 801fada:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801fade:	ed5f 4a19 	vldr	s9, [pc, #-100]	; 801fa7c <mcpwm_foc_adc_int_handler+0xa4c>
 801fae2:	ed1f 5a19 	vldr	s10, [pc, #-100]	; 801fa80 <mcpwm_foc_adc_int_handler+0xa50>
 801fae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801faea:	ee76 6ac7 	vsub.f32	s13, s13, s14
	const float mod_beta_filter_sgn = ONE_BY_SQRT3 * SIGN(ib_filter) - ONE_BY_SQRT3 * SIGN(ic_filter);
 801faee:	bf58      	it	pl
 801faf0:	eef0 4a45 	vmovpl.f32	s9, s10
 801faf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801faf8:	ed1f 5a20 	vldr	s10, [pc, #-128]	; 801fa7c <mcpwm_foc_adc_int_handler+0xa4c>
 801fafc:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 801fa80 <mcpwm_foc_adc_int_handler+0xa50>
 801fb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb04:	bf58      	it	pl
 801fb06:	eeb0 5a67 	vmovpl.f32	s10, s15
	const float mod_comp_fact = m_conf->foc_dt_us * 1e-6 * m_conf->foc_f_sw;
 801fb0a:	682b      	ldr	r3, [r5, #0]
 801fb0c:	ed1f 3a23 	vldr	s6, [pc, #-140]	; 801fa84 <mcpwm_foc_adc_int_handler+0xa54>
 801fb10:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801fb14:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
	state_m->v_alpha = (mod_alpha - mod_alpha_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb18:	ed1f 4a25 	vldr	s8, [pc, #-148]	; 801fa88 <mcpwm_foc_adc_int_handler+0xa58>
 801fb1c:	edd4 3a0a 	vldr	s7, [r4, #40]	; 0x28
	top = TIM1->ARR;
 801fb20:	4bc3      	ldr	r3, [pc, #780]	; (801fe30 <mcpwm_foc_adc_int_handler+0xe00>)
	const float mod_comp_fact = m_conf->foc_dt_us * 1e-6 * m_conf->foc_f_sw;
 801fb22:	ee67 7a83 	vmul.f32	s15, s15, s6
	const float mod_beta_filter_sgn = ONE_BY_SQRT3 * SIGN(ib_filter) - ONE_BY_SQRT3 * SIGN(ic_filter);
 801fb26:	ee74 4ac5 	vsub.f32	s9, s9, s10
	const float mod_comp_fact = m_conf->foc_dt_us * 1e-6 * m_conf->foc_f_sw;
 801fb2a:	ee67 7a87 	vmul.f32	s15, s15, s14
	state_m->v_alpha = (mod_alpha - mod_alpha_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb2e:	eeb0 7a65 	vmov.f32	s14, s11
 801fb32:	eea7 7ae6 	vfms.f32	s14, s15, s13
	if (beta >= 0.0f) {
 801fb36:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
	state_m->v_alpha = (mod_alpha - mod_alpha_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb3a:	eef0 6a47 	vmov.f32	s13, s14
 801fb3e:	ee66 6a84 	vmul.f32	s13, s13, s8
	state_m->v_beta = (mod_beta - mod_beta_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb42:	eeb0 7a46 	vmov.f32	s14, s12
 801fb46:	eea4 7ae7 	vfms.f32	s14, s9, s15
	state_m->v_alpha = (mod_alpha - mod_alpha_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb4a:	ee66 6aa3 	vmul.f32	s13, s13, s7
	state_m->v_beta = (mod_beta - mod_beta_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb4e:	ee27 7a04 	vmul.f32	s14, s14, s8
	state_m->v_alpha = (mod_alpha - mod_alpha_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb52:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
	state_m->v_beta = (mod_beta - mod_beta_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb56:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 801fb5a:	ee27 7a26 	vmul.f32	s14, s14, s13
	if (beta >= 0.0f) {
 801fb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	state_m->v_beta = (mod_beta - mod_beta_comp) * (2.0 / 3.0) * state_m->v_bus;
 801fb62:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
	svm(-mod_alpha, -mod_beta, top, &duty1, &duty2, &duty3, (uint32_t*)&state_m->svm_sector);
 801fb66:	eeb1 5a65 	vneg.f32	s10, s11
 801fb6a:	eef1 7a46 	vneg.f32	s15, s12
	top = TIM1->ARR;
 801fb6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if (alpha >= 0.0f) {
 801fb70:	eef5 5ac0 	vcmpe.f32	s11, #0.0
	if (beta >= 0.0f) {
 801fb74:	f200 81e9 	bhi.w	801ff4a <mcpwm_foc_adc_int_handler+0xf1a>
		if (alpha >= 0.0f) {
 801fb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if (ONE_BY_SQRT3 * beta > alpha) {
 801fb7c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 801fe34 <mcpwm_foc_adc_int_handler+0xe04>
		if (alpha >= 0.0f) {
 801fb80:	f200 8130 	bhi.w	801fde4 <mcpwm_foc_adc_int_handler+0xdb4>
			if (ONE_BY_SQRT3 * beta > alpha) {
 801fb84:	ee27 7a87 	vmul.f32	s14, s15, s14
 801fb88:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801fb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb90:	f100 8132 	bmi.w	801fdf8 <mcpwm_foc_adc_int_handler+0xdc8>
		uint32_t t1 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fb94:	ee06 1a90 	vmov	s13, r1
		uint32_t t2 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fb98:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 801fe38 <mcpwm_foc_adc_int_handler+0xe08>
		uint32_t t1 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fb9c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801fba0:	ee35 7a47 	vsub.f32	s14, s10, s14
		uint32_t t2 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fba4:	ee67 7a86 	vmul.f32	s15, s15, s12
		uint32_t t1 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fba8:	ee27 7a26 	vmul.f32	s14, s14, s13
		uint32_t t2 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fbac:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t t1 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fbb0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		uint32_t t2 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fbb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t t1 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fbb8:	ee17 3a10 	vmov	r3, s14
		uint32_t t2 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fbbc:	ee17 0a90 	vmov	r0, s15
		tA = (PWMHalfPeriod - t1 - t2) / 2;
 801fbc0:	1aca      	subs	r2, r1, r3
 801fbc2:	1a12      	subs	r2, r2, r0
 801fbc4:	0852      	lsrs	r2, r2, #1
		tB = tA + t1;
 801fbc6:	4413      	add	r3, r2
		tC = tB + t2;
 801fbc8:	4418      	add	r0, r3
				sector = 1;
 801fbca:	f04f 0c01 	mov.w	ip, #1
	TIMER_UPDATE_DUTY(duty1, duty2, duty3);
 801fbce:	4998      	ldr	r1, [pc, #608]	; (801fe30 <mcpwm_foc_adc_int_handler+0xe00>)
 801fbd0:	f8d1 e000 	ldr.w	lr, [r1]
	*svm_sector = sector;
 801fbd4:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
	TIMER_UPDATE_DUTY(duty1, duty2, duty3);
 801fbd8:	f04e 0e02 	orr.w	lr, lr, #2
 801fbdc:	f8c1 e000 	str.w	lr, [r1]
 801fbe0:	634a      	str	r2, [r1, #52]	; 0x34
 801fbe2:	6388      	str	r0, [r1, #56]	; 0x38
 801fbe4:	63cb      	str	r3, [r1, #60]	; 0x3c
 801fbe6:	680b      	ldr	r3, [r1, #0]
 801fbe8:	f023 0302 	bic.w	r3, r3, #2
 801fbec:	600b      	str	r3, [r1, #0]
	if (!m_output_on) {
 801fbee:	4b93      	ldr	r3, [pc, #588]	; (801fe3c <mcpwm_foc_adc_int_handler+0xe0c>)
 801fbf0:	781b      	ldrb	r3, [r3, #0]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	f47f abb4 	bne.w	801f360 <mcpwm_foc_adc_int_handler+0x330>
		start_pwm_hw();
 801fbf8:	f7fd f8a2 	bl	801cd40 <start_pwm_hw>
 801fbfc:	f7ff bbb0 	b.w	801f360 <mcpwm_foc_adc_int_handler+0x330>
			m_phase_now_observer = correct_hall(m_phase_now_observer, m_pll_speed, dt);
 801fc00:	ed99 0a00 	vldr	s0, [r9]
 801fc04:	edd6 0a00 	vldr	s1, [r6]
 801fc08:	eeb0 1a68 	vmov.f32	s2, s17
 801fc0c:	f7fd f948 	bl	801cea0 <correct_hall>
 801fc10:	ed89 0a00 	vstr	s0, [r9]
			m_motor_state.phase = m_phase_now_observer;
 801fc14:	f8d9 3000 	ldr.w	r3, [r9]
 801fc18:	6123      	str	r3, [r4, #16]
 801fc1a:	f10d 0910 	add.w	r9, sp, #16
 801fc1e:	f10d 0a14 	add.w	sl, sp, #20
			break;
 801fc22:	f7ff bb9d 	b.w	801f360 <mcpwm_foc_adc_int_handler+0x330>
			phase_tmp = 360.0 - phase_tmp;
 801fc26:	ed9f 7a86 	vldr	s14, [pc, #536]	; 801fe40 <mcpwm_foc_adc_int_handler+0xe10>
 801fc2a:	ee37 7a40 	vsub.f32	s14, s14, s0
 801fc2e:	e4f6      	b.n	801f61e <mcpwm_foc_adc_int_handler+0x5ee>
			m_samples.avg_current_tot += -((float)curr0 * FAC_CURRENT);
 801fc30:	ed95 7a01 	vldr	s14, [r5, #4]
 801fc34:	eddf 7a83 	vldr	s15, [pc, #524]	; 801fe44 <mcpwm_foc_adc_int_handler+0xe14>
			m_samples.avg_voltage_tot += GET_INPUT_VOLTAGE();
 801fc38:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 801fe74 <mcpwm_foc_adc_int_handler+0xe44>
 801fc3c:	eddf 6a8e 	vldr	s13, [pc, #568]	; 801fe78 <mcpwm_foc_adc_int_handler+0xe48>
			m_samples.avg_current_tot += -((float)curr0 * FAC_CURRENT);
 801fc40:	ee05 0a90 	vmov	s11, r0
 801fc44:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801fc48:	eea5 7ae7 	vfms.f32	s14, s11, s15
 801fc4c:	ed85 7a01 	vstr	s14, [r5, #4]
			m_samples.avg_voltage_tot += GET_INPUT_VOLTAGE();
 801fc50:	8a31      	ldrh	r1, [r6, #16]
 801fc52:	ed95 7a02 	vldr	s14, [r5, #8]
 801fc56:	b289      	uxth	r1, r1
 801fc58:	ee07 1a90 	vmov	s15, r1
 801fc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fc60:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fc64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801fc68:	ed85 7a02 	vstr	s14, [r5, #8]
			m_samples.sample_num++;
 801fc6c:	6829      	ldr	r1, [r5, #0]
 801fc6e:	3101      	adds	r1, #1
 801fc70:	6029      	str	r1, [r5, #0]
			TIMER_UPDATE_DUTY(0, 0, 0);
 801fc72:	6811      	ldr	r1, [r2, #0]
 801fc74:	f041 0102 	orr.w	r1, r1, #2
 801fc78:	6011      	str	r1, [r2, #0]
 801fc7a:	6354      	str	r4, [r2, #52]	; 0x34
 801fc7c:	6394      	str	r4, [r2, #56]	; 0x38
 801fc7e:	63d4      	str	r4, [r2, #60]	; 0x3c
 801fc80:	6811      	ldr	r1, [r2, #0]
 801fc82:	f021 0102 	bic.w	r1, r1, #2
 801fc86:	6011      	str	r1, [r2, #0]
 801fc88:	e497      	b.n	801f5ba <mcpwm_foc_adc_int_handler+0x58a>
				&& fabsf(duty_filtered) < 0.03) {
 801fc8a:	ed9a 7a00 	vldr	s14, [sl]
 801fc8e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801fe48 <mcpwm_foc_adc_int_handler+0xe18>
 801fc92:	eeb0 7ac7 	vabs.f32	s14, s14
 801fc96:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc9e:	f57f ad34 	bpl.w	801f70a <mcpwm_foc_adc_int_handler+0x6da>
		if (m_control_mode == CONTROL_MODE_SPEED &&
 801fca2:	f899 3000 	ldrb.w	r3, [r9]
 801fca6:	2b01      	cmp	r3, #1
 801fca8:	f000 8194 	beq.w	801ffd4 <mcpwm_foc_adc_int_handler+0xfa4>
 801fcac:	eddf 6a67 	vldr	s13, [pc, #412]	; 801fe4c <mcpwm_foc_adc_int_handler+0xe1c>
 801fcb0:	682a      	ldr	r2, [r5, #0]
			duty_set = 0.0;
 801fcb2:	eef0 7a66 	vmov.f32	s15, s13
			if (fabsf(duty_set) < (duty_abs - 0.05) ||
 801fcb6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801fe50 <mcpwm_foc_adc_int_handler+0xe20>
 801fcba:	ee39 7ac7 	vsub.f32	s14, s19, s14
 801fcbe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801fcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcc6:	f300 80d9 	bgt.w	801fe7c <mcpwm_foc_adc_int_handler+0xe4c>
					(SIGN(m_motor_state.vq) * m_motor_state.iq) < m_conf->lo_current_min) {
 801fcca:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 801fcce:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 801fcd2:	edd2 6a1a 	vldr	s13, [r2, #104]	; 0x68
 801fcd6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801fcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcde:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801fce2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801fce6:	bf58      	it	pl
 801fce8:	eeb0 7a65 	vmovpl.f32	s14, s11
 801fcec:	ee27 7a06 	vmul.f32	s14, s14, s12
			if (fabsf(duty_set) < (duty_abs - 0.05) ||
 801fcf0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801fcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcf8:	f100 80c0 	bmi.w	801fe7c <mcpwm_foc_adc_int_handler+0xe4c>
				duty_i_term = 0.0;
 801fcfc:	4b55      	ldr	r3, [pc, #340]	; (801fe54 <mcpwm_foc_adc_int_handler+0xe24>)
				m_motor_state.max_duty = duty_set;
 801fcfe:	edc4 7a02 	vstr	s15, [r4, #8]
				if (duty_set > 0.0) {
 801fd02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
				duty_i_term = 0.0;
 801fd06:	2100      	movs	r1, #0
				if (duty_set > 0.0) {
 801fd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				duty_i_term = 0.0;
 801fd0c:	6019      	str	r1, [r3, #0]
				if (duty_set > 0.0) {
 801fd0e:	f340 8313 	ble.w	8020338 <mcpwm_foc_adc_int_handler+0x1308>
					iq_set_tmp = m_conf->lo_current_max;
 801fd12:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801fd14:	9304      	str	r3, [sp, #16]
 801fd16:	e505      	b.n	801f724 <mcpwm_foc_adc_int_handler+0x6f4>
				fabsf(m_speed_pid_set_rpm) < m_conf->s_pid_min_erpm) {
 801fd18:	494f      	ldr	r1, [pc, #316]	; (801fe58 <mcpwm_foc_adc_int_handler+0xe28>)
 801fd1a:	682a      	ldr	r2, [r5, #0]
 801fd1c:	ed91 7a00 	vldr	s14, [r1]
 801fd20:	edd2 6a49 	vldr	s13, [r2, #292]	; 0x124
 801fd24:	eeb0 7ac7 	vabs.f32	s14, s14
		if (m_control_mode == CONTROL_MODE_SPEED &&
 801fd28:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd30:	f57f acf0 	bpl.w	801f714 <mcpwm_foc_adc_int_handler+0x6e4>
 801fd34:	eddf 7a45 	vldr	s15, [pc, #276]	; 801fe4c <mcpwm_foc_adc_int_handler+0xe1c>
			duty_set = 0.0;
 801fd38:	eef0 6a67 	vmov.f32	s13, s15
 801fd3c:	e7bb      	b.n	801fcb6 <mcpwm_foc_adc_int_handler+0xc86>
			TIMER_UPDATE_DUTY(duty_cnt,	0, duty_cnt);
 801fd3e:	6811      	ldr	r1, [r2, #0]
 801fd40:	f041 0102 	orr.w	r1, r1, #2
 801fd44:	6011      	str	r1, [r2, #0]
 801fd46:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
			TIMER_UPDATE_DUTY(0, 0, duty_cnt);
 801fd4a:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
 801fd4e:	63d4      	str	r4, [r2, #60]	; 0x3c
 801fd50:	6811      	ldr	r1, [r2, #0]
 801fd52:	f021 0102 	bic.w	r1, r1, #2
 801fd56:	6011      	str	r1, [r2, #0]
 801fd58:	e42f      	b.n	801f5ba <mcpwm_foc_adc_int_handler+0x58a>
		run_pid_control_pos(m_pos_pid_now, m_pos_pid_set, dt);
 801fd5a:	4a40      	ldr	r2, [pc, #256]	; (801fe5c <mcpwm_foc_adc_int_handler+0xe2c>)
	if (m_control_mode != CONTROL_MODE_POS) {
 801fd5c:	4b40      	ldr	r3, [pc, #256]	; (801fe60 <mcpwm_foc_adc_int_handler+0xe30>)
		run_pid_control_pos(m_pos_pid_now, m_pos_pid_set, dt);
 801fd5e:	edd4 0a00 	vldr	s1, [r4]
 801fd62:	ed92 0a00 	vldr	s0, [r2]
	if (m_control_mode != CONTROL_MODE_POS) {
 801fd66:	781b      	ldrb	r3, [r3, #0]
 801fd68:	2b04      	cmp	r3, #4
 801fd6a:	f000 81be 	beq.w	80200ea <mcpwm_foc_adc_int_handler+0x10ba>
		i_term = 0;
 801fd6e:	493d      	ldr	r1, [pc, #244]	; (801fe64 <mcpwm_foc_adc_int_handler+0xe34>)
		prev_error = 0;
 801fd70:	4a3d      	ldr	r2, [pc, #244]	; (801fe68 <mcpwm_foc_adc_int_handler+0xe38>)
		i_term = 0;
 801fd72:	2300      	movs	r3, #0
 801fd74:	600b      	str	r3, [r1, #0]
		prev_error = 0;
 801fd76:	6013      	str	r3, [r2, #0]
 801fd78:	f7ff bbf1 	b.w	801f55e <mcpwm_foc_adc_int_handler+0x52e>
			m_motor_state.phase = correct_encoder(m_phase_now_observer, m_phase_now_encoder, m_pll_speed);
 801fd7c:	4b3b      	ldr	r3, [pc, #236]	; (801fe6c <mcpwm_foc_adc_int_handler+0xe3c>)
 801fd7e:	4e3c      	ldr	r6, [pc, #240]	; (801fe70 <mcpwm_foc_adc_int_handler+0xe40>)
 801fd80:	ed99 0a00 	vldr	s0, [r9]
 801fd84:	edd3 0a00 	vldr	s1, [r3]
 801fd88:	ed96 1a00 	vldr	s2, [r6]
 801fd8c:	f7fc ffa0 	bl	801ccd0 <correct_encoder>
 801fd90:	f10d 0910 	add.w	r9, sp, #16
 801fd94:	ed84 0a04 	vstr	s0, [r4, #16]
 801fd98:	f10d 0a14 	add.w	sl, sp, #20
			break;
 801fd9c:	f7ff bae0 	b.w	801f360 <mcpwm_foc_adc_int_handler+0x330>
			m_motor_state.phase = m_phase_now_observer;
 801fda0:	f8d9 3000 	ldr.w	r3, [r9]
 801fda4:	4e32      	ldr	r6, [pc, #200]	; (801fe70 <mcpwm_foc_adc_int_handler+0xe40>)
 801fda6:	6123      	str	r3, [r4, #16]
 801fda8:	f7ff bad6 	b.w	801f358 <mcpwm_foc_adc_int_handler+0x328>
			m_samples.avg_current_tot += -((float)curr1 * FAC_CURRENT);
 801fdac:	ed95 7a01 	vldr	s14, [r5, #4]
 801fdb0:	eddf 7a24 	vldr	s15, [pc, #144]	; 801fe44 <mcpwm_foc_adc_int_handler+0xe14>
			m_samples.avg_voltage_tot += GET_INPUT_VOLTAGE();
 801fdb4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801fe74 <mcpwm_foc_adc_int_handler+0xe44>
 801fdb8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801fe78 <mcpwm_foc_adc_int_handler+0xe48>
			m_samples.avg_current_tot += -((float)curr1 * FAC_CURRENT);
 801fdbc:	ee05 1a90 	vmov	s11, r1
 801fdc0:	e740      	b.n	801fc44 <mcpwm_foc_adc_int_handler+0xc14>
			TIMER_UPDATE_DUTY(0, duty_cnt, duty_cnt);
 801fdc2:	6811      	ldr	r1, [r2, #0]
 801fdc4:	f041 0102 	orr.w	r1, r1, #2
 801fdc8:	6011      	str	r1, [r2, #0]
 801fdca:	6354      	str	r4, [r2, #52]	; 0x34
 801fdcc:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
 801fdd0:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
 801fdd4:	6811      	ldr	r1, [r2, #0]
 801fdd6:	f021 0102 	bic.w	r1, r1, #2
 801fdda:	6011      	str	r1, [r2, #0]
 801fddc:	f7ff bbed 	b.w	801f5ba <mcpwm_foc_adc_int_handler+0x58a>
 801fde0:	4e23      	ldr	r6, [pc, #140]	; (801fe70 <mcpwm_foc_adc_int_handler+0xe40>)
 801fde2:	e4c7      	b.n	801f774 <mcpwm_foc_adc_int_handler+0x744>
			if (-ONE_BY_SQRT3 * beta > alpha) {
 801fde4:	ee26 6a07 	vmul.f32	s12, s12, s14
 801fde8:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdf0:	f100 813f 	bmi.w	8020072 <mcpwm_foc_adc_int_handler+0x1042>
 801fdf4:	ee27 7a87 	vmul.f32	s14, s15, s14
		uint32_t t2 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fdf8:	ee07 1a90 	vmov	s15, r1
 801fdfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801fe00:	ee77 7a65 	vsub.f32	s15, s14, s11
		uint32_t t3 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe04:	ee37 7a25 	vadd.f32	s14, s14, s11
		uint32_t t2 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe08:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t t3 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe0c:	ee27 7a26 	vmul.f32	s14, s14, s13
		uint32_t t2 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		tC = tA + t2;
 801fe14:	f04f 0c02 	mov.w	ip, #2
		uint32_t t2 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe18:	ee17 0a90 	vmov	r0, s15
		uint32_t t3 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe1c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		tB = (PWMHalfPeriod - t2 - t3) / 2;
 801fe20:	1a0b      	subs	r3, r1, r0
		uint32_t t3 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801fe22:	ee17 2a90 	vmov	r2, s15
		tB = (PWMHalfPeriod - t2 - t3) / 2;
 801fe26:	1a9b      	subs	r3, r3, r2
 801fe28:	085b      	lsrs	r3, r3, #1
		tA = tB + t3;
 801fe2a:	441a      	add	r2, r3
		tC = tA + t2;
 801fe2c:	4410      	add	r0, r2
 801fe2e:	e6ce      	b.n	801fbce <mcpwm_foc_adc_int_handler+0xb9e>
 801fe30:	40010000 	.word	0x40010000
 801fe34:	3f13cd3a 	.word	0x3f13cd3a
 801fe38:	3f93cd3a 	.word	0x3f93cd3a
 801fe3c:	2000ce40 	.word	0x2000ce40
 801fe40:	43b40000 	.word	0x43b40000
 801fe44:	3da50a50 	.word	0x3da50a50
 801fe48:	3cf5c28f 	.word	0x3cf5c28f
 801fe4c:	00000000 	.word	0x00000000
 801fe50:	3d4ccccd 	.word	0x3d4ccccd
 801fe54:	2000cd8c 	.word	0x2000cd8c
 801fe58:	2000ce80 	.word	0x2000ce80
 801fe5c:	2000ce68 	.word	0x2000ce68
 801fe60:	2000cda4 	.word	0x2000cda4
 801fe64:	2000cd90 	.word	0x2000cd90
 801fe68:	2000cea0 	.word	0x2000cea0
 801fe6c:	2000ce44 	.word	0x2000ce44
 801fe70:	2000ce60 	.word	0x2000ce60
 801fe74:	3a534067 	.word	0x3a534067
 801fe78:	4195d174 	.word	0x4195d174
				float scale = 1.0 / GET_INPUT_VOLTAGE();
 801fe7c:	8a33      	ldrh	r3, [r6, #16]
 801fe7e:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 801fe74 <mcpwm_foc_adc_int_handler+0xe44>
 801fe82:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 801fe78 <mcpwm_foc_adc_int_handler+0xe48>
				float error = duty_set - m_motor_state.duty_now;
 801fe86:	edd4 5a03 	vldr	s11, [r4, #12]
				float p_term = error * m_conf->foc_duty_dowmramp_kp * scale;
 801fe8a:	ed92 8a37 	vldr	s16, [r2, #220]	; 0xdc
				duty_i_term += error * (m_conf->foc_duty_dowmramp_ki * dt) * scale;
 801fe8e:	edd2 6a38 	vldr	s13, [r2, #224]	; 0xe0
 801fe92:	4ed7      	ldr	r6, [pc, #860]	; (80201f0 <mcpwm_foc_adc_int_handler+0x11c0>)
				float scale = 1.0 / GET_INPUT_VOLTAGE();
 801fe94:	b29b      	uxth	r3, r3
 801fe96:	ee07 3a10 	vmov	s14, r3
 801fe9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801fe9e:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801fea2:	ee27 7a05 	vmul.f32	s14, s14, s10
				float error = duty_set - m_motor_state.duty_now;
 801fea6:	ee77 7ae5 	vsub.f32	s15, s15, s11
				float scale = 1.0 / GET_INPUT_VOLTAGE();
 801feaa:	ee27 7a06 	vmul.f32	s14, s14, s12
				duty_i_term += error * (m_conf->foc_duty_dowmramp_ki * dt) * scale;
 801feae:	ee68 6aa6 	vmul.f32	s13, s17, s13
				float scale = 1.0 / GET_INPUT_VOLTAGE();
 801feb2:	eeca aa07 	vdiv.f32	s21, s20, s14
				utils_truncate_number(&duty_i_term, -1.0, 1.0);
 801feb6:	4630      	mov	r0, r6
				duty_i_term += error * (m_conf->foc_duty_dowmramp_ki * dt) * scale;
 801feb8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801febc:	edd6 6a00 	vldr	s13, [r6]
 801fec0:	eeea 6a87 	vfma.f32	s13, s21, s14
				utils_truncate_number(&duty_i_term, -1.0, 1.0);
 801fec4:	eef0 0a4a 	vmov.f32	s1, s20
 801fec8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
				float p_term = error * m_conf->foc_duty_dowmramp_kp * scale;
 801fecc:	ee27 8a88 	vmul.f32	s16, s15, s16
				duty_i_term += error * (m_conf->foc_duty_dowmramp_ki * dt) * scale;
 801fed0:	edc6 6a00 	vstr	s13, [r6]
				utils_truncate_number(&duty_i_term, -1.0, 1.0);
 801fed4:	f7f5 fe14 	bl	8015b00 <utils_truncate_number>
				float output = p_term + duty_i_term;
 801fed8:	edd6 7a00 	vldr	s15, [r6]
 801fedc:	eeea 7a88 	vfma.f32	s15, s21, s16
				utils_truncate_number(&output, -1.0, 1.0);
 801fee0:	4638      	mov	r0, r7
 801fee2:	eef0 0a4a 	vmov.f32	s1, s20
 801fee6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
				float output = p_term + duty_i_term;
 801feea:	edcd 7a07 	vstr	s15, [sp, #28]
				utils_truncate_number(&output, -1.0, 1.0);
 801feee:	f7f5 fe07 	bl	8015b00 <utils_truncate_number>
				iq_set_tmp = output * m_conf->lo_current_max;
 801fef2:	682b      	ldr	r3, [r5, #0]
 801fef4:	eddd 7a07 	vldr	s15, [sp, #28]
 801fef8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 801fefc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ff00:	edcd 7a04 	vstr	s15, [sp, #16]
					(SIGN(m_motor_state.vq) * m_motor_state.iq) < m_conf->lo_current_min) {
 801ff04:	e40e      	b.n	801f724 <mcpwm_foc_adc_int_handler+0x6f4>
			observer_update(m_motor_state.v_alpha, m_motor_state.v_beta,
 801ff06:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801ff0a:	4aba      	ldr	r2, [pc, #744]	; (80201f4 <mcpwm_foc_adc_int_handler+0x11c4>)
 801ff0c:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 801ff10:	49b9      	ldr	r1, [pc, #740]	; (80201f8 <mcpwm_foc_adc_int_handler+0x11c8>)
 801ff12:	ed94 1a05 	vldr	s2, [r4, #20]
 801ff16:	48b9      	ldr	r0, [pc, #740]	; (80201fc <mcpwm_foc_adc_int_handler+0x11cc>)
 801ff18:	edd4 1a06 	vldr	s3, [r4, #24]
 801ff1c:	eeb0 2a68 	vmov.f32	s4, s17
 801ff20:	f7fe ff8e 	bl	801ee40 <observer_update>
 801ff24:	e405      	b.n	801f732 <mcpwm_foc_adc_int_handler+0x702>
			utils_truncate_number(&iq_set_tmp, m_conf->lo_in_current_min / mod_q, m_conf->lo_in_current_max / mod_q);
 801ff26:	682b      	ldr	r3, [r5, #0]
 801ff28:	ed93 0a1c 	vldr	s0, [r3, #112]	; 0x70
 801ff2c:	edd3 0a1b 	vldr	s1, [r3, #108]	; 0x6c
			utils_truncate_number(&iq_set_tmp, m_conf->lo_in_current_max / mod_q, m_conf->lo_in_current_min / mod_q);
 801ff30:	f10d 0910 	add.w	r9, sp, #16
 801ff34:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801ff38:	4648      	mov	r0, r9
 801ff3a:	eec0 0a88 	vdiv.f32	s1, s1, s16
 801ff3e:	f7f5 fddf 	bl	8015b00 <utils_truncate_number>
 801ff42:	e43b      	b.n	801f7bc <mcpwm_foc_adc_int_handler+0x78c>
			m_motor_state.phase = 0.0;
 801ff44:	2300      	movs	r3, #0
 801ff46:	6123      	str	r3, [r4, #16]
 801ff48:	e41e      	b.n	801f788 <mcpwm_foc_adc_int_handler+0x758>
		if (alpha >= 0.0f) {
 801ff4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff4e:	f200 81c8 	bhi.w	80202e2 <mcpwm_foc_adc_int_handler+0x12b2>
			if (-ONE_BY_SQRT3 * beta > alpha) {
 801ff52:	eddf 6aab 	vldr	s13, [pc, #684]	; 8020200 <mcpwm_foc_adc_int_handler+0x11d0>
 801ff56:	ee26 7a26 	vmul.f32	s14, s12, s13
 801ff5a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801ff5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff62:	f140 80a4 	bpl.w	80200ae <mcpwm_foc_adc_int_handler+0x107e>
 801ff66:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t t5 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff6a:	ee06 1a90 	vmov	s13, r1
 801ff6e:	ee35 7ae7 	vsub.f32	s14, s11, s15
 801ff72:	eef8 6a66 	vcvt.f32.u32	s13, s13
		uint32_t t6 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff76:	ee75 7a67 	vsub.f32	s15, s10, s15
		uint32_t t5 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff7a:	ee27 7a26 	vmul.f32	s14, s14, s13
		uint32_t t6 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t t5 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff82:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		uint32_t t6 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t t5 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff8a:	ee17 2a10 	vmov	r2, s14
		uint32_t t6 = (alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 801ff8e:	ee17 3a90 	vmov	r3, s15
		tC = (PWMHalfPeriod - t5 - t6) / 2;
 801ff92:	1a88      	subs	r0, r1, r2
 801ff94:	1ac0      	subs	r0, r0, r3
 801ff96:	0840      	lsrs	r0, r0, #1
		tA = tC + t5;
 801ff98:	4402      	add	r2, r0
		tB = tA + t6;
 801ff9a:	4413      	add	r3, r2
 801ff9c:	f04f 0c05 	mov.w	ip, #5
 801ffa0:	e615      	b.n	801fbce <mcpwm_foc_adc_int_handler+0xb9e>
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 801ffa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ffa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffaa:	ee76 6a87 	vadd.f32	s13, s13, s14
 801ffae:	f100 8193 	bmi.w	80202d8 <mcpwm_foc_adc_int_handler+0x12a8>
 801ffb2:	ee76 6ac7 	vsub.f32	s13, s13, s14
	const float mod_beta_filter_sgn = ONE_BY_SQRT3 * SIGN(ib_filter) - ONE_BY_SQRT3 * SIGN(ic_filter);
 801ffb6:	eddf 4a93 	vldr	s9, [pc, #588]	; 8020204 <mcpwm_foc_adc_int_handler+0x11d4>
 801ffba:	e59b      	b.n	801faf4 <mcpwm_foc_adc_int_handler+0xac4>
			utils_truncate_number(&iq_set_tmp, -m_conf->lo_current_max, -m_conf->lo_current_min);
 801ffbc:	ed93 0a19 	vldr	s0, [r3, #100]	; 0x64
 801ffc0:	edd3 0a1a 	vldr	s1, [r3, #104]	; 0x68
 801ffc4:	eeb1 0a40 	vneg.f32	s0, s0
 801ffc8:	eef1 0a60 	vneg.f32	s1, s1
 801ffcc:	4648      	mov	r0, r9
 801ffce:	f7f5 fd97 	bl	8015b00 <utils_truncate_number>
 801ffd2:	e401      	b.n	801f7d8 <mcpwm_foc_adc_int_handler+0x7a8>
				fabsf(m_speed_pid_set_rpm) < m_conf->s_pid_min_erpm) {
 801ffd4:	4b8c      	ldr	r3, [pc, #560]	; (8020208 <mcpwm_foc_adc_int_handler+0x11d8>)
 801ffd6:	682a      	ldr	r2, [r5, #0]
 801ffd8:	edd3 7a00 	vldr	s15, [r3]
 801ffdc:	ed92 7a49 	vldr	s14, [r2, #292]	; 0x124
 801ffe0:	eef0 7ae7 	vabs.f32	s15, s15
		if (m_control_mode == CONTROL_MODE_SPEED &&
 801ffe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ffe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffec:	f100 81df 	bmi.w	80203ae <mcpwm_foc_adc_int_handler+0x137e>
			duty_set = 0.0;
 801fff0:	eddf 7a86 	vldr	s15, [pc, #536]	; 802020c <mcpwm_foc_adc_int_handler+0x11dc>
 801fff4:	682a      	ldr	r2, [r5, #0]
 801fff6:	eef0 6ae7 	vabs.f32	s13, s15
 801fffa:	e65c      	b.n	801fcb6 <mcpwm_foc_adc_int_handler+0xc86>
			if (m_phase_observer_override) {
 801fffc:	4b84      	ldr	r3, [pc, #528]	; (8020210 <mcpwm_foc_adc_int_handler+0x11e0>)
 801fffe:	781b      	ldrb	r3, [r3, #0]
 8020000:	2b00      	cmp	r3, #0
 8020002:	f000 80f0 	beq.w	80201e6 <mcpwm_foc_adc_int_handler+0x11b6>
				m_motor_state.phase = m_phase_now_observer_override;
 8020006:	4b83      	ldr	r3, [pc, #524]	; (8020214 <mcpwm_foc_adc_int_handler+0x11e4>)
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	6123      	str	r3, [r4, #16]
			if (!m_phase_override) {
 802000c:	f89a 3000 	ldrb.w	r3, [sl]
 8020010:	2b00      	cmp	r3, #0
 8020012:	f47f aee5 	bne.w	801fde0 <mcpwm_foc_adc_int_handler+0xdb0>
				if (duty_abs < m_conf->foc_sl_d_current_duty) {
 8020016:	edd2 7a3c 	vldr	s15, [r2, #240]	; 0xf0
 802001a:	eef4 9ae7 	vcmpe.f32	s19, s15
 802001e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020022:	f100 81ad 	bmi.w	8020380 <mcpwm_foc_adc_int_handler+0x1350>
 8020026:	4e7c      	ldr	r6, [pc, #496]	; (8020218 <mcpwm_foc_adc_int_handler+0x11e8>)
 8020028:	f7ff bba2 	b.w	801f770 <mcpwm_foc_adc_int_handler+0x740>
			if (encoder_index_found()) {
 802002c:	f7fa ff40 	bl	801aeb0 <encoder_index_found>
 8020030:	2800      	cmp	r0, #0
 8020032:	f040 8143 	bne.w	80202bc <mcpwm_foc_adc_int_handler+0x128c>
				m_motor_state.phase = m_phase_now_encoder_no_index;
 8020036:	4b79      	ldr	r3, [pc, #484]	; (802021c <mcpwm_foc_adc_int_handler+0x11ec>)
 8020038:	4e77      	ldr	r6, [pc, #476]	; (8020218 <mcpwm_foc_adc_int_handler+0x11e8>)
 802003a:	681b      	ldr	r3, [r3, #0]
 802003c:	6123      	str	r3, [r4, #16]
			if (!m_phase_override) {
 802003e:	f89a 3000 	ldrb.w	r3, [sl]
 8020042:	2b00      	cmp	r3, #0
 8020044:	f47f ab96 	bne.w	801f774 <mcpwm_foc_adc_int_handler+0x744>
 8020048:	f7ff bb92 	b.w	801f770 <mcpwm_foc_adc_int_handler+0x740>
			TIMER_UPDATE_DUTY(0, 0, duty_cnt);
 802004c:	6811      	ldr	r1, [r2, #0]
 802004e:	f041 0102 	orr.w	r1, r1, #2
 8020052:	6011      	str	r1, [r2, #0]
 8020054:	6354      	str	r4, [r2, #52]	; 0x34
 8020056:	e678      	b.n	801fd4a <mcpwm_foc_adc_int_handler+0xd1a>
			utils_truncate_number(&iq_set_tmp, m_conf->lo_in_current_max / mod_q, m_conf->lo_in_current_min / mod_q);
 8020058:	682b      	ldr	r3, [r5, #0]
 802005a:	ed93 0a1b 	vldr	s0, [r3, #108]	; 0x6c
 802005e:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
 8020062:	e765      	b.n	801ff30 <mcpwm_foc_adc_int_handler+0xf00>
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 8020064:	ee76 6a87 	vadd.f32	s13, s13, s14
	const float mod_beta_filter_sgn = ONE_BY_SQRT3 * SIGN(ib_filter) - ONE_BY_SQRT3 * SIGN(ic_filter);
 8020068:	eddf 4a65 	vldr	s9, [pc, #404]	; 8020200 <mcpwm_foc_adc_int_handler+0x11d0>
 802006c:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8020204 <mcpwm_foc_adc_int_handler+0x11d4>
 8020070:	e54b      	b.n	801fb0a <mcpwm_foc_adc_int_handler+0xada>
		uint32_t t4 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 8020072:	eee7 5ac7 	vfms.f32	s11, s15, s14
				sector = 3;
 8020076:	f04f 0c03 	mov.w	ip, #3
		uint32_t t3 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 802007a:	eddf 6a69 	vldr	s13, [pc, #420]	; 8020220 <mcpwm_foc_adc_int_handler+0x11f0>
 802007e:	ee07 1a10 	vmov	s14, r1
 8020082:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020086:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 802008a:	ee67 7a87 	vmul.f32	s15, s15, s14
		uint32_t t4 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 802008e:	ee25 7a87 	vmul.f32	s14, s11, s14
		uint32_t t3 = (TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 8020092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020096:	ee17 0a90 	vmov	r0, s15
		uint32_t t4 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 802009a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		tB = (PWMHalfPeriod - t3 - t4) / 2;
 802009e:	1a0b      	subs	r3, r1, r0
		uint32_t t4 = (-alpha - ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200a0:	ee17 2a90 	vmov	r2, s15
		tB = (PWMHalfPeriod - t3 - t4) / 2;
 80200a4:	1a9b      	subs	r3, r3, r2
 80200a6:	085b      	lsrs	r3, r3, #1
		tC = tB + t3;
 80200a8:	4418      	add	r0, r3
		tA = tC + t4;
 80200aa:	4402      	add	r2, r0
 80200ac:	e58f      	b.n	801fbce <mcpwm_foc_adc_int_handler+0xb9e>
		uint32_t t1 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200ae:	eea7 5aa6 	vfma.f32	s10, s15, s13
				sector = 6;
 80200b2:	f04f 0c06 	mov.w	ip, #6
		uint32_t t6 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200b6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8020220 <mcpwm_foc_adc_int_handler+0x11f0>
 80200ba:	ee07 1a90 	vmov	s15, r1
 80200be:	ee26 7a07 	vmul.f32	s14, s12, s14
 80200c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80200c6:	ee27 7a27 	vmul.f32	s14, s14, s15
		uint32_t t1 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200ca:	ee65 7a27 	vmul.f32	s15, s10, s15
		uint32_t t6 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		uint32_t t1 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t t6 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200d6:	ee17 3a10 	vmov	r3, s14
		uint32_t t1 = (alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80200da:	ee17 0a90 	vmov	r0, s15
		tA = (PWMHalfPeriod - t6 - t1) / 2;
 80200de:	1aca      	subs	r2, r1, r3
 80200e0:	1a12      	subs	r2, r2, r0
 80200e2:	0852      	lsrs	r2, r2, #1
		tC = tA + t1;
 80200e4:	4410      	add	r0, r2
		tB = tC + t6;
 80200e6:	4403      	add	r3, r0
 80200e8:	e571      	b.n	801fbce <mcpwm_foc_adc_int_handler+0xb9e>
	float error = utils_angle_difference(angle_set, angle_now);
 80200ea:	f7f5 fd81 	bl	8015bf0 <utils_angle_difference>
 80200ee:	eeb0 8a40 	vmov.f32	s16, s0
	if (encoder_is_configured()) {
 80200f2:	f7fa fdf5 	bl	801ace0 <encoder_is_configured>
		if (m_conf->foc_encoder_inverted) {
 80200f6:	682b      	ldr	r3, [r5, #0]
	if (encoder_is_configured()) {
 80200f8:	b120      	cbz	r0, 8020104 <mcpwm_foc_adc_int_handler+0x10d4>
		if (m_conf->foc_encoder_inverted) {
 80200fa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80200fe:	b10a      	cbz	r2, 8020104 <mcpwm_foc_adc_int_handler+0x10d4>
			error = -error;
 8020100:	eeb1 8a48 	vneg.f32	s16, s16
	p_term = error * m_conf->p_pid_kp;
 8020104:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
	dt_int += dt;
 8020108:	4a46      	ldr	r2, [pc, #280]	; (8020224 <mcpwm_foc_adc_int_handler+0x11f4>)
	i_term += error * (m_conf->p_pid_ki * dt);
 802010a:	4c47      	ldr	r4, [pc, #284]	; (8020228 <mcpwm_foc_adc_int_handler+0x11f8>)
	dt_int += dt;
 802010c:	ed92 7a00 	vldr	s14, [r2]
	i_term += error * (m_conf->p_pid_ki * dt);
 8020110:	edd4 6a00 	vldr	s13, [r4]
	if (error == prev_error) {
 8020114:	4e45      	ldr	r6, [pc, #276]	; (802022c <mcpwm_foc_adc_int_handler+0x11fc>)
	p_term = error * m_conf->p_pid_kp;
 8020116:	ee67 7a88 	vmul.f32	s15, s15, s16
	dt_int += dt;
 802011a:	ee38 7a87 	vadd.f32	s14, s17, s14
	p_term = error * m_conf->p_pid_kp;
 802011e:	edcd 7a06 	vstr	s15, [sp, #24]
	i_term += error * (m_conf->p_pid_ki * dt);
 8020122:	ed93 6a4c 	vldr	s12, [r3, #304]	; 0x130
	if (error == prev_error) {
 8020126:	edd6 7a00 	vldr	s15, [r6]
	dt_int += dt;
 802012a:	ed82 7a00 	vstr	s14, [r2]
	i_term += error * (m_conf->p_pid_ki * dt);
 802012e:	ee68 8a86 	vmul.f32	s17, s17, s12
	if (error == prev_error) {
 8020132:	eeb4 8a67 	vcmp.f32	s16, s15
	i_term += error * (m_conf->p_pid_ki * dt);
 8020136:	eee8 6a28 	vfma.f32	s13, s16, s17
	if (error == prev_error) {
 802013a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	i_term += error * (m_conf->p_pid_ki * dt);
 802013e:	edc4 6a00 	vstr	s13, [r4]
	if (error == prev_error) {
 8020142:	f000 80f6 	beq.w	8020332 <mcpwm_foc_adc_int_handler+0x1302>
		d_term = (error - prev_error) * (m_conf->p_pid_kd / dt_int);
 8020146:	edd3 6a4d 	vldr	s13, [r3, #308]	; 0x134
 802014a:	eec6 8a87 	vdiv.f32	s17, s13, s14
		dt_int = 0.0;
 802014e:	2300      	movs	r3, #0
 8020150:	6013      	str	r3, [r2, #0]
		d_term = (error - prev_error) * (m_conf->p_pid_kd / dt_int);
 8020152:	ee78 7a67 	vsub.f32	s15, s16, s15
 8020156:	ee67 8aa8 	vmul.f32	s17, s15, s17
	utils_truncate_number_abs(&p_term, 1.0);
 802015a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802015e:	4658      	mov	r0, fp
 8020160:	f7f5 fcf6 	bl	8015b50 <utils_truncate_number_abs>
	utils_truncate_number_abs(&i_term, 1.0 - fabsf(p_term));
 8020164:	ed9d 0a06 	vldr	s0, [sp, #24]
 8020168:	482f      	ldr	r0, [pc, #188]	; (8020228 <mcpwm_foc_adc_int_handler+0x11f8>)
 802016a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 802016e:	eeb0 0ac0 	vabs.f32	s0, s0
 8020172:	ee39 0a40 	vsub.f32	s0, s18, s0
 8020176:	f7f5 fceb 	bl	8015b50 <utils_truncate_number_abs>
	float output = p_term + i_term + d_term;
 802017a:	ed94 7a00 	vldr	s14, [r4]
 802017e:	eddd 7a06 	vldr	s15, [sp, #24]
	prev_error = error;
 8020182:	ed86 8a00 	vstr	s16, [r6]
	float output = p_term + i_term + d_term;
 8020186:	ee77 7a87 	vadd.f32	s15, s15, s14
	utils_truncate_number(&output, -1.0, 1.0);
 802018a:	eef0 0a49 	vmov.f32	s1, s18
	float output = p_term + i_term + d_term;
 802018e:	ee77 7aa8 	vadd.f32	s15, s15, s17
	utils_truncate_number(&output, -1.0, 1.0);
 8020192:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8020196:	4638      	mov	r0, r7
	float output = p_term + i_term + d_term;
 8020198:	edcd 7a07 	vstr	s15, [sp, #28]
	utils_truncate_number(&output, -1.0, 1.0);
 802019c:	f7f5 fcb0 	bl	8015b00 <utils_truncate_number>
	if (encoder_is_configured()) {
 80201a0:	f7fa fd9e 	bl	801ace0 <encoder_is_configured>
 80201a4:	2800      	cmp	r0, #0
 80201a6:	f040 80cf 	bne.w	8020348 <mcpwm_foc_adc_int_handler+0x1318>
		m_iq_set = output * m_conf->lo_current_max;
 80201aa:	682b      	ldr	r3, [r5, #0]
 80201ac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80201b0:	ed9d 7a07 	vldr	s14, [sp, #28]
 80201b4:	4b1e      	ldr	r3, [pc, #120]	; (8020230 <mcpwm_foc_adc_int_handler+0x1200>)
 80201b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80201ba:	edc3 7a00 	vstr	s15, [r3]
 80201be:	f7ff b9ce 	b.w	801f55e <mcpwm_foc_adc_int_handler+0x52e>
			if (phase_diff > 0.0) {
 80201c2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 802020c <mcpwm_foc_adc_int_handler+0x11dc>
			iq_set_tmp = fabsf(iq_set_tmp);
 80201c6:	eddd 7a04 	vldr	s15, [sp, #16]
			if (phase_diff > 0.0) {
 80201ca:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80201ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			iq_set_tmp = fabsf(iq_set_tmp);
 80201d2:	eef0 7ae7 	vabs.f32	s15, s15
			if (phase_diff > 0.0) {
 80201d6:	f340 80c8 	ble.w	802036a <mcpwm_foc_adc_int_handler+0x133a>
				iq_set_tmp = -iq_set_tmp;
 80201da:	eef1 7a67 	vneg.f32	s15, s15
 80201de:	edcd 7a04 	vstr	s15, [sp, #16]
 80201e2:	f7ff ba9f 	b.w	801f724 <mcpwm_foc_adc_int_handler+0x6f4>
				m_motor_state.phase = m_phase_now_observer;
 80201e6:	4b03      	ldr	r3, [pc, #12]	; (80201f4 <mcpwm_foc_adc_int_handler+0x11c4>)
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	6123      	str	r3, [r4, #16]
 80201ec:	e70e      	b.n	802000c <mcpwm_foc_adc_int_handler+0xfdc>
 80201ee:	bf00      	nop
 80201f0:	2000cd8c 	.word	0x2000cd8c
 80201f4:	2000ce4c 	.word	0x2000ce4c
 80201f8:	2000ce38 	.word	0x2000ce38
 80201fc:	2000ce34 	.word	0x2000ce34
 8020200:	3f13cd3a 	.word	0x3f13cd3a
 8020204:	bf13cd3a 	.word	0xbf13cd3a
 8020208:	2000ce80 	.word	0x2000ce80
 802020c:	00000000 	.word	0x00000000
 8020210:	2000ce58 	.word	0x2000ce58
 8020214:	2000ce50 	.word	0x2000ce50
 8020218:	2000ce60 	.word	0x2000ce60
 802021c:	2000ce48 	.word	0x2000ce48
 8020220:	3f93cd3a 	.word	0x3f93cd3a
 8020224:	2000cd84 	.word	0x2000cd84
 8020228:	2000cd90 	.word	0x2000cd90
 802022c:	2000cea0 	.word	0x2000cea0
 8020230:	2000cdd0 	.word	0x2000cdd0
			openloop_angle += dt * m_openloop_speed;
 8020234:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80203f0 <mcpwm_foc_adc_int_handler+0x13c0>
 8020238:	4b5f      	ldr	r3, [pc, #380]	; (80203b8 <mcpwm_foc_adc_int_handler+0x1388>)
 802023a:	edd9 7a00 	vldr	s15, [r9]
 802023e:	ed93 7a00 	vldr	s14, [r3]
 8020242:	eee8 7a87 	vfma.f32	s15, s17, s14
			utils_norm_angle_rad(&openloop_angle);
 8020246:	4648      	mov	r0, r9
			openloop_angle += dt * m_openloop_speed;
 8020248:	edc9 7a00 	vstr	s15, [r9]
			utils_norm_angle_rad(&openloop_angle);
 802024c:	f7f5 fc28 	bl	8015aa0 <utils_norm_angle_rad>
			m_motor_state.phase = openloop_angle;
 8020250:	f8d9 3000 	ldr.w	r3, [r9]
 8020254:	6123      	str	r3, [r4, #16]
 8020256:	f7ff ba97 	b.w	801f788 <mcpwm_foc_adc_int_handler+0x758>
			m_samples.avg_current_tot += -((float)curr0 * FAC_CURRENT + (float)curr1 * FAC_CURRENT);
 802025a:	ee07 1a90 	vmov	s15, r1
 802025e:	ed9f 6a57 	vldr	s12, [pc, #348]	; 80203bc <mcpwm_foc_adc_int_handler+0x138c>
 8020262:	edd5 6a01 	vldr	s13, [r5, #4]
			m_samples.avg_voltage_tot += GET_INPUT_VOLTAGE();
 8020266:	ed9f 5a56 	vldr	s10, [pc, #344]	; 80203c0 <mcpwm_foc_adc_int_handler+0x1390>
 802026a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80203c4 <mcpwm_foc_adc_int_handler+0x1394>
			m_samples.avg_current_tot += -((float)curr0 * FAC_CURRENT + (float)curr1 * FAC_CURRENT);
 802026e:	ee07 0a10 	vmov	s14, r0
 8020272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020276:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802027a:	ee67 7a86 	vmul.f32	s15, s15, s12
 802027e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8020282:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020286:	edc5 7a01 	vstr	s15, [r5, #4]
			m_samples.avg_voltage_tot += GET_INPUT_VOLTAGE();
 802028a:	8a33      	ldrh	r3, [r6, #16]
 802028c:	ed95 7a02 	vldr	s14, [r5, #8]
 8020290:	b29b      	uxth	r3, r3
 8020292:	ee07 3a90 	vmov	s15, r3
 8020296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802029a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802029e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80202a2:	ed85 7a02 	vstr	s14, [r5, #8]
			m_samples.sample_num++;
 80202a6:	682b      	ldr	r3, [r5, #0]
 80202a8:	3301      	adds	r3, #1
 80202aa:	602b      	str	r3, [r5, #0]
			stop_pwm_hw();
 80202ac:	f7fc fd80 	bl	801cdb0 <stop_pwm_hw>
			TIMER_UPDATE_SAMP(MCPWM_FOC_CURRENT_SAMP_OFFSET);
 80202b0:	4b45      	ldr	r3, [pc, #276]	; (80203c8 <mcpwm_foc_adc_int_handler+0x1398>)
 80202b2:	2202      	movs	r2, #2
 80202b4:	635a      	str	r2, [r3, #52]	; 0x34
 80202b6:	683b      	ldr	r3, [r7, #0]
 80202b8:	f7ff b97f 	b.w	801f5ba <mcpwm_foc_adc_int_handler+0x58a>
				m_motor_state.phase = correct_encoder(m_phase_now_observer, m_phase_now_encoder, m_pll_speed);
 80202bc:	4a43      	ldr	r2, [pc, #268]	; (80203cc <mcpwm_foc_adc_int_handler+0x139c>)
 80202be:	4b44      	ldr	r3, [pc, #272]	; (80203d0 <mcpwm_foc_adc_int_handler+0x13a0>)
 80202c0:	4e44      	ldr	r6, [pc, #272]	; (80203d4 <mcpwm_foc_adc_int_handler+0x13a4>)
 80202c2:	ed92 0a00 	vldr	s0, [r2]
 80202c6:	edd3 0a00 	vldr	s1, [r3]
 80202ca:	ed96 1a00 	vldr	s2, [r6]
 80202ce:	f7fc fcff 	bl	801ccd0 <correct_encoder>
 80202d2:	ed84 0a04 	vstr	s0, [r4, #16]
 80202d6:	e6b2      	b.n	802003e <mcpwm_foc_adc_int_handler+0x100e>
	const float mod_alpha_filter_sgn = (2.0 / 3.0) * SIGN(ia_filter) - (1.0 / 3.0) * SIGN(ib_filter) - (1.0 / 3.0) * SIGN(ic_filter);
 80202d8:	ee76 6a87 	vadd.f32	s13, s13, s14
	const float mod_beta_filter_sgn = ONE_BY_SQRT3 * SIGN(ib_filter) - ONE_BY_SQRT3 * SIGN(ic_filter);
 80202dc:	eddf 4a3e 	vldr	s9, [pc, #248]	; 80203d8 <mcpwm_foc_adc_int_handler+0x13a8>
 80202e0:	e408      	b.n	801faf4 <mcpwm_foc_adc_int_handler+0xac4>
			if (ONE_BY_SQRT3 * beta > alpha) {
 80202e2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80203dc <mcpwm_foc_adc_int_handler+0x13ac>
 80202e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202ea:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80202ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202f2:	f57f ae3a 	bpl.w	801ff6a <mcpwm_foc_adc_int_handler+0xf3a>
		uint32_t t4 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80202f6:	ee06 1a90 	vmov	s13, r1
		uint32_t t5 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 80202fa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80203e0 <mcpwm_foc_adc_int_handler+0x13b0>
		uint32_t t4 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 80202fe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8020302:	ee75 7aa7 	vadd.f32	s15, s11, s15
		uint32_t t5 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 8020306:	ee26 7a07 	vmul.f32	s14, s12, s14
		uint32_t t4 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 802030a:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t t5 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 802030e:	ee27 7a26 	vmul.f32	s14, s14, s13
		uint32_t t4 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 8020312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
				sector = 4;
 8020316:	f04f 0c04 	mov.w	ip, #4
		uint32_t t4 = (-alpha + ONE_BY_SQRT3 * beta) * PWMHalfPeriod;
 802031a:	ee17 2a90 	vmov	r2, s15
		uint32_t t5 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 802031e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		tC = (PWMHalfPeriod - t4 - t5) / 2;
 8020322:	1a88      	subs	r0, r1, r2
		uint32_t t5 = (-TWO_BY_SQRT3 * beta) * PWMHalfPeriod;
 8020324:	ee17 3a90 	vmov	r3, s15
		tC = (PWMHalfPeriod - t4 - t5) / 2;
 8020328:	1ac0      	subs	r0, r0, r3
 802032a:	0840      	lsrs	r0, r0, #1
		tB = tC + t5;
 802032c:	4403      	add	r3, r0
		tA = tB + t4;
 802032e:	441a      	add	r2, r3
 8020330:	e44d      	b.n	801fbce <mcpwm_foc_adc_int_handler+0xb9e>
		d_term = 0.0;
 8020332:	eddf 8a2c 	vldr	s17, [pc, #176]	; 80203e4 <mcpwm_foc_adc_int_handler+0x13b4>
 8020336:	e710      	b.n	802015a <mcpwm_foc_adc_int_handler+0x112a>
					iq_set_tmp = -m_conf->lo_current_max;
 8020338:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 802033c:	eef1 7a67 	vneg.f32	s15, s15
 8020340:	edcd 7a04 	vstr	s15, [sp, #16]
 8020344:	f7ff b9ee 	b.w	801f724 <mcpwm_foc_adc_int_handler+0x6f4>
		if (encoder_index_found()) {
 8020348:	f7fa fdb2 	bl	801aeb0 <encoder_index_found>
			m_iq_set = output * m_conf->lo_current_max;
 802034c:	682b      	ldr	r3, [r5, #0]
		if (encoder_index_found()) {
 802034e:	2800      	cmp	r0, #0
 8020350:	f47f af2c 	bne.w	80201ac <mcpwm_foc_adc_int_handler+0x117c>
			m_iq_set = 0.4 * m_conf->lo_current_max;
 8020354:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8020358:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80203e8 <mcpwm_foc_adc_int_handler+0x13b8>
 802035c:	4b23      	ldr	r3, [pc, #140]	; (80203ec <mcpwm_foc_adc_int_handler+0x13bc>)
 802035e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020362:	edc3 7a00 	vstr	s15, [r3]
 8020366:	f7ff b8fa 	b.w	801f55e <mcpwm_foc_adc_int_handler+0x52e>
			iq_set_tmp = fabsf(iq_set_tmp);
 802036a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020372:	bf08      	it	eq
 8020374:	eef0 7a47 	vmoveq.f32	s15, s14
 8020378:	edcd 7a04 	vstr	s15, [sp, #16]
 802037c:	f7ff b9d2 	b.w	801f724 <mcpwm_foc_adc_int_handler+0x6f4>
					id_set_tmp = utils_map(duty_abs, 0.0, m_conf->foc_sl_d_current_duty,
 8020380:	ed92 1a3c 	vldr	s2, [r2, #240]	; 0xf0
							fabsf(m_motor_state.iq_target) * m_conf->foc_sl_d_current_factor, 0.0);
 8020384:	edd4 7a01 	vldr	s15, [r4, #4]
					id_set_tmp = utils_map(duty_abs, 0.0, m_conf->foc_sl_d_current_duty,
 8020388:	ed9f 2a16 	vldr	s4, [pc, #88]	; 80203e4 <mcpwm_foc_adc_int_handler+0x13b4>
							fabsf(m_motor_state.iq_target) * m_conf->foc_sl_d_current_factor, 0.0);
 802038c:	edd2 1a3d 	vldr	s3, [r2, #244]	; 0xf4
 8020390:	4e10      	ldr	r6, [pc, #64]	; (80203d4 <mcpwm_foc_adc_int_handler+0x13a4>)
 8020392:	eef0 7ae7 	vabs.f32	s15, s15
					id_set_tmp = utils_map(duty_abs, 0.0, m_conf->foc_sl_d_current_duty,
 8020396:	eeb0 0a69 	vmov.f32	s0, s19
 802039a:	ee67 1aa1 	vmul.f32	s3, s15, s3
 802039e:	eef0 0a42 	vmov.f32	s1, s4
 80203a2:	f7f5 fbed 	bl	8015b80 <utils_map>
 80203a6:	ed8d 0a03 	vstr	s0, [sp, #12]
 80203aa:	f7ff b9e3 	b.w	801f774 <mcpwm_foc_adc_int_handler+0x744>
		if (m_control_mode == CONTROL_MODE_SPEED &&
 80203ae:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80203e4 <mcpwm_foc_adc_int_handler+0x13b4>
			duty_set = 0.0;
 80203b2:	eef0 7a66 	vmov.f32	s15, s13
 80203b6:	e47e      	b.n	801fcb6 <mcpwm_foc_adc_int_handler+0xc86>
 80203b8:	2000ce3c 	.word	0x2000ce3c
 80203bc:	3da50a50 	.word	0x3da50a50
 80203c0:	3a534067 	.word	0x3a534067
 80203c4:	4195d174 	.word	0x4195d174
 80203c8:	40010400 	.word	0x40010400
 80203cc:	2000ce4c 	.word	0x2000ce4c
 80203d0:	2000ce44 	.word	0x2000ce44
 80203d4:	2000ce60 	.word	0x2000ce60
 80203d8:	bf13cd3a 	.word	0xbf13cd3a
 80203dc:	3f13cd3a 	.word	0x3f13cd3a
 80203e0:	3f93cd3a 	.word	0x3f93cd3a
 80203e4:	00000000 	.word	0x00000000
 80203e8:	3ecccccd 	.word	0x3ecccccd
 80203ec:	2000cdd0 	.word	0x2000cdd0
 80203f0:	2000ce98 	.word	0x2000ce98
	...

08020400 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8020400:	2101      	movs	r1, #1
void hw_init_gpio(void) {
 8020402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8020404:	4608      	mov	r0, r1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOC, 4,
 8020406:	4c50      	ldr	r4, [pc, #320]	; (8020548 <hw_init_gpio+0x148>)
			PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();

	// GPIOB (DCCAL)
	palSetPadMode(GPIOB, 12,
 8020408:	4e50      	ldr	r6, [pc, #320]	; (802054c <hw_init_gpio+0x14c>)
			PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);

	// GPIOA Configuration: Channel 1 to 3 as alternate function push-pull
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 802040a:	4d51      	ldr	r5, [pc, #324]	; (8020550 <hw_init_gpio+0x150>)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 802040c:	f004 fa48 	bl	80248a0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8020410:	2101      	movs	r1, #1
 8020412:	2002      	movs	r0, #2
 8020414:	f004 fa44 	bl	80248a0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8020418:	2101      	movs	r1, #1
 802041a:	2004      	movs	r0, #4
 802041c:	f004 fa40 	bl	80248a0 <RCC_AHB1PeriphClockCmd>
	palSetPadMode(GPIOC, 4,
 8020420:	4620      	mov	r0, r4
 8020422:	2219      	movs	r2, #25
 8020424:	2110      	movs	r1, #16
 8020426:	f7ef fceb 	bl	800fe00 <_pal_lld_setgroupmode>
	DISABLE_GATE();
 802042a:	f44f 6780 	mov.w	r7, #1024	; 0x400
	palSetPadMode(GPIOC, 5,
 802042e:	4620      	mov	r0, r4
 8020430:	2219      	movs	r2, #25
 8020432:	2120      	movs	r1, #32
 8020434:	f7ef fce4 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 10,
 8020438:	4620      	mov	r0, r4
 802043a:	4639      	mov	r1, r7
 802043c:	2219      	movs	r2, #25
 802043e:	f7ef fcdf 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 12,
 8020442:	4630      	mov	r0, r6
	DISABLE_GATE();
 8020444:	8367      	strh	r7, [r4, #26]
	palSetPadMode(GPIOB, 12,
 8020446:	2219      	movs	r2, #25
 8020448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802044c:	f7ef fcd8 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8020450:	4628      	mov	r0, r5
 8020452:	229a      	movs	r2, #154	; 0x9a
 8020454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020458:	f7ef fcd2 	bl	800fe00 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST |
			PAL_STM32_PUDR_FLOATING);
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 802045c:	4628      	mov	r0, r5
 802045e:	229a      	movs	r2, #154	; 0x9a
 8020460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020464:	f7ef fccc 	bl	800fe00 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST |
			PAL_STM32_PUDR_FLOATING);
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8020468:	4639      	mov	r1, r7
 802046a:	4628      	mov	r0, r5
 802046c:	229a      	movs	r2, #154	; 0x9a
 802046e:	f7ef fcc7 	bl	800fe00 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST |
			PAL_STM32_PUDR_FLOATING);

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8020472:	4630      	mov	r0, r6
 8020474:	229a      	movs	r2, #154	; 0x9a
 8020476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802047a:	f7ef fcc1 	bl	800fe00 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST |
			PAL_STM32_PUDR_FLOATING);
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 802047e:	4630      	mov	r0, r6
 8020480:	229a      	movs	r2, #154	; 0x9a
 8020482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020486:	f7ef fcbb 	bl	800fe00 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST |
			PAL_STM32_PUDR_FLOATING);
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 802048a:	4630      	mov	r0, r6
 802048c:	229a      	movs	r2, #154	; 0x9a
 802048e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020492:	f7ef fcb5 	bl	800fe00 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST |
			PAL_STM32_PUDR_FLOATING);

	// Hall sensors
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 8020496:	4630      	mov	r0, r6
 8020498:	2220      	movs	r2, #32
 802049a:	2140      	movs	r1, #64	; 0x40
 802049c:	f7ef fcb0 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 80204a0:	4630      	mov	r0, r6
 80204a2:	2220      	movs	r2, #32
 80204a4:	2180      	movs	r1, #128	; 0x80
 80204a6:	f7ef fcab 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);
 80204aa:	4620      	mov	r0, r4
 80204ac:	2220      	movs	r2, #32
 80204ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80204b2:	f7ef fca5 	bl	800fe00 <_pal_lld_setgroupmode>

	// Fault pin
	palSetPadMode(GPIOC, 12, PAL_MODE_INPUT_PULLUP);
 80204b6:	4620      	mov	r0, r4
 80204b8:	2220      	movs	r2, #32
 80204ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80204be:	f7ef fc9f 	bl	800fe00 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 80204c2:	4628      	mov	r0, r5
 80204c4:	2203      	movs	r2, #3
 80204c6:	2101      	movs	r1, #1
 80204c8:	f7ef fc9a 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);
 80204cc:	4628      	mov	r0, r5
 80204ce:	2203      	movs	r2, #3
 80204d0:	2102      	movs	r1, #2
 80204d2:	f7ef fc95 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);
 80204d6:	4628      	mov	r0, r5
 80204d8:	2203      	movs	r2, #3
 80204da:	2104      	movs	r1, #4
 80204dc:	f7ef fc90 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);
 80204e0:	4628      	mov	r0, r5
 80204e2:	2203      	movs	r2, #3
 80204e4:	2108      	movs	r1, #8
 80204e6:	f7ef fc8b 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 80204ea:	4628      	mov	r0, r5
 80204ec:	2203      	movs	r2, #3
 80204ee:	2110      	movs	r1, #16
 80204f0:	f7ef fc86 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 80204f4:	4628      	mov	r0, r5
 80204f6:	2203      	movs	r2, #3
 80204f8:	2120      	movs	r1, #32
 80204fa:	f7ef fc81 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 80204fe:	4628      	mov	r0, r5
 8020500:	2203      	movs	r2, #3
 8020502:	2140      	movs	r1, #64	; 0x40
 8020504:	f7ef fc7c 	bl	800fe00 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);
 8020508:	4630      	mov	r0, r6
 802050a:	2203      	movs	r2, #3
 802050c:	2101      	movs	r1, #1
 802050e:	f7ef fc77 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);
 8020512:	4630      	mov	r0, r6
 8020514:	2203      	movs	r2, #3
 8020516:	2102      	movs	r1, #2
 8020518:	f7ef fc72 	bl	800fe00 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);
 802051c:	4620      	mov	r0, r4
 802051e:	2203      	movs	r2, #3
 8020520:	2101      	movs	r1, #1
 8020522:	f7ef fc6d 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 8020526:	4620      	mov	r0, r4
 8020528:	2203      	movs	r2, #3
 802052a:	2102      	movs	r1, #2
 802052c:	f7ef fc68 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);
 8020530:	4620      	mov	r0, r4
 8020532:	2203      	movs	r2, #3
 8020534:	2104      	movs	r1, #4
 8020536:	f7ef fc63 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 802053a:	4620      	mov	r0, r4
 802053c:	2203      	movs	r2, #3
 802053e:	2108      	movs	r1, #8
}
 8020540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 8020544:	f7ef bc5c 	b.w	800fe00 <_pal_lld_setgroupmode>
 8020548:	40020800 	.word	0x40020800
 802054c:	40020400 	.word	0x40020400
 8020550:	40020000 	.word	0x40020000
	...

08020560 <hw_setup_adc_channels>:

void hw_setup_adc_channels(void) {
 8020560:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8020562:	4d32      	ldr	r5, [pc, #200]	; (802062c <hw_setup_adc_channels+0xcc>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8020564:	4c32      	ldr	r4, [pc, #200]	; (8020630 <hw_setup_adc_channels+0xd0>)
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_6, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);

	// ADC3 regular channels
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 8020566:	4e33      	ldr	r6, [pc, #204]	; (8020634 <hw_setup_adc_channels+0xd4>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8020568:	2301      	movs	r3, #1
 802056a:	4628      	mov	r0, r5
 802056c:	461a      	mov	r2, r3
 802056e:	2100      	movs	r1, #0
 8020570:	f003 feae 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 8020574:	4628      	mov	r0, r5
 8020576:	2301      	movs	r3, #1
 8020578:	2202      	movs	r2, #2
 802057a:	2108      	movs	r1, #8
 802057c:	f003 fea8 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);
 8020580:	4628      	mov	r0, r5
 8020582:	2301      	movs	r3, #1
 8020584:	2203      	movs	r2, #3
 8020586:	2111      	movs	r1, #17
 8020588:	f003 fea2 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 802058c:	2204      	movs	r2, #4
 802058e:	4628      	mov	r0, r5
 8020590:	4611      	mov	r1, r2
 8020592:	2301      	movs	r3, #1
 8020594:	f003 fe9c 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8020598:	2301      	movs	r3, #1
 802059a:	4620      	mov	r0, r4
 802059c:	461a      	mov	r2, r3
 802059e:	4619      	mov	r1, r3
 80205a0:	f003 fe96 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 80205a4:	4620      	mov	r0, r4
 80205a6:	2301      	movs	r3, #1
 80205a8:	2202      	movs	r2, #2
 80205aa:	2109      	movs	r1, #9
 80205ac:	f003 fe90 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_6, 3, ADC_SampleTime_15Cycles);
 80205b0:	4620      	mov	r0, r4
 80205b2:	2301      	movs	r3, #1
 80205b4:	2203      	movs	r2, #3
 80205b6:	2106      	movs	r1, #6
 80205b8:	f003 fe8a 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 80205bc:	4620      	mov	r0, r4
 80205be:	2301      	movs	r3, #1
 80205c0:	2204      	movs	r2, #4
 80205c2:	2105      	movs	r1, #5
 80205c4:	f003 fe84 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 80205c8:	2301      	movs	r3, #1
 80205ca:	4630      	mov	r0, r6
 80205cc:	461a      	mov	r2, r3
 80205ce:	2102      	movs	r1, #2
 80205d0:	f003 fe7e 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 80205d4:	4630      	mov	r0, r6
 80205d6:	2301      	movs	r3, #1
 80205d8:	2202      	movs	r2, #2
 80205da:	2103      	movs	r1, #3
 80205dc:	f003 fe78 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 80205e0:	4630      	mov	r0, r6
 80205e2:	2301      	movs	r3, #1
 80205e4:	2203      	movs	r2, #3
 80205e6:	210c      	movs	r1, #12
 80205e8:	f003 fe72 	bl	80242d0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_10, 4, ADC_SampleTime_15Cycles);
 80205ec:	4630      	mov	r0, r6
 80205ee:	2301      	movs	r3, #1
 80205f0:	2204      	movs	r2, #4
 80205f2:	210a      	movs	r1, #10
 80205f4:	f003 fe6c 	bl	80242d0 <ADC_RegularChannelConfig>

	// Injected channels
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
 80205f8:	2301      	movs	r3, #1
 80205fa:	4628      	mov	r0, r5
 80205fc:	461a      	mov	r2, r3
 80205fe:	2109      	movs	r1, #9
 8020600:	f003 febe 	bl	8024380 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 8020604:	4628      	mov	r0, r5
 8020606:	2301      	movs	r3, #1
 8020608:	2202      	movs	r2, #2
 802060a:	2108      	movs	r1, #8
 802060c:	f003 feb8 	bl	8024380 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
 8020610:	2301      	movs	r3, #1
 8020612:	4620      	mov	r0, r4
 8020614:	461a      	mov	r2, r3
 8020616:	2108      	movs	r1, #8
 8020618:	f003 feb2 	bl	8024380 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 802061c:	4620      	mov	r0, r4
 802061e:	2301      	movs	r3, #1
 8020620:	2202      	movs	r2, #2
 8020622:	2109      	movs	r1, #9
}
 8020624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 8020628:	f003 beaa 	b.w	8024380 <ADC_InjectedChannelConfig>
 802062c:	40012000 	.word	0x40012000
 8020630:	40012100 	.word	0x40012100
 8020634:	40012200 	.word	0x40012200
	...

08020640 <hw_start_i2c>:
	servos[1].pin = 4;
	servos[1].offset = 0;
	servos[1].pos = 0;
}

void hw_start_i2c(void) {
 8020640:	b510      	push	{r4, lr}
	i2cAcquireBus(&HW_I2C_DEV);

	if (!i2c_running) {
 8020642:	4c0f      	ldr	r4, [pc, #60]	; (8020680 <hw_start_i2c+0x40>)
	i2cAcquireBus(&HW_I2C_DEV);
 8020644:	480f      	ldr	r0, [pc, #60]	; (8020684 <hw_start_i2c+0x44>)
 8020646:	f7ed ffcb 	bl	800e5e0 <i2cAcquireBus>
	if (!i2c_running) {
 802064a:	7823      	ldrb	r3, [r4, #0]
 802064c:	b99b      	cbnz	r3, 8020676 <hw_start_i2c+0x36>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN,
 802064e:	f240 222e 	movw	r2, #558	; 0x22e
 8020652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020656:	480c      	ldr	r0, [pc, #48]	; (8020688 <hw_start_i2c+0x48>)
 8020658:	f7ef fbd2 	bl	800fe00 <_pal_lld_setgroupmode>
				PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) |
				PAL_STM32_OTYPE_OPENDRAIN |
				PAL_STM32_OSPEED_MID1 |
				PAL_STM32_PUDR_PULLUP);
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN,
 802065c:	f240 222e 	movw	r2, #558	; 0x22e
 8020660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8020664:	4808      	ldr	r0, [pc, #32]	; (8020688 <hw_start_i2c+0x48>)
 8020666:	f7ef fbcb 	bl	800fe00 <_pal_lld_setgroupmode>
				PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) |
				PAL_STM32_OTYPE_OPENDRAIN |
				PAL_STM32_OSPEED_MID1 |
				PAL_STM32_PUDR_PULLUP);

		i2cStart(&HW_I2C_DEV, &i2cfg);
 802066a:	4908      	ldr	r1, [pc, #32]	; (802068c <hw_start_i2c+0x4c>)
 802066c:	4805      	ldr	r0, [pc, #20]	; (8020684 <hw_start_i2c+0x44>)
 802066e:	f7ed ff5f 	bl	800e530 <i2cStart>
		i2c_running = true;
 8020672:	2301      	movs	r3, #1
 8020674:	7023      	strb	r3, [r4, #0]
	}

	i2cReleaseBus(&HW_I2C_DEV);
 8020676:	4803      	ldr	r0, [pc, #12]	; (8020684 <hw_start_i2c+0x44>)
}
 8020678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2cReleaseBus(&HW_I2C_DEV);
 802067c:	f7ed bfb8 	b.w	800e5f0 <i2cReleaseBus>
 8020680:	2000d848 	.word	0x2000d848
 8020684:	20001d74 	.word	0x20001d74
 8020688:	40020400 	.word	0x40020400
 802068c:	080306a0 	.word	0x080306a0

08020690 <hw_stop_i2c>:

void hw_stop_i2c(void) {
 8020690:	b510      	push	{r4, lr}
	i2cAcquireBus(&HW_I2C_DEV);

	if (i2c_running) {
 8020692:	4c0e      	ldr	r4, [pc, #56]	; (80206cc <hw_stop_i2c+0x3c>)
	i2cAcquireBus(&HW_I2C_DEV);
 8020694:	480e      	ldr	r0, [pc, #56]	; (80206d0 <hw_stop_i2c+0x40>)
 8020696:	f7ed ffa3 	bl	800e5e0 <i2cAcquireBus>
	if (i2c_running) {
 802069a:	7823      	ldrb	r3, [r4, #0]
 802069c:	b183      	cbz	r3, 80206c0 <hw_stop_i2c+0x30>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN, PAL_MODE_INPUT);
 802069e:	2200      	movs	r2, #0
 80206a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80206a4:	480b      	ldr	r0, [pc, #44]	; (80206d4 <hw_stop_i2c+0x44>)
 80206a6:	f7ef fbab 	bl	800fe00 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN, PAL_MODE_INPUT);
 80206aa:	2200      	movs	r2, #0
 80206ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80206b0:	4808      	ldr	r0, [pc, #32]	; (80206d4 <hw_stop_i2c+0x44>)
 80206b2:	f7ef fba5 	bl	800fe00 <_pal_lld_setgroupmode>

		i2cStop(&HW_I2C_DEV);
 80206b6:	4806      	ldr	r0, [pc, #24]	; (80206d0 <hw_stop_i2c+0x40>)
 80206b8:	f7ed ff4a 	bl	800e550 <i2cStop>
		i2c_running = false;
 80206bc:	2300      	movs	r3, #0
 80206be:	7023      	strb	r3, [r4, #0]

	}

	i2cReleaseBus(&HW_I2C_DEV);
 80206c0:	4803      	ldr	r0, [pc, #12]	; (80206d0 <hw_stop_i2c+0x40>)
}
 80206c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2cReleaseBus(&HW_I2C_DEV);
 80206c6:	f7ed bf93 	b.w	800e5f0 <i2cReleaseBus>
 80206ca:	bf00      	nop
 80206cc:	2000d848 	.word	0x2000d848
 80206d0:	20001d74 	.word	0x20001d74
 80206d4:	40020400 	.word	0x40020400
	...

080206e0 <hw_try_restore_i2c>:

/**
 * Try to restore the i2c bus
 */
void hw_try_restore_i2c(void) {
 80206e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (i2c_running) {
 80206e2:	4b28      	ldr	r3, [pc, #160]	; (8020784 <hw_try_restore_i2c+0xa4>)
 80206e4:	781b      	ldrb	r3, [r3, #0]
 80206e6:	b903      	cbnz	r3, 80206ea <hw_try_restore_i2c+0xa>
 80206e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i2cAcquireBus(&HW_I2C_DEV);

		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN,
 80206ea:	4d27      	ldr	r5, [pc, #156]	; (8020788 <hw_try_restore_i2c+0xa8>)
		i2cAcquireBus(&HW_I2C_DEV);
 80206ec:	4827      	ldr	r0, [pc, #156]	; (802078c <hw_try_restore_i2c+0xac>)
 80206ee:	f7ed ff77 	bl	800e5e0 <i2cAcquireBus>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN,
 80206f2:	4628      	mov	r0, r5
 80206f4:	222c      	movs	r2, #44	; 0x2c
 80206f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80206fa:	f7ef fb81 	bl	800fe00 <_pal_lld_setgroupmode>
				PAL_STM32_OTYPE_OPENDRAIN |
				PAL_STM32_OSPEED_MID1 |
				PAL_STM32_PUDR_PULLUP);

		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN,
 80206fe:	4628      	mov	r0, r5
 8020700:	222c      	movs	r2, #44	; 0x2c
 8020702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8020706:	f7ef fb7b 	bl	800fe00 <_pal_lld_setgroupmode>
				PAL_STM32_OTYPE_OPENDRAIN |
				PAL_STM32_OSPEED_MID1 |
				PAL_STM32_PUDR_PULLUP);

		palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 802070a:	f44f 6680 	mov.w	r6, #1024	; 0x400
		palSetPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 802070e:	f44f 6300 	mov.w	r3, #2048	; 0x800
		palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8020712:	832e      	strh	r6, [r5, #24]

		chThdSleep(1);
 8020714:	2001      	movs	r0, #1
		palSetPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 8020716:	832b      	strh	r3, [r5, #24]
		chThdSleep(1);
 8020718:	f7ed f962 	bl	800d9e0 <chThdSleep>

		for(int i = 0;i < 16;i++) {
			palClearPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 802071c:	4637      	mov	r7, r6
		chThdSleep(1);
 802071e:	2410      	movs	r4, #16
			chThdSleep(1);
 8020720:	2001      	movs	r0, #1
			palClearPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8020722:	836f      	strh	r7, [r5, #26]
			chThdSleep(1);
 8020724:	f7ed f95c 	bl	800d9e0 <chThdSleep>
			palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8020728:	832e      	strh	r6, [r5, #24]
			chThdSleep(1);
 802072a:	2001      	movs	r0, #1
 802072c:	f7ed f958 	bl	800d9e0 <chThdSleep>
		for(int i = 0;i < 16;i++) {
 8020730:	3c01      	subs	r4, #1
 8020732:	d1f5      	bne.n	8020720 <hw_try_restore_i2c+0x40>
		}

		// Generate start then stop condition
		palClearPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 8020734:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8020738:	836f      	strh	r7, [r5, #26]
		chThdSleep(1);
 802073a:	2001      	movs	r0, #1
 802073c:	f7ed f950 	bl	800d9e0 <chThdSleep>
		palClearPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8020740:	836e      	strh	r6, [r5, #26]
		chThdSleep(1);
 8020742:	2001      	movs	r0, #1
 8020744:	f7ed f94c 	bl	800d9e0 <chThdSleep>
		palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8020748:	832e      	strh	r6, [r5, #24]
		chThdSleep(1);
 802074a:	2001      	movs	r0, #1
 802074c:	f7ed f948 	bl	800d9e0 <chThdSleep>
				PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) |
				PAL_STM32_OTYPE_OPENDRAIN |
				PAL_STM32_OSPEED_MID1 |
				PAL_STM32_PUDR_PULLUP);

		HW_I2C_DEV.state = I2C_STOP;
 8020750:	4c0e      	ldr	r4, [pc, #56]	; (802078c <hw_try_restore_i2c+0xac>)
		palSetPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 8020752:	832f      	strh	r7, [r5, #24]
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN,
 8020754:	f240 222e 	movw	r2, #558	; 0x22e
 8020758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802075c:	480a      	ldr	r0, [pc, #40]	; (8020788 <hw_try_restore_i2c+0xa8>)
 802075e:	f7ef fb4f 	bl	800fe00 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN,
 8020762:	4639      	mov	r1, r7
 8020764:	f240 222e 	movw	r2, #558	; 0x22e
 8020768:	4807      	ldr	r0, [pc, #28]	; (8020788 <hw_try_restore_i2c+0xa8>)
 802076a:	f7ef fb49 	bl	800fe00 <_pal_lld_setgroupmode>
		HW_I2C_DEV.state = I2C_STOP;
 802076e:	2301      	movs	r3, #1
		i2cStart(&HW_I2C_DEV, &i2cfg);
 8020770:	4620      	mov	r0, r4
 8020772:	4907      	ldr	r1, [pc, #28]	; (8020790 <hw_try_restore_i2c+0xb0>)
		HW_I2C_DEV.state = I2C_STOP;
 8020774:	7023      	strb	r3, [r4, #0]
		i2cStart(&HW_I2C_DEV, &i2cfg);
 8020776:	f7ed fedb 	bl	800e530 <i2cStart>

		i2cReleaseBus(&HW_I2C_DEV);
 802077a:	4620      	mov	r0, r4
	}
}
 802077c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		i2cReleaseBus(&HW_I2C_DEV);
 8020780:	f7ed bf36 	b.w	800e5f0 <i2cReleaseBus>
 8020784:	2000d848 	.word	0x2000d848
 8020788:	40020400 	.word	0x40020400
 802078c:	20001d74 	.word	0x20001d74
 8020790:	080306a0 	.word	0x080306a0
	...

080207a0 <app_get_configuration>:
// Private variables
static app_configuration appconf;

const app_configuration* app_get_configuration(void) {
	return &appconf;
}
 80207a0:	4800      	ldr	r0, [pc, #0]	; (80207a4 <app_get_configuration+0x4>)
 80207a2:	4770      	bx	lr
 80207a4:	2000d84c 	.word	0x2000d84c
	...

080207b0 <app_set_configuration>:
 * Reconfigure and restart all apps. Some apps don't have any configuration options.
 *
 * @param conf
 * The new configuration to use.
 */
void app_set_configuration(app_configuration *conf) {
 80207b0:	b538      	push	{r3, r4, r5, lr}
	app_ppm_stop();
	app_adc_stop();
	app_uartcomm_stop();
	app_nunchuk_stop();

	if (!conf_general_permanent_nrf_found) {
 80207b2:	4d2c      	ldr	r5, [pc, #176]	; (8020864 <app_set_configuration+0xb4>)
	appconf = *conf;
 80207b4:	4601      	mov	r1, r0
 80207b6:	22c8      	movs	r2, #200	; 0xc8
 80207b8:	482b      	ldr	r0, [pc, #172]	; (8020868 <app_set_configuration+0xb8>)
 80207ba:	f7ec f9a9 	bl	800cb10 <memcpy>
	app_ppm_stop();
 80207be:	f000 fc27 	bl	8021010 <app_ppm_stop>
	app_adc_stop();
 80207c2:	f001 fa25 	bl	8021c10 <app_adc_stop>
	app_uartcomm_stop();
 80207c6:	f001 fb4b 	bl	8021e60 <app_uartcomm_stop>
	app_nunchuk_stop();
 80207ca:	f001 ff49 	bl	8022660 <app_nunchuk_stop>
	if (!conf_general_permanent_nrf_found) {
 80207ce:	782b      	ldrb	r3, [r5, #0]
 80207d0:	b1f3      	cbz	r3, 8020810 <app_set_configuration+0x60>

#ifdef APP_CUSTOM_TO_USE
	app_custom_stop();
#endif

	switch (appconf.app_to_use) {
 80207d2:	4c25      	ldr	r4, [pc, #148]	; (8020868 <app_set_configuration+0xb8>)
 80207d4:	7d23      	ldrb	r3, [r4, #20]
 80207d6:	3b01      	subs	r3, #1
 80207d8:	2b07      	cmp	r3, #7
 80207da:	d807      	bhi.n	80207ec <app_set_configuration+0x3c>
 80207dc:	e8df f003 	tbb	[pc, r3]
 80207e0:	2a25211e 	.word	0x2a25211e
 80207e4:	1b390431 	.word	0x1b390431
		app_adc_start(false);
		app_uartcomm_start();
		break;

	case APP_NUNCHUK:
		app_nunchuk_start();
 80207e8:	f001 ff1a 	bl	8022620 <app_nunchuk_start>

	default:
		break;
	}

	app_ppm_configure(&appconf.app_ppm_conf);
 80207ec:	481f      	ldr	r0, [pc, #124]	; (802086c <app_set_configuration+0xbc>)
 80207ee:	f000 fbb7 	bl	8020f60 <app_ppm_configure>
	app_adc_configure(&appconf.app_adc_conf);
 80207f2:	481f      	ldr	r0, [pc, #124]	; (8020870 <app_set_configuration+0xc0>)
 80207f4:	f001 f9dc 	bl	8021bb0 <app_adc_configure>
	app_uartcomm_configure(appconf.app_uart_baudrate);
 80207f8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80207fc:	f001 fb48 	bl	8021e90 <app_uartcomm_configure>
	app_nunchuk_configure(&appconf.app_chuk_conf);
 8020800:	481c      	ldr	r0, [pc, #112]	; (8020874 <app_set_configuration+0xc4>)
 8020802:	f001 fef5 	bl	80225f0 <app_nunchuk_configure>

#ifdef APP_CUSTOM_TO_USE
	app_custom_configure(&appconf);
#endif

	rfhelp_update_conf(&appconf.app_nrf_conf);
 8020806:	481c      	ldr	r0, [pc, #112]	; (8020878 <app_set_configuration+0xc8>)
}
 8020808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rfhelp_update_conf(&appconf.app_nrf_conf);
 802080c:	f003 b868 	b.w	80238e0 <rfhelp_update_conf>
		nrf_driver_stop();
 8020810:	f003 fc96 	bl	8024140 <nrf_driver_stop>
 8020814:	e7dd      	b.n	80207d2 <app_set_configuration+0x22>
        settingMotorCurrent();
 8020816:	f002 fad3 	bl	8022dc0 <settingMotorCurrent>
		break;
 802081a:	e7e7      	b.n	80207ec <app_set_configuration+0x3c>
		app_ppm_start();
 802081c:	f000 fbc8 	bl	8020fb0 <app_ppm_start>
		break;
 8020820:	e7e4      	b.n	80207ec <app_set_configuration+0x3c>
		app_adc_start(true);
 8020822:	2001      	movs	r0, #1
 8020824:	f001 f9d4 	bl	8021bd0 <app_adc_start>
		break;
 8020828:	e7e0      	b.n	80207ec <app_set_configuration+0x3c>
		hw_stop_i2c();
 802082a:	f7ff ff31 	bl	8020690 <hw_stop_i2c>
		app_uartcomm_start();
 802082e:	f001 facf 	bl	8021dd0 <app_uartcomm_start>
		break;
 8020832:	e7db      	b.n	80207ec <app_set_configuration+0x3c>
		hw_stop_i2c();
 8020834:	f7ff ff2c 	bl	8020690 <hw_stop_i2c>
		app_ppm_start();
 8020838:	f000 fbba 	bl	8020fb0 <app_ppm_start>
		app_uartcomm_start();
 802083c:	f001 fac8 	bl	8021dd0 <app_uartcomm_start>
		break;
 8020840:	e7d4      	b.n	80207ec <app_set_configuration+0x3c>
		hw_stop_i2c();
 8020842:	f7ff ff25 	bl	8020690 <hw_stop_i2c>
		app_adc_start(false);
 8020846:	2000      	movs	r0, #0
 8020848:	f001 f9c2 	bl	8021bd0 <app_adc_start>
		app_uartcomm_start();
 802084c:	f001 fac0 	bl	8021dd0 <app_uartcomm_start>
		break;
 8020850:	e7cc      	b.n	80207ec <app_set_configuration+0x3c>
		if (!conf_general_permanent_nrf_found) {
 8020852:	782b      	ldrb	r3, [r5, #0]
 8020854:	2b00      	cmp	r3, #0
 8020856:	d1c9      	bne.n	80207ec <app_set_configuration+0x3c>
			nrf_driver_init();
 8020858:	f003 fc12 	bl	8024080 <nrf_driver_init>
			rfhelp_restart();
 802085c:	f002 ffd8 	bl	8023810 <rfhelp_restart>
 8020860:	e7c4      	b.n	80207ec <app_set_configuration+0x3c>
 8020862:	bf00      	nop
 8020864:	20008048 	.word	0x20008048
 8020868:	2000d84c 	.word	0x2000d84c
 802086c:	2000d864 	.word	0x2000d864
 8020870:	2000d89c 	.word	0x2000d89c
 8020874:	2000d8e4 	.word	0x2000d8e4
 8020878:	2000d908 	.word	0x2000d908
 802087c:	00000000 	.word	0x00000000

08020880 <ppm_thread>:
	chVTSetI(&vt, MS2ST(2), update, p);
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
	chSysUnlockFromISR();
}

static THD_FUNCTION(ppm_thread, arg) {
 8020880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020884:	4fb8      	ldr	r7, [pc, #736]	; (8020b68 <ppm_thread+0x2e8>)
	(void)arg;

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();

	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8020886:	4cb9      	ldr	r4, [pc, #740]	; (8020b6c <ppm_thread+0x2ec>)
 8020888:	69bb      	ldr	r3, [r7, #24]
 802088a:	49b9      	ldr	r1, [pc, #740]	; (8020b70 <ppm_thread+0x2f0>)
	ppm_tp = chThdGetSelfX();
 802088c:	4ab9      	ldr	r2, [pc, #740]	; (8020b74 <ppm_thread+0x2f4>)
	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 802088e:	ed94 0a03 	vldr	s0, [r4, #12]
 8020892:	edd4 0a04 	vldr	s1, [r4, #16]
 8020896:	7e20      	ldrb	r0, [r4, #24]
	servodec_init(servodec_func);
	is_running = true;
 8020898:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8020ba8 <ppm_thread+0x328>
 802089c:	4eb6      	ldr	r6, [pc, #728]	; (8020b78 <ppm_thread+0x2f8>)
static THD_FUNCTION(ppm_thread, arg) {
 802089e:	ed2d 8b0a 	vpush	{d8-d12}
 80208a2:	6199      	str	r1, [r3, #24]
 80208a4:	b085      	sub	sp, #20
	ppm_tp = chThdGetSelfX();
 80208a6:	6013      	str	r3, [r2, #0]
	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 80208a8:	f7f5 f87a 	bl	80159a0 <servodec_set_pulse_options>
	servodec_init(servodec_func);
 80208ac:	48b3      	ldr	r0, [pc, #716]	; (8020b7c <ppm_thread+0x2fc>)
			// Mapping with respect to center pulsewidth
			if (servo_ms < config.pulse_center) {
				servo_val = utils_map(servo_ms, config.pulse_start,
						config.pulse_center, -1.0, 0.0);
			} else {
				servo_val = utils_map(servo_ms, config.pulse_center,
 80208ae:	eddf 8ab4 	vldr	s17, [pc, #720]	; 8020b80 <ppm_thread+0x300>
		// Apply ramping
		static systime_t last_time = 0;
		static float servo_val_ramp = 0.0;
		const float ramp_time = fabsf(servo_val) > fabsf(servo_val_ramp) ? config.ramp_time_pos : config.ramp_time_neg;

		if (ramp_time > 0.01) {
 80208b2:	ed9f aab4 	vldr	s20, [pc, #720]	; 8020b84 <ppm_thread+0x304>
			float current = mc_interface_get_tot_current_directional_filtered();

			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
				can_status_msg *msg = comm_can_get_status_msg_index(i);

				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 80208b6:	eddf 9ab4 	vldr	s19, [pc, #720]	; 8020b88 <ppm_thread+0x308>
 80208ba:	ed9f 9ab4 	vldr	s18, [pc, #720]	; 8020b8c <ppm_thread+0x30c>
	servodec_init(servodec_func);
 80208be:	f7f5 f80f 	bl	80158e0 <servodec_init>
	is_running = true;
 80208c2:	2301      	movs	r3, #1
 80208c4:	f888 3000 	strb.w	r3, [r8]
 80208c8:	e01c      	b.n	8020904 <ppm_thread+0x84>
 80208ca:	2201      	movs	r2, #1
 80208cc:	fa02 f303 	lsl.w	r3, r2, r3
 80208d0:	f013 0fa4 	tst.w	r3, #164	; 0xa4
 80208d4:	d039      	beq.n	802094a <ppm_thread+0xca>
			input_val = servo_val;
 80208d6:	ed9d 7a03 	vldr	s14, [sp, #12]
 80208da:	4bad      	ldr	r3, [pc, #692]	; (8020b90 <ppm_thread+0x310>)
			servo_val += 1.0;
 80208dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80208e0:	ee77 7a27 	vadd.f32	s15, s14, s15
			servo_val /= 2.0;
 80208e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80208e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			input_val = servo_val;
 80208ec:	ed83 7a00 	vstr	s14, [r3]
			servo_val /= 2.0;
 80208f0:	edcd 7a03 	vstr	s15, [sp, #12]
		if (timeout_has_timeout() || servodec_get_time_since_update() > timeout_get_timeout_msec() ||
 80208f4:	f7f9 fc9c 	bl	801a230 <timeout_has_timeout>
 80208f8:	4683      	mov	fp, r0
 80208fa:	2800      	cmp	r0, #0
 80208fc:	d040      	beq.n	8020980 <ppm_thread+0x100>
			pulses_without_power = 0;
 80208fe:	4da5      	ldr	r5, [pc, #660]	; (8020b94 <ppm_thread+0x314>)
 8020900:	2300      	movs	r3, #0
 8020902:	602b      	str	r3, [r5, #0]
		chEvtWaitAny((eventmask_t) 1);
 8020904:	2001      	movs	r0, #1
 8020906:	f7ed facb 	bl	800dea0 <chEvtWaitAny>
		if (stop_now) {
 802090a:	7833      	ldrb	r3, [r6, #0]
 802090c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8020910:	2b00      	cmp	r3, #0
 8020912:	f040 8082 	bne.w	8020a1a <ppm_thread+0x19a>
		const volatile mc_configuration *mcconf = mc_interface_get_configuration();
 8020916:	f7fa fd93 	bl	801b440 <mc_interface_get_configuration>
 802091a:	4681      	mov	r9, r0
		const float rpm_now = mc_interface_get_rpm();
 802091c:	f7fa fe28 	bl	801b570 <mc_interface_get_rpm>
		float servo_val = servodec_get_servo(0);
 8020920:	4628      	mov	r0, r5
		const float rpm_now = mc_interface_get_rpm();
 8020922:	eeb0 8a40 	vmov.f32	s16, s0
		float servo_val = servodec_get_servo(0);
 8020926:	f7f5 f84b 	bl	80159c0 <servodec_get_servo>
		float servo_ms = utils_map(servo_val, -1.0, 1.0, config.pulse_start, config.pulse_end);
 802092a:	edd4 1a03 	vldr	s3, [r4, #12]
 802092e:	ed94 2a04 	vldr	s4, [r4, #16]
		float servo_val = servodec_get_servo(0);
 8020932:	ed8d 0a03 	vstr	s0, [sp, #12]
		float servo_ms = utils_map(servo_val, -1.0, 1.0, config.pulse_start, config.pulse_end);
 8020936:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 802093a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 802093e:	f7f5 f91f 	bl	8015b80 <utils_map>
		switch (config.ctrl_type) {
 8020942:	7823      	ldrb	r3, [r4, #0]
 8020944:	b2db      	uxtb	r3, r3
 8020946:	2b07      	cmp	r3, #7
 8020948:	d9bf      	bls.n	80208ca <ppm_thread+0x4a>
			if (servo_ms < config.pulse_center) {
 802094a:	edd4 7a05 	vldr	s15, [r4, #20]
 802094e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020956:	d553      	bpl.n	8020a00 <ppm_thread+0x180>
				servo_val = utils_map(servo_ms, config.pulse_start,
 8020958:	edd4 0a03 	vldr	s1, [r4, #12]
 802095c:	ed94 1a05 	vldr	s2, [r4, #20]
 8020960:	eeb0 2a68 	vmov.f32	s4, s17
 8020964:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8020968:	f7f5 f90a 	bl	8015b80 <utils_map>
 802096c:	ed8d 0a03 	vstr	s0, [sp, #12]
			input_val = servo_val;
 8020970:	4b87      	ldr	r3, [pc, #540]	; (8020b90 <ppm_thread+0x310>)
 8020972:	ed83 0a00 	vstr	s0, [r3]
		if (timeout_has_timeout() || servodec_get_time_since_update() > timeout_get_timeout_msec() ||
 8020976:	f7f9 fc5b 	bl	801a230 <timeout_has_timeout>
 802097a:	4683      	mov	fp, r0
 802097c:	2800      	cmp	r0, #0
 802097e:	d1be      	bne.n	80208fe <ppm_thread+0x7e>
 8020980:	f7f5 f82e 	bl	80159e0 <servodec_get_time_since_update>
 8020984:	4605      	mov	r5, r0
 8020986:	f7f9 fc5b 	bl	801a240 <timeout_get_timeout_msec>
 802098a:	4285      	cmp	r5, r0
 802098c:	d8b7      	bhi.n	80208fe <ppm_thread+0x7e>
				mc_interface_get_fault() != FAULT_CODE_NONE) {
 802098e:	f7fa fd87 	bl	801b4a0 <mc_interface_get_fault>
		if (timeout_has_timeout() || servodec_get_time_since_update() > timeout_get_timeout_msec() ||
 8020992:	2800      	cmp	r0, #0
 8020994:	d1b3      	bne.n	80208fe <ppm_thread+0x7e>
		utils_deadband(&servo_val, config.hyst, 1.0);
 8020996:	ed94 0a02 	vldr	s0, [r4, #8]
		const float ramp_time = fabsf(servo_val) > fabsf(servo_val_ramp) ? config.ramp_time_pos : config.ramp_time_neg;
 802099a:	4d7f      	ldr	r5, [pc, #508]	; (8020b98 <ppm_thread+0x318>)
		utils_deadband(&servo_val, config.hyst, 1.0);
 802099c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80209a0:	a803      	add	r0, sp, #12
 80209a2:	f7f5 f8fd 	bl	8015ba0 <utils_deadband>
		servo_val = utils_throttle_curve(servo_val, config.throttle_exp, config.throttle_exp_brake, config.throttle_exp_mode);
 80209a6:	edd4 0a07 	vldr	s1, [r4, #28]
 80209aa:	ed9d 0a03 	vldr	s0, [sp, #12]
 80209ae:	ed94 1a08 	vldr	s2, [r4, #32]
 80209b2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80209b6:	f7f5 fb03 	bl	8015fc0 <utils_throttle_curve>
		const float ramp_time = fabsf(servo_val) > fabsf(servo_val_ramp) ? config.ramp_time_pos : config.ramp_time_neg;
 80209ba:	edd5 7a00 	vldr	s15, [r5]
		servo_val = utils_throttle_curve(servo_val, config.throttle_exp, config.throttle_exp_brake, config.throttle_exp_mode);
 80209be:	ed8d 0a03 	vstr	s0, [sp, #12]
		const float ramp_time = fabsf(servo_val) > fabsf(servo_val_ramp) ? config.ramp_time_pos : config.ramp_time_neg;
 80209c2:	eeb0 7ac0 	vabs.f32	s14, s0
 80209c6:	eef0 7ae7 	vabs.f32	s15, s15
 80209ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80209ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209d2:	bfcc      	ite	gt
 80209d4:	ed94 7a0a 	vldrgt	s14, [r4, #40]	; 0x28
 80209d8:	ed94 7a0b 	vldrle	s14, [r4, #44]	; 0x2c
		if (ramp_time > 0.01) {
 80209dc:	eeb4 7aca 	vcmpe.f32	s14, s20
 80209e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209e4:	dc21      	bgt.n	8020a2a <ppm_thread+0x1aa>
		switch (config.ctrl_type) {
 80209e6:	7822      	ldrb	r2, [r4, #0]
 80209e8:	3a01      	subs	r2, #1
 80209ea:	2a06      	cmp	r2, #6
 80209ec:	d88a      	bhi.n	8020904 <ppm_thread+0x84>
 80209ee:	e8df f012 	tbh	[pc, r2, lsl #1]
 80209f2:	0096      	.short	0x0096
 80209f4:	00790096 	.word	0x00790096
 80209f8:	00e100e1 	.word	0x00e100e1
 80209fc:	003f003f 	.word	0x003f003f
				servo_val = utils_map(servo_ms, config.pulse_center,
 8020a00:	edd4 0a05 	vldr	s1, [r4, #20]
 8020a04:	ed94 1a04 	vldr	s2, [r4, #16]
 8020a08:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8020a0c:	eef0 1a68 	vmov.f32	s3, s17
 8020a10:	f7f5 f8b6 	bl	8015b80 <utils_map>
 8020a14:	ed8d 0a03 	vstr	s0, [sp, #12]
 8020a18:	e7aa      	b.n	8020970 <ppm_thread+0xf0>
			is_running = false;
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	f888 3000 	strb.w	r3, [r8]
				}
			}
		}

	}
}
 8020a20:	b005      	add	sp, #20
 8020a22:	ecbd 8b0a 	vpop	{d8-d12}
 8020a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			const float ramp_step = (float)ST2MS(chVTTimeElapsedSinceX(last_time)) / (ramp_time * 1000.0);
 8020a2a:	f8df a180 	ldr.w	sl, [pc, #384]	; 8020bac <ppm_thread+0x32c>
 8020a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8020a30:	f8da 2000 	ldr.w	r2, [sl]
 8020a34:	4859      	ldr	r0, [pc, #356]	; (8020b9c <ppm_thread+0x31c>)
 8020a36:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8020ba0 <ppm_thread+0x320>
 8020a3a:	1a8a      	subs	r2, r1, r2
 8020a3c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8020a40:	f242 710f 	movw	r1, #9999	; 0x270f
 8020a44:	fb0e 1202 	mla	r2, lr, r2, r1
 8020a48:	fba0 3202 	umull	r3, r2, r0, r2
 8020a4c:	0b52      	lsrs	r2, r2, #13
 8020a4e:	ee07 2a90 	vmov	s15, r2
 8020a52:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020a56:	eef8 0ae7 	vcvt.f32.s32	s1, s15
			utils_step_towards(&servo_val_ramp, servo_val, ramp_step);
 8020a5a:	484f      	ldr	r0, [pc, #316]	; (8020b98 <ppm_thread+0x318>)
 8020a5c:	eec0 0a87 	vdiv.f32	s1, s1, s14
 8020a60:	f7f4 ffde 	bl	8015a20 <utils_step_towards>
  return ch.vtlist.vt_systime;
 8020a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
			last_time = chVTGetSystemTimeX();
 8020a66:	f8ca 2000 	str.w	r2, [sl]
			servo_val = servo_val_ramp;
 8020a6a:	682a      	ldr	r2, [r5, #0]
 8020a6c:	9203      	str	r2, [sp, #12]
 8020a6e:	e7ba      	b.n	80209e6 <ppm_thread+0x166>
			if (fabsf(servo_val) < 0.001) {
 8020a70:	eddd 7a03 	vldr	s15, [sp, #12]
 8020a74:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8020bb0 <ppm_thread+0x330>
				pulses_without_power++;
 8020a78:	4d46      	ldr	r5, [pc, #280]	; (8020b94 <ppm_thread+0x314>)
			if (fabsf(servo_val) < 0.001) {
 8020a7a:	eef0 6ae7 	vabs.f32	s13, s15
 8020a7e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8020a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a86:	d502      	bpl.n	8020a8e <ppm_thread+0x20e>
				pulses_without_power++;
 8020a88:	682a      	ldr	r2, [r5, #0]
 8020a8a:	3201      	adds	r2, #1
 8020a8c:	602a      	str	r2, [r5, #0]
			if (!(pulses_without_power < MIN_PULSES_WITHOUT_POWER && config.safe_start)) {
 8020a8e:	682a      	ldr	r2, [r5, #0]
 8020a90:	2a31      	cmp	r2, #49	; 0x31
 8020a92:	dc03      	bgt.n	8020a9c <ppm_thread+0x21c>
 8020a94:	7e62      	ldrb	r2, [r4, #25]
 8020a96:	2a00      	cmp	r2, #0
 8020a98:	f040 816b 	bne.w	8020d72 <ppm_thread+0x4f2>
				mc_interface_set_pid_speed(servo_val * config.pid_max_erpm);
 8020a9c:	ed94 0a01 	vldr	s0, [r4, #4]
		float current = 0;
 8020aa0:	eddf aa37 	vldr	s21, [pc, #220]	; 8020b80 <ppm_thread+0x300>
				mc_interface_set_pid_speed(servo_val * config.pid_max_erpm);
 8020aa4:	ee27 0a80 	vmul.f32	s0, s15, s0
		bool current_mode_brake = false;
 8020aa8:	f04f 0a00 	mov.w	sl, #0
				mc_interface_set_pid_speed(servo_val * config.pid_max_erpm);
 8020aac:	f7fb fc18 	bl	801c2e0 <mc_interface_set_pid_speed>
				send_current = true;
 8020ab0:	f04f 0b01 	mov.w	fp, #1
		bool current_mode = false;
 8020ab4:	f8cd a004 	str.w	sl, [sp, #4]
		if (pulses_without_power < MIN_PULSES_WITHOUT_POWER && config.safe_start) {
 8020ab8:	682a      	ldr	r2, [r5, #0]
 8020aba:	2a31      	cmp	r2, #49	; 0x31
 8020abc:	f300 80a7 	bgt.w	8020c0e <ppm_thread+0x38e>
 8020ac0:	7e62      	ldrb	r2, [r4, #25]
 8020ac2:	2a00      	cmp	r2, #0
 8020ac4:	f000 80a3 	beq.w	8020c0e <ppm_thread+0x38e>
			if (pulses_without_power == pulses_without_power_before) {
 8020ac8:	4b36      	ldr	r3, [pc, #216]	; (8020ba4 <ppm_thread+0x324>)
 8020aca:	6829      	ldr	r1, [r5, #0]
 8020acc:	681a      	ldr	r2, [r3, #0]
 8020ace:	4291      	cmp	r1, r2
				pulses_without_power = 0;
 8020ad0:	bf04      	itt	eq
 8020ad2:	2200      	moveq	r2, #0
 8020ad4:	602a      	streq	r2, [r5, #0]
			pulses_without_power_before = pulses_without_power;
 8020ad6:	682a      	ldr	r2, [r5, #0]
 8020ad8:	601a      	str	r2, [r3, #0]
			mc_interface_set_brake_current(timeout_get_brake_current());
 8020ada:	f7f9 fbb9 	bl	801a250 <timeout_get_brake_current>
 8020ade:	f7fb fcd7 	bl	801c490 <mc_interface_set_brake_current>
			continue;
 8020ae2:	e70f      	b.n	8020904 <ppm_thread+0x84>
			if (servo_val >= 0.0) {
 8020ae4:	eddd 7a03 	vldr	s15, [sp, #12]
 8020ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020af0:	f2c0 81b9 	blt.w	8020e66 <ppm_thread+0x5e6>
				current = servo_val * mcconf->lo_current_motor_max_now;
 8020af4:	edd9 aa1d 	vldr	s21, [r9, #116]	; 0x74
 8020af8:	ee67 aaaa 	vmul.f32	s21, s15, s21
		bool current_mode_brake = false;
 8020afc:	f04f 0a00 	mov.w	sl, #0
			if (servo_val < 0.001) {
 8020b00:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8020bb0 <ppm_thread+0x330>
				pulses_without_power++;
 8020b04:	4d23      	ldr	r5, [pc, #140]	; (8020b94 <ppm_thread+0x314>)
			if (servo_val < 0.001) {
 8020b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b0e:	f140 8137 	bpl.w	8020d80 <ppm_thread+0x500>
				pulses_without_power++;
 8020b12:	682a      	ldr	r2, [r5, #0]
			current_mode = true;
 8020b14:	2301      	movs	r3, #1
				pulses_without_power++;
 8020b16:	3201      	adds	r2, #1
 8020b18:	602a      	str	r2, [r5, #0]
			current_mode = true;
 8020b1a:	9301      	str	r3, [sp, #4]
 8020b1c:	e7cc      	b.n	8020ab8 <ppm_thread+0x238>
			if ((servo_val >= 0.0 && rpm_now > 0.0) || (servo_val < 0.0 && rpm_now < 0.0)) {
 8020b1e:	eddd 7a03 	vldr	s15, [sp, #12]
 8020b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b2a:	f2c0 8132 	blt.w	8020d92 <ppm_thread+0x512>
 8020b2e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8020b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b36:	f340 812c 	ble.w	8020d92 <ppm_thread+0x512>
				current = servo_val * mcconf->lo_current_motor_max_now;
 8020b3a:	edd9 aa1d 	vldr	s21, [r9, #116]	; 0x74
 8020b3e:	ee67 aaaa 	vmul.f32	s21, s15, s21
			if (fabsf(servo_val) < 0.001) {
 8020b42:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8020bb0 <ppm_thread+0x330>
 8020b46:	eef0 7ae7 	vabs.f32	s15, s15
 8020b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b52:	f140 8118 	bpl.w	8020d86 <ppm_thread+0x506>
				pulses_without_power++;
 8020b56:	4d0f      	ldr	r5, [pc, #60]	; (8020b94 <ppm_thread+0x314>)
 8020b58:	682a      	ldr	r2, [r5, #0]
			current_mode = true;
 8020b5a:	2301      	movs	r3, #1
				pulses_without_power++;
 8020b5c:	3201      	adds	r2, #1
 8020b5e:	602a      	str	r2, [r5, #0]
		bool current_mode_brake = false;
 8020b60:	f04f 0a00 	mov.w	sl, #0
			current_mode = true;
 8020b64:	9301      	str	r3, [sp, #4]
 8020b66:	e7a7      	b.n	8020ab8 <ppm_thread+0x238>
 8020b68:	20001a40 	.word	0x20001a40
 8020b6c:	2000d914 	.word	0x2000d914
 8020b70:	080306b0 	.word	0x080306b0
 8020b74:	2000def0 	.word	0x2000def0
 8020b78:	20001046 	.word	0x20001046
 8020b7c:	08020ee1 	.word	0x08020ee1
 8020b80:	00000000 	.word	0x00000000
 8020b84:	3c23d70a 	.word	0x3c23d70a
 8020b88:	461c4000 	.word	0x461c4000
 8020b8c:	3dcccccd 	.word	0x3dcccccd
 8020b90:	2000d94c 	.word	0x2000d94c
 8020b94:	2000def4 	.word	0x2000def4
 8020b98:	2000defc 	.word	0x2000defc
 8020b9c:	d1b71759 	.word	0xd1b71759
 8020ba0:	447a0000 	.word	0x447a0000
 8020ba4:	2000def8 	.word	0x2000def8
 8020ba8:	2000d950 	.word	0x2000d950
 8020bac:	2000d954 	.word	0x2000d954
 8020bb0:	3a83126f 	.word	0x3a83126f
			if (fabsf(servo_val) < 0.001) {
 8020bb4:	ed9d 0a03 	vldr	s0, [sp, #12]
 8020bb8:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8020bb0 <ppm_thread+0x330>
				pulses_without_power++;
 8020bbc:	4dc3      	ldr	r5, [pc, #780]	; (8020ecc <ppm_thread+0x64c>)
			if (fabsf(servo_val) < 0.001) {
 8020bbe:	eeb0 7ac0 	vabs.f32	s14, s0
 8020bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bca:	d502      	bpl.n	8020bd2 <ppm_thread+0x352>
				pulses_without_power++;
 8020bcc:	682a      	ldr	r2, [r5, #0]
 8020bce:	3201      	adds	r2, #1
 8020bd0:	602a      	str	r2, [r5, #0]
			if (!(pulses_without_power < MIN_PULSES_WITHOUT_POWER && config.safe_start)) {
 8020bd2:	682a      	ldr	r2, [r5, #0]
 8020bd4:	2a31      	cmp	r2, #49	; 0x31
 8020bd6:	dc03      	bgt.n	8020be0 <ppm_thread+0x360>
 8020bd8:	7e62      	ldrb	r2, [r4, #25]
 8020bda:	2a00      	cmp	r2, #0
 8020bdc:	f040 80c9 	bne.w	8020d72 <ppm_thread+0x4f2>
				mc_interface_set_duty(utils_map(servo_val, -1.0, 1.0, -mcconf->l_max_duty, mcconf->l_max_duty));
 8020be0:	edd9 1a16 	vldr	s3, [r9, #88]	; 0x58
 8020be4:	ed99 2a16 	vldr	s4, [r9, #88]	; 0x58
		float current = 0;
 8020be8:	eddf aab9 	vldr	s21, [pc, #740]	; 8020ed0 <ppm_thread+0x650>
				mc_interface_set_duty(utils_map(servo_val, -1.0, 1.0, -mcconf->l_max_duty, mcconf->l_max_duty));
 8020bec:	eef1 1a61 	vneg.f32	s3, s3
 8020bf0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8020bf4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8020bf8:	f7f4 ffc2 	bl	8015b80 <utils_map>
		bool current_mode_brake = false;
 8020bfc:	f04f 0a00 	mov.w	sl, #0
				mc_interface_set_duty(utils_map(servo_val, -1.0, 1.0, -mcconf->l_max_duty, mcconf->l_max_duty));
 8020c00:	f7fb fb36 	bl	801c270 <mc_interface_set_duty>
				send_current = true;
 8020c04:	f04f 0b01 	mov.w	fp, #1
		bool current_mode = false;
 8020c08:	f8cd a004 	str.w	sl, [sp, #4]
 8020c0c:	e754      	b.n	8020ab8 <ppm_thread+0x238>
		float rpm_local = mc_interface_get_rpm();
 8020c0e:	f7fa fcaf 	bl	801b570 <mc_interface_get_rpm>
		if (config.multi_esc) {
 8020c12:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
		float rpm_local = mc_interface_get_rpm();
 8020c16:	eeb0 ba40 	vmov.f32	s22, s0
 8020c1a:	eeb0 8a40 	vmov.f32	s16, s0
		if (config.multi_esc) {
 8020c1e:	b32a      	cbz	r2, 8020c6c <ppm_thread+0x3ec>
 8020c20:	2500      	movs	r5, #0
				can_status_msg *msg = comm_can_get_status_msg_index(i);
 8020c22:	4628      	mov	r0, r5
 8020c24:	f7f9 ff54 	bl	801aad0 <comm_can_get_status_msg_index>
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020c28:	6802      	ldr	r2, [r0, #0]
 8020c2a:	2a00      	cmp	r2, #0
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020c2c:	f105 0501 	add.w	r5, r5, #1
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020c30:	db1a      	blt.n	8020c68 <ppm_thread+0x3e8>
 8020c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8020c34:	6841      	ldr	r1, [r0, #4]
 8020c36:	1a52      	subs	r2, r2, r1
 8020c38:	ee07 2a90 	vmov	s15, r2
 8020c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
					if (fabsf(rpm_tmp) < fabsf(rpm_lowest)) {
 8020c40:	eef0 6ac8 	vabs.f32	s13, s16
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020c44:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 8020c48:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8020c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c50:	d50a      	bpl.n	8020c68 <ppm_thread+0x3e8>
					float rpm_tmp = msg->rpm;
 8020c52:	edd0 7a02 	vldr	s15, [r0, #8]
					if (fabsf(rpm_tmp) < fabsf(rpm_lowest)) {
 8020c56:	eeb0 7ae7 	vabs.f32	s14, s15
						rpm_lowest = rpm_tmp;
 8020c5a:	eeb4 7a66 	vcmp.f32	s14, s13
 8020c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c62:	bf48      	it	mi
 8020c64:	eeb0 8a67 	vmovmi.f32	s16, s15
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020c68:	2d0a      	cmp	r5, #10
 8020c6a:	d1da      	bne.n	8020c22 <ppm_thread+0x3a2>
		if (send_current && config.multi_esc) {
 8020c6c:	f1bb 0f00 	cmp.w	fp, #0
 8020c70:	d004      	beq.n	8020c7c <ppm_thread+0x3fc>
 8020c72:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	f040 80d0 	bne.w	8020e1c <ppm_thread+0x59c>
		if (current_mode) {
 8020c7c:	9b01      	ldr	r3, [sp, #4]
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	f43f ae40 	beq.w	8020904 <ppm_thread+0x84>
			if (current_mode_brake) {
 8020c84:	f1ba 0f00 	cmp.w	sl, #0
 8020c88:	f040 80a3 	bne.w	8020dd2 <ppm_thread+0x552>
				if (current_out < 0.0) {
 8020c8c:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8020c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				if (config.multi_esc) {
 8020c94:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
				if (current_out < 0.0) {
 8020c98:	f100 80ee 	bmi.w	8020e78 <ppm_thread+0x5f8>
				if (config.multi_esc) {
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	f000 8085 	beq.w	8020dac <ppm_thread+0x52c>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020ca2:	eef0 ba6a 	vmov.f32	s23, s21
								if (current_out < mcconf->cc_min_current) {
 8020ca6:	ed9f ca8b 	vldr	s24, [pc, #556]	; 8020ed4 <ppm_thread+0x654>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020caa:	2500      	movs	r5, #0
 8020cac:	e028      	b.n	8020d00 <ppm_thread+0x480>
								float rpm_tmp = msg->rpm;
 8020cae:	ed90 0a02 	vldr	s0, [r0, #8]
 8020cb2:	9001      	str	r0, [sp, #4]
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020cb4:	ed94 1a0d 	vldr	s2, [r4, #52]	; 0x34
 8020cb8:	eddf 0a85 	vldr	s1, [pc, #532]	; 8020ed0 <ppm_thread+0x650>
								if (is_reverse) {
 8020cbc:	f1ba 0f00 	cmp.w	sl, #0
 8020cc0:	d03c      	beq.n	8020d3c <ppm_thread+0x4bc>
									rpm_tmp = -rpm_tmp;
 8020cc2:	eeb1 0a40 	vneg.f32	s0, s0
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020cc6:	ee30 0a48 	vsub.f32	s0, s0, s16
 8020cca:	eeb0 2a68 	vmov.f32	s4, s17
 8020cce:	eef0 1a6a 	vmov.f32	s3, s21
 8020cd2:	f7f4 ff55 	bl	8015b80 <utils_map>
								if (current_out < mcconf->cc_min_current) {
 8020cd6:	edd9 7a50 	vldr	s15, [r9, #320]	; 0x140
 8020cda:	9801      	ldr	r0, [sp, #4]
 8020cdc:	eef4 7ac0 	vcmpe.f32	s15, s0
 8020ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020ce4:	eef0 ba40 	vmov.f32	s23, s0
 8020ce8:	6801      	ldr	r1, [r0, #0]
								if (current_out < mcconf->cc_min_current) {
 8020cea:	dd24      	ble.n	8020d36 <ppm_thread+0x4b6>
									current_out = 0.0;
 8020cec:	eddf ba78 	vldr	s23, [pc, #480]	; 8020ed0 <ppm_thread+0x650>
								if (current_out < mcconf->cc_min_current) {
 8020cf0:	eeb0 0a4c 	vmov.f32	s0, s24
								comm_can_set_current(msg->id, -current_out);
 8020cf4:	b2c8      	uxtb	r0, r1
 8020cf6:	f7f9 feab 	bl	801aa50 <comm_can_set_current>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020cfa:	3501      	adds	r5, #1
 8020cfc:	2d0a      	cmp	r5, #10
 8020cfe:	d05a      	beq.n	8020db6 <ppm_thread+0x536>
						can_status_msg *msg = comm_can_get_status_msg_index(i);
 8020d00:	4628      	mov	r0, r5
 8020d02:	f7f9 fee5 	bl	801aad0 <comm_can_get_status_msg_index>
						if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020d06:	6801      	ldr	r1, [r0, #0]
 8020d08:	2900      	cmp	r1, #0
 8020d0a:	dbf6      	blt.n	8020cfa <ppm_thread+0x47a>
  return ch.vtlist.vt_systime;
 8020d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8020d0e:	6842      	ldr	r2, [r0, #4]
 8020d10:	1a9b      	subs	r3, r3, r2
 8020d12:	ee07 3a90 	vmov	s15, r3
 8020d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020d1a:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 8020d1e:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8020d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d26:	d5e8      	bpl.n	8020cfa <ppm_thread+0x47a>
							if (config.tc) {
 8020d28:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d1be      	bne.n	8020cae <ppm_thread+0x42e>
							if (is_reverse) {
 8020d30:	f1ba 0f00 	cmp.w	sl, #0
 8020d34:	d017      	beq.n	8020d66 <ppm_thread+0x4e6>
 8020d36:	eeb1 0a6b 	vneg.f32	s0, s23
 8020d3a:	e7db      	b.n	8020cf4 <ppm_thread+0x474>
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020d3c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8020d40:	eeb0 2a68 	vmov.f32	s4, s17
 8020d44:	eef0 1a6a 	vmov.f32	s3, s21
 8020d48:	f7f4 ff1a 	bl	8015b80 <utils_map>
								if (current_out < mcconf->cc_min_current) {
 8020d4c:	edd9 7a50 	vldr	s15, [r9, #320]	; 0x140
 8020d50:	9801      	ldr	r0, [sp, #4]
 8020d52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020d5a:	eef0 ba40 	vmov.f32	s23, s0
 8020d5e:	6801      	ldr	r1, [r0, #0]
								if (current_out < mcconf->cc_min_current) {
 8020d60:	d501      	bpl.n	8020d66 <ppm_thread+0x4e6>
									current_out = 0.0;
 8020d62:	eddf ba5b 	vldr	s23, [pc, #364]	; 8020ed0 <ppm_thread+0x650>
								comm_can_set_current(msg->id, current_out);
 8020d66:	b2c8      	uxtb	r0, r1
 8020d68:	eeb0 0a6b 	vmov.f32	s0, s23
 8020d6c:	f7f9 fe70 	bl	801aa50 <comm_can_set_current>
 8020d70:	e7c3      	b.n	8020cfa <ppm_thread+0x47a>
		bool current_mode_brake = false;
 8020d72:	f04f 0a00 	mov.w	sl, #0
		bool current_mode = false;
 8020d76:	f8cd a004 	str.w	sl, [sp, #4]
		float current = 0;
 8020d7a:	eddf aa55 	vldr	s21, [pc, #340]	; 8020ed0 <ppm_thread+0x650>
 8020d7e:	e69b      	b.n	8020ab8 <ppm_thread+0x238>
			current_mode = true;
 8020d80:	2301      	movs	r3, #1
 8020d82:	9301      	str	r3, [sp, #4]
 8020d84:	e698      	b.n	8020ab8 <ppm_thread+0x238>
			current_mode = true;
 8020d86:	2301      	movs	r3, #1
		bool current_mode_brake = false;
 8020d88:	f04f 0a00 	mov.w	sl, #0
			current_mode = true;
 8020d8c:	9301      	str	r3, [sp, #4]
 8020d8e:	4d4f      	ldr	r5, [pc, #316]	; (8020ecc <ppm_thread+0x64c>)
 8020d90:	e692      	b.n	8020ab8 <ppm_thread+0x238>
			if ((servo_val >= 0.0 && rpm_now > 0.0) || (servo_val < 0.0 && rpm_now < 0.0)) {
 8020d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d9a:	f100 8090 	bmi.w	8020ebe <ppm_thread+0x63e>
				current = servo_val * fabsf(mcconf->lo_current_motor_min_now);
 8020d9e:	edd9 aa1e 	vldr	s21, [r9, #120]	; 0x78
 8020da2:	eef0 aaea 	vabs.f32	s21, s21
 8020da6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8020daa:	e6ca      	b.n	8020b42 <ppm_thread+0x2c2>
					mc_interface_set_current(current_out);
 8020dac:	eeb0 0a6a 	vmov.f32	s0, s21
 8020db0:	f7fb fb16 	bl	801c3e0 <mc_interface_set_current>
 8020db4:	e5a6      	b.n	8020904 <ppm_thread+0x84>
					if (config.tc) {
 8020db6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	d167      	bne.n	8020e8e <ppm_thread+0x60e>
 8020dbe:	eef0 aa6b 	vmov.f32	s21, s23
				if (is_reverse) {
 8020dc2:	f1ba 0f00 	cmp.w	sl, #0
 8020dc6:	d0f1      	beq.n	8020dac <ppm_thread+0x52c>
					mc_interface_set_current(-current_out);
 8020dc8:	eeb1 0a6a 	vneg.f32	s0, s21
 8020dcc:	f7fb fb08 	bl	801c3e0 <mc_interface_set_current>
 8020dd0:	e598      	b.n	8020904 <ppm_thread+0x84>
				mc_interface_set_brake_current(current);
 8020dd2:	eeb0 0a6a 	vmov.f32	s0, s21
 8020dd6:	f7fb fb5b 	bl	801c490 <mc_interface_set_brake_current>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020dda:	2500      	movs	r5, #0
 8020ddc:	e002      	b.n	8020de4 <ppm_thread+0x564>
 8020dde:	2d0a      	cmp	r5, #10
 8020de0:	f43f ad90 	beq.w	8020904 <ppm_thread+0x84>
					can_status_msg *msg = comm_can_get_status_msg_index(i);
 8020de4:	4628      	mov	r0, r5
 8020de6:	f7f9 fe73 	bl	801aad0 <comm_can_get_status_msg_index>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020dea:	6802      	ldr	r2, [r0, #0]
 8020dec:	2a00      	cmp	r2, #0
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020dee:	f105 0501 	add.w	r5, r5, #1
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020df2:	dbf4      	blt.n	8020dde <ppm_thread+0x55e>
 8020df4:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 8020df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8020df8:	1a5b      	subs	r3, r3, r1
 8020dfa:	ee07 3a90 	vmov	s15, r3
 8020dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020e02:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 8020e06:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8020e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e0e:	d5e6      	bpl.n	8020dde <ppm_thread+0x55e>
						comm_can_set_current_brake(msg->id, current);
 8020e10:	b2d0      	uxtb	r0, r2
 8020e12:	eeb0 0a6a 	vmov.f32	s0, s21
 8020e16:	f7f9 fe3b 	bl	801aa90 <comm_can_set_current_brake>
 8020e1a:	e7e0      	b.n	8020dde <ppm_thread+0x55e>
			float current = mc_interface_get_tot_current_directional_filtered();
 8020e1c:	f7fa fc68 	bl	801b6f0 <mc_interface_get_tot_current_directional_filtered>
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020e20:	2500      	movs	r5, #0
			float current = mc_interface_get_tot_current_directional_filtered();
 8020e22:	eef0 ba40 	vmov.f32	s23, s0
 8020e26:	e002      	b.n	8020e2e <ppm_thread+0x5ae>
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020e28:	2d0a      	cmp	r5, #10
 8020e2a:	f43f af27 	beq.w	8020c7c <ppm_thread+0x3fc>
				can_status_msg *msg = comm_can_get_status_msg_index(i);
 8020e2e:	4628      	mov	r0, r5
 8020e30:	f7f9 fe4e 	bl	801aad0 <comm_can_get_status_msg_index>
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020e34:	6802      	ldr	r2, [r0, #0]
 8020e36:	2a00      	cmp	r2, #0
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8020e38:	f105 0501 	add.w	r5, r5, #1
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8020e3c:	dbf4      	blt.n	8020e28 <ppm_thread+0x5a8>
 8020e3e:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 8020e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8020e42:	1a5b      	subs	r3, r3, r1
 8020e44:	ee07 3a90 	vmov	s15, r3
 8020e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020e4c:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 8020e50:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8020e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e58:	d5e6      	bpl.n	8020e28 <ppm_thread+0x5a8>
					comm_can_set_current(msg->id, current);
 8020e5a:	b2d0      	uxtb	r0, r2
 8020e5c:	eeb0 0a6b 	vmov.f32	s0, s23
 8020e60:	f7f9 fdf6 	bl	801aa50 <comm_can_set_current>
 8020e64:	e7e0      	b.n	8020e28 <ppm_thread+0x5a8>
				current = fabsf(servo_val * mcconf->lo_current_motor_min_now);
 8020e66:	edd9 aa1e 	vldr	s21, [r9, #120]	; 0x78
 8020e6a:	ee67 aaaa 	vmul.f32	s21, s15, s21
				current_mode_brake = true;
 8020e6e:	f04f 0a01 	mov.w	sl, #1
				current = fabsf(servo_val * mcconf->lo_current_motor_min_now);
 8020e72:	eef0 aaea 	vabs.f32	s21, s21
 8020e76:	e643      	b.n	8020b00 <ppm_thread+0x280>
					current_out = -current_out;
 8020e78:	eef1 aa6a 	vneg.f32	s21, s21
				if (config.multi_esc) {
 8020e7c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d0a1      	beq.n	8020dc8 <ppm_thread+0x548>
					rpm_local = -rpm_local;
 8020e84:	eeb1 ba4b 	vneg.f32	s22, s22
					rpm_lowest = -rpm_lowest;
 8020e88:	eeb1 8a48 	vneg.f32	s16, s16
 8020e8c:	e709      	b.n	8020ca2 <ppm_thread+0x422>
						current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020e8e:	ed94 1a0d 	vldr	s2, [r4, #52]	; 0x34
 8020e92:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8020ed0 <ppm_thread+0x650>
 8020e96:	eef0 1a6a 	vmov.f32	s3, s21
 8020e9a:	ee3b 0a48 	vsub.f32	s0, s22, s16
 8020e9e:	eeb0 2a68 	vmov.f32	s4, s17
 8020ea2:	f7f4 fe6d 	bl	8015b80 <utils_map>
						if (current_out < mcconf->cc_min_current) {
 8020ea6:	edd9 7a50 	vldr	s15, [r9, #320]	; 0x140
							current_out = 0.0;
 8020eaa:	eeb4 0a67 	vcmp.f32	s0, s15
						current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8020eae:	eef0 ba40 	vmov.f32	s23, s0
							current_out = 0.0;
 8020eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020eb6:	bf48      	it	mi
 8020eb8:	eef0 ba68 	vmovmi.f32	s23, s17
 8020ebc:	e77f      	b.n	8020dbe <ppm_thread+0x53e>
			if ((servo_val >= 0.0 && rpm_now > 0.0) || (servo_val < 0.0 && rpm_now < 0.0)) {
 8020ebe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8020ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ec6:	f57f af6a 	bpl.w	8020d9e <ppm_thread+0x51e>
 8020eca:	e636      	b.n	8020b3a <ppm_thread+0x2ba>
 8020ecc:	2000def4 	.word	0x2000def4
 8020ed0:	00000000 	.word	0x00000000
 8020ed4:	80000000 	.word	0x80000000
	...

08020ee0 <servodec_func>:
static void servodec_func(void) {
 8020ee0:	b508      	push	{r3, lr}
 8020ee2:	2320      	movs	r3, #32
 8020ee4:	f383 8811 	msr	BASEPRI, r3
	timeout_reset();
 8020ee8:	f7f9 f992 	bl	801a210 <timeout_reset>
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 8020eec:	4b04      	ldr	r3, [pc, #16]	; (8020f00 <servodec_func+0x20>)
 8020eee:	2101      	movs	r1, #1
 8020ef0:	6818      	ldr	r0, [r3, #0]
 8020ef2:	f7ec ff95 	bl	800de20 <chEvtSignalI>
 8020ef6:	2300      	movs	r3, #0
 8020ef8:	f383 8811 	msr	BASEPRI, r3
 8020efc:	bd08      	pop	{r3, pc}
 8020efe:	bf00      	nop
 8020f00:	2000def0 	.word	0x2000def0
	...

08020f10 <update>:
	if (!is_running) {
 8020f10:	4b0e      	ldr	r3, [pc, #56]	; (8020f4c <update+0x3c>)
 8020f12:	781b      	ldrb	r3, [r3, #0]
 8020f14:	b903      	cbnz	r3, 8020f18 <update+0x8>
 8020f16:	4770      	bx	lr
static void update(void *p) {
 8020f18:	b510      	push	{r4, lr}
 8020f1a:	2320      	movs	r3, #32
 8020f1c:	4604      	mov	r4, r0
 8020f1e:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8020f22:	480b      	ldr	r0, [pc, #44]	; (8020f50 <update+0x40>)
 8020f24:	68c3      	ldr	r3, [r0, #12]
 8020f26:	b10b      	cbz	r3, 8020f2c <update+0x1c>
    chVTDoResetI(vtp);
 8020f28:	f7ec fb6a 	bl	800d600 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8020f2c:	4623      	mov	r3, r4
 8020f2e:	4a09      	ldr	r2, [pc, #36]	; (8020f54 <update+0x44>)
 8020f30:	4807      	ldr	r0, [pc, #28]	; (8020f50 <update+0x40>)
 8020f32:	2114      	movs	r1, #20
 8020f34:	f7ec fb44 	bl	800d5c0 <chVTDoSetI>
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 8020f38:	4b07      	ldr	r3, [pc, #28]	; (8020f58 <update+0x48>)
 8020f3a:	2101      	movs	r1, #1
 8020f3c:	6818      	ldr	r0, [r3, #0]
 8020f3e:	f7ec ff6f 	bl	800de20 <chEvtSignalI>
 8020f42:	2300      	movs	r3, #0
 8020f44:	f383 8811 	msr	BASEPRI, r3
 8020f48:	bd10      	pop	{r4, pc}
 8020f4a:	bf00      	nop
 8020f4c:	2000d950 	.word	0x2000d950
 8020f50:	2000df00 	.word	0x2000df00
 8020f54:	08020f11 	.word	0x08020f11
 8020f58:	2000def0 	.word	0x2000def0
 8020f5c:	00000000 	.word	0x00000000

08020f60 <app_ppm_configure>:
void app_ppm_configure(ppm_config *conf) {
 8020f60:	b4f0      	push	{r4, r5, r6, r7}
	config = *conf;
 8020f62:	4605      	mov	r5, r0
 8020f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020f66:	4e0d      	ldr	r6, [pc, #52]	; (8020f9c <app_ppm_configure+0x3c>)
	pulses_without_power = 0;
 8020f68:	4f0d      	ldr	r7, [pc, #52]	; (8020fa0 <app_ppm_configure+0x40>)
	config = *conf;
 8020f6a:	4634      	mov	r4, r6
 8020f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020f76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020f7a:	e884 0003 	stmia.w	r4, {r0, r1}
	pulses_without_power = 0;
 8020f7e:	2200      	movs	r2, #0
	if (is_running) {
 8020f80:	4b08      	ldr	r3, [pc, #32]	; (8020fa4 <app_ppm_configure+0x44>)
	pulses_without_power = 0;
 8020f82:	603a      	str	r2, [r7, #0]
	if (is_running) {
 8020f84:	781b      	ldrb	r3, [r3, #0]
 8020f86:	b90b      	cbnz	r3, 8020f8c <app_ppm_configure+0x2c>
}
 8020f88:	bcf0      	pop	{r4, r5, r6, r7}
 8020f8a:	4770      	bx	lr
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8020f8c:	ed96 0a03 	vldr	s0, [r6, #12]
 8020f90:	edd6 0a04 	vldr	s1, [r6, #16]
 8020f94:	7e30      	ldrb	r0, [r6, #24]
}
 8020f96:	bcf0      	pop	{r4, r5, r6, r7}
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8020f98:	f7f4 bd02 	b.w	80159a0 <servodec_set_pulse_options>
 8020f9c:	2000d914 	.word	0x2000d914
 8020fa0:	2000def4 	.word	0x2000def4
 8020fa4:	2000d950 	.word	0x2000d950
	...

08020fb0 <app_ppm_start>:
void app_ppm_start(void) {
 8020fb0:	b530      	push	{r4, r5, lr}
 8020fb2:	b083      	sub	sp, #12
	stop_now = false;
 8020fb4:	2400      	movs	r4, #0
 8020fb6:	4d0e      	ldr	r5, [pc, #56]	; (8020ff0 <app_ppm_start+0x40>)
	chThdCreateStatic(ppm_thread_wa, sizeof(ppm_thread_wa), NORMALPRIO, ppm_thread, NULL);
 8020fb8:	4b0e      	ldr	r3, [pc, #56]	; (8020ff4 <app_ppm_start+0x44>)
 8020fba:	9400      	str	r4, [sp, #0]
 8020fbc:	2240      	movs	r2, #64	; 0x40
 8020fbe:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8020fc2:	480d      	ldr	r0, [pc, #52]	; (8020ff8 <app_ppm_start+0x48>)
	stop_now = false;
 8020fc4:	702c      	strb	r4, [r5, #0]
	chThdCreateStatic(ppm_thread_wa, sizeof(ppm_thread_wa), NORMALPRIO, ppm_thread, NULL);
 8020fc6:	f7ec fcd3 	bl	800d970 <chThdCreateStatic>
 8020fca:	2320      	movs	r3, #32
 8020fcc:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8020fd0:	480a      	ldr	r0, [pc, #40]	; (8020ffc <app_ppm_start+0x4c>)
 8020fd2:	68c3      	ldr	r3, [r0, #12]
 8020fd4:	b10b      	cbz	r3, 8020fda <app_ppm_start+0x2a>
    chVTDoResetI(vtp);
 8020fd6:	f7ec fb13 	bl	800d600 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8020fda:	2300      	movs	r3, #0
 8020fdc:	4a08      	ldr	r2, [pc, #32]	; (8021000 <app_ppm_start+0x50>)
 8020fde:	4807      	ldr	r0, [pc, #28]	; (8020ffc <app_ppm_start+0x4c>)
 8020fe0:	210a      	movs	r1, #10
 8020fe2:	f7ec faed 	bl	800d5c0 <chVTDoSetI>
 8020fe6:	2300      	movs	r3, #0
 8020fe8:	f383 8811 	msr	BASEPRI, r3
}
 8020fec:	b003      	add	sp, #12
 8020fee:	bd30      	pop	{r4, r5, pc}
 8020ff0:	20001046 	.word	0x20001046
 8020ff4:	08020881 	.word	0x08020881
 8020ff8:	2000d958 	.word	0x2000d958
 8020ffc:	2000df00 	.word	0x2000df00
 8021000:	08020f11 	.word	0x08020f11
	...

08021010 <app_ppm_stop>:
	stop_now = true;
 8021010:	4b0a      	ldr	r3, [pc, #40]	; (802103c <app_ppm_stop+0x2c>)
void app_ppm_stop(void) {
 8021012:	b510      	push	{r4, lr}
	stop_now = true;
 8021014:	2101      	movs	r1, #1
	if (is_running) {
 8021016:	4c0a      	ldr	r4, [pc, #40]	; (8021040 <app_ppm_stop+0x30>)
	stop_now = true;
 8021018:	7019      	strb	r1, [r3, #0]
	if (is_running) {
 802101a:	7823      	ldrb	r3, [r4, #0]
 802101c:	b11b      	cbz	r3, 8021026 <app_ppm_stop+0x16>
 802101e:	e006      	b.n	802102e <app_ppm_stop+0x1e>
		chThdSleepMilliseconds(1);
 8021020:	200a      	movs	r0, #10
 8021022:	f7ec fcdd 	bl	800d9e0 <chThdSleep>
	while(is_running) {
 8021026:	7823      	ldrb	r3, [r4, #0]
 8021028:	2b00      	cmp	r3, #0
 802102a:	d1f9      	bne.n	8021020 <app_ppm_stop+0x10>
 802102c:	bd10      	pop	{r4, pc}
		chEvtSignalI(ppm_tp, (eventmask_t) 1);
 802102e:	4b05      	ldr	r3, [pc, #20]	; (8021044 <app_ppm_stop+0x34>)
 8021030:	6818      	ldr	r0, [r3, #0]
 8021032:	f7ec fef5 	bl	800de20 <chEvtSignalI>
		servodec_stop();
 8021036:	f7f4 fc83 	bl	8015940 <servodec_stop>
 802103a:	e7f4      	b.n	8021026 <app_ppm_stop+0x16>
 802103c:	20001046 	.word	0x20001046
 8021040:	2000d950 	.word	0x2000d950
 8021044:	2000def0 	.word	0x2000def0
	...

08021050 <app_ppm_get_decoded_level>:
	return input_val;
 8021050:	4b01      	ldr	r3, [pc, #4]	; (8021058 <app_ppm_get_decoded_level+0x8>)
}
 8021052:	ed93 0a00 	vldr	s0, [r3]
 8021056:	4770      	bx	lr
 8021058:	2000d94c 	.word	0x2000d94c
 802105c:	00000000 	.word	0x00000000

08021060 <adc_thread>:
float app_adc_get_voltage2(void) {
	return read_voltage2;
}


static THD_FUNCTION(adc_thread, arg) {
 8021060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)arg;

	chRegSetThreadName("APP_ADC");

	// Set servo pin as an input with pullup
	if (use_rx_tx_as_buttons) {
 8021064:	4bb9      	ldr	r3, [pc, #740]	; (802134c <adc_thread+0x2ec>)
 8021066:	f8df 8338 	ldr.w	r8, [pc, #824]	; 80213a0 <adc_thread+0x340>
 802106a:	781b      	ldrb	r3, [r3, #0]
 802106c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8021070:	49b7      	ldr	r1, [pc, #732]	; (8021350 <adc_thread+0x2f0>)
static THD_FUNCTION(adc_thread, arg) {
 8021072:	ed2d 8b0a 	vpush	{d8-d12}
 8021076:	6191      	str	r1, [r2, #24]
 8021078:	b085      	sub	sp, #20
		palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT_PULLUP);
 802107a:	2220      	movs	r2, #32
	if (use_rx_tx_as_buttons) {
 802107c:	2b00      	cmp	r3, #0
 802107e:	f000 8546 	beq.w	8021b0e <adc_thread+0xaae>
		palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT_PULLUP);
 8021082:	2140      	movs	r1, #64	; 0x40
 8021084:	48b3      	ldr	r0, [pc, #716]	; (8021354 <adc_thread+0x2f4>)
 8021086:	f7ee febb 	bl	800fe00 <_pal_lld_setgroupmode>
		palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_INPUT_PULLUP);
 802108a:	2220      	movs	r2, #32
 802108c:	2180      	movs	r1, #128	; 0x80
 802108e:	48b1      	ldr	r0, [pc, #708]	; (8021354 <adc_thread+0x2f4>)
 8021090:	f7ee feb6 	bl	800fe00 <_pal_lld_setgroupmode>
	} else {
		palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_INPUT_PULLUP);
	}

	is_running = true;
 8021094:	4ab0      	ldr	r2, [pc, #704]	; (8021358 <adc_thread+0x2f8>)
 8021096:	4cb1      	ldr	r4, [pc, #708]	; (802135c <adc_thread+0x2fc>)
			return;
		}

		// For safe start when fault codes occur
		if (mc_interface_get_fault() != FAULT_CODE_NONE) {
			ms_without_power = 0;
 8021098:	ed9f 8ab1 	vldr	s16, [pc, #708]	; 8021360 <adc_thread+0x300>
		}

		// Read the external ADC pin and convert the value to a voltage.
		float pwr = (float)ADC_Value[ADC_IND_EXT];
		pwr /= 4095;
 802109c:	eddf 9ab1 	vldr	s19, [pc, #708]	; 8021364 <adc_thread+0x304>
			float duty = mc_interface_get_duty_cycle_now();

			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
				can_status_msg *msg = comm_can_get_status_msg_index(i);

				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 80210a0:	eddf 8ab1 	vldr	s17, [pc, #708]	; 8021368 <adc_thread+0x308>
 80210a4:	ed9f 9ab1 	vldr	s18, [pc, #708]	; 802136c <adc_thread+0x30c>
	is_running = true;
 80210a8:	2301      	movs	r3, #1
 80210aa:	7013      	strb	r3, [r2, #0]
		systime_t sleep_time = CH_CFG_ST_FREQUENCY / config.update_rate_hz;
 80210ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80210ae:	f242 7a10 	movw	sl, #10000	; 0x2710
 80210b2:	fbba faf3 	udiv	sl, sl, r3
			sleep_time = 1;
 80210b6:	f1ba 0f00 	cmp.w	sl, #0
 80210ba:	bf08      	it	eq
 80210bc:	f04f 0a01 	moveq.w	sl, #1
		chThdSleep(sleep_time);
 80210c0:	4650      	mov	r0, sl
 80210c2:	f7ec fc8d 	bl	800d9e0 <chThdSleep>
		if (stop_now) {
 80210c6:	4baa      	ldr	r3, [pc, #680]	; (8021370 <adc_thread+0x310>)
 80210c8:	781b      	ldrb	r3, [r3, #0]
 80210ca:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	f040 8498 	bne.w	8021a04 <adc_thread+0x9a4>
		if (mc_interface_get_fault() != FAULT_CODE_NONE) {
 80210d4:	f7fa f9e4 	bl	801b4a0 <mc_interface_get_fault>
 80210d8:	b118      	cbz	r0, 80210e2 <adc_thread+0x82>
			ms_without_power = 0;
 80210da:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 80213a4 <adc_thread+0x344>
 80210de:	ed8b 8a00 	vstr	s16, [fp]
		float pwr = (float)ADC_Value[ADC_IND_EXT];
 80210e2:	4da4      	ldr	r5, [pc, #656]	; (8021374 <adc_thread+0x314>)
		pwr *= V_REG;
 80210e4:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 8021378 <adc_thread+0x318>
		float pwr = (float)ADC_Value[ADC_IND_EXT];
 80210e8:	8aab      	ldrh	r3, [r5, #20]
		read_voltage = pwr;
 80210ea:	4aa4      	ldr	r2, [pc, #656]	; (802137c <adc_thread+0x31c>)
		float pwr = (float)ADC_Value[ADC_IND_EXT];
 80210ec:	b29b      	uxth	r3, r3
 80210ee:	ee07 3a90 	vmov	s15, r3
 80210f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		pwr /= 4095;
 80210f6:	eec7 7a29 	vdiv.f32	s15, s14, s19
		pwr *= V_REG;
 80210fa:	ee27 0a80 	vmul.f32	s0, s15, s0
		read_voltage = pwr;
 80210fe:	ed82 0a00 	vstr	s0, [r2]
		if (config.use_filter) {
 8021102:	7f23      	ldrb	r3, [r4, #28]
		pwr *= V_REG;
 8021104:	ed8d 0a02 	vstr	s0, [sp, #8]
		if (config.use_filter) {
 8021108:	b1f3      	cbz	r3, 8021148 <adc_thread+0xe8>
			filter_buffer[filter_ptr++] = pwr;
 802110a:	4a9d      	ldr	r2, [pc, #628]	; (8021380 <adc_thread+0x320>)
 802110c:	4b9d      	ldr	r3, [pc, #628]	; (8021384 <adc_thread+0x324>)
 802110e:	6810      	ldr	r0, [r2, #0]
			sleep_time = 1;
 8021110:	eddf 7a93 	vldr	s15, [pc, #588]	; 8021360 <adc_thread+0x300>
			filter_buffer[filter_ptr++] = pwr;
 8021114:	1c41      	adds	r1, r0, #1
 8021116:	eb03 0380 	add.w	r3, r3, r0, lsl #2
			if (filter_ptr >= FILTER_SAMPLES) {
 802111a:	2904      	cmp	r1, #4
			filter_buffer[filter_ptr++] = pwr;
 802111c:	ed83 0a00 	vstr	s0, [r3]
				filter_ptr = 0;
 8021120:	bfc8      	it	gt
 8021122:	2300      	movgt	r3, #0
			filter_buffer[filter_ptr++] = pwr;
 8021124:	6011      	str	r1, [r2, #0]
				filter_ptr = 0;
 8021126:	bfc8      	it	gt
 8021128:	6013      	strgt	r3, [r2, #0]
 802112a:	4b96      	ldr	r3, [pc, #600]	; (8021384 <adc_thread+0x324>)
 802112c:	f103 0214 	add.w	r2, r3, #20
				pwr += filter_buffer[i];
 8021130:	ecb3 7a01 	vldmia	r3!, {s14}
			for (int i = 0;i < FILTER_SAMPLES;i++) {
 8021134:	429a      	cmp	r2, r3
				pwr += filter_buffer[i];
 8021136:	ee77 7a87 	vadd.f32	s15, s15, s14
			for (int i = 0;i < FILTER_SAMPLES;i++) {
 802113a:	d1f9      	bne.n	8021130 <adc_thread+0xd0>
			pwr /= FILTER_SAMPLES;
 802113c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8021140:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8021144:	ed8d 0a02 	vstr	s0, [sp, #8]
		switch (config.ctrl_type) {
 8021148:	7823      	ldrb	r3, [r4, #0]
 802114a:	b2db      	uxtb	r3, r3
 802114c:	2b0c      	cmp	r3, #12
 802114e:	f200 822b 	bhi.w	80215a8 <adc_thread+0x548>
 8021152:	2201      	movs	r2, #1
 8021154:	fa02 f303 	lsl.w	r3, r2, r3
 8021158:	f241 2224 	movw	r2, #4644	; 0x1224
 802115c:	4213      	tst	r3, r2
 802115e:	f000 8223 	beq.w	80215a8 <adc_thread+0x548>
			if (pwr < config.voltage_center) {
 8021162:	edd4 7a04 	vldr	s15, [r4, #16]
 8021166:	eef4 7ac0 	vcmpe.f32	s15, s0
 802116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802116e:	f340 8401 	ble.w	8021974 <adc_thread+0x914>
				pwr = utils_map(pwr, config.voltage_start,
 8021172:	edd4 0a02 	vldr	s1, [r4, #8]
 8021176:	ed94 1a04 	vldr	s2, [r4, #16]
 802117a:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 802117e:	eef0 1a48 	vmov.f32	s3, s16
 8021182:	f7f4 fcfd 	bl	8015b80 <utils_map>
 8021186:	ed8d 0a02 	vstr	s0, [sp, #8]
		utils_truncate_number(&pwr, 0.0, 1.0);
 802118a:	a802      	add	r0, sp, #8
 802118c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8021190:	eeb0 0a48 	vmov.f32	s0, s16
 8021194:	f7f4 fcb4 	bl	8015b00 <utils_truncate_number>
		if (config.voltage_inverted) {
 8021198:	f894 3020 	ldrb.w	r3, [r4, #32]
			pwr = 1.0 - pwr;
 802119c:	eddd 7a02 	vldr	s15, [sp, #8]
		if (config.voltage_inverted) {
 80211a0:	b12b      	cbz	r3, 80211ae <adc_thread+0x14e>
			pwr = 1.0 - pwr;
 80211a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80211aa:	edcd 7a02 	vstr	s15, [sp, #8]
		decoded_level = pwr;
 80211ae:	4b76      	ldr	r3, [pc, #472]	; (8021388 <adc_thread+0x328>)
		brake *= V_REG;
 80211b0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8021378 <adc_thread+0x318>
		decoded_level = pwr;
 80211b4:	edc3 7a00 	vstr	s15, [r3]
		float brake = (float)ADC_Value[ADC_IND_EXT2];
 80211b8:	89eb      	ldrh	r3, [r5, #14]
		read_voltage2 = brake;
 80211ba:	4a74      	ldr	r2, [pc, #464]	; (802138c <adc_thread+0x32c>)
		float brake = (float)ADC_Value[ADC_IND_EXT2];
 80211bc:	b29b      	uxth	r3, r3
 80211be:	ee07 3a90 	vmov	s15, r3
 80211c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		brake /= 4095;
 80211c6:	eec7 7a29 	vdiv.f32	s15, s14, s19
		brake *= V_REG;
 80211ca:	ee27 0a80 	vmul.f32	s0, s15, s0
		read_voltage2 = brake;
 80211ce:	ed82 0a00 	vstr	s0, [r2]
		if (config.use_filter) {
 80211d2:	7f23      	ldrb	r3, [r4, #28]
		brake *= V_REG;
 80211d4:	ed8d 0a03 	vstr	s0, [sp, #12]
		if (config.use_filter) {
 80211d8:	b1f3      	cbz	r3, 8021218 <adc_thread+0x1b8>
			filter_buffer2[filter_ptr2++] = brake;
 80211da:	4a6d      	ldr	r2, [pc, #436]	; (8021390 <adc_thread+0x330>)
 80211dc:	4b6d      	ldr	r3, [pc, #436]	; (8021394 <adc_thread+0x334>)
 80211de:	6810      	ldr	r0, [r2, #0]
			sleep_time = 1;
 80211e0:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8021360 <adc_thread+0x300>
			filter_buffer2[filter_ptr2++] = brake;
 80211e4:	1c41      	adds	r1, r0, #1
 80211e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
			if (filter_ptr2 >= FILTER_SAMPLES) {
 80211ea:	2904      	cmp	r1, #4
			filter_buffer2[filter_ptr2++] = brake;
 80211ec:	ed83 0a00 	vstr	s0, [r3]
				filter_ptr2 = 0;
 80211f0:	bfc8      	it	gt
 80211f2:	2300      	movgt	r3, #0
			filter_buffer2[filter_ptr2++] = brake;
 80211f4:	6011      	str	r1, [r2, #0]
				filter_ptr2 = 0;
 80211f6:	bfc8      	it	gt
 80211f8:	6013      	strgt	r3, [r2, #0]
 80211fa:	4b66      	ldr	r3, [pc, #408]	; (8021394 <adc_thread+0x334>)
 80211fc:	f103 0214 	add.w	r2, r3, #20
				brake += filter_buffer2[i];
 8021200:	ecb3 7a01 	vldmia	r3!, {s14}
			for (int i = 0;i < FILTER_SAMPLES;i++) {
 8021204:	4293      	cmp	r3, r2
				brake += filter_buffer2[i];
 8021206:	ee77 7a87 	vadd.f32	s15, s15, s14
			for (int i = 0;i < FILTER_SAMPLES;i++) {
 802120a:	d1f9      	bne.n	8021200 <adc_thread+0x1a0>
			brake /= FILTER_SAMPLES;
 802120c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8021210:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8021214:	ed8d 0a03 	vstr	s0, [sp, #12]
		brake = utils_map(brake, config.voltage2_start, config.voltage2_end, 0.0, 1.0);
 8021218:	edd4 0a05 	vldr	s1, [r4, #20]
 802121c:	ed94 1a06 	vldr	s2, [r4, #24]
 8021220:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8021224:	eef0 1a48 	vmov.f32	s3, s16
 8021228:	f7f4 fcaa 	bl	8015b80 <utils_map>
 802122c:	a804      	add	r0, sp, #16
 802122e:	ed20 0a01 	vstmdb	r0!, {s0}
		utils_truncate_number(&brake, 0.0, 1.0);
 8021232:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8021236:	eeb0 0a48 	vmov.f32	s0, s16
 802123a:	f7f4 fc61 	bl	8015b00 <utils_truncate_number>
		if (config.voltage2_inverted) {
 802123e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
			brake = 1.0 - brake;
 8021242:	eddd 7a03 	vldr	s15, [sp, #12]
		if (config.voltage2_inverted) {
 8021246:	b12b      	cbz	r3, 8021254 <adc_thread+0x1f4>
			brake = 1.0 - brake;
 8021248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021250:	edcd 7a03 	vstr	s15, [sp, #12]
		decoded_level2 = brake;
 8021254:	4b50      	ldr	r3, [pc, #320]	; (8021398 <adc_thread+0x338>)
 8021256:	edc3 7a00 	vstr	s15, [r3]
		if (use_rx_tx_as_buttons) {
 802125a:	4b3c      	ldr	r3, [pc, #240]	; (802134c <adc_thread+0x2ec>)
 802125c:	781b      	ldrb	r3, [r3, #0]
 802125e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8021262:	2b00      	cmp	r3, #0
 8021264:	f000 8216 	beq.w	8021694 <adc_thread+0x634>
			cc_button = !palReadPad(HW_UART_TX_PORT, HW_UART_TX_PIN);
 8021268:	4b3a      	ldr	r3, [pc, #232]	; (8021354 <adc_thread+0x2f4>)
 802126a:	691d      	ldr	r5, [r3, #16]
			if (config.cc_button_inverted) {
 802126c:	7fa3      	ldrb	r3, [r4, #30]
			cc_button = !palReadPad(HW_UART_TX_PORT, HW_UART_TX_PIN);
 802126e:	09ad      	lsrs	r5, r5, #6
			if (config.cc_button_inverted) {
 8021270:	b903      	cbnz	r3, 8021274 <adc_thread+0x214>
 8021272:	43ed      	mvns	r5, r5
			rev_button = !palReadPad(HW_UART_RX_PORT, HW_UART_RX_PIN);
 8021274:	4b37      	ldr	r3, [pc, #220]	; (8021354 <adc_thread+0x2f4>)
 8021276:	691e      	ldr	r6, [r3, #16]
			if (config.rev_button_inverted) {
 8021278:	7fe3      	ldrb	r3, [r4, #31]
			rev_button = !palReadPad(HW_UART_RX_PORT, HW_UART_RX_PIN);
 802127a:	09f6      	lsrs	r6, r6, #7
 802127c:	f005 0501 	and.w	r5, r5, #1
 8021280:	43f2      	mvns	r2, r6
			if (config.rev_button_inverted) {
 8021282:	2b00      	cmp	r3, #0
 8021284:	f000 8304 	beq.w	8021890 <adc_thread+0x830>
				rev_button = !rev_button;
 8021288:	f006 0601 	and.w	r6, r6, #1
		switch (config.ctrl_type) {
 802128c:	7823      	ldrb	r3, [r4, #0]
 802128e:	b2db      	uxtb	r3, r3
 8021290:	2b0d      	cmp	r3, #13
 8021292:	d815      	bhi.n	80212c0 <adc_thread+0x260>
 8021294:	2201      	movs	r2, #1
 8021296:	fa02 f303 	lsl.w	r3, r2, r3
 802129a:	f242 4248 	movw	r2, #9288	; 0x2448
 802129e:	4213      	tst	r3, r2
 80212a0:	f040 832c 	bne.w	80218fc <adc_thread+0x89c>
 80212a4:	f241 2224 	movw	r2, #4644	; 0x1224
 80212a8:	4213      	tst	r3, r2
 80212aa:	f040 8358 	bne.w	802195e <adc_thread+0x8fe>
 80212ae:	f013 0f90 	tst.w	r3, #144	; 0x90
 80212b2:	d005      	beq.n	80212c0 <adc_thread+0x260>
			pwr -= brake;
 80212b4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80212b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80212bc:	edcd 7a02 	vstr	s15, [sp, #8]
		utils_deadband(&pwr, config.hyst, 1.0);
 80212c0:	ed94 0a01 	vldr	s0, [r4, #4]
		const float ramp_time = fabsf(pwr) > fabsf(pwr_ramp) ? config.ramp_time_pos : config.ramp_time_neg;
 80212c4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80213a8 <adc_thread+0x348>
		utils_deadband(&pwr, config.hyst, 1.0);
 80212c8:	a802      	add	r0, sp, #8
 80212ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80212ce:	f7f4 fc67 	bl	8015ba0 <utils_deadband>
		pwr = utils_throttle_curve(pwr, config.throttle_exp, config.throttle_exp_brake, config.throttle_exp_mode);
 80212d2:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
 80212d6:	ed9d 0a02 	vldr	s0, [sp, #8]
 80212da:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
 80212de:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80212e2:	f7f4 fe6d 	bl	8015fc0 <utils_throttle_curve>
		const float ramp_time = fabsf(pwr) > fabsf(pwr_ramp) ? config.ramp_time_pos : config.ramp_time_neg;
 80212e6:	edd9 7a00 	vldr	s15, [r9]
		pwr = utils_throttle_curve(pwr, config.throttle_exp, config.throttle_exp_brake, config.throttle_exp_mode);
 80212ea:	ed8d 0a02 	vstr	s0, [sp, #8]
		const float ramp_time = fabsf(pwr) > fabsf(pwr_ramp) ? config.ramp_time_pos : config.ramp_time_neg;
 80212ee:	eef0 7ae7 	vabs.f32	s15, s15
 80212f2:	eeb0 7ac0 	vabs.f32	s14, s0
 80212f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80212fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212fe:	bfcc      	ite	gt
 8021300:	edd4 0a0c 	vldrgt	s1, [r4, #48]	; 0x30
 8021304:	edd4 0a0d 	vldrle	s1, [r4, #52]	; 0x34
		if (ramp_time > 0.01) {
 8021308:	eddf 7a24 	vldr	s15, [pc, #144]	; 802139c <adc_thread+0x33c>
 802130c:	eef4 0ae7 	vcmpe.f32	s1, s15
 8021310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021314:	f300 82cc 	bgt.w	80218b0 <adc_thread+0x850>
		const volatile mc_configuration *mcconf = mc_interface_get_configuration();
 8021318:	f7fa f892 	bl	801b440 <mc_interface_get_configuration>
 802131c:	4681      	mov	r9, r0
		const float rpm_now = mc_interface_get_rpm();
 802131e:	f7fa f927 	bl	801b570 <mc_interface_get_rpm>
		switch (config.ctrl_type) {
 8021322:	7823      	ldrb	r3, [r4, #0]
 8021324:	3b01      	subs	r3, #1
 8021326:	2b0c      	cmp	r3, #12
 8021328:	f63f aec0 	bhi.w	80210ac <adc_thread+0x4c>
 802132c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8021330:	010a010a 	.word	0x010a010a
 8021334:	00eb010a 	.word	0x00eb010a
 8021338:	00eb00eb 	.word	0x00eb00eb
 802133c:	00ca00eb 	.word	0x00ca00eb
 8021340:	00ca00ca 	.word	0x00ca00ca
 8021344:	003e003e 	.word	0x003e003e
 8021348:	003e      	.short	0x003e
 802134a:	bf00      	nop
 802134c:	2000e570 	.word	0x2000e570
 8021350:	080306c0 	.word	0x080306c0
 8021354:	40020800 	.word	0x40020800
 8021358:	2000e550 	.word	0x2000e550
 802135c:	2000e4b0 	.word	0x2000e4b0
 8021360:	00000000 	.word	0x00000000
 8021364:	457ff000 	.word	0x457ff000
 8021368:	461c4000 	.word	0x461c4000
 802136c:	3dcccccd 	.word	0x3dcccccd
 8021370:	20001047 	.word	0x20001047
 8021374:	2000c034 	.word	0x2000c034
 8021378:	40533333 	.word	0x40533333
 802137c:	2000e568 	.word	0x2000e568
 8021380:	2000e544 	.word	0x2000e544
 8021384:	2000e4fc 	.word	0x2000e4fc
 8021388:	2000e4f4 	.word	0x2000e4f4
 802138c:	2000e56c 	.word	0x2000e56c
 8021390:	2000e54c 	.word	0x2000e54c
 8021394:	2000e530 	.word	0x2000e530
 8021398:	2000e4f8 	.word	0x2000e4f8
 802139c:	3c23d70a 	.word	0x3c23d70a
 80213a0:	20001a40 	.word	0x20001a40
 80213a4:	2000e558 	.word	0x2000e558
 80213a8:	2000e564 	.word	0x2000e564
			if ((pwr >= 0.0 && rpm_now > 0.0) || (pwr < 0.0 && rpm_now < 0.0)) {
 80213ac:	eddd 7a02 	vldr	s15, [sp, #8]
 80213b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80213b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213b8:	f2c0 832c 	blt.w	8021a14 <adc_thread+0x9b4>
 80213bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80213c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213c4:	f340 8326 	ble.w	8021a14 <adc_thread+0x9b4>
				current = pwr * mcconf->lo_current_motor_max_now;
 80213c8:	edd9 aa1d 	vldr	s21, [r9, #116]	; 0x74
 80213cc:	ee67 aaaa 	vmul.f32	s21, s15, s21
			if (!(ms_without_power < MIN_MS_WITHOUT_POWER && config.safe_start)) {
 80213d0:	f8df b318 	ldr.w	fp, [pc, #792]	; 80216ec <adc_thread+0x68c>
 80213d4:	ed9f 7abc 	vldr	s14, [pc, #752]	; 80216c8 <adc_thread+0x668>
 80213d8:	eddb 6a00 	vldr	s13, [fp]
 80213dc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80213e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213e4:	f140 8294 	bpl.w	8021910 <adc_thread+0x8b0>
 80213e8:	7f63      	ldrb	r3, [r4, #29]
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	f000 8290 	beq.w	8021910 <adc_thread+0x8b0>
		bool send_duty = false;
 80213f0:	2600      	movs	r6, #0
			if (fabsf(pwr) < 0.001) {
 80213f2:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80216cc <adc_thread+0x66c>
 80213f6:	eef0 7ae7 	vabs.f32	s15, s15
 80213fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80213fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021402:	f140 82c5 	bpl.w	8021990 <adc_thread+0x930>
				ms_without_power += (1000.0 * (float)sleep_time) / (float)CH_CFG_ST_FREQUENCY;
 8021406:	ee07 aa90 	vmov	s15, sl
 802140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802140e:	eddf 7ab0 	vldr	s15, [pc, #704]	; 80216d0 <adc_thread+0x670>
 8021412:	eddb 6a00 	vldr	s13, [fp]
 8021416:	ee67 7a27 	vmul.f32	s15, s14, s15
		bool current_mode = false;
 802141a:	f04f 0a00 	mov.w	sl, #0
				ms_without_power += (1000.0 * (float)sleep_time) / (float)CH_CFG_ST_FREQUENCY;
 802141e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8021422:	ee77 7a26 	vadd.f32	s15, s14, s13
 8021426:	edcb 7a00 	vstr	s15, [fp]
		if (ms_without_power < MIN_MS_WITHOUT_POWER && config.safe_start) {
 802142a:	ed9b 7a00 	vldr	s14, [fp]
 802142e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80216c8 <adc_thread+0x668>
 8021432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802143a:	f140 80c2 	bpl.w	80215c2 <adc_thread+0x562>
 802143e:	7f63      	ldrb	r3, [r4, #29]
 8021440:	2b00      	cmp	r3, #0
 8021442:	f000 80be 	beq.w	80215c2 <adc_thread+0x562>
			if (ms_without_power == pulses_without_power_before) {
 8021446:	4ba3      	ldr	r3, [pc, #652]	; (80216d4 <adc_thread+0x674>)
 8021448:	ed9b 7a00 	vldr	s14, [fp]
 802144c:	edd3 7a00 	vldr	s15, [r3]
 8021450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021454:	eef4 7a47 	vcmp.f32	s15, s14
 8021458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				ms_without_power = 0;
 802145c:	bf08      	it	eq
 802145e:	ed8b 8a00 	vstreq	s16, [fp]
			pulses_without_power_before = ms_without_power;
 8021462:	eddb 7a00 	vldr	s15, [fp]
 8021466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802146a:	edc3 7a00 	vstr	s15, [r3]
			mc_interface_set_brake_current(timeout_get_brake_current());
 802146e:	f7f8 feef 	bl	801a250 <timeout_get_brake_current>
 8021472:	f7fb f80d 	bl	801c490 <mc_interface_set_brake_current>
			if (config.multi_esc) {
 8021476:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 802147a:	2b00      	cmp	r3, #0
 802147c:	f43f ae16 	beq.w	80210ac <adc_thread+0x4c>
 8021480:	2500      	movs	r5, #0
 8021482:	e002      	b.n	802148a <adc_thread+0x42a>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021484:	2d0a      	cmp	r5, #10
 8021486:	f43f ae11 	beq.w	80210ac <adc_thread+0x4c>
					can_status_msg *msg = comm_can_get_status_msg_index(i);
 802148a:	4628      	mov	r0, r5
 802148c:	f7f9 fb20 	bl	801aad0 <comm_can_get_status_msg_index>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021490:	6806      	ldr	r6, [r0, #0]
 8021492:	2e00      	cmp	r6, #0
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021494:	f105 0501 	add.w	r5, r5, #1
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021498:	dbf4      	blt.n	8021484 <adc_thread+0x424>
  return chVTGetSystemTimeX() - start;
 802149a:	6842      	ldr	r2, [r0, #4]
  return ch.vtlist.vt_systime;
 802149c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 80214a0:	1a9b      	subs	r3, r3, r2
 80214a2:	ee07 3a90 	vmov	s15, r3
 80214a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80214aa:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80214ae:	eeb4 7ac9 	vcmpe.f32	s14, s18
 80214b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214b6:	d5e5      	bpl.n	8021484 <adc_thread+0x424>
						comm_can_set_current_brake(msg->id, timeout_get_brake_current());
 80214b8:	f7f8 feca 	bl	801a250 <timeout_get_brake_current>
 80214bc:	b2f0      	uxtb	r0, r6
 80214be:	f7f9 fae7 	bl	801aa90 <comm_can_set_current_brake>
 80214c2:	e7df      	b.n	8021484 <adc_thread+0x424>
			if (fabsf(pwr) < 0.001) {
 80214c4:	ed9d 0a02 	vldr	s0, [sp, #8]
 80214c8:	eddf 7a80 	vldr	s15, [pc, #512]	; 80216cc <adc_thread+0x66c>
 80214cc:	eeb0 7ac0 	vabs.f32	s14, s0
 80214d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80214d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214d8:	f100 8281 	bmi.w	80219de <adc_thread+0x97e>
 80214dc:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80216ec <adc_thread+0x68c>
			if (!(ms_without_power < MIN_MS_WITHOUT_POWER && config.safe_start)) {
 80214e0:	ed9b 7a00 	vldr	s14, [fp]
 80214e4:	eddf 7a78 	vldr	s15, [pc, #480]	; 80216c8 <adc_thread+0x668>
 80214e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80214ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214f0:	f140 8221 	bpl.w	8021936 <adc_thread+0x8d6>
 80214f4:	7f63      	ldrb	r3, [r4, #29]
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	f000 821d 	beq.w	8021936 <adc_thread+0x8d6>
		bool send_duty = false;
 80214fc:	2600      	movs	r6, #0
		bool current_mode = false;
 80214fe:	46b2      	mov	sl, r6
		float current = 0.0;
 8021500:	eddf aa75 	vldr	s21, [pc, #468]	; 80216d8 <adc_thread+0x678>
 8021504:	e791      	b.n	802142a <adc_thread+0x3ca>
			if (pwr >= 0.0) {
 8021506:	eddd 7a02 	vldr	s15, [sp, #8]
 802150a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021512:	f2c0 82f4 	blt.w	8021afe <adc_thread+0xa9e>
				current = pwr * mcconf->lo_current_motor_max_now;
 8021516:	edd9 aa1d 	vldr	s21, [r9, #116]	; 0x74
 802151a:	ee67 aaaa 	vmul.f32	s21, s15, s21
		bool current_mode_brake = false;
 802151e:	2700      	movs	r7, #0
			if (pwr < 0.001) {
 8021520:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80216cc <adc_thread+0x66c>
 8021524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802152c:	f100 8239 	bmi.w	80219a2 <adc_thread+0x942>
			if (config.ctrl_type == ADC_CTRL_TYPE_CURRENT_REV_BUTTON_BRAKE_ADC && rev_button) {
 8021530:	7823      	ldrb	r3, [r4, #0]
 8021532:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 80216ec <adc_thread+0x68c>
 8021536:	2b04      	cmp	r3, #4
 8021538:	f000 8249 	beq.w	80219ce <adc_thread+0x96e>
		bool send_duty = false;
 802153c:	2600      	movs	r6, #0
			current_mode = true;
 802153e:	f04f 0a01 	mov.w	sl, #1
 8021542:	e772      	b.n	802142a <adc_thread+0x3ca>
			if ((pwr >= 0.0 && rpm_now > 0.0) || (pwr < 0.0 && rpm_now < 0.0)) {
 8021544:	eddd 7a02 	vldr	s15, [sp, #8]
 8021548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021550:	f2c0 826d 	blt.w	8021a2e <adc_thread+0x9ce>
 8021554:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802155c:	f340 8267 	ble.w	8021a2e <adc_thread+0x9ce>
				current = pwr * mcconf->lo_current_motor_max_now;
 8021560:	edd9 aa1d 	vldr	s21, [r9, #116]	; 0x74
 8021564:	ee67 aaaa 	vmul.f32	s21, s15, s21
			if (fabsf(pwr) < 0.001) {
 8021568:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80216cc <adc_thread+0x66c>
 802156c:	eef0 7ae7 	vabs.f32	s15, s15
 8021570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021578:	f140 820d 	bpl.w	8021996 <adc_thread+0x936>
				ms_without_power += (1000.0 * (float)sleep_time) / (float)CH_CFG_ST_FREQUENCY;
 802157c:	ee07 aa90 	vmov	s15, sl
 8021580:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8021584:	eddf 7a52 	vldr	s15, [pc, #328]	; 80216d0 <adc_thread+0x670>
 8021588:	f8df b160 	ldr.w	fp, [pc, #352]	; 80216ec <adc_thread+0x68c>
 802158c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8021590:	eddb 7a00 	vldr	s15, [fp]
 8021594:	ee86 7aa8 	vdiv.f32	s14, s13, s17
		bool send_duty = false;
 8021598:	2600      	movs	r6, #0
			current_mode = true;
 802159a:	f04f 0a01 	mov.w	sl, #1
				ms_without_power += (1000.0 * (float)sleep_time) / (float)CH_CFG_ST_FREQUENCY;
 802159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80215a2:	edcb 7a00 	vstr	s15, [fp]
 80215a6:	e740      	b.n	802142a <adc_thread+0x3ca>
			pwr = utils_map(pwr, config.voltage_start, config.voltage_end, 0.0, 1.0);
 80215a8:	edd4 0a02 	vldr	s1, [r4, #8]
 80215ac:	ed94 1a03 	vldr	s2, [r4, #12]
 80215b0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80215b4:	eef0 1a48 	vmov.f32	s3, s16
 80215b8:	f7f4 fae2 	bl	8015b80 <utils_map>
 80215bc:	ed8d 0a02 	vstr	s0, [sp, #8]
			break;
 80215c0:	e5e3      	b.n	802118a <adc_thread+0x12a>
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 80215c2:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80216f0 <adc_thread+0x690>
		timeout_reset();
 80215c6:	f7f8 fe23 	bl	801a210 <timeout_reset>
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 80215ca:	f8db 1000 	ldr.w	r1, [fp]
 80215ce:	9101      	str	r1, [sp, #4]
 80215d0:	1c4b      	adds	r3, r1, #1
 80215d2:	f8cb 3000 	str.w	r3, [fp]
 80215d6:	f7f9 ffcb 	bl	801b570 <mc_interface_get_rpm>
		if (filter_ptr >= RPM_FILTER_SAMPLES) {
 80215da:	f8db 2000 	ldr.w	r2, [fp]
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 80215de:	4b3f      	ldr	r3, [pc, #252]	; (80216dc <adc_thread+0x67c>)
 80215e0:	9901      	ldr	r1, [sp, #4]
		float rpm_filtered = 0.0;
 80215e2:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80216d8 <adc_thread+0x678>
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 80215e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
		if (filter_ptr >= RPM_FILTER_SAMPLES) {
 80215ea:	2a07      	cmp	r2, #7
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 80215ec:	ed83 0a00 	vstr	s0, [r3]
			filter_ptr = 0;
 80215f0:	bfc4      	itt	gt
 80215f2:	2300      	movgt	r3, #0
 80215f4:	f8cb 3000 	strgt.w	r3, [fp]
 80215f8:	4b38      	ldr	r3, [pc, #224]	; (80216dc <adc_thread+0x67c>)
 80215fa:	f103 0220 	add.w	r2, r3, #32
			rpm_filtered += filter_buffer[i];
 80215fe:	ecb3 7a01 	vldmia	r3!, {s14}
		for (int i = 0;i < RPM_FILTER_SAMPLES;i++) {
 8021602:	4293      	cmp	r3, r2
			rpm_filtered += filter_buffer[i];
 8021604:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0;i < RPM_FILTER_SAMPLES;i++) {
 8021608:	d1f9      	bne.n	80215fe <adc_thread+0x59e>
		if (current_mode && cc_button && fabsf(pwr) < 0.001) {
 802160a:	f1ba 0f00 	cmp.w	sl, #0
 802160e:	d071      	beq.n	80216f4 <adc_thread+0x694>
 8021610:	2d00      	cmp	r5, #0
 8021612:	d06f      	beq.n	80216f4 <adc_thread+0x694>
 8021614:	ed9d 7a02 	vldr	s14, [sp, #8]
 8021618:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80216cc <adc_thread+0x66c>
 802161c:	eeb0 7ac7 	vabs.f32	s14, s14
 8021620:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8021624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021628:	d564      	bpl.n	80216f4 <adc_thread+0x694>
			if (!was_pid) {
 802162a:	4b2d      	ldr	r3, [pc, #180]	; (80216e0 <adc_thread+0x680>)
 802162c:	781a      	ldrb	r2, [r3, #0]
 802162e:	2a00      	cmp	r2, #0
 8021630:	f000 8273 	beq.w	8021b1a <adc_thread+0xaba>
 8021634:	4b2b      	ldr	r3, [pc, #172]	; (80216e4 <adc_thread+0x684>)
 8021636:	ed93 0a00 	vldr	s0, [r3]
			mc_interface_set_pid_speed(pid_rpm);
 802163a:	f7fa fe51 	bl	801c2e0 <mc_interface_set_pid_speed>
			if (config.multi_esc) {
 802163e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8021642:	2b00      	cmp	r3, #0
 8021644:	f43f ad32 	beq.w	80210ac <adc_thread+0x4c>
				float current = mc_interface_get_tot_current_directional_filtered();
 8021648:	f7fa f852 	bl	801b6f0 <mc_interface_get_tot_current_directional_filtered>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 802164c:	2500      	movs	r5, #0
				float current = mc_interface_get_tot_current_directional_filtered();
 802164e:	eeb0 aa40 	vmov.f32	s20, s0
 8021652:	e002      	b.n	802165a <adc_thread+0x5fa>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021654:	2d0a      	cmp	r5, #10
 8021656:	f43f ad29 	beq.w	80210ac <adc_thread+0x4c>
					can_status_msg *msg = comm_can_get_status_msg_index(i);
 802165a:	4628      	mov	r0, r5
 802165c:	f7f9 fa38 	bl	801aad0 <comm_can_get_status_msg_index>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021660:	6802      	ldr	r2, [r0, #0]
 8021662:	2a00      	cmp	r2, #0
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021664:	f105 0501 	add.w	r5, r5, #1
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021668:	dbf4      	blt.n	8021654 <adc_thread+0x5f4>
 802166a:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 802166c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8021670:	1a5b      	subs	r3, r3, r1
 8021672:	ee07 3a90 	vmov	s15, r3
 8021676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802167a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 802167e:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8021682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021686:	d5e5      	bpl.n	8021654 <adc_thread+0x5f4>
						comm_can_set_current(msg->id, current);
 8021688:	b2d0      	uxtb	r0, r2
 802168a:	eeb0 0a4a 	vmov.f32	s0, s20
 802168e:	f7f9 f9df 	bl	801aa50 <comm_can_set_current>
 8021692:	e7df      	b.n	8021654 <adc_thread+0x5f4>
			if (config.ctrl_type == ADC_CTRL_TYPE_CURRENT_REV_BUTTON ||
 8021694:	7823      	ldrb	r3, [r4, #0]
 8021696:	2b03      	cmp	r3, #3
 8021698:	f000 80fd 	beq.w	8021896 <adc_thread+0x836>
					config.ctrl_type == ADC_CTRL_TYPE_CURRENT_NOREV_BRAKE_BUTTON ||
 802169c:	7823      	ldrb	r3, [r4, #0]
			if (config.ctrl_type == ADC_CTRL_TYPE_CURRENT_REV_BUTTON ||
 802169e:	2b06      	cmp	r3, #6
 80216a0:	f000 80f9 	beq.w	8021896 <adc_thread+0x836>
					config.ctrl_type == ADC_CTRL_TYPE_DUTY_REV_BUTTON) {
 80216a4:	7823      	ldrb	r3, [r4, #0]
					config.ctrl_type == ADC_CTRL_TYPE_CURRENT_NOREV_BRAKE_BUTTON ||
 80216a6:	2b0a      	cmp	r3, #10
 80216a8:	f000 80f5 	beq.w	8021896 <adc_thread+0x836>
				cc_button = !palReadPad(HW_ICU_GPIO, HW_ICU_PIN);
 80216ac:	4b0e      	ldr	r3, [pc, #56]	; (80216e8 <adc_thread+0x688>)
 80216ae:	691d      	ldr	r5, [r3, #16]
				if (config.cc_button_inverted) {
 80216b0:	7fa3      	ldrb	r3, [r4, #30]
				cc_button = !palReadPad(HW_ICU_GPIO, HW_ICU_PIN);
 80216b2:	096d      	lsrs	r5, r5, #5
 80216b4:	43e9      	mvns	r1, r5
				if (config.cc_button_inverted) {
 80216b6:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	f040 81c4 	bne.w	8021a48 <adc_thread+0x9e8>
				cc_button = !palReadPad(HW_ICU_GPIO, HW_ICU_PIN);
 80216c0:	f001 0501 	and.w	r5, r1, #1
 80216c4:	e5e2      	b.n	802128c <adc_thread+0x22c>
 80216c6:	bf00      	nop
 80216c8:	43fa0000 	.word	0x43fa0000
 80216cc:	3a83126f 	.word	0x3a83126f
 80216d0:	447a0000 	.word	0x447a0000
 80216d4:	2000e560 	.word	0x2000e560
 80216d8:	00000000 	.word	0x00000000
 80216dc:	2000e510 	.word	0x2000e510
 80216e0:	2000e571 	.word	0x2000e571
 80216e4:	2000e55c 	.word	0x2000e55c
 80216e8:	40020400 	.word	0x40020400
 80216ec:	2000e558 	.word	0x2000e558
 80216f0:	2000e548 	.word	0x2000e548
		was_pid = false;
 80216f4:	4bd6      	ldr	r3, [pc, #856]	; (8021a50 <adc_thread+0x9f0>)
 80216f6:	2500      	movs	r5, #0
 80216f8:	701d      	strb	r5, [r3, #0]
		float rpm_local = mc_interface_get_rpm();
 80216fa:	f7f9 ff39 	bl	801b570 <mc_interface_get_rpm>
		if (config.multi_esc) {
 80216fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		float rpm_local = mc_interface_get_rpm();
 8021702:	eeb0 ba40 	vmov.f32	s22, s0
 8021706:	eeb0 aa40 	vmov.f32	s20, s0
		if (config.multi_esc) {
 802170a:	b32b      	cbz	r3, 8021758 <adc_thread+0x6f8>
				can_status_msg *msg = comm_can_get_status_msg_index(i);
 802170c:	4628      	mov	r0, r5
 802170e:	f7f9 f9df 	bl	801aad0 <comm_can_get_status_msg_index>
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021712:	6803      	ldr	r3, [r0, #0]
 8021714:	2b00      	cmp	r3, #0
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021716:	f105 0501 	add.w	r5, r5, #1
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 802171a:	db1b      	blt.n	8021754 <adc_thread+0x6f4>
  return ch.vtlist.vt_systime;
 802171c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8021720:	6843      	ldr	r3, [r0, #4]
 8021722:	1ad3      	subs	r3, r2, r3
 8021724:	ee07 3a90 	vmov	s15, r3
 8021728:	eef8 7a67 	vcvt.f32.u32	s15, s15
					if (fabsf(rpm_tmp) < fabsf(rpm_lowest)) {
 802172c:	eef0 6aca 	vabs.f32	s13, s20
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021730:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8021734:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8021738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802173c:	d50a      	bpl.n	8021754 <adc_thread+0x6f4>
					float rpm_tmp = msg->rpm;
 802173e:	edd0 7a02 	vldr	s15, [r0, #8]
					if (fabsf(rpm_tmp) < fabsf(rpm_lowest)) {
 8021742:	eeb0 7ae7 	vabs.f32	s14, s15
						rpm_lowest = rpm_tmp;
 8021746:	eeb4 7a66 	vcmp.f32	s14, s13
 802174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802174e:	bf48      	it	mi
 8021750:	eeb0 aa67 	vmovmi.f32	s20, s15
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021754:	2d0a      	cmp	r5, #10
 8021756:	d1d9      	bne.n	802170c <adc_thread+0x6ac>
		if (send_duty && config.multi_esc) {
 8021758:	b11e      	cbz	r6, 8021762 <adc_thread+0x702>
 802175a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 802175e:	2b00      	cmp	r3, #0
 8021760:	d171      	bne.n	8021846 <adc_thread+0x7e6>
					comm_can_set_duty(msg->id, duty);
				}
			}
		}

		if (current_mode) {
 8021762:	f1ba 0f00 	cmp.w	sl, #0
 8021766:	f43f aca1 	beq.w	80210ac <adc_thread+0x4c>
			if (current_mode_brake) {
 802176a:	2f00      	cmp	r7, #0
 802176c:	f040 81a1 	bne.w	8021ab2 <adc_thread+0xa52>
					}
				}
			} else {
				float current_out = current;
				bool is_reverse = false;
				if (current_out < 0.0) {
 8021770:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8021774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					rpm_local = -rpm_local;
					rpm_lowest = -rpm_lowest;
				}

				// Traction control
				if (config.multi_esc) {
 8021778:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
				if (current_out < 0.0) {
 802177c:	f100 81da 	bmi.w	8021b34 <adc_thread+0xad4>
				if (config.multi_esc) {
 8021780:	2b00      	cmp	r3, #0
 8021782:	f000 8179 	beq.w	8021a78 <adc_thread+0xa18>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021786:	eef0 ba6a 	vmov.f32	s23, s21
									rpm_tmp = -rpm_tmp;
								}

								float diff = rpm_tmp - rpm_lowest;
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
								if (current_out < mcconf->cc_min_current) {
 802178a:	ed9f cab2 	vldr	s24, [pc, #712]	; 8021a54 <adc_thread+0x9f4>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 802178e:	2500      	movs	r5, #0
 8021790:	e027      	b.n	80217e2 <adc_thread+0x782>
								float rpm_tmp = msg->rpm;
 8021792:	ed90 0a02 	vldr	s0, [r0, #8]
 8021796:	9001      	str	r0, [sp, #4]
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8021798:	ed94 1a0f 	vldr	s2, [r4, #60]	; 0x3c
 802179c:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8021a74 <adc_thread+0xa14>
								if (is_reverse) {
 80217a0:	2f00      	cmp	r7, #0
 80217a2:	f000 816f 	beq.w	8021a84 <adc_thread+0xa24>
									rpm_tmp = -rpm_tmp;
 80217a6:	eeb1 0a40 	vneg.f32	s0, s0
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 80217aa:	ee30 0a4a 	vsub.f32	s0, s0, s20
 80217ae:	eeb0 2a48 	vmov.f32	s4, s16
 80217b2:	eef0 1a6a 	vmov.f32	s3, s21
 80217b6:	f7f4 f9e3 	bl	8015b80 <utils_map>
								if (current_out < mcconf->cc_min_current) {
 80217ba:	edd9 7a50 	vldr	s15, [r9, #320]	; 0x140
 80217be:	9801      	ldr	r0, [sp, #4]
 80217c0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80217c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 80217c8:	eef0 ba40 	vmov.f32	s23, s0
 80217cc:	6802      	ldr	r2, [r0, #0]
								if (current_out < mcconf->cc_min_current) {
 80217ce:	f300 81e3 	bgt.w	8021b98 <adc_thread+0xb38>
 80217d2:	eeb1 0a6b 	vneg.f32	s0, s23
									current_out = 0.0;
								}
							}

							if (is_reverse) {
								comm_can_set_current(msg->id, -current_out);
 80217d6:	b2d0      	uxtb	r0, r2
 80217d8:	f7f9 f93a 	bl	801aa50 <comm_can_set_current>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 80217dc:	3501      	adds	r5, #1
 80217de:	2d0a      	cmp	r5, #10
 80217e0:	d022      	beq.n	8021828 <adc_thread+0x7c8>
						can_status_msg *msg = comm_can_get_status_msg_index(i);
 80217e2:	4628      	mov	r0, r5
 80217e4:	f7f9 f974 	bl	801aad0 <comm_can_get_status_msg_index>
						if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 80217e8:	6802      	ldr	r2, [r0, #0]
 80217ea:	2a00      	cmp	r2, #0
 80217ec:	dbf6      	blt.n	80217dc <adc_thread+0x77c>
  return ch.vtlist.vt_systime;
 80217ee:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 80217f2:	6841      	ldr	r1, [r0, #4]
 80217f4:	1a5b      	subs	r3, r3, r1
 80217f6:	ee07 3a90 	vmov	s15, r3
 80217fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80217fe:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8021802:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8021806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802180a:	d5e7      	bpl.n	80217dc <adc_thread+0x77c>
							if (config.tc) {
 802180c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8021810:	2b00      	cmp	r3, #0
 8021812:	d1be      	bne.n	8021792 <adc_thread+0x732>
							if (is_reverse) {
 8021814:	2f00      	cmp	r7, #0
 8021816:	d1dc      	bne.n	80217d2 <adc_thread+0x772>
							} else {
								comm_can_set_current(msg->id, current_out);
 8021818:	b2d0      	uxtb	r0, r2
 802181a:	eeb0 0a6b 	vmov.f32	s0, s23
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 802181e:	3501      	adds	r5, #1
								comm_can_set_current(msg->id, current_out);
 8021820:	f7f9 f916 	bl	801aa50 <comm_can_set_current>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021824:	2d0a      	cmp	r5, #10
 8021826:	d1dc      	bne.n	80217e2 <adc_thread+0x782>
							}
						}
					}

					if (config.tc) {
 8021828:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 802182c:	2b00      	cmp	r3, #0
 802182e:	f040 819b 	bne.w	8021b68 <adc_thread+0xb08>
 8021832:	eef0 aa6b 	vmov.f32	s21, s23
							current_out = 0.0;
						}
					}
				}

				if (is_reverse) {
 8021836:	2f00      	cmp	r7, #0
 8021838:	f000 811e 	beq.w	8021a78 <adc_thread+0xa18>
					mc_interface_set_current(-current_out);
 802183c:	eeb1 0a6a 	vneg.f32	s0, s21
 8021840:	f7fa fdce 	bl	801c3e0 <mc_interface_set_current>
 8021844:	e432      	b.n	80210ac <adc_thread+0x4c>
			float duty = mc_interface_get_duty_cycle_now();
 8021846:	f7f9 fe53 	bl	801b4f0 <mc_interface_get_duty_cycle_now>
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 802184a:	2500      	movs	r5, #0
			float duty = mc_interface_get_duty_cycle_now();
 802184c:	eef0 ba40 	vmov.f32	s23, s0
 8021850:	e001      	b.n	8021856 <adc_thread+0x7f6>
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021852:	2d0a      	cmp	r5, #10
 8021854:	d085      	beq.n	8021762 <adc_thread+0x702>
				can_status_msg *msg = comm_can_get_status_msg_index(i);
 8021856:	4628      	mov	r0, r5
 8021858:	f7f9 f93a 	bl	801aad0 <comm_can_get_status_msg_index>
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 802185c:	6802      	ldr	r2, [r0, #0]
 802185e:	2a00      	cmp	r2, #0
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021860:	f105 0501 	add.w	r5, r5, #1
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021864:	dbf5      	blt.n	8021852 <adc_thread+0x7f2>
 8021866:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 8021868:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 802186c:	1a5b      	subs	r3, r3, r1
 802186e:	ee07 3a90 	vmov	s15, r3
 8021872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021876:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 802187a:	eeb4 7ac9 	vcmpe.f32	s14, s18
 802187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021882:	d5e6      	bpl.n	8021852 <adc_thread+0x7f2>
					comm_can_set_duty(msg->id, duty);
 8021884:	b2d0      	uxtb	r0, r2
 8021886:	eeb0 0a6b 	vmov.f32	s0, s23
 802188a:	f7f9 f8c1 	bl	801aa10 <comm_can_set_duty>
 802188e:	e7e0      	b.n	8021852 <adc_thread+0x7f2>
				rev_button = !palReadPad(HW_ICU_GPIO, HW_ICU_PIN);
 8021890:	f002 0601 	and.w	r6, r2, #1
 8021894:	e4fa      	b.n	802128c <adc_thread+0x22c>
 8021896:	4b70      	ldr	r3, [pc, #448]	; (8021a58 <adc_thread+0x9f8>)
 8021898:	691e      	ldr	r6, [r3, #16]
				if (config.rev_button_inverted) {
 802189a:	7fe3      	ldrb	r3, [r4, #31]
				rev_button = !palReadPad(HW_ICU_GPIO, HW_ICU_PIN);
 802189c:	0976      	lsrs	r6, r6, #5
 802189e:	43f2      	mvns	r2, r6
				if (config.rev_button_inverted) {
 80218a0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d0f3      	beq.n	8021890 <adc_thread+0x830>
					rev_button = !rev_button;
 80218a8:	f006 0601 	and.w	r6, r6, #1
		bool cc_button = false;
 80218ac:	2500      	movs	r5, #0
 80218ae:	e4ed      	b.n	802128c <adc_thread+0x22c>
			const float ramp_step = (float)ST2MS(chVTTimeElapsedSinceX(last_time)) / (ramp_time * 1000.0);
 80218b0:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8021a6c <adc_thread+0xa0c>
  return ch.vtlist.vt_systime;
 80218b4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 80218b8:	f8db 2000 	ldr.w	r2, [fp]
 80218bc:	4967      	ldr	r1, [pc, #412]	; (8021a5c <adc_thread+0x9fc>)
 80218be:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8021a60 <adc_thread+0xa00>
 80218c2:	1a9b      	subs	r3, r3, r2
 80218c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80218c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80218cc:	fb00 2303 	mla	r3, r0, r3, r2
 80218d0:	fba1 2303 	umull	r2, r3, r1, r3
 80218d4:	0b5b      	lsrs	r3, r3, #13
 80218d6:	ee07 3a90 	vmov	s15, r3
 80218da:	ee20 7a87 	vmul.f32	s14, s1, s14
 80218de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			utils_step_towards(&pwr_ramp, pwr, ramp_step);
 80218e2:	4860      	ldr	r0, [pc, #384]	; (8021a64 <adc_thread+0xa04>)
 80218e4:	eec7 0a87 	vdiv.f32	s1, s15, s14
 80218e8:	f7f4 f89a 	bl	8015a20 <utils_step_towards>
  return ch.vtlist.vt_systime;
 80218ec:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
			last_time = chVTGetSystemTimeX();
 80218f0:	f8cb 3000 	str.w	r3, [fp]
			pwr = pwr_ramp;
 80218f4:	f8d9 3000 	ldr.w	r3, [r9]
 80218f8:	9302      	str	r3, [sp, #8]
 80218fa:	e50d      	b.n	8021318 <adc_thread+0x2b8>
			if (rev_button) {
 80218fc:	2e00      	cmp	r6, #0
 80218fe:	f43f acdf 	beq.w	80212c0 <adc_thread+0x260>
				pwr = -pwr;
 8021902:	eddd 7a02 	vldr	s15, [sp, #8]
 8021906:	eef1 7a67 	vneg.f32	s15, s15
 802190a:	edcd 7a02 	vstr	s15, [sp, #8]
 802190e:	e4d7      	b.n	80212c0 <adc_thread+0x260>
				if (pwr >= 0.0) {
 8021910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					speed = pwr * fabsf(mcconf->l_min_erpm);
 8021918:	bfb6      	itet	lt
 802191a:	ed99 0a06 	vldrlt	s0, [r9, #24]
					speed = pwr * mcconf->l_max_erpm;
 802191e:	ed99 0a07 	vldrge	s0, [r9, #28]
					speed = pwr * fabsf(mcconf->l_min_erpm);
 8021922:	eeb0 0ac0 	vabslt.f32	s0, s0
 8021926:	ee20 0a27 	vmul.f32	s0, s0, s15
				mc_interface_set_pid_speed(speed);
 802192a:	f7fa fcd9 	bl	801c2e0 <mc_interface_set_pid_speed>
				send_duty = true;
 802192e:	2601      	movs	r6, #1
 8021930:	eddd 7a02 	vldr	s15, [sp, #8]
 8021934:	e55d      	b.n	80213f2 <adc_thread+0x392>
				mc_interface_set_duty(utils_map(pwr, -1.0, 1.0, -mcconf->l_max_duty, mcconf->l_max_duty));
 8021936:	edd9 1a16 	vldr	s3, [r9, #88]	; 0x58
 802193a:	ed99 2a16 	vldr	s4, [r9, #88]	; 0x58
		float current = 0.0;
 802193e:	eddf aa4d 	vldr	s21, [pc, #308]	; 8021a74 <adc_thread+0xa14>
				mc_interface_set_duty(utils_map(pwr, -1.0, 1.0, -mcconf->l_max_duty, mcconf->l_max_duty));
 8021942:	eef1 1a61 	vneg.f32	s3, s3
 8021946:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 802194a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 802194e:	f7f4 f917 	bl	8015b80 <utils_map>
 8021952:	f7fa fc8d 	bl	801c270 <mc_interface_set_duty>
		bool current_mode = false;
 8021956:	f04f 0a00 	mov.w	sl, #0
				send_duty = true;
 802195a:	2601      	movs	r6, #1
 802195c:	e565      	b.n	802142a <adc_thread+0x3ca>
			pwr -= 1.0;
 802195e:	eddd 6a02 	vldr	s13, [sp, #8]
 8021962:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021966:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 802196a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802196e:	edcd 7a02 	vstr	s15, [sp, #8]
			break;
 8021972:	e4a5      	b.n	80212c0 <adc_thread+0x260>
				pwr = utils_map(pwr, config.voltage_center,
 8021974:	edd4 0a04 	vldr	s1, [r4, #16]
 8021978:	ed94 1a03 	vldr	s2, [r4, #12]
 802197c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8021980:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8021984:	f7f4 f8fc 	bl	8015b80 <utils_map>
 8021988:	ed8d 0a02 	vstr	s0, [sp, #8]
 802198c:	f7ff bbfd 	b.w	802118a <adc_thread+0x12a>
		bool current_mode = false;
 8021990:	f04f 0a00 	mov.w	sl, #0
 8021994:	e549      	b.n	802142a <adc_thread+0x3ca>
		bool send_duty = false;
 8021996:	2600      	movs	r6, #0
			current_mode = true;
 8021998:	f04f 0a01 	mov.w	sl, #1
 802199c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8021a70 <adc_thread+0xa10>
 80219a0:	e543      	b.n	802142a <adc_thread+0x3ca>
				ms_without_power += (1000.0 * (float)sleep_time) / (float)CH_CFG_ST_FREQUENCY;
 80219a2:	ee07 aa90 	vmov	s15, sl
 80219a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80219aa:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8021a60 <adc_thread+0xa00>
 80219ae:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8021a70 <adc_thread+0xa10>
 80219b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80219b6:	eddb 7a00 	vldr	s15, [fp]
 80219ba:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 80219be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80219c2:	edcb 7a00 	vstr	s15, [fp]
			if (config.ctrl_type == ADC_CTRL_TYPE_CURRENT_REV_BUTTON_BRAKE_ADC && rev_button) {
 80219c6:	7823      	ldrb	r3, [r4, #0]
 80219c8:	2b04      	cmp	r3, #4
 80219ca:	f47f adb7 	bne.w	802153c <adc_thread+0x4dc>
 80219ce:	2e00      	cmp	r6, #0
 80219d0:	f000 80ad 	beq.w	8021b2e <adc_thread+0xace>
			current_mode = true;
 80219d4:	46b2      	mov	sl, r6
				current = -current;
 80219d6:	eef1 aa6a 	vneg.f32	s21, s21
		bool send_duty = false;
 80219da:	2600      	movs	r6, #0
 80219dc:	e525      	b.n	802142a <adc_thread+0x3ca>
				ms_without_power += (1000.0 * (float)sleep_time) / (float)CH_CFG_ST_FREQUENCY;
 80219de:	ee07 aa90 	vmov	s15, sl
 80219e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80219e6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8021a60 <adc_thread+0xa00>
 80219ea:	f8df b084 	ldr.w	fp, [pc, #132]	; 8021a70 <adc_thread+0xa10>
 80219ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80219f2:	eddb 7a00 	vldr	s15, [fp]
 80219f6:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 80219fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80219fe:	edcb 7a00 	vstr	s15, [fp]
 8021a02:	e56d      	b.n	80214e0 <adc_thread+0x480>
			is_running = false;
 8021a04:	4a18      	ldr	r2, [pc, #96]	; (8021a68 <adc_thread+0xa08>)
 8021a06:	2300      	movs	r3, #0
 8021a08:	7013      	strb	r3, [r2, #0]
					mc_interface_set_current(current_out);
				}
			}
		}
	}
}
 8021a0a:	b005      	add	sp, #20
 8021a0c:	ecbd 8b0a 	vpop	{d8-d12}
 8021a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((pwr >= 0.0 && rpm_now > 0.0) || (pwr < 0.0 && rpm_now < 0.0)) {
 8021a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a1c:	f100 809d 	bmi.w	8021b5a <adc_thread+0xafa>
				current = pwr * fabsf(mcconf->lo_current_motor_min_now);
 8021a20:	edd9 aa1e 	vldr	s21, [r9, #120]	; 0x78
 8021a24:	eef0 aaea 	vabs.f32	s21, s21
 8021a28:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8021a2c:	e4d0      	b.n	80213d0 <adc_thread+0x370>
			if ((pwr >= 0.0 && rpm_now > 0.0) || (pwr < 0.0 && rpm_now < 0.0)) {
 8021a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a36:	f100 8089 	bmi.w	8021b4c <adc_thread+0xaec>
				current = pwr * fabsf(mcconf->lo_current_motor_min_now);
 8021a3a:	edd9 aa1e 	vldr	s21, [r9, #120]	; 0x78
 8021a3e:	eef0 aaea 	vabs.f32	s21, s21
 8021a42:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8021a46:	e58f      	b.n	8021568 <adc_thread+0x508>
					cc_button = !cc_button;
 8021a48:	f005 0501 	and.w	r5, r5, #1
		bool rev_button = false;
 8021a4c:	4616      	mov	r6, r2
 8021a4e:	e41d      	b.n	802128c <adc_thread+0x22c>
 8021a50:	2000e571 	.word	0x2000e571
 8021a54:	80000000 	.word	0x80000000
 8021a58:	40020400 	.word	0x40020400
 8021a5c:	d1b71759 	.word	0xd1b71759
 8021a60:	447a0000 	.word	0x447a0000
 8021a64:	2000e564 	.word	0x2000e564
 8021a68:	2000e550 	.word	0x2000e550
 8021a6c:	2000e554 	.word	0x2000e554
 8021a70:	2000e558 	.word	0x2000e558
 8021a74:	00000000 	.word	0x00000000
					mc_interface_set_current(current_out);
 8021a78:	eeb0 0a6a 	vmov.f32	s0, s21
 8021a7c:	f7fa fcb0 	bl	801c3e0 <mc_interface_set_current>
 8021a80:	f7ff bb14 	b.w	80210ac <adc_thread+0x4c>
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8021a84:	ee30 0a4a 	vsub.f32	s0, s0, s20
 8021a88:	eeb0 2a48 	vmov.f32	s4, s16
 8021a8c:	eef0 1a6a 	vmov.f32	s3, s21
 8021a90:	f7f4 f876 	bl	8015b80 <utils_map>
								if (current_out < mcconf->cc_min_current) {
 8021a94:	edd9 7a50 	vldr	s15, [r9, #320]	; 0x140
 8021a98:	9801      	ldr	r0, [sp, #4]
 8021a9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8021aa2:	eef0 ba40 	vmov.f32	s23, s0
 8021aa6:	6802      	ldr	r2, [r0, #0]
								if (current_out < mcconf->cc_min_current) {
 8021aa8:	f57f aeb6 	bpl.w	8021818 <adc_thread+0x7b8>
									current_out = 0.0;
 8021aac:	ed5f ba0f 	vldr	s23, [pc, #-60]	; 8021a74 <adc_thread+0xa14>
 8021ab0:	e6b2      	b.n	8021818 <adc_thread+0x7b8>
				mc_interface_set_brake_current(current);
 8021ab2:	eeb0 0a6a 	vmov.f32	s0, s21
 8021ab6:	f7fa fceb 	bl	801c490 <mc_interface_set_brake_current>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021aba:	2500      	movs	r5, #0
 8021abc:	e002      	b.n	8021ac4 <adc_thread+0xa64>
 8021abe:	2d0a      	cmp	r5, #10
 8021ac0:	f43f aaf4 	beq.w	80210ac <adc_thread+0x4c>
					can_status_msg *msg = comm_can_get_status_msg_index(i);
 8021ac4:	4628      	mov	r0, r5
 8021ac6:	f7f9 f803 	bl	801aad0 <comm_can_get_status_msg_index>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021aca:	6802      	ldr	r2, [r0, #0]
 8021acc:	2a00      	cmp	r2, #0
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8021ace:	f105 0501 	add.w	r5, r5, #1
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021ad2:	dbf4      	blt.n	8021abe <adc_thread+0xa5e>
  return chVTGetSystemTimeX() - start;
 8021ad4:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 8021ad6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8021ada:	1a5b      	subs	r3, r3, r1
 8021adc:	ee07 3a90 	vmov	s15, r3
 8021ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ae4:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8021ae8:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8021aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021af0:	d5e5      	bpl.n	8021abe <adc_thread+0xa5e>
						comm_can_set_current_brake(msg->id, current);
 8021af2:	b2d0      	uxtb	r0, r2
 8021af4:	eeb0 0a6a 	vmov.f32	s0, s21
 8021af8:	f7f8 ffca 	bl	801aa90 <comm_can_set_current_brake>
 8021afc:	e7df      	b.n	8021abe <adc_thread+0xa5e>
				current = fabsf(pwr * mcconf->lo_current_motor_min_now);
 8021afe:	edd9 aa1e 	vldr	s21, [r9, #120]	; 0x78
 8021b02:	ee67 aaaa 	vmul.f32	s21, s15, s21
				current_mode_brake = true;
 8021b06:	2701      	movs	r7, #1
				current = fabsf(pwr * mcconf->lo_current_motor_min_now);
 8021b08:	eef0 aaea 	vabs.f32	s21, s21
 8021b0c:	e508      	b.n	8021520 <adc_thread+0x4c0>
		palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_INPUT_PULLUP);
 8021b0e:	4611      	mov	r1, r2
 8021b10:	4824      	ldr	r0, [pc, #144]	; (8021ba4 <adc_thread+0xb44>)
 8021b12:	f7ee f975 	bl	800fe00 <_pal_lld_setgroupmode>
 8021b16:	f7ff babd 	b.w	8021094 <adc_thread+0x34>
		rpm_filtered /= RPM_FILTER_SAMPLES;
 8021b1a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8021b1e:	ee27 0a80 	vmul.f32	s0, s15, s0
				pid_rpm = rpm_filtered;
 8021b22:	4921      	ldr	r1, [pc, #132]	; (8021ba8 <adc_thread+0xb48>)
				was_pid = true;
 8021b24:	2201      	movs	r2, #1
				pid_rpm = rpm_filtered;
 8021b26:	ed81 0a00 	vstr	s0, [r1]
				was_pid = true;
 8021b2a:	701a      	strb	r2, [r3, #0]
 8021b2c:	e585      	b.n	802163a <adc_thread+0x5da>
			current_mode = true;
 8021b2e:	f04f 0a01 	mov.w	sl, #1
 8021b32:	e47a      	b.n	802142a <adc_thread+0x3ca>
					current_out = -current_out;
 8021b34:	eef1 aa6a 	vneg.f32	s21, s21
				if (config.multi_esc) {
 8021b38:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	f43f ae7d 	beq.w	802183c <adc_thread+0x7dc>
					rpm_local = -rpm_local;
 8021b42:	eeb1 ba4b 	vneg.f32	s22, s22
					rpm_lowest = -rpm_lowest;
 8021b46:	eeb1 aa4a 	vneg.f32	s20, s20
 8021b4a:	e61c      	b.n	8021786 <adc_thread+0x726>
			if ((pwr >= 0.0 && rpm_now > 0.0) || (pwr < 0.0 && rpm_now < 0.0)) {
 8021b4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b54:	f57f af71 	bpl.w	8021a3a <adc_thread+0x9da>
 8021b58:	e502      	b.n	8021560 <adc_thread+0x500>
			if ((pwr >= 0.0 && rpm_now > 0.0) || (pwr < 0.0 && rpm_now < 0.0)) {
 8021b5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b62:	f57f af5d 	bpl.w	8021a20 <adc_thread+0x9c0>
 8021b66:	e42f      	b.n	80213c8 <adc_thread+0x368>
						current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8021b68:	ed94 1a0f 	vldr	s2, [r4, #60]	; 0x3c
 8021b6c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8021bac <adc_thread+0xb4c>
 8021b70:	eef0 1a6a 	vmov.f32	s3, s21
 8021b74:	ee3b 0a4a 	vsub.f32	s0, s22, s20
 8021b78:	eeb0 2a48 	vmov.f32	s4, s16
 8021b7c:	f7f4 f800 	bl	8015b80 <utils_map>
						if (current_out < mcconf->cc_min_current) {
 8021b80:	edd9 7a50 	vldr	s15, [r9, #320]	; 0x140
							current_out = 0.0;
 8021b84:	eeb4 0a67 	vcmp.f32	s0, s15
						current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8021b88:	eef0 ba40 	vmov.f32	s23, s0
							current_out = 0.0;
 8021b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b90:	bf48      	it	mi
 8021b92:	eef0 ba48 	vmovmi.f32	s23, s16
 8021b96:	e64c      	b.n	8021832 <adc_thread+0x7d2>
									current_out = 0.0;
 8021b98:	eddf ba04 	vldr	s23, [pc, #16]	; 8021bac <adc_thread+0xb4c>
								if (current_out < mcconf->cc_min_current) {
 8021b9c:	eeb0 0a4c 	vmov.f32	s0, s24
 8021ba0:	e619      	b.n	80217d6 <adc_thread+0x776>
 8021ba2:	bf00      	nop
 8021ba4:	40020400 	.word	0x40020400
 8021ba8:	2000e55c 	.word	0x2000e55c
 8021bac:	00000000 	.word	0x00000000

08021bb0 <app_adc_configure>:
void app_adc_configure(adc_config *conf) {
 8021bb0:	b508      	push	{r3, lr}
	config = *conf;
 8021bb2:	4601      	mov	r1, r0
 8021bb4:	2244      	movs	r2, #68	; 0x44
 8021bb6:	4803      	ldr	r0, [pc, #12]	; (8021bc4 <app_adc_configure+0x14>)
 8021bb8:	f7ea ffaa 	bl	800cb10 <memcpy>
	ms_without_power = 0.0;
 8021bbc:	4b02      	ldr	r3, [pc, #8]	; (8021bc8 <app_adc_configure+0x18>)
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	601a      	str	r2, [r3, #0]
 8021bc2:	bd08      	pop	{r3, pc}
 8021bc4:	2000e4b0 	.word	0x2000e4b0
 8021bc8:	2000e558 	.word	0x2000e558
 8021bcc:	00000000 	.word	0x00000000

08021bd0 <app_adc_start>:
void app_adc_start(bool use_rx_tx) {
 8021bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bd2:	b083      	sub	sp, #12
	stop_now = false;
 8021bd4:	2400      	movs	r4, #0
	use_rx_tx_as_buttons = use_rx_tx;
 8021bd6:	4e07      	ldr	r6, [pc, #28]	; (8021bf4 <app_adc_start+0x24>)
	stop_now = false;
 8021bd8:	4d07      	ldr	r5, [pc, #28]	; (8021bf8 <app_adc_start+0x28>)
	chThdCreateStatic(adc_thread_wa, sizeof(adc_thread_wa), NORMALPRIO, adc_thread, NULL);
 8021bda:	4b08      	ldr	r3, [pc, #32]	; (8021bfc <app_adc_start+0x2c>)
 8021bdc:	9400      	str	r4, [sp, #0]
void app_adc_start(bool use_rx_tx) {
 8021bde:	4607      	mov	r7, r0
	chThdCreateStatic(adc_thread_wa, sizeof(adc_thread_wa), NORMALPRIO, adc_thread, NULL);
 8021be0:	2240      	movs	r2, #64	; 0x40
 8021be2:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8021be6:	4806      	ldr	r0, [pc, #24]	; (8021c00 <app_adc_start+0x30>)
	use_rx_tx_as_buttons = use_rx_tx;
 8021be8:	7037      	strb	r7, [r6, #0]
	stop_now = false;
 8021bea:	702c      	strb	r4, [r5, #0]
	chThdCreateStatic(adc_thread_wa, sizeof(adc_thread_wa), NORMALPRIO, adc_thread, NULL);
 8021bec:	f7eb fec0 	bl	800d970 <chThdCreateStatic>
}
 8021bf0:	b003      	add	sp, #12
 8021bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bf4:	2000e570 	.word	0x2000e570
 8021bf8:	20001047 	.word	0x20001047
 8021bfc:	08021061 	.word	0x08021061
 8021c00:	2000df18 	.word	0x2000df18
	...

08021c10 <app_adc_stop>:
	stop_now = true;
 8021c10:	4b06      	ldr	r3, [pc, #24]	; (8021c2c <app_adc_stop+0x1c>)
void app_adc_stop(void) {
 8021c12:	b510      	push	{r4, lr}
	stop_now = true;
 8021c14:	2201      	movs	r2, #1
	while (is_running) {
 8021c16:	4c06      	ldr	r4, [pc, #24]	; (8021c30 <app_adc_stop+0x20>)
	stop_now = true;
 8021c18:	701a      	strb	r2, [r3, #0]
	while (is_running) {
 8021c1a:	7823      	ldrb	r3, [r4, #0]
 8021c1c:	b12b      	cbz	r3, 8021c2a <app_adc_stop+0x1a>
		chThdSleepMilliseconds(1);
 8021c1e:	200a      	movs	r0, #10
 8021c20:	f7eb fede 	bl	800d9e0 <chThdSleep>
	while (is_running) {
 8021c24:	7823      	ldrb	r3, [r4, #0]
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	d1f9      	bne.n	8021c1e <app_adc_stop+0xe>
 8021c2a:	bd10      	pop	{r4, pc}
 8021c2c:	20001047 	.word	0x20001047
 8021c30:	2000e550 	.word	0x2000e550
	...

08021c40 <app_adc_get_decoded_level>:
	return decoded_level;
 8021c40:	4b01      	ldr	r3, [pc, #4]	; (8021c48 <app_adc_get_decoded_level+0x8>)
 8021c42:	ed93 0a00 	vldr	s0, [r3]
}
 8021c46:	4770      	bx	lr
 8021c48:	2000e4f4 	.word	0x2000e4f4
 8021c4c:	00000000 	.word	0x00000000

08021c50 <app_adc_get_voltage>:
	return read_voltage;
 8021c50:	4b01      	ldr	r3, [pc, #4]	; (8021c58 <app_adc_get_voltage+0x8>)
 8021c52:	ed93 0a00 	vldr	s0, [r3]
}
 8021c56:	4770      	bx	lr
 8021c58:	2000e568 	.word	0x2000e568
 8021c5c:	00000000 	.word	0x00000000

08021c60 <app_adc_get_decoded_level2>:
	return decoded_level2;
 8021c60:	4b01      	ldr	r3, [pc, #4]	; (8021c68 <app_adc_get_decoded_level2+0x8>)
 8021c62:	ed93 0a00 	vldr	s0, [r3]
}
 8021c66:	4770      	bx	lr
 8021c68:	2000e4f8 	.word	0x2000e4f8
 8021c6c:	00000000 	.word	0x00000000

08021c70 <app_adc_get_voltage2>:
	return read_voltage2;
 8021c70:	4b01      	ldr	r3, [pc, #4]	; (8021c78 <app_adc_get_voltage2+0x8>)
 8021c72:	ed93 0a00 	vldr	s0, [r3]
}
 8021c76:	4770      	bx	lr
 8021c78:	2000e56c 	.word	0x2000e56c
 8021c7c:	00000000 	.word	0x00000000

08021c80 <rxerr>:

/*
 * This callback is invoked on a receive error, the errors mask is passed
 * as parameter.
 */
static void rxerr(UARTDriver *uartp, uartflags_t e) {
 8021c80:	4770      	bx	lr
 8021c82:	bf00      	nop
	...

08021c90 <rxend>:
}

/*
 * This callback is invoked when a receive buffer has been completely written.
 */
static void rxend(UARTDriver *uartp) {
 8021c90:	4770      	bx	lr
 8021c92:	bf00      	nop
	...

08021ca0 <rxchar>:
	serial_rx_buffer[serial_rx_write_pos++] = c;
 8021ca0:	4b0b      	ldr	r3, [pc, #44]	; (8021cd0 <rxchar+0x30>)
 8021ca2:	6818      	ldr	r0, [r3, #0]
 8021ca4:	1c42      	adds	r2, r0, #1
static void rxchar(UARTDriver *uartp, uint16_t c) {
 8021ca6:	b510      	push	{r4, lr}
	if (serial_rx_write_pos == SERIAL_RX_BUFFER_SIZE) {
 8021ca8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
	serial_rx_buffer[serial_rx_write_pos++] = c;
 8021cac:	4c09      	ldr	r4, [pc, #36]	; (8021cd4 <rxchar+0x34>)
 8021cae:	601a      	str	r2, [r3, #0]
		serial_rx_write_pos = 0;
 8021cb0:	bf04      	itt	eq
 8021cb2:	2200      	moveq	r2, #0
 8021cb4:	601a      	streq	r2, [r3, #0]
	serial_rx_buffer[serial_rx_write_pos++] = c;
 8021cb6:	5421      	strb	r1, [r4, r0]
 8021cb8:	2320      	movs	r3, #32
 8021cba:	f383 8811 	msr	BASEPRI, r3
	chEvtSignalI(process_tp, (eventmask_t) 1);
 8021cbe:	4b06      	ldr	r3, [pc, #24]	; (8021cd8 <rxchar+0x38>)
 8021cc0:	2101      	movs	r1, #1
 8021cc2:	6818      	ldr	r0, [r3, #0]
 8021cc4:	f7ec f8ac 	bl	800de20 <chEvtSignalI>
 8021cc8:	2300      	movs	r3, #0
 8021cca:	f383 8811 	msr	BASEPRI, r3
 8021cce:	bd10      	pop	{r4, pc}
 8021cd0:	2000ff20 	.word	0x2000ff20
 8021cd4:	2000fb1c 	.word	0x2000fb1c
 8021cd8:	2000fb18 	.word	0x2000fb18
 8021cdc:	00000000 	.word	0x00000000

08021ce0 <packet_process_thread>:
 8021ce0:	4b10      	ldr	r3, [pc, #64]	; (8021d24 <packet_process_thread+0x44>)
static THD_FUNCTION(packet_process_thread, arg) {
	(void)arg;

	chRegSetThreadName("uartcomm process");

	process_tp = chThdGetSelfX();
 8021ce2:	4a11      	ldr	r2, [pc, #68]	; (8021d28 <packet_process_thread+0x48>)
 8021ce4:	699b      	ldr	r3, [r3, #24]
 8021ce6:	4911      	ldr	r1, [pc, #68]	; (8021d2c <packet_process_thread+0x4c>)
 8021ce8:	4c11      	ldr	r4, [pc, #68]	; (8021d30 <packet_process_thread+0x50>)
 8021cea:	4e12      	ldr	r6, [pc, #72]	; (8021d34 <packet_process_thread+0x54>)
static THD_FUNCTION(packet_process_thread, arg) {
 8021cec:	b580      	push	{r7, lr}
 8021cee:	4f12      	ldr	r7, [pc, #72]	; (8021d38 <packet_process_thread+0x58>)
 8021cf0:	6199      	str	r1, [r3, #24]
	process_tp = chThdGetSelfX();
 8021cf2:	6013      	str	r3, [r2, #0]

		while (serial_rx_read_pos != serial_rx_write_pos) {
			packet_process_byte(serial_rx_buffer[serial_rx_read_pos++], PACKET_HANDLER);

			if (serial_rx_read_pos == SERIAL_RX_BUFFER_SIZE) {
				serial_rx_read_pos = 0;
 8021cf4:	f04f 0800 	mov.w	r8, #0
		chEvtWaitAny((eventmask_t) 1);
 8021cf8:	2001      	movs	r0, #1
 8021cfa:	f7ec f8d1 	bl	800dea0 <chEvtWaitAny>
 8021cfe:	6823      	ldr	r3, [r4, #0]
		while (serial_rx_read_pos != serial_rx_write_pos) {
 8021d00:	6832      	ldr	r2, [r6, #0]
 8021d02:	429a      	cmp	r2, r3
			packet_process_byte(serial_rx_buffer[serial_rx_read_pos++], PACKET_HANDLER);
 8021d04:	f103 0501 	add.w	r5, r3, #1
 8021d08:	f04f 0101 	mov.w	r1, #1
		while (serial_rx_read_pos != serial_rx_write_pos) {
 8021d0c:	d0f4      	beq.n	8021cf8 <packet_process_thread+0x18>
			packet_process_byte(serial_rx_buffer[serial_rx_read_pos++], PACKET_HANDLER);
 8021d0e:	5cf8      	ldrb	r0, [r7, r3]
 8021d10:	6025      	str	r5, [r4, #0]
 8021d12:	f7f4 fa9d 	bl	8016250 <packet_process_byte>
			if (serial_rx_read_pos == SERIAL_RX_BUFFER_SIZE) {
 8021d16:	6823      	ldr	r3, [r4, #0]
 8021d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021d1c:	d1f0      	bne.n	8021d00 <packet_process_thread+0x20>
				serial_rx_read_pos = 0;
 8021d1e:	f8c4 8000 	str.w	r8, [r4]
 8021d22:	e7ec      	b.n	8021cfe <packet_process_thread+0x1e>
 8021d24:	20001a40 	.word	0x20001a40
 8021d28:	2000fb18 	.word	0x2000fb18
 8021d2c:	080306d0 	.word	0x080306d0
 8021d30:	2000ff1c 	.word	0x2000ff1c
 8021d34:	2000ff20 	.word	0x2000ff20
 8021d38:	2000fb1c 	.word	0x2000fb1c
 8021d3c:	00000000 	.word	0x00000000

08021d40 <process_packet>:
static void process_packet(unsigned char *data, unsigned int len) {
 8021d40:	b538      	push	{r3, r4, r5, lr}
 8021d42:	4604      	mov	r4, r0
 8021d44:	460d      	mov	r5, r1
	commands_set_send_func(send_packet_wrapper);
 8021d46:	4804      	ldr	r0, [pc, #16]	; (8021d58 <process_packet+0x18>)
 8021d48:	f7f6 fcb2 	bl	80186b0 <commands_set_send_func>
	commands_process_packet(data, len);
 8021d4c:	4629      	mov	r1, r5
 8021d4e:	4620      	mov	r0, r4
}
 8021d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	commands_process_packet(data, len);
 8021d54:	f7f6 be74 	b.w	8018a40 <commands_process_packet>
 8021d58:	08021d61 	.word	0x08021d61
 8021d5c:	00000000 	.word	0x00000000

08021d60 <send_packet_wrapper>:
	packet_send_packet(data, len, PACKET_HANDLER);
 8021d60:	2201      	movs	r2, #1
 8021d62:	f7f4 ba0d 	b.w	8016180 <packet_send_packet>
 8021d66:	bf00      	nop
	...

08021d70 <send_packet>:
static void send_packet(unsigned char *data, unsigned int len) {
 8021d70:	b570      	push	{r4, r5, r6, lr}
	while (HW_UART_DEV.txstate == UART_TX_ACTIVE) {
 8021d72:	4c0c      	ldr	r4, [pc, #48]	; (8021da4 <send_packet+0x34>)
 8021d74:	7863      	ldrb	r3, [r4, #1]
 8021d76:	2b01      	cmp	r3, #1
static void send_packet(unsigned char *data, unsigned int len) {
 8021d78:	4606      	mov	r6, r0
 8021d7a:	460d      	mov	r5, r1
	while (HW_UART_DEV.txstate == UART_TX_ACTIVE) {
 8021d7c:	d105      	bne.n	8021d8a <send_packet+0x1a>
		chThdSleep(1);
 8021d7e:	2001      	movs	r0, #1
 8021d80:	f7eb fe2e 	bl	800d9e0 <chThdSleep>
	while (HW_UART_DEV.txstate == UART_TX_ACTIVE) {
 8021d84:	7863      	ldrb	r3, [r4, #1]
 8021d86:	2b01      	cmp	r3, #1
 8021d88:	d0f9      	beq.n	8021d7e <send_packet+0xe>
	memcpy(buffer, data, len);
 8021d8a:	4631      	mov	r1, r6
 8021d8c:	462a      	mov	r2, r5
 8021d8e:	4806      	ldr	r0, [pc, #24]	; (8021da8 <send_packet+0x38>)
 8021d90:	f7ea febe 	bl	800cb10 <memcpy>
	uartStartSend(&HW_UART_DEV, len, buffer);
 8021d94:	4629      	mov	r1, r5
 8021d96:	4a04      	ldr	r2, [pc, #16]	; (8021da8 <send_packet+0x38>)
 8021d98:	4802      	ldr	r0, [pc, #8]	; (8021da4 <send_packet+0x34>)
}
 8021d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uartStartSend(&HW_UART_DEV, len, buffer);
 8021d9e:	f7ec be77 	b.w	800ea90 <uartStartSend>
 8021da2:	bf00      	nop
 8021da4:	200020b4 	.word	0x200020b4
 8021da8:	2000e574 	.word	0x2000e574
 8021dac:	00000000 	.word	0x00000000

08021db0 <txend2>:
 8021db0:	4770      	bx	lr
 8021db2:	bf00      	nop
	...

08021dc0 <txend1>:
 8021dc0:	4770      	bx	lr
 8021dc2:	bf00      	nop
	...

08021dd0 <app_uartcomm_start>:
void app_uartcomm_start(void) {
 8021dd0:	b530      	push	{r4, r5, lr}
	if (!is_running) {
 8021dd2:	4c16      	ldr	r4, [pc, #88]	; (8021e2c <app_uartcomm_start+0x5c>)
	packet_init(send_packet, process_packet, PACKET_HANDLER);
 8021dd4:	4916      	ldr	r1, [pc, #88]	; (8021e30 <app_uartcomm_start+0x60>)
 8021dd6:	4817      	ldr	r0, [pc, #92]	; (8021e34 <app_uartcomm_start+0x64>)
 8021dd8:	2201      	movs	r2, #1
void app_uartcomm_start(void) {
 8021dda:	b083      	sub	sp, #12
	packet_init(send_packet, process_packet, PACKET_HANDLER);
 8021ddc:	f7f4 f9c0 	bl	8016160 <packet_init>
	serial_rx_read_pos = 0;
 8021de0:	4815      	ldr	r0, [pc, #84]	; (8021e38 <app_uartcomm_start+0x68>)
	serial_rx_write_pos = 0;
 8021de2:	4916      	ldr	r1, [pc, #88]	; (8021e3c <app_uartcomm_start+0x6c>)
	if (!is_running) {
 8021de4:	7823      	ldrb	r3, [r4, #0]
	serial_rx_read_pos = 0;
 8021de6:	2200      	movs	r2, #0
 8021de8:	6002      	str	r2, [r0, #0]
	serial_rx_write_pos = 0;
 8021dea:	600a      	str	r2, [r1, #0]
	if (!is_running) {
 8021dec:	b95b      	cbnz	r3, 8021e06 <app_uartcomm_start+0x36>
 8021dee:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		chThdCreateStatic(packet_process_thread_wa, sizeof(packet_process_thread_wa),
 8021df2:	9500      	str	r5, [sp, #0]
 8021df4:	4b12      	ldr	r3, [pc, #72]	; (8021e40 <app_uartcomm_start+0x70>)
 8021df6:	4813      	ldr	r0, [pc, #76]	; (8021e44 <app_uartcomm_start+0x74>)
 8021df8:	2240      	movs	r2, #64	; 0x40
 8021dfa:	f241 1198 	movw	r1, #4504	; 0x1198
 8021dfe:	f7eb fdb7 	bl	800d970 <chThdCreateStatic>
		is_running = true;
 8021e02:	2301      	movs	r3, #1
 8021e04:	7023      	strb	r3, [r4, #0]
	uartStart(&HW_UART_DEV, &uart_cfg);
 8021e06:	4910      	ldr	r1, [pc, #64]	; (8021e48 <app_uartcomm_start+0x78>)
 8021e08:	4810      	ldr	r0, [pc, #64]	; (8021e4c <app_uartcomm_start+0x7c>)
 8021e0a:	f7ec fe21 	bl	800ea50 <uartStart>
	palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) |
 8021e0e:	f240 423a 	movw	r2, #1082	; 0x43a
 8021e12:	2140      	movs	r1, #64	; 0x40
 8021e14:	480e      	ldr	r0, [pc, #56]	; (8021e50 <app_uartcomm_start+0x80>)
 8021e16:	f7ed fff3 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) |
 8021e1a:	480d      	ldr	r0, [pc, #52]	; (8021e50 <app_uartcomm_start+0x80>)
 8021e1c:	f240 423a 	movw	r2, #1082	; 0x43a
 8021e20:	2180      	movs	r1, #128	; 0x80
}
 8021e22:	b003      	add	sp, #12
 8021e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) |
 8021e28:	f7ed bfea 	b.w	800fe00 <_pal_lld_setgroupmode>
 8021e2c:	2000e979 	.word	0x2000e979
 8021e30:	08021d41 	.word	0x08021d41
 8021e34:	08021d71 	.word	0x08021d71
 8021e38:	2000ff1c 	.word	0x2000ff1c
 8021e3c:	2000ff20 	.word	0x2000ff20
 8021e40:	08021ce1 	.word	0x08021ce1
 8021e44:	2000e980 	.word	0x2000e980
 8021e48:	20001048 	.word	0x20001048
 8021e4c:	200020b4 	.word	0x200020b4
 8021e50:	40020800 	.word	0x40020800
	...

08021e60 <app_uartcomm_stop>:
void app_uartcomm_stop(void) {
 8021e60:	b510      	push	{r4, lr}
	palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT_PULLUP);
 8021e62:	4c08      	ldr	r4, [pc, #32]	; (8021e84 <app_uartcomm_stop+0x24>)
	uartStop(&HW_UART_DEV);
 8021e64:	4808      	ldr	r0, [pc, #32]	; (8021e88 <app_uartcomm_stop+0x28>)
 8021e66:	f7ec fe03 	bl	800ea70 <uartStop>
	palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT_PULLUP);
 8021e6a:	4620      	mov	r0, r4
 8021e6c:	2220      	movs	r2, #32
 8021e6e:	2140      	movs	r1, #64	; 0x40
 8021e70:	f7ed ffc6 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_INPUT_PULLUP);
 8021e74:	4620      	mov	r0, r4
 8021e76:	2220      	movs	r2, #32
 8021e78:	2180      	movs	r1, #128	; 0x80
}
 8021e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_INPUT_PULLUP);
 8021e7e:	f7ed bfbf 	b.w	800fe00 <_pal_lld_setgroupmode>
 8021e82:	bf00      	nop
 8021e84:	40020800 	.word	0x40020800
 8021e88:	200020b4 	.word	0x200020b4
 8021e8c:	00000000 	.word	0x00000000

08021e90 <app_uartcomm_configure>:
	if (is_running) {
 8021e90:	4b04      	ldr	r3, [pc, #16]	; (8021ea4 <app_uartcomm_configure+0x14>)
	uart_cfg.speed = baudrate;
 8021e92:	4905      	ldr	r1, [pc, #20]	; (8021ea8 <app_uartcomm_configure+0x18>)
	if (is_running) {
 8021e94:	781b      	ldrb	r3, [r3, #0]
	uart_cfg.speed = baudrate;
 8021e96:	6148      	str	r0, [r1, #20]
	if (is_running) {
 8021e98:	b903      	cbnz	r3, 8021e9c <app_uartcomm_configure+0xc>
 8021e9a:	4770      	bx	lr
		uartStart(&HW_UART_DEV, &uart_cfg);
 8021e9c:	4803      	ldr	r0, [pc, #12]	; (8021eac <app_uartcomm_configure+0x1c>)
 8021e9e:	f7ec bdd7 	b.w	800ea50 <uartStart>
 8021ea2:	bf00      	nop
 8021ea4:	2000e979 	.word	0x2000e979
 8021ea8:	20001048 	.word	0x20001048
 8021eac:	200020b4 	.word	0x200020b4

08021eb0 <terminal_cmd_nunchuk_status>:
			}
		}
	}
}

static void terminal_cmd_nunchuk_status(int argc, const char **argv) {
 8021eb0:	b508      	push	{r3, lr}
	(void)argc;
	(void)argv;

	commands_printf("Nunchuk Status");
 8021eb2:	4809      	ldr	r0, [pc, #36]	; (8021ed8 <terminal_cmd_nunchuk_status+0x28>)
 8021eb4:	f7f6 fc0c 	bl	80186d0 <commands_printf>
	commands_printf("Output: %s", output_running ? "On" : "Off");
 8021eb8:	4b08      	ldr	r3, [pc, #32]	; (8021edc <terminal_cmd_nunchuk_status+0x2c>)
 8021eba:	4a09      	ldr	r2, [pc, #36]	; (8021ee0 <terminal_cmd_nunchuk_status+0x30>)
 8021ebc:	7819      	ldrb	r1, [r3, #0]
 8021ebe:	4b09      	ldr	r3, [pc, #36]	; (8021ee4 <terminal_cmd_nunchuk_status+0x34>)
 8021ec0:	4809      	ldr	r0, [pc, #36]	; (8021ee8 <terminal_cmd_nunchuk_status+0x38>)
 8021ec2:	2900      	cmp	r1, #0
 8021ec4:	bf14      	ite	ne
 8021ec6:	4611      	movne	r1, r2
 8021ec8:	4619      	moveq	r1, r3
 8021eca:	f7f6 fc01 	bl	80186d0 <commands_printf>
	commands_printf(" ");
 8021ece:	4807      	ldr	r0, [pc, #28]	; (8021eec <terminal_cmd_nunchuk_status+0x3c>)
}
 8021ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	commands_printf(" ");
 8021ed4:	f7f6 bbfc 	b.w	80186d0 <commands_printf>
 8021ed8:	08030758 	.word	0x08030758
 8021edc:	20010530 	.word	0x20010530
 8021ee0:	08030750 	.word	0x08030750
 8021ee4:	08030754 	.word	0x08030754
 8021ee8:	08030768 	.word	0x08030768
 8021eec:	0802f33c 	.word	0x0802f33c

08021ef0 <output_thread>:
static THD_FUNCTION(output_thread, arg) {
 8021ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ef4:	4ebe      	ldr	r6, [pc, #760]	; (80221f0 <output_thread+0x300>)
 8021ef6:	4abf      	ldr	r2, [pc, #764]	; (80221f4 <output_thread+0x304>)
 8021ef8:	69b3      	ldr	r3, [r6, #24]
 8021efa:	4cbf      	ldr	r4, [pc, #764]	; (80221f8 <output_thread+0x308>)
 8021efc:	4dbf      	ldr	r5, [pc, #764]	; (80221fc <output_thread+0x30c>)
 8021efe:	f8df 833c 	ldr.w	r8, [pc, #828]	; 802223c <output_thread+0x34c>
 8021f02:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8022240 <output_thread+0x350>
 8021f06:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8022244 <output_thread+0x354>
 8021f0a:	ed2d 8b0c 	vpush	{d8-d13}
 8021f0e:	619a      	str	r2, [r3, #24]
 8021f10:	4bbb      	ldr	r3, [pc, #748]	; (8022200 <output_thread+0x310>)
		const float max_current_diff = mcconf->l_current_max * 0.2;
 8021f12:	ed9f aabc 	vldr	s20, [pc, #752]	; 8022204 <output_thread+0x314>
	return ((float)chuck_d.js_y - 128.0) / 128.0;
 8021f16:	eddf 9abc 	vldr	s19, [pc, #752]	; 8022208 <output_thread+0x318>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8021f1a:	ed9f 9abc 	vldr	s18, [pc, #752]	; 802220c <output_thread+0x31c>
 8021f1e:	eddf 8abc 	vldr	s17, [pc, #752]	; 8022210 <output_thread+0x320>
static THD_FUNCTION(output_thread, arg) {
 8021f22:	b087      	sub	sp, #28
 8021f24:	f103 0720 	add.w	r7, r3, #32
		chThdSleepMilliseconds(OUTPUT_ITERATION_TIME_MS);
 8021f28:	200a      	movs	r0, #10
 8021f2a:	f7eb fd59 	bl	800d9e0 <chThdSleep>
		if (timeout_has_timeout() || chuck_error != 0 || config.ctrl_type == CHUK_CTRL_TYPE_NONE) {
 8021f2e:	f7f8 f97f 	bl	801a230 <timeout_has_timeout>
 8021f32:	2800      	cmp	r0, #0
 8021f34:	d1f8      	bne.n	8021f28 <output_thread+0x38>
 8021f36:	6823      	ldr	r3, [r4, #0]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d1f5      	bne.n	8021f28 <output_thread+0x38>
 8021f3c:	782b      	ldrb	r3, [r5, #0]
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d0f2      	beq.n	8021f28 <output_thread+0x38>
		if (chVTTimeElapsedSinceX(last_update_time) > MS2ST(LOCAL_TIMEOUT)) {
 8021f42:	4bb4      	ldr	r3, [pc, #720]	; (8022214 <output_thread+0x324>)
 8021f44:	681a      	ldr	r2, [r3, #0]
  return ch.vtlist.vt_systime;
 8021f46:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8021f48:	1a9b      	subs	r3, r3, r2
 8021f4a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8021f4e:	4293      	cmp	r3, r2
 8021f50:	d8ea      	bhi.n	8021f28 <output_thread+0x38>
		const volatile mc_configuration *mcconf = mc_interface_get_configuration();
 8021f52:	f7f9 fa75 	bl	801b440 <mc_interface_get_configuration>
 8021f56:	4682      	mov	sl, r0
 8021f58:	9000      	str	r0, [sp, #0]
		const float current_now = mc_interface_get_tot_current_directional_filtered();
 8021f5a:	f7f9 fbc9 	bl	801b6f0 <mc_interface_get_tot_current_directional_filtered>
		const float max_current_diff = mcconf->l_current_max * 0.2;
 8021f5e:	ed9a ba01 	vldr	s22, [sl, #4]
		if (chuck_d.bt_c && chuck_d.bt_z) {
 8021f62:	f898 3014 	ldrb.w	r3, [r8, #20]
		const float current_now = mc_interface_get_tot_current_directional_filtered();
 8021f66:	eef0 aa40 	vmov.f32	s21, s0
		const float max_current_diff = mcconf->l_current_max * 0.2;
 8021f6a:	ee2b ba0a 	vmul.f32	s22, s22, s20
		if (chuck_d.bt_c && chuck_d.bt_z) {
 8021f6e:	b123      	cbz	r3, 8021f7a <output_thread+0x8a>
 8021f70:	f898 3015 	ldrb.w	r3, [r8, #21]
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	f040 8229 	bne.w	80223cc <output_thread+0x4dc>
		if (chuck_d.bt_z && !was_z && config.ctrl_type == CHUK_CTRL_TYPE_CURRENT &&
 8021f7a:	f898 3015 	ldrb.w	r3, [r8, #21]
 8021f7e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8021f82:	b13b      	cbz	r3, 8021f94 <output_thread+0xa4>
 8021f84:	4ba4      	ldr	r3, [pc, #656]	; (8022218 <output_thread+0x328>)
 8021f86:	781b      	ldrb	r3, [r3, #0]
 8021f88:	b923      	cbnz	r3, 8021f94 <output_thread+0xa4>
 8021f8a:	782a      	ldrb	r2, [r5, #0]
 8021f8c:	b2d2      	uxtb	r2, r2
 8021f8e:	2a01      	cmp	r2, #1
 8021f90:	f000 82a1 	beq.w	80224d6 <output_thread+0x5e6>
 8021f94:	f899 0000 	ldrb.w	r0, [r9]
		was_z = chuck_d.bt_z;
 8021f98:	4a9f      	ldr	r2, [pc, #636]	; (8022218 <output_thread+0x328>)
 8021f9a:	f898 3015 	ldrb.w	r3, [r8, #21]
 8021f9e:	7013      	strb	r3, [r2, #0]
		led_external_set_reversed(is_reverse);
 8021fa0:	f7f8 fdae 	bl	801ab00 <led_external_set_reversed>
	return ((float)chuck_d.js_y - 128.0) / 128.0;
 8021fa4:	edd8 7a01 	vldr	s15, [r8, #4]
 8021fa8:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 802221c <output_thread+0x32c>
		utils_deadband(&out_val, config.hyst, 1.0);
 8021fac:	ed95 0a01 	vldr	s0, [r5, #4]
	return ((float)chuck_d.js_y - 128.0) / 128.0;
 8021fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		utils_deadband(&out_val, config.hyst, 1.0);
 8021fb4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	return ((float)chuck_d.js_y - 128.0) / 128.0;
 8021fb8:	ee77 7ae9 	vsub.f32	s15, s15, s19
		utils_deadband(&out_val, config.hyst, 1.0);
 8021fbc:	a803      	add	r0, sp, #12
	return ((float)chuck_d.js_y - 128.0) / 128.0;
 8021fbe:	ee67 7a88 	vmul.f32	s15, s15, s16
		float out_val = app_nunchuk_get_decoded_chuk();
 8021fc2:	edcd 7a03 	vstr	s15, [sp, #12]
		utils_deadband(&out_val, config.hyst, 1.0);
 8021fc6:	f7f3 fdeb 	bl	8015ba0 <utils_deadband>
		out_val = utils_throttle_curve(out_val, config.throttle_exp, config.throttle_exp_brake, config.throttle_exp_mode);
 8021fca:	edd5 0a05 	vldr	s1, [r5, #20]
 8021fce:	ed9d 0a03 	vldr	s0, [sp, #12]
 8021fd2:	ed95 1a06 	vldr	s2, [r5, #24]
 8021fd6:	7f28      	ldrb	r0, [r5, #28]
 8021fd8:	f7f3 fff2 	bl	8015fc0 <utils_throttle_curve>
		float x_axis = ((float)chuck_d.js_x - 128.0) / 128.0;
 8021fdc:	edd8 7a00 	vldr	s15, [r8]
		if (out_val < -0.001) {
 8021fe0:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8022220 <output_thread+0x330>
		out_val = utils_throttle_curve(out_val, config.throttle_exp, config.throttle_exp_brake, config.throttle_exp_mode);
 8021fe4:	ed8d 0a03 	vstr	s0, [sp, #12]
		float x_axis = ((float)chuck_d.js_x - 128.0) / 128.0;
 8021fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (out_val < -0.001) {
 8021fec:	eeb4 0ac7 	vcmpe.f32	s0, s14
		float x_axis = ((float)chuck_d.js_x - 128.0) / 128.0;
 8021ff0:	ee77 7ae9 	vsub.f32	s15, s15, s19
		if (out_val < -0.001) {
 8021ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float x_axis = ((float)chuck_d.js_x - 128.0) / 128.0;
 8021ff8:	ee27 8a88 	vmul.f32	s16, s15, s16
			if (x_axis < -0.4) {
 8021ffc:	eddf 7a89 	vldr	s15, [pc, #548]	; 8022224 <output_thread+0x334>
 8022000:	eeb4 8ae7 	vcmpe.f32	s16, s15
		if (out_val < -0.001) {
 8022004:	d554      	bpl.n	80220b0 <output_thread+0x1c0>
			if (x_axis < -0.4) {
 8022006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802200a:	f100 81e3 	bmi.w	80223d4 <output_thread+0x4e4>
			} else if (x_axis > 0.4) {
 802200e:	eddf 7a86 	vldr	s15, [pc, #536]	; 8022228 <output_thread+0x338>
 8022012:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8022016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				led_external_set_state(LED_EXT_BRAKE_TURN_RIGHT);
 802201a:	bfcc      	ite	gt
 802201c:	2006      	movgt	r0, #6
				led_external_set_state(LED_EXT_BRAKE);
 802201e:	2002      	movle	r0, #2
 8022020:	f7f8 fd66 	bl	801aaf0 <led_external_set_state>
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 8022024:	f8db a000 	ldr.w	sl, [fp]
 8022028:	f10a 0201 	add.w	r2, sl, #1
 802202c:	f8cb 2000 	str.w	r2, [fp]
 8022030:	f7f9 fa9e 	bl	801b570 <mc_interface_get_rpm>
		if (filter_ptr >= RPM_FILTER_SAMPLES) {
 8022034:	f8db 2000 	ldr.w	r2, [fp]
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 8022038:	4b71      	ldr	r3, [pc, #452]	; (8022200 <output_thread+0x310>)
		float rpm_filtered = 0.0;
 802203a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8022248 <output_thread+0x358>
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 802203e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
		if (filter_ptr >= RPM_FILTER_SAMPLES) {
 8022042:	2a07      	cmp	r2, #7
		filter_buffer[filter_ptr++] = mc_interface_get_rpm();
 8022044:	ed83 0a00 	vstr	s0, [r3]
			filter_ptr = 0;
 8022048:	bfc4      	itt	gt
 802204a:	2300      	movgt	r3, #0
 802204c:	f8cb 3000 	strgt.w	r3, [fp]
 8022050:	4b6b      	ldr	r3, [pc, #428]	; (8022200 <output_thread+0x310>)
			rpm_filtered += filter_buffer[i];
 8022052:	ecb3 7a01 	vldmia	r3!, {s14}
		for (int i = 0;i < RPM_FILTER_SAMPLES;i++) {
 8022056:	429f      	cmp	r7, r3
			rpm_filtered += filter_buffer[i];
 8022058:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0;i < RPM_FILTER_SAMPLES;i++) {
 802205c:	d1f9      	bne.n	8022052 <output_thread+0x162>
		if (chuck_d.bt_c) {
 802205e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8022062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8022066:	b39b      	cbz	r3, 80220d0 <output_thread+0x1e0>
			if (!was_pid) {
 8022068:	4b70      	ldr	r3, [pc, #448]	; (802222c <output_thread+0x33c>)
 802206a:	781b      	ldrb	r3, [r3, #0]
		rpm_filtered /= RPM_FILTER_SAMPLES;
 802206c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8022070:	ee27 0a80 	vmul.f32	s0, s15, s0
			if (!was_pid) {
 8022074:	2b00      	cmp	r3, #0
 8022076:	f040 8149 	bne.w	802230c <output_thread+0x41c>
				pid_rpm = rpm_filtered;
 802207a:	4a6d      	ldr	r2, [pc, #436]	; (8022230 <output_thread+0x340>)
				if ((is_reverse && pid_rpm > 0.0) || (!is_reverse && pid_rpm < 0.0)) {
 802207c:	f899 3000 	ldrb.w	r3, [r9]
				pid_rpm = rpm_filtered;
 8022080:	ed82 0a00 	vstr	s0, [r2]
				if ((is_reverse && pid_rpm > 0.0) || (!is_reverse && pid_rpm < 0.0)) {
 8022084:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022088:	2b00      	cmp	r3, #0
 802208a:	f040 820d 	bne.w	80224a8 <output_thread+0x5b8>
 802208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022092:	f100 820d 	bmi.w	80224b0 <output_thread+0x5c0>
				was_pid = true;
 8022096:	4a65      	ldr	r2, [pc, #404]	; (802222c <output_thread+0x33c>)
 8022098:	2301      	movs	r3, #1
 802209a:	7013      	strb	r3, [r2, #0]
			mc_interface_set_pid_speed(pid_rpm);
 802209c:	f7fa f920 	bl	801c2e0 <mc_interface_set_pid_speed>
			if (config.multi_esc) {
 80220a0:	7f6b      	ldrb	r3, [r5, #29]
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	f040 8166 	bne.w	8022374 <output_thread+0x484>
			prev_current = current_now;
 80220a8:	4b62      	ldr	r3, [pc, #392]	; (8022234 <output_thread+0x344>)
 80220aa:	edc3 aa00 	vstr	s21, [r3]
			continue;
 80220ae:	e73b      	b.n	8021f28 <output_thread+0x38>
			if (x_axis < -0.4) {
 80220b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220b4:	f100 81cd 	bmi.w	8022452 <output_thread+0x562>
			} else if (x_axis > 0.4) {
 80220b8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8022228 <output_thread+0x338>
 80220bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80220c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				led_external_set_state(LED_EXT_TURN_RIGHT);
 80220c4:	bfcc      	ite	gt
 80220c6:	2004      	movgt	r0, #4
				led_external_set_state(LED_EXT_NORMAL);
 80220c8:	2001      	movle	r0, #1
 80220ca:	f7f8 fd11 	bl	801aaf0 <led_external_set_state>
 80220ce:	e7a9      	b.n	8022024 <output_thread+0x134>
		if (out_val >= 0.0) {
 80220d0:	eddd 7a03 	vldr	s15, [sp, #12]
		was_pid = false;
 80220d4:	4b55      	ldr	r3, [pc, #340]	; (802222c <output_thread+0x33c>)
		if (out_val >= 0.0) {
 80220d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		was_pid = false;
 80220da:	701a      	strb	r2, [r3, #0]
			current = out_val * mcconf->lo_current_motor_max_now;
 80220dc:	9b00      	ldr	r3, [sp, #0]
		if (out_val >= 0.0) {
 80220de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			current = out_val * fabsf(mcconf->lo_current_motor_min_now);
 80220e2:	bfb6      	itet	lt
 80220e4:	ed93 8a1e 	vldrlt	s16, [r3, #120]	; 0x78
			current = out_val * mcconf->lo_current_motor_max_now;
 80220e8:	ed93 8a1d 	vldrge	s16, [r3, #116]	; 0x74
			current = out_val * fabsf(mcconf->lo_current_motor_min_now);
 80220ec:	eeb0 8ac8 	vabslt.f32	s16, s16
 80220f0:	ee28 8a27 	vmul.f32	s16, s16, s15
		float rpm_local = mc_interface_get_rpm();
 80220f4:	f7f9 fa3c 	bl	801b570 <mc_interface_get_rpm>
		if (is_reverse) {
 80220f8:	f899 3000 	ldrb.w	r3, [r9]
		float rpm_local = mc_interface_get_rpm();
 80220fc:	eeb0 ca40 	vmov.f32	s24, s0
		if (is_reverse) {
 8022100:	b10b      	cbz	r3, 8022106 <output_thread+0x216>
			rpm_local = -rpm_local;
 8022102:	eeb1 ca40 	vneg.f32	s24, s0
		if (config.multi_esc) {
 8022106:	7f6b      	ldrb	r3, [r5, #29]
 8022108:	eef0 ba4c 	vmov.f32	s23, s24
 802210c:	2b00      	cmp	r3, #0
 802210e:	d03e      	beq.n	802218e <output_thread+0x29e>
 8022110:	f04f 0a00 	mov.w	sl, #0
				can_status_msg *msg = comm_can_get_status_msg_index(i);
 8022114:	4650      	mov	r0, sl
 8022116:	f7f8 fcdb 	bl	801aad0 <comm_can_get_status_msg_index>
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 802211a:	6803      	ldr	r3, [r0, #0]
 802211c:	2b00      	cmp	r3, #0
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 802211e:	f10a 0a01 	add.w	sl, sl, #1
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8022122:	db31      	blt.n	8022188 <output_thread+0x298>
  return ch.vtlist.vt_systime;
 8022124:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022126:	6842      	ldr	r2, [r0, #4]
 8022128:	1a9b      	subs	r3, r3, r2
 802212a:	ee07 3a90 	vmov	s15, r3
 802212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
					if (fabsf(msg_current) > fabsf(current_highest_abs)) {
 8022132:	eef0 6aea 	vabs.f32	s13, s21
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8022136:	ee87 7a89 	vdiv.f32	s14, s15, s18
 802213a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 802213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022142:	d521      	bpl.n	8022188 <output_thread+0x298>
					if (is_reverse) {
 8022144:	f899 3000 	ldrb.w	r3, [r9]
					float rpm_tmp = msg->rpm;
 8022148:	edd0 7a02 	vldr	s15, [r0, #8]
					if (is_reverse) {
 802214c:	b10b      	cbz	r3, 8022152 <output_thread+0x262>
						rpm_tmp = -rpm_tmp;
 802214e:	eef1 7a67 	vneg.f32	s15, s15
					if (msg->duty < 0.0) {
 8022152:	ed90 6a04 	vldr	s12, [r0, #16]
					float msg_current = msg->current;
 8022156:	ed90 7a03 	vldr	s14, [r0, #12]
						rpm_lowest = rpm_tmp;
 802215a:	eef4 7a6b 	vcmp.f32	s15, s23
 802215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					if (msg->duty < 0.0) {
 8022162:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
						rpm_lowest = rpm_tmp;
 8022166:	bf48      	it	mi
 8022168:	eef0 ba67 	vmovmi.f32	s23, s15
					if (msg->duty < 0.0) {
 802216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						msg_current = -msg_current;
 8022170:	bf48      	it	mi
 8022172:	eeb1 7a47 	vnegmi.f32	s14, s14
					if (fabsf(msg_current) > fabsf(current_highest_abs)) {
 8022176:	eef0 7ac7 	vabs.f32	s15, s14
						current_highest_abs = msg_current;
 802217a:	eef4 7a66 	vcmp.f32	s15, s13
 802217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022182:	bfc8      	it	gt
 8022184:	eef0 aa47 	vmovgt.f32	s21, s14
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022188:	f1ba 0f0a 	cmp.w	sl, #10
 802218c:	d1c2      	bne.n	8022114 <output_thread+0x224>
		const float ramp_time = fabsf(current) > fabsf(prev_current) ? config.ramp_time_pos : config.ramp_time_neg;
 802218e:	4b29      	ldr	r3, [pc, #164]	; (8022234 <output_thread+0x344>)
		const float current_range = mcconf->l_current_max + fabsf(mcconf->l_current_min);
 8022190:	9a00      	ldr	r2, [sp, #0]
		const float ramp_time = fabsf(current) > fabsf(prev_current) ? config.ramp_time_pos : config.ramp_time_neg;
 8022192:	edd3 ca00 	vldr	s25, [r3]
		const float current_range = mcconf->l_current_max + fabsf(mcconf->l_current_min);
 8022196:	edd2 7a01 	vldr	s15, [r2, #4]
 802219a:	ed92 7a02 	vldr	s14, [r2, #8]
		const float ramp_time = fabsf(current) > fabsf(prev_current) ? config.ramp_time_pos : config.ramp_time_neg;
 802219e:	eef0 6aec 	vabs.f32	s13, s25
 80221a2:	eeb0 6ac8 	vabs.f32	s12, s16
 80221a6:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80221aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221ae:	bfcc      	ite	gt
 80221b0:	edd5 6a02 	vldrgt	s13, [r5, #8]
 80221b4:	edd5 6a03 	vldrle	s13, [r5, #12]
		if (ramp_time > 0.01) {
 80221b8:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8022238 <output_thread+0x348>
 80221bc:	eef4 6ac6 	vcmpe.f32	s13, s12
 80221c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221c4:	f300 810a 	bgt.w	80223dc <output_thread+0x4ec>
		prev_current = current;
 80221c8:	4b1a      	ldr	r3, [pc, #104]	; (8022234 <output_thread+0x344>)
		if (current < 0.0) {
 80221ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80221ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		prev_current = current;
 80221d2:	ed83 8a00 	vstr	s16, [r3]
		if (current < 0.0) {
 80221d6:	f100 81af 	bmi.w	8022538 <output_thread+0x648>
			if (config.multi_esc) {
 80221da:	7f6b      	ldrb	r3, [r5, #29]
 80221dc:	2b00      	cmp	r3, #0
 80221de:	f000 808c 	beq.w	80222fa <output_thread+0x40a>
 80221e2:	eef0 aa48 	vmov.f32	s21, s16
							current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 80221e6:	ed9f ba18 	vldr	s22, [pc, #96]	; 8022248 <output_thread+0x358>
 80221ea:	f04f 0a00 	mov.w	sl, #0
 80221ee:	e038      	b.n	8022262 <output_thread+0x372>
 80221f0:	20001a40 	.word	0x20001a40
 80221f4:	08030740 	.word	0x08030740
 80221f8:	2000ff3c 	.word	0x2000ff3c
 80221fc:	200104d8 	.word	0x200104d8
 8022200:	200104fc 	.word	0x200104fc
 8022204:	3e4ccccd 	.word	0x3e4ccccd
 8022208:	43000000 	.word	0x43000000
 802220c:	461c4000 	.word	0x461c4000
 8022210:	3dcccccd 	.word	0x3dcccccd
 8022214:	2001052c 	.word	0x2001052c
 8022218:	20010ad9 	.word	0x20010ad9
 802221c:	3c000000 	.word	0x3c000000
 8022220:	ba83126f 	.word	0xba83126f
 8022224:	becccccd 	.word	0xbecccccd
 8022228:	3ecccccd 	.word	0x3ecccccd
 802222c:	20010ad8 	.word	0x20010ad8
 8022230:	20010ad0 	.word	0x20010ad0
 8022234:	20010ad4 	.word	0x20010ad4
 8022238:	3c23d70a 	.word	0x3c23d70a
 802223c:	2000ff24 	.word	0x2000ff24
 8022240:	20010520 	.word	0x20010520
 8022244:	2001051c 	.word	0x2001051c
 8022248:	00000000 	.word	0x00000000
 802224c:	447a0000 	.word	0x447a0000
							comm_can_set_current(msg->id, -current_out);
 8022250:	eeb1 0a6a 	vneg.f32	s0, s21
 8022254:	f7f8 fbfc 	bl	801aa50 <comm_can_set_current>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022258:	f10a 0a01 	add.w	sl, sl, #1
 802225c:	f1ba 0f0a 	cmp.w	sl, #10
 8022260:	d045      	beq.n	80222ee <output_thread+0x3fe>
					can_status_msg *msg = comm_can_get_status_msg_index(i);
 8022262:	4650      	mov	r0, sl
 8022264:	f7f8 fc34 	bl	801aad0 <comm_can_get_status_msg_index>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8022268:	6801      	ldr	r1, [r0, #0]
 802226a:	2900      	cmp	r1, #0
 802226c:	dbf4      	blt.n	8022258 <output_thread+0x368>
  return ch.vtlist.vt_systime;
 802226e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022270:	6842      	ldr	r2, [r0, #4]
 8022272:	1a9b      	subs	r3, r3, r2
 8022274:	ee07 3a90 	vmov	s15, r3
 8022278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802227c:	ee87 7a89 	vdiv.f32	s14, s15, s18
 8022280:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8022284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022288:	d5e6      	bpl.n	8022258 <output_thread+0x368>
						if (config.tc) {
 802228a:	7fab      	ldrb	r3, [r5, #30]
 802228c:	b30b      	cbz	r3, 80222d2 <output_thread+0x3e2>
							if (is_reverse) {
 802228e:	f899 3000 	ldrb.w	r3, [r9]
							float rpm_tmp = msg->rpm;
 8022292:	ed90 0a02 	vldr	s0, [r0, #8]
							if (is_reverse) {
 8022296:	b10b      	cbz	r3, 802229c <output_thread+0x3ac>
								rpm_tmp = -rpm_tmp;
 8022298:	eeb1 0a40 	vneg.f32	s0, s0
							current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 802229c:	ed95 1a08 	vldr	s2, [r5, #32]
 80222a0:	ed5f 0a17 	vldr	s1, [pc, #-92]	; 8022248 <output_thread+0x358>
 80222a4:	9001      	str	r0, [sp, #4]
 80222a6:	ee30 0a6b 	vsub.f32	s0, s0, s23
 80222aa:	eeb0 2a4b 	vmov.f32	s4, s22
 80222ae:	eef0 1a48 	vmov.f32	s3, s16
 80222b2:	f7f3 fc65 	bl	8015b80 <utils_map>
							if (current_out < mcconf->cc_min_current) {
 80222b6:	9b00      	ldr	r3, [sp, #0]
 80222b8:	9801      	ldr	r0, [sp, #4]
 80222ba:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80222be:	6801      	ldr	r1, [r0, #0]
 80222c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80222c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 80222c8:	eef0 aa40 	vmov.f32	s21, s0
								current_out = 0.0;
 80222cc:	bf48      	it	mi
 80222ce:	eef0 aa4b 	vmovmi.f32	s21, s22
						if (is_reverse) {
 80222d2:	f899 3000 	ldrb.w	r3, [r9]
							comm_can_set_current(msg->id, -current_out);
 80222d6:	b2c8      	uxtb	r0, r1
						if (is_reverse) {
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d1b9      	bne.n	8022250 <output_thread+0x360>
							comm_can_set_current(msg->id, current_out);
 80222dc:	eeb0 0a6a 	vmov.f32	s0, s21
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 80222e0:	f10a 0a01 	add.w	sl, sl, #1
							comm_can_set_current(msg->id, current_out);
 80222e4:	f7f8 fbb4 	bl	801aa50 <comm_can_set_current>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 80222e8:	f1ba 0f0a 	cmp.w	sl, #10
 80222ec:	d1b9      	bne.n	8022262 <output_thread+0x372>
				if (config.tc) {
 80222ee:	7fab      	ldrb	r3, [r5, #30]
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	f040 8148 	bne.w	8022586 <output_thread+0x696>
 80222f6:	eeb0 8a6a 	vmov.f32	s16, s21
			if (is_reverse) {
 80222fa:	f899 3000 	ldrb.w	r3, [r9]
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d05f      	beq.n	80223c2 <output_thread+0x4d2>
				mc_interface_set_current(-current_out);
 8022302:	eeb1 0a48 	vneg.f32	s0, s16
 8022306:	f7fa f86b 	bl	801c3e0 <mc_interface_set_current>
 802230a:	e60d      	b.n	8021f28 <output_thread+0x38>
				if (is_reverse) {
 802230c:	f899 3000 	ldrb.w	r3, [r9]
					pid_rpm -= (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 8022310:	edd5 6a04 	vldr	s13, [r5, #16]
 8022314:	ed9d 7a03 	vldr	s14, [sp, #12]
 8022318:	ed1f 5a34 	vldr	s10, [pc, #-208]	; 802224c <output_thread+0x35c>
				if (is_reverse) {
 802231c:	2b00      	cmp	r3, #0
 802231e:	f000 809f 	beq.w	8022460 <output_thread+0x570>
					pid_rpm -= (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 8022322:	ee66 6a87 	vmul.f32	s13, s13, s14
					if (pid_rpm > 0.0) {
 8022326:	4bac      	ldr	r3, [pc, #688]	; (80225d8 <output_thread+0x6e8>)
 8022328:	eddf 5aac 	vldr	s11, [pc, #688]	; 80225dc <output_thread+0x6ec>
 802232c:	edd3 7a00 	vldr	s15, [r3]
					if (pid_rpm < (rpm_filtered - config.stick_erpm_per_s_in_cc)) {
 8022330:	ed95 6a04 	vldr	s12, [r5, #16]
					pid_rpm -= (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 8022334:	ee86 7a85 	vdiv.f32	s14, s13, s10
 8022338:	eef4 7a65 	vcmp.f32	s15, s11
 802233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022340:	bfc8      	it	gt
 8022342:	eef0 7a65 	vmovgt.f32	s15, s11
 8022346:	ee77 7ac7 	vsub.f32	s15, s15, s14
					if (pid_rpm < (rpm_filtered - config.stick_erpm_per_s_in_cc)) {
 802234a:	ee30 7a46 	vsub.f32	s14, s0, s12
					pid_rpm -= (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 802234e:	edc3 7a00 	vstr	s15, [r3]
					if (pid_rpm < (rpm_filtered - config.stick_erpm_per_s_in_cc)) {
 8022352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802235a:	d57e      	bpl.n	802245a <output_thread+0x56a>
						pid_rpm = rpm_filtered - config.stick_erpm_per_s_in_cc;
 802235c:	edd5 7a04 	vldr	s15, [r5, #16]
 8022360:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022364:	ed83 0a00 	vstr	s0, [r3]
			mc_interface_set_pid_speed(pid_rpm);
 8022368:	f7f9 ffba 	bl	801c2e0 <mc_interface_set_pid_speed>
			if (config.multi_esc) {
 802236c:	7f6b      	ldrb	r3, [r5, #29]
 802236e:	2b00      	cmp	r3, #0
 8022370:	f43f ae9a 	beq.w	80220a8 <output_thread+0x1b8>
				float current = mc_interface_get_tot_current_directional_filtered();
 8022374:	f7f9 f9bc 	bl	801b6f0 <mc_interface_get_tot_current_directional_filtered>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022378:	f04f 0a00 	mov.w	sl, #0
				float current = mc_interface_get_tot_current_directional_filtered();
 802237c:	eeb0 8a40 	vmov.f32	s16, s0
 8022380:	e003      	b.n	802238a <output_thread+0x49a>
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022382:	f1ba 0f0a 	cmp.w	sl, #10
 8022386:	f43f ae8f 	beq.w	80220a8 <output_thread+0x1b8>
					can_status_msg *msg = comm_can_get_status_msg_index(i);
 802238a:	4650      	mov	r0, sl
 802238c:	f7f8 fba0 	bl	801aad0 <comm_can_get_status_msg_index>
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8022390:	6802      	ldr	r2, [r0, #0]
 8022392:	2a00      	cmp	r2, #0
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022394:	f10a 0a01 	add.w	sl, sl, #1
					if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8022398:	dbf3      	blt.n	8022382 <output_thread+0x492>
 802239a:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 802239c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 802239e:	1a5b      	subs	r3, r3, r1
 80223a0:	ee07 3a90 	vmov	s15, r3
 80223a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80223a8:	ee87 7a89 	vdiv.f32	s14, s15, s18
 80223ac:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80223b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223b4:	d5e5      	bpl.n	8022382 <output_thread+0x492>
						comm_can_set_current(msg->id, current);
 80223b6:	b2d0      	uxtb	r0, r2
 80223b8:	eeb0 0a48 	vmov.f32	s0, s16
 80223bc:	f7f8 fb48 	bl	801aa50 <comm_can_set_current>
 80223c0:	e7df      	b.n	8022382 <output_thread+0x492>
				mc_interface_set_current(current_out);
 80223c2:	eeb0 0a48 	vmov.f32	s0, s16
 80223c6:	f7fa f80b 	bl	801c3e0 <mc_interface_set_current>
 80223ca:	e5ad      	b.n	8021f28 <output_thread+0x38>
			led_external_set_state(LED_EXT_BATT);
 80223cc:	2007      	movs	r0, #7
 80223ce:	f7f8 fb8f 	bl	801aaf0 <led_external_set_state>
			continue;
 80223d2:	e5a9      	b.n	8021f28 <output_thread+0x38>
				led_external_set_state(LED_EXT_BRAKE_TURN_LEFT);
 80223d4:	2005      	movs	r0, #5
 80223d6:	f7f8 fb8b 	bl	801aaf0 <led_external_set_state>
 80223da:	e623      	b.n	8022024 <output_thread+0x134>
			const float ramp_step = ((float)OUTPUT_ITERATION_TIME_MS * current_range) / (ramp_time * 1000.0);
 80223dc:	ed9f 6a80 	vldr	s12, [pc, #512]	; 80225e0 <output_thread+0x6f0>
			float current_goal = prev_current;
 80223e0:	edcd ca04 	vstr	s25, [sp, #16]
		const float current_range = mcconf->l_current_max + fabsf(mcconf->l_current_min);
 80223e4:	eeb0 7ac7 	vabs.f32	s14, s14
 80223e8:	ee77 7a27 	vadd.f32	s15, s14, s15
			const float ramp_step = ((float)OUTPUT_ITERATION_TIME_MS * current_range) / (ramp_time * 1000.0);
 80223ec:	ee66 6a86 	vmul.f32	s13, s13, s12
			utils_step_towards(&current_goal, current, ramp_step);
 80223f0:	eeb0 0a48 	vmov.f32	s0, s16
			const float ramp_step = ((float)OUTPUT_ITERATION_TIME_MS * current_range) / (ramp_time * 1000.0);
 80223f4:	ee87 daa6 	vdiv.f32	s26, s15, s13
			utils_step_towards(&current_goal, current, ramp_step);
 80223f8:	a804      	add	r0, sp, #16
 80223fa:	eef0 0a4d 	vmov.f32	s1, s26
 80223fe:	f7f3 fb0f 	bl	8015a20 <utils_step_towards>
			bool is_decreasing = current_goal < goal_tmp;
 8022402:	ed9d 8a04 	vldr	s16, [sp, #16]
			if (is_reverse) {
 8022406:	f899 3000 	ldrb.w	r3, [r9]
			float goal_tmp2 = current_goal;
 802240a:	ed8d 8a05 	vstr	s16, [sp, #20]
			bool is_decreasing = current_goal < goal_tmp;
 802240e:	eeb0 7a48 	vmov.f32	s14, s16
			if (is_reverse) {
 8022412:	2b00      	cmp	r3, #0
 8022414:	d06f      	beq.n	80224f6 <output_thread+0x606>
				if (fabsf(current_goal + current_highest_abs) > max_current_diff) {
 8022416:	ee7a 7a88 	vadd.f32	s15, s21, s16
 802241a:	eef0 7ae7 	vabs.f32	s15, s15
 802241e:	eeb4 bae7 	vcmpe.f32	s22, s15
 8022422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022426:	f100 80c9 	bmi.w	80225bc <output_thread+0x6cc>
			if ((!is_decreasing || is_decreasing2) && fabsf(out_val) > 0.001) {
 802242a:	eef4 cac8 	vcmpe.f32	s25, s16
 802242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022432:	f73f aec9 	bgt.w	80221c8 <output_thread+0x2d8>
 8022436:	eddd 7a03 	vldr	s15, [sp, #12]
 802243a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80225e4 <output_thread+0x6f4>
 802243e:	eef0 7ae7 	vabs.f32	s15, s15
 8022442:	eef4 7ae6 	vcmpe.f32	s15, s13
 8022446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802244a:	bfd8      	it	le
 802244c:	eeb0 8a47 	vmovle.f32	s16, s14
 8022450:	e6ba      	b.n	80221c8 <output_thread+0x2d8>
				led_external_set_state(LED_EXT_TURN_LEFT);
 8022452:	2003      	movs	r0, #3
 8022454:	f7f8 fb4c 	bl	801aaf0 <led_external_set_state>
 8022458:	e5e4      	b.n	8022024 <output_thread+0x134>
 802245a:	eeb0 0a67 	vmov.f32	s0, s15
 802245e:	e61d      	b.n	802209c <output_thread+0x1ac>
					pid_rpm += (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 8022460:	ee66 6a87 	vmul.f32	s13, s13, s14
					if (pid_rpm < 0.0) {
 8022464:	4b5c      	ldr	r3, [pc, #368]	; (80225d8 <output_thread+0x6e8>)
 8022466:	eddf 5a5d 	vldr	s11, [pc, #372]	; 80225dc <output_thread+0x6ec>
 802246a:	edd3 7a00 	vldr	s15, [r3]
					if (pid_rpm > (rpm_filtered + config.stick_erpm_per_s_in_cc)) {
 802246e:	ed95 6a04 	vldr	s12, [r5, #16]
					pid_rpm += (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 8022472:	ee86 7a85 	vdiv.f32	s14, s13, s10
 8022476:	eef4 7a65 	vcmp.f32	s15, s11
 802247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802247e:	bf48      	it	mi
 8022480:	eef0 7a65 	vmovmi.f32	s15, s11
 8022484:	ee77 7a27 	vadd.f32	s15, s14, s15
					if (pid_rpm > (rpm_filtered + config.stick_erpm_per_s_in_cc)) {
 8022488:	ee30 7a06 	vadd.f32	s14, s0, s12
					pid_rpm += (out_val * config.stick_erpm_per_s_in_cc) / ((float)OUTPUT_ITERATION_TIME_MS * 1000.0);
 802248c:	edc3 7a00 	vstr	s15, [r3]
					if (pid_rpm > (rpm_filtered + config.stick_erpm_per_s_in_cc)) {
 8022490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022498:	dddf      	ble.n	802245a <output_thread+0x56a>
						pid_rpm = rpm_filtered + config.stick_erpm_per_s_in_cc;
 802249a:	edd5 7a04 	vldr	s15, [r5, #16]
 802249e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80224a2:	ed83 0a00 	vstr	s0, [r3]
 80224a6:	e5f9      	b.n	802209c <output_thread+0x1ac>
				if ((is_reverse && pid_rpm > 0.0) || (!is_reverse && pid_rpm < 0.0)) {
 80224a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224ac:	f77f adf3 	ble.w	8022096 <output_thread+0x1a6>
					if (fabsf(pid_rpm) > mcconf->s_pid_min_erpm) {
 80224b0:	9b00      	ldr	r3, [sp, #0]
 80224b2:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80224b6:	eef0 7ac0 	vabs.f32	s15, s0
 80224ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80224be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224c2:	f73f ad31 	bgt.w	8021f28 <output_thread+0x38>
						pid_rpm = 0.0;
 80224c6:	eddf 7a45 	vldr	s15, [pc, #276]	; 80225dc <output_thread+0x6ec>
 80224ca:	4b43      	ldr	r3, [pc, #268]	; (80225d8 <output_thread+0x6e8>)
 80224cc:	eeb0 0a67 	vmov.f32	s0, s15
 80224d0:	edc3 7a00 	vstr	s15, [r3]
 80224d4:	e5df      	b.n	8022096 <output_thread+0x1a6>
				fabsf(current_now) < max_current_diff) {
 80224d6:	eef0 7aea 	vabs.f32	s15, s21
		if (chuck_d.bt_z && !was_z && config.ctrl_type == CHUK_CTRL_TYPE_CURRENT &&
 80224da:	eeb4 bae7 	vcmpe.f32	s22, s15
 80224de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224e2:	f77f ad57 	ble.w	8021f94 <output_thread+0xa4>
			if (is_reverse) {
 80224e6:	f899 1000 	ldrb.w	r1, [r9]
 80224ea:	2900      	cmp	r1, #0
 80224ec:	d06e      	beq.n	80225cc <output_thread+0x6dc>
				is_reverse = false;
 80224ee:	f889 3000 	strb.w	r3, [r9]
 80224f2:	4618      	mov	r0, r3
 80224f4:	e550      	b.n	8021f98 <output_thread+0xa8>
				if (fabsf(current_goal - current_highest_abs) > max_current_diff) {
 80224f6:	ee78 7a6a 	vsub.f32	s15, s16, s21
 80224fa:	eef0 7ae7 	vabs.f32	s15, s15
 80224fe:	eeb4 bae7 	vcmpe.f32	s22, s15
 8022502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022506:	d590      	bpl.n	802242a <output_thread+0x53a>
					utils_step_towards(&goal_tmp2, current_highest_abs, 2.0 * ramp_step);
 8022508:	ee7d 0a0d 	vadd.f32	s1, s26, s26
 802250c:	eeb0 0a6a 	vmov.f32	s0, s21
 8022510:	a805      	add	r0, sp, #20
 8022512:	f7f3 fa85 	bl	8015a20 <utils_step_towards>
			if ((!is_decreasing || is_decreasing2) && fabsf(out_val) > 0.001) {
 8022516:	eef4 cac8 	vcmpe.f32	s25, s16
 802251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			bool is_decreasing2 = goal_tmp2 < current_goal;
 802251e:	eddd 7a05 	vldr	s15, [sp, #20]
 8022522:	ed9d 7a04 	vldr	s14, [sp, #16]
			if ((!is_decreasing || is_decreasing2) && fabsf(out_val) > 0.001) {
 8022526:	dd04      	ble.n	8022532 <output_thread+0x642>
 8022528:	eef4 7ac7 	vcmpe.f32	s15, s14
 802252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022530:	d54f      	bpl.n	80225d2 <output_thread+0x6e2>
			bool is_decreasing2 = goal_tmp2 < current_goal;
 8022532:	eeb0 8a67 	vmov.f32	s16, s15
 8022536:	e77e      	b.n	8022436 <output_thread+0x546>
			mc_interface_set_brake_current(current);
 8022538:	eeb0 0a48 	vmov.f32	s0, s16
 802253c:	f7f9 ffa8 	bl	801c490 <mc_interface_set_brake_current>
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022540:	f04f 0a00 	mov.w	sl, #0
 8022544:	e003      	b.n	802254e <output_thread+0x65e>
 8022546:	f1ba 0f0a 	cmp.w	sl, #10
 802254a:	f43f aced 	beq.w	8021f28 <output_thread+0x38>
				can_status_msg *msg = comm_can_get_status_msg_index(i);
 802254e:	4650      	mov	r0, sl
 8022550:	f7f8 fabe 	bl	801aad0 <comm_can_get_status_msg_index>
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 8022554:	6802      	ldr	r2, [r0, #0]
 8022556:	2a00      	cmp	r2, #0
			for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8022558:	f10a 0a01 	add.w	sl, sl, #1
				if (msg->id >= 0 && UTILS_AGE_S(msg->rx_time) < MAX_CAN_AGE) {
 802255c:	dbf3      	blt.n	8022546 <output_thread+0x656>
 802255e:	6841      	ldr	r1, [r0, #4]
  return ch.vtlist.vt_systime;
 8022560:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022562:	1a5b      	subs	r3, r3, r1
 8022564:	ee07 3a90 	vmov	s15, r3
 8022568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802256c:	ee87 7a89 	vdiv.f32	s14, s15, s18
 8022570:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8022574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022578:	d5e5      	bpl.n	8022546 <output_thread+0x656>
					comm_can_set_current_brake(msg->id, current);
 802257a:	b2d0      	uxtb	r0, r2
 802257c:	eeb0 0a48 	vmov.f32	s0, s16
 8022580:	f7f8 fa86 	bl	801aa90 <comm_can_set_current_brake>
 8022584:	e7df      	b.n	8022546 <output_thread+0x656>
					current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 8022586:	ed9f 2a15 	vldr	s4, [pc, #84]	; 80225dc <output_thread+0x6ec>
 802258a:	ed95 1a08 	vldr	s2, [r5, #32]
 802258e:	eef0 1a48 	vmov.f32	s3, s16
 8022592:	ee3c 0a6b 	vsub.f32	s0, s24, s23
 8022596:	eef0 0a42 	vmov.f32	s1, s4
 802259a:	f7f3 faf1 	bl	8015b80 <utils_map>
					if (current_out < mcconf->cc_min_current) {
 802259e:	9b00      	ldr	r3, [sp, #0]
						current_out = 0.0;
 80225a0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80225dc <output_thread+0x6ec>
					if (current_out < mcconf->cc_min_current) {
 80225a4:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
						current_out = 0.0;
 80225a8:	eeb4 0a47 	vcmp.f32	s0, s14
					current_out = utils_map(diff, 0.0, config.tc_max_diff, current, 0.0);
 80225ac:	eeb0 8a40 	vmov.f32	s16, s0
						current_out = 0.0;
 80225b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225b4:	bf48      	it	mi
 80225b6:	eeb0 8a67 	vmovmi.f32	s16, s15
 80225ba:	e69e      	b.n	80222fa <output_thread+0x40a>
					utils_step_towards(&goal_tmp2, -current_highest_abs, 2.0 * ramp_step);
 80225bc:	ee7d 0a0d 	vadd.f32	s1, s26, s26
 80225c0:	eeb1 0a6a 	vneg.f32	s0, s21
 80225c4:	a805      	add	r0, sp, #20
 80225c6:	f7f3 fa2b 	bl	8015a20 <utils_step_towards>
 80225ca:	e7a4      	b.n	8022516 <output_thread+0x626>
				is_reverse = true;
 80225cc:	f889 2000 	strb.w	r2, [r9]
 80225d0:	e4e2      	b.n	8021f98 <output_thread+0xa8>
 80225d2:	eeb0 8a47 	vmov.f32	s16, s14
 80225d6:	e5f7      	b.n	80221c8 <output_thread+0x2d8>
 80225d8:	20010ad0 	.word	0x20010ad0
 80225dc:	00000000 	.word	0x00000000
 80225e0:	447a0000 	.word	0x447a0000
 80225e4:	3a83126f 	.word	0x3a83126f
	...

080225f0 <app_nunchuk_configure>:
void app_nunchuk_configure(chuk_config *conf) {
 80225f0:	b430      	push	{r4, r5}
	config = *conf;
 80225f2:	4605      	mov	r5, r0
 80225f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80225f6:	4c06      	ldr	r4, [pc, #24]	; (8022610 <app_nunchuk_configure+0x20>)
 80225f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80225fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80225fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80225fe:	682a      	ldr	r2, [r5, #0]
 8022600:	6022      	str	r2, [r4, #0]
	terminal_register_command_callback(
 8022602:	4b04      	ldr	r3, [pc, #16]	; (8022614 <app_nunchuk_configure+0x24>)
 8022604:	4904      	ldr	r1, [pc, #16]	; (8022618 <app_nunchuk_configure+0x28>)
 8022606:	4805      	ldr	r0, [pc, #20]	; (802261c <app_nunchuk_configure+0x2c>)
 8022608:	2200      	movs	r2, #0
}
 802260a:	bc30      	pop	{r4, r5}
	terminal_register_command_callback(
 802260c:	f7f4 bf70 	b.w	80174f0 <terminal_register_command_callback>
 8022610:	200104d8 	.word	0x200104d8
 8022614:	08021eb1 	.word	0x08021eb1
 8022618:	080306f0 	.word	0x080306f0
 802261c:	08030714 	.word	0x08030714

08022620 <app_nunchuk_start>:
void app_nunchuk_start(void) {
 8022620:	b510      	push	{r4, lr}
	chuck_d.js_y = 128;
 8022622:	4a09      	ldr	r2, [pc, #36]	; (8022648 <app_nunchuk_start+0x28>)
	stop_now = false;
 8022624:	4b09      	ldr	r3, [pc, #36]	; (802264c <app_nunchuk_start+0x2c>)
void app_nunchuk_start(void) {
 8022626:	b082      	sub	sp, #8
	chuck_d.js_y = 128;
 8022628:	2180      	movs	r1, #128	; 0x80
	stop_now = false;
 802262a:	2400      	movs	r4, #0
	chuck_d.js_y = 128;
 802262c:	6051      	str	r1, [r2, #4]
	stop_now = false;
 802262e:	701c      	strb	r4, [r3, #0]
	hw_start_i2c();
 8022630:	f7fe f806 	bl	8020640 <hw_start_i2c>
	chThdCreateStatic(chuk_thread_wa, sizeof(chuk_thread_wa), NORMALPRIO, chuk_thread, NULL);
 8022634:	9400      	str	r4, [sp, #0]
 8022636:	4b06      	ldr	r3, [pc, #24]	; (8022650 <app_nunchuk_start+0x30>)
 8022638:	4806      	ldr	r0, [pc, #24]	; (8022654 <app_nunchuk_start+0x34>)
 802263a:	2240      	movs	r2, #64	; 0x40
 802263c:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8022640:	f7eb f996 	bl	800d970 <chThdCreateStatic>
}
 8022644:	b002      	add	sp, #8
 8022646:	bd10      	pop	{r4, pc}
 8022648:	2000ff24 	.word	0x2000ff24
 802264c:	20001068 	.word	0x20001068
 8022650:	08022741 	.word	0x08022741
 8022654:	2000ff40 	.word	0x2000ff40
	...

08022660 <app_nunchuk_stop>:
	stop_now = true;
 8022660:	4b08      	ldr	r3, [pc, #32]	; (8022684 <app_nunchuk_stop+0x24>)
void app_nunchuk_stop(void) {
 8022662:	b510      	push	{r4, lr}
	stop_now = true;
 8022664:	2201      	movs	r2, #1
	if (is_running) {
 8022666:	4c08      	ldr	r4, [pc, #32]	; (8022688 <app_nunchuk_stop+0x28>)
	stop_now = true;
 8022668:	701a      	strb	r2, [r3, #0]
	if (is_running) {
 802266a:	7823      	ldrb	r3, [r4, #0]
 802266c:	b11b      	cbz	r3, 8022676 <app_nunchuk_stop+0x16>
 802266e:	e006      	b.n	802267e <app_nunchuk_stop+0x1e>
		chThdSleepMilliseconds(1);
 8022670:	200a      	movs	r0, #10
 8022672:	f7eb f9b5 	bl	800d9e0 <chThdSleep>
	while (is_running) {
 8022676:	7823      	ldrb	r3, [r4, #0]
 8022678:	2b00      	cmp	r3, #0
 802267a:	d1f9      	bne.n	8022670 <app_nunchuk_stop+0x10>
 802267c:	bd10      	pop	{r4, pc}
		hw_stop_i2c();
 802267e:	f7fe f807 	bl	8020690 <hw_stop_i2c>
 8022682:	e7f8      	b.n	8022676 <app_nunchuk_stop+0x16>
 8022684:	20001068 	.word	0x20001068
 8022688:	20010521 	.word	0x20010521
 802268c:	00000000 	.word	0x00000000

08022690 <app_nunchuk_get_decoded_chuk>:
	return ((float)chuck_d.js_y - 128.0) / 128.0;
 8022690:	4b06      	ldr	r3, [pc, #24]	; (80226ac <app_nunchuk_get_decoded_chuk+0x1c>)
 8022692:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80226b0 <app_nunchuk_get_decoded_chuk+0x20>
 8022696:	edd3 7a01 	vldr	s15, [r3, #4]
 802269a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80226b4 <app_nunchuk_get_decoded_chuk+0x24>
 802269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80226a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80226a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80226aa:	4770      	bx	lr
 80226ac:	2000ff24 	.word	0x2000ff24
 80226b0:	43000000 	.word	0x43000000
 80226b4:	3c000000 	.word	0x3c000000
	...

080226c0 <app_nunchuk_update_output>:
void app_nunchuk_update_output(chuck_data *data) {
 80226c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!output_running) {
 80226c2:	4916      	ldr	r1, [pc, #88]	; (802271c <app_nunchuk_update_output+0x5c>)
 80226c4:	780b      	ldrb	r3, [r1, #0]
void app_nunchuk_update_output(chuck_data *data) {
 80226c6:	b083      	sub	sp, #12
 80226c8:	4604      	mov	r4, r0
	if (!output_running) {
 80226ca:	b1ab      	cbz	r3, 80226f8 <app_nunchuk_update_output+0x38>
 80226cc:	4e14      	ldr	r6, [pc, #80]	; (8022720 <app_nunchuk_update_output+0x60>)
	chuck_d = *data;
 80226ce:	4d15      	ldr	r5, [pc, #84]	; (8022724 <app_nunchuk_update_output+0x64>)
 80226d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80226d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80226d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80226d8:	2320      	movs	r3, #32
 80226da:	e885 0003 	stmia.w	r5, {r0, r1}
 80226de:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.vt_systime;
 80226e2:	4b11      	ldr	r3, [pc, #68]	; (8022728 <app_nunchuk_update_output+0x68>)
 80226e4:	2200      	movs	r2, #0
 80226e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226e8:	f382 8811 	msr	BASEPRI, r2
	last_update_time = chVTGetSystemTime();
 80226ec:	6033      	str	r3, [r6, #0]
}
 80226ee:	b003      	add	sp, #12
 80226f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	timeout_reset();
 80226f4:	f7f7 bd8c 	b.w	801a210 <timeout_reset>
		last_update_time = 0;
 80226f8:	4e09      	ldr	r6, [pc, #36]	; (8022720 <app_nunchuk_update_output+0x60>)
		chuck_d.js_y = 128;
 80226fa:	4d0a      	ldr	r5, [pc, #40]	; (8022724 <app_nunchuk_update_output+0x64>)
 80226fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
		output_running = true;
 8022700:	2001      	movs	r0, #1
		last_update_time = 0;
 8022702:	6032      	str	r2, [r6, #0]
		chThdCreateStatic(output_thread_wa, sizeof(output_thread_wa), NORMALPRIO, output_thread, NULL);
 8022704:	9200      	str	r2, [sp, #0]
		chuck_d.js_y = 128;
 8022706:	2780      	movs	r7, #128	; 0x80
		output_running = true;
 8022708:	7008      	strb	r0, [r1, #0]
		chThdCreateStatic(output_thread_wa, sizeof(output_thread_wa), NORMALPRIO, output_thread, NULL);
 802270a:	4b08      	ldr	r3, [pc, #32]	; (802272c <app_nunchuk_update_output+0x6c>)
 802270c:	4808      	ldr	r0, [pc, #32]	; (8022730 <app_nunchuk_update_output+0x70>)
		chuck_d.js_y = 128;
 802270e:	606f      	str	r7, [r5, #4]
		chThdCreateStatic(output_thread_wa, sizeof(output_thread_wa), NORMALPRIO, output_thread, NULL);
 8022710:	2240      	movs	r2, #64	; 0x40
 8022712:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8022716:	f7eb f92b 	bl	800d970 <chThdCreateStatic>
 802271a:	e7d8      	b.n	80226ce <app_nunchuk_update_output+0xe>
 802271c:	20010530 	.word	0x20010530
 8022720:	2001052c 	.word	0x2001052c
 8022724:	2000ff24 	.word	0x2000ff24
 8022728:	20001a40 	.word	0x20001a40
 802272c:	08021ef1 	.word	0x08021ef1
 8022730:	20010538 	.word	0x20010538
	...

08022740 <chuk_thread>:
static THD_FUNCTION(chuk_thread, arg) {
 8022740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022744:	4b6e      	ldr	r3, [pc, #440]	; (8022900 <chuk_thread+0x1c0>)
 8022746:	4a6f      	ldr	r2, [pc, #444]	; (8022904 <chuk_thread+0x1c4>)
 8022748:	699b      	ldr	r3, [r3, #24]
		if (stop_now) {
 802274a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 802291c <chuk_thread+0x1dc>
 802274e:	619a      	str	r2, [r3, #24]
	is_running = true;
 8022750:	4a6d      	ldr	r2, [pc, #436]	; (8022908 <chuk_thread+0x1c8>)
 8022752:	2301      	movs	r3, #1
static THD_FUNCTION(chuk_thread, arg) {
 8022754:	b091      	sub	sp, #68	; 0x44
	is_running = true;
 8022756:	7013      	strb	r3, [r2, #0]
	hw_start_i2c();
 8022758:	f7fd ff72 	bl	8020640 <hw_start_i2c>
	chThdSleepMilliseconds(10);
 802275c:	2064      	movs	r0, #100	; 0x64
 802275e:	f7eb f93f 	bl	800d9e0 <chThdSleep>
		if (stop_now) {
 8022762:	f898 3000 	ldrb.w	r3, [r8]
 8022766:	2b00      	cmp	r3, #0
 8022768:	f040 80c8 	bne.w	80228fc <chuk_thread+0x1bc>
 802276c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8022914 <chuk_thread+0x1d4>
 8022770:	4f66      	ldr	r7, [pc, #408]	; (802290c <chuk_thread+0x1cc>)
		i2cAcquireBus(&HW_I2C_DEV);
 8022772:	4c67      	ldr	r4, [pc, #412]	; (8022910 <chuk_thread+0x1d0>)
 8022774:	f109 0506 	add.w	r5, r9, #6
 8022778:	ae04      	add	r6, sp, #16
 802277a:	e00e      	b.n	802279a <chuk_thread+0x5a>
			chuck_error = 2;
 802277c:	2302      	movs	r3, #2
 802277e:	603b      	str	r3, [r7, #0]
			hw_try_restore_i2c();
 8022780:	f7fd ffae 	bl	80206e0 <hw_try_restore_i2c>
			chThdSleepMilliseconds(100);
 8022784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022788:	f7eb f92a 	bl	800d9e0 <chThdSleep>
		chThdSleepMilliseconds(10);
 802278c:	2064      	movs	r0, #100	; 0x64
 802278e:	f7eb f927 	bl	800d9e0 <chThdSleep>
		if (stop_now) {
 8022792:	f898 3000 	ldrb.w	r3, [r8]
 8022796:	2b00      	cmp	r3, #0
 8022798:	d17c      	bne.n	8022894 <chuk_thread+0x154>
		txbuf[0] = 0xF0;
 802279a:	22f0      	movs	r2, #240	; 0xf0
		txbuf[1] = 0x55;
 802279c:	2355      	movs	r3, #85	; 0x55
		i2cAcquireBus(&HW_I2C_DEV);
 802279e:	4620      	mov	r0, r4
		txbuf[0] = 0xF0;
 80227a0:	f88d 201c 	strb.w	r2, [sp, #28]
		txbuf[1] = 0x55;
 80227a4:	f88d 301d 	strb.w	r3, [sp, #29]
		status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 2, rxbuf, 0, tmo);
 80227a8:	f04f 0b32 	mov.w	fp, #50	; 0x32
		i2cAcquireBus(&HW_I2C_DEV);
 80227ac:	f7eb ff18 	bl	800e5e0 <i2cAcquireBus>
		status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 2, rxbuf, 0, tmo);
 80227b0:	2300      	movs	r3, #0
 80227b2:	9301      	str	r3, [sp, #4]
 80227b4:	9600      	str	r6, [sp, #0]
 80227b6:	f8cd b008 	str.w	fp, [sp, #8]
 80227ba:	2302      	movs	r3, #2
 80227bc:	aa07      	add	r2, sp, #28
 80227be:	2152      	movs	r1, #82	; 0x52
 80227c0:	4620      	mov	r0, r4
 80227c2:	f7eb fed5 	bl	800e570 <i2cMasterTransmitTimeout>
 80227c6:	4682      	mov	sl, r0
		i2cReleaseBus(&HW_I2C_DEV);
 80227c8:	4620      	mov	r0, r4
 80227ca:	f7eb ff11 	bl	800e5f0 <i2cReleaseBus>
		if (is_ok) {
 80227ce:	f1ba 0f00 	cmp.w	sl, #0
 80227d2:	d1d3      	bne.n	802277c <chuk_thread+0x3c>
			txbuf[0] = 0xFB;
 80227d4:	22fb      	movs	r2, #251	; 0xfb
			i2cAcquireBus(&HW_I2C_DEV);
 80227d6:	4620      	mov	r0, r4
			txbuf[1] = 0x00;
 80227d8:	f88d a01d 	strb.w	sl, [sp, #29]
			txbuf[0] = 0xFB;
 80227dc:	f88d 201c 	strb.w	r2, [sp, #28]
			i2cAcquireBus(&HW_I2C_DEV);
 80227e0:	f7eb fefe 	bl	800e5e0 <i2cAcquireBus>
			status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 2, rxbuf, 0, tmo);
 80227e4:	e88d 0c40 	stmia.w	sp, {r6, sl, fp}
 80227e8:	2302      	movs	r3, #2
 80227ea:	aa07      	add	r2, sp, #28
 80227ec:	2152      	movs	r1, #82	; 0x52
 80227ee:	4620      	mov	r0, r4
 80227f0:	f7eb febe 	bl	800e570 <i2cMasterTransmitTimeout>
 80227f4:	4682      	mov	sl, r0
			i2cReleaseBus(&HW_I2C_DEV);
 80227f6:	4620      	mov	r0, r4
 80227f8:	f7eb fefa 	bl	800e5f0 <i2cReleaseBus>
		if (is_ok) {
 80227fc:	f1ba 0f00 	cmp.w	sl, #0
 8022800:	d1bc      	bne.n	802277c <chuk_thread+0x3c>
			i2cAcquireBus(&HW_I2C_DEV);
 8022802:	4620      	mov	r0, r4
			txbuf[0] = 0x00;
 8022804:	f88d a01c 	strb.w	sl, [sp, #28]
			i2cAcquireBus(&HW_I2C_DEV);
 8022808:	f7eb feea 	bl	800e5e0 <i2cAcquireBus>
			status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 1, rxbuf, 0, tmo);
 802280c:	e88d 0c40 	stmia.w	sp, {r6, sl, fp}
 8022810:	2301      	movs	r3, #1
 8022812:	aa07      	add	r2, sp, #28
 8022814:	2152      	movs	r1, #82	; 0x52
 8022816:	4620      	mov	r0, r4
 8022818:	f7eb feaa 	bl	800e570 <i2cMasterTransmitTimeout>
 802281c:	4682      	mov	sl, r0
			i2cReleaseBus(&HW_I2C_DEV);
 802281e:	4620      	mov	r0, r4
 8022820:	f7eb fee6 	bl	800e5f0 <i2cReleaseBus>
		if (is_ok) {
 8022824:	f1ba 0f00 	cmp.w	sl, #0
 8022828:	d1a8      	bne.n	802277c <chuk_thread+0x3c>
			chThdSleepMilliseconds(3);
 802282a:	201e      	movs	r0, #30
 802282c:	f7eb f8d8 	bl	800d9e0 <chThdSleep>
			i2cAcquireBus(&HW_I2C_DEV);
 8022830:	4620      	mov	r0, r4
 8022832:	f7eb fed5 	bl	800e5e0 <i2cAcquireBus>
			status = i2cMasterReceiveTimeout(&HW_I2C_DEV, chuck_addr, rxbuf, 6, tmo);
 8022836:	f8cd b000 	str.w	fp, [sp]
 802283a:	2306      	movs	r3, #6
 802283c:	4632      	mov	r2, r6
 802283e:	2152      	movs	r1, #82	; 0x52
 8022840:	4620      	mov	r0, r4
 8022842:	f7eb feb5 	bl	800e5b0 <i2cMasterReceiveTimeout>
 8022846:	4683      	mov	fp, r0
			i2cReleaseBus(&HW_I2C_DEV);
 8022848:	4620      	mov	r0, r4
 802284a:	f7eb fed1 	bl	800e5f0 <i2cReleaseBus>
		if (is_ok) {
 802284e:	f1bb 0f00 	cmp.w	fp, #0
 8022852:	d193      	bne.n	802277c <chuk_thread+0x3c>
 8022854:	4b2f      	ldr	r3, [pc, #188]	; (8022914 <chuk_thread+0x1d4>)
 8022856:	4631      	mov	r1, r6
 8022858:	2201      	movs	r2, #1
				if (last_buffer[i] != rxbuf[i]) {
 802285a:	f813 eb01 	ldrb.w	lr, [r3], #1
 802285e:	f811 0b01 	ldrb.w	r0, [r1], #1
					same = 0;
 8022862:	4586      	cmp	lr, r0
 8022864:	bf18      	it	ne
 8022866:	2200      	movne	r2, #0
			for (int i = 0;i < 6;i++) {
 8022868:	429d      	cmp	r5, r3
 802286a:	d1f6      	bne.n	802285a <chuk_thread+0x11a>
			memcpy(last_buffer, rxbuf, 6);
 802286c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8022870:	4b29      	ldr	r3, [pc, #164]	; (8022918 <chuk_thread+0x1d8>)
 8022872:	f8c9 0000 	str.w	r0, [r9]
 8022876:	8019      	strh	r1, [r3, #0]
			if (!same) {
 8022878:	b19a      	cbz	r2, 80228a2 <chuk_thread+0x162>
			if (timeout_has_timeout()) {
 802287a:	f7f7 fcd9 	bl	801a230 <timeout_has_timeout>
 802287e:	2800      	cmp	r0, #0
 8022880:	d084      	beq.n	802278c <chuk_thread+0x4c>
				chuck_error = 1;
 8022882:	2301      	movs	r3, #1
		chThdSleepMilliseconds(10);
 8022884:	2064      	movs	r0, #100	; 0x64
				chuck_error = 1;
 8022886:	603b      	str	r3, [r7, #0]
		chThdSleepMilliseconds(10);
 8022888:	f7eb f8aa 	bl	800d9e0 <chThdSleep>
		if (stop_now) {
 802288c:	f898 3000 	ldrb.w	r3, [r8]
 8022890:	2b00      	cmp	r3, #0
 8022892:	d082      	beq.n	802279a <chuk_thread+0x5a>
			is_running = false;
 8022894:	4a1c      	ldr	r2, [pc, #112]	; (8022908 <chuk_thread+0x1c8>)
 8022896:	2300      	movs	r3, #0
 8022898:	7013      	strb	r3, [r2, #0]
			chuck_error = 0;
 802289a:	603b      	str	r3, [r7, #0]
}
 802289c:	b011      	add	sp, #68	; 0x44
 802289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 80228a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80228a6:	f89d 0012 	ldrb.w	r0, [sp, #18]
				chuck_d_tmp.acc_y = (rxbuf[3] << 2) | ((rxbuf[5] >> 4) & 3);
 80228aa:	f89d 1013 	ldrb.w	r1, [sp, #19]
				chuck_error = 0;
 80228ae:	603a      	str	r2, [r7, #0]
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 80228b0:	f3c3 0281 	ubfx	r2, r3, #2, #2
				chuck_d_tmp.acc_z = (rxbuf[4] << 2) | ((rxbuf[5] >> 6) & 3);
 80228b4:	f89d e014 	ldrb.w	lr, [sp, #20]
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 80228b8:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
				chuck_d_tmp.acc_y = (rxbuf[3] << 2) | ((rxbuf[5] >> 4) & 3);
 80228bc:	f3c3 1001 	ubfx	r0, r3, #4, #2
 80228c0:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
				chuck_d_tmp.acc_z = (rxbuf[4] << 2) | ((rxbuf[5] >> 6) & 3);
 80228c4:	0999      	lsrs	r1, r3, #6
 80228c6:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 80228ca:	920c      	str	r2, [sp, #48]	; 0x30
				chuck_d_tmp.bt_z = !((rxbuf[5] >> 0) & 1);
 80228cc:	43da      	mvns	r2, r3
				chuck_d_tmp.bt_c = !((rxbuf[5] >> 1) & 1);
 80228ce:	ea6f 0353 	mvn.w	r3, r3, lsr #1
				chuck_d_tmp.bt_z = !((rxbuf[5] >> 0) & 1);
 80228d2:	f002 0201 	and.w	r2, r2, #1
				chuck_d_tmp.bt_c = !((rxbuf[5] >> 1) & 1);
 80228d6:	f003 0301 	and.w	r3, r3, #1
				chuck_d_tmp.acc_y = (rxbuf[3] << 2) | ((rxbuf[5] >> 4) & 3);
 80228da:	900d      	str	r0, [sp, #52]	; 0x34
				chuck_d_tmp.js_x = rxbuf[0];
 80228dc:	f89d e010 	ldrb.w	lr, [sp, #16]
				chuck_d_tmp.acc_z = (rxbuf[4] << 2) | ((rxbuf[5] >> 6) & 3);
 80228e0:	910e      	str	r1, [sp, #56]	; 0x38
				app_nunchuk_update_output(&chuck_d_tmp);
 80228e2:	a80a      	add	r0, sp, #40	; 0x28
				chuck_d_tmp.js_y = rxbuf[1];
 80228e4:	f89d 1011 	ldrb.w	r1, [sp, #17]
				chuck_d_tmp.bt_z = !((rxbuf[5] >> 0) & 1);
 80228e8:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
				chuck_d_tmp.bt_c = !((rxbuf[5] >> 1) & 1);
 80228ec:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				chuck_d_tmp.js_x = rxbuf[0];
 80228f0:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
				chuck_d_tmp.js_y = rxbuf[1];
 80228f4:	910b      	str	r1, [sp, #44]	; 0x2c
				app_nunchuk_update_output(&chuck_d_tmp);
 80228f6:	f7ff fee3 	bl	80226c0 <app_nunchuk_update_output>
 80228fa:	e7be      	b.n	802287a <chuk_thread+0x13a>
 80228fc:	4f03      	ldr	r7, [pc, #12]	; (802290c <chuk_thread+0x1cc>)
 80228fe:	e7c9      	b.n	8022894 <chuk_thread+0x154>
 8022900:	20001a40 	.word	0x20001a40
 8022904:	08030730 	.word	0x08030730
 8022908:	20010521 	.word	0x20010521
 802290c:	2000ff3c 	.word	0x2000ff3c
 8022910:	20001d74 	.word	0x20001d74
 8022914:	20010524 	.word	0x20010524
 8022918:	20010528 	.word	0x20010528
 802291c:	20001068 	.word	0x20001068

08022920 <example_thread>:
    // Start the example thread
    chThdCreateStatic(example_thread_wa, sizeof(example_thread_wa),
                      NORMALPRIO, example_thread, NULL);
}

static THD_FUNCTION(example_thread, arg) {
 8022920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022924:	4cb7      	ldr	r4, [pc, #732]	; (8022c04 <example_thread+0x2e4>)
 8022926:	4ab8      	ldr	r2, [pc, #736]	; (8022c08 <example_thread+0x2e8>)
 8022928:	69a3      	ldr	r3, [r4, #24]
 802292a:	f8df b350 	ldr.w	fp, [pc, #848]	; 8022c7c <example_thread+0x35c>
 802292e:	f8df a350 	ldr.w	sl, [pc, #848]	; 8022c80 <example_thread+0x360>
 8022932:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8022c84 <example_thread+0x364>
 8022936:	f8df 8350 	ldr.w	r8, [pc, #848]	; 8022c88 <example_thread+0x368>
        float pot = (float)ADC_Value[ADC_IND_EXT2];
        pot /= 4095.0;
        
        
        //Read in Hall Sensor state
        hallSensorBack = READ_HALL2();
 802293a:	4eb4      	ldr	r6, [pc, #720]	; (8022c0c <example_thread+0x2ec>)
            timerSpeedSensor = chVTGetSystemTimeX();
            
        } else if (hallSensorBack == 0 && semaphoreWheelSensor == 0)  {
            
            semaphoreWheelSensor = 1;
        } else if (hallSensorBack == 0 && (float)ST2MS(chVTTimeElapsedSinceX(timerSpeedSensor)) > noRotatingTreshold) {
 802293c:	4fb4      	ldr	r7, [pc, #720]	; (8022c10 <example_thread+0x2f0>)
static THD_FUNCTION(example_thread, arg) {
 802293e:	ed2d 8b04 	vpush	{d8-d9}
 8022942:	619a      	str	r2, [r3, #24]
 8022944:	b085      	sub	sp, #20
    const volatile mc_configuration *mcconf = mc_interface_get_configuration();
 8022946:	f7f8 fd7b 	bl	801b440 <mc_interface_get_configuration>
    timerSpeedSensor = 0;
 802294a:	4ab2      	ldr	r2, [pc, #712]	; (8022c14 <example_thread+0x2f4>)
        } else if (hallSensorBack == 0 && (float)ST2MS(chVTTimeElapsedSinceX(timerSpeedSensor)) > noRotatingTreshold) {
 802294c:	ed9f 8ab2 	vldr	s16, [pc, #712]	; 8022c18 <example_thread+0x2f8>
            
            speedSensorWheel = 0.0;
            vehicleVelocity = 0.0;
 8022950:	ed9f 9ab2 	vldr	s18, [pc, #712]	; 8022c1c <example_thread+0x2fc>
            speedSensorWheel = (1.0 / ((float)ST2MS(chVTTimeElapsedSinceX(timerSpeedSensor))/1000.0)) * 60.0;
 8022954:	eddf 9ab2 	vldr	s19, [pc, #712]	; 8022c20 <example_thread+0x300>
 8022958:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8022c24 <example_thread+0x304>
    const volatile mc_configuration *mcconf = mc_interface_get_configuration();
 802295c:	9002      	str	r0, [sp, #8]
    timerSpeedSensor = 0;
 802295e:	2300      	movs	r3, #0
    int semaphoreCrankSensor = 1;
 8022960:	2501      	movs	r5, #1
    timerSpeedSensor = 0;
 8022962:	6013      	str	r3, [r2, #0]
    int semaphoreWheelSensor = 1;
 8022964:	9501      	str	r5, [sp, #4]
        float pot = (float)ADC_Value[ADC_IND_EXT2];
 8022966:	4bb0      	ldr	r3, [pc, #704]	; (8022c28 <example_thread+0x308>)
 8022968:	89d9      	ldrh	r1, [r3, #14]
        hallSensorBack = READ_HALL2();
 802296a:	6932      	ldr	r2, [r6, #16]
        hallSensorCrank = READ_HALL1();
 802296c:	6933      	ldr	r3, [r6, #16]
        if (hallSensorBack == 1 && semaphoreWheelSensor == 1) {
 802296e:	f012 0f80 	tst.w	r2, #128	; 0x80
        float pot = (float)ADC_Value[ADC_IND_EXT2];
 8022972:	fa1f fe81 	uxth.w	lr, r1
 8022976:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if (hallSensorBack == 1 && semaphoreWheelSensor == 1) {
 802297a:	9a01      	ldr	r2, [sp, #4]
 802297c:	f040 80cc 	bne.w	8022b18 <example_thread+0x1f8>
        } else if (hallSensorBack == 0 && semaphoreWheelSensor == 0)  {
 8022980:	2a00      	cmp	r2, #0
 8022982:	f040 810b 	bne.w	8022b9c <example_thread+0x27c>
            semaphoreWheelSensor = 1;
 8022986:	2201      	movs	r2, #1
 8022988:	9201      	str	r2, [sp, #4]
        }
        
        
        //Determine rotational speed if the hall sensor is triggered
        if (hallSensorCrank == 1 && semaphoreCrankSensor == 1) {
 802298a:	2b00      	cmp	r3, #0
 802298c:	f000 80a8 	beq.w	8022ae0 <example_thread+0x1c0>
 8022990:	2d00      	cmp	r5, #0
 8022992:	f040 81a6 	bne.w	8022ce2 <example_thread+0x3c2>
        
        //This routine is for the detection of the rotating direction of the crank
        if (hallSensorCrank == 1) {
            
            //Store a timer at the beginning and and the end of each flank
            if(lowTriggerEnd == 0) {
 8022996:	f8d9 3000 	ldr.w	r3, [r9]
 802299a:	b9ab      	cbnz	r3, 80229c8 <example_thread+0xa8>
  return chVTGetSystemTimeX() - start;
 802299c:	4aa3      	ldr	r2, [pc, #652]	; (8022c2c <example_thread+0x30c>)
  return ch.vtlist.vt_systime;
 802299e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 80229a0:	6812      	ldr	r2, [r2, #0]
                
                lowTriggerEnd = 1;
                
                differenceLow = (float)ST2MS(chVTTimeElapsedSinceX(lowStart));
 80229a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80229a6:	1a9b      	subs	r3, r3, r2
 80229a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80229ac:	fb01 2303 	mla	r3, r1, r3, r2
 80229b0:	fba7 2303 	umull	r2, r3, r7, r3
 80229b4:	0b5b      	lsrs	r3, r3, #13
 80229b6:	ee07 3a90 	vmov	s15, r3
 80229ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                lowTriggerEnd = 1;
 80229be:	2301      	movs	r3, #1
                differenceLow = (float)ST2MS(chVTTimeElapsedSinceX(lowStart));
 80229c0:	edca 7a00 	vstr	s15, [sl]
                lowTriggerEnd = 1;
 80229c4:	f8c9 3000 	str.w	r3, [r9]
            }
            
            if(highTriggerStart == 0) {
 80229c8:	4b99      	ldr	r3, [pc, #612]	; (8022c30 <example_thread+0x310>)
 80229ca:	681b      	ldr	r3, [r3, #0]
 80229cc:	b92b      	cbnz	r3, 80229da <example_thread+0xba>
                
                highStart = chVTGetSystemTimeX();
 80229ce:	4a99      	ldr	r2, [pc, #612]	; (8022c34 <example_thread+0x314>)
  return ch.vtlist.vt_systime;
 80229d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80229d2:	6013      	str	r3, [r2, #0]
                highTriggerStart = 1;
 80229d4:	4a96      	ldr	r2, [pc, #600]	; (8022c30 <example_thread+0x310>)
 80229d6:	2301      	movs	r3, #1
 80229d8:	6013      	str	r3, [r2, #0]
            }
            
            lowTriggerStart = 0;
 80229da:	4b97      	ldr	r3, [pc, #604]	; (8022c38 <example_thread+0x318>)
 80229dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80229de:	2500      	movs	r5, #0
 80229e0:	601d      	str	r5, [r3, #0]
            highTriggerEnd = 0;
 80229e2:	4b96      	ldr	r3, [pc, #600]	; (8022c3c <example_thread+0x31c>)
 80229e4:	601d      	str	r5, [r3, #0]
            
            timeOnPedaling = chVTGetSystemTimeX();
 80229e6:	4b96      	ldr	r3, [pc, #600]	; (8022c40 <example_thread+0x320>)
 80229e8:	6019      	str	r1, [r3, #0]
 80229ea:	4b96      	ldr	r3, [pc, #600]	; (8022c44 <example_thread+0x324>)
 80229ec:	edd3 7a00 	vldr	s15, [r3]
 80229f0:	4b95      	ldr	r3, [pc, #596]	; (8022c48 <example_thread+0x328>)
 80229f2:	681b      	ldr	r3, [r3, #0]
            timeOffPedaling = chVTGetSystemTimeX();
        }

        
        //TODO ABS()?
        if(abs(differenceLow > differenceHigh)) {
 80229f4:	ed9a 7a00 	vldr	s14, [sl]
            
            pedalingForward = true;
        } else {
            
            pedalingForward = false;
 80229f8:	4894      	ldr	r0, [pc, #592]	; (8022c4c <example_thread+0x32c>)
        if(abs(differenceLow > differenceHigh)) {
 80229fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80229fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            pedalingForward = true;
 8022a02:	bf4c      	ite	mi
 8022a04:	2201      	movmi	r2, #1
            pedalingForward = false;
 8022a06:	2200      	movpl	r2, #0
        }
        
        
        //Check the timers of the high and low flank and dtermine in which direction we are pedaling
        //Check specificaiton of the hall sensors for the direction of travel
        if (timeOnPedaling >= timeOffPedaling) {
 8022a08:	428b      	cmp	r3, r1
            
            timeDiff = (float) (timeOnPedaling - timeOffPedaling);
 8022a0a:	bf94      	ite	ls
 8022a0c:	1acb      	subls	r3, r1, r3
        } else {
            timeDiff = (float) (timeOffPedaling - timeOnPedaling);
 8022a0e:	1a5b      	subhi	r3, r3, r1
 8022a10:	ee07 3a90 	vmov	s15, r3
        }
        
        
        //If not a sufficient amount of sensors at the crank have been passed, then stop the engine
        if (isPedaling == true && timeDiff > noPedalingTreshold) {
 8022a14:	f89b 3000 	ldrb.w	r3, [fp]
            pedalingForward = false;
 8022a18:	7002      	strb	r2, [r0, #0]
            timeDiff = (float) (timeOffPedaling - timeOnPedaling);
 8022a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
        if (isPedaling == true && timeDiff > noPedalingTreshold) {
 8022a1e:	b15b      	cbz	r3, 8022a38 <example_thread+0x118>
 8022a20:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8022c50 <example_thread+0x330>
 8022a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a2c:	dd3c      	ble.n	8022aa8 <example_thread+0x188>
            
            isPedaling = false;
            pedalCount = 0;
 8022a2e:	4989      	ldr	r1, [pc, #548]	; (8022c54 <example_thread+0x334>)
            isPedaling = false;
 8022a30:	2300      	movs	r3, #0
 8022a32:	f88b 3000 	strb.w	r3, [fp]
            pedalCount = 0;
 8022a36:	600b      	str	r3, [r1, #0]
        }
        
        if (pedalingForward == false) {
 8022a38:	2a00      	cmp	r2, #0
 8022a3a:	d038      	beq.n	8022aae <example_thread+0x18e>
            
            isPedaling = false;
        }
        
        //If we are pedaling, then first a startup routine is activated in order to limit the motor current (Currently 4 amps)
        if(isPedaling == true && (float)ST2MS(chVTTimeElapsedSinceX(timeMotorRelease)) > motorReleaseTreshold || motorReleaseTrigger == 0) {
 8022a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d13b      	bne.n	8022abc <example_thread+0x19c>
            
            if(startUpRoutine == true) {
 8022a44:	4b84      	ldr	r3, [pc, #528]	; (8022c58 <example_thread+0x338>)
 8022a46:	781b      	ldrb	r3, [r3, #0]
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	f000 8092 	beq.w	8022b72 <example_thread+0x252>
                
                if(startUpTrigger == 0) {
 8022a4e:	4b83      	ldr	r3, [pc, #524]	; (8022c5c <example_thread+0x33c>)
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	f000 813e 	beq.w	8022cd4 <example_thread+0x3b4>
 8022a58:	4b81      	ldr	r3, [pc, #516]	; (8022c60 <example_thread+0x340>)
 8022a5a:	681a      	ldr	r2, [r3, #0]
 8022a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                    timeStartPedaling = chVTGetSystemTimeX();
                    startUpTrigger = 1;
                }
                
                if((float)ST2MS(chVTTimeElapsedSinceX(timeStartPedaling)) > startUpRoutineEnd) {
 8022a5e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8022c64 <example_thread+0x344>
  return chVTGetSystemTimeX() - start;
 8022a62:	1a9b      	subs	r3, r3, r2
 8022a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8022a68:	f242 720f 	movw	r2, #9999	; 0x270f
 8022a6c:	fb01 2303 	mla	r3, r1, r3, r2
 8022a70:	fba7 2303 	umull	r2, r3, r7, r3
 8022a74:	0b5b      	lsrs	r3, r3, #13
 8022a76:	ee07 3a90 	vmov	s15, r3
 8022a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a86:	dd02      	ble.n	8022a8e <example_thread+0x16e>
                    
                    startUpRoutine = false;
 8022a88:	4a73      	ldr	r2, [pc, #460]	; (8022c58 <example_thread+0x338>)
 8022a8a:	2300      	movs	r3, #0
 8022a8c:	7013      	strb	r3, [r2, #0]
                }
                
                setPointCurrent = setPointCurrentStartup;
                mc_interface_set_current(setPointCurrent);
 8022a8e:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8022a92:	f7f9 fca5 	bl	801c3e0 <mc_interface_set_current>
            #endif
                
            }
            
            //Reset Motor Release
            motorReleaseTrigger = 0;
 8022a96:	2300      	movs	r3, #0
 8022a98:	f8c8 3000 	str.w	r3, [r8]
        }
        
        //commands_printf("hall1: %f \n", (double)pot);
        
        // Run this loop at 500Hz
        chThdSleepMilliseconds(2);
 8022a9c:	2014      	movs	r0, #20
 8022a9e:	f7ea ff9f 	bl	800d9e0 <chThdSleep>
        
        // Reset the timeout
        timeout_reset();
 8022aa2:	f7f7 fbb5 	bl	801a210 <timeout_reset>
    for(;;) {
 8022aa6:	e75e      	b.n	8022966 <example_thread+0x46>
        if (pedalingForward == false) {
 8022aa8:	2a00      	cmp	r2, #0
 8022aaa:	f040 80ef 	bne.w	8022c8c <example_thread+0x36c>
            isPedaling = false;
 8022aae:	2300      	movs	r3, #0
 8022ab0:	f88b 3000 	strb.w	r3, [fp]
        if(isPedaling == true && (float)ST2MS(chVTTimeElapsedSinceX(timeMotorRelease)) > motorReleaseTreshold || motorReleaseTrigger == 0) {
 8022ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	d0c3      	beq.n	8022a44 <example_thread+0x124>
            mc_interface_release_motor();
 8022abc:	f7f9 fce0 	bl	801c480 <mc_interface_release_motor>
            startUpTrigger = 0;
 8022ac0:	4866      	ldr	r0, [pc, #408]	; (8022c5c <example_thread+0x33c>)
            if(motorReleaseTrigger == 0) {
 8022ac2:	f8d8 2000 	ldr.w	r2, [r8]
            startUpTrigger = 0;
 8022ac6:	2100      	movs	r1, #0
 8022ac8:	6001      	str	r1, [r0, #0]
            startUpRoutine = true;
 8022aca:	4963      	ldr	r1, [pc, #396]	; (8022c58 <example_thread+0x338>)
 8022acc:	2301      	movs	r3, #1
 8022ace:	700b      	strb	r3, [r1, #0]
            if(motorReleaseTrigger == 0) {
 8022ad0:	2a00      	cmp	r2, #0
 8022ad2:	d1e3      	bne.n	8022a9c <example_thread+0x17c>
                motorReleaseTrigger = 1;
 8022ad4:	f8c8 3000 	str.w	r3, [r8]
                timeMotorRelease = chVTGetSystemTimeX();
 8022ad8:	4b63      	ldr	r3, [pc, #396]	; (8022c68 <example_thread+0x348>)
  return ch.vtlist.vt_systime;
 8022ada:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8022adc:	601a      	str	r2, [r3, #0]
 8022ade:	e7dd      	b.n	8022a9c <example_thread+0x17c>
            if(lowTriggerStart == 0) {
 8022ae0:	4b55      	ldr	r3, [pc, #340]	; (8022c38 <example_thread+0x318>)
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	b92b      	cbnz	r3, 8022af2 <example_thread+0x1d2>
                lowStart = chVTGetSystemTimeX();
 8022ae6:	4a51      	ldr	r2, [pc, #324]	; (8022c2c <example_thread+0x30c>)
 8022ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022aea:	6013      	str	r3, [r2, #0]
                lowTriggerStart = 1;
 8022aec:	4a52      	ldr	r2, [pc, #328]	; (8022c38 <example_thread+0x318>)
 8022aee:	2301      	movs	r3, #1
 8022af0:	6013      	str	r3, [r2, #0]
            if(highTriggerEnd == 0) {
 8022af2:	4b52      	ldr	r3, [pc, #328]	; (8022c3c <example_thread+0x31c>)
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	2b00      	cmp	r3, #0
 8022af8:	d06b      	beq.n	8022bd2 <example_thread+0x2b2>
 8022afa:	4b52      	ldr	r3, [pc, #328]	; (8022c44 <example_thread+0x324>)
 8022afc:	edd3 7a00 	vldr	s15, [r3]
            highTriggerStart = 0;
 8022b00:	484b      	ldr	r0, [pc, #300]	; (8022c30 <example_thread+0x310>)
 8022b02:	494f      	ldr	r1, [pc, #316]	; (8022c40 <example_thread+0x320>)
 8022b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022b06:	6809      	ldr	r1, [r1, #0]
            lowTriggerEnd = 0;
 8022b08:	2200      	movs	r2, #0
 8022b0a:	f8c9 2000 	str.w	r2, [r9]
            highTriggerStart = 0;
 8022b0e:	6002      	str	r2, [r0, #0]
            timeOffPedaling = chVTGetSystemTimeX();
 8022b10:	4a4d      	ldr	r2, [pc, #308]	; (8022c48 <example_thread+0x328>)
            semaphoreCrankSensor = 1;
 8022b12:	2501      	movs	r5, #1
            timeOffPedaling = chVTGetSystemTimeX();
 8022b14:	6013      	str	r3, [r2, #0]
 8022b16:	e76d      	b.n	80229f4 <example_thread+0xd4>
        if (hallSensorBack == 1 && semaphoreWheelSensor == 1) {
 8022b18:	2a00      	cmp	r2, #0
 8022b1a:	f43f af36 	beq.w	802298a <example_thread+0x6a>
  return chVTGetSystemTimeX() - start;
 8022b1e:	493d      	ldr	r1, [pc, #244]	; (8022c14 <example_thread+0x2f4>)
  return ch.vtlist.vt_systime;
 8022b20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022b24:	6809      	ldr	r1, [r1, #0]
            timerSpeedSensor = chVTGetSystemTimeX();
 8022b26:	4a3b      	ldr	r2, [pc, #236]	; (8022c14 <example_thread+0x2f4>)
  return ch.vtlist.vt_systime;
 8022b28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8022b2a:	6010      	str	r0, [r2, #0]
  return chVTGetSystemTimeX() - start;
 8022b2c:	ebac 0201 	sub.w	r2, ip, r1
            speedSensorWheel = (1.0 / ((float)ST2MS(chVTTimeElapsedSinceX(timerSpeedSensor))/1000.0)) * 60.0;
 8022b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022b34:	f242 710f 	movw	r1, #9999	; 0x270f
 8022b38:	fb00 1202 	mla	r2, r0, r2, r1
 8022b3c:	fba7 1202 	umull	r1, r2, r7, r2
 8022b40:	0b52      	lsrs	r2, r2, #13
 8022b42:	ee07 2a90 	vmov	s15, r2
 8022b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022b4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8022b4e:	eec7 6aa9 	vdiv.f32	s13, s15, s19
            semaphoreWheelSensor = 0;
 8022b52:	2200      	movs	r2, #0
 8022b54:	9201      	str	r2, [sp, #4]
            vehicleVelocity = (3.14*0.0007112 * speedSensorWheel*60.0);
 8022b56:	4a45      	ldr	r2, [pc, #276]	; (8022c6c <example_thread+0x34c>)
 8022b58:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8022c70 <example_thread+0x350>
            speedSensorWheel = (1.0 / ((float)ST2MS(chVTTimeElapsedSinceX(timerSpeedSensor))/1000.0)) * 60.0;
 8022b5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8022b60:	ee67 7aa8 	vmul.f32	s15, s15, s17
            vehicleVelocity = (3.14*0.0007112 * speedSensorWheel*60.0);
 8022b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022b68:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8022b6c:	edc2 7a00 	vstr	s15, [r2]
            timerSpeedSensor = chVTGetSystemTimeX();
 8022b70:	e70b      	b.n	802298a <example_thread+0x6a>
        float pot = (float)ADC_Value[ADC_IND_EXT2];
 8022b72:	ee07 ea90 	vmov	s15, lr
        pot /= 4095.0;
 8022b76:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8022c74 <example_thread+0x354>
                if(pot > 0.95) {
 8022b7a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8022c78 <example_thread+0x358>
        float pot = (float)ADC_Value[ADC_IND_EXT2];
 8022b7e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
        pot /= 4095.0;
 8022b82:	eec6 7a26 	vdiv.f32	s15, s12, s13
                if(pot > 0.95) {
 8022b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b8e:	f340 8097 	ble.w	8022cc0 <example_thread+0x3a0>
                    mc_interface_set_current(1.0);
 8022b92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8022b96:	f7f9 fc23 	bl	801c3e0 <mc_interface_set_current>
 8022b9a:	e77c      	b.n	8022a96 <example_thread+0x176>
 8022b9c:	491d      	ldr	r1, [pc, #116]	; (8022c14 <example_thread+0x2f4>)
  return ch.vtlist.vt_systime;
 8022b9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022ba0:	6809      	ldr	r1, [r1, #0]
        } else if (hallSensorBack == 0 && (float)ST2MS(chVTTimeElapsedSinceX(timerSpeedSensor)) > noRotatingTreshold) {
 8022ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022ba6:	1a52      	subs	r2, r2, r1
 8022ba8:	f242 710f 	movw	r1, #9999	; 0x270f
 8022bac:	fb00 1202 	mla	r2, r0, r2, r1
 8022bb0:	fba7 1202 	umull	r1, r2, r7, r2
 8022bb4:	0b52      	lsrs	r2, r2, #13
 8022bb6:	ee07 2a90 	vmov	s15, r2
 8022bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022bbe:	eef4 7ac8 	vcmpe.f32	s15, s16
 8022bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bc6:	f77f aee0 	ble.w	802298a <example_thread+0x6a>
            vehicleVelocity = 0.0;
 8022bca:	4a28      	ldr	r2, [pc, #160]	; (8022c6c <example_thread+0x34c>)
 8022bcc:	ed82 9a00 	vstr	s18, [r2]
 8022bd0:	e6db      	b.n	802298a <example_thread+0x6a>
 8022bd2:	4a18      	ldr	r2, [pc, #96]	; (8022c34 <example_thread+0x314>)
  return ch.vtlist.vt_systime;
 8022bd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022bd6:	6812      	ldr	r2, [r2, #0]
                differenceHigh = (float)ST2MS(chVTTimeElapsedSinceX(highStart));
 8022bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8022bdc:	1a9b      	subs	r3, r3, r2
 8022bde:	f242 720f 	movw	r2, #9999	; 0x270f
 8022be2:	fb01 2303 	mla	r3, r1, r3, r2
 8022be6:	fba7 2303 	umull	r2, r3, r7, r3
 8022bea:	0b5b      	lsrs	r3, r3, #13
 8022bec:	ee07 3a90 	vmov	s15, r3
 8022bf0:	4a14      	ldr	r2, [pc, #80]	; (8022c44 <example_thread+0x324>)
 8022bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                highTriggerEnd = 1;
 8022bf6:	2301      	movs	r3, #1
                differenceHigh = (float)ST2MS(chVTTimeElapsedSinceX(highStart));
 8022bf8:	edc2 7a00 	vstr	s15, [r2]
                highTriggerEnd = 1;
 8022bfc:	4a0f      	ldr	r2, [pc, #60]	; (8022c3c <example_thread+0x31c>)
 8022bfe:	6013      	str	r3, [r2, #0]
 8022c00:	e77e      	b.n	8022b00 <example_thread+0x1e0>
 8022c02:	bf00      	nop
 8022c04:	20001a40 	.word	0x20001a40
 8022c08:	08030780 	.word	0x08030780
 8022c0c:	40020400 	.word	0x40020400
 8022c10:	d1b71759 	.word	0xd1b71759
 8022c14:	200114c0 	.word	0x200114c0
 8022c18:	453b8000 	.word	0x453b8000
 8022c1c:	00000000 	.word	0x00000000
 8022c20:	447a0000 	.word	0x447a0000
 8022c24:	42700000 	.word	0x42700000
 8022c28:	2000c034 	.word	0x2000c034
 8022c2c:	20011494 	.word	0x20011494
 8022c30:	2001148c 	.word	0x2001148c
 8022c34:	20011484 	.word	0x20011484
 8022c38:	2001149c 	.word	0x2001149c
 8022c3c:	20011488 	.word	0x20011488
 8022c40:	200114b8 	.word	0x200114b8
 8022c44:	20010adc 	.word	0x20010adc
 8022c48:	200114b4 	.word	0x200114b4
 8022c4c:	200114a8 	.word	0x200114a8
 8022c50:	45fa0000 	.word	0x45fa0000
 8022c54:	200114a4 	.word	0x200114a4
 8022c58:	20001069 	.word	0x20001069
 8022c5c:	200114ac 	.word	0x200114ac
 8022c60:	200114bc 	.word	0x200114bc
 8022c64:	44fa0000 	.word	0x44fa0000
 8022c68:	200114b0 	.word	0x200114b0
 8022c6c:	200114c4 	.word	0x200114c4
 8022c70:	3b125a58 	.word	0x3b125a58
 8022c74:	457ff000 	.word	0x457ff000
 8022c78:	3f733333 	.word	0x3f733333
 8022c7c:	20011490 	.word	0x20011490
 8022c80:	20010ae0 	.word	0x20010ae0
 8022c84:	20011498 	.word	0x20011498
 8022c88:	200114a0 	.word	0x200114a0
 8022c8c:	4a40      	ldr	r2, [pc, #256]	; (8022d90 <example_thread+0x470>)
  return ch.vtlist.vt_systime;
 8022c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022c90:	6812      	ldr	r2, [r2, #0]
        if(isPedaling == true && (float)ST2MS(chVTTimeElapsedSinceX(timeMotorRelease)) > motorReleaseTreshold || motorReleaseTrigger == 0) {
 8022c92:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8022d94 <example_thread+0x474>
 8022c96:	1a9b      	subs	r3, r3, r2
 8022c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8022c9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8022ca0:	fb01 2303 	mla	r3, r1, r3, r2
 8022ca4:	fba7 2303 	umull	r2, r3, r7, r3
 8022ca8:	0b5b      	lsrs	r3, r3, #13
 8022caa:	ee07 3a90 	vmov	s15, r3
 8022cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cba:	f73f aec3 	bgt.w	8022a44 <example_thread+0x124>
 8022cbe:	e6bd      	b.n	8022a3c <example_thread+0x11c>
                    setPointCurrent = ((float) mcconf->lo_current_motor_max_now * pot) + lowerCurrent;
 8022cc0:	9b02      	ldr	r3, [sp, #8]
 8022cc2:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8022cc6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
                    mc_interface_set_current(setPointCurrent);
 8022cca:	eea7 0a87 	vfma.f32	s0, s15, s14
 8022cce:	f7f9 fb87 	bl	801c3e0 <mc_interface_set_current>
 8022cd2:	e6e0      	b.n	8022a96 <example_thread+0x176>
                    timeStartPedaling = chVTGetSystemTimeX();
 8022cd4:	4b30      	ldr	r3, [pc, #192]	; (8022d98 <example_thread+0x478>)
  return ch.vtlist.vt_systime;
 8022cd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                    startUpTrigger = 1;
 8022cd8:	4930      	ldr	r1, [pc, #192]	; (8022d9c <example_thread+0x47c>)
                    timeStartPedaling = chVTGetSystemTimeX();
 8022cda:	601a      	str	r2, [r3, #0]
                    startUpTrigger = 1;
 8022cdc:	2301      	movs	r3, #1
 8022cde:	600b      	str	r3, [r1, #0]
 8022ce0:	e6bc      	b.n	8022a5c <example_thread+0x13c>
            if (pedalCount == 0) {
 8022ce2:	4b2f      	ldr	r3, [pc, #188]	; (8022da0 <example_thread+0x480>)
 8022ce4:	681a      	ldr	r2, [r3, #0]
 8022ce6:	b93a      	cbnz	r2, 8022cf8 <example_thread+0x3d8>
                firstPedalStroke = chVTGetSystemTimeX();
 8022ce8:	482e      	ldr	r0, [pc, #184]	; (8022da4 <example_thread+0x484>)
            if(isPedaling == false) {
 8022cea:	f89b 3000 	ldrb.w	r3, [fp]
 8022cee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                firstPedalStroke = chVTGetSystemTimeX();
 8022cf0:	6001      	str	r1, [r0, #0]
            if(isPedaling == false) {
 8022cf2:	b38b      	cbz	r3, 8022d58 <example_thread+0x438>
 8022cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            timerCrankSensor = chVTGetSystemTimeX();
 8022cf6:	e64e      	b.n	8022996 <example_thread+0x76>
            if(isPedaling == false) {
 8022cf8:	f89b 1000 	ldrb.w	r1, [fp]
 8022cfc:	2900      	cmp	r1, #0
 8022cfe:	d1f9      	bne.n	8022cf4 <example_thread+0x3d4>
                if(pedalCount >= tresholdMagnet && (float)ST2MS(chVTTimeElapsedSinceX(firstPedalStroke)) < tresholdTimePedaling) {
 8022d00:	2a00      	cmp	r2, #0
 8022d02:	dd29      	ble.n	8022d58 <example_thread+0x438>
 8022d04:	4b27      	ldr	r3, [pc, #156]	; (8022da4 <example_thread+0x484>)
 8022d06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8022da8 <example_thread+0x488>
 8022d0a:	6818      	ldr	r0, [r3, #0]
 8022d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022d0e:	9003      	str	r0, [sp, #12]
  return chVTGetSystemTimeX() - start;
 8022d10:	1a1b      	subs	r3, r3, r0
 8022d12:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8022d16:	f242 700f 	movw	r0, #9999	; 0x270f
 8022d1a:	fb0c 0303 	mla	r3, ip, r3, r0
 8022d1e:	fba7 c303 	umull	ip, r3, r7, r3
 8022d22:	0b5b      	lsrs	r3, r3, #13
 8022d24:	ee07 3a90 	vmov	s15, r3
 8022d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d34:	d514      	bpl.n	8022d60 <example_thread+0x440>
                    if (pedalingForward == true && vehicleVelocity > minSpeed) {
 8022d36:	4b1d      	ldr	r3, [pc, #116]	; (8022dac <example_thread+0x48c>)
 8022d38:	781b      	ldrb	r3, [r3, #0]
 8022d3a:	2b00      	cmp	r3, #0
 8022d3c:	d0da      	beq.n	8022cf4 <example_thread+0x3d4>
 8022d3e:	4b1c      	ldr	r3, [pc, #112]	; (8022db0 <example_thread+0x490>)
 8022d40:	ed93 7a00 	vldr	s14, [r3]
 8022d44:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8022d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d50:	ddd0      	ble.n	8022cf4 <example_thread+0x3d4>
                        isPedaling = true;
 8022d52:	f88b 5000 	strb.w	r5, [fp]
 8022d56:	e7cd      	b.n	8022cf4 <example_thread+0x3d4>
                    pedalCount = pedalCount + 1;
 8022d58:	4b11      	ldr	r3, [pc, #68]	; (8022da0 <example_thread+0x480>)
 8022d5a:	3201      	adds	r2, #1
 8022d5c:	601a      	str	r2, [r3, #0]
 8022d5e:	e7c9      	b.n	8022cf4 <example_thread+0x3d4>
  return ch.vtlist.vt_systime;
 8022d60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return chVTGetSystemTimeX() - start;
 8022d62:	9d03      	ldr	r5, [sp, #12]
 8022d64:	eba3 0c05 	sub.w	ip, r3, r5
                } else if (pedalCount >= tresholdMagnet && (float)ST2MS(chVTTimeElapsedSinceX(firstPedalStroke)) > tresholdTimePedaling) {
 8022d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022d6c:	fb03 000c 	mla	r0, r3, ip, r0
 8022d70:	fba7 3000 	umull	r3, r0, r7, r0
 8022d74:	0b40      	lsrs	r0, r0, #13
 8022d76:	ee07 0a90 	vmov	s15, r0
 8022d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d86:	dde7      	ble.n	8022d58 <example_thread+0x438>
                    pedalCount = 0;
 8022d88:	4b05      	ldr	r3, [pc, #20]	; (8022da0 <example_thread+0x480>)
 8022d8a:	6019      	str	r1, [r3, #0]
 8022d8c:	e7b2      	b.n	8022cf4 <example_thread+0x3d4>
 8022d8e:	bf00      	nop
 8022d90:	200114b0 	.word	0x200114b0
 8022d94:	451c4000 	.word	0x451c4000
 8022d98:	200114bc 	.word	0x200114bc
 8022d9c:	200114ac 	.word	0x200114ac
 8022da0:	200114a4 	.word	0x200114a4
 8022da4:	20011480 	.word	0x20011480
 8022da8:	466a6000 	.word	0x466a6000
 8022dac:	200114a8 	.word	0x200114a8
 8022db0:	200114c4 	.word	0x200114c4
	...

08022dc0 <settingMotorCurrent>:
void settingMotorCurrent(void) {
 8022dc0:	b500      	push	{lr}
    palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT_PULLDOWN);
 8022dc2:	2240      	movs	r2, #64	; 0x40
void settingMotorCurrent(void) {
 8022dc4:	b083      	sub	sp, #12
    palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_INPUT_PULLDOWN);
 8022dc6:	4611      	mov	r1, r2
 8022dc8:	4807      	ldr	r0, [pc, #28]	; (8022de8 <settingMotorCurrent+0x28>)
 8022dca:	f7ed f819 	bl	800fe00 <_pal_lld_setgroupmode>
    chThdCreateStatic(example_thread_wa, sizeof(example_thread_wa),
 8022dce:	2300      	movs	r3, #0
 8022dd0:	9300      	str	r3, [sp, #0]
 8022dd2:	2240      	movs	r2, #64	; 0x40
 8022dd4:	4b05      	ldr	r3, [pc, #20]	; (8022dec <settingMotorCurrent+0x2c>)
 8022dd6:	4806      	ldr	r0, [pc, #24]	; (8022df0 <settingMotorCurrent+0x30>)
 8022dd8:	f640 1198 	movw	r1, #2456	; 0x998
 8022ddc:	f7ea fdc8 	bl	800d970 <chThdCreateStatic>
}
 8022de0:	b003      	add	sp, #12
 8022de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8022de6:	bf00      	nop
 8022de8:	40020800 	.word	0x40020800
 8022dec:	08022921 	.word	0x08022921
 8022df0:	20010ae8 	.word	0x20010ae8
	...

08022e00 <spi_sw_init.part.0>:
// Private functions
static void spi_sw_delay(void);

void spi_sw_init(void) {
	if (!m_init_done) {
		palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 8022e00:	4a1c      	ldr	r2, [pc, #112]	; (8022e74 <spi_sw_init.part.0+0x74>)
 8022e02:	4b1d      	ldr	r3, [pc, #116]	; (8022e78 <spi_sw_init.part.0+0x78>)
 8022e04:	6811      	ldr	r1, [r2, #0]
 8022e06:	6818      	ldr	r0, [r3, #0]
void spi_sw_init(void) {
 8022e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 8022e0c:	2401      	movs	r4, #1
		palSetPadMode(m_port_csn, m_pin_csn, PAL_MODE_OUTPUT_PUSHPULL);
 8022e0e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8022e94 <spi_sw_init.part.0+0x94>
 8022e12:	4e1a      	ldr	r6, [pc, #104]	; (8022e7c <spi_sw_init.part.0+0x7c>)
		palSetPadMode(m_port_sck, m_pin_sck, PAL_MODE_OUTPUT_PUSHPULL);
 8022e14:	4f1a      	ldr	r7, [pc, #104]	; (8022e80 <spi_sw_init.part.0+0x80>)
 8022e16:	4d1b      	ldr	r5, [pc, #108]	; (8022e84 <spi_sw_init.part.0+0x84>)
		palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 8022e18:	fa04 f101 	lsl.w	r1, r4, r1
 8022e1c:	2200      	movs	r2, #0
 8022e1e:	f7ec ffef 	bl	800fe00 <_pal_lld_setgroupmode>
		palSetPadMode(m_port_csn, m_pin_csn, PAL_MODE_OUTPUT_PUSHPULL);
 8022e22:	f8d8 1000 	ldr.w	r1, [r8]
 8022e26:	6830      	ldr	r0, [r6, #0]
 8022e28:	fa04 f101 	lsl.w	r1, r4, r1
 8022e2c:	4622      	mov	r2, r4
 8022e2e:	f7ec ffe7 	bl	800fe00 <_pal_lld_setgroupmode>
		palSetPadMode(m_port_sck, m_pin_sck, PAL_MODE_OUTPUT_PUSHPULL);
 8022e32:	6839      	ldr	r1, [r7, #0]
 8022e34:	6828      	ldr	r0, [r5, #0]
 8022e36:	fa04 f101 	lsl.w	r1, r4, r1
 8022e3a:	4622      	mov	r2, r4
 8022e3c:	f7ec ffe0 	bl	800fe00 <_pal_lld_setgroupmode>
		palSetPadMode(m_port_mosi, m_pin_mosi, PAL_MODE_OUTPUT_PUSHPULL);
 8022e40:	4a11      	ldr	r2, [pc, #68]	; (8022e88 <spi_sw_init.part.0+0x88>)
 8022e42:	4b12      	ldr	r3, [pc, #72]	; (8022e8c <spi_sw_init.part.0+0x8c>)
 8022e44:	6811      	ldr	r1, [r2, #0]
 8022e46:	6818      	ldr	r0, [r3, #0]
 8022e48:	fa04 f101 	lsl.w	r1, r4, r1
 8022e4c:	4622      	mov	r2, r4
 8022e4e:	f7ec ffd7 	bl	800fe00 <_pal_lld_setgroupmode>

		palSetPad(m_port_csn, m_pin_csn);
 8022e52:	f8d8 2000 	ldr.w	r2, [r8]
		palClearPad(m_port_sck, m_pin_sck);
 8022e56:	683b      	ldr	r3, [r7, #0]
		palSetPad(m_port_csn, m_pin_csn);
 8022e58:	6836      	ldr	r6, [r6, #0]
		palClearPad(m_port_sck, m_pin_sck);
 8022e5a:	6829      	ldr	r1, [r5, #0]
		m_init_done = true;
 8022e5c:	480c      	ldr	r0, [pc, #48]	; (8022e90 <spi_sw_init.part.0+0x90>)
		palSetPad(m_port_csn, m_pin_csn);
 8022e5e:	fa04 f202 	lsl.w	r2, r4, r2
		palClearPad(m_port_sck, m_pin_sck);
 8022e62:	fa04 f303 	lsl.w	r3, r4, r3
		palSetPad(m_port_csn, m_pin_csn);
 8022e66:	b292      	uxth	r2, r2
		palClearPad(m_port_sck, m_pin_sck);
 8022e68:	b29b      	uxth	r3, r3
		palSetPad(m_port_csn, m_pin_csn);
 8022e6a:	8332      	strh	r2, [r6, #24]
		palClearPad(m_port_sck, m_pin_sck);
 8022e6c:	834b      	strh	r3, [r1, #26]
		m_init_done = true;
 8022e6e:	7004      	strb	r4, [r0, #0]
		palClearPad(m_port_sck, m_pin_sck);
 8022e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e74:	20001070 	.word	0x20001070
 8022e78:	20001080 	.word	0x20001080
 8022e7c:	2000107c 	.word	0x2000107c
 8022e80:	20001078 	.word	0x20001078
 8022e84:	20001088 	.word	0x20001088
 8022e88:	20001074 	.word	0x20001074
 8022e8c:	20001084 	.word	0x20001084
 8022e90:	200114c8 	.word	0x200114c8
 8022e94:	2000106c 	.word	0x2000106c
	...

08022ea0 <spi_sw_init>:
	if (!m_init_done) {
 8022ea0:	4b02      	ldr	r3, [pc, #8]	; (8022eac <spi_sw_init+0xc>)
 8022ea2:	781b      	ldrb	r3, [r3, #0]
 8022ea4:	b103      	cbz	r3, 8022ea8 <spi_sw_init+0x8>
 8022ea6:	4770      	bx	lr
 8022ea8:	f7ff bfaa 	b.w	8022e00 <spi_sw_init.part.0>
 8022eac:	200114c8 	.word	0x200114c8

08022eb0 <spi_sw_stop>:
	}
}

void spi_sw_stop(void) {
	palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 8022eb0:	4a14      	ldr	r2, [pc, #80]	; (8022f04 <spi_sw_stop+0x54>)
 8022eb2:	4b15      	ldr	r3, [pc, #84]	; (8022f08 <spi_sw_stop+0x58>)
 8022eb4:	6811      	ldr	r1, [r2, #0]
 8022eb6:	6818      	ldr	r0, [r3, #0]
void spi_sw_stop(void) {
 8022eb8:	b510      	push	{r4, lr}
	palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 8022eba:	2401      	movs	r4, #1
 8022ebc:	fa04 f101 	lsl.w	r1, r4, r1
 8022ec0:	2200      	movs	r2, #0
 8022ec2:	f7ec ff9d 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(m_port_csn, m_pin_csn, PAL_MODE_INPUT);
 8022ec6:	4a11      	ldr	r2, [pc, #68]	; (8022f0c <spi_sw_stop+0x5c>)
 8022ec8:	4b11      	ldr	r3, [pc, #68]	; (8022f10 <spi_sw_stop+0x60>)
 8022eca:	6811      	ldr	r1, [r2, #0]
 8022ecc:	6818      	ldr	r0, [r3, #0]
 8022ece:	fa04 f101 	lsl.w	r1, r4, r1
 8022ed2:	2200      	movs	r2, #0
 8022ed4:	f7ec ff94 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(m_port_sck, m_pin_sck, PAL_MODE_INPUT);
 8022ed8:	4a0e      	ldr	r2, [pc, #56]	; (8022f14 <spi_sw_stop+0x64>)
 8022eda:	4b0f      	ldr	r3, [pc, #60]	; (8022f18 <spi_sw_stop+0x68>)
 8022edc:	6811      	ldr	r1, [r2, #0]
 8022ede:	6818      	ldr	r0, [r3, #0]
 8022ee0:	fa04 f101 	lsl.w	r1, r4, r1
 8022ee4:	2200      	movs	r2, #0
 8022ee6:	f7ec ff8b 	bl	800fe00 <_pal_lld_setgroupmode>
	palSetPadMode(m_port_mosi, m_pin_mosi, PAL_MODE_INPUT);
 8022eea:	4a0c      	ldr	r2, [pc, #48]	; (8022f1c <spi_sw_stop+0x6c>)
 8022eec:	4b0c      	ldr	r3, [pc, #48]	; (8022f20 <spi_sw_stop+0x70>)
 8022eee:	6811      	ldr	r1, [r2, #0]
 8022ef0:	6818      	ldr	r0, [r3, #0]
 8022ef2:	2200      	movs	r2, #0
 8022ef4:	fa04 f101 	lsl.w	r1, r4, r1
 8022ef8:	f7ec ff82 	bl	800fe00 <_pal_lld_setgroupmode>
	m_init_done = false;
 8022efc:	4b09      	ldr	r3, [pc, #36]	; (8022f24 <spi_sw_stop+0x74>)
 8022efe:	2200      	movs	r2, #0
 8022f00:	701a      	strb	r2, [r3, #0]
 8022f02:	bd10      	pop	{r4, pc}
 8022f04:	20001070 	.word	0x20001070
 8022f08:	20001080 	.word	0x20001080
 8022f0c:	2000106c 	.word	0x2000106c
 8022f10:	2000107c 	.word	0x2000107c
 8022f14:	20001078 	.word	0x20001078
 8022f18:	20001088 	.word	0x20001088
 8022f1c:	20001074 	.word	0x20001074
 8022f20:	20001084 	.word	0x20001084
 8022f24:	200114c8 	.word	0x200114c8
	...

08022f30 <spi_sw_transfer>:
	if (init_was_done) {
		spi_sw_init();
	}
}

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8022f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	palClearPad(m_port_sck, m_pin_sck);
 8022f34:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8023050 <spi_sw_transfer+0x120>
 8022f38:	4b43      	ldr	r3, [pc, #268]	; (8023048 <spi_sw_transfer+0x118>)
 8022f3a:	f8d8 5000 	ldr.w	r5, [r8]
 8022f3e:	681c      	ldr	r4, [r3, #0]
 8022f40:	2301      	movs	r3, #1
void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8022f42:	b08b      	sub	sp, #44	; 0x2c
	palClearPad(m_port_sck, m_pin_sck);
 8022f44:	40ab      	lsls	r3, r5
 8022f46:	b29b      	uxth	r3, r3
	spi_sw_delay();
	palSetPad(m_port_csn, m_pin_csn);
}

static void spi_sw_delay(void) {
	for (volatile int i = 0;i < 5;i++) {
 8022f48:	2500      	movs	r5, #0
	palClearPad(m_port_sck, m_pin_sck);
 8022f4a:	8363      	strh	r3, [r4, #26]
	for (volatile int i = 0;i < 5;i++) {
 8022f4c:	9507      	str	r5, [sp, #28]
 8022f4e:	9b07      	ldr	r3, [sp, #28]
 8022f50:	2b04      	cmp	r3, #4
 8022f52:	dc06      	bgt.n	8022f62 <spi_sw_transfer+0x32>
 8022f54:	bf00      	nop
 8022f56:	9b07      	ldr	r3, [sp, #28]
 8022f58:	3301      	adds	r3, #1
 8022f5a:	9307      	str	r3, [sp, #28]
 8022f5c:	9b07      	ldr	r3, [sp, #28]
 8022f5e:	2b04      	cmp	r3, #4
 8022f60:	ddf8      	ble.n	8022f54 <spi_sw_transfer+0x24>
	for (int i = 0;i < length;i++) {
 8022f62:	2a00      	cmp	r2, #0
 8022f64:	dd6b      	ble.n	802303e <spi_sw_transfer+0x10e>
 8022f66:	1882      	adds	r2, r0, r2
 8022f68:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8023054 <spi_sw_transfer+0x124>
 8022f6c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8023058 <spi_sw_transfer+0x128>
 8022f70:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 802305c <spi_sw_transfer+0x12c>
 8022f74:	9103      	str	r1, [sp, #12]
 8022f76:	9005      	str	r0, [sp, #20]
 8022f78:	9204      	str	r2, [sp, #16]
 8022f7a:	9001      	str	r0, [sp, #4]
 8022f7c:	9102      	str	r1, [sp, #8]
		unsigned char send = out_buf ? out_buf[i] : 0;
 8022f7e:	2700      	movs	r7, #0
 8022f80:	9b03      	ldr	r3, [sp, #12]
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	d05e      	beq.n	8023044 <spi_sw_transfer+0x114>
 8022f86:	9b02      	ldr	r3, [sp, #8]
 8022f88:	781d      	ldrb	r5, [r3, #0]
 8022f8a:	2608      	movs	r6, #8
 8022f8c:	2400      	movs	r4, #0
			palWritePad(m_port_mosi, m_pin_mosi, send >> 7);
 8022f8e:	4b2f      	ldr	r3, [pc, #188]	; (802304c <spi_sw_transfer+0x11c>)
 8022f90:	f8db 1000 	ldr.w	r1, [fp]
 8022f94:	681a      	ldr	r2, [r3, #0]
 8022f96:	09eb      	lsrs	r3, r5, #7
 8022f98:	f101 0010 	add.w	r0, r1, #16
 8022f9c:	fa03 f101 	lsl.w	r1, r3, r1
 8022fa0:	f083 0301 	eor.w	r3, r3, #1
 8022fa4:	4083      	lsls	r3, r0
 8022fa6:	430b      	orrs	r3, r1
 8022fa8:	6193      	str	r3, [r2, #24]
	for (volatile int i = 0;i < 5;i++) {
 8022faa:	9708      	str	r7, [sp, #32]
 8022fac:	9b08      	ldr	r3, [sp, #32]
			send <<= 1;
 8022fae:	006d      	lsls	r5, r5, #1
	for (volatile int i = 0;i < 5;i++) {
 8022fb0:	2b04      	cmp	r3, #4
			send <<= 1;
 8022fb2:	b2ed      	uxtb	r5, r5
	for (volatile int i = 0;i < 5;i++) {
 8022fb4:	dc06      	bgt.n	8022fc4 <spi_sw_transfer+0x94>
 8022fb6:	bf00      	nop
 8022fb8:	9b08      	ldr	r3, [sp, #32]
 8022fba:	3301      	adds	r3, #1
 8022fbc:	9308      	str	r3, [sp, #32]
 8022fbe:	9b08      	ldr	r3, [sp, #32]
 8022fc0:	2b04      	cmp	r3, #4
 8022fc2:	ddf8      	ble.n	8022fb6 <spi_sw_transfer+0x86>
			r1 = palReadPad(m_port_miso, m_pin_miso);
 8022fc4:	f8da 2000 	ldr.w	r2, [sl]
 8022fc8:	f8d9 3000 	ldr.w	r3, [r9]
 8022fcc:	6910      	ldr	r0, [r2, #16]
 8022fce:	bf00      	nop
			r2 = palReadPad(m_port_miso, m_pin_miso);
 8022fd0:	6911      	ldr	r1, [r2, #16]
 8022fd2:	bf00      	nop
			r3 = palReadPad(m_port_miso, m_pin_miso);
 8022fd4:	6912      	ldr	r2, [r2, #16]
			r2 = palReadPad(m_port_miso, m_pin_miso);
 8022fd6:	40d9      	lsrs	r1, r3
			r3 = palReadPad(m_port_miso, m_pin_miso);
 8022fd8:	40da      	lsrs	r2, r3
			r1 = palReadPad(m_port_miso, m_pin_miso);
 8022fda:	40d8      	lsrs	r0, r3
			recieve <<= 1;
 8022fdc:	0064      	lsls	r4, r4, #1
			if (utils_middle_of_3_int(r1, r2, r3)) {
 8022fde:	f002 0201 	and.w	r2, r2, #1
 8022fe2:	f001 0101 	and.w	r1, r1, #1
 8022fe6:	f000 0001 	and.w	r0, r0, #1
			recieve <<= 1;
 8022fea:	b2e4      	uxtb	r4, r4
			if (utils_middle_of_3_int(r1, r2, r3)) {
 8022fec:	f7f2 fe98 	bl	8015d20 <utils_middle_of_3_int>
 8022ff0:	b108      	cbz	r0, 8022ff6 <spi_sw_transfer+0xc6>
				recieve |= 1;
 8022ff2:	f044 0401 	orr.w	r4, r4, #1
			palSetPad(m_port_sck, m_pin_sck);
 8022ff6:	4b14      	ldr	r3, [pc, #80]	; (8023048 <spi_sw_transfer+0x118>)
 8022ff8:	f8d8 2000 	ldr.w	r2, [r8]
 8022ffc:	6819      	ldr	r1, [r3, #0]
 8022ffe:	2301      	movs	r3, #1
 8023000:	fa03 f202 	lsl.w	r2, r3, r2
 8023004:	b292      	uxth	r2, r2
 8023006:	830a      	strh	r2, [r1, #24]
	for (volatile int i = 0;i < 5;i++) {
 8023008:	9709      	str	r7, [sp, #36]	; 0x24
 802300a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802300c:	2b04      	cmp	r3, #4
 802300e:	dc06      	bgt.n	802301e <spi_sw_transfer+0xee>
 8023010:	bf00      	nop
 8023012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023014:	3301      	adds	r3, #1
 8023016:	9309      	str	r3, [sp, #36]	; 0x24
 8023018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802301a:	2b04      	cmp	r3, #4
 802301c:	ddf8      	ble.n	8023010 <spi_sw_transfer+0xe0>
		for (int bit=0;bit < 8;bit++) {
 802301e:	3e01      	subs	r6, #1
			palClearPad(m_port_sck, m_pin_sck);
 8023020:	834a      	strh	r2, [r1, #26]
		for (int bit=0;bit < 8;bit++) {
 8023022:	d1b4      	bne.n	8022f8e <spi_sw_transfer+0x5e>
		if (in_buf) {
 8023024:	9b05      	ldr	r3, [sp, #20]
 8023026:	b10b      	cbz	r3, 802302c <spi_sw_transfer+0xfc>
			in_buf[i] = recieve;
 8023028:	9b01      	ldr	r3, [sp, #4]
 802302a:	701c      	strb	r4, [r3, #0]
 802302c:	9a02      	ldr	r2, [sp, #8]
 802302e:	9b01      	ldr	r3, [sp, #4]
 8023030:	3201      	adds	r2, #1
 8023032:	9202      	str	r2, [sp, #8]
	for (int i = 0;i < length;i++) {
 8023034:	9a04      	ldr	r2, [sp, #16]
 8023036:	3301      	adds	r3, #1
 8023038:	429a      	cmp	r2, r3
 802303a:	9301      	str	r3, [sp, #4]
 802303c:	d1a0      	bne.n	8022f80 <spi_sw_transfer+0x50>
}
 802303e:	b00b      	add	sp, #44	; 0x2c
 8023040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		unsigned char send = out_buf ? out_buf[i] : 0;
 8023044:	9d03      	ldr	r5, [sp, #12]
 8023046:	e7a0      	b.n	8022f8a <spi_sw_transfer+0x5a>
 8023048:	20001088 	.word	0x20001088
 802304c:	20001084 	.word	0x20001084
 8023050:	20001078 	.word	0x20001078
 8023054:	20001074 	.word	0x20001074
 8023058:	20001080 	.word	0x20001080
 802305c:	20001070 	.word	0x20001070

08023060 <spi_sw_begin>:
	palClearPad(m_port_csn, m_pin_csn);
 8023060:	4a0b      	ldr	r2, [pc, #44]	; (8023090 <spi_sw_begin+0x30>)
 8023062:	4b0c      	ldr	r3, [pc, #48]	; (8023094 <spi_sw_begin+0x34>)
 8023064:	6812      	ldr	r2, [r2, #0]
 8023066:	6819      	ldr	r1, [r3, #0]
 8023068:	2301      	movs	r3, #1
void spi_sw_begin(void) {
 802306a:	b082      	sub	sp, #8
	palClearPad(m_port_csn, m_pin_csn);
 802306c:	4093      	lsls	r3, r2
 802306e:	b29b      	uxth	r3, r3
	for (volatile int i = 0;i < 5;i++) {
 8023070:	2200      	movs	r2, #0
	palClearPad(m_port_csn, m_pin_csn);
 8023072:	834b      	strh	r3, [r1, #26]
	for (volatile int i = 0;i < 5;i++) {
 8023074:	9201      	str	r2, [sp, #4]
 8023076:	9b01      	ldr	r3, [sp, #4]
 8023078:	2b04      	cmp	r3, #4
 802307a:	dc06      	bgt.n	802308a <spi_sw_begin+0x2a>
 802307c:	bf00      	nop
 802307e:	9b01      	ldr	r3, [sp, #4]
 8023080:	3301      	adds	r3, #1
 8023082:	9301      	str	r3, [sp, #4]
 8023084:	9b01      	ldr	r3, [sp, #4]
 8023086:	2b04      	cmp	r3, #4
 8023088:	ddf8      	ble.n	802307c <spi_sw_begin+0x1c>
}
 802308a:	b002      	add	sp, #8
 802308c:	4770      	bx	lr
 802308e:	bf00      	nop
 8023090:	2000106c 	.word	0x2000106c
 8023094:	2000107c 	.word	0x2000107c
	...

080230a0 <spi_sw_end>:
void spi_sw_end(void) {
 80230a0:	b082      	sub	sp, #8
	for (volatile int i = 0;i < 5;i++) {
 80230a2:	2300      	movs	r3, #0
 80230a4:	9301      	str	r3, [sp, #4]
 80230a6:	9b01      	ldr	r3, [sp, #4]
 80230a8:	2b04      	cmp	r3, #4
 80230aa:	dc06      	bgt.n	80230ba <spi_sw_end+0x1a>
 80230ac:	bf00      	nop
 80230ae:	9b01      	ldr	r3, [sp, #4]
 80230b0:	3301      	adds	r3, #1
 80230b2:	9301      	str	r3, [sp, #4]
 80230b4:	9b01      	ldr	r3, [sp, #4]
 80230b6:	2b04      	cmp	r3, #4
 80230b8:	ddf8      	ble.n	80230ac <spi_sw_end+0xc>
	palSetPad(m_port_csn, m_pin_csn);
 80230ba:	4a05      	ldr	r2, [pc, #20]	; (80230d0 <spi_sw_end+0x30>)
 80230bc:	4b05      	ldr	r3, [pc, #20]	; (80230d4 <spi_sw_end+0x34>)
 80230be:	6811      	ldr	r1, [r2, #0]
 80230c0:	681a      	ldr	r2, [r3, #0]
 80230c2:	2301      	movs	r3, #1
 80230c4:	408b      	lsls	r3, r1
 80230c6:	b29b      	uxth	r3, r3
 80230c8:	8313      	strh	r3, [r2, #24]
}
 80230ca:	b002      	add	sp, #8
 80230cc:	4770      	bx	lr
 80230ce:	bf00      	nop
 80230d0:	2000106c 	.word	0x2000106c
 80230d4:	2000107c 	.word	0x2000107c
	...

080230e0 <rf_init>:
#include "rf.h"
#include "spi_sw.h"
#include "ch.h"

void rf_init(void) {
	spi_sw_init();
 80230e0:	f7ff bede 	b.w	8022ea0 <spi_sw_init>
	...

080230f0 <rf_stop>:
}

void rf_stop(void) {
	spi_sw_stop();
 80230f0:	f7ff bede 	b.w	8022eb0 <spi_sw_stop>
	...

08023100 <rf_write_tx_payload>:

void rf_set_tx_addr(const char *address, int addr_len) {
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
}

void rf_write_tx_payload(const char *data, int length) {
 8023100:	b570      	push	{r4, r5, r6, lr}
 8023102:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD;
 8023104:	ac02      	add	r4, sp, #8
 8023106:	23a0      	movs	r3, #160	; 0xa0
 8023108:	f804 3d01 	strb.w	r3, [r4, #-1]!
void rf_write_tx_payload(const char *data, int length) {
 802310c:	4605      	mov	r5, r0
 802310e:	460e      	mov	r6, r1
	spi_sw_begin();
 8023110:	f7ff ffa6 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8023114:	4621      	mov	r1, r4
 8023116:	2201      	movs	r2, #1
 8023118:	2000      	movs	r0, #0
 802311a:	f7ff ff09 	bl	8022f30 <spi_sw_transfer>
	spi_sw_transfer(0, data, length);
 802311e:	4632      	mov	r2, r6
 8023120:	4629      	mov	r1, r5
 8023122:	2000      	movs	r0, #0
 8023124:	f7ff ff04 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 8023128:	f7ff ffba 	bl	80230a0 <spi_sw_end>

}
 802312c:	b002      	add	sp, #8
 802312e:	bd70      	pop	{r4, r5, r6, pc}

08023130 <rf_write_tx_payload_no_ack>:

// Write payload for transmission without requesting acknowledge
void rf_write_tx_payload_no_ack(const char *data, int length) {
 8023130:	b570      	push	{r4, r5, r6, lr}
 8023132:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD_NO_ACK;
 8023134:	ac02      	add	r4, sp, #8
 8023136:	23b0      	movs	r3, #176	; 0xb0
 8023138:	f804 3d01 	strb.w	r3, [r4, #-1]!
void rf_write_tx_payload_no_ack(const char *data, int length) {
 802313c:	4605      	mov	r5, r0
 802313e:	460e      	mov	r6, r1
	spi_sw_begin();
 8023140:	f7ff ff8e 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8023144:	4621      	mov	r1, r4
 8023146:	2201      	movs	r2, #1
 8023148:	2000      	movs	r0, #0
 802314a:	f7ff fef1 	bl	8022f30 <spi_sw_transfer>
	spi_sw_transfer(0, data, length);
 802314e:	4632      	mov	r2, r6
 8023150:	4629      	mov	r1, r5
 8023152:	2000      	movs	r0, #0
 8023154:	f7ff feec 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 8023158:	f7ff ffa2 	bl	80230a0 <spi_sw_end>

}
 802315c:	b002      	add	sp, #8
 802315e:	bd70      	pop	{r4, r5, r6, pc}

08023160 <rf_read_rx_payload>:
	spi_sw_end();

}

// Read recieved payload
void rf_read_rx_payload(char *data, int length) {
 8023160:	b570      	push	{r4, r5, r6, lr}
 8023162:	b082      	sub	sp, #8
	char cmd = NRF_CMD_READ_RX_PAYLOAD;
 8023164:	ac02      	add	r4, sp, #8
 8023166:	2361      	movs	r3, #97	; 0x61
 8023168:	f804 3d01 	strb.w	r3, [r4, #-1]!
void rf_read_rx_payload(char *data, int length) {
 802316c:	4605      	mov	r5, r0
 802316e:	460e      	mov	r6, r1
	spi_sw_begin();
 8023170:	f7ff ff76 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8023174:	4621      	mov	r1, r4
 8023176:	2201      	movs	r2, #1
 8023178:	2000      	movs	r0, #0
 802317a:	f7ff fed9 	bl	8022f30 <spi_sw_transfer>
	spi_sw_transfer(data, 0, length);
 802317e:	4632      	mov	r2, r6
 8023180:	4628      	mov	r0, r5
 8023182:	2100      	movs	r1, #0
 8023184:	f7ff fed4 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 8023188:	f7ff ff8a 	bl	80230a0 <spi_sw_end>

}
 802318c:	b002      	add	sp, #8
 802318e:	bd70      	pop	{r4, r5, r6, pc}

08023190 <rf_flush_tx>:
		tmp |= (features);
		rf_write_reg_byte(NRF_REG_FEATURE, tmp);	//Update if we need
	}
}

void rf_flush_tx(void) {
 8023190:	b510      	push	{r4, lr}
 8023192:	b082      	sub	sp, #8
	char cmd = NRF_CMD_FLUSH_TX;
 8023194:	ac02      	add	r4, sp, #8
 8023196:	23e1      	movs	r3, #225	; 0xe1
 8023198:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 802319c:	f7ff ff60 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80231a0:	4621      	mov	r1, r4
 80231a2:	2201      	movs	r2, #1
 80231a4:	2000      	movs	r0, #0
 80231a6:	f7ff fec3 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 80231aa:	f7ff ff79 	bl	80230a0 <spi_sw_end>
}
 80231ae:	b002      	add	sp, #8
 80231b0:	bd10      	pop	{r4, pc}
 80231b2:	bf00      	nop
	...

080231c0 <rf_flush_rx>:

void rf_flush_rx(void) {
 80231c0:	b510      	push	{r4, lr}
 80231c2:	b082      	sub	sp, #8
	char cmd = NRF_CMD_FLUSH_RX;
 80231c4:	ac02      	add	r4, sp, #8
 80231c6:	23e2      	movs	r3, #226	; 0xe2
 80231c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 80231cc:	f7ff ff48 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80231d0:	4621      	mov	r1, r4
 80231d2:	2201      	movs	r2, #1
 80231d4:	2000      	movs	r0, #0
 80231d6:	f7ff feab 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 80231da:	f7ff ff61 	bl	80230a0 <spi_sw_end>
}
 80231de:	b002      	add	sp, #8
 80231e0:	bd10      	pop	{r4, pc}
 80231e2:	bf00      	nop
	...

080231f0 <rf_flush_all>:

void rf_flush_all(void) {
 80231f0:	b508      	push	{r3, lr}
	rf_flush_rx();
 80231f2:	f7ff ffe5 	bl	80231c0 <rf_flush_rx>
	rf_flush_tx();
}
 80231f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rf_flush_tx();
 80231fa:	f7ff bfc9 	b.w	8023190 <rf_flush_tx>
 80231fe:	bf00      	nop

08023200 <rf_get_payload_width>:

void rf_clear_maxrt_irq(void) {
	rf_write_reg_byte(NRF_REG_STATUS, NRF_STATUS_MAX_RT);
}

int rf_get_payload_width(void) {
 8023200:	b510      	push	{r4, lr}
 8023202:	b082      	sub	sp, #8
	char w;
	char cmd = NRF_CMD_READ_RX_PAYLOAD_WIDTH;
 8023204:	ac02      	add	r4, sp, #8
 8023206:	2360      	movs	r3, #96	; 0x60
 8023208:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 802320c:	f7ff ff28 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8023210:	4621      	mov	r1, r4
 8023212:	2201      	movs	r2, #1
 8023214:	2000      	movs	r0, #0
 8023216:	f7ff fe8b 	bl	8022f30 <spi_sw_transfer>
	spi_sw_transfer(&w, 0, 1);
 802321a:	f10d 0006 	add.w	r0, sp, #6
 802321e:	2201      	movs	r2, #1
 8023220:	2100      	movs	r1, #0
 8023222:	f7ff fe85 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 8023226:	f7ff ff3b 	bl	80230a0 <spi_sw_end>
	return w;
}
 802322a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 802322e:	b002      	add	sp, #8
 8023230:	bd10      	pop	{r4, pc}
 8023232:	bf00      	nop
	...

08023240 <rf_status>:

int rf_status(void) {
 8023240:	b510      	push	{r4, lr}
 8023242:	b082      	sub	sp, #8
	char w = NRF_CMD_NOP;
 8023244:	ac02      	add	r4, sp, #8
 8023246:	23ff      	movs	r3, #255	; 0xff
 8023248:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 802324c:	f7ff ff08 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(&w, &w, 1);
 8023250:	4620      	mov	r0, r4
 8023252:	4621      	mov	r1, r4
 8023254:	2201      	movs	r2, #1
 8023256:	f7ff fe6b 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 802325a:	f7ff ff21 	bl	80230a0 <spi_sw_end>
	return w;
}
 802325e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8023262:	b002      	add	sp, #8
 8023264:	bd10      	pop	{r4, pc}
 8023266:	bf00      	nop
	...

08023270 <rf_write_reg>:

int rf_rx_power_detect(void) {
	return rf_read_reg_byte(NRF_REG_RPD) >> 1;
}

void rf_write_reg(int reg, const char *data, int len) {
 8023270:	b570      	push	{r4, r5, r6, lr}
 8023272:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_REGISTER | reg;
 8023274:	ac02      	add	r4, sp, #8
 8023276:	f040 0020 	orr.w	r0, r0, #32
 802327a:	f804 0d01 	strb.w	r0, [r4, #-1]!
void rf_write_reg(int reg, const char *data, int len) {
 802327e:	460d      	mov	r5, r1
 8023280:	4616      	mov	r6, r2

	spi_sw_begin();
 8023282:	f7ff feed 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8023286:	4621      	mov	r1, r4
 8023288:	2201      	movs	r2, #1
 802328a:	2000      	movs	r0, #0
 802328c:	f7ff fe50 	bl	8022f30 <spi_sw_transfer>
	spi_sw_transfer(0, data, len);
 8023290:	4632      	mov	r2, r6
 8023292:	4629      	mov	r1, r5
 8023294:	2000      	movs	r0, #0
 8023296:	f7ff fe4b 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 802329a:	f7ff ff01 	bl	80230a0 <spi_sw_end>
}
 802329e:	b002      	add	sp, #8
 80232a0:	bd70      	pop	{r4, r5, r6, pc}
 80232a2:	bf00      	nop
	...

080232b0 <rf_set_rx_addr>:
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
 80232b0:	300a      	adds	r0, #10
 80232b2:	f7ff bfdd 	b.w	8023270 <rf_write_reg>
 80232b6:	bf00      	nop
	...

080232c0 <rf_set_tx_addr>:
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
 80232c0:	460a      	mov	r2, r1
 80232c2:	4601      	mov	r1, r0
 80232c4:	2010      	movs	r0, #16
 80232c6:	f7ff bfd3 	b.w	8023270 <rf_write_reg>
 80232ca:	bf00      	nop
 80232cc:	0000      	movs	r0, r0
	...

080232d0 <rf_set_address_width>:
void rf_set_address_width(NRF_AW aw) {
 80232d0:	b500      	push	{lr}
 80232d2:	b083      	sub	sp, #12
 80232d4:	a902      	add	r1, sp, #8
	rf_write_reg_byte(NRF_REG_SETUP_AW, (char)aw + 1);
 80232d6:	3001      	adds	r0, #1
 80232d8:	f801 0d01 	strb.w	r0, [r1, #-1]!

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80232dc:	2201      	movs	r2, #1
 80232de:	2003      	movs	r0, #3
 80232e0:	f7ff ffc6 	bl	8023270 <rf_write_reg>
}
 80232e4:	b003      	add	sp, #12
 80232e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80232ea:	bf00      	nop
 80232ec:	0000      	movs	r0, r0
	...

080232f0 <rf_set_frequency>:
void rf_set_frequency(int freq) {
 80232f0:	b500      	push	{lr}
 80232f2:	b083      	sub	sp, #12
 80232f4:	a902      	add	r1, sp, #8
	rf_write_reg_byte(NRF_REG_RF_CH, (freq - 2400) & 0x7F);
 80232f6:	3860      	subs	r0, #96	; 0x60
 80232f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80232fc:	f801 0d01 	strb.w	r0, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 8023300:	2201      	movs	r2, #1
 8023302:	2005      	movs	r0, #5
 8023304:	f7ff ffb4 	bl	8023270 <rf_write_reg>
}
 8023308:	b003      	add	sp, #12
 802330a:	f85d fb04 	ldr.w	pc, [sp], #4
 802330e:	bf00      	nop

08023310 <rf_clear_irq>:
void rf_clear_irq(void) {
 8023310:	b500      	push	{lr}
 8023312:	b083      	sub	sp, #12
 8023314:	a902      	add	r1, sp, #8
 8023316:	2370      	movs	r3, #112	; 0x70
 8023318:	f801 3d01 	strb.w	r3, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 802331c:	2201      	movs	r2, #1
 802331e:	2007      	movs	r0, #7
 8023320:	f7ff ffa6 	bl	8023270 <rf_write_reg>
}
 8023324:	b003      	add	sp, #12
 8023326:	f85d fb04 	ldr.w	pc, [sp], #4
 802332a:	bf00      	nop
 802332c:	0000      	movs	r0, r0
	...

08023330 <rf_clear_rx_irq>:
void rf_clear_rx_irq(void) {
 8023330:	b500      	push	{lr}
 8023332:	b083      	sub	sp, #12
 8023334:	a902      	add	r1, sp, #8
 8023336:	2340      	movs	r3, #64	; 0x40
 8023338:	f801 3d01 	strb.w	r3, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 802333c:	2201      	movs	r2, #1
 802333e:	2007      	movs	r0, #7
 8023340:	f7ff ff96 	bl	8023270 <rf_write_reg>
}
 8023344:	b003      	add	sp, #12
 8023346:	f85d fb04 	ldr.w	pc, [sp], #4
 802334a:	bf00      	nop
 802334c:	0000      	movs	r0, r0
	...

08023350 <rf_clear_maxrt_irq>:
void rf_clear_maxrt_irq(void) {
 8023350:	b500      	push	{lr}
 8023352:	b083      	sub	sp, #12
 8023354:	a902      	add	r1, sp, #8
 8023356:	2310      	movs	r3, #16
 8023358:	f801 3d01 	strb.w	r3, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 802335c:	2201      	movs	r2, #1
 802335e:	2007      	movs	r0, #7
 8023360:	f7ff ff86 	bl	8023270 <rf_write_reg>
}
 8023364:	b003      	add	sp, #12
 8023366:	f85d fb04 	ldr.w	pc, [sp], #4
 802336a:	bf00      	nop
 802336c:	0000      	movs	r0, r0
	...

08023370 <rf_write_reg_byte>:
void rf_write_reg_byte(int reg, char data) {
 8023370:	b500      	push	{lr}
 8023372:	b083      	sub	sp, #12
 8023374:	ab02      	add	r3, sp, #8
	rf_write_reg(reg, &data, 1);
 8023376:	2201      	movs	r2, #1
void rf_write_reg_byte(int reg, char data) {
 8023378:	f803 1d01 	strb.w	r1, [r3, #-1]!
	rf_write_reg(reg, &data, 1);
 802337c:	4619      	mov	r1, r3
 802337e:	f7ff ff77 	bl	8023270 <rf_write_reg>
}
 8023382:	b003      	add	sp, #12
 8023384:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08023390 <rf_read_reg>:

void rf_read_reg(int reg, char *data, int len) {
 8023390:	b570      	push	{r4, r5, r6, lr}
 8023392:	b082      	sub	sp, #8
	char cmd = NRF_CMD_READ_REGISTER | reg;
 8023394:	ac02      	add	r4, sp, #8
void rf_read_reg(int reg, char *data, int len) {
 8023396:	460d      	mov	r5, r1
	char cmd = NRF_CMD_READ_REGISTER | reg;
 8023398:	f804 0d01 	strb.w	r0, [r4, #-1]!
void rf_read_reg(int reg, char *data, int len) {
 802339c:	4616      	mov	r6, r2

	spi_sw_begin();
 802339e:	f7ff fe5f 	bl	8023060 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80233a2:	4621      	mov	r1, r4
 80233a4:	2201      	movs	r2, #1
 80233a6:	2000      	movs	r0, #0
 80233a8:	f7ff fdc2 	bl	8022f30 <spi_sw_transfer>
	spi_sw_transfer(data, 0, len);
 80233ac:	4632      	mov	r2, r6
 80233ae:	4628      	mov	r0, r5
 80233b0:	2100      	movs	r1, #0
 80233b2:	f7ff fdbd 	bl	8022f30 <spi_sw_transfer>
	spi_sw_end();
 80233b6:	f7ff fe73 	bl	80230a0 <spi_sw_end>
}
 80233ba:	b002      	add	sp, #8
 80233bc:	bd70      	pop	{r4, r5, r6, pc}
 80233be:	bf00      	nop

080233c0 <rf_set_speed>:
void rf_set_speed(NRF_SPEED speed) {
 80233c0:	b510      	push	{r4, lr}
 80233c2:	b082      	sub	sp, #8

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80233c4:	2201      	movs	r2, #1
void rf_set_speed(NRF_SPEED speed) {
 80233c6:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80233c8:	f10d 0107 	add.w	r1, sp, #7
 80233cc:	2006      	movs	r0, #6
 80233ce:	f7ff ffdf 	bl	8023390 <rf_read_reg>
	return result;
 80233d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new &= ~(NRF_RF_SETUP_RF_DR_LOW | NRF_RF_SETUP_RF_DR_HIGH);
 80233d6:	f002 03d7 	and.w	r3, r2, #215	; 0xd7
	switch (speed) {
 80233da:	b184      	cbz	r4, 80233fe <rf_set_speed+0x3e>
 80233dc:	2c02      	cmp	r4, #2
 80233de:	d00b      	beq.n	80233f8 <rf_set_speed+0x38>
	if (reg_old != reg_new) {
 80233e0:	4293      	cmp	r3, r2
 80233e2:	d007      	beq.n	80233f4 <rf_set_speed+0x34>
	rf_write_reg(reg, &data, 1);
 80233e4:	f10d 0107 	add.w	r1, sp, #7
 80233e8:	2201      	movs	r2, #1
 80233ea:	2006      	movs	r0, #6
 80233ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80233f0:	f7ff ff3e 	bl	8023270 <rf_write_reg>
}
 80233f4:	b002      	add	sp, #8
 80233f6:	bd10      	pop	{r4, pc}
		reg_new |= NRF_RF_SETUP_RF_DR_HIGH;
 80233f8:	f043 0308 	orr.w	r3, r3, #8
		break;
 80233fc:	e7f0      	b.n	80233e0 <rf_set_speed+0x20>
		reg_new |= NRF_RF_SETUP_RF_DR_LOW;
 80233fe:	f043 0320 	orr.w	r3, r3, #32
		break;
 8023402:	e7ed      	b.n	80233e0 <rf_set_speed+0x20>
	...

08023410 <rf_set_power>:
void rf_set_power(NRF_POWER power) {
 8023410:	b510      	push	{r4, lr}
 8023412:	b082      	sub	sp, #8
 8023414:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8023416:	2201      	movs	r2, #1
 8023418:	f10d 0107 	add.w	r1, sp, #7
 802341c:	2006      	movs	r0, #6
 802341e:	f7ff ffb7 	bl	8023390 <rf_read_reg>
	return result;
 8023422:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new &= ~(NRF_RF_SETUP_RF_PWR | 1);
 8023426:	f022 0307 	bic.w	r3, r2, #7
	reg_new |= (char)power << 1;
 802342a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 802342e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	if (power == NRF_POWER_0DBM) {
 8023432:	2c03      	cmp	r4, #3
		reg_new |= 1;
 8023434:	bf08      	it	eq
 8023436:	f043 0301 	orreq.w	r3, r3, #1
	if (reg_old != reg_new) {
 802343a:	4293      	cmp	r3, r2
 802343c:	d007      	beq.n	802344e <rf_set_power+0x3e>
	rf_write_reg(reg, &data, 1);
 802343e:	f10d 0107 	add.w	r1, sp, #7
 8023442:	2201      	movs	r2, #1
 8023444:	2006      	movs	r0, #6
 8023446:	f88d 3007 	strb.w	r3, [sp, #7]
 802344a:	f7ff ff11 	bl	8023270 <rf_write_reg>
}
 802344e:	b002      	add	sp, #8
 8023450:	bd10      	pop	{r4, pc}
 8023452:	bf00      	nop
	...

08023460 <rf_set_crc_type>:
void rf_set_crc_type(NRF_CRC crc_type) {
 8023460:	b510      	push	{r4, lr}
 8023462:	b082      	sub	sp, #8
 8023464:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8023466:	2201      	movs	r2, #1
 8023468:	f10d 0107 	add.w	r1, sp, #7
 802346c:	2000      	movs	r0, #0
 802346e:	f7ff ff8f 	bl	8023390 <rf_read_reg>
	return result;
 8023472:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (crc_type) {
 8023476:	2c01      	cmp	r4, #1
	reg_new &= ~(NRF_CONFIG_CRCO | NRF_CONFIG_EN_CRC);
 8023478:	f002 03f3 	and.w	r3, r2, #243	; 0xf3
	switch (crc_type) {
 802347c:	d010      	beq.n	80234a0 <rf_set_crc_type+0x40>
 802347e:	2c02      	cmp	r4, #2
 8023480:	d00b      	beq.n	802349a <rf_set_crc_type+0x3a>
	if (reg_old != reg_new) {
 8023482:	4293      	cmp	r3, r2
 8023484:	d007      	beq.n	8023496 <rf_set_crc_type+0x36>
	rf_write_reg(reg, &data, 1);
 8023486:	f10d 0107 	add.w	r1, sp, #7
 802348a:	2201      	movs	r2, #1
 802348c:	2000      	movs	r0, #0
 802348e:	f88d 3007 	strb.w	r3, [sp, #7]
 8023492:	f7ff feed 	bl	8023270 <rf_write_reg>
}
 8023496:	b002      	add	sp, #8
 8023498:	bd10      	pop	{r4, pc}
		reg_new |= NRF_CONFIG_EN_CRC | NRF_CONFIG_CRCO;
 802349a:	f043 030c 	orr.w	r3, r3, #12
		break;
 802349e:	e7f0      	b.n	8023482 <rf_set_crc_type+0x22>
		reg_new |= NRF_CONFIG_EN_CRC;
 80234a0:	f043 0308 	orr.w	r3, r3, #8
		break;
 80234a4:	e7ed      	b.n	8023482 <rf_set_crc_type+0x22>
 80234a6:	bf00      	nop
	...

080234b0 <rf_set_retr_retries>:
void rf_set_retr_retries(int retries) {
 80234b0:	b510      	push	{r4, lr}
 80234b2:	b082      	sub	sp, #8
 80234b4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80234b6:	f10d 0107 	add.w	r1, sp, #7
 80234ba:	2201      	movs	r2, #1
 80234bc:	2004      	movs	r0, #4
 80234be:	f7ff ff67 	bl	8023390 <rf_read_reg>
	return result;
 80234c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new |= (char)retries & 0xF;
 80234c6:	f004 030f 	and.w	r3, r4, #15
	reg_new &= ~NRF_SETUP_RETR_ARC;
 80234ca:	f022 010f 	bic.w	r1, r2, #15
	reg_new |= (char)retries & 0xF;
 80234ce:	430b      	orrs	r3, r1
	if (reg_old != reg_new) {
 80234d0:	4293      	cmp	r3, r2
 80234d2:	d007      	beq.n	80234e4 <rf_set_retr_retries+0x34>
	rf_write_reg(reg, &data, 1);
 80234d4:	f10d 0107 	add.w	r1, sp, #7
 80234d8:	2201      	movs	r2, #1
 80234da:	2004      	movs	r0, #4
 80234dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80234e0:	f7ff fec6 	bl	8023270 <rf_write_reg>
}
 80234e4:	b002      	add	sp, #8
 80234e6:	bd10      	pop	{r4, pc}
	...

080234f0 <rf_set_retr_delay>:
void rf_set_retr_delay(NRF_RETR_DELAY delay) {
 80234f0:	b510      	push	{r4, lr}
 80234f2:	b082      	sub	sp, #8
 80234f4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80234f6:	2201      	movs	r2, #1
 80234f8:	f10d 0107 	add.w	r1, sp, #7
 80234fc:	2004      	movs	r0, #4
 80234fe:	f7ff ff47 	bl	8023390 <rf_read_reg>
	return result;
 8023502:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new &= ~NRF_SETUP_RETR_ARD;
 8023506:	f002 030f 	and.w	r3, r2, #15
	reg_new |= ((char)delay & 0xF) << 4;
 802350a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 802350e:	b2db      	uxtb	r3, r3
	if (reg_old != reg_new) {
 8023510:	4293      	cmp	r3, r2
 8023512:	d007      	beq.n	8023524 <rf_set_retr_delay+0x34>
	rf_write_reg(reg, &data, 1);
 8023514:	f10d 0107 	add.w	r1, sp, #7
 8023518:	2201      	movs	r2, #1
 802351a:	2004      	movs	r0, #4
 802351c:	f88d 3007 	strb.w	r3, [sp, #7]
 8023520:	f7ff fea6 	bl	8023270 <rf_write_reg>
}
 8023524:	b002      	add	sp, #8
 8023526:	bd10      	pop	{r4, pc}
	...

08023530 <rf_power_up>:
void rf_power_up(void) {
 8023530:	b500      	push	{lr}
 8023532:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 8023534:	2000      	movs	r0, #0
 8023536:	f10d 0107 	add.w	r1, sp, #7
 802353a:	2201      	movs	r2, #1
 802353c:	f7ff ff28 	bl	8023390 <rf_read_reg>
	return result;
 8023540:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ((tmp & (NRF_CONFIG_PWR_UP)) != (NRF_CONFIG_PWR_UP)) {
 8023544:	f013 0002 	ands.w	r0, r3, #2
 8023548:	d108      	bne.n	802355c <rf_power_up+0x2c>
 802354a:	f043 0302 	orr.w	r3, r3, #2
	rf_write_reg(reg, &data, 1);
 802354e:	f10d 0107 	add.w	r1, sp, #7
 8023552:	2201      	movs	r2, #1
 8023554:	f88d 3007 	strb.w	r3, [sp, #7]
 8023558:	f7ff fe8a 	bl	8023270 <rf_write_reg>
}
 802355c:	b003      	add	sp, #12
 802355e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023562:	bf00      	nop
	...

08023570 <rf_power_down>:
void rf_power_down(void) {
 8023570:	b500      	push	{lr}
 8023572:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 8023574:	2201      	movs	r2, #1
 8023576:	f10d 0107 	add.w	r1, sp, #7
 802357a:	2000      	movs	r0, #0
 802357c:	f7ff ff08 	bl	8023390 <rf_read_reg>
	return result;
 8023580:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (tmp & (NRF_CONFIG_PWR_UP)) {
 8023584:	079a      	lsls	r2, r3, #30
 8023586:	d509      	bpl.n	802359c <rf_power_down+0x2c>
		tmp &= ~(NRF_CONFIG_PWR_UP);
 8023588:	f023 0302 	bic.w	r3, r3, #2
	rf_write_reg(reg, &data, 1);
 802358c:	f10d 0107 	add.w	r1, sp, #7
 8023590:	2201      	movs	r2, #1
 8023592:	2000      	movs	r0, #0
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8023594:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8023598:	f7ff fe6a 	bl	8023270 <rf_write_reg>
}
 802359c:	b003      	add	sp, #12
 802359e:	f85d fb04 	ldr.w	pc, [sp], #4
 80235a2:	bf00      	nop
	...

080235b0 <rf_mode_tx>:
void rf_mode_tx(void) {
 80235b0:	b500      	push	{lr}
 80235b2:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 80235b4:	2201      	movs	r2, #1
 80235b6:	f10d 0107 	add.w	r1, sp, #7
 80235ba:	2000      	movs	r0, #0
 80235bc:	f7ff fee8 	bl	8023390 <rf_read_reg>
	return result;
 80235c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (tmp & (NRF_CONFIG_PRIM_RX)) {
 80235c4:	07da      	lsls	r2, r3, #31
 80235c6:	d509      	bpl.n	80235dc <rf_mode_tx+0x2c>
		tmp &= ~(NRF_CONFIG_PRIM_RX);
 80235c8:	f023 0301 	bic.w	r3, r3, #1
	rf_write_reg(reg, &data, 1);
 80235cc:	f10d 0107 	add.w	r1, sp, #7
 80235d0:	2201      	movs	r2, #1
 80235d2:	2000      	movs	r0, #0
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 80235d4:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 80235d8:	f7ff fe4a 	bl	8023270 <rf_write_reg>
}
 80235dc:	b003      	add	sp, #12
 80235de:	f85d fb04 	ldr.w	pc, [sp], #4
 80235e2:	bf00      	nop
	...

080235f0 <rf_mode_rx>:
void rf_mode_rx(void) {
 80235f0:	b500      	push	{lr}
 80235f2:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 80235f4:	2000      	movs	r0, #0
 80235f6:	f10d 0107 	add.w	r1, sp, #7
 80235fa:	2201      	movs	r2, #1
 80235fc:	f7ff fec8 	bl	8023390 <rf_read_reg>
	return result;
 8023600:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ((tmp & (NRF_CONFIG_PRIM_RX)) != (NRF_CONFIG_PRIM_RX)) {
 8023604:	f013 0001 	ands.w	r0, r3, #1
 8023608:	d108      	bne.n	802361c <rf_mode_rx+0x2c>
 802360a:	f043 0301 	orr.w	r3, r3, #1
	rf_write_reg(reg, &data, 1);
 802360e:	f10d 0107 	add.w	r1, sp, #7
 8023612:	2201      	movs	r2, #1
 8023614:	f88d 3007 	strb.w	r3, [sp, #7]
 8023618:	f7ff fe2a 	bl	8023270 <rf_write_reg>
}
 802361c:	b003      	add	sp, #12
 802361e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023622:	bf00      	nop
	...

08023630 <rf_enable_pipe_autoack>:
void rf_enable_pipe_autoack(int pipes) {
 8023630:	b510      	push	{r4, lr}
	rf_read_reg(reg, &result, 1);
 8023632:	2201      	movs	r2, #1
void rf_enable_pipe_autoack(int pipes) {
 8023634:	b082      	sub	sp, #8
 8023636:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8023638:	f10d 0107 	add.w	r1, sp, #7
 802363c:	4610      	mov	r0, r2
 802363e:	f7ff fea7 	bl	8023390 <rf_read_reg>
	return result;
 8023642:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (pipes)) != (pipes)) {
 8023646:	ea34 0300 	bics.w	r3, r4, r0
 802364a:	d009      	beq.n	8023660 <rf_enable_pipe_autoack+0x30>
	rf_write_reg(reg, &data, 1);
 802364c:	2201      	movs	r2, #1
		tmp |= (pipes);
 802364e:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8023652:	f10d 0107 	add.w	r1, sp, #7
 8023656:	4610      	mov	r0, r2
		rf_write_reg_byte(NRF_REG_EN_AA, tmp);	//Update if we need
 8023658:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 802365c:	f7ff fe08 	bl	8023270 <rf_write_reg>
}
 8023660:	b002      	add	sp, #8
 8023662:	bd10      	pop	{r4, pc}
	...

08023670 <rf_enable_pipe_address>:
void rf_enable_pipe_address(int pipes) {
 8023670:	b510      	push	{r4, lr}
 8023672:	b082      	sub	sp, #8
 8023674:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8023676:	f10d 0107 	add.w	r1, sp, #7
 802367a:	2002      	movs	r0, #2
 802367c:	2201      	movs	r2, #1
 802367e:	f7ff fe87 	bl	8023390 <rf_read_reg>
	return result;
 8023682:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (pipes)) != (pipes)) {
 8023686:	ea34 0300 	bics.w	r3, r4, r0
 802368a:	d009      	beq.n	80236a0 <rf_enable_pipe_address+0x30>
		tmp |= (pipes);
 802368c:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8023690:	f10d 0107 	add.w	r1, sp, #7
 8023694:	2201      	movs	r2, #1
 8023696:	2002      	movs	r0, #2
		rf_write_reg_byte(NRF_REG_EN_RXADDR, tmp);	//Update if we need
 8023698:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 802369c:	f7ff fde8 	bl	8023270 <rf_write_reg>
}
 80236a0:	b002      	add	sp, #8
 80236a2:	bd10      	pop	{r4, pc}
	...

080236b0 <rf_enable_pipe_dlp>:
void rf_enable_pipe_dlp(int pipes) {
 80236b0:	b510      	push	{r4, lr}
 80236b2:	b082      	sub	sp, #8
 80236b4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80236b6:	f10d 0107 	add.w	r1, sp, #7
 80236ba:	201c      	movs	r0, #28
 80236bc:	2201      	movs	r2, #1
 80236be:	f7ff fe67 	bl	8023390 <rf_read_reg>
	return result;
 80236c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (pipes)) != (pipes)) {
 80236c6:	ea34 0300 	bics.w	r3, r4, r0
 80236ca:	d009      	beq.n	80236e0 <rf_enable_pipe_dlp+0x30>
		tmp |= (pipes);
 80236cc:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 80236d0:	f10d 0107 	add.w	r1, sp, #7
 80236d4:	2201      	movs	r2, #1
 80236d6:	201c      	movs	r0, #28
		rf_write_reg_byte(NRF_REG_DYNPD, tmp);	//Update if we need
 80236d8:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 80236dc:	f7ff fdc8 	bl	8023270 <rf_write_reg>
}
 80236e0:	b002      	add	sp, #8
 80236e2:	bd10      	pop	{r4, pc}
	...

080236f0 <rf_enable_features>:
void rf_enable_features(int features) {
 80236f0:	b510      	push	{r4, lr}
 80236f2:	b082      	sub	sp, #8
 80236f4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80236f6:	f10d 0107 	add.w	r1, sp, #7
 80236fa:	201d      	movs	r0, #29
 80236fc:	2201      	movs	r2, #1
 80236fe:	f7ff fe47 	bl	8023390 <rf_read_reg>
	return result;
 8023702:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (features)) != (features)) {
 8023706:	ea34 0300 	bics.w	r3, r4, r0
 802370a:	d009      	beq.n	8023720 <rf_enable_features+0x30>
		tmp |= (features);
 802370c:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8023710:	f10d 0107 	add.w	r1, sp, #7
 8023714:	2201      	movs	r2, #1
 8023716:	201d      	movs	r0, #29
		rf_write_reg_byte(NRF_REG_FEATURE, tmp);	//Update if we need
 8023718:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 802371c:	f7ff fda8 	bl	8023270 <rf_write_reg>
}
 8023720:	b002      	add	sp, #8
 8023722:	bd10      	pop	{r4, pc}
	...

08023730 <rfhelp_init>:
 * @return
 * true: Writing an address and reading it back worked.
 * false: Writing an address and reading it failed. This means that something
 * is wrong with the SPI communication.
 */
bool rfhelp_init(void) {
 8023730:	b570      	push	{r4, r5, r6, lr}
	chMtxObjectInit(&rf_mutex);
 8023732:	4827      	ldr	r0, [pc, #156]	; (80237d0 <rfhelp_init+0xa0>)
	rf_init();

//	address_length = rf_get_address_width();
	address_length = 3; // We assume length 3
 8023734:	4e27      	ldr	r6, [pc, #156]	; (80237d4 <rfhelp_init+0xa4>)
bool rfhelp_init(void) {
 8023736:	b084      	sub	sp, #16
	address_length = 3; // We assume length 3
 8023738:	2403      	movs	r4, #3
	chMtxObjectInit(&rf_mutex);
 802373a:	f7ea fa89 	bl	800dc50 <chMtxObjectInit>
	rf_init();
 802373e:	f7ff fccf 	bl	80230e0 <rf_init>
		address_length = 3;
	}

	// Try a read and write to see if the SPI communication works
	char addr_old[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_old, 3);
 8023742:	4622      	mov	r2, r4
 8023744:	a901      	add	r1, sp, #4
 8023746:	2010      	movs	r0, #16
	address_length = 3; // We assume length 3
 8023748:	6034      	str	r4, [r6, #0]
	rf_read_reg(NRF_REG_TX_ADDR, addr_old, 3);
 802374a:	f7ff fe21 	bl	8023390 <rf_read_reg>
	char addr_test[3] = {0x12, 0x41, 0xF3};
 802374e:	4b22      	ldr	r3, [pc, #136]	; (80237d8 <rfhelp_init+0xa8>)
 8023750:	681b      	ldr	r3, [r3, #0]
 8023752:	f8ad 3008 	strh.w	r3, [sp, #8]
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 8023756:	4622      	mov	r2, r4
	char addr_test[3] = {0x12, 0x41, 0xF3};
 8023758:	0c1b      	lsrs	r3, r3, #16
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 802375a:	a902      	add	r1, sp, #8
 802375c:	2010      	movs	r0, #16
	char addr_test[3] = {0x12, 0x41, 0xF3};
 802375e:	f88d 300a 	strb.w	r3, [sp, #10]
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 8023762:	f7ff fd85 	bl	8023270 <rf_write_reg>
	char addr_test_read[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_test_read, 3);
 8023766:	4622      	mov	r2, r4
 8023768:	a903      	add	r1, sp, #12
 802376a:	2010      	movs	r0, #16
 802376c:	f7ff fe10 	bl	8023390 <rf_read_reg>
	rf_write_reg(NRF_REG_TX_ADDR, addr_old, 3);
 8023770:	4622      	mov	r2, r4
 8023772:	a901      	add	r1, sp, #4
 8023774:	2010      	movs	r0, #16
 8023776:	f7ff fd7b 	bl	8023270 <rf_write_reg>

	if (memcmp(addr_test, addr_test_read, 3) != 0) {
 802377a:	4622      	mov	r2, r4
 802377c:	a903      	add	r1, sp, #12
 802377e:	a802      	add	r0, sp, #8
 8023780:	f004 fa4e 	bl	8027c20 <memcmp>
 8023784:	b9f8      	cbnz	r0, 80237c6 <rfhelp_init+0x96>
 8023786:	4d15      	ldr	r5, [pc, #84]	; (80237dc <rfhelp_init+0xac>)
 8023788:	240a      	movs	r4, #10
		rf_stop();
		return false;
	}

	for (int i = 0;i < 6;i++) {
		rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
 802378a:	4629      	mov	r1, r5
 802378c:	4620      	mov	r0, r4
 802378e:	6832      	ldr	r2, [r6, #0]
 8023790:	3401      	adds	r4, #1
 8023792:	f7ff fdfd 	bl	8023390 <rf_read_reg>
	for (int i = 0;i < 6;i++) {
 8023796:	2c10      	cmp	r4, #16
 8023798:	f105 0505 	add.w	r5, r5, #5
 802379c:	d1f5      	bne.n	802378a <rfhelp_init+0x5a>
		rx_addr_set[i] = false;
	}

	rf_read_reg(NRF_REG_TX_ADDR, tx_addr, address_length);
 802379e:	4620      	mov	r0, r4
 80237a0:	6832      	ldr	r2, [r6, #0]
 80237a2:	490f      	ldr	r1, [pc, #60]	; (80237e0 <rfhelp_init+0xb0>)
 80237a4:	f7ff fdf4 	bl	8023390 <rf_read_reg>
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 80237a8:	6832      	ldr	r2, [r6, #0]
 80237aa:	490d      	ldr	r1, [pc, #52]	; (80237e0 <rfhelp_init+0xb0>)
 80237ac:	480b      	ldr	r0, [pc, #44]	; (80237dc <rfhelp_init+0xac>)
 80237ae:	f004 fa37 	bl	8027c20 <memcmp>
 80237b2:	490c      	ldr	r1, [pc, #48]	; (80237e4 <rfhelp_init+0xb4>)

	// TODO: fill nrf_conf with values from the nrf chip. For now we assume
	// that nrf_conf is already set when rfhelp_restart is called.

	init_done = true;
 80237b4:	4a0c      	ldr	r2, [pc, #48]	; (80237e8 <rfhelp_init+0xb8>)
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 80237b6:	fab0 f380 	clz	r3, r0
 80237ba:	095b      	lsrs	r3, r3, #5
	init_done = true;
 80237bc:	2001      	movs	r0, #1
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 80237be:	700b      	strb	r3, [r1, #0]
	init_done = true;
 80237c0:	7010      	strb	r0, [r2, #0]

	return true;
}
 80237c2:	b004      	add	sp, #16
 80237c4:	bd70      	pop	{r4, r5, r6, pc}
		rf_stop();
 80237c6:	f7ff fc93 	bl	80230f0 <rf_stop>
		return false;
 80237ca:	2000      	movs	r0, #0
}
 80237cc:	b004      	add	sp, #16
 80237ce:	bd70      	pop	{r4, r5, r6, pc}
 80237d0:	200114e0 	.word	0x200114e0
 80237d4:	200114cc 	.word	0x200114cc
 80237d8:	0802e9f0 	.word	0x0802e9f0
 80237dc:	200114f0 	.word	0x200114f0
 80237e0:	20011510 	.word	0x20011510
 80237e4:	20011515 	.word	0x20011515
 80237e8:	200114d0 	.word	0x200114d0
 80237ec:	00000000 	.word	0x00000000

080237f0 <rfhelp_stop>:

void rfhelp_stop(void) {
 80237f0:	b508      	push	{r3, lr}
	rf_stop();
 80237f2:	f7ff fc7d 	bl	80230f0 <rf_stop>
	init_done = false;
 80237f6:	4b02      	ldr	r3, [pc, #8]	; (8023800 <rfhelp_stop+0x10>)
 80237f8:	2200      	movs	r2, #0
 80237fa:	701a      	strb	r2, [r3, #0]
 80237fc:	bd08      	pop	{r3, pc}
 80237fe:	bf00      	nop
 8023800:	200114d0 	.word	0x200114d0
	...

08023810 <rfhelp_restart>:
}

/**
 * Re-init the rf chip
 */
void rfhelp_restart(void) {
 8023810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	chMtxLock(&rf_mutex);
 8023812:	4e2b      	ldr	r6, [pc, #172]	; (80238c0 <rfhelp_restart+0xb0>)
	// TODO: make this file consistent with multiple
	// rx_addr and tx_addr, and the rest in general.
	rf_write_reg_byte(NRF_REG_EN_RXADDR, 0);
	rf_write_reg_byte(NRF_REG_DYNPD, 0);

	rf_set_crc_type(nrf_conf.crc_type);
 8023814:	4c2b      	ldr	r4, [pc, #172]	; (80238c4 <rfhelp_restart+0xb4>)
	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8023816:	4d2c      	ldr	r5, [pc, #176]	; (80238c8 <rfhelp_restart+0xb8>)
	tx_pipe0_addr_eq = true;

	rf_set_tx_addr(tx_addr, address_length);
 8023818:	4f2c      	ldr	r7, [pc, #176]	; (80238cc <rfhelp_restart+0xbc>)
	chMtxLock(&rf_mutex);
 802381a:	4630      	mov	r0, r6
 802381c:	f7ea fa88 	bl	800dd30 <chMtxLock>
	rf_power_down();
 8023820:	f7ff fea6 	bl	8023570 <rf_power_down>
	rf_write_reg_byte(NRF_REG_EN_RXADDR, 0);
 8023824:	2100      	movs	r1, #0
 8023826:	2002      	movs	r0, #2
 8023828:	f7ff fda2 	bl	8023370 <rf_write_reg_byte>
	rf_write_reg_byte(NRF_REG_DYNPD, 0);
 802382c:	2100      	movs	r1, #0
 802382e:	201c      	movs	r0, #28
 8023830:	f7ff fd9e 	bl	8023370 <rf_write_reg_byte>
	rf_set_crc_type(nrf_conf.crc_type);
 8023834:	78a0      	ldrb	r0, [r4, #2]
 8023836:	f7ff fe13 	bl	8023460 <rf_set_crc_type>
	rf_set_retr_retries(nrf_conf.retries);
 802383a:	7920      	ldrb	r0, [r4, #4]
 802383c:	f7ff fe38 	bl	80234b0 <rf_set_retr_retries>
	rf_set_retr_delay(nrf_conf.retry_delay);
 8023840:	78e0      	ldrb	r0, [r4, #3]
 8023842:	f7ff fe55 	bl	80234f0 <rf_set_retr_delay>
	rf_set_power(nrf_conf.power);
 8023846:	7860      	ldrb	r0, [r4, #1]
 8023848:	f7ff fde2 	bl	8023410 <rf_set_power>
	rf_set_speed(nrf_conf.speed);
 802384c:	7820      	ldrb	r0, [r4, #0]
 802384e:	f7ff fdb7 	bl	80233c0 <rf_set_speed>
	rf_set_address_width(NRF_AW_3); // Always use 3 byte address
 8023852:	2000      	movs	r0, #0
 8023854:	f7ff fd3c 	bl	80232d0 <rf_set_address_width>
	rf_set_frequency(2400 + (unsigned int)nrf_conf.channel);
 8023858:	7960      	ldrb	r0, [r4, #5]
 802385a:	f500 6016 	add.w	r0, r0, #2400	; 0x960
 802385e:	f7ff fd47 	bl	80232f0 <rf_set_frequency>
	rf_enable_features(NRF_FEATURE_DPL | NRF_FEATURE_DYN_ACK);
 8023862:	2005      	movs	r0, #5
 8023864:	f7ff ff44 	bl	80236f0 <rf_enable_features>
	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
 8023868:	2001      	movs	r0, #1
 802386a:	f7ff fee1 	bl	8023630 <rf_enable_pipe_autoack>
	rf_enable_pipe_address(NRF_MASK_PIPE0);
 802386e:	2001      	movs	r0, #1
 8023870:	f7ff fefe 	bl	8023670 <rf_enable_pipe_address>
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);
 8023874:	2001      	movs	r0, #1
 8023876:	f7ff ff1b 	bl	80236b0 <rf_enable_pipe_dlp>
	memcpy(tx_addr, nrf_conf.address, 3);
 802387a:	f834 3f06 	ldrh.w	r3, [r4, #6]!
 802387e:	4814      	ldr	r0, [pc, #80]	; (80238d0 <rfhelp_restart+0xc0>)
	tx_pipe0_addr_eq = true;
 8023880:	f8df e050 	ldr.w	lr, [pc, #80]	; 80238d4 <rfhelp_restart+0xc4>
	memcpy(tx_addr, nrf_conf.address, 3);
 8023884:	78a2      	ldrb	r2, [r4, #2]
 8023886:	8003      	strh	r3, [r0, #0]
	rf_set_tx_addr(tx_addr, address_length);
 8023888:	6839      	ldr	r1, [r7, #0]
	memcpy(tx_addr, nrf_conf.address, 3);
 802388a:	7082      	strb	r2, [r0, #2]
	memcpy(rx_addr[0], nrf_conf.address, 3);
 802388c:	70aa      	strb	r2, [r5, #2]
	tx_pipe0_addr_eq = true;
 802388e:	2201      	movs	r2, #1
 8023890:	f88e 2000 	strb.w	r2, [lr]
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8023894:	802b      	strh	r3, [r5, #0]
	rf_set_tx_addr(tx_addr, address_length);
 8023896:	f7ff fd13 	bl	80232c0 <rf_set_tx_addr>
	rf_set_rx_addr(0, rx_addr[0], address_length);
 802389a:	683a      	ldr	r2, [r7, #0]
 802389c:	4629      	mov	r1, r5
 802389e:	2000      	movs	r0, #0
 80238a0:	f7ff fd06 	bl	80232b0 <rf_set_rx_addr>

	rf_power_up();
 80238a4:	f7ff fe44 	bl	8023530 <rf_power_up>
	rf_mode_rx();
 80238a8:	f7ff fea2 	bl	80235f0 <rf_mode_rx>
	rf_flush_all();
 80238ac:	f7ff fca0 	bl	80231f0 <rf_flush_all>
	rf_clear_irq();
 80238b0:	f7ff fd2e 	bl	8023310 <rf_clear_irq>

	chMtxUnlock(&rf_mutex);
 80238b4:	4630      	mov	r0, r6
}
 80238b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	chMtxUnlock(&rf_mutex);
 80238ba:	f7ea ba49 	b.w	800dd50 <chMtxUnlock>
 80238be:	bf00      	nop
 80238c0:	200114e0 	.word	0x200114e0
 80238c4:	200114d4 	.word	0x200114d4
 80238c8:	200114f0 	.word	0x200114f0
 80238cc:	200114cc 	.word	0x200114cc
 80238d0:	20011510 	.word	0x20011510
 80238d4:	20011515 	.word	0x20011515
	...

080238e0 <rfhelp_update_conf>:
void rfhelp_update_conf(nrf_config *conf) {
 80238e0:	4602      	mov	r2, r0
	nrf_conf = *conf;
 80238e2:	4b07      	ldr	r3, [pc, #28]	; (8023900 <rfhelp_update_conf+0x20>)
 80238e4:	6851      	ldr	r1, [r2, #4]
 80238e6:	6800      	ldr	r0, [r0, #0]
void rfhelp_update_conf(nrf_config *conf) {
 80238e8:	b430      	push	{r4, r5}
	if (init_done) {
 80238ea:	4d06      	ldr	r5, [pc, #24]	; (8023904 <rfhelp_update_conf+0x24>)
	nrf_conf = *conf;
 80238ec:	8914      	ldrh	r4, [r2, #8]
	if (init_done) {
 80238ee:	782a      	ldrb	r2, [r5, #0]
	nrf_conf = *conf;
 80238f0:	c303      	stmia	r3!, {r0, r1}
 80238f2:	801c      	strh	r4, [r3, #0]
	if (init_done) {
 80238f4:	b90a      	cbnz	r2, 80238fa <rfhelp_update_conf+0x1a>
}
 80238f6:	bc30      	pop	{r4, r5}
 80238f8:	4770      	bx	lr
 80238fa:	bc30      	pop	{r4, r5}
		rfhelp_restart();
 80238fc:	f7ff bf88 	b.w	8023810 <rfhelp_restart>
 8023900:	200114d4 	.word	0x200114d4
 8023904:	200114d0 	.word	0x200114d0
	...

08023910 <rfhelp_send_data>:
 * @return
 * 0: Send OK.
 * -1: Max RT.
 * -2: Timeout
 */
int rfhelp_send_data(char *data, int len, bool ack) {
 8023910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rf_mode_tx();
	rf_clear_irq();
	rf_flush_all();

	// Pipe0-address and tx-address must be equal for ack to work.
	if (!tx_pipe0_addr_eq && ack) {
 8023912:	4e25      	ldr	r6, [pc, #148]	; (80239a8 <rfhelp_send_data+0x98>)
int rfhelp_send_data(char *data, int len, bool ack) {
 8023914:	4604      	mov	r4, r0
	chMtxLock(&rf_mutex);
 8023916:	4825      	ldr	r0, [pc, #148]	; (80239ac <rfhelp_send_data+0x9c>)
int rfhelp_send_data(char *data, int len, bool ack) {
 8023918:	460d      	mov	r5, r1
 802391a:	4617      	mov	r7, r2
	chMtxLock(&rf_mutex);
 802391c:	f7ea fa08 	bl	800dd30 <chMtxLock>
	rf_mode_tx();
 8023920:	f7ff fe46 	bl	80235b0 <rf_mode_tx>
	rf_clear_irq();
 8023924:	f7ff fcf4 	bl	8023310 <rf_clear_irq>
	rf_flush_all();
 8023928:	f7ff fc62 	bl	80231f0 <rf_flush_all>
	if (!tx_pipe0_addr_eq && ack) {
 802392c:	7830      	ldrb	r0, [r6, #0]
 802392e:	bb10      	cbnz	r0, 8023976 <rfhelp_send_data+0x66>
 8023930:	bb87      	cbnz	r7, 8023994 <rfhelp_send_data+0x84>
	}

	if (ack) {
		rf_write_tx_payload(data, len);
	} else {
		rf_write_tx_payload_no_ack(data, len);
 8023932:	4629      	mov	r1, r5
 8023934:	4620      	mov	r0, r4
 8023936:	f7ff fbfb 	bl	8023130 <rf_write_tx_payload_no_ack>
int rfhelp_send_data(char *data, int len, bool ack) {
 802393a:	253c      	movs	r5, #60	; 0x3c
 802393c:	e003      	b.n	8023946 <rfhelp_send_data+0x36>
		timeout--;

		if (NRF_STATUS_GET_TX_DS(s)) {
			retval = 0;
			break;
		} else if (NRF_STATUS_GET_MAX_RT(s)) {
 802393e:	06e3      	lsls	r3, r4, #27
 8023940:	d420      	bmi.n	8023984 <rfhelp_send_data+0x74>
			rf_clear_maxrt_irq();
			retval = -1;
			break;
		} else if (timeout == 0) {
 8023942:	3d01      	subs	r5, #1
 8023944:	d023      	beq.n	802398e <rfhelp_send_data+0x7e>
		int s = rf_status();
 8023946:	f7ff fc7b 	bl	8023240 <rf_status>
 802394a:	4604      	mov	r4, r0
		chThdSleepMilliseconds(1);
 802394c:	200a      	movs	r0, #10
 802394e:	f7ea f847 	bl	800d9e0 <chThdSleep>
		if (NRF_STATUS_GET_TX_DS(s)) {
 8023952:	06a2      	lsls	r2, r4, #26
 8023954:	d5f3      	bpl.n	802393e <rfhelp_send_data+0x2e>
			retval = 0;
 8023956:	2400      	movs	r4, #0
			break;
		}
	}

	// Restore pipe0 address
	if (!tx_pipe0_addr_eq && ack) {
 8023958:	7830      	ldrb	r0, [r6, #0]
 802395a:	b928      	cbnz	r0, 8023968 <rfhelp_send_data+0x58>
 802395c:	b127      	cbz	r7, 8023968 <rfhelp_send_data+0x58>
		rf_set_rx_addr(0, rx_addr[0], address_length);
 802395e:	4b14      	ldr	r3, [pc, #80]	; (80239b0 <rfhelp_send_data+0xa0>)
 8023960:	4914      	ldr	r1, [pc, #80]	; (80239b4 <rfhelp_send_data+0xa4>)
 8023962:	681a      	ldr	r2, [r3, #0]
 8023964:	f7ff fca4 	bl	80232b0 <rf_set_rx_addr>
	}

	rf_mode_rx();
 8023968:	f7ff fe42 	bl	80235f0 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 802396c:	480f      	ldr	r0, [pc, #60]	; (80239ac <rfhelp_send_data+0x9c>)
 802396e:	f7ea f9ef 	bl	800dd50 <chMtxUnlock>

	return retval;
}
 8023972:	4620      	mov	r0, r4
 8023974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ack) {
 8023976:	2f00      	cmp	r7, #0
 8023978:	d0db      	beq.n	8023932 <rfhelp_send_data+0x22>
		rf_write_tx_payload(data, len);
 802397a:	4629      	mov	r1, r5
 802397c:	4620      	mov	r0, r4
 802397e:	f7ff fbbf 	bl	8023100 <rf_write_tx_payload>
 8023982:	e7da      	b.n	802393a <rfhelp_send_data+0x2a>
			rf_clear_maxrt_irq();
 8023984:	f7ff fce4 	bl	8023350 <rf_clear_maxrt_irq>
			retval = -1;
 8023988:	f04f 34ff 	mov.w	r4, #4294967295
			break;
 802398c:	e7e4      	b.n	8023958 <rfhelp_send_data+0x48>
			retval = -2;
 802398e:	f06f 0401 	mvn.w	r4, #1
 8023992:	e7e1      	b.n	8023958 <rfhelp_send_data+0x48>
		rf_set_rx_addr(0, tx_addr, address_length);
 8023994:	4b06      	ldr	r3, [pc, #24]	; (80239b0 <rfhelp_send_data+0xa0>)
 8023996:	4908      	ldr	r1, [pc, #32]	; (80239b8 <rfhelp_send_data+0xa8>)
 8023998:	681a      	ldr	r2, [r3, #0]
 802399a:	f7ff fc89 	bl	80232b0 <rf_set_rx_addr>
		rf_write_tx_payload(data, len);
 802399e:	4629      	mov	r1, r5
 80239a0:	4620      	mov	r0, r4
 80239a2:	f7ff fbad 	bl	8023100 <rf_write_tx_payload>
 80239a6:	e7c8      	b.n	802393a <rfhelp_send_data+0x2a>
 80239a8:	20011515 	.word	0x20011515
 80239ac:	200114e0 	.word	0x200114e0
 80239b0:	200114cc 	.word	0x200114cc
 80239b4:	200114f0 	.word	0x200114f0
 80239b8:	20011510 	.word	0x20011510
 80239bc:	00000000 	.word	0x00000000

080239c0 <rfhelp_send_data_crc>:
 * @return
 * 0: Send OK.
 * -1: Max RT.
 * -2: Timeout
 */
int rfhelp_send_data_crc(char *data, int len) {
 80239c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char buffer[len + 2];
 80239c2:	f101 0309 	add.w	r3, r1, #9
 80239c6:	f023 0307 	bic.w	r3, r3, #7
int rfhelp_send_data_crc(char *data, int len) {
 80239ca:	af00      	add	r7, sp, #0
	char buffer[len + 2];
 80239cc:	ebad 0d03 	sub.w	sp, sp, r3
int rfhelp_send_data_crc(char *data, int len) {
 80239d0:	460c      	mov	r4, r1
 80239d2:	4606      	mov	r6, r0
	unsigned short crc = crc16((unsigned char*)data, len);
 80239d4:	f7ee fab4 	bl	8011f40 <crc16>

	memcpy(buffer, data, len);
 80239d8:	4622      	mov	r2, r4
	unsigned short crc = crc16((unsigned char*)data, len);
 80239da:	4605      	mov	r5, r0
	memcpy(buffer, data, len);
 80239dc:	4631      	mov	r1, r6
 80239de:	4668      	mov	r0, sp
 80239e0:	f7e9 f896 	bl	800cb10 <memcpy>
	buffer[len] = (char)(crc >> 8);
	buffer[len + 1] = (char)(crc & 0xFF);
 80239e4:	eb0d 0304 	add.w	r3, sp, r4

	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 80239e8:	4a05      	ldr	r2, [pc, #20]	; (8023a00 <rfhelp_send_data_crc+0x40>)
	buffer[len] = (char)(crc >> 8);
 80239ea:	0a2e      	lsrs	r6, r5, #8
 80239ec:	f80d 6004 	strb.w	r6, [sp, r4]
	char buffer[len + 2];
 80239f0:	1ca1      	adds	r1, r4, #2
	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 80239f2:	4668      	mov	r0, sp
 80239f4:	7a52      	ldrb	r2, [r2, #9]
	buffer[len + 1] = (char)(crc & 0xFF);
 80239f6:	705d      	strb	r5, [r3, #1]
	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 80239f8:	f7ff ff8a 	bl	8023910 <rfhelp_send_data>
}
 80239fc:	46bd      	mov	sp, r7
 80239fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a00:	200114d4 	.word	0x200114d4
	...

08023a10 <rfhelp_read_rx_data>:
 * 1: Read OK, more data to read.
 * 0: Read OK
 * -1: No RX data
 * -2: Wrong length read. Something is likely wrong.
 */
int rfhelp_read_rx_data(char *data, int *len, int *pipe) {
 8023a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a12:	4607      	mov	r7, r0
	int retval = -1;

	chMtxLock(&rf_mutex);
 8023a14:	4816      	ldr	r0, [pc, #88]	; (8023a70 <rfhelp_read_rx_data+0x60>)
int rfhelp_read_rx_data(char *data, int *len, int *pipe) {
 8023a16:	460c      	mov	r4, r1
 8023a18:	4616      	mov	r6, r2
	chMtxLock(&rf_mutex);
 8023a1a:	f7ea f989 	bl	800dd30 <chMtxLock>

	int s = rf_status();
 8023a1e:	f7ff fc0f 	bl	8023240 <rf_status>
	int pipe_n = NRF_STATUS_GET_RX_P_NO(s);
 8023a22:	f3c0 0542 	ubfx	r5, r0, #1, #3

	if (pipe_n != 7) {
 8023a26:	2d07      	cmp	r5, #7
 8023a28:	d01e      	beq.n	8023a68 <rfhelp_read_rx_data+0x58>
		*len = rf_get_payload_width();
 8023a2a:	f7ff fbe9 	bl	8023200 <rf_get_payload_width>
 8023a2e:	6020      	str	r0, [r4, #0]
		if (pipe) {
 8023a30:	b10e      	cbz	r6, 8023a36 <rfhelp_read_rx_data+0x26>
			*pipe = pipe_n;
 8023a32:	6035      	str	r5, [r6, #0]
 8023a34:	6820      	ldr	r0, [r4, #0]
		}
		if (*len <= 32 && *len >= 0) {
 8023a36:	2820      	cmp	r0, #32
 8023a38:	d811      	bhi.n	8023a5e <rfhelp_read_rx_data+0x4e>
			rf_read_rx_payload(data, *len);
 8023a3a:	4601      	mov	r1, r0
 8023a3c:	4638      	mov	r0, r7
 8023a3e:	f7ff fb8f 	bl	8023160 <rf_read_rx_payload>
			rf_clear_rx_irq();
 8023a42:	f7ff fc75 	bl	8023330 <rf_clear_rx_irq>
//			rf_flush_rx();

			s = rf_status();
 8023a46:	f7ff fbfb 	bl	8023240 <rf_status>
			if (NRF_STATUS_GET_RX_P_NO(s) == 7) {
 8023a4a:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8023a4e:	1fc4      	subs	r4, r0, #7
 8023a50:	bf18      	it	ne
 8023a52:	2401      	movne	r4, #1
			*len = 0;
			retval = -2;
		}
	}

	chMtxUnlock(&rf_mutex);
 8023a54:	4806      	ldr	r0, [pc, #24]	; (8023a70 <rfhelp_read_rx_data+0x60>)
 8023a56:	f7ea f97b 	bl	800dd50 <chMtxUnlock>

	return retval;
}
 8023a5a:	4620      	mov	r0, r4
 8023a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*len = 0;
 8023a5e:	2300      	movs	r3, #0
 8023a60:	6023      	str	r3, [r4, #0]
			retval = -2;
 8023a62:	f06f 0401 	mvn.w	r4, #1
 8023a66:	e7f5      	b.n	8023a54 <rfhelp_read_rx_data+0x44>
	int retval = -1;
 8023a68:	f04f 34ff 	mov.w	r4, #4294967295
 8023a6c:	e7f2      	b.n	8023a54 <rfhelp_read_rx_data+0x44>
 8023a6e:	bf00      	nop
 8023a70:	200114e0 	.word	0x200114e0
	...

08023a80 <rfhelp_read_rx_data_crc>:
 * 0: Read OK
 * -1: No RX data
 * -2: Wrong length read. Something is likely wrong.
 * -3: Data read, but CRC does not match.
 */
int rfhelp_read_rx_data_crc(char *data, int *len, int *pipe) {
 8023a80:	b570      	push	{r4, r5, r6, lr}
 8023a82:	460c      	mov	r4, r1
 8023a84:	4606      	mov	r6, r0
	int res = rfhelp_read_rx_data(data, len, pipe);
 8023a86:	f7ff ffc3 	bl	8023a10 <rfhelp_read_rx_data>

	if (res >= 0 && *len > 2) {
 8023a8a:	1e05      	subs	r5, r0, #0
 8023a8c:	6821      	ldr	r1, [r4, #0]
 8023a8e:	db01      	blt.n	8023a94 <rfhelp_read_rx_data_crc+0x14>
 8023a90:	2902      	cmp	r1, #2
 8023a92:	dc03      	bgt.n	8023a9c <rfhelp_read_rx_data_crc+0x1c>
		if (crc	!= ((unsigned short) data[*len - 2] << 8 | (unsigned short) data[*len - 1])) {
			res = -3;
		}
	}

	*len -= 2;
 8023a94:	3902      	subs	r1, #2
 8023a96:	6021      	str	r1, [r4, #0]

	return res;
}
 8023a98:	4628      	mov	r0, r5
 8023a9a:	bd70      	pop	{r4, r5, r6, pc}
		unsigned short crc = crc16((unsigned char*)data, *len - 2);
 8023a9c:	3902      	subs	r1, #2
 8023a9e:	4630      	mov	r0, r6
 8023aa0:	f7ee fa4e 	bl	8011f40 <crc16>
		if (crc	!= ((unsigned short) data[*len - 2] << 8 | (unsigned short) data[*len - 1])) {
 8023aa4:	6821      	ldr	r1, [r4, #0]
 8023aa6:	440e      	add	r6, r1
	*len -= 2;
 8023aa8:	3902      	subs	r1, #2
		if (crc	!= ((unsigned short) data[*len - 2] << 8 | (unsigned short) data[*len - 1])) {
 8023aaa:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8023aae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
	*len -= 2;
 8023ab2:	6021      	str	r1, [r4, #0]
		if (crc	!= ((unsigned short) data[*len - 2] << 8 | (unsigned short) data[*len - 1])) {
 8023ab4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023ab8:	4298      	cmp	r0, r3
			res = -3;
 8023aba:	bf18      	it	ne
 8023abc:	f06f 0502 	mvnne.w	r5, #2
}
 8023ac0:	4628      	mov	r0, r5
 8023ac2:	bd70      	pop	{r4, r5, r6, pc}
	...

08023ad0 <rfhelp_power_up>:
	chMtxLock(&rf_mutex);
	rf_power_down();
	chMtxUnlock(&rf_mutex);
}

void rfhelp_power_up(void) {
 8023ad0:	b510      	push	{r4, lr}
	chMtxLock(&rf_mutex);
 8023ad2:	4c05      	ldr	r4, [pc, #20]	; (8023ae8 <rfhelp_power_up+0x18>)
 8023ad4:	4620      	mov	r0, r4
 8023ad6:	f7ea f92b 	bl	800dd30 <chMtxLock>
	rf_power_up();
 8023ada:	f7ff fd29 	bl	8023530 <rf_power_up>
	chMtxUnlock(&rf_mutex);
 8023ade:	4620      	mov	r0, r4
}
 8023ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	chMtxUnlock(&rf_mutex);
 8023ae4:	f7ea b934 	b.w	800dd50 <chMtxUnlock>
 8023ae8:	200114e0 	.word	0x200114e0
 8023aec:	00000000 	.word	0x00000000

08023af0 <tx_thread>:
 8023af0:	4b1c      	ldr	r3, [pc, #112]	; (8023b64 <tx_thread+0x74>)
 8023af2:	491d      	ldr	r1, [pc, #116]	; (8023b68 <tx_thread+0x78>)
 8023af4:	699a      	ldr	r2, [r3, #24]
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 8023af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)arg;

	chRegSetThreadName("Nrf TX");
	tx_running = true;
 8023afa:	4f1c      	ldr	r7, [pc, #112]	; (8023b6c <tx_thread+0x7c>)

	for(;;) {
		if (tx_stop) {
 8023afc:	4d1c      	ldr	r5, [pc, #112]	; (8023b70 <tx_thread+0x80>)
 8023afe:	6191      	str	r1, [r2, #24]
	tx_running = true;
 8023b00:	2301      	movs	r3, #1
 8023b02:	703b      	strb	r3, [r7, #0]
		if (tx_stop) {
 8023b04:	782b      	ldrb	r3, [r5, #0]
static THD_FUNCTION(tx_thread, arg) {
 8023b06:	b083      	sub	sp, #12
		if (tx_stop) {
 8023b08:	bb33      	cbnz	r3, 8023b58 <tx_thread+0x68>
 8023b0a:	4c1a      	ldr	r4, [pc, #104]	; (8023b74 <tx_thread+0x84>)
			return;
		}

		nosend_cnt++;

		if (nosend_cnt >= ALIVE_INTERVAL && !pairing_active) {
 8023b0c:	4e1a      	ldr	r6, [pc, #104]	; (8023b78 <tx_thread+0x88>)
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023b0e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8023b7c <tx_thread+0x8c>
			uint8_t pl[2];
			int32_t index = 0;
			pl[index++] = MOTE_PACKET_ALIVE;
 8023b12:	f04f 0802 	mov.w	r8, #2
 8023b16:	e004      	b.n	8023b22 <tx_thread+0x32>
			rf_tx_wrapper((char*)pl, index);
			nosend_cnt = 0;
		}

		chThdSleepMilliseconds(1);
 8023b18:	200a      	movs	r0, #10
 8023b1a:	f7e9 ff61 	bl	800d9e0 <chThdSleep>
		if (tx_stop) {
 8023b1e:	782b      	ldrb	r3, [r5, #0]
 8023b20:	b9d3      	cbnz	r3, 8023b58 <tx_thread+0x68>
		nosend_cnt++;
 8023b22:	6823      	ldr	r3, [r4, #0]
 8023b24:	3301      	adds	r3, #1
		if (nosend_cnt >= ALIVE_INTERVAL && !pairing_active) {
 8023b26:	2b31      	cmp	r3, #49	; 0x31
		nosend_cnt++;
 8023b28:	6023      	str	r3, [r4, #0]
		if (nosend_cnt >= ALIVE_INTERVAL && !pairing_active) {
 8023b2a:	ddf5      	ble.n	8023b18 <tx_thread+0x28>
 8023b2c:	7833      	ldrb	r3, [r6, #0]
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	d1f2      	bne.n	8023b18 <tx_thread+0x28>
			pl[index++] = MOTE_PACKET_ALIVE;
 8023b32:	a802      	add	r0, sp, #8
	int res = rfhelp_send_data_crc(data, len);
 8023b34:	2101      	movs	r1, #1
			pl[index++] = MOTE_PACKET_ALIVE;
 8023b36:	f800 8d04 	strb.w	r8, [r0, #-4]!
	int res = rfhelp_send_data_crc(data, len);
 8023b3a:	f7ff ff41 	bl	80239c0 <rfhelp_send_data_crc>
	if (res == 0) {
 8023b3e:	b918      	cbnz	r0, 8023b48 <tx_thread+0x58>
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023b40:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8023b44:	f8c9 3000 	str.w	r3, [r9]
			nosend_cnt = 0;
 8023b48:	2300      	movs	r3, #0
		chThdSleepMilliseconds(1);
 8023b4a:	200a      	movs	r0, #10
			nosend_cnt = 0;
 8023b4c:	6023      	str	r3, [r4, #0]
		chThdSleepMilliseconds(1);
 8023b4e:	f7e9 ff47 	bl	800d9e0 <chThdSleep>
		if (tx_stop) {
 8023b52:	782b      	ldrb	r3, [r5, #0]
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d0e4      	beq.n	8023b22 <tx_thread+0x32>
			tx_running = false;
 8023b58:	2300      	movs	r3, #0
 8023b5a:	703b      	strb	r3, [r7, #0]
	}

}
 8023b5c:	b003      	add	sp, #12
 8023b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023b62:	bf00      	nop
 8023b64:	20001a40 	.word	0x20001a40
 8023b68:	080307a0 	.word	0x080307a0
 8023b6c:	200122d8 	.word	0x200122d8
 8023b70:	2000108d 	.word	0x2000108d
 8023b74:	20011524 	.word	0x20011524
 8023b78:	20011530 	.word	0x20011530
 8023b7c:	2001152c 	.word	0x2001152c

08023b80 <nrf_driver_send_buffer>:
			nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
		}
	}
}

void nrf_driver_send_buffer(unsigned char *data, unsigned int len) {
 8023b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t send_buffer[MAX_PL_LEN];

	if (len <= (MAX_PL_LEN - 1)) {
 8023b84:	2918      	cmp	r1, #24
void nrf_driver_send_buffer(unsigned char *data, unsigned int len) {
 8023b86:	b08b      	sub	sp, #44	; 0x2c
 8023b88:	4689      	mov	r9, r1
 8023b8a:	4683      	mov	fp, r0
	if (len <= (MAX_PL_LEN - 1)) {
 8023b8c:	f240 80ac 	bls.w	8023ce8 <nrf_driver_send_buffer+0x168>
		ind += len;
		rf_tx_wrapper((char*)send_buffer, ind);
		nosend_cnt = 0;
	} else {
		unsigned int end_a = 0;
		unsigned int len2 = len - (MAX_PL_LEN - 5);
 8023b90:	2700      	movs	r7, #0
 8023b92:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8023d34 <nrf_driver_send_buffer+0x1b4>
		unsigned int end_a = 0;
 8023b96:	463c      	mov	r4, r7
		unsigned int len2 = len - (MAX_PL_LEN - 5);
 8023b98:	f1a1 0614 	sub.w	r6, r1, #20
 8023b9c:	4605      	mov	r5, r0
			}

			end_a = i + (MAX_PL_LEN - 2);

			uint8_t send_len = (MAX_PL_LEN - 2);
			send_buffer[0] = MOTE_PACKET_FILL_RX_BUFFER;
 8023b9e:	f04f 0a03 	mov.w	sl, #3
			end_a = i + (MAX_PL_LEN - 2);
 8023ba2:	3417      	adds	r4, #23
			send_buffer[1] = i;
 8023ba4:	b2fb      	uxtb	r3, r7

			if ((i + (MAX_PL_LEN - 2)) <= len2) {
 8023ba6:	42a6      	cmp	r6, r4
			send_buffer[0] = MOTE_PACKET_FILL_RX_BUFFER;
 8023ba8:	f88d a00c 	strb.w	sl, [sp, #12]
			send_buffer[1] = i;
 8023bac:	f88d 300d 	strb.w	r3, [sp, #13]
			if ((i + (MAX_PL_LEN - 2)) <= len2) {
 8023bb0:	f0c0 80b2 	bcc.w	8023d18 <nrf_driver_send_buffer+0x198>
				memcpy(send_buffer + 2, data + i, send_len);
 8023bb4:	682b      	ldr	r3, [r5, #0]
 8023bb6:	686a      	ldr	r2, [r5, #4]
 8023bb8:	f8cd 300e 	str.w	r3, [sp, #14]
 8023bbc:	68ab      	ldr	r3, [r5, #8]
 8023bbe:	f8cd 2012 	str.w	r2, [sp, #18]
 8023bc2:	f8cd 3016 	str.w	r3, [sp, #22]
 8023bc6:	68ea      	ldr	r2, [r5, #12]
 8023bc8:	692b      	ldr	r3, [r5, #16]
 8023bca:	f8cd 201a 	str.w	r2, [sp, #26]
 8023bce:	f8cd 301e 	str.w	r3, [sp, #30]
 8023bd2:	8aaa      	ldrh	r2, [r5, #20]
 8023bd4:	7dab      	ldrb	r3, [r5, #22]
 8023bd6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8023bda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023bde:	2119      	movs	r1, #25
	int res = rfhelp_send_data_crc(data, len);
 8023be0:	a803      	add	r0, sp, #12
 8023be2:	f7ff feed 	bl	80239c0 <rfhelp_send_data_crc>
 8023be6:	3717      	adds	r7, #23
				send_len = len2 - i;
				memcpy(send_buffer + 2, data + i, send_len);
			}

			rf_tx_wrapper((char*)send_buffer, send_len + 2);
			nosend_cnt = 0;
 8023be8:	2300      	movs	r3, #0
 8023bea:	3517      	adds	r5, #23
	if (res == 0) {
 8023bec:	b918      	cbnz	r0, 8023bf6 <nrf_driver_send_buffer+0x76>
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023bee:	4950      	ldr	r1, [pc, #320]	; (8023d30 <nrf_driver_send_buffer+0x1b0>)
 8023bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8023bf4:	600a      	str	r2, [r1, #0]
		for (unsigned int i = 0;i < len2;i += (MAX_PL_LEN - 2)) {
 8023bf6:	42a6      	cmp	r6, r4
			nosend_cnt = 0;
 8023bf8:	f8c8 3000 	str.w	r3, [r8]
		for (unsigned int i = 0;i < len2;i += (MAX_PL_LEN - 2)) {
 8023bfc:	d942      	bls.n	8023c84 <nrf_driver_send_buffer+0x104>
			if (i > 255) {
 8023bfe:	f5b4 7f8a 	cmp.w	r4, #276	; 0x114
 8023c02:	d1ce      	bne.n	8023ba2 <nrf_driver_send_buffer+0x22>
 8023c04:	f1a6 0314 	sub.w	r3, r6, #20
 8023c08:	fa5f fa83 	uxtb.w	sl, r3
 8023c0c:	f50b 758a 	add.w	r5, fp, #276	; 0x114
		}

		for (unsigned int i = end_a;i < len2;i += (MAX_PL_LEN - 3)) {
			uint8_t send_len = (MAX_PL_LEN - 3);
			send_buffer[0] = MOTE_PACKET_FILL_RX_BUFFER_LONG;
 8023c10:	2704      	movs	r7, #4
 8023c12:	e024      	b.n	8023c5e <nrf_driver_send_buffer+0xde>
			send_buffer[1] = i >> 8;
			send_buffer[2] = i & 0xFF;

			if ((i + (MAX_PL_LEN - 3)) <= len2) {
				memcpy(send_buffer + 3, data + i, send_len);
 8023c14:	682b      	ldr	r3, [r5, #0]
 8023c16:	686a      	ldr	r2, [r5, #4]
 8023c18:	f8cd 300f 	str.w	r3, [sp, #15]
 8023c1c:	f8cd 2013 	str.w	r2, [sp, #19]
 8023c20:	68ab      	ldr	r3, [r5, #8]
 8023c22:	68ea      	ldr	r2, [r5, #12]
 8023c24:	f8cd 3017 	str.w	r3, [sp, #23]
 8023c28:	f8cd 201b 	str.w	r2, [sp, #27]
 8023c2c:	692b      	ldr	r3, [r5, #16]
 8023c2e:	8aaa      	ldrh	r2, [r5, #20]
 8023c30:	f8cd 301f 	str.w	r3, [sp, #31]
 8023c34:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
 8023c38:	2119      	movs	r1, #25
	int res = rfhelp_send_data_crc(data, len);
 8023c3a:	a803      	add	r0, sp, #12
 8023c3c:	f7ff fec0 	bl	80239c0 <rfhelp_send_data_crc>
 8023c40:	f1aa 0a16 	sub.w	sl, sl, #22
				send_len = len2 - i;
				memcpy(send_buffer + 3, data + i, send_len);
			}

			rf_tx_wrapper((char*)send_buffer, send_len + 3);
			nosend_cnt = 0;
 8023c44:	2300      	movs	r3, #0
 8023c46:	3516      	adds	r5, #22
 8023c48:	fa5f fa8a 	uxtb.w	sl, sl
	if (res == 0) {
 8023c4c:	b918      	cbnz	r0, 8023c56 <nrf_driver_send_buffer+0xd6>
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023c4e:	4938      	ldr	r1, [pc, #224]	; (8023d30 <nrf_driver_send_buffer+0x1b0>)
 8023c50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8023c54:	600a      	str	r2, [r1, #0]
		for (unsigned int i = end_a;i < len2;i += (MAX_PL_LEN - 3)) {
 8023c56:	42a6      	cmp	r6, r4
			nosend_cnt = 0;
 8023c58:	f8c8 3000 	str.w	r3, [r8]
		for (unsigned int i = end_a;i < len2;i += (MAX_PL_LEN - 3)) {
 8023c5c:	d912      	bls.n	8023c84 <nrf_driver_send_buffer+0x104>
			send_buffer[1] = i >> 8;
 8023c5e:	0a23      	lsrs	r3, r4, #8
			send_buffer[2] = i & 0xFF;
 8023c60:	f88d 400e 	strb.w	r4, [sp, #14]
			if ((i + (MAX_PL_LEN - 3)) <= len2) {
 8023c64:	3416      	adds	r4, #22
 8023c66:	42a6      	cmp	r6, r4
			send_buffer[0] = MOTE_PACKET_FILL_RX_BUFFER_LONG;
 8023c68:	f88d 700c 	strb.w	r7, [sp, #12]
			send_buffer[1] = i >> 8;
 8023c6c:	f88d 300d 	strb.w	r3, [sp, #13]
			if ((i + (MAX_PL_LEN - 3)) <= len2) {
 8023c70:	d2d0      	bcs.n	8023c14 <nrf_driver_send_buffer+0x94>
				memcpy(send_buffer + 3, data + i, send_len);
 8023c72:	4629      	mov	r1, r5
 8023c74:	4652      	mov	r2, sl
 8023c76:	f10d 000f 	add.w	r0, sp, #15
 8023c7a:	f7e8 ff49 	bl	800cb10 <memcpy>
 8023c7e:	f10a 0103 	add.w	r1, sl, #3
 8023c82:	e7da      	b.n	8023c3a <nrf_driver_send_buffer+0xba>
		}

		uint32_t ind = 0;
		send_buffer[ind++] = MOTE_PACKET_PROCESS_RX_BUFFER;
 8023c84:	2205      	movs	r2, #5
		send_buffer[ind++] = len >> 8;
 8023c86:	ea4f 2319 	mov.w	r3, r9, lsr #8
		send_buffer[ind++] = len & 0xFF;
		unsigned short crc = crc16(data, len);
 8023c8a:	4649      	mov	r1, r9
 8023c8c:	4658      	mov	r0, fp
		send_buffer[ind++] = MOTE_PACKET_PROCESS_RX_BUFFER;
 8023c8e:	f88d 200c 	strb.w	r2, [sp, #12]
		send_buffer[ind++] = len >> 8;
 8023c92:	f88d 300d 	strb.w	r3, [sp, #13]
		send_buffer[ind++] = len & 0xFF;
 8023c96:	f88d 900e 	strb.w	r9, [sp, #14]
		unsigned short crc = crc16(data, len);
 8023c9a:	f7ee f951 	bl	8011f40 <crc16>
		send_buffer[ind++] = (uint8_t)(crc >> 8);
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
		memcpy(send_buffer + 5, data + len2, len - len2);
 8023c9e:	445e      	add	r6, fp
		unsigned short crc = crc16(data, len);
 8023ca0:	4602      	mov	r2, r0
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 8023ca2:	0a01      	lsrs	r1, r0, #8
		memcpy(send_buffer + 5, data + len2, len - len2);
 8023ca4:	6833      	ldr	r3, [r6, #0]
 8023ca6:	f8cd 3011 	str.w	r3, [sp, #17]
 8023caa:	6875      	ldr	r5, [r6, #4]
 8023cac:	68b4      	ldr	r4, [r6, #8]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 8023cae:	f88d 2010 	strb.w	r2, [sp, #16]
		memcpy(send_buffer + 5, data + len2, len - len2);
 8023cb2:	6933      	ldr	r3, [r6, #16]
 8023cb4:	68f2      	ldr	r2, [r6, #12]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 8023cb6:	f88d 100f 	strb.w	r1, [sp, #15]
	int res = rfhelp_send_data_crc(data, len);
 8023cba:	a803      	add	r0, sp, #12
 8023cbc:	2119      	movs	r1, #25
		memcpy(send_buffer + 5, data + len2, len - len2);
 8023cbe:	f8cd 5015 	str.w	r5, [sp, #21]
 8023cc2:	f8cd 4019 	str.w	r4, [sp, #25]
 8023cc6:	f8cd 201d 	str.w	r2, [sp, #29]
 8023cca:	f8cd 3021 	str.w	r3, [sp, #33]	; 0x21
	int res = rfhelp_send_data_crc(data, len);
 8023cce:	f7ff fe77 	bl	80239c0 <rfhelp_send_data_crc>
	if (res == 0) {
 8023cd2:	b918      	cbnz	r0, 8023cdc <nrf_driver_send_buffer+0x15c>
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023cd4:	4b16      	ldr	r3, [pc, #88]	; (8023d30 <nrf_driver_send_buffer+0x1b0>)
 8023cd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8023cda:	601a      	str	r2, [r3, #0]
		nosend_cnt = 0;
 8023cdc:	2300      	movs	r3, #0
 8023cde:	f8c8 3000 	str.w	r3, [r8]
		ind += len - len2;

		rf_tx_wrapper((char*)send_buffer, ind);
		nosend_cnt = 0;
	}
}
 8023ce2:	b00b      	add	sp, #44	; 0x2c
 8023ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		send_buffer[ind++] = MOTE_PACKET_PROCESS_SHORT_BUFFER;
 8023ce8:	ac0a      	add	r4, sp, #40	; 0x28
 8023cea:	2306      	movs	r3, #6
 8023cec:	f804 3d1c 	strb.w	r3, [r4, #-28]!
		memcpy(send_buffer + ind, data, len);
 8023cf0:	4601      	mov	r1, r0
 8023cf2:	464a      	mov	r2, r9
 8023cf4:	f10d 000d 	add.w	r0, sp, #13
 8023cf8:	f7e8 ff0a 	bl	800cb10 <memcpy>
	int res = rfhelp_send_data_crc(data, len);
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	f109 0101 	add.w	r1, r9, #1
 8023d02:	f7ff fe5d 	bl	80239c0 <rfhelp_send_data_crc>
 8023d06:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8023d34 <nrf_driver_send_buffer+0x1b4>
	if (res == 0) {
 8023d0a:	2800      	cmp	r0, #0
 8023d0c:	d1e6      	bne.n	8023cdc <nrf_driver_send_buffer+0x15c>
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023d0e:	4b08      	ldr	r3, [pc, #32]	; (8023d30 <nrf_driver_send_buffer+0x1b0>)
 8023d10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8023d14:	601a      	str	r2, [r3, #0]
 8023d16:	e7e1      	b.n	8023cdc <nrf_driver_send_buffer+0x15c>
 8023d18:	1af3      	subs	r3, r6, r3
 8023d1a:	b2db      	uxtb	r3, r3
				memcpy(send_buffer + 2, data + i, send_len);
 8023d1c:	461a      	mov	r2, r3
 8023d1e:	4629      	mov	r1, r5
 8023d20:	f10d 000e 	add.w	r0, sp, #14
 8023d24:	9301      	str	r3, [sp, #4]
 8023d26:	f7e8 fef3 	bl	800cb10 <memcpy>
 8023d2a:	9b01      	ldr	r3, [sp, #4]
 8023d2c:	1c99      	adds	r1, r3, #2
 8023d2e:	e757      	b.n	8023be0 <nrf_driver_send_buffer+0x60>
 8023d30:	2001152c 	.word	0x2001152c
 8023d34:	20011524 	.word	0x20011524
	...

08023d40 <rx_thread>:
static THD_FUNCTION(rx_thread, arg) {
 8023d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx_running = true;
 8023d44:	48ab      	ldr	r0, [pc, #684]	; (8023ff4 <rx_thread+0x2b4>)
 8023d46:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 802401c <rx_thread+0x2dc>
 8023d4a:	49ab      	ldr	r1, [pc, #684]	; (8023ff8 <rx_thread+0x2b8>)
 8023d4c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8023d50:	2301      	movs	r3, #1
static THD_FUNCTION(rx_thread, arg) {
 8023d52:	ed2d 8b02 	vpush	{d8}
	rx_running = true;
 8023d56:	7003      	strb	r3, [r0, #0]
		if (rx_stop) {
 8023d58:	4ba8      	ldr	r3, [pc, #672]	; (8023ffc <rx_thread+0x2bc>)
 8023d5a:	6191      	str	r1, [r2, #24]
 8023d5c:	781b      	ldrb	r3, [r3, #0]
static THD_FUNCTION(rx_thread, arg) {
 8023d5e:	b0c1      	sub	sp, #260	; 0x104
		if (rx_stop) {
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	f040 811d 	bne.w	8023fa0 <rx_thread+0x260>
 8023d66:	4da6      	ldr	r5, [pc, #664]	; (8024000 <rx_thread+0x2c0>)
 8023d68:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8024020 <rx_thread+0x2e0>
 8023d6c:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8024024 <rx_thread+0x2e4>
					from_nrf = true;
 8023d70:	4fa4      	ldr	r7, [pc, #656]	; (8024004 <rx_thread+0x2c4>)
					mstate.vbat = (float)buffer_get_int16(buf, &ind) / 1000.0;
 8023d72:	ed9f 8aa5 	vldr	s16, [pc, #660]	; 8024008 <rx_thread+0x2c8>
			int res = rfhelp_read_rx_data_crc((char*)buf, &len, &pipe);
 8023d76:	aa04      	add	r2, sp, #16
 8023d78:	a903      	add	r1, sp, #12
 8023d7a:	a806      	add	r0, sp, #24
 8023d7c:	f7ff fe80 	bl	8023a80 <rfhelp_read_rx_data_crc>
			int32_t ind = 0;
 8023d80:	2300      	movs	r3, #0
			if (res >= 0) {
 8023d82:	1e04      	subs	r4, r0, #0
			int32_t ind = 0;
 8023d84:	9305      	str	r3, [sp, #20]
			if (res >= 0) {
 8023d86:	f2c0 80ee 	blt.w	8023f66 <rx_thread+0x226>
				MOTE_PACKET packet = buf[0];
 8023d8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
				nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
 8023d8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
				switch (packet) {
 8023d92:	3b01      	subs	r3, #1
				nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
 8023d94:	602a      	str	r2, [r5, #0]
				switch (packet) {
 8023d96:	2b06      	cmp	r3, #6
 8023d98:	d83b      	bhi.n	8023e12 <rx_thread+0xd2>
 8023d9a:	e8df f003 	tbb	[pc, r3]
 8023d9e:	3a6f      	.short	0x3a6f
 8023da0:	41045264 	.word	0x41045264
 8023da4:	9f          	.byte	0x9f
 8023da5:	00          	.byte	0x00
					int rxbuf_len = (unsigned int)buf[ind++] << 8;
 8023da6:	f89d 3019 	ldrb.w	r3, [sp, #25]
					rxbuf_len |= (unsigned int)buf[ind++];
 8023daa:	f89d 601a 	ldrb.w	r6, [sp, #26]
 8023dae:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
					if (rxbuf_len > RX_BUFFER_SIZE) {
 8023db2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
					rxbuf_len |= (unsigned int)buf[ind++];
 8023db6:	f04f 0303 	mov.w	r3, #3
 8023dba:	9305      	str	r3, [sp, #20]
					if (rxbuf_len > RX_BUFFER_SIZE) {
 8023dbc:	d829      	bhi.n	8023e12 <rx_thread+0xd2>
					memcpy(rx_buffer + rxbuf_len - (len - ind), buf + ind, len - ind);
 8023dbe:	9a03      	ldr	r2, [sp, #12]
 8023dc0:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8024010 <rx_thread+0x2d0>
					uint8_t crc_high = buf[ind++];
 8023dc4:	f89d 301b 	ldrb.w	r3, [sp, #27]
					uint8_t crc_low = buf[ind++];
 8023dc8:	f89d 101c 	ldrb.w	r1, [sp, #28]
					uint8_t crc_high = buf[ind++];
 8023dcc:	9300      	str	r3, [sp, #0]
					memcpy(rx_buffer + rxbuf_len - (len - ind), buf + ind, len - ind);
 8023dce:	3a05      	subs	r2, #5
 8023dd0:	1ab0      	subs	r0, r6, r2
					uint8_t crc_low = buf[ind++];
 8023dd2:	2305      	movs	r3, #5
 8023dd4:	9101      	str	r1, [sp, #4]
					memcpy(rx_buffer + rxbuf_len - (len - ind), buf + ind, len - ind);
 8023dd6:	4450      	add	r0, sl
 8023dd8:	f10d 011d 	add.w	r1, sp, #29
					uint8_t crc_low = buf[ind++];
 8023ddc:	9305      	str	r3, [sp, #20]
					memcpy(rx_buffer + rxbuf_len - (len - ind), buf + ind, len - ind);
 8023dde:	f7e8 fe97 	bl	800cb10 <memcpy>
					if (crc16(rx_buffer, rxbuf_len)
 8023de2:	4631      	mov	r1, r6
 8023de4:	4650      	mov	r0, sl
 8023de6:	f7ee f8ab 	bl	8011f40 <crc16>
									| (unsigned short) crc_low)) {
 8023dea:	9901      	ldr	r1, [sp, #4]
 8023dec:	9b00      	ldr	r3, [sp, #0]
 8023dee:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
					if (crc16(rx_buffer, rxbuf_len)
 8023df2:	4298      	cmp	r0, r3
 8023df4:	d10d      	bne.n	8023e12 <rx_thread+0xd2>
						chThdSleepMilliseconds(2);
 8023df6:	2014      	movs	r0, #20
 8023df8:	f7e9 fdf2 	bl	800d9e0 <chThdSleep>
						commands_set_send_func(nrf_driver_send_buffer);
 8023dfc:	4883      	ldr	r0, [pc, #524]	; (802400c <rx_thread+0x2cc>)
 8023dfe:	f7f4 fc57 	bl	80186b0 <commands_set_send_func>
						from_nrf = true;
 8023e02:	2301      	movs	r3, #1
						commands_process_packet(rx_buffer, rxbuf_len);
 8023e04:	4631      	mov	r1, r6
 8023e06:	4650      	mov	r0, sl
						from_nrf = true;
 8023e08:	703b      	strb	r3, [r7, #0]
						commands_process_packet(rx_buffer, rxbuf_len);
 8023e0a:	f7f4 fe19 	bl	8018a40 <commands_process_packet>
						from_nrf = false;
 8023e0e:	2300      	movs	r3, #0
 8023e10:	703b      	strb	r3, [r7, #0]
			if (res <= 0) {
 8023e12:	2c00      	cmp	r4, #0
 8023e14:	f000 80a7 	beq.w	8023f66 <rx_thread+0x226>
				chThdSleepMilliseconds(1);
 8023e18:	200a      	movs	r0, #10
 8023e1a:	f7e9 fde1 	bl	800d9e0 <chThdSleep>
		for(;;) {
 8023e1e:	e7aa      	b.n	8023d76 <rx_thread+0x36>
					chThdSleepMilliseconds(2);
 8023e20:	2014      	movs	r0, #20
 8023e22:	f7e9 fddd 	bl	800d9e0 <chThdSleep>
					commands_set_send_func(nrf_driver_send_buffer);
 8023e26:	4879      	ldr	r0, [pc, #484]	; (802400c <rx_thread+0x2cc>)
 8023e28:	f7f4 fc42 	bl	80186b0 <commands_set_send_func>
					commands_process_packet(buf + 1, len - 1);
 8023e2c:	9903      	ldr	r1, [sp, #12]
					from_nrf = true;
 8023e2e:	2301      	movs	r3, #1
					commands_process_packet(buf + 1, len - 1);
 8023e30:	3901      	subs	r1, #1
 8023e32:	f10d 0019 	add.w	r0, sp, #25
					from_nrf = true;
 8023e36:	703b      	strb	r3, [r7, #0]
					commands_process_packet(buf + 1, len - 1);
 8023e38:	f7f4 fe02 	bl	8018a40 <commands_process_packet>
					from_nrf = false;
 8023e3c:	2300      	movs	r3, #0
 8023e3e:	703b      	strb	r3, [r7, #0]
					break;
 8023e40:	e7e7      	b.n	8023e12 <rx_thread+0xd2>
					int rxbuf_ind = (unsigned int)buf[1] << 8;
 8023e42:	f89d 0019 	ldrb.w	r0, [sp, #25]
					rxbuf_ind |= buf[2];
 8023e46:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8023e4a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 8023e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8023e52:	dade      	bge.n	8023e12 <rx_thread+0xd2>
						memcpy(rx_buffer + rxbuf_ind, buf + 3, len - 3);
 8023e54:	9a03      	ldr	r2, [sp, #12]
 8023e56:	486e      	ldr	r0, [pc, #440]	; (8024010 <rx_thread+0x2d0>)
 8023e58:	3a03      	subs	r2, #3
 8023e5a:	4418      	add	r0, r3
 8023e5c:	f10d 011b 	add.w	r1, sp, #27
 8023e60:	f7e8 fe56 	bl	800cb10 <memcpy>
 8023e64:	e7d5      	b.n	8023e12 <rx_thread+0xd2>
					memcpy(rx_buffer + buf[1], buf + 2, len - 2);
 8023e66:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8023e6a:	9a03      	ldr	r2, [sp, #12]
 8023e6c:	4868      	ldr	r0, [pc, #416]	; (8024010 <rx_thread+0x2d0>)
 8023e6e:	3a02      	subs	r2, #2
 8023e70:	4418      	add	r0, r3
 8023e72:	f10d 011a 	add.w	r1, sp, #26
 8023e76:	f7e8 fe4b 	bl	800cb10 <memcpy>
					break;
 8023e7a:	e7ca      	b.n	8023e12 <rx_thread+0xd2>
					buttons = buf[ind++];
 8023e7c:	f89d 301b 	ldrb.w	r3, [sp, #27]
					mstate.js_x = buf[ind++];
 8023e80:	4e64      	ldr	r6, [pc, #400]	; (8024014 <rx_thread+0x2d4>)
 8023e82:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8023e86:	7032      	strb	r2, [r6, #0]
					mstate.bt_c = buttons & (1 << 0);
 8023e88:	f003 0101 	and.w	r1, r3, #1
					mstate.js_y = buf[ind++];
 8023e8c:	f89d 201a 	ldrb.w	r2, [sp, #26]
					mstate.bt_c = buttons & (1 << 0);
 8023e90:	70b1      	strb	r1, [r6, #2]
					mstate.bt_z = buttons & (1 << 1);
 8023e92:	f3c3 0140 	ubfx	r1, r3, #1, #1
					mstate.js_y = buf[ind++];
 8023e96:	7072      	strb	r2, [r6, #1]
					mstate.bt_push = buttons & (1 << 2);
 8023e98:	f3c3 0380 	ubfx	r3, r3, #2, #1
					buttons = buf[ind++];
 8023e9c:	2204      	movs	r2, #4
					mstate.bt_z = buttons & (1 << 1);
 8023e9e:	70f1      	strb	r1, [r6, #3]
					mstate.vbat = (float)buffer_get_int16(buf, &ind) / 1000.0;
 8023ea0:	a806      	add	r0, sp, #24
 8023ea2:	a905      	add	r1, sp, #20
					mstate.bt_push = buttons & (1 << 2);
 8023ea4:	7133      	strb	r3, [r6, #4]
					buttons = buf[ind++];
 8023ea6:	9205      	str	r2, [sp, #20]
					mstate.vbat = (float)buffer_get_int16(buf, &ind) / 1000.0;
 8023ea8:	f7ed feea 	bl	8011c80 <buffer_get_int16>
 8023eac:	ee07 0a90 	vmov	s15, r0
 8023eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					cdata.js_x = 255 - mstate.js_x;
 8023eb4:	7833      	ldrb	r3, [r6, #0]
					cdata.js_y = mstate.js_y;
 8023eb6:	7872      	ldrb	r2, [r6, #1]
 8023eb8:	920f      	str	r2, [sp, #60]	; 0x3c
					mstate.vbat = (float)buffer_get_int16(buf, &ind) / 1000.0;
 8023eba:	eec7 7a08 	vdiv.f32	s15, s14, s16
					cdata.js_x = 255 - mstate.js_x;
 8023ebe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
					cdata.bt_c = mstate.bt_c;
 8023ec2:	78b1      	ldrb	r1, [r6, #2]
					cdata.bt_z = mstate.bt_z;
 8023ec4:	78f2      	ldrb	r2, [r6, #3]
					cdata.js_x = 255 - mstate.js_x;
 8023ec6:	930e      	str	r3, [sp, #56]	; 0x38
					app_nunchuk_update_output(&cdata);
 8023ec8:	a80e      	add	r0, sp, #56	; 0x38
					cdata.bt_c = mstate.bt_c;
 8023eca:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
					cdata.bt_z = mstate.bt_z;
 8023ece:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
					mstate.vbat = (float)buffer_get_int16(buf, &ind) / 1000.0;
 8023ed2:	edc6 7a02 	vstr	s15, [r6, #8]
					app_nunchuk_update_output(&cdata);
 8023ed6:	f7fe fbf3 	bl	80226c0 <app_nunchuk_update_output>
					break;
 8023eda:	e79a      	b.n	8023e12 <rx_thread+0xd2>
					ind = 1;
 8023edc:	2601      	movs	r6, #1
 8023ede:	9605      	str	r6, [sp, #20]
					app_configuration appconf = *app_get_configuration();
 8023ee0:	f7fc fc5e 	bl	80207a0 <app_get_configuration>
 8023ee4:	22c8      	movs	r2, #200	; 0xc8
 8023ee6:	4601      	mov	r1, r0
 8023ee8:	a80e      	add	r0, sp, #56	; 0x38
 8023eea:	f7e8 fe11 	bl	800cb10 <memcpy>
					appconf.app_nrf_conf.address[0] = buf[ind++];
 8023eee:	9a05      	ldr	r2, [sp, #20]
					appconf.app_nrf_conf.crc_type = NRF_CRC_1B;
 8023ef0:	f88d 60f6 	strb.w	r6, [sp, #246]	; 0xf6
					appconf.app_nrf_conf.address[0] = buf[ind++];
 8023ef4:	ab40      	add	r3, sp, #256	; 0x100
 8023ef6:	4413      	add	r3, r2
					appconf.app_nrf_conf.channel = buf[ind++];
 8023ef8:	3204      	adds	r2, #4
					appconf.app_nrf_conf.address[1] = buf[ind++];
 8023efa:	f813 ece7 	ldrb.w	lr, [r3, #-231]
					appconf.app_nrf_conf.address[2] = buf[ind++];
 8023efe:	f813 1ce6 	ldrb.w	r1, [r3, #-230]
					appconf.app_nrf_conf.address[0] = buf[ind++];
 8023f02:	f813 0ce8 	ldrb.w	r0, [r3, #-232]
					appconf.app_nrf_conf.channel = buf[ind++];
 8023f06:	9205      	str	r2, [sp, #20]
 8023f08:	f813 2ce5 	ldrb.w	r2, [r3, #-229]
					appconf.app_nrf_conf.address[0] = buf[ind++];
 8023f0c:	f88d 00fa 	strb.w	r0, [sp, #250]	; 0xfa
					appconf.app_nrf_conf.retries = 3;
 8023f10:	2303      	movs	r3, #3
 8023f12:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
					appconf.app_nrf_conf.retry_delay = NRF_RETR_DELAY_1000US;
 8023f16:	f88d 30f7 	strb.w	r3, [sp, #247]	; 0xf7
					pairing_active = false;
 8023f1a:	4b3f      	ldr	r3, [pc, #252]	; (8024018 <rx_thread+0x2d8>)
					appconf.app_nrf_conf.address[1] = buf[ind++];
 8023f1c:	f88d e0fb 	strb.w	lr, [sp, #251]	; 0xfb
					appconf.app_nrf_conf.speed = NRF_SPEED_250K;
 8023f20:	f04f 0a00 	mov.w	sl, #0
					conf_general_store_app_configuration(&appconf);
 8023f24:	a80e      	add	r0, sp, #56	; 0x38
					appconf.app_nrf_conf.channel = buf[ind++];
 8023f26:	f88d 20f9 	strb.w	r2, [sp, #249]	; 0xf9
					pairing_active = false;
 8023f2a:	f883 a000 	strb.w	sl, [r3]
					appconf.app_nrf_conf.address[2] = buf[ind++];
 8023f2e:	f88d 10fc 	strb.w	r1, [sp, #252]	; 0xfc
					appconf.app_nrf_conf.send_crc_ack = true;
 8023f32:	f88d 60fd 	strb.w	r6, [sp, #253]	; 0xfd
					from_nrf = true;
 8023f36:	703e      	strb	r6, [r7, #0]
					appconf.app_nrf_conf.speed = NRF_SPEED_250K;
 8023f38:	f88d a0f4 	strb.w	sl, [sp, #244]	; 0xf4
					conf_general_store_app_configuration(&appconf);
 8023f3c:	f7f3 fda0 	bl	8017a80 <conf_general_store_app_configuration>
					app_set_configuration(&appconf);
 8023f40:	a80e      	add	r0, sp, #56	; 0x38
 8023f42:	f7fc fc35 	bl	80207b0 <app_set_configuration>
					commands_send_appconf(COMM_GET_APPCONF, &appconf);
 8023f46:	a90e      	add	r1, sp, #56	; 0x38
 8023f48:	2011      	movs	r0, #17
 8023f4a:	f7f4 fc11 	bl	8018770 <commands_send_appconf>
					data[0] = COMM_NRF_START_PAIRING;
 8023f4e:	2325      	movs	r3, #37	; 0x25
					commands_send_packet(data, 2);
 8023f50:	2102      	movs	r1, #2
 8023f52:	a802      	add	r0, sp, #8
					data[1] = NRF_PAIR_OK;
 8023f54:	f88d 6009 	strb.w	r6, [sp, #9]
					data[0] = COMM_NRF_START_PAIRING;
 8023f58:	f88d 3008 	strb.w	r3, [sp, #8]
					commands_send_packet(data, 2);
 8023f5c:	f7f4 fbb0 	bl	80186c0 <commands_send_packet>
					from_nrf = false;
 8023f60:	f887 a000 	strb.w	sl, [r7]
				} break;
 8023f64:	e755      	b.n	8023e12 <rx_thread+0xd2>
  return ch.vtlist.vt_systime;
 8023f66:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
		if (chVTGetSystemTimeX() > pairing_time_end && pairing_active) {
 8023f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8023f6e:	429a      	cmp	r2, r3
 8023f70:	d202      	bcs.n	8023f78 <rx_thread+0x238>
 8023f72:	4b29      	ldr	r3, [pc, #164]	; (8024018 <rx_thread+0x2d8>)
 8023f74:	781b      	ldrb	r3, [r3, #0]
 8023f76:	bb2b      	cbnz	r3, 8023fc4 <rx_thread+0x284>
		chThdSleepMilliseconds(5);
 8023f78:	2032      	movs	r0, #50	; 0x32
 8023f7a:	f7e9 fd31 	bl	800d9e0 <chThdSleep>
		if (nrf_restart_rx_time > 0 && nrf_restart_tx_time > 0) {
 8023f7e:	682b      	ldr	r3, [r5, #0]
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	dd15      	ble.n	8023fb0 <rx_thread+0x270>
 8023f84:	f8db 2000 	ldr.w	r2, [fp]
 8023f88:	2a00      	cmp	r2, #0
 8023f8a:	dd11      	ble.n	8023fb0 <rx_thread+0x270>
			nrf_restart_rx_time -= 5;
 8023f8c:	3b05      	subs	r3, #5
			nrf_restart_tx_time -= 5;
 8023f8e:	3a05      	subs	r2, #5
			nrf_restart_rx_time -= 5;
 8023f90:	602b      	str	r3, [r5, #0]
			nrf_restart_tx_time -= 5;
 8023f92:	f8cb 2000 	str.w	r2, [fp]
		if (rx_stop) {
 8023f96:	4b19      	ldr	r3, [pc, #100]	; (8023ffc <rx_thread+0x2bc>)
 8023f98:	781b      	ldrb	r3, [r3, #0]
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	f43f aeeb 	beq.w	8023d76 <rx_thread+0x36>
			rx_running = false;
 8023fa0:	4a14      	ldr	r2, [pc, #80]	; (8023ff4 <rx_thread+0x2b4>)
 8023fa2:	2300      	movs	r3, #0
 8023fa4:	7013      	strb	r3, [r2, #0]
}
 8023fa6:	b041      	add	sp, #260	; 0x104
 8023fa8:	ecbd 8b02 	vpop	{d8}
 8023fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rfhelp_power_up();
 8023fb0:	f7ff fd8e 	bl	8023ad0 <rfhelp_power_up>
			rfhelp_restart();
 8023fb4:	f7ff fc2c 	bl	8023810 <rfhelp_restart>
			nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
 8023fb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8023fbc:	602b      	str	r3, [r5, #0]
			nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8023fbe:	f8cb 3000 	str.w	r3, [fp]
 8023fc2:	e7e8      	b.n	8023f96 <rx_thread+0x256>
			pairing_active = false;
 8023fc4:	4a14      	ldr	r2, [pc, #80]	; (8024018 <rx_thread+0x2d8>)
 8023fc6:	2300      	movs	r3, #0
 8023fc8:	7013      	strb	r3, [r2, #0]
			nrf_config conf = app_get_configuration()->app_nrf_conf;
 8023fca:	f7fc fbe9 	bl	80207a0 <app_get_configuration>
 8023fce:	30bc      	adds	r0, #188	; 0xbc
 8023fd0:	c807      	ldmia	r0, {r0, r1, r2}
 8023fd2:	ab0e      	add	r3, sp, #56	; 0x38
 8023fd4:	c303      	stmia	r3!, {r0, r1}
			rfhelp_update_conf(&conf);
 8023fd6:	a80e      	add	r0, sp, #56	; 0x38
			nrf_config conf = app_get_configuration()->app_nrf_conf;
 8023fd8:	801a      	strh	r2, [r3, #0]
			rfhelp_update_conf(&conf);
 8023fda:	f7ff fc81 	bl	80238e0 <rfhelp_update_conf>
			data[1] = NRF_PAIR_FAIL;
 8023fde:	2302      	movs	r3, #2
			data[0] = COMM_NRF_START_PAIRING;
 8023fe0:	2225      	movs	r2, #37	; 0x25
			commands_send_packet(data, 2);
 8023fe2:	4619      	mov	r1, r3
 8023fe4:	a805      	add	r0, sp, #20
			data[1] = NRF_PAIR_FAIL;
 8023fe6:	f88d 3015 	strb.w	r3, [sp, #21]
			data[0] = COMM_NRF_START_PAIRING;
 8023fea:	f88d 2014 	strb.w	r2, [sp, #20]
			commands_send_packet(data, 2);
 8023fee:	f7f4 fb67 	bl	80186c0 <commands_send_packet>
 8023ff2:	e7c1      	b.n	8023f78 <rx_thread+0x238>
 8023ff4:	20011938 	.word	0x20011938
 8023ff8:	08030790 	.word	0x08030790
 8023ffc:	2000108c 	.word	0x2000108c
 8024000:	20011528 	.word	0x20011528
 8024004:	20011516 	.word	0x20011516
 8024008:	447a0000 	.word	0x447a0000
 802400c:	08023b81 	.word	0x08023b81
 8024010:	20011538 	.word	0x20011538
 8024014:	20011518 	.word	0x20011518
 8024018:	20011530 	.word	0x20011530
 802401c:	20001a40 	.word	0x20001a40
 8024020:	20011534 	.word	0x20011534
 8024024:	2001152c 	.word	0x2001152c
	...

08024030 <nrf_driver_stop.part.0>:
	tx_stop = true;
 8024030:	490d      	ldr	r1, [pc, #52]	; (8024068 <nrf_driver_stop.part.0+0x38>)
	rx_stop = true;
 8024032:	4a0e      	ldr	r2, [pc, #56]	; (802406c <nrf_driver_stop.part.0+0x3c>)
void nrf_driver_stop(void) {
 8024034:	b538      	push	{r3, r4, r5, lr}
	tx_stop = true;
 8024036:	2301      	movs	r3, #1
	if (rx_running || tx_running) {
 8024038:	4c0d      	ldr	r4, [pc, #52]	; (8024070 <nrf_driver_stop.part.0+0x40>)
	tx_stop = true;
 802403a:	700b      	strb	r3, [r1, #0]
	rx_stop = true;
 802403c:	7013      	strb	r3, [r2, #0]
	if (rx_running || tx_running) {
 802403e:	7823      	ldrb	r3, [r4, #0]
 8024040:	4d0c      	ldr	r5, [pc, #48]	; (8024074 <nrf_driver_stop.part.0+0x44>)
 8024042:	b90b      	cbnz	r3, 8024048 <nrf_driver_stop.part.0+0x18>
 8024044:	782b      	ldrb	r3, [r5, #0]
 8024046:	b133      	cbz	r3, 8024056 <nrf_driver_stop.part.0+0x26>
		rfhelp_stop();
 8024048:	f7ff fbd2 	bl	80237f0 <rfhelp_stop>
	while (rx_running || tx_running) {
 802404c:	7823      	ldrb	r3, [r4, #0]
		chThdSleepMilliseconds(1);
 802404e:	200a      	movs	r0, #10
	while (rx_running || tx_running) {
 8024050:	b12b      	cbz	r3, 802405e <nrf_driver_stop.part.0+0x2e>
		chThdSleepMilliseconds(1);
 8024052:	f7e9 fcc5 	bl	800d9e0 <chThdSleep>
	while (rx_running || tx_running) {
 8024056:	7823      	ldrb	r3, [r4, #0]
		chThdSleepMilliseconds(1);
 8024058:	200a      	movs	r0, #10
	while (rx_running || tx_running) {
 802405a:	2b00      	cmp	r3, #0
 802405c:	d1f9      	bne.n	8024052 <nrf_driver_stop.part.0+0x22>
 802405e:	782b      	ldrb	r3, [r5, #0]
 8024060:	2b00      	cmp	r3, #0
 8024062:	d1f6      	bne.n	8024052 <nrf_driver_stop.part.0+0x22>
}
 8024064:	bd38      	pop	{r3, r4, r5, pc}
 8024066:	bf00      	nop
 8024068:	2000108d 	.word	0x2000108d
 802406c:	2000108c 	.word	0x2000108c
 8024070:	20011938 	.word	0x20011938
 8024074:	200122d8 	.word	0x200122d8
	...

08024080 <nrf_driver_init>:
bool nrf_driver_init(void) {
 8024080:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (from_nrf) {
 8024082:	4a1f      	ldr	r2, [pc, #124]	; (8024100 <nrf_driver_init+0x80>)
 8024084:	7813      	ldrb	r3, [r2, #0]
bool nrf_driver_init(void) {
 8024086:	b083      	sub	sp, #12
	if (from_nrf) {
 8024088:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 802408c:	b933      	cbnz	r3, 802409c <nrf_driver_init+0x1c>
	if (from_nrf) {
 802408e:	7813      	ldrb	r3, [r2, #0]
 8024090:	2b00      	cmp	r3, #0
 8024092:	d02d      	beq.n	80240f0 <nrf_driver_init+0x70>
	if (!rfhelp_init()) {
 8024094:	f7ff fb4c 	bl	8023730 <rfhelp_init>
 8024098:	4604      	mov	r4, r0
 802409a:	b910      	cbnz	r0, 80240a2 <nrf_driver_init+0x22>
}
 802409c:	4620      	mov	r0, r4
 802409e:	b003      	add	sp, #12
 80240a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_stop = false;
 80240a2:	4e18      	ldr	r6, [pc, #96]	; (8024104 <nrf_driver_init+0x84>)
	nosend_cnt = 0;
 80240a4:	4b18      	ldr	r3, [pc, #96]	; (8024108 <nrf_driver_init+0x88>)
	nrf_restart_rx_time = 0;
 80240a6:	4a19      	ldr	r2, [pc, #100]	; (802410c <nrf_driver_init+0x8c>)
	nrf_restart_tx_time = 0;
 80240a8:	4919      	ldr	r1, [pc, #100]	; (8024110 <nrf_driver_init+0x90>)
	pairing_time_end = 0;
 80240aa:	481a      	ldr	r0, [pc, #104]	; (8024114 <nrf_driver_init+0x94>)
	pairing_active = false;
 80240ac:	4f1a      	ldr	r7, [pc, #104]	; (8024118 <nrf_driver_init+0x98>)
	nosend_cnt = 0;
 80240ae:	2500      	movs	r5, #0
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 80240b0:	9500      	str	r5, [sp, #0]
	rx_stop = false;
 80240b2:	7035      	strb	r5, [r6, #0]
	tx_stop = false;
 80240b4:	4e19      	ldr	r6, [pc, #100]	; (802411c <nrf_driver_init+0x9c>)
	nosend_cnt = 0;
 80240b6:	601d      	str	r5, [r3, #0]
	nrf_restart_rx_time = 0;
 80240b8:	6015      	str	r5, [r2, #0]
	nrf_restart_tx_time = 0;
 80240ba:	600d      	str	r5, [r1, #0]
	pairing_time_end = 0;
 80240bc:	6005      	str	r5, [r0, #0]
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 80240be:	4b18      	ldr	r3, [pc, #96]	; (8024120 <nrf_driver_init+0xa0>)
	pairing_active = false;
 80240c0:	703d      	strb	r5, [r7, #0]
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 80240c2:	223f      	movs	r2, #63	; 0x3f
 80240c4:	f640 1198 	movw	r1, #2456	; 0x998
	tx_stop = false;
 80240c8:	7035      	strb	r5, [r6, #0]
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 80240ca:	4816      	ldr	r0, [pc, #88]	; (8024124 <nrf_driver_init+0xa4>)
 80240cc:	f7e9 fc50 	bl	800d970 <chThdCreateStatic>
	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
 80240d0:	9500      	str	r5, [sp, #0]
 80240d2:	4b15      	ldr	r3, [pc, #84]	; (8024128 <nrf_driver_init+0xa8>)
 80240d4:	4815      	ldr	r0, [pc, #84]	; (802412c <nrf_driver_init+0xac>)
 80240d6:	223f      	movs	r2, #63	; 0x3f
 80240d8:	f44f 7166 	mov.w	r1, #920	; 0x398
 80240dc:	f7e9 fc48 	bl	800d970 <chThdCreateStatic>
	rx_running = true;
 80240e0:	4913      	ldr	r1, [pc, #76]	; (8024130 <nrf_driver_init+0xb0>)
	tx_running = true;
 80240e2:	4a14      	ldr	r2, [pc, #80]	; (8024134 <nrf_driver_init+0xb4>)
	rx_running = true;
 80240e4:	2301      	movs	r3, #1
}
 80240e6:	4620      	mov	r0, r4
	rx_running = true;
 80240e8:	700b      	strb	r3, [r1, #0]
	tx_running = true;
 80240ea:	7013      	strb	r3, [r2, #0]
}
 80240ec:	b003      	add	sp, #12
 80240ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80240f0:	f7ff ff9e 	bl	8024030 <nrf_driver_stop.part.0>
	if (!rfhelp_init()) {
 80240f4:	f7ff fb1c 	bl	8023730 <rfhelp_init>
 80240f8:	4604      	mov	r4, r0
 80240fa:	2800      	cmp	r0, #0
 80240fc:	d0ce      	beq.n	802409c <nrf_driver_init+0x1c>
 80240fe:	e7d0      	b.n	80240a2 <nrf_driver_init+0x22>
 8024100:	20011516 	.word	0x20011516
 8024104:	2000108c 	.word	0x2000108c
 8024108:	20011524 	.word	0x20011524
 802410c:	20011528 	.word	0x20011528
 8024110:	2001152c 	.word	0x2001152c
 8024114:	20011534 	.word	0x20011534
 8024118:	20011530 	.word	0x20011530
 802411c:	2000108d 	.word	0x2000108d
 8024120:	08023d41 	.word	0x08023d41
 8024124:	20011940 	.word	0x20011940
 8024128:	08023af1 	.word	0x08023af1
 802412c:	200122e0 	.word	0x200122e0
 8024130:	20011938 	.word	0x20011938
 8024134:	200122d8 	.word	0x200122d8
	...

08024140 <nrf_driver_stop>:
	if (from_nrf) {
 8024140:	4b02      	ldr	r3, [pc, #8]	; (802414c <nrf_driver_stop+0xc>)
 8024142:	781b      	ldrb	r3, [r3, #0]
 8024144:	b90b      	cbnz	r3, 802414a <nrf_driver_stop+0xa>
 8024146:	f7ff bf73 	b.w	8024030 <nrf_driver_stop.part.0>
 802414a:	4770      	bx	lr
 802414c:	20011516 	.word	0x20011516

08024150 <nrf_driver_start_pairing>:
	if (!rx_running) {
 8024150:	4b1f      	ldr	r3, [pc, #124]	; (80241d0 <nrf_driver_start_pairing+0x80>)
 8024152:	781b      	ldrb	r3, [r3, #0]
 8024154:	2b00      	cmp	r3, #0
 8024156:	d039      	beq.n	80241cc <nrf_driver_start_pairing+0x7c>
void nrf_driver_start_pairing(int ms) {
 8024158:	b570      	push	{r4, r5, r6, lr}
	pairing_time_end = chVTGetSystemTimeX() + MS2ST(ms);
 802415a:	f242 7310 	movw	r3, #10000	; 0x2710
 802415e:	4a1d      	ldr	r2, [pc, #116]	; (80241d4 <nrf_driver_start_pairing+0x84>)
 8024160:	4e1d      	ldr	r6, [pc, #116]	; (80241d8 <nrf_driver_start_pairing+0x88>)
	if (!pairing_active) {
 8024162:	491e      	ldr	r1, [pc, #120]	; (80241dc <nrf_driver_start_pairing+0x8c>)
 8024164:	6a92      	ldr	r2, [r2, #40]	; 0x28
	pairing_time_end = chVTGetSystemTimeX() + MS2ST(ms);
 8024166:	4d1e      	ldr	r5, [pc, #120]	; (80241e0 <nrf_driver_start_pairing+0x90>)
	if (!pairing_active) {
 8024168:	780c      	ldrb	r4, [r1, #0]
	pairing_time_end = chVTGetSystemTimeX() + MS2ST(ms);
 802416a:	fb03 f000 	mul.w	r0, r3, r0
 802416e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 8024172:	fba6 3000 	umull	r3, r0, r6, r0
 8024176:	eb02 1090 	add.w	r0, r2, r0, lsr #6
void nrf_driver_start_pairing(int ms) {
 802417a:	b084      	sub	sp, #16
	pairing_time_end = chVTGetSystemTimeX() + MS2ST(ms);
 802417c:	6028      	str	r0, [r5, #0]
	if (!pairing_active) {
 802417e:	b10c      	cbz	r4, 8024184 <nrf_driver_start_pairing+0x34>
}
 8024180:	b004      	add	sp, #16
 8024182:	bd70      	pop	{r4, r5, r6, pc}
		pairing_active = true;
 8024184:	2501      	movs	r5, #1
 8024186:	700d      	strb	r5, [r1, #0]
		nrf_config conf = app_get_configuration()->app_nrf_conf;
 8024188:	f7fc fb0a 	bl	80207a0 <app_get_configuration>
 802418c:	30bc      	adds	r0, #188	; 0xbc
 802418e:	c807      	ldmia	r0, {r0, r1, r2}
		conf.speed = NRF_SPEED_250K;
 8024190:	aa04      	add	r2, sp, #16
		nrf_config conf = app_get_configuration()->app_nrf_conf;
 8024192:	ab01      	add	r3, sp, #4
 8024194:	c303      	stmia	r3!, {r0, r1}
		conf.speed = NRF_SPEED_250K;
 8024196:	f802 4d0c 	strb.w	r4, [r2, #-12]!
		conf.retries = 3;
 802419a:	2303      	movs	r3, #3
		rfhelp_update_conf(&conf);
 802419c:	4610      	mov	r0, r2
		conf.address[1] = 0xC5;
 802419e:	21c5      	movs	r1, #197	; 0xc5
		conf.channel = 124;
 80241a0:	227c      	movs	r2, #124	; 0x7c
		conf.address[0] = 0xC6;
 80241a2:	26c6      	movs	r6, #198	; 0xc6
		conf.send_crc_ack = true;
 80241a4:	f88d 500d 	strb.w	r5, [sp, #13]
		conf.address[2] = 0x0;
 80241a8:	f88d 400c 	strb.w	r4, [sp, #12]
		conf.crc_type = NRF_CRC_1B;
 80241ac:	f88d 5006 	strb.w	r5, [sp, #6]
		conf.address[0] = 0xC6;
 80241b0:	f88d 600a 	strb.w	r6, [sp, #10]
		conf.address[1] = 0xC5;
 80241b4:	f88d 100b 	strb.w	r1, [sp, #11]
		conf.channel = 124;
 80241b8:	f88d 2009 	strb.w	r2, [sp, #9]
		conf.retries = 3;
 80241bc:	f88d 3008 	strb.w	r3, [sp, #8]
		conf.retry_delay = NRF_RETR_DELAY_1000US;
 80241c0:	f88d 3007 	strb.w	r3, [sp, #7]
		rfhelp_update_conf(&conf);
 80241c4:	f7ff fb8c 	bl	80238e0 <rfhelp_update_conf>
}
 80241c8:	b004      	add	sp, #16
 80241ca:	bd70      	pop	{r4, r5, r6, pc}
 80241cc:	4770      	bx	lr
 80241ce:	bf00      	nop
 80241d0:	20011938 	.word	0x20011938
 80241d4:	20001a40 	.word	0x20001a40
 80241d8:	10624dd3 	.word	0x10624dd3
 80241dc:	20011530 	.word	0x20011530
 80241e0:	20011534 	.word	0x20011534
	...

080241f0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80241f0:	b508      	push	{r3, lr}
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80241f2:	2101      	movs	r1, #1
 80241f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80241f8:	f000 fb92 	bl	8024920 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80241fc:	2100      	movs	r1, #0
 80241fe:	f44f 7080 	mov.w	r0, #256	; 0x100
}
 8024202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8024206:	f000 bb8b 	b.w	8024920 <RCC_APB2PeriphResetCmd>
 802420a:	bf00      	nop
 802420c:	0000      	movs	r0, r0
	...

08024210 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8024210:	6842      	ldr	r2, [r0, #4]
 8024212:	690b      	ldr	r3, [r1, #16]
{
 8024214:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8024216:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 802421a:	f891 e004 	ldrb.w	lr, [r1, #4]
 802421e:	680e      	ldr	r6, [r1, #0]
 8024220:	68cf      	ldr	r7, [r1, #12]
 8024222:	688c      	ldr	r4, [r1, #8]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8024224:	4d0c      	ldr	r5, [pc, #48]	; (8024258 <ADC_Init+0x48>)
  tmpreg1 &= CR1_CLEAR_MASK;
 8024226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802422a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 802422e:	4332      	orrs	r2, r6
  ADCx->CR1 = tmpreg1;
 8024230:	6042      	str	r2, [r0, #4]
  tmpreg1 = ADCx->CR2;
 8024232:	6886      	ldr	r6, [r0, #8]
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8024234:	794a      	ldrb	r2, [r1, #5]
 8024236:	433b      	orrs	r3, r7
  tmpreg1 &= CR2_CLEAR_MASK;
 8024238:	4035      	ands	r5, r6
 802423a:	4323      	orrs	r3, r4
 802423c:	432b      	orrs	r3, r5
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 802423e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8024242:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8024244:	7d0a      	ldrb	r2, [r1, #20]
  tmpreg1 = ADCx->SQR1;
 8024246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8024248:	3a01      	subs	r2, #1
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 802424a:	b2d2      	uxtb	r2, r2
  tmpreg1 &= SQR1_L_RESET;
 802424c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8024250:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8024254:	62c3      	str	r3, [r0, #44]	; 0x2c
 8024256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024258:	c0fff7fd 	.word	0xc0fff7fd
 802425c:	00000000 	.word	0x00000000

08024260 <ADC_CommonInit>:
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8024260:	4907      	ldr	r1, [pc, #28]	; (8024280 <ADC_CommonInit+0x20>)
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8024262:	4a08      	ldr	r2, [pc, #32]	; (8024284 <ADC_CommonInit+0x24>)
{
 8024264:	b470      	push	{r4, r5, r6}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8024266:	e890 0048 	ldmia.w	r0, {r3, r6}
  tmpreg1 = ADC->CCR;
 802426a:	684d      	ldr	r5, [r1, #4]
 802426c:	6884      	ldr	r4, [r0, #8]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 802426e:	68c0      	ldr	r0, [r0, #12]
 8024270:	4333      	orrs	r3, r6
  tmpreg1 &= CR_CLEAR_MASK;
 8024272:	402a      	ands	r2, r5
 8024274:	4313      	orrs	r3, r2
 8024276:	4323      	orrs	r3, r4
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8024278:	4303      	orrs	r3, r0
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 802427a:	604b      	str	r3, [r1, #4]
}
 802427c:	bc70      	pop	{r4, r5, r6}
 802427e:	4770      	bx	lr
 8024280:	40012300 	.word	0x40012300
 8024284:	fffc30e0 	.word	0xfffc30e0
	...

08024290 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8024290:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8024292:	b919      	cbnz	r1, 802429c <ADC_Cmd+0xc>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8024294:	f023 0301 	bic.w	r3, r3, #1
 8024298:	6083      	str	r3, [r0, #8]
 802429a:	4770      	bx	lr
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 802429c:	f043 0301 	orr.w	r3, r3, #1
 80242a0:	6083      	str	r3, [r0, #8]
 80242a2:	4770      	bx	lr
	...

080242b0 <ADC_TempSensorVrefintCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80242b0:	4a05      	ldr	r2, [pc, #20]	; (80242c8 <ADC_TempSensorVrefintCmd+0x18>)
 80242b2:	6853      	ldr	r3, [r2, #4]
  if (NewState != DISABLE)
 80242b4:	b918      	cbnz	r0, 80242be <ADC_TempSensorVrefintCmd+0xe>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80242b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80242ba:	6053      	str	r3, [r2, #4]
 80242bc:	4770      	bx	lr
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80242be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80242c2:	6053      	str	r3, [r2, #4]
 80242c4:	4770      	bx	lr
 80242c6:	bf00      	nop
 80242c8:	40012300 	.word	0x40012300
 80242cc:	00000000 	.word	0x00000000

080242d0 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80242d0:	2909      	cmp	r1, #9
{
 80242d2:	b470      	push	{r4, r5, r6}
  if (ADC_Channel > ADC_Channel_9)
 80242d4:	d91c      	bls.n	8024310 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80242d6:	f1a1 040a 	sub.w	r4, r1, #10
 80242da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    tmpreg1 = ADCx->SMPR1;
 80242de:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80242e0:	2607      	movs	r6, #7
 80242e2:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80242e4:	40a3      	lsls	r3, r4
    tmpreg1 &= ~tmpreg2;
 80242e6:	ea25 0406 	bic.w	r4, r5, r6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80242ea:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80242ec:	2a06      	cmp	r2, #6
    ADCx->SMPR1 = tmpreg1;
 80242ee:	60c3      	str	r3, [r0, #12]
  if (Rank < 7)
 80242f0:	d91a      	bls.n	8024328 <ADC_RegularChannelConfig+0x58>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80242f2:	2a0c      	cmp	r2, #12
 80242f4:	d925      	bls.n	8024342 <ADC_RegularChannelConfig+0x72>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80242f6:	3a0d      	subs	r2, #13
 80242f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR1;
 80242fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80242fe:	241f      	movs	r4, #31
 8024300:	4094      	lsls	r4, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8024302:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8024304:	ea23 0204 	bic.w	r2, r3, r4
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8024308:	4311      	orrs	r1, r2
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 802430a:	62c1      	str	r1, [r0, #44]	; 0x2c
  }
}
 802430c:	bc70      	pop	{r4, r5, r6}
 802430e:	4770      	bx	lr
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8024310:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    tmpreg1 = ADCx->SMPR2;
 8024314:	6904      	ldr	r4, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8024316:	2507      	movs	r5, #7
 8024318:	40b5      	lsls	r5, r6
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 802431a:	40b3      	lsls	r3, r6
    tmpreg1 &= ~tmpreg2;
 802431c:	ea24 0405 	bic.w	r4, r4, r5
    tmpreg1 |= tmpreg2;
 8024320:	4323      	orrs	r3, r4
  if (Rank < 7)
 8024322:	2a06      	cmp	r2, #6
    ADCx->SMPR2 = tmpreg1;
 8024324:	6103      	str	r3, [r0, #16]
  if (Rank < 7)
 8024326:	d8e4      	bhi.n	80242f2 <ADC_RegularChannelConfig+0x22>
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8024328:	3a01      	subs	r2, #1
 802432a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR3;
 802432e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8024330:	241f      	movs	r4, #31
 8024332:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8024334:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8024336:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 802433a:	4311      	orrs	r1, r2
    ADCx->SQR3 = tmpreg1;
 802433c:	6341      	str	r1, [r0, #52]	; 0x34
}
 802433e:	bc70      	pop	{r4, r5, r6}
 8024340:	4770      	bx	lr
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8024342:	3a07      	subs	r2, #7
 8024344:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR2;
 8024348:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 802434a:	241f      	movs	r4, #31
 802434c:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 802434e:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8024350:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 8024354:	4311      	orrs	r1, r2
    ADCx->SQR2 = tmpreg1;
 8024356:	6301      	str	r1, [r0, #48]	; 0x30
}
 8024358:	bc70      	pop	{r4, r5, r6}
 802435a:	4770      	bx	lr
 802435c:	0000      	movs	r0, r0
	...

08024360 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8024360:	4a05      	ldr	r2, [pc, #20]	; (8024378 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 8024362:	6853      	ldr	r3, [r2, #4]
  if (NewState != DISABLE)
 8024364:	b918      	cbnz	r0, 802436e <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8024366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802436a:	6053      	str	r3, [r2, #4]
 802436c:	4770      	bx	lr
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 802436e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024372:	6053      	str	r3, [r2, #4]
 8024374:	4770      	bx	lr
 8024376:	bf00      	nop
 8024378:	40012300 	.word	0x40012300
 802437c:	00000000 	.word	0x00000000

08024380 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8024380:	2909      	cmp	r1, #9
{
 8024382:	b470      	push	{r4, r5, r6}
  if (ADC_Channel > ADC_Channel_9)
 8024384:	d81a      	bhi.n	80243bc <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8024386:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    tmpreg1 = ADCx->SMPR2;
 802438a:	6904      	ldr	r4, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 802438c:	2507      	movs	r5, #7
 802438e:	40b5      	lsls	r5, r6
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8024390:	40b3      	lsls	r3, r6
    tmpreg1 &= ~tmpreg2;
 8024392:	ea24 0405 	bic.w	r4, r4, r5
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8024396:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8024398:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 802439a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 802439c:	3202      	adds	r2, #2
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 802439e:	f3c3 5401 	ubfx	r4, r3, #20, #2
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80243a2:	1b12      	subs	r2, r2, r4
 80243a4:	b2d2      	uxtb	r2, r2
 80243a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80243aa:	241f      	movs	r4, #31
 80243ac:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80243ae:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80243b2:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80243b4:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80243b6:	6381      	str	r1, [r0, #56]	; 0x38
}
 80243b8:	bc70      	pop	{r4, r5, r6}
 80243ba:	4770      	bx	lr
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80243bc:	f1a1 040a 	sub.w	r4, r1, #10
 80243c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    tmpreg1 = ADCx->SMPR1;
 80243c4:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80243c6:	2607      	movs	r6, #7
 80243c8:	40a6      	lsls	r6, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80243ca:	40a3      	lsls	r3, r4
    tmpreg1 &= ~tmpreg2;
 80243cc:	ea25 0406 	bic.w	r4, r5, r6
    tmpreg1 |= tmpreg2;
 80243d0:	4323      	orrs	r3, r4
    ADCx->SMPR1 = tmpreg1;
 80243d2:	60c3      	str	r3, [r0, #12]
 80243d4:	e7e1      	b.n	802439a <ADC_InjectedChannelConfig+0x1a>
 80243d6:	bf00      	nop
	...

080243e0 <ADC_InjectedSequencerLengthConfig>:
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 80243e0:	1e4b      	subs	r3, r1, #1
  tmpreg1 = ADCx->JSQR;
 80243e2:	6b81      	ldr	r1, [r0, #56]	; 0x38
  tmpreg1 &= JSQR_JL_RESET;
 80243e4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
  tmpreg1 |= tmpreg2 << 20;
 80243e8:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80243ec:	6381      	str	r1, [r0, #56]	; 0x38
 80243ee:	4770      	bx	lr

080243f0 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80243f0:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 80243f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80243f6:	4319      	orrs	r1, r3
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80243f8:	6081      	str	r1, [r0, #8]
 80243fa:	4770      	bx	lr
 80243fc:	0000      	movs	r0, r0
	...

08024400 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8024400:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8024402:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8024406:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8024408:	6081      	str	r1, [r0, #8]
 802440a:	4770      	bx	lr
 802440c:	0000      	movs	r0, r0
	...

08024410 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8024410:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8024412:	2300      	movs	r3, #0
 8024414:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8024416:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8024418:	9b01      	ldr	r3, [sp, #4]
 802441a:	3328      	adds	r3, #40	; 0x28
 802441c:	4419      	add	r1, r3
 802441e:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8024420:	9b01      	ldr	r3, [sp, #4]
 8024422:	6818      	ldr	r0, [r3, #0]
}
 8024424:	b280      	uxth	r0, r0
 8024426:	b002      	add	sp, #8
 8024428:	4770      	bx	lr
 802442a:	bf00      	nop
 802442c:	0000      	movs	r0, r0
	...

08024430 <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8024430:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 8024432:	2301      	movs	r3, #1
 8024434:	408b      	lsls	r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8024436:	6841      	ldr	r1, [r0, #4]
  if (NewState != DISABLE)
 8024438:	b91a      	cbnz	r2, 8024442 <ADC_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 802443a:	ea21 0303 	bic.w	r3, r1, r3
 802443e:	6043      	str	r3, [r0, #4]
 8024440:	4770      	bx	lr
    ADCx->CR1 |= itmask;
 8024442:	430b      	orrs	r3, r1
 8024444:	6043      	str	r3, [r0, #4]
 8024446:	4770      	bx	lr
	...

08024450 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8024450:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024454:	6001      	str	r1, [r0, #0]
 8024456:	4770      	bx	lr
	...

08024460 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8024460:	6802      	ldr	r2, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8024462:	4937      	ldr	r1, [pc, #220]	; (8024540 <DMA_DeInit+0xe0>)
  DMAy_Streamx->CR  = 0;
 8024464:	2300      	movs	r3, #0
{
 8024466:	b410      	push	{r4}
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8024468:	f022 0201 	bic.w	r2, r2, #1
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 802446c:	2421      	movs	r4, #33	; 0x21
  if (DMAy_Streamx == DMA1_Stream0)
 802446e:	4288      	cmp	r0, r1
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8024470:	6002      	str	r2, [r0, #0]
  DMAy_Streamx->CR  = 0;
 8024472:	6003      	str	r3, [r0, #0]
  DMAy_Streamx->NDTR = 0;
 8024474:	6043      	str	r3, [r0, #4]
  DMAy_Streamx->PAR  = 0;
 8024476:	6083      	str	r3, [r0, #8]
  DMAy_Streamx->M0AR = 0;
 8024478:	60c3      	str	r3, [r0, #12]
  DMAy_Streamx->M1AR = 0;
 802447a:	6103      	str	r3, [r0, #16]
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 802447c:	6144      	str	r4, [r0, #20]
  if (DMAy_Streamx == DMA1_Stream0)
 802447e:	d04d      	beq.n	802451c <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8024480:	4b30      	ldr	r3, [pc, #192]	; (8024544 <DMA_DeInit+0xe4>)
 8024482:	4298      	cmp	r0, r3
 8024484:	d035      	beq.n	80244f2 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8024486:	4b30      	ldr	r3, [pc, #192]	; (8024548 <DMA_DeInit+0xe8>)
 8024488:	4298      	cmp	r0, r3
 802448a:	d039      	beq.n	8024500 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 802448c:	4b2f      	ldr	r3, [pc, #188]	; (802454c <DMA_DeInit+0xec>)
 802448e:	4298      	cmp	r0, r3
 8024490:	d03d      	beq.n	802450e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8024492:	4b2f      	ldr	r3, [pc, #188]	; (8024550 <DMA_DeInit+0xf0>)
 8024494:	4298      	cmp	r0, r3
 8024496:	d047      	beq.n	8024528 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8024498:	4b2e      	ldr	r3, [pc, #184]	; (8024554 <DMA_DeInit+0xf4>)
 802449a:	4298      	cmp	r0, r3
 802449c:	d048      	beq.n	8024530 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 802449e:	4b2e      	ldr	r3, [pc, #184]	; (8024558 <DMA_DeInit+0xf8>)
 80244a0:	4298      	cmp	r0, r3
 80244a2:	d01d      	beq.n	80244e0 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80244a4:	4b2d      	ldr	r3, [pc, #180]	; (802455c <DMA_DeInit+0xfc>)
 80244a6:	4298      	cmp	r0, r3
 80244a8:	d01e      	beq.n	80244e8 <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80244aa:	4b2d      	ldr	r3, [pc, #180]	; (8024560 <DMA_DeInit+0x100>)
 80244ac:	4298      	cmp	r0, r3
 80244ae:	d043      	beq.n	8024538 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80244b0:	4b2c      	ldr	r3, [pc, #176]	; (8024564 <DMA_DeInit+0x104>)
 80244b2:	4298      	cmp	r0, r3
 80244b4:	d01d      	beq.n	80244f2 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80244b6:	4b2c      	ldr	r3, [pc, #176]	; (8024568 <DMA_DeInit+0x108>)
 80244b8:	4298      	cmp	r0, r3
 80244ba:	d021      	beq.n	8024500 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80244bc:	4b2b      	ldr	r3, [pc, #172]	; (802456c <DMA_DeInit+0x10c>)
 80244be:	4298      	cmp	r0, r3
 80244c0:	d025      	beq.n	802450e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80244c2:	4b2b      	ldr	r3, [pc, #172]	; (8024570 <DMA_DeInit+0x110>)
 80244c4:	4298      	cmp	r0, r3
 80244c6:	d02f      	beq.n	8024528 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80244c8:	4b2a      	ldr	r3, [pc, #168]	; (8024574 <DMA_DeInit+0x114>)
 80244ca:	4298      	cmp	r0, r3
 80244cc:	d030      	beq.n	8024530 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80244ce:	4b2a      	ldr	r3, [pc, #168]	; (8024578 <DMA_DeInit+0x118>)
 80244d0:	4298      	cmp	r0, r3
 80244d2:	d005      	beq.n	80244e0 <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80244d4:	4b29      	ldr	r3, [pc, #164]	; (802457c <DMA_DeInit+0x11c>)
 80244d6:	4298      	cmp	r0, r3
 80244d8:	d006      	beq.n	80244e8 <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80244da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80244de:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80244e0:	4a27      	ldr	r2, [pc, #156]	; (8024580 <DMA_DeInit+0x120>)
 80244e2:	f843 2c94 	str.w	r2, [r3, #-148]
 80244e6:	e7f8      	b.n	80244da <DMA_DeInit+0x7a>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80244e8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80244ec:	f843 2cac 	str.w	r2, [r3, #-172]
}
 80244f0:	e7f3      	b.n	80244da <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80244f2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80244f6:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80244fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80244fe:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8024500:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8024504:	f843 2c38 	str.w	r2, [r3, #-56]
}
 8024508:	f85d 4b04 	ldr.w	r4, [sp], #4
 802450c:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 802450e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8024512:	f843 2c50 	str.w	r2, [r3, #-80]
}
 8024516:	f85d 4b04 	ldr.w	r4, [sp], #4
 802451a:	4770      	bx	lr
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 802451c:	4b19      	ldr	r3, [pc, #100]	; (8024584 <DMA_DeInit+0x124>)
}
 802451e:	f85d 4b04 	ldr.w	r4, [sp], #4
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8024522:	223d      	movs	r2, #61	; 0x3d
 8024524:	609a      	str	r2, [r3, #8]
}
 8024526:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8024528:	4a17      	ldr	r2, [pc, #92]	; (8024588 <DMA_DeInit+0x128>)
 802452a:	f843 2c64 	str.w	r2, [r3, #-100]
 802452e:	e7d4      	b.n	80244da <DMA_DeInit+0x7a>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8024530:	4a16      	ldr	r2, [pc, #88]	; (802458c <DMA_DeInit+0x12c>)
 8024532:	f843 2c7c 	str.w	r2, [r3, #-124]
 8024536:	e7d0      	b.n	80244da <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8024538:	223d      	movs	r2, #61	; 0x3d
 802453a:	f843 2c08 	str.w	r2, [r3, #-8]
 802453e:	e7cc      	b.n	80244da <DMA_DeInit+0x7a>
 8024540:	40026010 	.word	0x40026010
 8024544:	40026028 	.word	0x40026028
 8024548:	40026040 	.word	0x40026040
 802454c:	40026058 	.word	0x40026058
 8024550:	40026070 	.word	0x40026070
 8024554:	40026088 	.word	0x40026088
 8024558:	400260a0 	.word	0x400260a0
 802455c:	400260b8 	.word	0x400260b8
 8024560:	40026410 	.word	0x40026410
 8024564:	40026428 	.word	0x40026428
 8024568:	40026440 	.word	0x40026440
 802456c:	40026458 	.word	0x40026458
 8024570:	40026470 	.word	0x40026470
 8024574:	40026488 	.word	0x40026488
 8024578:	400264a0 	.word	0x400264a0
 802457c:	400264b8 	.word	0x400264b8
 8024580:	203d0000 	.word	0x203d0000
 8024584:	40026000 	.word	0x40026000
 8024588:	2000003d 	.word	0x2000003d
 802458c:	20000f40 	.word	0x20000f40

08024590 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8024590:	680b      	ldr	r3, [r1, #0]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8024592:	69ca      	ldr	r2, [r1, #28]
{
 8024594:	b4f0      	push	{r4, r5, r6, r7}
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8024596:	68ce      	ldr	r6, [r1, #12]
 8024598:	694d      	ldr	r5, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 802459a:	698c      	ldr	r4, [r1, #24]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 802459c:	6a0f      	ldr	r7, [r1, #32]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 802459e:	4333      	orrs	r3, r6
 80245a0:	432b      	orrs	r3, r5
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80245a2:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80245a4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80245a6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80245a8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80245aa:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80245ac:	433b      	orrs	r3, r7
 80245ae:	4333      	orrs	r3, r6
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80245b0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmpreg = DMAy_Streamx->CR;
 80245b2:	6807      	ldr	r7, [r0, #0]
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80245b4:	4e0b      	ldr	r6, [pc, #44]	; (80245e4 <DMA_Init+0x54>)
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80245b6:	432b      	orrs	r3, r5
 80245b8:	4323      	orrs	r3, r4
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80245ba:	403e      	ands	r6, r7
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80245bc:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80245be:	4333      	orrs	r3, r6
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80245c0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  DMAy_Streamx->CR = tmpreg;
 80245c2:	6003      	str	r3, [r0, #0]
  tmpreg = DMAy_Streamx->FCR;
 80245c4:	6942      	ldr	r2, [r0, #20]
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80245c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80245c8:	690e      	ldr	r6, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80245ca:	684c      	ldr	r4, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80245cc:	6889      	ldr	r1, [r1, #8]
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80245ce:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80245d0:	f022 0207 	bic.w	r2, r2, #7
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80245d4:	4313      	orrs	r3, r2
  DMAy_Streamx->FCR = tmpreg;
 80245d6:	6143      	str	r3, [r0, #20]
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80245d8:	6046      	str	r6, [r0, #4]
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80245da:	6084      	str	r4, [r0, #8]
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80245dc:	60c1      	str	r1, [r0, #12]
}
 80245de:	bcf0      	pop	{r4, r5, r6, r7}
 80245e0:	4770      	bx	lr
 80245e2:	bf00      	nop
 80245e4:	f01c803f 	.word	0xf01c803f
	...

080245f0 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80245f0:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 80245f2:	b919      	cbnz	r1, 80245fc <DMA_Cmd+0xc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80245f4:	f023 0301 	bic.w	r3, r3, #1
 80245f8:	6003      	str	r3, [r0, #0]
 80245fa:	4770      	bx	lr
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80245fc:	f043 0301 	orr.w	r3, r3, #1
 8024600:	6003      	str	r3, [r0, #0]
 8024602:	4770      	bx	lr
	...

08024610 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8024610:	060b      	lsls	r3, r1, #24
 8024612:	d50c      	bpl.n	802462e <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8024614:	6943      	ldr	r3, [r0, #20]
    if (NewState != DISABLE)
 8024616:	b1aa      	cbz	r2, 8024644 <DMA_ITConfig+0x34>
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8024618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 802461c:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 802461e:	6143      	str	r3, [r0, #20]
  if (DMA_IT != DMA_IT_FE)
 8024620:	d00f      	beq.n	8024642 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8024622:	6803      	ldr	r3, [r0, #0]
 8024624:	f001 011e 	and.w	r1, r1, #30
 8024628:	4319      	orrs	r1, r3
 802462a:	6001      	str	r1, [r0, #0]
 802462c:	4770      	bx	lr
  if (DMA_IT != DMA_IT_FE)
 802462e:	2980      	cmp	r1, #128	; 0x80
 8024630:	d007      	beq.n	8024642 <DMA_ITConfig+0x32>
    if (NewState != DISABLE)
 8024632:	2a00      	cmp	r2, #0
 8024634:	d1f5      	bne.n	8024622 <DMA_ITConfig+0x12>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8024636:	6803      	ldr	r3, [r0, #0]
 8024638:	f001 011e 	and.w	r1, r1, #30
 802463c:	ea23 0101 	bic.w	r1, r3, r1
 8024640:	6001      	str	r1, [r0, #0]
 8024642:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8024644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  if (DMA_IT != DMA_IT_FE)
 8024648:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 802464a:	6143      	str	r3, [r0, #20]
  if (DMA_IT != DMA_IT_FE)
 802464c:	d1f3      	bne.n	8024636 <DMA_ITConfig+0x26>
 802464e:	4770      	bx	lr

08024650 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8024650:	7983      	ldrb	r3, [r0, #6]
 8024652:	b333      	cbz	r3, 80246a2 <EXTI_Init+0x52>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8024654:	4b1c      	ldr	r3, [pc, #112]	; (80246c8 <EXTI_Init+0x78>)
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8024656:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8024658:	7941      	ldrb	r1, [r0, #5]
{
 802465a:	b470      	push	{r4, r5, r6}
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 802465c:	6804      	ldr	r4, [r0, #0]
 802465e:	681e      	ldr	r6, [r3, #0]
 8024660:	43e5      	mvns	r5, r4
 8024662:	402e      	ands	r6, r5
 8024664:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8024666:	685e      	ldr	r6, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8024668:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802466c:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8024670:	4035      	ands	r5, r6
 8024672:	605d      	str	r5, [r3, #4]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8024674:	6815      	ldr	r5, [r2, #0]
 8024676:	432c      	orrs	r4, r5
 8024678:	6014      	str	r4, [r2, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 802467a:	6802      	ldr	r2, [r0, #0]
 802467c:	689c      	ldr	r4, [r3, #8]
 802467e:	43d0      	mvns	r0, r2
 8024680:	4004      	ands	r4, r0
 8024682:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8024684:	68dc      	ldr	r4, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8024686:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8024688:	ea00 0004 	and.w	r0, r0, r4
 802468c:	60d8      	str	r0, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 802468e:	d013      	beq.n	80246b8 <EXTI_Init+0x68>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8024690:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8024694:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8024698:	bc70      	pop	{r4, r5, r6}
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 802469a:	6819      	ldr	r1, [r3, #0]
 802469c:	430a      	orrs	r2, r1
 802469e:	601a      	str	r2, [r3, #0]
}
 80246a0:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 80246a2:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80246a4:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80246a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80246aa:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80246ae:	681a      	ldr	r2, [r3, #0]
 80246b0:	ea22 0201 	bic.w	r2, r2, r1
 80246b4:	601a      	str	r2, [r3, #0]
}
 80246b6:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80246b8:	6899      	ldr	r1, [r3, #8]
 80246ba:	4311      	orrs	r1, r2
 80246bc:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80246be:	68d9      	ldr	r1, [r3, #12]
 80246c0:	430a      	orrs	r2, r1
 80246c2:	60da      	str	r2, [r3, #12]
}
 80246c4:	bc70      	pop	{r4, r5, r6}
 80246c6:	4770      	bx	lr
 80246c8:	40013c00 	.word	0x40013c00
 80246cc:	00000000 	.word	0x00000000

080246d0 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80246d0:	4b03      	ldr	r3, [pc, #12]	; (80246e0 <EXTI_GetITStatus+0x10>)
 80246d2:	695b      	ldr	r3, [r3, #20]
 80246d4:	4203      	tst	r3, r0
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 80246d6:	bf14      	ite	ne
 80246d8:	2001      	movne	r0, #1
 80246da:	2000      	moveq	r0, #0
 80246dc:	4770      	bx	lr
 80246de:	bf00      	nop
 80246e0:	40013c00 	.word	0x40013c00
	...

080246f0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80246f0:	4b01      	ldr	r3, [pc, #4]	; (80246f8 <EXTI_ClearITPendingBit+0x8>)
 80246f2:	6158      	str	r0, [r3, #20]
 80246f4:	4770      	bx	lr
 80246f6:	bf00      	nop
 80246f8:	40013c00 	.word	0x40013c00
 80246fc:	00000000 	.word	0x00000000

08024700 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8024700:	4b04      	ldr	r3, [pc, #16]	; (8024714 <FLASH_Unlock+0x14>)
 8024702:	691a      	ldr	r2, [r3, #16]
 8024704:	2a00      	cmp	r2, #0
 8024706:	da03      	bge.n	8024710 <FLASH_Unlock+0x10>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8024708:	4903      	ldr	r1, [pc, #12]	; (8024718 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_KEY2;
 802470a:	4a04      	ldr	r2, [pc, #16]	; (802471c <FLASH_Unlock+0x1c>)
    FLASH->KEYR = FLASH_KEY1;
 802470c:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 802470e:	605a      	str	r2, [r3, #4]
 8024710:	4770      	bx	lr
 8024712:	bf00      	nop
 8024714:	40023c00 	.word	0x40023c00
 8024718:	45670123 	.word	0x45670123
 802471c:	cdef89ab 	.word	0xcdef89ab

08024720 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8024720:	4b01      	ldr	r3, [pc, #4]	; (8024728 <FLASH_ClearFlag+0x8>)
 8024722:	60d8      	str	r0, [r3, #12]
 8024724:	4770      	bx	lr
 8024726:	bf00      	nop
 8024728:	40023c00 	.word	0x40023c00
 802472c:	00000000 	.word	0x00000000

08024730 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8024730:	4b0e      	ldr	r3, [pc, #56]	; (802476c <FLASH_GetStatus+0x3c>)
 8024732:	68da      	ldr	r2, [r3, #12]
 8024734:	03d2      	lsls	r2, r2, #15
 8024736:	d409      	bmi.n	802474c <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8024738:	68da      	ldr	r2, [r3, #12]
 802473a:	06d1      	lsls	r1, r2, #27
 802473c:	d501      	bpl.n	8024742 <FLASH_GetStatus+0x12>
    { 
      flashstatus = FLASH_ERROR_WRP;
 802473e:	2006      	movs	r0, #6
 8024740:	4770      	bx	lr
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8024742:	68da      	ldr	r2, [r3, #12]
 8024744:	05d2      	lsls	r2, r2, #23
 8024746:	d503      	bpl.n	8024750 <FLASH_GetStatus+0x20>
      { 
        flashstatus = FLASH_ERROR_RD;
 8024748:	2002      	movs	r0, #2
 802474a:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 802474c:	2001      	movs	r0, #1
 802474e:	4770      	bx	lr
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8024750:	68da      	ldr	r2, [r3, #12]
 8024752:	f012 0fe0 	tst.w	r2, #224	; 0xe0
 8024756:	d001      	beq.n	802475c <FLASH_GetStatus+0x2c>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8024758:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 802475a:	4770      	bx	lr
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 802475c:	68db      	ldr	r3, [r3, #12]
 802475e:	f013 0f02 	tst.w	r3, #2
            flashstatus = FLASH_COMPLETE;
 8024762:	bf14      	ite	ne
 8024764:	2008      	movne	r0, #8
 8024766:	2009      	moveq	r0, #9
 8024768:	4770      	bx	lr
 802476a:	bf00      	nop
 802476c:	40023c00 	.word	0x40023c00

08024770 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8024770:	b500      	push	{lr}
 8024772:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 8024774:	2309      	movs	r3, #9
 8024776:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 802477a:	f7ff ffd9 	bl	8024730 <FLASH_GetStatus>
 802477e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8024782:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8024786:	2b01      	cmp	r3, #1
 8024788:	d0f7      	beq.n	802477a <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 802478a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 802478e:	b2c0      	uxtb	r0, r0
}
 8024790:	b003      	add	sp, #12
 8024792:	f85d fb04 	ldr.w	pc, [sp], #4
 8024796:	bf00      	nop
	...

080247a0 <FLASH_EraseSector>:
{
 80247a0:	b570      	push	{r4, r5, r6, lr}
 80247a2:	4606      	mov	r6, r0
  if(VoltageRange == VoltageRange_1)
 80247a4:	b359      	cbz	r1, 80247fe <FLASH_EraseSector+0x5e>
  else if(VoltageRange == VoltageRange_2)
 80247a6:	2901      	cmp	r1, #1
 80247a8:	d02f      	beq.n	802480a <FLASH_EraseSector+0x6a>
  else if(VoltageRange == VoltageRange_3)
 80247aa:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80247ac:	bf0c      	ite	eq
 80247ae:	f44f 7400 	moveq.w	r4, #512	; 0x200
 80247b2:	f44f 7440 	movne.w	r4, #768	; 0x300
  status = FLASH_WaitForLastOperation();
 80247b6:	f7ff ffdb 	bl	8024770 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80247ba:	2809      	cmp	r0, #9
 80247bc:	d124      	bne.n	8024808 <FLASH_EraseSector+0x68>
    FLASH->CR &= CR_PSIZE_MASK;
 80247be:	4d14      	ldr	r5, [pc, #80]	; (8024810 <FLASH_EraseSector+0x70>)
 80247c0:	692b      	ldr	r3, [r5, #16]
 80247c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80247c6:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 80247c8:	6929      	ldr	r1, [r5, #16]
 80247ca:	4321      	orrs	r1, r4
 80247cc:	6129      	str	r1, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 80247ce:	692b      	ldr	r3, [r5, #16]
 80247d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80247d4:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80247d6:	692b      	ldr	r3, [r5, #16]
 80247d8:	f043 0302 	orr.w	r3, r3, #2
 80247dc:	431e      	orrs	r6, r3
 80247de:	612e      	str	r6, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80247e0:	692b      	ldr	r3, [r5, #16]
 80247e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80247e6:	612b      	str	r3, [r5, #16]
    status = FLASH_WaitForLastOperation();
 80247e8:	f7ff ffc2 	bl	8024770 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_SER);
 80247ec:	692b      	ldr	r3, [r5, #16]
 80247ee:	f023 0302 	bic.w	r3, r3, #2
 80247f2:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 80247f4:	692b      	ldr	r3, [r5, #16]
 80247f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80247fa:	612b      	str	r3, [r5, #16]
}
 80247fc:	bd70      	pop	{r4, r5, r6, pc}
     tmp_psize = FLASH_PSIZE_BYTE;
 80247fe:	460c      	mov	r4, r1
  status = FLASH_WaitForLastOperation();
 8024800:	f7ff ffb6 	bl	8024770 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8024804:	2809      	cmp	r0, #9
 8024806:	d0da      	beq.n	80247be <FLASH_EraseSector+0x1e>
}
 8024808:	bd70      	pop	{r4, r5, r6, pc}
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802480a:	f44f 7480 	mov.w	r4, #256	; 0x100
 802480e:	e7f7      	b.n	8024800 <FLASH_EraseSector+0x60>
 8024810:	40023c00 	.word	0x40023c00
	...

08024820 <FLASH_ProgramHalfWord>:
{
 8024820:	b570      	push	{r4, r5, r6, lr}
 8024822:	4605      	mov	r5, r0
 8024824:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation();
 8024826:	f7ff ffa3 	bl	8024770 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 802482a:	2809      	cmp	r0, #9
 802482c:	d000      	beq.n	8024830 <FLASH_ProgramHalfWord+0x10>
}
 802482e:	bd70      	pop	{r4, r5, r6, pc}
    FLASH->CR &= CR_PSIZE_MASK;
 8024830:	4c0a      	ldr	r4, [pc, #40]	; (802485c <FLASH_ProgramHalfWord+0x3c>)
 8024832:	6923      	ldr	r3, [r4, #16]
 8024834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024838:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802483a:	6923      	ldr	r3, [r4, #16]
 802483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024840:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8024842:	6923      	ldr	r3, [r4, #16]
 8024844:	f043 0301 	orr.w	r3, r3, #1
 8024848:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 802484a:	802e      	strh	r6, [r5, #0]
    status = FLASH_WaitForLastOperation();
 802484c:	f7ff ff90 	bl	8024770 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8024850:	6923      	ldr	r3, [r4, #16]
 8024852:	f023 0301 	bic.w	r3, r3, #1
 8024856:	6123      	str	r3, [r4, #16]
}
 8024858:	bd70      	pop	{r4, r5, r6, pc}
 802485a:	bf00      	nop
 802485c:	40023c00 	.word	0x40023c00

08024860 <FLASH_ProgramByte>:
{
 8024860:	b570      	push	{r4, r5, r6, lr}
 8024862:	4605      	mov	r5, r0
 8024864:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation();
 8024866:	f7ff ff83 	bl	8024770 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 802486a:	2809      	cmp	r0, #9
 802486c:	d000      	beq.n	8024870 <FLASH_ProgramByte+0x10>
}
 802486e:	bd70      	pop	{r4, r5, r6, pc}
    FLASH->CR &= CR_PSIZE_MASK;
 8024870:	4c09      	ldr	r4, [pc, #36]	; (8024898 <FLASH_ProgramByte+0x38>)
 8024872:	6923      	ldr	r3, [r4, #16]
 8024874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024878:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 802487a:	6923      	ldr	r3, [r4, #16]
 802487c:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 802487e:	6923      	ldr	r3, [r4, #16]
 8024880:	f043 0301 	orr.w	r3, r3, #1
 8024884:	6123      	str	r3, [r4, #16]
    *(__IO uint8_t*)Address = Data;
 8024886:	702e      	strb	r6, [r5, #0]
    status = FLASH_WaitForLastOperation();
 8024888:	f7ff ff72 	bl	8024770 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 802488c:	6923      	ldr	r3, [r4, #16]
 802488e:	f023 0301 	bic.w	r3, r3, #1
 8024892:	6123      	str	r3, [r4, #16]
}
 8024894:	bd70      	pop	{r4, r5, r6, pc}
 8024896:	bf00      	nop
 8024898:	40023c00 	.word	0x40023c00
 802489c:	00000000 	.word	0x00000000

080248a0 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80248a0:	4a04      	ldr	r2, [pc, #16]	; (80248b4 <RCC_AHB1PeriphClockCmd+0x14>)
 80248a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  if (NewState != DISABLE)
 80248a4:	b919      	cbnz	r1, 80248ae <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80248a6:	ea23 0000 	bic.w	r0, r3, r0
 80248aa:	6310      	str	r0, [r2, #48]	; 0x30
 80248ac:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80248ae:	4318      	orrs	r0, r3
 80248b0:	6310      	str	r0, [r2, #48]	; 0x30
 80248b2:	4770      	bx	lr
 80248b4:	40023800 	.word	0x40023800
	...

080248c0 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80248c0:	4a04      	ldr	r2, [pc, #16]	; (80248d4 <RCC_APB1PeriphClockCmd+0x14>)
 80248c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if (NewState != DISABLE)
 80248c4:	b919      	cbnz	r1, 80248ce <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80248c6:	ea23 0000 	bic.w	r0, r3, r0
 80248ca:	6410      	str	r0, [r2, #64]	; 0x40
 80248cc:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 80248ce:	4318      	orrs	r0, r3
 80248d0:	6410      	str	r0, [r2, #64]	; 0x40
 80248d2:	4770      	bx	lr
 80248d4:	40023800 	.word	0x40023800
	...

080248e0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80248e0:	4a04      	ldr	r2, [pc, #16]	; (80248f4 <RCC_APB2PeriphClockCmd+0x14>)
 80248e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (NewState != DISABLE)
 80248e4:	b919      	cbnz	r1, 80248ee <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80248e6:	ea23 0000 	bic.w	r0, r3, r0
 80248ea:	6450      	str	r0, [r2, #68]	; 0x44
 80248ec:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 80248ee:	4318      	orrs	r0, r3
 80248f0:	6450      	str	r0, [r2, #68]	; 0x44
 80248f2:	4770      	bx	lr
 80248f4:	40023800 	.word	0x40023800
	...

08024900 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8024900:	4a04      	ldr	r2, [pc, #16]	; (8024914 <RCC_APB1PeriphResetCmd+0x14>)
 8024902:	6a13      	ldr	r3, [r2, #32]
  if (NewState != DISABLE)
 8024904:	b919      	cbnz	r1, 802490e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8024906:	ea23 0000 	bic.w	r0, r3, r0
 802490a:	6210      	str	r0, [r2, #32]
 802490c:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 802490e:	4318      	orrs	r0, r3
 8024910:	6210      	str	r0, [r2, #32]
 8024912:	4770      	bx	lr
 8024914:	40023800 	.word	0x40023800
	...

08024920 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8024920:	4a04      	ldr	r2, [pc, #16]	; (8024934 <RCC_APB2PeriphResetCmd+0x14>)
 8024922:	6a53      	ldr	r3, [r2, #36]	; 0x24
  if (NewState != DISABLE)
 8024924:	b919      	cbnz	r1, 802492e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8024926:	ea23 0000 	bic.w	r0, r3, r0
 802492a:	6250      	str	r0, [r2, #36]	; 0x24
 802492c:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 802492e:	4318      	orrs	r0, r3
 8024930:	6250      	str	r0, [r2, #36]	; 0x24
 8024932:	4770      	bx	lr
 8024934:	40023800 	.word	0x40023800
	...

08024940 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8024940:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8024944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024948:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 802494c:	f001 0103 	and.w	r1, r1, #3
{
 8024950:	b410      	push	{r4}
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8024952:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8024954:	0089      	lsls	r1, r1, #2
 8024956:	240f      	movs	r4, #15
 8024958:	408c      	lsls	r4, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 802495a:	ea22 0204 	bic.w	r2, r2, r4
 802495e:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8024960:	689a      	ldr	r2, [r3, #8]
}
 8024962:	f85d 4b04 	ldr.w	r4, [sp], #4
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8024966:	fa00 f101 	lsl.w	r1, r0, r1
 802496a:	4311      	orrs	r1, r2
 802496c:	6099      	str	r1, [r3, #8]
}
 802496e:	4770      	bx	lr

08024970 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8024970:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8024972:	4b60      	ldr	r3, [pc, #384]	; (8024af4 <TIM_DeInit+0x184>)
 8024974:	4298      	cmp	r0, r3
 8024976:	d035      	beq.n	80249e4 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8024978:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 802497c:	d03c      	beq.n	80249f8 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 802497e:	4b5e      	ldr	r3, [pc, #376]	; (8024af8 <TIM_DeInit+0x188>)
 8024980:	4298      	cmp	r0, r3
 8024982:	d043      	beq.n	8024a0c <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8024984:	4b5d      	ldr	r3, [pc, #372]	; (8024afc <TIM_DeInit+0x18c>)
 8024986:	4298      	cmp	r0, r3
 8024988:	d04a      	beq.n	8024a20 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 802498a:	4b5d      	ldr	r3, [pc, #372]	; (8024b00 <TIM_DeInit+0x190>)
 802498c:	4298      	cmp	r0, r3
 802498e:	d051      	beq.n	8024a34 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8024990:	4b5c      	ldr	r3, [pc, #368]	; (8024b04 <TIM_DeInit+0x194>)
 8024992:	4298      	cmp	r0, r3
 8024994:	d058      	beq.n	8024a48 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8024996:	4b5c      	ldr	r3, [pc, #368]	; (8024b08 <TIM_DeInit+0x198>)
 8024998:	4298      	cmp	r0, r3
 802499a:	d05f      	beq.n	8024a5c <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 802499c:	4b5b      	ldr	r3, [pc, #364]	; (8024b0c <TIM_DeInit+0x19c>)
 802499e:	4298      	cmp	r0, r3
 80249a0:	d066      	beq.n	8024a70 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80249a2:	4b5b      	ldr	r3, [pc, #364]	; (8024b10 <TIM_DeInit+0x1a0>)
 80249a4:	4298      	cmp	r0, r3
 80249a6:	d06d      	beq.n	8024a84 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80249a8:	4b5a      	ldr	r3, [pc, #360]	; (8024b14 <TIM_DeInit+0x1a4>)
 80249aa:	4298      	cmp	r0, r3
 80249ac:	d076      	beq.n	8024a9c <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80249ae:	4b5a      	ldr	r3, [pc, #360]	; (8024b18 <TIM_DeInit+0x1a8>)
 80249b0:	4298      	cmp	r0, r3
 80249b2:	d07f      	beq.n	8024ab4 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80249b4:	4b59      	ldr	r3, [pc, #356]	; (8024b1c <TIM_DeInit+0x1ac>)
 80249b6:	4298      	cmp	r0, r3
 80249b8:	f000 8088 	beq.w	8024acc <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 80249bc:	4b58      	ldr	r3, [pc, #352]	; (8024b20 <TIM_DeInit+0x1b0>)
 80249be:	4298      	cmp	r0, r3
 80249c0:	f000 808e 	beq.w	8024ae0 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 80249c4:	4b57      	ldr	r3, [pc, #348]	; (8024b24 <TIM_DeInit+0x1b4>)
 80249c6:	4298      	cmp	r0, r3
 80249c8:	d000      	beq.n	80249cc <TIM_DeInit+0x5c>
 80249ca:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80249cc:	2101      	movs	r1, #1
 80249ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80249d2:	f7ff ff95 	bl	8024900 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80249d6:	2100      	movs	r1, #0
 80249d8:	f44f 7080 	mov.w	r0, #256	; 0x100
    }   
  }
}
 80249dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80249e0:	f7ff bf8e 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80249e4:	2101      	movs	r1, #1
 80249e6:	4608      	mov	r0, r1
 80249e8:	f7ff ff9a 	bl	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80249ec:	2100      	movs	r1, #0
 80249ee:	2001      	movs	r0, #1
}
 80249f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80249f4:	f7ff bf94 	b.w	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80249f8:	2101      	movs	r1, #1
 80249fa:	4608      	mov	r0, r1
 80249fc:	f7ff ff80 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8024a00:	2100      	movs	r1, #0
 8024a02:	2001      	movs	r0, #1
}
 8024a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8024a08:	f7ff bf7a 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8024a0c:	2101      	movs	r1, #1
 8024a0e:	2002      	movs	r0, #2
 8024a10:	f7ff ff76 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8024a14:	2100      	movs	r1, #0
 8024a16:	2002      	movs	r0, #2
}
 8024a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8024a1c:	f7ff bf70 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8024a20:	2101      	movs	r1, #1
 8024a22:	2004      	movs	r0, #4
 8024a24:	f7ff ff6c 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8024a28:	2100      	movs	r1, #0
 8024a2a:	2004      	movs	r0, #4
}
 8024a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8024a30:	f7ff bf66 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8024a34:	2101      	movs	r1, #1
 8024a36:	2008      	movs	r0, #8
 8024a38:	f7ff ff62 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8024a3c:	2100      	movs	r1, #0
 8024a3e:	2008      	movs	r0, #8
}
 8024a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8024a44:	f7ff bf5c 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8024a48:	2101      	movs	r1, #1
 8024a4a:	2010      	movs	r0, #16
 8024a4c:	f7ff ff58 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8024a50:	2100      	movs	r1, #0
 8024a52:	2010      	movs	r0, #16
}
 8024a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8024a58:	f7ff bf52 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8024a5c:	2101      	movs	r1, #1
 8024a5e:	2020      	movs	r0, #32
 8024a60:	f7ff ff4e 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8024a64:	2100      	movs	r1, #0
 8024a66:	2020      	movs	r0, #32
}
 8024a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8024a6c:	f7ff bf48 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8024a70:	2101      	movs	r1, #1
 8024a72:	2002      	movs	r0, #2
 8024a74:	f7ff ff54 	bl	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8024a78:	2100      	movs	r1, #0
 8024a7a:	2002      	movs	r0, #2
}
 8024a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8024a80:	f7ff bf4e 	b.w	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8024a84:	2101      	movs	r1, #1
 8024a86:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8024a8a:	f7ff ff49 	bl	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8024a8e:	2100      	movs	r1, #0
 8024a90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8024a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8024a98:	f7ff bf42 	b.w	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8024a9c:	2101      	movs	r1, #1
 8024a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8024aa2:	f7ff ff3d 	bl	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8024aa6:	2100      	movs	r1, #0
 8024aa8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
}
 8024aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8024ab0:	f7ff bf36 	b.w	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8024ab4:	2101      	movs	r1, #1
 8024ab6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8024aba:	f7ff ff31 	bl	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8024abe:	2100      	movs	r1, #0
 8024ac0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
}
 8024ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8024ac8:	f7ff bf2a 	b.w	8024920 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8024acc:	2101      	movs	r1, #1
 8024ace:	2040      	movs	r0, #64	; 0x40
 8024ad0:	f7ff ff16 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8024ad4:	2100      	movs	r1, #0
 8024ad6:	2040      	movs	r0, #64	; 0x40
}
 8024ad8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8024adc:	f7ff bf10 	b.w	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8024ae0:	2101      	movs	r1, #1
 8024ae2:	2080      	movs	r0, #128	; 0x80
 8024ae4:	f7ff ff0c 	bl	8024900 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8024ae8:	2100      	movs	r1, #0
 8024aea:	2080      	movs	r0, #128	; 0x80
}
 8024aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8024af0:	f7ff bf06 	b.w	8024900 <RCC_APB1PeriphResetCmd>
 8024af4:	40010000 	.word	0x40010000
 8024af8:	40000400 	.word	0x40000400
 8024afc:	40000800 	.word	0x40000800
 8024b00:	40000c00 	.word	0x40000c00
 8024b04:	40001000 	.word	0x40001000
 8024b08:	40001400 	.word	0x40001400
 8024b0c:	40010400 	.word	0x40010400
 8024b10:	40014000 	.word	0x40014000
 8024b14:	40014400 	.word	0x40014400
 8024b18:	40014800 	.word	0x40014800
 8024b1c:	40001800 	.word	0x40001800
 8024b20:	40001c00 	.word	0x40001c00
 8024b24:	40002000 	.word	0x40002000
	...

08024b30 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8024b30:	4a23      	ldr	r2, [pc, #140]	; (8024bc0 <TIM_TimeBaseInit+0x90>)
  tmpcr1 = TIMx->CR1;  
 8024b32:	6803      	ldr	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8024b34:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 8024b36:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8024b38:	d012      	beq.n	8024b60 <TIM_TimeBaseInit+0x30>
 8024b3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8024b3e:	4290      	cmp	r0, r2
 8024b40:	d00e      	beq.n	8024b60 <TIM_TimeBaseInit+0x30>
 8024b42:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8024b46:	d00b      	beq.n	8024b60 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8024b48:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8024b4c:	4290      	cmp	r0, r2
 8024b4e:	d007      	beq.n	8024b60 <TIM_TimeBaseInit+0x30>
 8024b50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8024b54:	4290      	cmp	r0, r2
 8024b56:	d003      	beq.n	8024b60 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8024b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8024b5c:	4290      	cmp	r0, r2
 8024b5e:	d103      	bne.n	8024b68 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8024b60:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8024b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8024b66:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8024b68:	4a16      	ldr	r2, [pc, #88]	; (8024bc4 <TIM_TimeBaseInit+0x94>)
 8024b6a:	4290      	cmp	r0, r2
 8024b6c:	d01f      	beq.n	8024bae <TIM_TimeBaseInit+0x7e>
 8024b6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8024b72:	4290      	cmp	r0, r2
 8024b74:	d01b      	beq.n	8024bae <TIM_TimeBaseInit+0x7e>
{
 8024b76:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8024b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8024b7c:	890e      	ldrh	r6, [r1, #8]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8024b7e:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8024b80:	880c      	ldrh	r4, [r1, #0]
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8024b82:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8024b86:	b29b      	uxth	r3, r3
  TIMx->CR1 = tmpcr1;
 8024b88:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8024b8a:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8024b8c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8024b8e:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8024b90:	6284      	str	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8024b92:	d006      	beq.n	8024ba2 <TIM_TimeBaseInit+0x72>
 8024b94:	4b0c      	ldr	r3, [pc, #48]	; (8024bc8 <TIM_TimeBaseInit+0x98>)
 8024b96:	4298      	cmp	r0, r3
 8024b98:	d003      	beq.n	8024ba2 <TIM_TimeBaseInit+0x72>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8024b9a:	2301      	movs	r3, #1
 8024b9c:	6143      	str	r3, [r0, #20]
}
 8024b9e:	bc70      	pop	{r4, r5, r6}
 8024ba0:	4770      	bx	lr
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8024ba2:	7a8b      	ldrb	r3, [r1, #10]
 8024ba4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8024ba6:	2301      	movs	r3, #1
 8024ba8:	6143      	str	r3, [r0, #20]
}
 8024baa:	bc70      	pop	{r4, r5, r6}
 8024bac:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 8024bae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8024bb0:	684a      	ldr	r2, [r1, #4]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8024bb2:	880b      	ldrh	r3, [r1, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8024bb4:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8024bb6:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8024bb8:	2301      	movs	r3, #1
 8024bba:	6143      	str	r3, [r0, #20]
 8024bbc:	4770      	bx	lr
 8024bbe:	bf00      	nop
 8024bc0:	40010000 	.word	0x40010000
 8024bc4:	40001000 	.word	0x40001000
 8024bc8:	40010400 	.word	0x40010400
 8024bcc:	00000000 	.word	0x00000000

08024bd0 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8024bd0:	62c1      	str	r1, [r0, #44]	; 0x2c
 8024bd2:	4770      	bx	lr
	...

08024be0 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8024be0:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8024be2:	b921      	cbnz	r1, 8024bee <TIM_ARRPreloadConfig+0xe>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8024be4:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8024be8:	4013      	ands	r3, r2
 8024bea:	6003      	str	r3, [r0, #0]
 8024bec:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_ARPE;
 8024bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024bf2:	6003      	str	r3, [r0, #0]
 8024bf4:	4770      	bx	lr
 8024bf6:	bf00      	nop
	...

08024c00 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8024c00:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8024c02:	b921      	cbnz	r1, 8024c0e <TIM_Cmd+0xe>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8024c04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8024c08:	4013      	ands	r3, r2
 8024c0a:	6003      	str	r3, [r0, #0]
 8024c0c:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 8024c0e:	f043 0301 	orr.w	r3, r3, #1
 8024c12:	6003      	str	r3, [r0, #0]
 8024c14:	4770      	bx	lr
 8024c16:	bf00      	nop
	...

08024c20 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8024c20:	6a03      	ldr	r3, [r0, #32]
 8024c22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8024c26:	4013      	ands	r3, r2
 8024c28:	6203      	str	r3, [r0, #32]
{
 8024c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024c2c:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8024c30:	884c      	ldrh	r4, [r1, #2]
 8024c32:	898d      	ldrh	r5, [r1, #12]
  tmpcr2 =  TIMx->CR2;
 8024c34:	6842      	ldr	r2, [r0, #4]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024c36:	4e15      	ldr	r6, [pc, #84]	; (8024c8c <TIM_OC1Init+0x6c>)
  tmpccmrx = TIMx->CCMR1;
 8024c38:	6987      	ldr	r7, [r0, #24]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8024c3a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8024c3e:	4325      	orrs	r5, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8024c40:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8024c44:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8024c46:	f64f 748c 	movw	r4, #65420	; 0xff8c
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8024c4a:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8024c4c:	403c      	ands	r4, r7
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024c4e:	42b0      	cmp	r0, r6
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8024c50:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8024c52:	b292      	uxth	r2, r2
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8024c54:	ea44 0405 	orr.w	r4, r4, r5
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024c58:	d008      	beq.n	8024c6c <TIM_OC1Init+0x4c>
 8024c5a:	4d0d      	ldr	r5, [pc, #52]	; (8024c90 <TIM_OC1Init+0x70>)
 8024c5c:	42a8      	cmp	r0, r5
 8024c5e:	d005      	beq.n	8024c6c <TIM_OC1Init+0x4c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8024c60:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8024c62:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8024c64:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8024c66:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024c68:	6203      	str	r3, [r0, #32]
 8024c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8024c6c:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8024c6e:	8a0d      	ldrh	r5, [r1, #16]
 8024c70:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8024c72:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8024c76:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8024c78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8024c7c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8024c7e:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8024c80:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8024c84:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8024c86:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8024c88:	b292      	uxth	r2, r2
 8024c8a:	e7e9      	b.n	8024c60 <TIM_OC1Init+0x40>
 8024c8c:	40010000 	.word	0x40010000
 8024c90:	40010400 	.word	0x40010400
	...

08024ca0 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8024ca0:	6a03      	ldr	r3, [r0, #32]
 8024ca2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8024ca6:	4013      	ands	r3, r2
{
 8024ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8024caa:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8024cac:	884a      	ldrh	r2, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8024cae:	898c      	ldrh	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8024cb0:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8024cb4:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8024cb6:	6987      	ldr	r7, [r0, #24]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024cb8:	4d18      	ldr	r5, [pc, #96]	; (8024d1c <TIM_OC2Init+0x7c>)
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8024cba:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8024cbc:	f648 42ff 	movw	r2, #36095	; 0x8cff
 8024cc0:	403a      	ands	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8024cc2:	f64f 73df 	movw	r3, #65503	; 0xffdf
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8024cc6:	880f      	ldrh	r7, [r1, #0]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8024cc8:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8024ccc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8024cd0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024cd4:	42a8      	cmp	r0, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8024cd6:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8024cd8:	b2b4      	uxth	r4, r6
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8024cda:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024cdc:	d009      	beq.n	8024cf2 <TIM_OC2Init+0x52>
 8024cde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8024ce2:	42a8      	cmp	r0, r5
 8024ce4:	d005      	beq.n	8024cf2 <TIM_OC2Init+0x52>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8024ce6:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8024ce8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8024cea:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8024cec:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024cee:	6203      	str	r3, [r0, #32]
 8024cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8024cf2:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8024cf4:	8a0e      	ldrh	r6, [r1, #16]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8024cf6:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8024cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8024cfc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8024d00:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8024d04:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8024d06:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8024d08:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8024d0c:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8024d0e:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8024d12:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8024d16:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8024d18:	b2a4      	uxth	r4, r4
 8024d1a:	e7e4      	b.n	8024ce6 <TIM_OC2Init+0x46>
 8024d1c:	40010000 	.word	0x40010000

08024d20 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8024d20:	6a03      	ldr	r3, [r0, #32]
 8024d22:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8024d26:	4013      	ands	r3, r2
 8024d28:	6203      	str	r3, [r0, #32]
{
 8024d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8024d2c:	884a      	ldrh	r2, [r1, #2]
  tmpccer = TIMx->CCER;
 8024d2e:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8024d32:	898c      	ldrh	r4, [r1, #12]
  tmpcr2 =  TIMx->CR2;
 8024d34:	6845      	ldr	r5, [r0, #4]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024d36:	4e19      	ldr	r6, [pc, #100]	; (8024d9c <TIM_OC3Init+0x7c>)
  tmpccmrx = TIMx->CCMR2;
 8024d38:	69c7      	ldr	r7, [r0, #28]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8024d3a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8024d3e:	4314      	orrs	r4, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8024d40:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8024d44:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8024d48:	f64f 728c 	movw	r2, #65420	; 0xff8c
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8024d4c:	880c      	ldrh	r4, [r1, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8024d4e:	403a      	ands	r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024d50:	42b0      	cmp	r0, r6
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8024d52:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8024d54:	b2ad      	uxth	r5, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8024d56:	ea42 0204 	orr.w	r2, r2, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024d5a:	d009      	beq.n	8024d70 <TIM_OC3Init+0x50>
 8024d5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8024d60:	42b0      	cmp	r0, r6
 8024d62:	d005      	beq.n	8024d70 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8024d64:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8024d66:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8024d68:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8024d6a:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024d6c:	6203      	str	r3, [r0, #32]
 8024d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8024d70:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8024d72:	8a0f      	ldrh	r7, [r1, #16]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8024d74:	8a4c      	ldrh	r4, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8024d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8024d7a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8024d7e:	f64f 36ff 	movw	r6, #64511	; 0xfbff
 8024d82:	401e      	ands	r6, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8024d84:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8024d86:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8024d8a:	4327      	orrs	r7, r4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8024d8c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8024d90:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8024d94:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8024d96:	b2ad      	uxth	r5, r5
 8024d98:	e7e4      	b.n	8024d64 <TIM_OC3Init+0x44>
 8024d9a:	bf00      	nop
 8024d9c:	40010000 	.word	0x40010000

08024da0 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8024da0:	6a03      	ldr	r3, [r0, #32]
 8024da2:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8024da6:	4013      	ands	r3, r2
{
 8024da8:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8024daa:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8024dac:	884a      	ldrh	r2, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8024dae:	898d      	ldrh	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8024db0:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8024db4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8024db6:	69c7      	ldr	r7, [r0, #28]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024db8:	4e11      	ldr	r6, [pc, #68]	; (8024e00 <TIM_OC4Init+0x60>)
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8024dba:	4315      	orrs	r5, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8024dbc:	f648 42ff 	movw	r2, #36095	; 0x8cff
 8024dc0:	403a      	ands	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8024dc2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8024dc6:	880f      	ldrh	r7, [r1, #0]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8024dc8:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8024dcc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8024dd0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024dd4:	42b0      	cmp	r0, r6
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8024dd6:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8024dd8:	b2a4      	uxth	r4, r4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8024dda:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8024ddc:	d008      	beq.n	8024df0 <TIM_OC4Init+0x50>
 8024dde:	4d09      	ldr	r5, [pc, #36]	; (8024e04 <TIM_OC4Init+0x64>)
 8024de0:	42a8      	cmp	r0, r5
 8024de2:	d005      	beq.n	8024df0 <TIM_OC4Init+0x50>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8024de4:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8024de6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8024de8:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8024dea:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024dec:	6203      	str	r3, [r0, #32]
 8024dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8024df0:	8a0d      	ldrh	r5, [r1, #16]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8024df2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8024df6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8024dfa:	b2a4      	uxth	r4, r4
 8024dfc:	e7f2      	b.n	8024de4 <TIM_OC4Init+0x44>
 8024dfe:	bf00      	nop
 8024e00:	40010000 	.word	0x40010000
 8024e04:	40010400 	.word	0x40010400
	...

08024e10 <TIM_SelectOCxM>:
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8024e10:	2301      	movs	r3, #1
 8024e12:	408b      	lsls	r3, r1
{
 8024e14:	b410      	push	{r4}

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8024e16:	43db      	mvns	r3, r3
 8024e18:	6a04      	ldr	r4, [r0, #32]
 8024e1a:	b29b      	uxth	r3, r3
 8024e1c:	4023      	ands	r3, r4

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8024e1e:	f021 0408 	bic.w	r4, r1, #8
  TIMx->CCER &= (uint16_t) ~tmp1;
 8024e22:	6203      	str	r3, [r0, #32]
  tmp += CCMR_OFFSET;
 8024e24:	3018      	adds	r0, #24
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8024e26:	b17c      	cbz	r4, 8024e48 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8024e28:	3904      	subs	r1, #4
 8024e2a:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8024e2e:	f648 74ff 	movw	r4, #36863	; 0x8fff
 8024e32:	580b      	ldr	r3, [r1, r0]
 8024e34:	4023      	ands	r3, r4
 8024e36:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8024e38:	0212      	lsls	r2, r2, #8
 8024e3a:	580b      	ldr	r3, [r1, r0]
  }
}
 8024e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8024e40:	b292      	uxth	r2, r2
 8024e42:	431a      	orrs	r2, r3
 8024e44:	500a      	str	r2, [r1, r0]
}
 8024e46:	4770      	bx	lr
    tmp += (TIM_Channel>>1);
 8024e48:	0849      	lsrs	r1, r1, #1
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8024e4a:	f64f 748f 	movw	r4, #65423	; 0xff8f
 8024e4e:	580b      	ldr	r3, [r1, r0]
 8024e50:	4023      	ands	r3, r4
 8024e52:	500b      	str	r3, [r1, r0]
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8024e54:	580b      	ldr	r3, [r1, r0]
}
 8024e56:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8024e5a:	431a      	orrs	r2, r3
 8024e5c:	500a      	str	r2, [r1, r0]
}
 8024e5e:	4770      	bx	lr

08024e60 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8024e60:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8024e62:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8024e66:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8024e68:	4319      	orrs	r1, r3
 8024e6a:	6181      	str	r1, [r0, #24]
 8024e6c:	4770      	bx	lr
 8024e6e:	bf00      	nop

08024e70 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8024e70:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8024e72:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8024e76:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8024e78:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8024e7c:	b289      	uxth	r1, r1
 8024e7e:	6181      	str	r1, [r0, #24]
 8024e80:	4770      	bx	lr
 8024e82:	bf00      	nop
	...

08024e90 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8024e90:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8024e92:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8024e96:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8024e98:	4319      	orrs	r1, r3
 8024e9a:	61c1      	str	r1, [r0, #28]
 8024e9c:	4770      	bx	lr
 8024e9e:	bf00      	nop

08024ea0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8024ea0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8024ea2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8024ea6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8024ea8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8024eac:	b289      	uxth	r1, r1
 8024eae:	61c1      	str	r1, [r0, #28]
 8024eb0:	4770      	bx	lr
 8024eb2:	bf00      	nop
	...

08024ec0 <TIM_CCxCmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8024ec0:	2301      	movs	r3, #1
 8024ec2:	408b      	lsls	r3, r1
{
 8024ec4:	b410      	push	{r4}

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8024ec6:	43db      	mvns	r3, r3
 8024ec8:	6a04      	ldr	r4, [r0, #32]
 8024eca:	b29b      	uxth	r3, r3
 8024ecc:	4023      	ands	r3, r4
 8024ece:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8024ed0:	fa02 f101 	lsl.w	r1, r2, r1
 8024ed4:	6a02      	ldr	r2, [r0, #32]
}
 8024ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8024eda:	b289      	uxth	r1, r1
 8024edc:	4311      	orrs	r1, r2
 8024ede:	6201      	str	r1, [r0, #32]
}
 8024ee0:	4770      	bx	lr
 8024ee2:	bf00      	nop
	...

08024ef0 <TIM_CCxNCmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8024ef0:	2304      	movs	r3, #4
 8024ef2:	408b      	lsls	r3, r1
{
 8024ef4:	b410      	push	{r4}

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8024ef6:	43db      	mvns	r3, r3
 8024ef8:	6a04      	ldr	r4, [r0, #32]
 8024efa:	b29b      	uxth	r3, r3
 8024efc:	4023      	ands	r3, r4
 8024efe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8024f00:	fa02 f101 	lsl.w	r1, r2, r1
 8024f04:	6a02      	ldr	r2, [r0, #32]
}
 8024f06:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8024f0a:	b289      	uxth	r1, r1
 8024f0c:	4311      	orrs	r1, r2
 8024f0e:	6201      	str	r1, [r0, #32]
}
 8024f10:	4770      	bx	lr
 8024f12:	bf00      	nop
	...

08024f20 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8024f20:	b4f0      	push	{r4, r5, r6, r7}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8024f22:	880a      	ldrh	r2, [r1, #0]
 8024f24:	884f      	ldrh	r7, [r1, #2]
 8024f26:	888b      	ldrh	r3, [r1, #4]
 8024f28:	88ce      	ldrh	r6, [r1, #6]
 8024f2a:	890d      	ldrh	r5, [r1, #8]
 8024f2c:	894c      	ldrh	r4, [r1, #10]
 8024f2e:	8989      	ldrh	r1, [r1, #12]
 8024f30:	433a      	orrs	r2, r7
 8024f32:	4313      	orrs	r3, r2
 8024f34:	4333      	orrs	r3, r6
 8024f36:	432b      	orrs	r3, r5
 8024f38:	4323      	orrs	r3, r4
 8024f3a:	430b      	orrs	r3, r1
 8024f3c:	b29b      	uxth	r3, r3
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8024f3e:	6443      	str	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8024f40:	bcf0      	pop	{r4, r5, r6, r7}
 8024f42:	4770      	bx	lr
	...

08024f50 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8024f50:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8024f52:	b919      	cbnz	r1, 8024f5c <TIM_CtrlPWMOutputs+0xc>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8024f54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8024f58:	6443      	str	r3, [r0, #68]	; 0x44
 8024f5a:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 8024f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024f60:	6443      	str	r3, [r0, #68]	; 0x44
 8024f62:	4770      	bx	lr
	...

08024f70 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8024f70:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 8024f72:	b921      	cbnz	r1, 8024f7e <TIM_CCPreloadControl+0xe>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8024f74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8024f78:	4013      	ands	r3, r2
 8024f7a:	6043      	str	r3, [r0, #4]
 8024f7c:	4770      	bx	lr
    TIMx->CR2 |= TIM_CR2_CCPC;
 8024f7e:	f043 0301 	orr.w	r3, r3, #1
 8024f82:	6043      	str	r3, [r0, #4]
 8024f84:	4770      	bx	lr
 8024f86:	bf00      	nop
	...

08024f90 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8024f90:	6141      	str	r1, [r0, #20]
 8024f92:	4770      	bx	lr
	...

08024fa0 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8024fa0:	6903      	ldr	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8024fa2:	68c2      	ldr	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8024fa4:	ea11 0003 	ands.w	r0, r1, r3
 8024fa8:	d003      	beq.n	8024fb2 <TIM_GetITStatus+0x12>
 8024faa:	4211      	tst	r1, r2
 8024fac:	bf14      	ite	ne
 8024fae:	2001      	movne	r0, #1
 8024fb0:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8024fb2:	4770      	bx	lr
	...

08024fc0 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8024fc0:	43c9      	mvns	r1, r1
 8024fc2:	b289      	uxth	r1, r1
 8024fc4:	6101      	str	r1, [r0, #16]
 8024fc6:	4770      	bx	lr
	...

08024fd0 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8024fd0:	b92a      	cbnz	r2, 8024fde <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8024fd2:	68c3      	ldr	r3, [r0, #12]
 8024fd4:	43c9      	mvns	r1, r1
 8024fd6:	b289      	uxth	r1, r1
 8024fd8:	4019      	ands	r1, r3
 8024fda:	60c1      	str	r1, [r0, #12]
 8024fdc:	4770      	bx	lr
    TIMx->DIER |= TIM_DMASource; 
 8024fde:	68c3      	ldr	r3, [r0, #12]
 8024fe0:	4319      	orrs	r1, r3
 8024fe2:	60c1      	str	r1, [r0, #12]
 8024fe4:	4770      	bx	lr
 8024fe6:	bf00      	nop
	...

08024ff0 <TIM_ITConfig>:
 8024ff0:	f7ff bfee 	b.w	8024fd0 <TIM_DMACmd>
	...

08025000 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8025000:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8025002:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8025006:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8025008:	4319      	orrs	r1, r3
 802500a:	6081      	str	r1, [r0, #8]
 802500c:	4770      	bx	lr
 802500e:	bf00      	nop

08025010 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8025010:	6843      	ldr	r3, [r0, #4]
 8025012:	f64f 728f 	movw	r2, #65423	; 0xff8f
 8025016:	4013      	ands	r3, r2
 8025018:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 802501a:	6843      	ldr	r3, [r0, #4]
 802501c:	4319      	orrs	r1, r3
 802501e:	6041      	str	r1, [r0, #4]
 8025020:	4770      	bx	lr
 8025022:	bf00      	nop
	...

08025030 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8025030:	6883      	ldr	r3, [r0, #8]
 8025032:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8025036:	4013      	ands	r3, r2
 8025038:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 802503a:	6883      	ldr	r3, [r0, #8]
 802503c:	4319      	orrs	r1, r3
 802503e:	6081      	str	r1, [r0, #8]
 8025040:	4770      	bx	lr
 8025042:	bf00      	nop
	...

08025050 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8025050:	6883      	ldr	r3, [r0, #8]
 8025052:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8025056:	4013      	ands	r3, r2
 8025058:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 802505a:	6883      	ldr	r3, [r0, #8]
 802505c:	4319      	orrs	r1, r3
 802505e:	6081      	str	r1, [r0, #8]
 8025060:	4770      	bx	lr
 8025062:	bf00      	nop
	...

08025070 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8025070:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8025072:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8025074:	6986      	ldr	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025076:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 802507a:	f64f 74dd 	movw	r4, #65501	; 0xffdd
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 802507e:	f64f 45fc 	movw	r5, #64764	; 0xfcfc
 8025082:	4035      	ands	r5, r6
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8025084:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8025088:	ea0e 0404 	and.w	r4, lr, r4
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 802508c:	f64f 76f8 	movw	r6, #65528	; 0xfff8
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8025090:	431c      	orrs	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8025092:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8025096:	403e      	ands	r6, r7

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025098:	b2a4      	uxth	r4, r4
  TIMx->CCMR1 = tmpccmr1;
 802509a:	f045 0501 	orr.w	r5, r5, #1
  TIMx->SMCR = tmpsmcr;
 802509e:	4331      	orrs	r1, r6
 80250a0:	6081      	str	r1, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 80250a2:	6185      	str	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 80250a4:	6204      	str	r4, [r0, #32]
 80250a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080250b0 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 80250b0:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 80250b2:	2101      	movs	r1, #1
 80250b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80250b8:	f7ff fc22 	bl	8024900 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80250bc:	2100      	movs	r1, #0
 80250be:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80250c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80250c6:	f7ff bc1b 	b.w	8024900 <RCC_APB1PeriphResetCmd>
 80250ca:	bf00      	nop
 80250cc:	0000      	movs	r0, r0
	...

080250d0 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80250d0:	4a03      	ldr	r2, [pc, #12]	; (80250e0 <WWDG_SetPrescaler+0x10>)
 80250d2:	6853      	ldr	r3, [r2, #4]
 80250d4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80250d8:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80250da:	6050      	str	r0, [r2, #4]
 80250dc:	4770      	bx	lr
 80250de:	bf00      	nop
 80250e0:	40002c00 	.word	0x40002c00
	...

080250f0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80250f0:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80250f2:	4a08      	ldr	r2, [pc, #32]	; (8025114 <WWDG_SetWindowValue+0x24>)
  __IO uint32_t tmpreg = 0;
 80250f4:	2300      	movs	r3, #0
 80250f6:	9301      	str	r3, [sp, #4]
  tmpreg = WWDG->CFR & CFR_W_MASK;
 80250f8:	6853      	ldr	r3, [r2, #4]
 80250fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80250fe:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8025100:	9b01      	ldr	r3, [sp, #4]
 8025102:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8025106:	4318      	orrs	r0, r3
 8025108:	9001      	str	r0, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 802510a:	9b01      	ldr	r3, [sp, #4]
 802510c:	6053      	str	r3, [r2, #4]
}
 802510e:	b002      	add	sp, #8
 8025110:	4770      	bx	lr
 8025112:	bf00      	nop
 8025114:	40002c00 	.word	0x40002c00
	...

08025120 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8025120:	4b02      	ldr	r3, [pc, #8]	; (802512c <WWDG_SetCounter+0xc>)
 8025122:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8025126:	6018      	str	r0, [r3, #0]
 8025128:	4770      	bx	lr
 802512a:	bf00      	nop
 802512c:	40002c00 	.word	0x40002c00

08025130 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8025130:	4b02      	ldr	r3, [pc, #8]	; (802513c <WWDG_Enable+0xc>)
 8025132:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8025136:	6018      	str	r0, [r3, #0]
 8025138:	4770      	bx	lr
 802513a:	bf00      	nop
 802513c:	40002c00 	.word	0x40002c00

08025140 <cosf>:
 8025140:	b500      	push	{lr}
 8025142:	ee10 3a10 	vmov	r3, s0
 8025146:	4a20      	ldr	r2, [pc, #128]	; (80251c8 <cosf+0x88>)
 8025148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802514c:	4293      	cmp	r3, r2
 802514e:	b083      	sub	sp, #12
 8025150:	dd19      	ble.n	8025186 <cosf+0x46>
 8025152:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025156:	db04      	blt.n	8025162 <cosf+0x22>
 8025158:	ee30 0a40 	vsub.f32	s0, s0, s0
 802515c:	b003      	add	sp, #12
 802515e:	f85d fb04 	ldr.w	pc, [sp], #4
 8025162:	4668      	mov	r0, sp
 8025164:	f001 fdf4 	bl	8026d50 <__ieee754_rem_pio2f>
 8025168:	f000 0003 	and.w	r0, r0, #3
 802516c:	2801      	cmp	r0, #1
 802516e:	d01a      	beq.n	80251a6 <cosf+0x66>
 8025170:	2802      	cmp	r0, #2
 8025172:	d00f      	beq.n	8025194 <cosf+0x54>
 8025174:	b300      	cbz	r0, 80251b8 <cosf+0x78>
 8025176:	2001      	movs	r0, #1
 8025178:	eddd 0a01 	vldr	s1, [sp, #4]
 802517c:	ed9d 0a00 	vldr	s0, [sp]
 8025180:	f002 fb4e 	bl	8027820 <__kernel_sinf>
 8025184:	e7ea      	b.n	802515c <cosf+0x1c>
 8025186:	eddf 0a11 	vldr	s1, [pc, #68]	; 80251cc <cosf+0x8c>
 802518a:	f001 ff79 	bl	8027080 <__kernel_cosf>
 802518e:	b003      	add	sp, #12
 8025190:	f85d fb04 	ldr.w	pc, [sp], #4
 8025194:	eddd 0a01 	vldr	s1, [sp, #4]
 8025198:	ed9d 0a00 	vldr	s0, [sp]
 802519c:	f001 ff70 	bl	8027080 <__kernel_cosf>
 80251a0:	eeb1 0a40 	vneg.f32	s0, s0
 80251a4:	e7da      	b.n	802515c <cosf+0x1c>
 80251a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80251aa:	ed9d 0a00 	vldr	s0, [sp]
 80251ae:	f002 fb37 	bl	8027820 <__kernel_sinf>
 80251b2:	eeb1 0a40 	vneg.f32	s0, s0
 80251b6:	e7d1      	b.n	802515c <cosf+0x1c>
 80251b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80251bc:	ed9d 0a00 	vldr	s0, [sp]
 80251c0:	f001 ff5e 	bl	8027080 <__kernel_cosf>
 80251c4:	e7ca      	b.n	802515c <cosf+0x1c>
 80251c6:	bf00      	nop
 80251c8:	3f490fd8 	.word	0x3f490fd8
 80251cc:	00000000 	.word	0x00000000

080251d0 <floorf>:
 80251d0:	ee10 2a10 	vmov	r2, s0
 80251d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80251d8:	0dcb      	lsrs	r3, r1, #23
 80251da:	3b7f      	subs	r3, #127	; 0x7f
 80251dc:	2b16      	cmp	r3, #22
 80251de:	dc17      	bgt.n	8025210 <floorf+0x40>
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	ee10 0a10 	vmov	r0, s0
 80251e6:	db19      	blt.n	802521c <floorf+0x4c>
 80251e8:	491a      	ldr	r1, [pc, #104]	; (8025254 <floorf+0x84>)
 80251ea:	4119      	asrs	r1, r3
 80251ec:	420a      	tst	r2, r1
 80251ee:	d022      	beq.n	8025236 <floorf+0x66>
 80251f0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8025258 <floorf+0x88>
 80251f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80251f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80251fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025200:	dd19      	ble.n	8025236 <floorf+0x66>
 8025202:	2a00      	cmp	r2, #0
 8025204:	db18      	blt.n	8025238 <floorf+0x68>
 8025206:	ea20 0301 	bic.w	r3, r0, r1
 802520a:	ee00 3a10 	vmov	s0, r3
 802520e:	4770      	bx	lr
 8025210:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025214:	d30f      	bcc.n	8025236 <floorf+0x66>
 8025216:	ee30 0a00 	vadd.f32	s0, s0, s0
 802521a:	4770      	bx	lr
 802521c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8025258 <floorf+0x88>
 8025220:	ee70 7a27 	vadd.f32	s15, s0, s15
 8025224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802522c:	dd03      	ble.n	8025236 <floorf+0x66>
 802522e:	2a00      	cmp	r2, #0
 8025230:	db08      	blt.n	8025244 <floorf+0x74>
 8025232:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 802525c <floorf+0x8c>
 8025236:	4770      	bx	lr
 8025238:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 802523c:	fa42 f303 	asr.w	r3, r2, r3
 8025240:	4418      	add	r0, r3
 8025242:	e7e0      	b.n	8025206 <floorf+0x36>
 8025244:	2900      	cmp	r1, #0
 8025246:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 802524a:	bf18      	it	ne
 802524c:	eeb0 0a67 	vmovne.f32	s0, s15
 8025250:	4770      	bx	lr
 8025252:	bf00      	nop
 8025254:	007fffff 	.word	0x007fffff
 8025258:	7149f2ca 	.word	0x7149f2ca
 802525c:	00000000 	.word	0x00000000

08025260 <frexpf>:
 8025260:	ee10 1a10 	vmov	r1, s0
 8025264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025268:	b410      	push	{r4}
 802526a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802526e:	f04f 0400 	mov.w	r4, #0
 8025272:	6004      	str	r4, [r0, #0]
 8025274:	da17      	bge.n	80252a6 <frexpf+0x46>
 8025276:	b1b3      	cbz	r3, 80252a6 <frexpf+0x46>
 8025278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802527c:	ee10 2a10 	vmov	r2, s0
 8025280:	da09      	bge.n	8025296 <frexpf+0x36>
 8025282:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80252b0 <frexpf+0x50>
 8025286:	ee60 7a27 	vmul.f32	s15, s0, s15
 802528a:	f06f 0418 	mvn.w	r4, #24
 802528e:	ee17 2a90 	vmov	r2, s15
 8025292:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8025296:	15db      	asrs	r3, r3, #23
 8025298:	3b7e      	subs	r3, #126	; 0x7e
 802529a:	4423      	add	r3, r4
 802529c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80252a0:	6003      	str	r3, [r0, #0]
 80252a2:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 80252a6:	ee00 1a10 	vmov	s0, r1
 80252aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80252ae:	4770      	bx	lr
 80252b0:	4c000000 	.word	0x4c000000
	...

080252c0 <ldexpf>:
 80252c0:	b510      	push	{r4, lr}
 80252c2:	ed2d 8b02 	vpush	{d8}
 80252c6:	4604      	mov	r4, r0
 80252c8:	eeb0 8a40 	vmov.f32	s16, s0
 80252cc:	f002 fc88 	bl	8027be0 <finitef>
 80252d0:	b120      	cbz	r0, 80252dc <ldexpf+0x1c>
 80252d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80252d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252da:	d104      	bne.n	80252e6 <ldexpf+0x26>
 80252dc:	eeb0 0a48 	vmov.f32	s0, s16
 80252e0:	ecbd 8b02 	vpop	{d8}
 80252e4:	bd10      	pop	{r4, pc}
 80252e6:	eeb0 0a48 	vmov.f32	s0, s16
 80252ea:	4620      	mov	r0, r4
 80252ec:	f000 f848 	bl	8025380 <scalbnf>
 80252f0:	eeb0 8a40 	vmov.f32	s16, s0
 80252f4:	f002 fc74 	bl	8027be0 <finitef>
 80252f8:	b120      	cbz	r0, 8025304 <ldexpf+0x44>
 80252fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80252fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025302:	d1eb      	bne.n	80252dc <ldexpf+0x1c>
 8025304:	f002 fc84 	bl	8027c10 <__errno>
 8025308:	eeb0 0a48 	vmov.f32	s0, s16
 802530c:	ecbd 8b02 	vpop	{d8}
 8025310:	2322      	movs	r3, #34	; 0x22
 8025312:	6003      	str	r3, [r0, #0]
 8025314:	bd10      	pop	{r4, pc}
 8025316:	bf00      	nop
	...

08025320 <roundf>:
 8025320:	b082      	sub	sp, #8
 8025322:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025326:	9a01      	ldr	r2, [sp, #4]
 8025328:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802532c:	3b7f      	subs	r3, #127	; 0x7f
 802532e:	2b16      	cmp	r3, #22
 8025330:	dc11      	bgt.n	8025356 <roundf+0x36>
 8025332:	2b00      	cmp	r3, #0
 8025334:	db1b      	blt.n	802536e <roundf+0x4e>
 8025336:	4811      	ldr	r0, [pc, #68]	; (802537c <roundf+0x5c>)
 8025338:	4118      	asrs	r0, r3
 802533a:	4202      	tst	r2, r0
 802533c:	d007      	beq.n	802534e <roundf+0x2e>
 802533e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8025342:	fa41 f303 	asr.w	r3, r1, r3
 8025346:	441a      	add	r2, r3
 8025348:	ea22 0200 	bic.w	r2, r2, r0
 802534c:	9201      	str	r2, [sp, #4]
 802534e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025352:	b002      	add	sp, #8
 8025354:	4770      	bx	lr
 8025356:	2b80      	cmp	r3, #128	; 0x80
 8025358:	d1f9      	bne.n	802534e <roundf+0x2e>
 802535a:	eddd 7a01 	vldr	s15, [sp, #4]
 802535e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8025362:	edcd 7a01 	vstr	s15, [sp, #4]
 8025366:	ed9d 0a01 	vldr	s0, [sp, #4]
 802536a:	b002      	add	sp, #8
 802536c:	4770      	bx	lr
 802536e:	3301      	adds	r3, #1
 8025370:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8025374:	d1ea      	bne.n	802534c <roundf+0x2c>
 8025376:	f042 527e 	orr.w	r2, r2, #1065353216	; 0x3f800000
 802537a:	e7e7      	b.n	802534c <roundf+0x2c>
 802537c:	007fffff 	.word	0x007fffff

08025380 <scalbnf>:
 8025380:	b508      	push	{r3, lr}
 8025382:	ee10 3a10 	vmov	r3, s0
 8025386:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802538a:	ed2d 8b02 	vpush	{d8}
 802538e:	d011      	beq.n	80253b4 <scalbnf+0x34>
 8025390:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8025394:	d211      	bcs.n	80253ba <scalbnf+0x3a>
 8025396:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 802539a:	d313      	bcc.n	80253c4 <scalbnf+0x44>
 802539c:	0dd2      	lsrs	r2, r2, #23
 802539e:	4402      	add	r2, r0
 80253a0:	2afe      	cmp	r2, #254	; 0xfe
 80253a2:	dc2e      	bgt.n	8025402 <scalbnf+0x82>
 80253a4:	2a00      	cmp	r2, #0
 80253a6:	dd1a      	ble.n	80253de <scalbnf+0x5e>
 80253a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80253ac:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80253b0:	ee00 3a10 	vmov	s0, r3
 80253b4:	ecbd 8b02 	vpop	{d8}
 80253b8:	bd08      	pop	{r3, pc}
 80253ba:	ecbd 8b02 	vpop	{d8}
 80253be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80253c2:	bd08      	pop	{r3, pc}
 80253c4:	4b1d      	ldr	r3, [pc, #116]	; (802543c <scalbnf+0xbc>)
 80253c6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8025440 <scalbnf+0xc0>
 80253ca:	4298      	cmp	r0, r3
 80253cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80253d0:	db22      	blt.n	8025418 <scalbnf+0x98>
 80253d2:	ee10 3a10 	vmov	r3, s0
 80253d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80253da:	3a19      	subs	r2, #25
 80253dc:	e7df      	b.n	802539e <scalbnf+0x1e>
 80253de:	f112 0f16 	cmn.w	r2, #22
 80253e2:	da1e      	bge.n	8025422 <scalbnf+0xa2>
 80253e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80253e8:	4298      	cmp	r0, r3
 80253ea:	dc0a      	bgt.n	8025402 <scalbnf+0x82>
 80253ec:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8025444 <scalbnf+0xc4>
 80253f0:	eef0 0a40 	vmov.f32	s1, s0
 80253f4:	eeb0 0a48 	vmov.f32	s0, s16
 80253f8:	f002 fbda 	bl	8027bb0 <copysignf>
 80253fc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8025400:	e7d8      	b.n	80253b4 <scalbnf+0x34>
 8025402:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8025448 <scalbnf+0xc8>
 8025406:	eef0 0a40 	vmov.f32	s1, s0
 802540a:	eeb0 0a48 	vmov.f32	s0, s16
 802540e:	f002 fbcf 	bl	8027bb0 <copysignf>
 8025412:	ee20 0a08 	vmul.f32	s0, s0, s16
 8025416:	e7cd      	b.n	80253b4 <scalbnf+0x34>
 8025418:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8025444 <scalbnf+0xc4>
 802541c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8025420:	e7c8      	b.n	80253b4 <scalbnf+0x34>
 8025422:	3219      	adds	r2, #25
 8025424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025428:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802542c:	eddf 7a07 	vldr	s15, [pc, #28]	; 802544c <scalbnf+0xcc>
 8025430:	ee00 3a10 	vmov	s0, r3
 8025434:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025438:	e7bc      	b.n	80253b4 <scalbnf+0x34>
 802543a:	bf00      	nop
 802543c:	ffff3cb0 	.word	0xffff3cb0
 8025440:	4c000000 	.word	0x4c000000
 8025444:	0da24260 	.word	0x0da24260
 8025448:	7149f2ca 	.word	0x7149f2ca
 802544c:	33000000 	.word	0x33000000

08025450 <sinf>:
 8025450:	b500      	push	{lr}
 8025452:	ee10 3a10 	vmov	r3, s0
 8025456:	4a21      	ldr	r2, [pc, #132]	; (80254dc <sinf+0x8c>)
 8025458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802545c:	4293      	cmp	r3, r2
 802545e:	b083      	sub	sp, #12
 8025460:	dd1a      	ble.n	8025498 <sinf+0x48>
 8025462:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025466:	db04      	blt.n	8025472 <sinf+0x22>
 8025468:	ee30 0a40 	vsub.f32	s0, s0, s0
 802546c:	b003      	add	sp, #12
 802546e:	f85d fb04 	ldr.w	pc, [sp], #4
 8025472:	4668      	mov	r0, sp
 8025474:	f001 fc6c 	bl	8026d50 <__ieee754_rem_pio2f>
 8025478:	f000 0003 	and.w	r0, r0, #3
 802547c:	2801      	cmp	r0, #1
 802547e:	d01d      	beq.n	80254bc <sinf+0x6c>
 8025480:	2802      	cmp	r0, #2
 8025482:	d011      	beq.n	80254a8 <sinf+0x58>
 8025484:	b308      	cbz	r0, 80254ca <sinf+0x7a>
 8025486:	eddd 0a01 	vldr	s1, [sp, #4]
 802548a:	ed9d 0a00 	vldr	s0, [sp]
 802548e:	f001 fdf7 	bl	8027080 <__kernel_cosf>
 8025492:	eeb1 0a40 	vneg.f32	s0, s0
 8025496:	e7e9      	b.n	802546c <sinf+0x1c>
 8025498:	2000      	movs	r0, #0
 802549a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80254e0 <sinf+0x90>
 802549e:	f002 f9bf 	bl	8027820 <__kernel_sinf>
 80254a2:	b003      	add	sp, #12
 80254a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80254a8:	2001      	movs	r0, #1
 80254aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80254ae:	ed9d 0a00 	vldr	s0, [sp]
 80254b2:	f002 f9b5 	bl	8027820 <__kernel_sinf>
 80254b6:	eeb1 0a40 	vneg.f32	s0, s0
 80254ba:	e7d7      	b.n	802546c <sinf+0x1c>
 80254bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80254c0:	ed9d 0a00 	vldr	s0, [sp]
 80254c4:	f001 fddc 	bl	8027080 <__kernel_cosf>
 80254c8:	e7d0      	b.n	802546c <sinf+0x1c>
 80254ca:	2001      	movs	r0, #1
 80254cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80254d0:	ed9d 0a00 	vldr	s0, [sp]
 80254d4:	f002 f9a4 	bl	8027820 <__kernel_sinf>
 80254d8:	e7c8      	b.n	802546c <sinf+0x1c>
 80254da:	bf00      	nop
 80254dc:	3f490fd8 	.word	0x3f490fd8
	...

080254f0 <sqrt>:
 80254f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80254f4:	ed2d 8b02 	vpush	{d8}
 80254f8:	b08b      	sub	sp, #44	; 0x2c
 80254fa:	ec55 4b10 	vmov	r4, r5, d0
 80254fe:	f000 fc27 	bl	8025d50 <__ieee754_sqrt>
 8025502:	4b27      	ldr	r3, [pc, #156]	; (80255a0 <sqrt+0xb0>)
 8025504:	eeb0 8a40 	vmov.f32	s16, s0
 8025508:	eef0 8a60 	vmov.f32	s17, s1
 802550c:	f993 6000 	ldrsb.w	r6, [r3]
 8025510:	1c73      	adds	r3, r6, #1
 8025512:	d012      	beq.n	802553a <sqrt+0x4a>
 8025514:	4622      	mov	r2, r4
 8025516:	462b      	mov	r3, r5
 8025518:	4620      	mov	r0, r4
 802551a:	4629      	mov	r1, r5
 802551c:	f7e7 fa68 	bl	800c9f0 <__aeabi_dcmpun>
 8025520:	4607      	mov	r7, r0
 8025522:	b950      	cbnz	r0, 802553a <sqrt+0x4a>
 8025524:	f04f 0800 	mov.w	r8, #0
 8025528:	f04f 0900 	mov.w	r9, #0
 802552c:	4620      	mov	r0, r4
 802552e:	4629      	mov	r1, r5
 8025530:	4642      	mov	r2, r8
 8025532:	464b      	mov	r3, r9
 8025534:	f7e7 fa34 	bl	800c9a0 <__aeabi_dcmplt>
 8025538:	b940      	cbnz	r0, 802554c <sqrt+0x5c>
 802553a:	eeb0 0a48 	vmov.f32	s0, s16
 802553e:	eef0 0a68 	vmov.f32	s1, s17
 8025542:	b00b      	add	sp, #44	; 0x2c
 8025544:	ecbd 8b02 	vpop	{d8}
 8025548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802554c:	4b15      	ldr	r3, [pc, #84]	; (80255a4 <sqrt+0xb4>)
 802554e:	9708      	str	r7, [sp, #32]
 8025550:	2201      	movs	r2, #1
 8025552:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025556:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802555a:	e88d 000c 	stmia.w	sp, {r2, r3}
 802555e:	b196      	cbz	r6, 8025586 <sqrt+0x96>
 8025560:	4642      	mov	r2, r8
 8025562:	464b      	mov	r3, r9
 8025564:	4640      	mov	r0, r8
 8025566:	4649      	mov	r1, r9
 8025568:	f7e7 f8cc 	bl	800c704 <__aeabi_ddiv>
 802556c:	2e02      	cmp	r6, #2
 802556e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025572:	d10a      	bne.n	802558a <sqrt+0x9a>
 8025574:	f002 fb4c 	bl	8027c10 <__errno>
 8025578:	2321      	movs	r3, #33	; 0x21
 802557a:	6003      	str	r3, [r0, #0]
 802557c:	9b08      	ldr	r3, [sp, #32]
 802557e:	b953      	cbnz	r3, 8025596 <sqrt+0xa6>
 8025580:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025584:	e7d9      	b.n	802553a <sqrt+0x4a>
 8025586:	e9cd 8906 	strd	r8, r9, [sp, #24]
 802558a:	4668      	mov	r0, sp
 802558c:	f002 f990 	bl	80278b0 <matherr>
 8025590:	2800      	cmp	r0, #0
 8025592:	d1f3      	bne.n	802557c <sqrt+0x8c>
 8025594:	e7ee      	b.n	8025574 <sqrt+0x84>
 8025596:	f002 fb3b 	bl	8027c10 <__errno>
 802559a:	9b08      	ldr	r3, [sp, #32]
 802559c:	6003      	str	r3, [r0, #0]
 802559e:	e7ef      	b.n	8025580 <sqrt+0x90>
 80255a0:	2000108e 	.word	0x2000108e
 80255a4:	080307b0 	.word	0x080307b0
	...

080255b0 <asinf>:
 80255b0:	b510      	push	{r4, lr}
 80255b2:	ed2d 8b02 	vpush	{d8}
 80255b6:	4c29      	ldr	r4, [pc, #164]	; (802565c <asinf+0xac>)
 80255b8:	b08a      	sub	sp, #40	; 0x28
 80255ba:	eeb0 8a40 	vmov.f32	s16, s0
 80255be:	f000 fc97 	bl	8025ef0 <__ieee754_asinf>
 80255c2:	f994 3000 	ldrsb.w	r3, [r4]
 80255c6:	3301      	adds	r3, #1
 80255c8:	eef0 8a40 	vmov.f32	s17, s0
 80255cc:	d034      	beq.n	8025638 <asinf+0x88>
 80255ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80255d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255d6:	d62f      	bvs.n	8025638 <asinf+0x88>
 80255d8:	eeb0 0a48 	vmov.f32	s0, s16
 80255dc:	f002 faf8 	bl	8027bd0 <fabsf>
 80255e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80255e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80255e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255ec:	dd24      	ble.n	8025638 <asinf+0x88>
 80255ee:	2301      	movs	r3, #1
 80255f0:	4a1b      	ldr	r2, [pc, #108]	; (8025660 <asinf+0xb0>)
 80255f2:	9300      	str	r3, [sp, #0]
 80255f4:	ee18 0a10 	vmov	r0, s16
 80255f8:	2300      	movs	r3, #0
 80255fa:	9201      	str	r2, [sp, #4]
 80255fc:	9308      	str	r3, [sp, #32]
 80255fe:	f7e6 ff03 	bl	800c408 <__aeabi_f2d>
 8025602:	4602      	mov	r2, r0
 8025604:	460b      	mov	r3, r1
 8025606:	4817      	ldr	r0, [pc, #92]	; (8025664 <asinf+0xb4>)
 8025608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802560c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025610:	f002 f956 	bl	80278c0 <nan>
 8025614:	f994 3000 	ldrsb.w	r3, [r4]
 8025618:	2b02      	cmp	r3, #2
 802561a:	ed8d 0b06 	vstr	d0, [sp, #24]
 802561e:	d011      	beq.n	8025644 <asinf+0x94>
 8025620:	4668      	mov	r0, sp
 8025622:	f002 f945 	bl	80278b0 <matherr>
 8025626:	b168      	cbz	r0, 8025644 <asinf+0x94>
 8025628:	9b08      	ldr	r3, [sp, #32]
 802562a:	b993      	cbnz	r3, 8025652 <asinf+0xa2>
 802562c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025630:	f7e7 fa1e 	bl	800ca70 <__aeabi_d2f>
 8025634:	ee08 0a90 	vmov	s17, r0
 8025638:	eeb0 0a68 	vmov.f32	s0, s17
 802563c:	b00a      	add	sp, #40	; 0x28
 802563e:	ecbd 8b02 	vpop	{d8}
 8025642:	bd10      	pop	{r4, pc}
 8025644:	f002 fae4 	bl	8027c10 <__errno>
 8025648:	2321      	movs	r3, #33	; 0x21
 802564a:	6003      	str	r3, [r0, #0]
 802564c:	9b08      	ldr	r3, [sp, #32]
 802564e:	2b00      	cmp	r3, #0
 8025650:	d0ec      	beq.n	802562c <asinf+0x7c>
 8025652:	f002 fadd 	bl	8027c10 <__errno>
 8025656:	9b08      	ldr	r3, [sp, #32]
 8025658:	6003      	str	r3, [r0, #0]
 802565a:	e7e7      	b.n	802562c <asinf+0x7c>
 802565c:	2000108e 	.word	0x2000108e
 8025660:	080307c0 	.word	0x080307c0
 8025664:	0802f9b0 	.word	0x0802f9b0
	...

08025670 <atan2f>:
 8025670:	f000 bd3e 	b.w	80260f0 <__ieee754_atan2f>
	...

08025680 <expf>:
 8025680:	b5d0      	push	{r4, r6, r7, lr}
 8025682:	ed2d 8b02 	vpush	{d8}
 8025686:	4c37      	ldr	r4, [pc, #220]	; (8025764 <expf+0xe4>)
 8025688:	b08a      	sub	sp, #40	; 0x28
 802568a:	eeb0 8a40 	vmov.f32	s16, s0
 802568e:	f000 fdef 	bl	8026270 <__ieee754_expf>
 8025692:	f994 3000 	ldrsb.w	r3, [r4]
 8025696:	3301      	adds	r3, #1
 8025698:	eef0 8a40 	vmov.f32	s17, s0
 802569c:	d03a      	beq.n	8025714 <expf+0x94>
 802569e:	eeb0 0a48 	vmov.f32	s0, s16
 80256a2:	f002 fa9d 	bl	8027be0 <finitef>
 80256a6:	2800      	cmp	r0, #0
 80256a8:	d034      	beq.n	8025714 <expf+0x94>
 80256aa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8025768 <expf+0xe8>
 80256ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80256b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256b6:	dc33      	bgt.n	8025720 <expf+0xa0>
 80256b8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 802576c <expf+0xec>
 80256bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80256c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256c4:	d526      	bpl.n	8025714 <expf+0x94>
 80256c6:	2304      	movs	r3, #4
 80256c8:	4a29      	ldr	r2, [pc, #164]	; (8025770 <expf+0xf0>)
 80256ca:	9300      	str	r3, [sp, #0]
 80256cc:	ee18 0a10 	vmov	r0, s16
 80256d0:	2300      	movs	r3, #0
 80256d2:	9308      	str	r3, [sp, #32]
 80256d4:	9201      	str	r2, [sp, #4]
 80256d6:	f7e6 fe97 	bl	800c408 <__aeabi_f2d>
 80256da:	f994 3000 	ldrsb.w	r3, [r4]
 80256de:	2600      	movs	r6, #0
 80256e0:	2700      	movs	r7, #0
 80256e2:	2b02      	cmp	r3, #2
 80256e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80256e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80256ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80256f0:	d033      	beq.n	802575a <expf+0xda>
 80256f2:	4668      	mov	r0, sp
 80256f4:	f002 f8dc 	bl	80278b0 <matherr>
 80256f8:	2800      	cmp	r0, #0
 80256fa:	d02e      	beq.n	802575a <expf+0xda>
 80256fc:	9b08      	ldr	r3, [sp, #32]
 80256fe:	b11b      	cbz	r3, 8025708 <expf+0x88>
 8025700:	f002 fa86 	bl	8027c10 <__errno>
 8025704:	9b08      	ldr	r3, [sp, #32]
 8025706:	6003      	str	r3, [r0, #0]
 8025708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802570c:	f7e7 f9b0 	bl	800ca70 <__aeabi_d2f>
 8025710:	ee08 0a90 	vmov	s17, r0
 8025714:	eeb0 0a68 	vmov.f32	s0, s17
 8025718:	b00a      	add	sp, #40	; 0x28
 802571a:	ecbd 8b02 	vpop	{d8}
 802571e:	bdd0      	pop	{r4, r6, r7, pc}
 8025720:	2303      	movs	r3, #3
 8025722:	4a13      	ldr	r2, [pc, #76]	; (8025770 <expf+0xf0>)
 8025724:	9300      	str	r3, [sp, #0]
 8025726:	ee18 0a10 	vmov	r0, s16
 802572a:	2300      	movs	r3, #0
 802572c:	9308      	str	r3, [sp, #32]
 802572e:	9201      	str	r2, [sp, #4]
 8025730:	f7e6 fe6a 	bl	800c408 <__aeabi_f2d>
 8025734:	f994 3000 	ldrsb.w	r3, [r4]
 8025738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802573c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025740:	b92b      	cbnz	r3, 802574e <expf+0xce>
 8025742:	4b0c      	ldr	r3, [pc, #48]	; (8025774 <expf+0xf4>)
 8025744:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025748:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802574c:	e7d1      	b.n	80256f2 <expf+0x72>
 802574e:	490a      	ldr	r1, [pc, #40]	; (8025778 <expf+0xf8>)
 8025750:	2000      	movs	r0, #0
 8025752:	2b02      	cmp	r3, #2
 8025754:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025758:	d1cb      	bne.n	80256f2 <expf+0x72>
 802575a:	f002 fa59 	bl	8027c10 <__errno>
 802575e:	2322      	movs	r3, #34	; 0x22
 8025760:	6003      	str	r3, [r0, #0]
 8025762:	e7cb      	b.n	80256fc <expf+0x7c>
 8025764:	2000108e 	.word	0x2000108e
 8025768:	42b17180 	.word	0x42b17180
 802576c:	c2cff1b5 	.word	0xc2cff1b5
 8025770:	080307d0 	.word	0x080307d0
 8025774:	47efffff 	.word	0x47efffff
 8025778:	7ff00000 	.word	0x7ff00000
 802577c:	00000000 	.word	0x00000000

08025780 <fmodf>:
 8025780:	b5d0      	push	{r4, r6, r7, lr}
 8025782:	ed2d 8b02 	vpush	{d8}
 8025786:	b08a      	sub	sp, #40	; 0x28
 8025788:	eef0 8a40 	vmov.f32	s17, s0
 802578c:	eeb0 8a60 	vmov.f32	s16, s1
 8025790:	f000 fe46 	bl	8026420 <__ieee754_fmodf>
 8025794:	4b28      	ldr	r3, [pc, #160]	; (8025838 <fmodf+0xb8>)
 8025796:	f993 4000 	ldrsb.w	r4, [r3]
 802579a:	1c63      	adds	r3, r4, #1
 802579c:	d031      	beq.n	8025802 <fmodf+0x82>
 802579e:	eeb4 8a48 	vcmp.f32	s16, s16
 80257a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257a6:	d62c      	bvs.n	8025802 <fmodf+0x82>
 80257a8:	eef4 8a68 	vcmp.f32	s17, s17
 80257ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257b0:	d627      	bvs.n	8025802 <fmodf+0x82>
 80257b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80257b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257ba:	d122      	bne.n	8025802 <fmodf+0x82>
 80257bc:	2301      	movs	r3, #1
 80257be:	4a1f      	ldr	r2, [pc, #124]	; (802583c <fmodf+0xbc>)
 80257c0:	9300      	str	r3, [sp, #0]
 80257c2:	ee18 0a90 	vmov	r0, s17
 80257c6:	2300      	movs	r3, #0
 80257c8:	9201      	str	r2, [sp, #4]
 80257ca:	9308      	str	r3, [sp, #32]
 80257cc:	f7e6 fe1c 	bl	800c408 <__aeabi_f2d>
 80257d0:	4606      	mov	r6, r0
 80257d2:	460f      	mov	r7, r1
 80257d4:	ee18 0a10 	vmov	r0, s16
 80257d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80257dc:	f7e6 fe14 	bl	800c408 <__aeabi_f2d>
 80257e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80257e4:	b98c      	cbnz	r4, 802580a <fmodf+0x8a>
 80257e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80257ea:	4668      	mov	r0, sp
 80257ec:	f002 f860 	bl	80278b0 <matherr>
 80257f0:	b1a8      	cbz	r0, 802581e <fmodf+0x9e>
 80257f2:	9b08      	ldr	r3, [sp, #32]
 80257f4:	b9d3      	cbnz	r3, 802582c <fmodf+0xac>
 80257f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80257fa:	f7e7 f939 	bl	800ca70 <__aeabi_d2f>
 80257fe:	ee00 0a10 	vmov	s0, r0
 8025802:	b00a      	add	sp, #40	; 0x28
 8025804:	ecbd 8b02 	vpop	{d8}
 8025808:	bdd0      	pop	{r4, r6, r7, pc}
 802580a:	2200      	movs	r2, #0
 802580c:	2300      	movs	r3, #0
 802580e:	4610      	mov	r0, r2
 8025810:	4619      	mov	r1, r3
 8025812:	f7e6 ff77 	bl	800c704 <__aeabi_ddiv>
 8025816:	2c02      	cmp	r4, #2
 8025818:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802581c:	d1e5      	bne.n	80257ea <fmodf+0x6a>
 802581e:	f002 f9f7 	bl	8027c10 <__errno>
 8025822:	2321      	movs	r3, #33	; 0x21
 8025824:	6003      	str	r3, [r0, #0]
 8025826:	9b08      	ldr	r3, [sp, #32]
 8025828:	2b00      	cmp	r3, #0
 802582a:	d0e4      	beq.n	80257f6 <fmodf+0x76>
 802582c:	f002 f9f0 	bl	8027c10 <__errno>
 8025830:	9b08      	ldr	r3, [sp, #32]
 8025832:	6003      	str	r3, [r0, #0]
 8025834:	e7df      	b.n	80257f6 <fmodf+0x76>
 8025836:	bf00      	nop
 8025838:	2000108e 	.word	0x2000108e
 802583c:	080307e0 	.word	0x080307e0

08025840 <logf>:
 8025840:	b510      	push	{r4, lr}
 8025842:	ed2d 8b02 	vpush	{d8}
 8025846:	b08a      	sub	sp, #40	; 0x28
 8025848:	eeb0 8a40 	vmov.f32	s16, s0
 802584c:	f000 fe78 	bl	8026540 <__ieee754_logf>
 8025850:	4b34      	ldr	r3, [pc, #208]	; (8025924 <logf+0xe4>)
 8025852:	f993 4000 	ldrsb.w	r4, [r3]
 8025856:	1c63      	adds	r3, r4, #1
 8025858:	d009      	beq.n	802586e <logf+0x2e>
 802585a:	eeb4 8a48 	vcmp.f32	s16, s16
 802585e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025862:	d604      	bvs.n	802586e <logf+0x2e>
 8025864:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8025868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802586c:	dd03      	ble.n	8025876 <logf+0x36>
 802586e:	b00a      	add	sp, #40	; 0x28
 8025870:	ecbd 8b02 	vpop	{d8}
 8025874:	bd10      	pop	{r4, pc}
 8025876:	4b2c      	ldr	r3, [pc, #176]	; (8025928 <logf+0xe8>)
 8025878:	9301      	str	r3, [sp, #4]
 802587a:	ee18 0a10 	vmov	r0, s16
 802587e:	2300      	movs	r3, #0
 8025880:	9308      	str	r3, [sp, #32]
 8025882:	f7e6 fdc1 	bl	800c408 <__aeabi_f2d>
 8025886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802588a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802588e:	b9dc      	cbnz	r4, 80258c8 <logf+0x88>
 8025890:	4b26      	ldr	r3, [pc, #152]	; (802592c <logf+0xec>)
 8025892:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8025896:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802589e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80258a2:	d136      	bne.n	8025912 <logf+0xd2>
 80258a4:	2302      	movs	r3, #2
 80258a6:	9300      	str	r3, [sp, #0]
 80258a8:	4668      	mov	r0, sp
 80258aa:	f002 f801 	bl	80278b0 <matherr>
 80258ae:	b1c0      	cbz	r0, 80258e2 <logf+0xa2>
 80258b0:	9b08      	ldr	r3, [sp, #32]
 80258b2:	b9db      	cbnz	r3, 80258ec <logf+0xac>
 80258b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80258b8:	f7e7 f8da 	bl	800ca70 <__aeabi_d2f>
 80258bc:	ee00 0a10 	vmov	s0, r0
 80258c0:	b00a      	add	sp, #40	; 0x28
 80258c2:	ecbd 8b02 	vpop	{d8}
 80258c6:	bd10      	pop	{r4, pc}
 80258c8:	4b19      	ldr	r3, [pc, #100]	; (8025930 <logf+0xf0>)
 80258ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80258ce:	2200      	movs	r2, #0
 80258d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80258d8:	d10d      	bne.n	80258f6 <logf+0xb6>
 80258da:	2302      	movs	r3, #2
 80258dc:	429c      	cmp	r4, r3
 80258de:	9300      	str	r3, [sp, #0]
 80258e0:	d1e2      	bne.n	80258a8 <logf+0x68>
 80258e2:	f002 f995 	bl	8027c10 <__errno>
 80258e6:	2322      	movs	r3, #34	; 0x22
 80258e8:	6003      	str	r3, [r0, #0]
 80258ea:	e7e1      	b.n	80258b0 <logf+0x70>
 80258ec:	f002 f990 	bl	8027c10 <__errno>
 80258f0:	9b08      	ldr	r3, [sp, #32]
 80258f2:	6003      	str	r3, [r0, #0]
 80258f4:	e7de      	b.n	80258b4 <logf+0x74>
 80258f6:	2301      	movs	r3, #1
 80258f8:	2c02      	cmp	r4, #2
 80258fa:	9300      	str	r3, [sp, #0]
 80258fc:	d10b      	bne.n	8025916 <logf+0xd6>
 80258fe:	f002 f987 	bl	8027c10 <__errno>
 8025902:	2321      	movs	r3, #33	; 0x21
 8025904:	6003      	str	r3, [r0, #0]
 8025906:	480b      	ldr	r0, [pc, #44]	; (8025934 <logf+0xf4>)
 8025908:	f001 ffda 	bl	80278c0 <nan>
 802590c:	ed8d 0b06 	vstr	d0, [sp, #24]
 8025910:	e7ce      	b.n	80258b0 <logf+0x70>
 8025912:	2301      	movs	r3, #1
 8025914:	9300      	str	r3, [sp, #0]
 8025916:	4668      	mov	r0, sp
 8025918:	f001 ffca 	bl	80278b0 <matherr>
 802591c:	2800      	cmp	r0, #0
 802591e:	d1f2      	bne.n	8025906 <logf+0xc6>
 8025920:	e7ed      	b.n	80258fe <logf+0xbe>
 8025922:	bf00      	nop
 8025924:	2000108e 	.word	0x2000108e
 8025928:	080307f0 	.word	0x080307f0
 802592c:	c7efffff 	.word	0xc7efffff
 8025930:	fff00000 	.word	0xfff00000
 8025934:	0802f9b0 	.word	0x0802f9b0
	...

08025940 <powf>:
 8025940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025942:	ed2d 8b04 	vpush	{d8-d9}
 8025946:	4db3      	ldr	r5, [pc, #716]	; (8025c14 <powf+0x2d4>)
 8025948:	b08b      	sub	sp, #44	; 0x2c
 802594a:	eef0 8a40 	vmov.f32	s17, s0
 802594e:	eeb0 8a60 	vmov.f32	s16, s1
 8025952:	f000 ff05 	bl	8026760 <__ieee754_powf>
 8025956:	f995 4000 	ldrsb.w	r4, [r5]
 802595a:	1c63      	adds	r3, r4, #1
 802595c:	eeb0 9a40 	vmov.f32	s18, s0
 8025960:	d02e      	beq.n	80259c0 <powf+0x80>
 8025962:	eeb4 8a48 	vcmp.f32	s16, s16
 8025966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802596a:	d629      	bvs.n	80259c0 <powf+0x80>
 802596c:	eef4 8a68 	vcmp.f32	s17, s17
 8025970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025974:	f180 80a2 	bvs.w	8025abc <powf+0x17c>
 8025978:	eef5 8a40 	vcmp.f32	s17, #0.0
 802597c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025980:	d124      	bne.n	80259cc <powf+0x8c>
 8025982:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8025986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802598a:	d159      	bne.n	8025a40 <powf+0x100>
 802598c:	2301      	movs	r3, #1
 802598e:	4aa2      	ldr	r2, [pc, #648]	; (8025c18 <powf+0x2d8>)
 8025990:	9300      	str	r3, [sp, #0]
 8025992:	ee18 0a90 	vmov	r0, s17
 8025996:	2300      	movs	r3, #0
 8025998:	9201      	str	r2, [sp, #4]
 802599a:	9308      	str	r3, [sp, #32]
 802599c:	f7e6 fd34 	bl	800c408 <__aeabi_f2d>
 80259a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80259a4:	ee18 0a10 	vmov	r0, s16
 80259a8:	f7e6 fd2e 	bl	800c408 <__aeabi_f2d>
 80259ac:	2200      	movs	r2, #0
 80259ae:	2300      	movs	r3, #0
 80259b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80259b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80259b8:	2c00      	cmp	r4, #0
 80259ba:	d067      	beq.n	8025a8c <powf+0x14c>
 80259bc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80259c0:	eeb0 0a49 	vmov.f32	s0, s18
 80259c4:	b00b      	add	sp, #44	; 0x2c
 80259c6:	ecbd 8b04 	vpop	{d8-d9}
 80259ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80259cc:	f002 f908 	bl	8027be0 <finitef>
 80259d0:	4604      	mov	r4, r0
 80259d2:	2800      	cmp	r0, #0
 80259d4:	f000 8091 	beq.w	8025afa <powf+0x1ba>
 80259d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80259dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259e0:	d1ee      	bne.n	80259c0 <powf+0x80>
 80259e2:	eeb0 0a68 	vmov.f32	s0, s17
 80259e6:	f002 f8fb 	bl	8027be0 <finitef>
 80259ea:	2800      	cmp	r0, #0
 80259ec:	d0e8      	beq.n	80259c0 <powf+0x80>
 80259ee:	eeb0 0a48 	vmov.f32	s0, s16
 80259f2:	f002 f8f5 	bl	8027be0 <finitef>
 80259f6:	2800      	cmp	r0, #0
 80259f8:	d0e2      	beq.n	80259c0 <powf+0x80>
 80259fa:	2304      	movs	r3, #4
 80259fc:	4a86      	ldr	r2, [pc, #536]	; (8025c18 <powf+0x2d8>)
 80259fe:	9300      	str	r3, [sp, #0]
 8025a00:	ee18 0a90 	vmov	r0, s17
 8025a04:	2300      	movs	r3, #0
 8025a06:	9308      	str	r3, [sp, #32]
 8025a08:	9201      	str	r2, [sp, #4]
 8025a0a:	f7e6 fcfd 	bl	800c408 <__aeabi_f2d>
 8025a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025a12:	ee18 0a10 	vmov	r0, s16
 8025a16:	f7e6 fcf7 	bl	800c408 <__aeabi_f2d>
 8025a1a:	2600      	movs	r6, #0
 8025a1c:	2700      	movs	r7, #0
 8025a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025a22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a26:	f995 3000 	ldrsb.w	r3, [r5]
 8025a2a:	2b02      	cmp	r3, #2
 8025a2c:	d003      	beq.n	8025a36 <powf+0xf6>
 8025a2e:	4668      	mov	r0, sp
 8025a30:	f001 ff3e 	bl	80278b0 <matherr>
 8025a34:	bb80      	cbnz	r0, 8025a98 <powf+0x158>
 8025a36:	f002 f8eb 	bl	8027c10 <__errno>
 8025a3a:	2322      	movs	r3, #34	; 0x22
 8025a3c:	6003      	str	r3, [r0, #0]
 8025a3e:	e02b      	b.n	8025a98 <powf+0x158>
 8025a40:	eeb0 0a48 	vmov.f32	s0, s16
 8025a44:	f002 f8cc 	bl	8027be0 <finitef>
 8025a48:	2800      	cmp	r0, #0
 8025a4a:	d0b9      	beq.n	80259c0 <powf+0x80>
 8025a4c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8025a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a54:	d5b4      	bpl.n	80259c0 <powf+0x80>
 8025a56:	2301      	movs	r3, #1
 8025a58:	4a6f      	ldr	r2, [pc, #444]	; (8025c18 <powf+0x2d8>)
 8025a5a:	9300      	str	r3, [sp, #0]
 8025a5c:	ee18 0a90 	vmov	r0, s17
 8025a60:	2300      	movs	r3, #0
 8025a62:	9308      	str	r3, [sp, #32]
 8025a64:	9201      	str	r2, [sp, #4]
 8025a66:	f7e6 fccf 	bl	800c408 <__aeabi_f2d>
 8025a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025a6e:	ee18 0a10 	vmov	r0, s16
 8025a72:	f7e6 fcc9 	bl	800c408 <__aeabi_f2d>
 8025a76:	f995 3000 	ldrsb.w	r3, [r5]
 8025a7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025a7e:	2b00      	cmp	r3, #0
 8025a80:	f040 809b 	bne.w	8025bba <powf+0x27a>
 8025a84:	2200      	movs	r2, #0
 8025a86:	2300      	movs	r3, #0
 8025a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025a8c:	4668      	mov	r0, sp
 8025a8e:	f001 ff0f 	bl	80278b0 <matherr>
 8025a92:	2800      	cmp	r0, #0
 8025a94:	f000 808c 	beq.w	8025bb0 <powf+0x270>
 8025a98:	9b08      	ldr	r3, [sp, #32]
 8025a9a:	b11b      	cbz	r3, 8025aa4 <powf+0x164>
 8025a9c:	f002 f8b8 	bl	8027c10 <__errno>
 8025aa0:	9b08      	ldr	r3, [sp, #32]
 8025aa2:	6003      	str	r3, [r0, #0]
 8025aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025aa8:	f7e6 ffe2 	bl	800ca70 <__aeabi_d2f>
 8025aac:	ee09 0a10 	vmov	s18, r0
 8025ab0:	eeb0 0a49 	vmov.f32	s0, s18
 8025ab4:	b00b      	add	sp, #44	; 0x2c
 8025ab6:	ecbd 8b04 	vpop	{d8-d9}
 8025aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025abc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8025ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ac4:	f47f af7c 	bne.w	80259c0 <powf+0x80>
 8025ac8:	2301      	movs	r3, #1
 8025aca:	4a53      	ldr	r2, [pc, #332]	; (8025c18 <powf+0x2d8>)
 8025acc:	9300      	str	r3, [sp, #0]
 8025ace:	ee18 0a90 	vmov	r0, s17
 8025ad2:	2300      	movs	r3, #0
 8025ad4:	9201      	str	r2, [sp, #4]
 8025ad6:	9308      	str	r3, [sp, #32]
 8025ad8:	f7e6 fc96 	bl	800c408 <__aeabi_f2d>
 8025adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ae0:	ee18 0a10 	vmov	r0, s16
 8025ae4:	f7e6 fc90 	bl	800c408 <__aeabi_f2d>
 8025ae8:	4b4c      	ldr	r3, [pc, #304]	; (8025c1c <powf+0x2dc>)
 8025aea:	2200      	movs	r2, #0
 8025aec:	2c02      	cmp	r4, #2
 8025aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025af6:	d1c9      	bne.n	8025a8c <powf+0x14c>
 8025af8:	e760      	b.n	80259bc <powf+0x7c>
 8025afa:	eeb0 0a68 	vmov.f32	s0, s17
 8025afe:	f002 f86f 	bl	8027be0 <finitef>
 8025b02:	2800      	cmp	r0, #0
 8025b04:	f43f af68 	beq.w	80259d8 <powf+0x98>
 8025b08:	eeb0 0a48 	vmov.f32	s0, s16
 8025b0c:	f002 f868 	bl	8027be0 <finitef>
 8025b10:	2800      	cmp	r0, #0
 8025b12:	f43f af61 	beq.w	80259d8 <powf+0x98>
 8025b16:	eeb4 9a49 	vcmp.f32	s18, s18
 8025b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b1e:	f180 8087 	bvs.w	8025c30 <powf+0x2f0>
 8025b22:	4b3d      	ldr	r3, [pc, #244]	; (8025c18 <powf+0x2d8>)
 8025b24:	9408      	str	r4, [sp, #32]
 8025b26:	2203      	movs	r2, #3
 8025b28:	ee18 0a90 	vmov	r0, s17
 8025b2c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8025b30:	f7e6 fc6a 	bl	800c408 <__aeabi_f2d>
 8025b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025b38:	ee18 0a10 	vmov	r0, s16
 8025b3c:	f7e6 fc64 	bl	800c408 <__aeabi_f2d>
 8025b40:	f995 3000 	ldrsb.w	r3, [r5]
 8025b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	d13d      	bne.n	8025bc8 <powf+0x288>
 8025b4c:	4b34      	ldr	r3, [pc, #208]	; (8025c20 <powf+0x2e0>)
 8025b4e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8025b52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025b5e:	f57f af66 	bpl.w	8025a2e <powf+0xee>
 8025b62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025b66:	ee68 7a27 	vmul.f32	s15, s16, s15
 8025b6a:	ee17 0a90 	vmov	r0, s15
 8025b6e:	f7e6 fc4b 	bl	800c408 <__aeabi_f2d>
 8025b72:	4606      	mov	r6, r0
 8025b74:	460f      	mov	r7, r1
 8025b76:	ec47 6b10 	vmov	d0, r6, r7
 8025b7a:	f001 fea9 	bl	80278d0 <rint>
 8025b7e:	4630      	mov	r0, r6
 8025b80:	ec53 2b10 	vmov	r2, r3, d0
 8025b84:	4639      	mov	r1, r7
 8025b86:	f7e6 ff01 	bl	800c98c <__aeabi_dcmpeq>
 8025b8a:	2800      	cmp	r0, #0
 8025b8c:	d13f      	bne.n	8025c0e <powf+0x2ce>
 8025b8e:	4925      	ldr	r1, [pc, #148]	; (8025c24 <powf+0x2e4>)
 8025b90:	f995 3000 	ldrsb.w	r3, [r5]
 8025b94:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8025b98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025b9c:	e745      	b.n	8025a2a <powf+0xea>
 8025b9e:	4610      	mov	r0, r2
 8025ba0:	4619      	mov	r1, r3
 8025ba2:	f7e6 fdaf 	bl	800c704 <__aeabi_ddiv>
 8025ba6:	2c02      	cmp	r4, #2
 8025ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025bac:	f47f af6e 	bne.w	8025a8c <powf+0x14c>
 8025bb0:	f002 f82e 	bl	8027c10 <__errno>
 8025bb4:	2321      	movs	r3, #33	; 0x21
 8025bb6:	6003      	str	r3, [r0, #0]
 8025bb8:	e76e      	b.n	8025a98 <powf+0x158>
 8025bba:	491b      	ldr	r1, [pc, #108]	; (8025c28 <powf+0x2e8>)
 8025bbc:	2000      	movs	r0, #0
 8025bbe:	2b02      	cmp	r3, #2
 8025bc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025bc4:	d0f4      	beq.n	8025bb0 <powf+0x270>
 8025bc6:	e761      	b.n	8025a8c <powf+0x14c>
 8025bc8:	4918      	ldr	r1, [pc, #96]	; (8025c2c <powf+0x2ec>)
 8025bca:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8025bce:	2000      	movs	r0, #0
 8025bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025bd8:	f57f af27 	bpl.w	8025a2a <powf+0xea>
 8025bdc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025be0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8025be4:	ee17 0a90 	vmov	r0, s15
 8025be8:	f7e6 fc0e 	bl	800c408 <__aeabi_f2d>
 8025bec:	4606      	mov	r6, r0
 8025bee:	460f      	mov	r7, r1
 8025bf0:	ec47 6b10 	vmov	d0, r6, r7
 8025bf4:	f001 fe6c 	bl	80278d0 <rint>
 8025bf8:	4630      	mov	r0, r6
 8025bfa:	ec53 2b10 	vmov	r2, r3, d0
 8025bfe:	4639      	mov	r1, r7
 8025c00:	f7e6 fec4 	bl	800c98c <__aeabi_dcmpeq>
 8025c04:	b918      	cbnz	r0, 8025c0e <powf+0x2ce>
 8025c06:	4b08      	ldr	r3, [pc, #32]	; (8025c28 <powf+0x2e8>)
 8025c08:	2200      	movs	r2, #0
 8025c0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025c0e:	f995 3000 	ldrsb.w	r3, [r5]
 8025c12:	e70a      	b.n	8025a2a <powf+0xea>
 8025c14:	2000108e 	.word	0x2000108e
 8025c18:	08030800 	.word	0x08030800
 8025c1c:	3ff00000 	.word	0x3ff00000
 8025c20:	47efffff 	.word	0x47efffff
 8025c24:	c7efffff 	.word	0xc7efffff
 8025c28:	fff00000 	.word	0xfff00000
 8025c2c:	7ff00000 	.word	0x7ff00000
 8025c30:	4b0c      	ldr	r3, [pc, #48]	; (8025c64 <powf+0x324>)
 8025c32:	9408      	str	r4, [sp, #32]
 8025c34:	2201      	movs	r2, #1
 8025c36:	ee18 0a90 	vmov	r0, s17
 8025c3a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8025c3e:	f7e6 fbe3 	bl	800c408 <__aeabi_f2d>
 8025c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025c46:	ee18 0a10 	vmov	r0, s16
 8025c4a:	f7e6 fbdd 	bl	800c408 <__aeabi_f2d>
 8025c4e:	f995 4000 	ldrsb.w	r4, [r5]
 8025c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025c56:	2200      	movs	r2, #0
 8025c58:	2300      	movs	r3, #0
 8025c5a:	2c00      	cmp	r4, #0
 8025c5c:	d19f      	bne.n	8025b9e <powf+0x25e>
 8025c5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025c62:	e713      	b.n	8025a8c <powf+0x14c>
 8025c64:	08030800 	.word	0x08030800
	...

08025c70 <sincosf>:
 8025c70:	b538      	push	{r3, r4, r5, lr}
 8025c72:	ed2d 8b02 	vpush	{d8}
 8025c76:	4605      	mov	r5, r0
 8025c78:	460c      	mov	r4, r1
 8025c7a:	eeb0 8a40 	vmov.f32	s16, s0
 8025c7e:	f7ff fbe7 	bl	8025450 <sinf>
 8025c82:	ed85 0a00 	vstr	s0, [r5]
 8025c86:	eeb0 0a48 	vmov.f32	s0, s16
 8025c8a:	f7ff fa59 	bl	8025140 <cosf>
 8025c8e:	ecbd 8b02 	vpop	{d8}
 8025c92:	ed84 0a00 	vstr	s0, [r4]
 8025c96:	bd38      	pop	{r3, r4, r5, pc}
	...

08025ca0 <sqrtf>:
 8025ca0:	b510      	push	{r4, lr}
 8025ca2:	ed2d 8b02 	vpush	{d8}
 8025ca6:	b08a      	sub	sp, #40	; 0x28
 8025ca8:	eeb0 8a40 	vmov.f32	s16, s0
 8025cac:	f001 f998 	bl	8026fe0 <__ieee754_sqrtf>
 8025cb0:	4b24      	ldr	r3, [pc, #144]	; (8025d44 <sqrtf+0xa4>)
 8025cb2:	f993 4000 	ldrsb.w	r4, [r3]
 8025cb6:	1c63      	adds	r3, r4, #1
 8025cb8:	d009      	beq.n	8025cce <sqrtf+0x2e>
 8025cba:	eeb4 8a48 	vcmp.f32	s16, s16
 8025cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cc2:	d604      	bvs.n	8025cce <sqrtf+0x2e>
 8025cc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8025cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ccc:	d403      	bmi.n	8025cd6 <sqrtf+0x36>
 8025cce:	b00a      	add	sp, #40	; 0x28
 8025cd0:	ecbd 8b02 	vpop	{d8}
 8025cd4:	bd10      	pop	{r4, pc}
 8025cd6:	2301      	movs	r3, #1
 8025cd8:	4a1b      	ldr	r2, [pc, #108]	; (8025d48 <sqrtf+0xa8>)
 8025cda:	9300      	str	r3, [sp, #0]
 8025cdc:	ee18 0a10 	vmov	r0, s16
 8025ce0:	2300      	movs	r3, #0
 8025ce2:	9201      	str	r2, [sp, #4]
 8025ce4:	9308      	str	r3, [sp, #32]
 8025ce6:	f7e6 fb8f 	bl	800c408 <__aeabi_f2d>
 8025cea:	2200      	movs	r2, #0
 8025cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025cf4:	2300      	movs	r3, #0
 8025cf6:	b1bc      	cbz	r4, 8025d28 <sqrtf+0x88>
 8025cf8:	4610      	mov	r0, r2
 8025cfa:	4619      	mov	r1, r3
 8025cfc:	f7e6 fd02 	bl	800c704 <__aeabi_ddiv>
 8025d00:	2c02      	cmp	r4, #2
 8025d02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025d06:	d111      	bne.n	8025d2c <sqrtf+0x8c>
 8025d08:	f001 ff82 	bl	8027c10 <__errno>
 8025d0c:	2321      	movs	r3, #33	; 0x21
 8025d0e:	6003      	str	r3, [r0, #0]
 8025d10:	9b08      	ldr	r3, [sp, #32]
 8025d12:	b98b      	cbnz	r3, 8025d38 <sqrtf+0x98>
 8025d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025d18:	f7e6 feaa 	bl	800ca70 <__aeabi_d2f>
 8025d1c:	ee00 0a10 	vmov	s0, r0
 8025d20:	b00a      	add	sp, #40	; 0x28
 8025d22:	ecbd 8b02 	vpop	{d8}
 8025d26:	bd10      	pop	{r4, pc}
 8025d28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025d2c:	4668      	mov	r0, sp
 8025d2e:	f001 fdbf 	bl	80278b0 <matherr>
 8025d32:	2800      	cmp	r0, #0
 8025d34:	d1ec      	bne.n	8025d10 <sqrtf+0x70>
 8025d36:	e7e7      	b.n	8025d08 <sqrtf+0x68>
 8025d38:	f001 ff6a 	bl	8027c10 <__errno>
 8025d3c:	9b08      	ldr	r3, [sp, #32]
 8025d3e:	6003      	str	r3, [r0, #0]
 8025d40:	e7e8      	b.n	8025d14 <sqrtf+0x74>
 8025d42:	bf00      	nop
 8025d44:	2000108e 	.word	0x2000108e
 8025d48:	08030810 	.word	0x08030810
 8025d4c:	00000000 	.word	0x00000000

08025d50 <__ieee754_sqrt>:
 8025d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d54:	4863      	ldr	r0, [pc, #396]	; (8025ee4 <__ieee754_sqrt+0x194>)
 8025d56:	ec55 4b10 	vmov	r4, r5, d0
 8025d5a:	43a8      	bics	r0, r5
 8025d5c:	f000 8095 	beq.w	8025e8a <__ieee754_sqrt+0x13a>
 8025d60:	2d00      	cmp	r5, #0
 8025d62:	462b      	mov	r3, r5
 8025d64:	ee10 2a10 	vmov	r2, s0
 8025d68:	dd70      	ble.n	8025e4c <__ieee754_sqrt+0xfc>
 8025d6a:	152f      	asrs	r7, r5, #20
 8025d6c:	d07d      	beq.n	8025e6a <__ieee754_sqrt+0x11a>
 8025d6e:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8025d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025d76:	07f9      	lsls	r1, r7, #31
 8025d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025d7c:	d461      	bmi.n	8025e42 <__ieee754_sqrt+0xf2>
 8025d7e:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8025d82:	2600      	movs	r6, #0
 8025d84:	440b      	add	r3, r1
 8025d86:	107f      	asrs	r7, r7, #1
 8025d88:	0052      	lsls	r2, r2, #1
 8025d8a:	46b6      	mov	lr, r6
 8025d8c:	2016      	movs	r0, #22
 8025d8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8025d92:	eb0e 0401 	add.w	r4, lr, r1
 8025d96:	429c      	cmp	r4, r3
 8025d98:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8025d9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025da0:	dc03      	bgt.n	8025daa <__ieee754_sqrt+0x5a>
 8025da2:	1b1b      	subs	r3, r3, r4
 8025da4:	eb04 0e01 	add.w	lr, r4, r1
 8025da8:	440e      	add	r6, r1
 8025daa:	3801      	subs	r0, #1
 8025dac:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8025db0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8025db4:	d1ed      	bne.n	8025d92 <__ieee754_sqrt+0x42>
 8025db6:	4684      	mov	ip, r0
 8025db8:	2420      	movs	r4, #32
 8025dba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025dbe:	e009      	b.n	8025dd4 <__ieee754_sqrt+0x84>
 8025dc0:	d020      	beq.n	8025e04 <__ieee754_sqrt+0xb4>
 8025dc2:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8025dc6:	3c01      	subs	r4, #1
 8025dc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8025dcc:	442b      	add	r3, r5
 8025dce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025dd2:	d020      	beq.n	8025e16 <__ieee754_sqrt+0xc6>
 8025dd4:	4573      	cmp	r3, lr
 8025dd6:	eb01 050c 	add.w	r5, r1, ip
 8025dda:	ddf1      	ble.n	8025dc0 <__ieee754_sqrt+0x70>
 8025ddc:	2d00      	cmp	r5, #0
 8025dde:	eb05 0c01 	add.w	ip, r5, r1
 8025de2:	db09      	blt.n	8025df8 <__ieee754_sqrt+0xa8>
 8025de4:	46f0      	mov	r8, lr
 8025de6:	4295      	cmp	r5, r2
 8025de8:	eba3 030e 	sub.w	r3, r3, lr
 8025dec:	d900      	bls.n	8025df0 <__ieee754_sqrt+0xa0>
 8025dee:	3b01      	subs	r3, #1
 8025df0:	1b52      	subs	r2, r2, r5
 8025df2:	4408      	add	r0, r1
 8025df4:	46c6      	mov	lr, r8
 8025df6:	e7e4      	b.n	8025dc2 <__ieee754_sqrt+0x72>
 8025df8:	f1bc 0f00 	cmp.w	ip, #0
 8025dfc:	dbf2      	blt.n	8025de4 <__ieee754_sqrt+0x94>
 8025dfe:	f10e 0801 	add.w	r8, lr, #1
 8025e02:	e7f0      	b.n	8025de6 <__ieee754_sqrt+0x96>
 8025e04:	4295      	cmp	r5, r2
 8025e06:	d8dc      	bhi.n	8025dc2 <__ieee754_sqrt+0x72>
 8025e08:	2d00      	cmp	r5, #0
 8025e0a:	eb05 0c01 	add.w	ip, r5, r1
 8025e0e:	db4e      	blt.n	8025eae <__ieee754_sqrt+0x15e>
 8025e10:	4698      	mov	r8, r3
 8025e12:	2300      	movs	r3, #0
 8025e14:	e7ec      	b.n	8025df0 <__ieee754_sqrt+0xa0>
 8025e16:	4313      	orrs	r3, r2
 8025e18:	d002      	beq.n	8025e20 <__ieee754_sqrt+0xd0>
 8025e1a:	1c42      	adds	r2, r0, #1
 8025e1c:	d04b      	beq.n	8025eb6 <__ieee754_sqrt+0x166>
 8025e1e:	3001      	adds	r0, #1
 8025e20:	0840      	lsrs	r0, r0, #1
 8025e22:	1071      	asrs	r1, r6, #1
 8025e24:	07f3      	lsls	r3, r6, #31
 8025e26:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8025e2a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8025e2e:	bf48      	it	mi
 8025e30:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8025e34:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8025e38:	4602      	mov	r2, r0
 8025e3a:	ec43 2b10 	vmov	d0, r2, r3
 8025e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e42:	005b      	lsls	r3, r3, #1
 8025e44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8025e48:	0052      	lsls	r2, r2, #1
 8025e4a:	e798      	b.n	8025d7e <__ieee754_sqrt+0x2e>
 8025e4c:	ee10 1a10 	vmov	r1, s0
 8025e50:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8025e54:	4301      	orrs	r1, r0
 8025e56:	d028      	beq.n	8025eaa <__ieee754_sqrt+0x15a>
 8025e58:	bbad      	cbnz	r5, 8025ec6 <__ieee754_sqrt+0x176>
 8025e5a:	462f      	mov	r7, r5
 8025e5c:	0ad3      	lsrs	r3, r2, #11
 8025e5e:	3f15      	subs	r7, #21
 8025e60:	0552      	lsls	r2, r2, #21
 8025e62:	2b00      	cmp	r3, #0
 8025e64:	d0fa      	beq.n	8025e5c <__ieee754_sqrt+0x10c>
 8025e66:	02de      	lsls	r6, r3, #11
 8025e68:	d428      	bmi.n	8025ebc <__ieee754_sqrt+0x16c>
 8025e6a:	2400      	movs	r4, #0
 8025e6c:	e000      	b.n	8025e70 <__ieee754_sqrt+0x120>
 8025e6e:	4604      	mov	r4, r0
 8025e70:	005b      	lsls	r3, r3, #1
 8025e72:	02dd      	lsls	r5, r3, #11
 8025e74:	f104 0001 	add.w	r0, r4, #1
 8025e78:	d5f9      	bpl.n	8025e6e <__ieee754_sqrt+0x11e>
 8025e7a:	f1c0 0120 	rsb	r1, r0, #32
 8025e7e:	fa22 f101 	lsr.w	r1, r2, r1
 8025e82:	430b      	orrs	r3, r1
 8025e84:	1b3f      	subs	r7, r7, r4
 8025e86:	4082      	lsls	r2, r0
 8025e88:	e771      	b.n	8025d6e <__ieee754_sqrt+0x1e>
 8025e8a:	ee10 2a10 	vmov	r2, s0
 8025e8e:	462b      	mov	r3, r5
 8025e90:	ee10 0a10 	vmov	r0, s0
 8025e94:	4629      	mov	r1, r5
 8025e96:	f7e6 fb0b 	bl	800c4b0 <__aeabi_dmul>
 8025e9a:	4622      	mov	r2, r4
 8025e9c:	462b      	mov	r3, r5
 8025e9e:	f7e6 f955 	bl	800c14c <__adddf3>
 8025ea2:	ec41 0b10 	vmov	d0, r0, r1
 8025ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025eae:	f1bc 0f00 	cmp.w	ip, #0
 8025eb2:	daa4      	bge.n	8025dfe <__ieee754_sqrt+0xae>
 8025eb4:	e7ac      	b.n	8025e10 <__ieee754_sqrt+0xc0>
 8025eb6:	3601      	adds	r6, #1
 8025eb8:	4620      	mov	r0, r4
 8025eba:	e7b2      	b.n	8025e22 <__ieee754_sqrt+0xd2>
 8025ebc:	2000      	movs	r0, #0
 8025ebe:	2120      	movs	r1, #32
 8025ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8025ec4:	e7db      	b.n	8025e7e <__ieee754_sqrt+0x12e>
 8025ec6:	ee10 2a10 	vmov	r2, s0
 8025eca:	462b      	mov	r3, r5
 8025ecc:	4620      	mov	r0, r4
 8025ece:	4629      	mov	r1, r5
 8025ed0:	f7e6 f93a 	bl	800c148 <__aeabi_dsub>
 8025ed4:	4602      	mov	r2, r0
 8025ed6:	460b      	mov	r3, r1
 8025ed8:	f7e6 fc14 	bl	800c704 <__aeabi_ddiv>
 8025edc:	ec41 0b10 	vmov	d0, r0, r1
 8025ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ee4:	7ff00000 	.word	0x7ff00000
	...

08025ef0 <__ieee754_asinf>:
 8025ef0:	b538      	push	{r3, r4, r5, lr}
 8025ef2:	ee10 5a10 	vmov	r5, s0
 8025ef6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8025efa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8025efe:	ed2d 8b04 	vpush	{d8-d9}
 8025f02:	f000 8091 	beq.w	8026028 <__ieee754_asinf+0x138>
 8025f06:	dc79      	bgt.n	8025ffc <__ieee754_asinf+0x10c>
 8025f08:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8025f0c:	da0e      	bge.n	8025f2c <__ieee754_asinf+0x3c>
 8025f0e:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8025f12:	f280 8096 	bge.w	8026042 <__ieee754_asinf+0x152>
 8025f16:	eddf 7a64 	vldr	s15, [pc, #400]	; 80260a8 <__ieee754_asinf+0x1b8>
 8025f1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8025f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f2a:	dc6b      	bgt.n	8026004 <__ieee754_asinf+0x114>
 8025f2c:	f001 fe50 	bl	8027bd0 <fabsf>
 8025f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f34:	ee37 0a40 	vsub.f32	s0, s14, s0
 8025f38:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8025f3c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8025f40:	eddf 2a5a 	vldr	s5, [pc, #360]	; 80260ac <__ieee754_asinf+0x1bc>
 8025f44:	eddf 3a5a 	vldr	s7, [pc, #360]	; 80260b0 <__ieee754_asinf+0x1c0>
 8025f48:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 80260b4 <__ieee754_asinf+0x1c4>
 8025f4c:	eddf 4a5a 	vldr	s9, [pc, #360]	; 80260b8 <__ieee754_asinf+0x1c8>
 8025f50:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 80260bc <__ieee754_asinf+0x1cc>
 8025f54:	eddf 5a5a 	vldr	s11, [pc, #360]	; 80260c0 <__ieee754_asinf+0x1d0>
 8025f58:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 80260c4 <__ieee754_asinf+0x1d4>
 8025f5c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80260c8 <__ieee754_asinf+0x1d8>
 8025f60:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80260cc <__ieee754_asinf+0x1dc>
 8025f64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80260d0 <__ieee754_asinf+0x1e0>
 8025f68:	eee8 3a22 	vfma.f32	s7, s16, s5
 8025f6c:	eea8 4a03 	vfma.f32	s8, s16, s6
 8025f70:	eee8 4a23 	vfma.f32	s9, s16, s7
 8025f74:	eea8 5a04 	vfma.f32	s10, s16, s8
 8025f78:	eee8 5a24 	vfma.f32	s11, s16, s9
 8025f7c:	eee8 6a05 	vfma.f32	s13, s16, s10
 8025f80:	eea8 6a25 	vfma.f32	s12, s16, s11
 8025f84:	eea8 7a26 	vfma.f32	s14, s16, s13
 8025f88:	eee8 7a06 	vfma.f32	s15, s16, s12
 8025f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8025f90:	eeb0 9a47 	vmov.f32	s18, s14
 8025f94:	ee67 8a88 	vmul.f32	s17, s15, s16
 8025f98:	f001 f822 	bl	8026fe0 <__ieee754_sqrtf>
 8025f9c:	4b4d      	ldr	r3, [pc, #308]	; (80260d4 <__ieee754_asinf+0x1e4>)
 8025f9e:	429c      	cmp	r4, r3
 8025fa0:	dc33      	bgt.n	802600a <__ieee754_asinf+0x11a>
 8025fa2:	ee10 3a10 	vmov	r3, s0
 8025fa6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8025faa:	f023 030f 	bic.w	r3, r3, #15
 8025fae:	ee07 3a90 	vmov	s15, r3
 8025fb2:	eeb1 6a67 	vneg.f32	s12, s15
 8025fb6:	eea6 8a27 	vfma.f32	s16, s12, s15
 8025fba:	ee77 7a80 	vadd.f32	s15, s15, s0
 8025fbe:	eec8 5a89 	vdiv.f32	s11, s17, s18
 8025fc2:	ee88 5a27 	vdiv.f32	s10, s16, s15
 8025fc6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80260d8 <__ieee754_asinf+0x1e8>
 8025fca:	eddf 7a44 	vldr	s15, [pc, #272]	; 80260dc <__ieee754_asinf+0x1ec>
 8025fce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8025fd2:	eea5 7a66 	vfms.f32	s14, s10, s13
 8025fd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025fda:	eeb0 5a67 	vmov.f32	s10, s15
 8025fde:	eea6 5a26 	vfma.f32	s10, s12, s13
 8025fe2:	ee95 7a80 	vfnms.f32	s14, s11, s0
 8025fe6:	ee37 0a45 	vsub.f32	s0, s14, s10
 8025fea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8025fee:	ecbd 8b04 	vpop	{d8-d9}
 8025ff2:	2d00      	cmp	r5, #0
 8025ff4:	bfd8      	it	le
 8025ff6:	eeb1 0a40 	vnegle.f32	s0, s0
 8025ffa:	bd38      	pop	{r3, r4, r5, pc}
 8025ffc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026000:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8026004:	ecbd 8b04 	vpop	{d8-d9}
 8026008:	bd38      	pop	{r3, r4, r5, pc}
 802600a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 802600e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80260e0 <__ieee754_asinf+0x1f0>
 8026012:	eddf 7a34 	vldr	s15, [pc, #208]	; 80260e4 <__ieee754_asinf+0x1f4>
 8026016:	eea0 0a26 	vfma.f32	s0, s0, s13
 802601a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802601e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8026022:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8026026:	e7e2      	b.n	8025fee <__ieee754_asinf+0xfe>
 8026028:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80260d8 <__ieee754_asinf+0x1e8>
 802602c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80260e4 <__ieee754_asinf+0x1f4>
 8026030:	ee60 7a27 	vmul.f32	s15, s0, s15
 8026034:	ecbd 8b04 	vpop	{d8-d9}
 8026038:	eee0 7a07 	vfma.f32	s15, s0, s14
 802603c:	eeb0 0a67 	vmov.f32	s0, s15
 8026040:	bd38      	pop	{r3, r4, r5, pc}
 8026042:	ee60 7a00 	vmul.f32	s15, s0, s0
 8026046:	eddf 2a19 	vldr	s5, [pc, #100]	; 80260ac <__ieee754_asinf+0x1bc>
 802604a:	eddf 3a19 	vldr	s7, [pc, #100]	; 80260b0 <__ieee754_asinf+0x1c0>
 802604e:	eddf 4a1a 	vldr	s9, [pc, #104]	; 80260b8 <__ieee754_asinf+0x1c8>
 8026052:	ed9f 3a18 	vldr	s6, [pc, #96]	; 80260b4 <__ieee754_asinf+0x1c4>
 8026056:	ed9f 4a19 	vldr	s8, [pc, #100]	; 80260bc <__ieee754_asinf+0x1cc>
 802605a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80260c0 <__ieee754_asinf+0x1d0>
 802605e:	ed9f 5a19 	vldr	s10, [pc, #100]	; 80260c4 <__ieee754_asinf+0x1d4>
 8026062:	eddf 5a19 	vldr	s11, [pc, #100]	; 80260c8 <__ieee754_asinf+0x1d8>
 8026066:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80260cc <__ieee754_asinf+0x1dc>
 802606a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80260d0 <__ieee754_asinf+0x1e0>
 802606e:	eee7 3aa2 	vfma.f32	s7, s15, s5
 8026072:	ecbd 8b04 	vpop	{d8-d9}
 8026076:	eee7 4aa3 	vfma.f32	s9, s15, s7
 802607a:	eea7 4a83 	vfma.f32	s8, s15, s6
 802607e:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8026082:	eea7 5a84 	vfma.f32	s10, s15, s8
 8026086:	eee7 5aa6 	vfma.f32	s11, s15, s13
 802608a:	eea7 6a85 	vfma.f32	s12, s15, s10
 802608e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8026092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026096:	eee7 6a86 	vfma.f32	s13, s15, s12
 802609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802609e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80260a2:	eea0 0a07 	vfma.f32	s0, s0, s14
 80260a6:	bd38      	pop	{r3, r4, r5, pc}
 80260a8:	7149f2ca 	.word	0x7149f2ca
 80260ac:	3811ef08 	.word	0x3811ef08
 80260b0:	3a4f7f04 	.word	0x3a4f7f04
 80260b4:	3d9dc62e 	.word	0x3d9dc62e
 80260b8:	bd241146 	.word	0xbd241146
 80260bc:	bf303361 	.word	0xbf303361
 80260c0:	3e4e0aa8 	.word	0x3e4e0aa8
 80260c4:	4001572d 	.word	0x4001572d
 80260c8:	bea6b090 	.word	0xbea6b090
 80260cc:	c019d139 	.word	0xc019d139
 80260d0:	3e2aaaab 	.word	0x3e2aaaab
 80260d4:	3f799999 	.word	0x3f799999
 80260d8:	b33bbd2e 	.word	0xb33bbd2e
 80260dc:	3f490fdb 	.word	0x3f490fdb
 80260e0:	333bbd2e 	.word	0x333bbd2e
 80260e4:	3fc90fdb 	.word	0x3fc90fdb
	...

080260f0 <__ieee754_atan2f>:
 80260f0:	b510      	push	{r4, lr}
 80260f2:	b082      	sub	sp, #8
 80260f4:	edcd 0a01 	vstr	s1, [sp, #4]
 80260f8:	9b01      	ldr	r3, [sp, #4]
 80260fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80260fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8026102:	eef0 7a40 	vmov.f32	s15, s0
 8026106:	dc19      	bgt.n	802613c <__ieee754_atan2f+0x4c>
 8026108:	ee10 0a10 	vmov	r0, s0
 802610c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8026110:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026114:	dc12      	bgt.n	802613c <__ieee754_atan2f+0x4c>
 8026116:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 802611a:	d049      	beq.n	80261b0 <__ieee754_atan2f+0xc0>
 802611c:	179c      	asrs	r4, r3, #30
 802611e:	f004 0402 	and.w	r4, r4, #2
 8026122:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8026126:	b979      	cbnz	r1, 8026148 <__ieee754_atan2f+0x58>
 8026128:	2c02      	cmp	r4, #2
 802612a:	d03e      	beq.n	80261aa <__ieee754_atan2f+0xba>
 802612c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8026244 <__ieee754_atan2f+0x154>
 8026130:	2c03      	cmp	r4, #3
 8026132:	bf18      	it	ne
 8026134:	eeb0 0a67 	vmovne.f32	s0, s15
 8026138:	b002      	add	sp, #8
 802613a:	bd10      	pop	{r4, pc}
 802613c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8026140:	ee37 0a27 	vadd.f32	s0, s14, s15
 8026144:	b002      	add	sp, #8
 8026146:	bd10      	pop	{r4, pc}
 8026148:	b312      	cbz	r2, 8026190 <__ieee754_atan2f+0xa0>
 802614a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802614e:	d034      	beq.n	80261ba <__ieee754_atan2f+0xca>
 8026150:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026154:	d041      	beq.n	80261da <__ieee754_atan2f+0xea>
 8026156:	1a8a      	subs	r2, r1, r2
 8026158:	15d2      	asrs	r2, r2, #23
 802615a:	2a3c      	cmp	r2, #60	; 0x3c
 802615c:	dc22      	bgt.n	80261a4 <__ieee754_atan2f+0xb4>
 802615e:	2b00      	cmp	r3, #0
 8026160:	db54      	blt.n	802620c <__ieee754_atan2f+0x11c>
 8026162:	ed9d 0a01 	vldr	s0, [sp, #4]
 8026166:	ee87 0a80 	vdiv.f32	s0, s15, s0
 802616a:	f001 fd31 	bl	8027bd0 <fabsf>
 802616e:	f001 fc47 	bl	8027a00 <atanf>
 8026172:	2c01      	cmp	r4, #1
 8026174:	d043      	beq.n	80261fe <__ieee754_atan2f+0x10e>
 8026176:	2c02      	cmp	r4, #2
 8026178:	d038      	beq.n	80261ec <__ieee754_atan2f+0xfc>
 802617a:	2c00      	cmp	r4, #0
 802617c:	d0e2      	beq.n	8026144 <__ieee754_atan2f+0x54>
 802617e:	eddf 7a32 	vldr	s15, [pc, #200]	; 8026248 <__ieee754_atan2f+0x158>
 8026182:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802624c <__ieee754_atan2f+0x15c>
 8026186:	ee70 7a27 	vadd.f32	s15, s0, s15
 802618a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802618e:	e7d9      	b.n	8026144 <__ieee754_atan2f+0x54>
 8026190:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8026250 <__ieee754_atan2f+0x160>
 8026194:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8026254 <__ieee754_atan2f+0x164>
 8026198:	2800      	cmp	r0, #0
 802619a:	bfb8      	it	lt
 802619c:	eeb0 0a67 	vmovlt.f32	s0, s15
 80261a0:	b002      	add	sp, #8
 80261a2:	bd10      	pop	{r4, pc}
 80261a4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8026254 <__ieee754_atan2f+0x164>
 80261a8:	e7e3      	b.n	8026172 <__ieee754_atan2f+0x82>
 80261aa:	ed9f 0a28 	vldr	s0, [pc, #160]	; 802624c <__ieee754_atan2f+0x15c>
 80261ae:	e7c9      	b.n	8026144 <__ieee754_atan2f+0x54>
 80261b0:	b002      	add	sp, #8
 80261b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80261b6:	f001 bc23 	b.w	8027a00 <atanf>
 80261ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80261be:	d02a      	beq.n	8026216 <__ieee754_atan2f+0x126>
 80261c0:	2c02      	cmp	r4, #2
 80261c2:	d0f2      	beq.n	80261aa <__ieee754_atan2f+0xba>
 80261c4:	2c03      	cmp	r4, #3
 80261c6:	d033      	beq.n	8026230 <__ieee754_atan2f+0x140>
 80261c8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8026258 <__ieee754_atan2f+0x168>
 80261cc:	ed9f 0a23 	vldr	s0, [pc, #140]	; 802625c <__ieee754_atan2f+0x16c>
 80261d0:	2c01      	cmp	r4, #1
 80261d2:	bf08      	it	eq
 80261d4:	eeb0 0a67 	vmoveq.f32	s0, s15
 80261d8:	e7b4      	b.n	8026144 <__ieee754_atan2f+0x54>
 80261da:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8026254 <__ieee754_atan2f+0x164>
 80261de:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8026250 <__ieee754_atan2f+0x160>
 80261e2:	2800      	cmp	r0, #0
 80261e4:	bfa8      	it	ge
 80261e6:	eeb0 0a67 	vmovge.f32	s0, s15
 80261ea:	e7ab      	b.n	8026144 <__ieee754_atan2f+0x54>
 80261ec:	eddf 7a16 	vldr	s15, [pc, #88]	; 8026248 <__ieee754_atan2f+0x158>
 80261f0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 802624c <__ieee754_atan2f+0x15c>
 80261f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80261f8:	ee37 0a67 	vsub.f32	s0, s14, s15
 80261fc:	e7a2      	b.n	8026144 <__ieee754_atan2f+0x54>
 80261fe:	ee10 3a10 	vmov	r3, s0
 8026202:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026206:	ee00 3a10 	vmov	s0, r3
 802620a:	e79b      	b.n	8026144 <__ieee754_atan2f+0x54>
 802620c:	323c      	adds	r2, #60	; 0x3c
 802620e:	daa8      	bge.n	8026162 <__ieee754_atan2f+0x72>
 8026210:	ed9f 0a12 	vldr	s0, [pc, #72]	; 802625c <__ieee754_atan2f+0x16c>
 8026214:	e7ad      	b.n	8026172 <__ieee754_atan2f+0x82>
 8026216:	2c02      	cmp	r4, #2
 8026218:	d010      	beq.n	802623c <__ieee754_atan2f+0x14c>
 802621a:	2c03      	cmp	r4, #3
 802621c:	d00b      	beq.n	8026236 <__ieee754_atan2f+0x146>
 802621e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8026260 <__ieee754_atan2f+0x170>
 8026222:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8026264 <__ieee754_atan2f+0x174>
 8026226:	2c01      	cmp	r4, #1
 8026228:	bf08      	it	eq
 802622a:	eeb0 0a67 	vmoveq.f32	s0, s15
 802622e:	e789      	b.n	8026144 <__ieee754_atan2f+0x54>
 8026230:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8026244 <__ieee754_atan2f+0x154>
 8026234:	e786      	b.n	8026144 <__ieee754_atan2f+0x54>
 8026236:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026268 <__ieee754_atan2f+0x178>
 802623a:	e783      	b.n	8026144 <__ieee754_atan2f+0x54>
 802623c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 802626c <__ieee754_atan2f+0x17c>
 8026240:	e780      	b.n	8026144 <__ieee754_atan2f+0x54>
 8026242:	bf00      	nop
 8026244:	c0490fdb 	.word	0xc0490fdb
 8026248:	33bbbd2e 	.word	0x33bbbd2e
 802624c:	40490fdb 	.word	0x40490fdb
 8026250:	bfc90fdb 	.word	0xbfc90fdb
 8026254:	3fc90fdb 	.word	0x3fc90fdb
 8026258:	80000000 	.word	0x80000000
 802625c:	00000000 	.word	0x00000000
 8026260:	bf490fdb 	.word	0xbf490fdb
 8026264:	3f490fdb 	.word	0x3f490fdb
 8026268:	c016cbe4 	.word	0xc016cbe4
 802626c:	4016cbe4 	.word	0x4016cbe4

08026270 <__ieee754_expf>:
 8026270:	ee10 3a10 	vmov	r3, s0
 8026274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026278:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802627c:	d856      	bhi.n	802632c <__ieee754_expf+0xbc>
 802627e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8026282:	d056      	beq.n	8026332 <__ieee754_expf+0xc2>
 8026284:	4854      	ldr	r0, [pc, #336]	; (80263d8 <__ieee754_expf+0x168>)
 8026286:	4283      	cmp	r3, r0
 8026288:	dc73      	bgt.n	8026372 <__ieee754_expf+0x102>
 802628a:	2b00      	cmp	r3, #0
 802628c:	db69      	blt.n	8026362 <__ieee754_expf+0xf2>
 802628e:	4b53      	ldr	r3, [pc, #332]	; (80263dc <__ieee754_expf+0x16c>)
 8026290:	429a      	cmp	r2, r3
 8026292:	d955      	bls.n	8026340 <__ieee754_expf+0xd0>
 8026294:	4b52      	ldr	r3, [pc, #328]	; (80263e0 <__ieee754_expf+0x170>)
 8026296:	429a      	cmp	r2, r3
 8026298:	d87d      	bhi.n	8026396 <__ieee754_expf+0x126>
 802629a:	4b52      	ldr	r3, [pc, #328]	; (80263e4 <__ieee754_expf+0x174>)
 802629c:	4a52      	ldr	r2, [pc, #328]	; (80263e8 <__ieee754_expf+0x178>)
 802629e:	0088      	lsls	r0, r1, #2
 80262a0:	4403      	add	r3, r0
 80262a2:	ed93 7a00 	vldr	s14, [r3]
 80262a6:	4402      	add	r2, r0
 80262a8:	f1c1 0301 	rsb	r3, r1, #1
 80262ac:	ee70 4a47 	vsub.f32	s9, s0, s14
 80262b0:	ed92 7a00 	vldr	s14, [r2]
 80262b4:	1a5b      	subs	r3, r3, r1
 80262b6:	ee34 0ac7 	vsub.f32	s0, s9, s14
 80262ba:	ee60 7a00 	vmul.f32	s15, s0, s0
 80262be:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 80263ec <__ieee754_expf+0x17c>
 80262c2:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 80263f0 <__ieee754_expf+0x180>
 80262c6:	eddf 5a4b 	vldr	s11, [pc, #300]	; 80263f4 <__ieee754_expf+0x184>
 80262ca:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80263f8 <__ieee754_expf+0x188>
 80262ce:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80263fc <__ieee754_expf+0x18c>
 80262d2:	eea7 5a84 	vfma.f32	s10, s15, s8
 80262d6:	eee7 5a85 	vfma.f32	s11, s15, s10
 80262da:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80262de:	eee7 6a86 	vfma.f32	s13, s15, s12
 80262e2:	eeb0 6a40 	vmov.f32	s12, s0
 80262e6:	eea7 6ae6 	vfms.f32	s12, s15, s13
 80262ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d044      	beq.n	802637c <__ieee754_expf+0x10c>
 80262f2:	ee20 0a06 	vmul.f32	s0, s0, s12
 80262f6:	ee76 7ac6 	vsub.f32	s15, s13, s12
 80262fa:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 80262fe:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8026302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026306:	ee37 7a46 	vsub.f32	s14, s14, s12
 802630a:	ee37 7a64 	vsub.f32	s14, s14, s9
 802630e:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8026312:	da5a      	bge.n	80263ca <__ieee754_expf+0x15a>
 8026314:	ee10 2a10 	vmov	r2, s0
 8026318:	3364      	adds	r3, #100	; 0x64
 802631a:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
 802631e:	eddf 7a38 	vldr	s15, [pc, #224]	; 8026400 <__ieee754_expf+0x190>
 8026322:	ee00 3a10 	vmov	s0, r3
 8026326:	ee20 0a27 	vmul.f32	s0, s0, s15
 802632a:	4770      	bx	lr
 802632c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026330:	4770      	bx	lr
 8026332:	eddf 7a34 	vldr	s15, [pc, #208]	; 8026404 <__ieee754_expf+0x194>
 8026336:	2900      	cmp	r1, #0
 8026338:	bf18      	it	ne
 802633a:	eeb0 0a67 	vmovne.f32	s0, s15
 802633e:	4770      	bx	lr
 8026340:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8026344:	d213      	bcs.n	802636e <__ieee754_expf+0xfe>
 8026346:	eddf 7a30 	vldr	s15, [pc, #192]	; 8026408 <__ieee754_expf+0x198>
 802634a:	ee70 7a27 	vadd.f32	s15, s0, s15
 802634e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026352:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802635a:	dd08      	ble.n	802636e <__ieee754_expf+0xfe>
 802635c:	ee30 0a26 	vadd.f32	s0, s0, s13
 8026360:	4770      	bx	lr
 8026362:	4b2a      	ldr	r3, [pc, #168]	; (802640c <__ieee754_expf+0x19c>)
 8026364:	429a      	cmp	r2, r3
 8026366:	d992      	bls.n	802628e <__ieee754_expf+0x1e>
 8026368:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8026404 <__ieee754_expf+0x194>
 802636c:	4770      	bx	lr
 802636e:	2300      	movs	r3, #0
 8026370:	e7a3      	b.n	80262ba <__ieee754_expf+0x4a>
 8026372:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8026408 <__ieee754_expf+0x198>
 8026376:	ee20 0a00 	vmul.f32	s0, s0, s0
 802637a:	4770      	bx	lr
 802637c:	ee60 7a06 	vmul.f32	s15, s0, s12
 8026380:	ee76 6a66 	vsub.f32	s13, s12, s13
 8026384:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8026388:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802638c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8026390:	ee36 0a40 	vsub.f32	s0, s12, s0
 8026394:	4770      	bx	lr
 8026396:	4b1e      	ldr	r3, [pc, #120]	; (8026410 <__ieee754_expf+0x1a0>)
 8026398:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8026414 <__ieee754_expf+0x1a4>
 802639c:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8026418 <__ieee754_expf+0x1a8>
 80263a0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 802641c <__ieee754_expf+0x1ac>
 80263a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80263a8:	edd3 7a00 	vldr	s15, [r3]
 80263ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80263b0:	eef0 4a40 	vmov.f32	s9, s0
 80263b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80263b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80263bc:	ee17 3a90 	vmov	r3, s15
 80263c0:	eee7 4a46 	vfms.f32	s9, s14, s12
 80263c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80263c8:	e775      	b.n	80262b6 <__ieee754_expf+0x46>
 80263ca:	ee10 2a10 	vmov	r2, s0
 80263ce:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
 80263d2:	ee00 3a10 	vmov	s0, r3
 80263d6:	4770      	bx	lr
 80263d8:	42b17217 	.word	0x42b17217
 80263dc:	3eb17218 	.word	0x3eb17218
 80263e0:	3f851591 	.word	0x3f851591
 80263e4:	08030830 	.word	0x08030830
 80263e8:	08030840 	.word	0x08030840
 80263ec:	3331bb4c 	.word	0x3331bb4c
 80263f0:	b5ddea0e 	.word	0xb5ddea0e
 80263f4:	388ab355 	.word	0x388ab355
 80263f8:	bb360b61 	.word	0xbb360b61
 80263fc:	3e2aaaab 	.word	0x3e2aaaab
 8026400:	0d800000 	.word	0x0d800000
 8026404:	00000000 	.word	0x00000000
 8026408:	7149f2ca 	.word	0x7149f2ca
 802640c:	42cff1b5 	.word	0x42cff1b5
 8026410:	08030820 	.word	0x08030820
 8026414:	3fb8aa3b 	.word	0x3fb8aa3b
 8026418:	3f317180 	.word	0x3f317180
 802641c:	3717f7d1 	.word	0x3717f7d1

08026420 <__ieee754_fmodf>:
 8026420:	b4f0      	push	{r4, r5, r6, r7}
 8026422:	b082      	sub	sp, #8
 8026424:	edcd 0a01 	vstr	s1, [sp, #4]
 8026428:	9b01      	ldr	r3, [sp, #4]
 802642a:	f033 4500 	bics.w	r5, r3, #2147483648	; 0x80000000
 802642e:	d038      	beq.n	80264a2 <__ieee754_fmodf+0x82>
 8026430:	ee10 7a10 	vmov	r7, s0
 8026434:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8026438:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802643c:	da31      	bge.n	80264a2 <__ieee754_fmodf+0x82>
 802643e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8026442:	dc2e      	bgt.n	80264a2 <__ieee754_fmodf+0x82>
 8026444:	42aa      	cmp	r2, r5
 8026446:	db32      	blt.n	80264ae <__ieee754_fmodf+0x8e>
 8026448:	f007 4400 	and.w	r4, r7, #2147483648	; 0x80000000
 802644c:	d036      	beq.n	80264bc <__ieee754_fmodf+0x9c>
 802644e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8026452:	da3a      	bge.n	80264ca <__ieee754_fmodf+0xaa>
 8026454:	0210      	lsls	r0, r2, #8
 8026456:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 802645a:	d004      	beq.n	8026466 <__ieee754_fmodf+0x46>
 802645c:	0040      	lsls	r0, r0, #1
 802645e:	2800      	cmp	r0, #0
 8026460:	f101 31ff 	add.w	r1, r1, #4294967295
 8026464:	dcfa      	bgt.n	802645c <__ieee754_fmodf+0x3c>
 8026466:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 802646a:	db3c      	blt.n	80264e6 <__ieee754_fmodf+0xc6>
 802646c:	15e8      	asrs	r0, r5, #23
 802646e:	387f      	subs	r0, #127	; 0x7f
 8026470:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8026474:	db32      	blt.n	80264dc <__ieee754_fmodf+0xbc>
 8026476:	f3c7 0216 	ubfx	r2, r7, #0, #23
 802647a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802647e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8026482:	db25      	blt.n	80264d0 <__ieee754_fmodf+0xb0>
 8026484:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8026488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802648c:	1a09      	subs	r1, r1, r0
 802648e:	e002      	b.n	8026496 <__ieee754_fmodf+0x76>
 8026490:	d014      	beq.n	80264bc <__ieee754_fmodf+0x9c>
 8026492:	006a      	lsls	r2, r5, #1
 8026494:	3901      	subs	r1, #1
 8026496:	1ad5      	subs	r5, r2, r3
 8026498:	b161      	cbz	r1, 80264b4 <__ieee754_fmodf+0x94>
 802649a:	2d00      	cmp	r5, #0
 802649c:	daf8      	bge.n	8026490 <__ieee754_fmodf+0x70>
 802649e:	0052      	lsls	r2, r2, #1
 80264a0:	e7f8      	b.n	8026494 <__ieee754_fmodf+0x74>
 80264a2:	eddd 7a01 	vldr	s15, [sp, #4]
 80264a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80264aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80264ae:	b002      	add	sp, #8
 80264b0:	bcf0      	pop	{r4, r5, r6, r7}
 80264b2:	4770      	bx	lr
 80264b4:	1ad3      	subs	r3, r2, r3
 80264b6:	bf48      	it	mi
 80264b8:	4613      	movmi	r3, r2
 80264ba:	b9e3      	cbnz	r3, 80264f6 <__ieee754_fmodf+0xd6>
 80264bc:	4a1c      	ldr	r2, [pc, #112]	; (8026530 <__ieee754_fmodf+0x110>)
 80264be:	0fe3      	lsrs	r3, r4, #31
 80264c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80264c4:	ed93 0a00 	vldr	s0, [r3]
 80264c8:	e7f1      	b.n	80264ae <__ieee754_fmodf+0x8e>
 80264ca:	15d1      	asrs	r1, r2, #23
 80264cc:	397f      	subs	r1, #127	; 0x7f
 80264ce:	e7ca      	b.n	8026466 <__ieee754_fmodf+0x46>
 80264d0:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80264d4:	1a1b      	subs	r3, r3, r0
 80264d6:	fa05 f303 	lsl.w	r3, r5, r3
 80264da:	e7d7      	b.n	802648c <__ieee754_fmodf+0x6c>
 80264dc:	f06f 067d 	mvn.w	r6, #125	; 0x7d
 80264e0:	1a76      	subs	r6, r6, r1
 80264e2:	40b2      	lsls	r2, r6
 80264e4:	e7cb      	b.n	802647e <__ieee754_fmodf+0x5e>
 80264e6:	022e      	lsls	r6, r5, #8
 80264e8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80264ec:	0076      	lsls	r6, r6, #1
 80264ee:	f100 30ff 	add.w	r0, r0, #4294967295
 80264f2:	d5fb      	bpl.n	80264ec <__ieee754_fmodf+0xcc>
 80264f4:	e7bc      	b.n	8026470 <__ieee754_fmodf+0x50>
 80264f6:	4a0f      	ldr	r2, [pc, #60]	; (8026534 <__ieee754_fmodf+0x114>)
 80264f8:	4293      	cmp	r3, r2
 80264fa:	dc04      	bgt.n	8026506 <__ieee754_fmodf+0xe6>
 80264fc:	005b      	lsls	r3, r3, #1
 80264fe:	4293      	cmp	r3, r2
 8026500:	f100 30ff 	add.w	r0, r0, #4294967295
 8026504:	ddfa      	ble.n	80264fc <__ieee754_fmodf+0xdc>
 8026506:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 802650a:	da07      	bge.n	802651c <__ieee754_fmodf+0xfc>
 802650c:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8026510:	1a10      	subs	r0, r2, r0
 8026512:	4103      	asrs	r3, r0
 8026514:	4323      	orrs	r3, r4
 8026516:	ee00 3a10 	vmov	s0, r3
 802651a:	e7c8      	b.n	80264ae <__ieee754_fmodf+0x8e>
 802651c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8026520:	4323      	orrs	r3, r4
 8026522:	307f      	adds	r0, #127	; 0x7f
 8026524:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8026528:	ee00 3a10 	vmov	s0, r3
 802652c:	e7bf      	b.n	80264ae <__ieee754_fmodf+0x8e>
 802652e:	bf00      	nop
 8026530:	08030850 	.word	0x08030850
 8026534:	007fffff 	.word	0x007fffff
	...

08026540 <__ieee754_logf>:
 8026540:	b430      	push	{r4, r5}
 8026542:	b082      	sub	sp, #8
 8026544:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026548:	9b01      	ldr	r3, [sp, #4]
 802654a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802654e:	d02d      	beq.n	80265ac <__ieee754_logf+0x6c>
 8026550:	2b00      	cmp	r3, #0
 8026552:	db3f      	blt.n	80265d4 <__ieee754_logf+0x94>
 8026554:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026558:	da47      	bge.n	80265ea <__ieee754_logf+0xaa>
 802655a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802655e:	db2e      	blt.n	80265be <__ieee754_logf+0x7e>
 8026560:	2500      	movs	r5, #0
 8026562:	4a6e      	ldr	r2, [pc, #440]	; (802671c <__ieee754_logf+0x1dc>)
 8026564:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8026568:	4422      	add	r2, r4
 802656a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 802656e:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
 8026572:	15db      	asrs	r3, r3, #23
 8026574:	f104 010f 	add.w	r1, r4, #15
 8026578:	4320      	orrs	r0, r4
 802657a:	3b7f      	subs	r3, #127	; 0x7f
 802657c:	ee00 0a10 	vmov	s0, r0
 8026580:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8026584:	442b      	add	r3, r5
 8026586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802658a:	290f      	cmp	r1, #15
 802658c:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
 8026590:	ee30 7a47 	vsub.f32	s14, s0, s14
 8026594:	dc30      	bgt.n	80265f8 <__ieee754_logf+0xb8>
 8026596:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802659e:	d16c      	bne.n	802667a <__ieee754_logf+0x13a>
 80265a0:	2b00      	cmp	r3, #0
 80265a2:	f040 8096 	bne.w	80266d2 <__ieee754_logf+0x192>
 80265a6:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8026720 <__ieee754_logf+0x1e0>
 80265aa:	e005      	b.n	80265b8 <__ieee754_logf+0x78>
 80265ac:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8026724 <__ieee754_logf+0x1e4>
 80265b0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8026720 <__ieee754_logf+0x1e0>
 80265b4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80265b8:	b002      	add	sp, #8
 80265ba:	bc30      	pop	{r4, r5}
 80265bc:	4770      	bx	lr
 80265be:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8026728 <__ieee754_logf+0x1e8>
 80265c2:	ed9d 7a01 	vldr	s14, [sp, #4]
 80265c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80265ca:	f06f 0518 	mvn.w	r5, #24
 80265ce:	ee17 3a90 	vmov	r3, s15
 80265d2:	e7c6      	b.n	8026562 <__ieee754_logf+0x22>
 80265d4:	eddd 7a01 	vldr	s15, [sp, #4]
 80265d8:	ee37 7ae7 	vsub.f32	s14, s15, s15
 80265dc:	eddf 7a50 	vldr	s15, [pc, #320]	; 8026720 <__ieee754_logf+0x1e0>
 80265e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80265e4:	b002      	add	sp, #8
 80265e6:	bc30      	pop	{r4, r5}
 80265e8:	4770      	bx	lr
 80265ea:	eddd 7a01 	vldr	s15, [sp, #4]
 80265ee:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80265f2:	b002      	add	sp, #8
 80265f4:	bc30      	pop	{r4, r5}
 80265f6:	4770      	bx	lr
 80265f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80265fc:	ee77 6a26 	vadd.f32	s13, s14, s13
 8026600:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 802672c <__ieee754_logf+0x1ec>
 8026604:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 8026730 <__ieee754_logf+0x1f0>
 8026608:	ed9f 5a4a 	vldr	s10, [pc, #296]	; 8026734 <__ieee754_logf+0x1f4>
 802660c:	eddf 2a4a 	vldr	s5, [pc, #296]	; 8026738 <__ieee754_logf+0x1f8>
 8026610:	eddf 4a4a 	vldr	s9, [pc, #296]	; 802673c <__ieee754_logf+0x1fc>
 8026614:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8026740 <__ieee754_logf+0x200>
 8026618:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8026744 <__ieee754_logf+0x204>
 802661c:	494a      	ldr	r1, [pc, #296]	; (8026748 <__ieee754_logf+0x208>)
 802661e:	eec7 3a26 	vdiv.f32	s7, s14, s13
 8026622:	f5c4 1257 	rsb	r2, r4, #3522560	; 0x35c000
 8026626:	4421      	add	r1, r4
 8026628:	f502 7222 	add.w	r2, r2, #648	; 0x288
 802662c:	430a      	orrs	r2, r1
 802662e:	2a00      	cmp	r2, #0
 8026630:	ee06 3a90 	vmov	s13, r3
 8026634:	ee63 5aa3 	vmul.f32	s11, s7, s7
 8026638:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
 802663c:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8026640:	eea6 4a82 	vfma.f32	s8, s13, s4
 8026644:	eee6 4aa2 	vfma.f32	s9, s13, s5
 8026648:	eea6 5a84 	vfma.f32	s10, s13, s8
 802664c:	eea6 6aa4 	vfma.f32	s12, s13, s9
 8026650:	eee6 7a85 	vfma.f32	s15, s13, s10
 8026654:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8026658:	eee6 7a86 	vfma.f32	s15, s13, s12
 802665c:	dd46      	ble.n	80266ec <__ieee754_logf+0x1ac>
 802665e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8026662:	ee27 0a00 	vmul.f32	s0, s14, s0
 8026666:	ee20 0a07 	vmul.f32	s0, s0, s14
 802666a:	bb0b      	cbnz	r3, 80266b0 <__ieee754_logf+0x170>
 802666c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8026670:	eea3 0ae7 	vfms.f32	s0, s7, s15
 8026674:	ee37 0a40 	vsub.f32	s0, s14, s0
 8026678:	e79e      	b.n	80265b8 <__ieee754_logf+0x78>
 802667a:	eddf 7a34 	vldr	s15, [pc, #208]	; 802674c <__ieee754_logf+0x20c>
 802667e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8026682:	eea7 0a67 	vfms.f32	s0, s14, s15
 8026686:	ee67 7a07 	vmul.f32	s15, s14, s14
 802668a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802668e:	2b00      	cmp	r3, #0
 8026690:	d0f0      	beq.n	8026674 <__ieee754_logf+0x134>
 8026692:	ee07 3a90 	vmov	s15, r3
 8026696:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8026750 <__ieee754_logf+0x210>
 802669a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8026754 <__ieee754_logf+0x214>
 802669e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80266a2:	eea7 0ac6 	vfms.f32	s0, s15, s12
 80266a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80266aa:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 80266ae:	e783      	b.n	80265b8 <__ieee754_logf+0x78>
 80266b0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8026750 <__ieee754_logf+0x210>
 80266b4:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8026754 <__ieee754_logf+0x214>
 80266b8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80266bc:	ee63 6a26 	vmul.f32	s13, s6, s13
 80266c0:	eee3 6aa7 	vfma.f32	s13, s7, s15
 80266c4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80266c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80266cc:	ee93 0a06 	vfnms.f32	s0, s6, s12
 80266d0:	e772      	b.n	80265b8 <__ieee754_logf+0x78>
 80266d2:	ee07 3a90 	vmov	s15, r3
 80266d6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8026750 <__ieee754_logf+0x210>
 80266da:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8026754 <__ieee754_logf+0x214>
 80266de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80266e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80266e6:	eea7 0a87 	vfma.f32	s0, s15, s14
 80266ea:	e765      	b.n	80265b8 <__ieee754_logf+0x78>
 80266ec:	b173      	cbz	r3, 802670c <__ieee754_logf+0x1cc>
 80266ee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8026750 <__ieee754_logf+0x210>
 80266f2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8026754 <__ieee754_logf+0x214>
 80266f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80266fa:	ee20 0a43 	vnmul.f32	s0, s0, s6
 80266fe:	eea3 0aa7 	vfma.f32	s0, s7, s15
 8026702:	ee30 0a47 	vsub.f32	s0, s0, s14
 8026706:	ee93 0a26 	vfnms.f32	s0, s6, s13
 802670a:	e755      	b.n	80265b8 <__ieee754_logf+0x78>
 802670c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026710:	eea3 7ae7 	vfms.f32	s14, s7, s15
 8026714:	eeb0 0a47 	vmov.f32	s0, s14
 8026718:	e74e      	b.n	80265b8 <__ieee754_logf+0x78>
 802671a:	bf00      	nop
 802671c:	004afb20 	.word	0x004afb20
 8026720:	00000000 	.word	0x00000000
 8026724:	cc000000 	.word	0xcc000000
 8026728:	4c000000 	.word	0x4c000000
 802672c:	3e178897 	.word	0x3e178897
 8026730:	3e3a3325 	.word	0x3e3a3325
 8026734:	3e924925 	.word	0x3e924925
 8026738:	3e1cd04f 	.word	0x3e1cd04f
 802673c:	3e638e29 	.word	0x3e638e29
 8026740:	3f2aaaab 	.word	0x3f2aaaab
 8026744:	3ecccccd 	.word	0x3ecccccd
 8026748:	ffcf5c30 	.word	0xffcf5c30
 802674c:	3eaaaaab 	.word	0x3eaaaaab
 8026750:	3717f7d1 	.word	0x3717f7d1
 8026754:	3f317180 	.word	0x3f317180
	...

08026760 <__ieee754_powf>:
 8026760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026764:	ed2d 8b02 	vpush	{d8}
 8026768:	b082      	sub	sp, #8
 802676a:	edcd 0a00 	vstr	s1, [sp]
 802676e:	9c00      	ldr	r4, [sp, #0]
 8026770:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026774:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
 8026778:	d014      	beq.n	80267a4 <__ieee754_powf+0x44>
 802677a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802677e:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
 8026782:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8026786:	dd07      	ble.n	8026798 <__ieee754_powf+0x38>
 8026788:	4858      	ldr	r0, [pc, #352]	; (80268ec <__ieee754_powf+0x18c>)
 802678a:	b002      	add	sp, #8
 802678c:	ecbd 8b02 	vpop	{d8}
 8026790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026794:	f001 ba34 	b.w	8027c00 <nanf>
 8026798:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 802679c:	dd09      	ble.n	80267b2 <__ieee754_powf+0x52>
 802679e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80267a2:	d1f1      	bne.n	8026788 <__ieee754_powf+0x28>
 80267a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80267a8:	b002      	add	sp, #8
 80267aa:	ecbd 8b02 	vpop	{d8}
 80267ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267b2:	f1b8 0f00 	cmp.w	r8, #0
 80267b6:	db4d      	blt.n	8026854 <__ieee754_powf+0xf4>
 80267b8:	f04f 0a00 	mov.w	sl, #0
 80267bc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80267c0:	d03f      	beq.n	8026842 <__ieee754_powf+0xe2>
 80267c2:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80267c6:	d058      	beq.n	802687a <__ieee754_powf+0x11a>
 80267c8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80267cc:	d06e      	beq.n	80268ac <__ieee754_powf+0x14c>
 80267ce:	9d01      	ldr	r5, [sp, #4]
 80267d0:	f8dd 9000 	ldr.w	r9, [sp]
 80267d4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80267d8:	ee00 5a10 	vmov	s0, r5
 80267dc:	d01c      	beq.n	8026818 <__ieee754_powf+0xb8>
 80267de:	f001 f9f7 	bl	8027bd0 <fabsf>
 80267e2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80267e6:	d04d      	beq.n	8026884 <__ieee754_powf+0x124>
 80267e8:	2f00      	cmp	r7, #0
 80267ea:	d04b      	beq.n	8026884 <__ieee754_powf+0x124>
 80267ec:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80267f0:	d048      	beq.n	8026884 <__ieee754_powf+0x124>
 80267f2:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80267f6:	3b01      	subs	r3, #1
 80267f8:	ea5a 0203 	orrs.w	r2, sl, r3
 80267fc:	d06e      	beq.n	80268dc <__ieee754_powf+0x17c>
 80267fe:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
 8026802:	dd7b      	ble.n	80268fc <__ieee754_powf+0x19c>
 8026804:	4a3a      	ldr	r2, [pc, #232]	; (80268f0 <__ieee754_powf+0x190>)
 8026806:	4297      	cmp	r7, r2
 8026808:	f300 81c8 	bgt.w	8026b9c <__ieee754_powf+0x43c>
 802680c:	2c00      	cmp	r4, #0
 802680e:	f2c0 81cb 	blt.w	8026ba8 <__ieee754_powf+0x448>
 8026812:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80268f4 <__ieee754_powf+0x194>
 8026816:	e7c7      	b.n	80267a8 <__ieee754_powf+0x48>
 8026818:	f1b8 0f00 	cmp.w	r8, #0
 802681c:	da4b      	bge.n	80268b6 <__ieee754_powf+0x156>
 802681e:	f001 f9d7 	bl	8027bd0 <fabsf>
 8026822:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8026826:	d001      	beq.n	802682c <__ieee754_powf+0xcc>
 8026828:	2f00      	cmp	r7, #0
 802682a:	d1df      	bne.n	80267ec <__ieee754_powf+0x8c>
 802682c:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8026830:	ea57 030a 	orrs.w	r3, r7, sl
 8026834:	d04d      	beq.n	80268d2 <__ieee754_powf+0x172>
 8026836:	f1ba 0f01 	cmp.w	sl, #1
 802683a:	d1b5      	bne.n	80267a8 <__ieee754_powf+0x48>
 802683c:	eeb1 0a40 	vneg.f32	s0, s0
 8026840:	e7b2      	b.n	80267a8 <__ieee754_powf+0x48>
 8026842:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8026846:	d0ad      	beq.n	80267a4 <__ieee754_powf+0x44>
 8026848:	dd29      	ble.n	802689e <__ieee754_powf+0x13e>
 802684a:	2c00      	cmp	r4, #0
 802684c:	dbe1      	blt.n	8026812 <__ieee754_powf+0xb2>
 802684e:	ed9d 0a00 	vldr	s0, [sp]
 8026852:	e7a9      	b.n	80267a8 <__ieee754_powf+0x48>
 8026854:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
 8026858:	da1e      	bge.n	8026898 <__ieee754_powf+0x138>
 802685a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 802685e:	db09      	blt.n	8026874 <__ieee754_powf+0x114>
 8026860:	15f3      	asrs	r3, r6, #23
 8026862:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8026866:	fa46 f203 	asr.w	r2, r6, r3
 802686a:	fa02 f303 	lsl.w	r3, r2, r3
 802686e:	429e      	cmp	r6, r3
 8026870:	f000 818f 	beq.w	8026b92 <__ieee754_powf+0x432>
 8026874:	f04f 0a00 	mov.w	sl, #0
 8026878:	e7a3      	b.n	80267c2 <__ieee754_powf+0x62>
 802687a:	2c00      	cmp	r4, #0
 802687c:	db22      	blt.n	80268c4 <__ieee754_powf+0x164>
 802687e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8026882:	e791      	b.n	80267a8 <__ieee754_powf+0x48>
 8026884:	2c00      	cmp	r4, #0
 8026886:	bfbc      	itt	lt
 8026888:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 802688c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8026890:	f1b8 0f00 	cmp.w	r8, #0
 8026894:	da88      	bge.n	80267a8 <__ieee754_powf+0x48>
 8026896:	e7c9      	b.n	802682c <__ieee754_powf+0xcc>
 8026898:	f04f 0a02 	mov.w	sl, #2
 802689c:	e78e      	b.n	80267bc <__ieee754_powf+0x5c>
 802689e:	2c00      	cmp	r4, #0
 80268a0:	dab7      	bge.n	8026812 <__ieee754_powf+0xb2>
 80268a2:	eddd 7a00 	vldr	s15, [sp]
 80268a6:	eeb1 0a67 	vneg.f32	s0, s15
 80268aa:	e77d      	b.n	80267a8 <__ieee754_powf+0x48>
 80268ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80268b0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80268b4:	e778      	b.n	80267a8 <__ieee754_powf+0x48>
 80268b6:	b002      	add	sp, #8
 80268b8:	ecbd 8b02 	vpop	{d8}
 80268bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80268c0:	f000 bb8e 	b.w	8026fe0 <__ieee754_sqrtf>
 80268c4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80268c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80268cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80268d0:	e76a      	b.n	80267a8 <__ieee754_powf+0x48>
 80268d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80268d6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80268da:	e765      	b.n	80267a8 <__ieee754_powf+0x48>
 80268dc:	ee07 5a90 	vmov	s15, r5
 80268e0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80268e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80268e8:	e75e      	b.n	80267a8 <__ieee754_powf+0x48>
 80268ea:	bf00      	nop
 80268ec:	0802f9b0 	.word	0x0802f9b0
 80268f0:	3f7ffff7 	.word	0x3f7ffff7
 80268f4:	00000000 	.word	0x00000000
 80268f8:	4b800000 	.word	0x4b800000
 80268fc:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8026900:	f280 815f 	bge.w	8026bc2 <__ieee754_powf+0x462>
 8026904:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 80268f8 <__ieee754_powf+0x198>
 8026908:	ee60 7a27 	vmul.f32	s15, s0, s15
 802690c:	f06f 0217 	mvn.w	r2, #23
 8026910:	ee17 7a90 	vmov	r7, s15
 8026914:	48ee      	ldr	r0, [pc, #952]	; (8026cd0 <__ieee754_powf+0x570>)
 8026916:	15f9      	asrs	r1, r7, #23
 8026918:	f3c7 0716 	ubfx	r7, r7, #0, #23
 802691c:	397f      	subs	r1, #127	; 0x7f
 802691e:	4287      	cmp	r7, r0
 8026920:	4411      	add	r1, r2
 8026922:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
 8026926:	f340 8144 	ble.w	8026bb2 <__ieee754_powf+0x452>
 802692a:	48ea      	ldr	r0, [pc, #936]	; (8026cd4 <__ieee754_powf+0x574>)
 802692c:	4287      	cmp	r7, r0
 802692e:	f340 8191 	ble.w	8026c54 <__ieee754_powf+0x4f4>
 8026932:	eddf 4ae9 	vldr	s9, [pc, #932]	; 8026cd8 <__ieee754_powf+0x578>
 8026936:	3101      	adds	r1, #1
 8026938:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
 802693c:	eef0 3a64 	vmov.f32	s7, s9
 8026940:	2500      	movs	r5, #0
 8026942:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8026946:	ee06 2a90 	vmov	s13, r2
 802694a:	ee76 7a86 	vadd.f32	s15, s13, s12
 802694e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026952:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8026956:	1052      	asrs	r2, r2, #1
 8026958:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 802695c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 8026960:	442a      	add	r2, r5
 8026962:	48de      	ldr	r0, [pc, #888]	; (8026cdc <__ieee754_powf+0x57c>)
 8026964:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8026968:	ee07 2a90 	vmov	s15, r2
 802696c:	ee27 4a08 	vmul.f32	s8, s14, s16
 8026970:	ee37 5ac6 	vsub.f32	s10, s15, s12
 8026974:	eddf 8ada 	vldr	s17, [pc, #872]	; 8026ce0 <__ieee754_powf+0x580>
 8026978:	ed9f 0ada 	vldr	s0, [pc, #872]	; 8026ce4 <__ieee754_powf+0x584>
 802697c:	eddf 1ada 	vldr	s3, [pc, #872]	; 8026ce8 <__ieee754_powf+0x588>
 8026980:	eddf 0ada 	vldr	s1, [pc, #872]	; 8026cec <__ieee754_powf+0x58c>
 8026984:	ed9f 1ada 	vldr	s2, [pc, #872]	; 8026cf0 <__ieee754_powf+0x590>
 8026988:	ed9f 2ada 	vldr	s4, [pc, #872]	; 8026cf4 <__ieee754_powf+0x594>
 802698c:	eddf 2ada 	vldr	s5, [pc, #872]	; 8026cf8 <__ieee754_powf+0x598>
 8026990:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8026cfc <__ieee754_powf+0x59c>
 8026994:	ee24 6a04 	vmul.f32	s12, s8, s8
 8026998:	ee14 2a10 	vmov	r2, s8
 802699c:	eea6 0a28 	vfma.f32	s0, s12, s17
 80269a0:	4002      	ands	r2, r0
 80269a2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80269a6:	eeb0 5a61 	vmov.f32	s10, s3
 80269aa:	ee05 2a90 	vmov	s11, r2
 80269ae:	eea6 5a00 	vfma.f32	s10, s12, s0
 80269b2:	eef1 1a65 	vneg.f32	s3, s11
 80269b6:	eea1 7aa7 	vfma.f32	s14, s3, s15
 80269ba:	eef0 7a60 	vmov.f32	s15, s1
 80269be:	eee6 7a05 	vfma.f32	s15, s12, s10
 80269c2:	eea1 7aa6 	vfma.f32	s14, s3, s13
 80269c6:	eeb0 5a41 	vmov.f32	s10, s2
 80269ca:	eea6 5a27 	vfma.f32	s10, s12, s15
 80269ce:	ee67 6a08 	vmul.f32	s13, s14, s16
 80269d2:	eeb0 7a42 	vmov.f32	s14, s4
 80269d6:	eea6 7a05 	vfma.f32	s14, s12, s10
 80269da:	ee75 7a84 	vadd.f32	s15, s11, s8
 80269de:	ee26 6a06 	vmul.f32	s12, s12, s12
 80269e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80269e6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80269ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80269ee:	eeb0 7a45 	vmov.f32	s14, s10
 80269f2:	eea5 7aa5 	vfma.f32	s14, s11, s11
 80269f6:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8026d00 <__ieee754_powf+0x5a0>
 80269fa:	ee37 6a27 	vadd.f32	s12, s14, s15
 80269fe:	ee07 1a10 	vmov	s14, r1
 8026a02:	ee16 2a10 	vmov	r2, s12
 8026a06:	4002      	ands	r2, r0
 8026a08:	ee06 2a10 	vmov	s12, r2
 8026a0c:	ee36 5a45 	vsub.f32	s10, s12, s10
 8026a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026a14:	eea1 5aa5 	vfma.f32	s10, s3, s11
 8026a18:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8026a1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8026a20:	eee6 7a26 	vfma.f32	s15, s12, s13
 8026a24:	eef0 6a67 	vmov.f32	s13, s15
 8026a28:	eee5 6a86 	vfma.f32	s13, s11, s12
 8026a2c:	ee16 2a90 	vmov	r2, s13
 8026a30:	4002      	ands	r2, r0
 8026a32:	ee06 2a90 	vmov	s13, r2
 8026a36:	eee1 6a86 	vfma.f32	s13, s3, s12
 8026a3a:	ee05 2a90 	vmov	s11, r2
 8026a3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026a42:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8026a46:	eee5 7a83 	vfma.f32	s15, s11, s6
 8026a4a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8026a4e:	eef0 6a67 	vmov.f32	s13, s15
 8026a52:	eee5 6a82 	vfma.f32	s13, s11, s4
 8026a56:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8026a5a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8026a5e:	ee16 2a90 	vmov	r2, s13
 8026a62:	4002      	ands	r2, r0
 8026a64:	ee06 2a90 	vmov	s13, r2
 8026a68:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8026a6c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8026a70:	eea5 7ac2 	vfms.f32	s14, s11, s4
 8026a74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026a78:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8026a7c:	f024 040f 	bic.w	r4, r4, #15
 8026a80:	ee07 9a10 	vmov	s14, r9
 8026a84:	ee06 4a10 	vmov	s12, r4
 8026a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026a8c:	ee37 6a46 	vsub.f32	s12, s14, s12
 8026a90:	ee07 4a10 	vmov	s14, r4
 8026a94:	eee6 7a86 	vfma.f32	s15, s13, s12
 8026a98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026a9c:	ea5a 0303 	orrs.w	r3, sl, r3
 8026aa0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8026aa4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8026aa8:	ee77 6a87 	vadd.f32	s13, s15, s14
 8026aac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8026ab0:	ee16 2a90 	vmov	r2, s13
 8026ab4:	bf14      	ite	ne
 8026ab6:	eeb0 8a46 	vmovne.f32	s16, s12
 8026aba:	eeb0 8a40 	vmoveq.f32	s16, s0
 8026abe:	2a00      	cmp	r2, #0
 8026ac0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8026ac4:	f340 80b3 	ble.w	8026c2e <__ieee754_powf+0x4ce>
 8026ac8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8026acc:	f300 8086 	bgt.w	8026bdc <__ieee754_powf+0x47c>
 8026ad0:	d079      	beq.n	8026bc6 <__ieee754_powf+0x466>
 8026ad2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8026ad6:	f300 8088 	bgt.w	8026bea <__ieee754_powf+0x48a>
 8026ada:	2100      	movs	r1, #0
 8026adc:	4608      	mov	r0, r1
 8026ade:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
 8026ae2:	f023 030f 	bic.w	r3, r3, #15
 8026ae6:	ee06 3a10 	vmov	s12, r3
 8026aea:	eddf 6a86 	vldr	s13, [pc, #536]	; 8026d04 <__ieee754_powf+0x5a4>
 8026aee:	eddf 5a86 	vldr	s11, [pc, #536]	; 8026d08 <__ieee754_powf+0x5a8>
 8026af2:	ed9f 3a86 	vldr	s6, [pc, #536]	; 8026d0c <__ieee754_powf+0x5ac>
 8026af6:	eddf 3a86 	vldr	s7, [pc, #536]	; 8026d10 <__ieee754_powf+0x5b0>
 8026afa:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8026d14 <__ieee754_powf+0x5b4>
 8026afe:	ed9f 4a86 	vldr	s8, [pc, #536]	; 8026d18 <__ieee754_powf+0x5b8>
 8026b02:	eddf 4a86 	vldr	s9, [pc, #536]	; 8026d1c <__ieee754_powf+0x5bc>
 8026b06:	ed9f 5a86 	vldr	s10, [pc, #536]	; 8026d20 <__ieee754_powf+0x5c0>
 8026b0a:	ee36 7a47 	vsub.f32	s14, s12, s14
 8026b0e:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8026b12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026b16:	ee26 7a26 	vmul.f32	s14, s12, s13
 8026b1a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8026b1e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8026b22:	eef0 7a47 	vmov.f32	s15, s14
 8026b26:	eea6 7a03 	vfma.f32	s14, s12, s6
 8026b2a:	ee67 6a07 	vmul.f32	s13, s14, s14
 8026b2e:	eef0 1a47 	vmov.f32	s3, s14
 8026b32:	eee6 1a43 	vfms.f32	s3, s12, s6
 8026b36:	eeb0 6a63 	vmov.f32	s12, s7
 8026b3a:	eea6 6a82 	vfma.f32	s12, s13, s4
 8026b3e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8026b42:	eea6 4a86 	vfma.f32	s8, s13, s12
 8026b46:	eee7 7a27 	vfma.f32	s15, s14, s15
 8026b4a:	eee6 4a84 	vfma.f32	s9, s13, s8
 8026b4e:	eea6 5aa4 	vfma.f32	s10, s13, s9
 8026b52:	eeb0 6a45 	vmov.f32	s12, s10
 8026b56:	eeb0 5a47 	vmov.f32	s10, s14
 8026b5a:	eea6 5ac6 	vfms.f32	s10, s13, s12
 8026b5e:	eef0 6a45 	vmov.f32	s13, s10
 8026b62:	ee36 6ae2 	vsub.f32	s12, s13, s5
 8026b66:	ee27 5a05 	vmul.f32	s10, s14, s10
 8026b6a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8026b6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8026b72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8026b76:	ee35 0ac7 	vsub.f32	s0, s11, s14
 8026b7a:	ee10 3a10 	vmov	r3, s0
 8026b7e:	440b      	add	r3, r1
 8026b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8026b84:	f2c0 80a0 	blt.w	8026cc8 <__ieee754_powf+0x568>
 8026b88:	ee00 3a10 	vmov	s0, r3
 8026b8c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8026b90:	e60a      	b.n	80267a8 <__ieee754_powf+0x48>
 8026b92:	f002 0201 	and.w	r2, r2, #1
 8026b96:	f1c2 0a02 	rsb	sl, r2, #2
 8026b9a:	e612      	b.n	80267c2 <__ieee754_powf+0x62>
 8026b9c:	4a61      	ldr	r2, [pc, #388]	; (8026d24 <__ieee754_powf+0x5c4>)
 8026b9e:	4297      	cmp	r7, r2
 8026ba0:	dd61      	ble.n	8026c66 <__ieee754_powf+0x506>
 8026ba2:	2c00      	cmp	r4, #0
 8026ba4:	f77f ae35 	ble.w	8026812 <__ieee754_powf+0xb2>
 8026ba8:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8026d28 <__ieee754_powf+0x5c8>
 8026bac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8026bb0:	e5fa      	b.n	80267a8 <__ieee754_powf+0x48>
 8026bb2:	eddf 4a49 	vldr	s9, [pc, #292]	; 8026cd8 <__ieee754_powf+0x578>
 8026bb6:	2500      	movs	r5, #0
 8026bb8:	eef0 3a64 	vmov.f32	s7, s9
 8026bbc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8026bc0:	e6c1      	b.n	8026946 <__ieee754_powf+0x1e6>
 8026bc2:	2200      	movs	r2, #0
 8026bc4:	e6a6      	b.n	8026914 <__ieee754_powf+0x1b4>
 8026bc6:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8026d2c <__ieee754_powf+0x5cc>
 8026bca:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8026bce:	ee37 6a86 	vadd.f32	s12, s15, s12
 8026bd2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8026bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bda:	dd06      	ble.n	8026bea <__ieee754_powf+0x48a>
 8026bdc:	eddf 7a52 	vldr	s15, [pc, #328]	; 8026d28 <__ieee754_powf+0x5c8>
 8026be0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8026be4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026be8:	e5de      	b.n	80267a8 <__ieee754_powf+0x48>
 8026bea:	15db      	asrs	r3, r3, #23
 8026bec:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8026bf0:	3b7e      	subs	r3, #126	; 0x7e
 8026bf2:	fa41 f303 	asr.w	r3, r1, r3
 8026bf6:	4413      	add	r3, r2
 8026bf8:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8026bfc:	4c4c      	ldr	r4, [pc, #304]	; (8026d30 <__ieee754_powf+0x5d0>)
 8026bfe:	397f      	subs	r1, #127	; 0x7f
 8026c00:	410c      	asrs	r4, r1
 8026c02:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8026c06:	ea23 0304 	bic.w	r3, r3, r4
 8026c0a:	ee06 3a90 	vmov	s13, r3
 8026c0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8026c12:	f1c1 0117 	rsb	r1, r1, #23
 8026c16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8026c1a:	4108      	asrs	r0, r1
 8026c1c:	2a00      	cmp	r2, #0
 8026c1e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8026c22:	bfb8      	it	lt
 8026c24:	4240      	neglt	r0, r0
 8026c26:	05c1      	lsls	r1, r0, #23
 8026c28:	ee16 2a90 	vmov	r2, s13
 8026c2c:	e757      	b.n	8026ade <__ieee754_powf+0x37e>
 8026c2e:	4941      	ldr	r1, [pc, #260]	; (8026d34 <__ieee754_powf+0x5d4>)
 8026c30:	428b      	cmp	r3, r1
 8026c32:	dc08      	bgt.n	8026c46 <__ieee754_powf+0x4e6>
 8026c34:	f47f af4d 	bne.w	8026ad2 <__ieee754_powf+0x372>
 8026c38:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8026c3c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c44:	d8d1      	bhi.n	8026bea <__ieee754_powf+0x48a>
 8026c46:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8026d38 <__ieee754_powf+0x5d8>
 8026c4a:	ee28 0a27 	vmul.f32	s0, s16, s15
 8026c4e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026c52:	e5a9      	b.n	80267a8 <__ieee754_powf+0x48>
 8026c54:	eddf 4a39 	vldr	s9, [pc, #228]	; 8026d3c <__ieee754_powf+0x5dc>
 8026c58:	eddf 3a39 	vldr	s7, [pc, #228]	; 8026d40 <__ieee754_powf+0x5e0>
 8026c5c:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8026c60:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8026c64:	e66f      	b.n	8026946 <__ieee754_powf+0x1e6>
 8026c66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026c6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026c6e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8026cec <__ieee754_powf+0x58c>
 8026c72:	eddf 7a34 	vldr	s15, [pc, #208]	; 8026d44 <__ieee754_powf+0x5e4>
 8026c76:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8026d48 <__ieee754_powf+0x5e8>
 8026c7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8026d4c <__ieee754_powf+0x5ec>
 8026c7e:	eeb1 6a40 	vneg.f32	s12, s0
 8026c82:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8026c86:	eee6 6a07 	vfma.f32	s13, s12, s14
 8026c8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8026c8e:	eea6 7a26 	vfma.f32	s14, s12, s13
 8026c92:	ee60 6a00 	vmul.f32	s13, s0, s0
 8026c96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8026c9a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8026c9e:	eee0 7a05 	vfma.f32	s15, s0, s10
 8026ca2:	eef0 6a67 	vmov.f32	s13, s15
 8026ca6:	eee0 6a25 	vfma.f32	s13, s0, s11
 8026caa:	ee16 2a90 	vmov	r2, s13
 8026cae:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8026cb2:	f022 020f 	bic.w	r2, r2, #15
 8026cb6:	ee07 2a10 	vmov	s14, r2
 8026cba:	eea6 7a25 	vfma.f32	s14, s12, s11
 8026cbe:	ee06 2a90 	vmov	s13, r2
 8026cc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026cc6:	e6d7      	b.n	8026a78 <__ieee754_powf+0x318>
 8026cc8:	f7fe fb5a 	bl	8025380 <scalbnf>
 8026ccc:	e75e      	b.n	8026b8c <__ieee754_powf+0x42c>
 8026cce:	bf00      	nop
 8026cd0:	001cc471 	.word	0x001cc471
 8026cd4:	005db3d6 	.word	0x005db3d6
 8026cd8:	00000000 	.word	0x00000000
 8026cdc:	fffff000 	.word	0xfffff000
 8026ce0:	3e53f142 	.word	0x3e53f142
 8026ce4:	3e6c3255 	.word	0x3e6c3255
 8026ce8:	3e8ba305 	.word	0x3e8ba305
 8026cec:	3eaaaaab 	.word	0x3eaaaaab
 8026cf0:	3edb6db7 	.word	0x3edb6db7
 8026cf4:	3f19999a 	.word	0x3f19999a
 8026cf8:	3f76384f 	.word	0x3f76384f
 8026cfc:	369dc3a0 	.word	0x369dc3a0
 8026d00:	3f763800 	.word	0x3f763800
 8026d04:	35bfbe8c 	.word	0x35bfbe8c
 8026d08:	3f317218 	.word	0x3f317218
 8026d0c:	3f317200 	.word	0x3f317200
 8026d10:	b5ddea0e 	.word	0xb5ddea0e
 8026d14:	3331bb4c 	.word	0x3331bb4c
 8026d18:	388ab355 	.word	0x388ab355
 8026d1c:	bb360b61 	.word	0xbb360b61
 8026d20:	3e2aaaab 	.word	0x3e2aaaab
 8026d24:	3f800007 	.word	0x3f800007
 8026d28:	7149f2ca 	.word	0x7149f2ca
 8026d2c:	3338aa3c 	.word	0x3338aa3c
 8026d30:	007fffff 	.word	0x007fffff
 8026d34:	43160000 	.word	0x43160000
 8026d38:	0da24260 	.word	0x0da24260
 8026d3c:	3f15c000 	.word	0x3f15c000
 8026d40:	35d1cfdc 	.word	0x35d1cfdc
 8026d44:	3fb8aa3b 	.word	0x3fb8aa3b
 8026d48:	36eca570 	.word	0x36eca570
 8026d4c:	3fb8aa00 	.word	0x3fb8aa00

08026d50 <__ieee754_rem_pio2f>:
 8026d50:	b570      	push	{r4, r5, r6, lr}
 8026d52:	ee10 3a10 	vmov	r3, s0
 8026d56:	4a94      	ldr	r2, [pc, #592]	; (8026fa8 <__ieee754_rem_pio2f+0x258>)
 8026d58:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8026d5c:	4294      	cmp	r4, r2
 8026d5e:	b086      	sub	sp, #24
 8026d60:	4605      	mov	r5, r0
 8026d62:	dd68      	ble.n	8026e36 <__ieee754_rem_pio2f+0xe6>
 8026d64:	4a91      	ldr	r2, [pc, #580]	; (8026fac <__ieee754_rem_pio2f+0x25c>)
 8026d66:	4294      	cmp	r4, r2
 8026d68:	ee10 6a10 	vmov	r6, s0
 8026d6c:	dc1a      	bgt.n	8026da4 <__ieee754_rem_pio2f+0x54>
 8026d6e:	2b00      	cmp	r3, #0
 8026d70:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8026fb0 <__ieee754_rem_pio2f+0x260>
 8026d74:	4a8f      	ldr	r2, [pc, #572]	; (8026fb4 <__ieee754_rem_pio2f+0x264>)
 8026d76:	f024 040f 	bic.w	r4, r4, #15
 8026d7a:	f340 80dd 	ble.w	8026f38 <__ieee754_rem_pio2f+0x1e8>
 8026d7e:	4294      	cmp	r4, r2
 8026d80:	ee70 7a67 	vsub.f32	s15, s0, s15
 8026d84:	d066      	beq.n	8026e54 <__ieee754_rem_pio2f+0x104>
 8026d86:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8026fb8 <__ieee754_rem_pio2f+0x268>
 8026d8a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8026d8e:	2001      	movs	r0, #1
 8026d90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026d94:	edc5 6a00 	vstr	s13, [r5]
 8026d98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026d9c:	edc5 7a01 	vstr	s15, [r5, #4]
 8026da0:	b006      	add	sp, #24
 8026da2:	bd70      	pop	{r4, r5, r6, pc}
 8026da4:	4a85      	ldr	r2, [pc, #532]	; (8026fbc <__ieee754_rem_pio2f+0x26c>)
 8026da6:	4294      	cmp	r4, r2
 8026da8:	dd66      	ble.n	8026e78 <__ieee754_rem_pio2f+0x128>
 8026daa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8026dae:	da49      	bge.n	8026e44 <__ieee754_rem_pio2f+0xf4>
 8026db0:	15e2      	asrs	r2, r4, #23
 8026db2:	3a86      	subs	r2, #134	; 0x86
 8026db4:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8026db8:	ee07 3a90 	vmov	s15, r3
 8026dbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026dc0:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8026fc0 <__ieee754_rem_pio2f+0x270>
 8026dc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026dcc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8026dd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026dd4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026de0:	ed8d 7a04 	vstr	s14, [sp, #16]
 8026de4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026de8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8026dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026df0:	edcd 7a05 	vstr	s15, [sp, #20]
 8026df4:	f040 80b3 	bne.w	8026f5e <__ieee754_rem_pio2f+0x20e>
 8026df8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8026dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e00:	bf0c      	ite	eq
 8026e02:	2301      	moveq	r3, #1
 8026e04:	2302      	movne	r3, #2
 8026e06:	496f      	ldr	r1, [pc, #444]	; (8026fc4 <__ieee754_rem_pio2f+0x274>)
 8026e08:	9101      	str	r1, [sp, #4]
 8026e0a:	2102      	movs	r1, #2
 8026e0c:	9100      	str	r1, [sp, #0]
 8026e0e:	a803      	add	r0, sp, #12
 8026e10:	4629      	mov	r1, r5
 8026e12:	f000 f9bd 	bl	8027190 <__kernel_rem_pio2f>
 8026e16:	2e00      	cmp	r6, #0
 8026e18:	da12      	bge.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026e1a:	ed95 7a00 	vldr	s14, [r5]
 8026e1e:	edd5 7a01 	vldr	s15, [r5, #4]
 8026e22:	eeb1 7a47 	vneg.f32	s14, s14
 8026e26:	eef1 7a67 	vneg.f32	s15, s15
 8026e2a:	4240      	negs	r0, r0
 8026e2c:	ed85 7a00 	vstr	s14, [r5]
 8026e30:	edc5 7a01 	vstr	s15, [r5, #4]
 8026e34:	e004      	b.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026e36:	2200      	movs	r2, #0
 8026e38:	ed85 0a00 	vstr	s0, [r5]
 8026e3c:	6042      	str	r2, [r0, #4]
 8026e3e:	2000      	movs	r0, #0
 8026e40:	b006      	add	sp, #24
 8026e42:	bd70      	pop	{r4, r5, r6, pc}
 8026e44:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026e48:	2000      	movs	r0, #0
 8026e4a:	edc5 7a01 	vstr	s15, [r5, #4]
 8026e4e:	edc5 7a00 	vstr	s15, [r5]
 8026e52:	e7f5      	b.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026e54:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8026fc8 <__ieee754_rem_pio2f+0x278>
 8026e58:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8026fcc <__ieee754_rem_pio2f+0x27c>
 8026e5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026e60:	2001      	movs	r0, #1
 8026e62:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8026e66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026e6a:	edc5 6a00 	vstr	s13, [r5]
 8026e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026e72:	edc5 7a01 	vstr	s15, [r5, #4]
 8026e76:	e7e3      	b.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026e78:	f000 feaa 	bl	8027bd0 <fabsf>
 8026e7c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8026fd0 <__ieee754_rem_pio2f+0x280>
 8026e80:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8026fb0 <__ieee754_rem_pio2f+0x260>
 8026e84:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8026fb8 <__ieee754_rem_pio2f+0x268>
 8026e88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8026e8c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8026e90:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8026e94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8026e98:	ee17 0a10 	vmov	r0, s14
 8026e9c:	eeb1 6a66 	vneg.f32	s12, s13
 8026ea0:	281f      	cmp	r0, #31
 8026ea2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8026ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026eaa:	dc1d      	bgt.n	8026ee8 <__ieee754_rem_pio2f+0x198>
 8026eac:	4a49      	ldr	r2, [pc, #292]	; (8026fd4 <__ieee754_rem_pio2f+0x284>)
 8026eae:	1e41      	subs	r1, r0, #1
 8026eb0:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8026eb4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8026eb8:	4293      	cmp	r3, r2
 8026eba:	d015      	beq.n	8026ee8 <__ieee754_rem_pio2f+0x198>
 8026ebc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026ec0:	ed85 7a00 	vstr	s14, [r5]
 8026ec4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8026ec8:	2e00      	cmp	r6, #0
 8026eca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026ece:	ed85 0a01 	vstr	s0, [r5, #4]
 8026ed2:	dab5      	bge.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026ed4:	eeb1 7a47 	vneg.f32	s14, s14
 8026ed8:	eeb1 0a40 	vneg.f32	s0, s0
 8026edc:	ed85 7a00 	vstr	s14, [r5]
 8026ee0:	ed85 0a01 	vstr	s0, [r5, #4]
 8026ee4:	4240      	negs	r0, r0
 8026ee6:	e7ab      	b.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026ee8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026eec:	15e4      	asrs	r4, r4, #23
 8026eee:	ee17 3a10 	vmov	r3, s14
 8026ef2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8026ef6:	1ae3      	subs	r3, r4, r3
 8026ef8:	2b08      	cmp	r3, #8
 8026efa:	dde1      	ble.n	8026ec0 <__ieee754_rem_pio2f+0x170>
 8026efc:	eddf 7a32 	vldr	s15, [pc, #200]	; 8026fc8 <__ieee754_rem_pio2f+0x278>
 8026f00:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8026fcc <__ieee754_rem_pio2f+0x27c>
 8026f04:	eef0 5a40 	vmov.f32	s11, s0
 8026f08:	eee6 5a27 	vfma.f32	s11, s12, s15
 8026f0c:	ee30 0a65 	vsub.f32	s0, s0, s11
 8026f10:	eea6 0a27 	vfma.f32	s0, s12, s15
 8026f14:	eef0 7a40 	vmov.f32	s15, s0
 8026f18:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8026f1c:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8026f20:	ee17 3a10 	vmov	r3, s14
 8026f24:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8026f28:	1ae4      	subs	r4, r4, r3
 8026f2a:	2c19      	cmp	r4, #25
 8026f2c:	dc2c      	bgt.n	8026f88 <__ieee754_rem_pio2f+0x238>
 8026f2e:	ed85 7a00 	vstr	s14, [r5]
 8026f32:	eeb0 0a65 	vmov.f32	s0, s11
 8026f36:	e7c5      	b.n	8026ec4 <__ieee754_rem_pio2f+0x174>
 8026f38:	4294      	cmp	r4, r2
 8026f3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8026f3e:	d010      	beq.n	8026f62 <__ieee754_rem_pio2f+0x212>
 8026f40:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8026fb8 <__ieee754_rem_pio2f+0x268>
 8026f44:	ee77 6a87 	vadd.f32	s13, s15, s14
 8026f48:	f04f 30ff 	mov.w	r0, #4294967295
 8026f4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026f50:	edc5 6a00 	vstr	s13, [r5]
 8026f54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026f58:	edc5 7a01 	vstr	s15, [r5, #4]
 8026f5c:	e770      	b.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026f5e:	2303      	movs	r3, #3
 8026f60:	e751      	b.n	8026e06 <__ieee754_rem_pio2f+0xb6>
 8026f62:	eddf 6a19 	vldr	s13, [pc, #100]	; 8026fc8 <__ieee754_rem_pio2f+0x278>
 8026f66:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8026fcc <__ieee754_rem_pio2f+0x27c>
 8026f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8026f72:	ee77 6a87 	vadd.f32	s13, s15, s14
 8026f76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026f7a:	edc5 6a00 	vstr	s13, [r5]
 8026f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026f82:	edc5 7a01 	vstr	s15, [r5, #4]
 8026f86:	e75b      	b.n	8026e40 <__ieee754_rem_pio2f+0xf0>
 8026f88:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8026fd8 <__ieee754_rem_pio2f+0x288>
 8026f8c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8026fdc <__ieee754_rem_pio2f+0x28c>
 8026f90:	eeb0 0a65 	vmov.f32	s0, s11
 8026f94:	eea6 0a07 	vfma.f32	s0, s12, s14
 8026f98:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8026f9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026fa0:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8026fa4:	e78a      	b.n	8026ebc <__ieee754_rem_pio2f+0x16c>
 8026fa6:	bf00      	nop
 8026fa8:	3f490fd8 	.word	0x3f490fd8
 8026fac:	4016cbe3 	.word	0x4016cbe3
 8026fb0:	3fc90f80 	.word	0x3fc90f80
 8026fb4:	3fc90fd0 	.word	0x3fc90fd0
 8026fb8:	37354443 	.word	0x37354443
 8026fbc:	43490f80 	.word	0x43490f80
 8026fc0:	43800000 	.word	0x43800000
 8026fc4:	080308e0 	.word	0x080308e0
 8026fc8:	37354400 	.word	0x37354400
 8026fcc:	2e85a308 	.word	0x2e85a308
 8026fd0:	3f22f984 	.word	0x3f22f984
 8026fd4:	08030860 	.word	0x08030860
 8026fd8:	2e85a300 	.word	0x2e85a300
 8026fdc:	248d3132 	.word	0x248d3132

08026fe0 <__ieee754_sqrtf>:
 8026fe0:	ee10 3a10 	vmov	r3, s0
 8026fe4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026fe8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8026fec:	d231      	bcs.n	8027052 <__ieee754_sqrtf+0x72>
 8026fee:	b37a      	cbz	r2, 8027050 <__ieee754_sqrtf+0x70>
 8026ff0:	2b00      	cmp	r3, #0
 8026ff2:	db3d      	blt.n	8027070 <__ieee754_sqrtf+0x90>
 8026ff4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8026ff8:	b470      	push	{r4, r5, r6}
 8026ffa:	ea4f 50e3 	mov.w	r0, r3, asr #23
 8026ffe:	d32b      	bcc.n	8027058 <__ieee754_sqrtf+0x78>
 8027000:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 8027004:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8027008:	07d1      	lsls	r1, r2, #31
 802700a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802700e:	bf48      	it	mi
 8027010:	005b      	lslmi	r3, r3, #1
 8027012:	2400      	movs	r4, #0
 8027014:	1056      	asrs	r6, r2, #1
 8027016:	005b      	lsls	r3, r3, #1
 8027018:	4625      	mov	r5, r4
 802701a:	2119      	movs	r1, #25
 802701c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8027020:	18a8      	adds	r0, r5, r2
 8027022:	4298      	cmp	r0, r3
 8027024:	dc02      	bgt.n	802702c <__ieee754_sqrtf+0x4c>
 8027026:	1a1b      	subs	r3, r3, r0
 8027028:	1885      	adds	r5, r0, r2
 802702a:	4414      	add	r4, r2
 802702c:	3901      	subs	r1, #1
 802702e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8027032:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8027036:	d1f3      	bne.n	8027020 <__ieee754_sqrtf+0x40>
 8027038:	b113      	cbz	r3, 8027040 <__ieee754_sqrtf+0x60>
 802703a:	3401      	adds	r4, #1
 802703c:	f024 0401 	bic.w	r4, r4, #1
 8027040:	1064      	asrs	r4, r4, #1
 8027042:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8027046:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 802704a:	bc70      	pop	{r4, r5, r6}
 802704c:	ee00 3a10 	vmov	s0, r3
 8027050:	4770      	bx	lr
 8027052:	eea0 0a00 	vfma.f32	s0, s0, s0
 8027056:	4770      	bx	lr
 8027058:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 802705c:	d001      	beq.n	8027062 <__ieee754_sqrtf+0x82>
 802705e:	e00c      	b.n	802707a <__ieee754_sqrtf+0x9a>
 8027060:	460a      	mov	r2, r1
 8027062:	005b      	lsls	r3, r3, #1
 8027064:	021c      	lsls	r4, r3, #8
 8027066:	f102 0101 	add.w	r1, r2, #1
 802706a:	d5f9      	bpl.n	8027060 <__ieee754_sqrtf+0x80>
 802706c:	1a80      	subs	r0, r0, r2
 802706e:	e7c7      	b.n	8027000 <__ieee754_sqrtf+0x20>
 8027070:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027074:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8027078:	4770      	bx	lr
 802707a:	f04f 32ff 	mov.w	r2, #4294967295
 802707e:	e7f5      	b.n	802706c <__ieee754_sqrtf+0x8c>

08027080 <__kernel_cosf>:
 8027080:	ee10 3a10 	vmov	r3, s0
 8027084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027088:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802708c:	da2c      	bge.n	80270e8 <__kernel_cosf+0x68>
 802708e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027092:	ee17 3a90 	vmov	r3, s15
 8027096:	2b00      	cmp	r3, #0
 8027098:	d060      	beq.n	802715c <__kernel_cosf+0xdc>
 802709a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802709e:	eddf 4a31 	vldr	s9, [pc, #196]	; 8027164 <__kernel_cosf+0xe4>
 80270a2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8027168 <__kernel_cosf+0xe8>
 80270a6:	eddf 5a31 	vldr	s11, [pc, #196]	; 802716c <__kernel_cosf+0xec>
 80270aa:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8027170 <__kernel_cosf+0xf0>
 80270ae:	eddf 7a31 	vldr	s15, [pc, #196]	; 8027174 <__kernel_cosf+0xf4>
 80270b2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8027178 <__kernel_cosf+0xf8>
 80270b6:	eea7 5a24 	vfma.f32	s10, s14, s9
 80270ba:	eee7 5a05 	vfma.f32	s11, s14, s10
 80270be:	eea7 6a25 	vfma.f32	s12, s14, s11
 80270c2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80270c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80270ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80270ce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80270d2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80270d6:	eee7 0a26 	vfma.f32	s1, s14, s13
 80270da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80270de:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80270e2:	ee37 0ae0 	vsub.f32	s0, s15, s1
 80270e6:	4770      	bx	lr
 80270e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80270ec:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8027164 <__kernel_cosf+0xe4>
 80270f0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8027168 <__kernel_cosf+0xe8>
 80270f4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802716c <__kernel_cosf+0xec>
 80270f8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8027170 <__kernel_cosf+0xf0>
 80270fc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8027174 <__kernel_cosf+0xf4>
 8027100:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8027178 <__kernel_cosf+0xf8>
 8027104:	4a1d      	ldr	r2, [pc, #116]	; (802717c <__kernel_cosf+0xfc>)
 8027106:	eea7 5a24 	vfma.f32	s10, s14, s9
 802710a:	4293      	cmp	r3, r2
 802710c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8027110:	eea7 6a25 	vfma.f32	s12, s14, s11
 8027114:	eee7 7a06 	vfma.f32	s15, s14, s12
 8027118:	eee7 6a27 	vfma.f32	s13, s14, s15
 802711c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8027120:	ddd5      	ble.n	80270ce <__kernel_cosf+0x4e>
 8027122:	4a17      	ldr	r2, [pc, #92]	; (8027180 <__kernel_cosf+0x100>)
 8027124:	4293      	cmp	r3, r2
 8027126:	dc14      	bgt.n	8027152 <__kernel_cosf+0xd2>
 8027128:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 802712c:	ee07 3a90 	vmov	s15, r3
 8027130:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8027134:	ee36 6a67 	vsub.f32	s12, s12, s15
 8027138:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802713c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8027140:	eee7 0a26 	vfma.f32	s1, s14, s13
 8027144:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8027148:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802714c:	ee36 0a67 	vsub.f32	s0, s12, s15
 8027150:	4770      	bx	lr
 8027152:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8027156:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 802715a:	e7ed      	b.n	8027138 <__kernel_cosf+0xb8>
 802715c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027160:	4770      	bx	lr
 8027162:	bf00      	nop
 8027164:	ad47d74e 	.word	0xad47d74e
 8027168:	310f74f6 	.word	0x310f74f6
 802716c:	b493f27c 	.word	0xb493f27c
 8027170:	37d00d01 	.word	0x37d00d01
 8027174:	bab60b61 	.word	0xbab60b61
 8027178:	3d2aaaab 	.word	0x3d2aaaab
 802717c:	3e999999 	.word	0x3e999999
 8027180:	3f480000 	.word	0x3f480000
	...

08027190 <__kernel_rem_pio2f>:
 8027190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027194:	ed2d 8b04 	vpush	{d8-d9}
 8027198:	b0d9      	sub	sp, #356	; 0x164
 802719a:	f103 3aff 	add.w	sl, r3, #4294967295
 802719e:	9304      	str	r3, [sp, #16]
 80271a0:	1ed3      	subs	r3, r2, #3
 80271a2:	bf48      	it	mi
 80271a4:	1d13      	addmi	r3, r2, #4
 80271a6:	4cd4      	ldr	r4, [pc, #848]	; (80274f8 <__kernel_rem_pio2f+0x368>)
 80271a8:	9d66      	ldr	r5, [sp, #408]	; 0x198
 80271aa:	9102      	str	r1, [sp, #8]
 80271ac:	10db      	asrs	r3, r3, #3
 80271ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80271b2:	4619      	mov	r1, r3
 80271b4:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 80271b8:	9306      	str	r3, [sp, #24]
 80271ba:	3301      	adds	r3, #1
 80271bc:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80271c0:	9301      	str	r3, [sp, #4]
 80271c2:	eba1 030a 	sub.w	r3, r1, sl
 80271c6:	eb16 010a 	adds.w	r1, r6, sl
 80271ca:	4681      	mov	r9, r0
 80271cc:	d416      	bmi.n	80271fc <__kernel_rem_pio2f+0x6c>
 80271ce:	4419      	add	r1, r3
 80271d0:	ed9f 7aca 	vldr	s14, [pc, #808]	; 80274fc <__kernel_rem_pio2f+0x36c>
 80271d4:	9867      	ldr	r0, [sp, #412]	; 0x19c
 80271d6:	3101      	adds	r1, #1
 80271d8:	aa1c      	add	r2, sp, #112	; 0x70
 80271da:	2b00      	cmp	r3, #0
 80271dc:	bfa4      	itt	ge
 80271de:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 80271e2:	ee07 4a90 	vmovge	s15, r4
 80271e6:	f103 0301 	add.w	r3, r3, #1
 80271ea:	bfac      	ite	ge
 80271ec:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80271f0:	eef0 7a47 	vmovlt.f32	s15, s14
 80271f4:	428b      	cmp	r3, r1
 80271f6:	ece2 7a01 	vstmia	r2!, {s15}
 80271fa:	d1ee      	bne.n	80271da <__kernel_rem_pio2f+0x4a>
 80271fc:	2e00      	cmp	r6, #0
 80271fe:	f2c0 8307 	blt.w	8027810 <__kernel_rem_pio2f+0x680>
 8027202:	9b04      	ldr	r3, [sp, #16]
 8027204:	ad44      	add	r5, sp, #272	; 0x110
 8027206:	009c      	lsls	r4, r3, #2
 8027208:	1c77      	adds	r7, r6, #1
 802720a:	ab1c      	add	r3, sp, #112	; 0x70
 802720c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8027210:	1918      	adds	r0, r3, r4
 8027212:	eb09 0104 	add.w	r1, r9, r4
 8027216:	f1ba 0f00 	cmp.w	sl, #0
 802721a:	f2c0 8275 	blt.w	8027708 <__kernel_rem_pio2f+0x578>
 802721e:	eddf 7ab7 	vldr	s15, [pc, #732]	; 80274fc <__kernel_rem_pio2f+0x36c>
 8027222:	464b      	mov	r3, r9
 8027224:	4602      	mov	r2, r0
 8027226:	ecf3 6a01 	vldmia	r3!, {s13}
 802722a:	ed32 7a01 	vldmdb	r2!, {s14}
 802722e:	428b      	cmp	r3, r1
 8027230:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027234:	d1f7      	bne.n	8027226 <__kernel_rem_pio2f+0x96>
 8027236:	ece5 7a01 	vstmia	r5!, {s15}
 802723a:	42bd      	cmp	r5, r7
 802723c:	f100 0004 	add.w	r0, r0, #4
 8027240:	d1e9      	bne.n	8027216 <__kernel_rem_pio2f+0x86>
 8027242:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8027246:	3b01      	subs	r3, #1
 8027248:	009b      	lsls	r3, r3, #2
 802724a:	ad08      	add	r5, sp, #32
 802724c:	1f1a      	subs	r2, r3, #4
 802724e:	18aa      	adds	r2, r5, r2
 8027250:	46b3      	mov	fp, r6
 8027252:	9603      	str	r6, [sp, #12]
 8027254:	eddf 8aab 	vldr	s17, [pc, #684]	; 8027504 <__kernel_rem_pio2f+0x374>
 8027258:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 8027500 <__kernel_rem_pio2f+0x370>
 802725c:	9e01      	ldr	r6, [sp, #4]
 802725e:	9207      	str	r2, [sp, #28]
 8027260:	444c      	add	r4, r9
 8027262:	eb05 0803 	add.w	r8, r5, r3
 8027266:	af44      	add	r7, sp, #272	; 0x110
 8027268:	ea4f 038b 	mov.w	r3, fp, lsl #2
 802726c:	aa58      	add	r2, sp, #352	; 0x160
 802726e:	441a      	add	r2, r3
 8027270:	f1bb 0f00 	cmp.w	fp, #0
 8027274:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8027278:	dd18      	ble.n	80272ac <__kernel_rem_pio2f+0x11c>
 802727a:	a907      	add	r1, sp, #28
 802727c:	eb07 028b 	add.w	r2, r7, fp, lsl #2
 8027280:	ee60 7a28 	vmul.f32	s15, s0, s17
 8027284:	eeb0 7a40 	vmov.f32	s14, s0
 8027288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802728c:	ed72 6a01 	vldmdb	r2!, {s13}
 8027290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027294:	42ba      	cmp	r2, r7
 8027296:	eea7 7ac8 	vfms.f32	s14, s15, s16
 802729a:	ee37 0aa6 	vadd.f32	s0, s15, s13
 802729e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80272a2:	ee17 0a10 	vmov	r0, s14
 80272a6:	f841 0f04 	str.w	r0, [r1, #4]!
 80272aa:	d1e9      	bne.n	8027280 <__kernel_rem_pio2f+0xf0>
 80272ac:	4630      	mov	r0, r6
 80272ae:	9305      	str	r3, [sp, #20]
 80272b0:	f7fe f866 	bl	8025380 <scalbnf>
 80272b4:	eeb0 9a40 	vmov.f32	s18, s0
 80272b8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80272bc:	ee29 0a00 	vmul.f32	s0, s18, s0
 80272c0:	f7fd ff86 	bl	80251d0 <floorf>
 80272c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80272c8:	eea0 9a67 	vfms.f32	s18, s0, s15
 80272cc:	2e00      	cmp	r6, #0
 80272ce:	9b05      	ldr	r3, [sp, #20]
 80272d0:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 80272d4:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80272d8:	ee39 9a67 	vsub.f32	s18, s18, s15
 80272dc:	f340 80c9 	ble.w	8027472 <__kernel_rem_pio2f+0x2e2>
 80272e0:	f10b 3eff 	add.w	lr, fp, #4294967295
 80272e4:	f1c6 0208 	rsb	r2, r6, #8
 80272e8:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
 80272ec:	fa41 f002 	asr.w	r0, r1, r2
 80272f0:	fa00 f202 	lsl.w	r2, r0, r2
 80272f4:	1a89      	subs	r1, r1, r2
 80272f6:	f845 102e 	str.w	r1, [r5, lr, lsl #2]
 80272fa:	ee19 ea90 	vmov	lr, s19
 80272fe:	4486      	add	lr, r0
 8027300:	f1c6 0207 	rsb	r2, r6, #7
 8027304:	ee09 ea90 	vmov	s19, lr
 8027308:	4111      	asrs	r1, r2
 802730a:	2900      	cmp	r1, #0
 802730c:	dd51      	ble.n	80273b2 <__kernel_rem_pio2f+0x222>
 802730e:	ee19 2a90 	vmov	r2, s19
 8027312:	f1bb 0f00 	cmp.w	fp, #0
 8027316:	f102 0201 	add.w	r2, r2, #1
 802731a:	ee09 2a90 	vmov	s19, r2
 802731e:	f340 8212 	ble.w	8027746 <__kernel_rem_pio2f+0x5b6>
 8027322:	682a      	ldr	r2, [r5, #0]
 8027324:	2a00      	cmp	r2, #0
 8027326:	f040 8269 	bne.w	80277fc <__kernel_rem_pio2f+0x66c>
 802732a:	f1bb 0f01 	cmp.w	fp, #1
 802732e:	f340 8229 	ble.w	8027784 <__kernel_rem_pio2f+0x5f4>
 8027332:	46ae      	mov	lr, r5
 8027334:	2001      	movs	r0, #1
 8027336:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 802733a:	2a00      	cmp	r2, #0
 802733c:	f000 821e 	beq.w	802777c <__kernel_rem_pio2f+0x5ec>
 8027340:	f100 0e01 	add.w	lr, r0, #1
 8027344:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027348:	45f3      	cmp	fp, lr
 802734a:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 802734e:	dd12      	ble.n	8027376 <__kernel_rem_pio2f+0x1e6>
 8027350:	f855 202e 	ldr.w	r2, [r5, lr, lsl #2]
 8027354:	3002      	adds	r0, #2
 8027356:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802735a:	4583      	cmp	fp, r0
 802735c:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
 8027360:	dd09      	ble.n	8027376 <__kernel_rem_pio2f+0x1e6>
 8027362:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8027366:	18ea      	adds	r2, r5, r3
 8027368:	6803      	ldr	r3, [r0, #0]
 802736a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802736e:	f840 3b04 	str.w	r3, [r0], #4
 8027372:	4290      	cmp	r0, r2
 8027374:	d1f8      	bne.n	8027368 <__kernel_rem_pio2f+0x1d8>
 8027376:	2e00      	cmp	r6, #0
 8027378:	dd0d      	ble.n	8027396 <__kernel_rem_pio2f+0x206>
 802737a:	2e01      	cmp	r6, #1
 802737c:	f04f 0201 	mov.w	r2, #1
 8027380:	f040 81e7 	bne.w	8027752 <__kernel_rem_pio2f+0x5c2>
 8027384:	f10b 30ff 	add.w	r0, fp, #4294967295
 8027388:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 802738c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8027390:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 8027394:	e1e7      	b.n	8027766 <__kernel_rem_pio2f+0x5d6>
 8027396:	2902      	cmp	r1, #2
 8027398:	d10b      	bne.n	80273b2 <__kernel_rem_pio2f+0x222>
 802739a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802739e:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80273a2:	4630      	mov	r0, r6
 80273a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80273a8:	f7fd ffea 	bl	8025380 <scalbnf>
 80273ac:	ee39 9a40 	vsub.f32	s18, s18, s0
 80273b0:	2102      	movs	r1, #2
 80273b2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80273b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273ba:	d170      	bne.n	802749e <__kernel_rem_pio2f+0x30e>
 80273bc:	9b03      	ldr	r3, [sp, #12]
 80273be:	f10b 3eff 	add.w	lr, fp, #4294967295
 80273c2:	4573      	cmp	r3, lr
 80273c4:	dc0e      	bgt.n	80273e4 <__kernel_rem_pio2f+0x254>
 80273c6:	f10b 4280 	add.w	r2, fp, #1073741824	; 0x40000000
 80273ca:	3a01      	subs	r2, #1
 80273cc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80273d0:	2000      	movs	r0, #0
 80273d2:	f852 3904 	ldr.w	r3, [r2], #-4
 80273d6:	4542      	cmp	r2, r8
 80273d8:	ea40 0003 	orr.w	r0, r0, r3
 80273dc:	d1f9      	bne.n	80273d2 <__kernel_rem_pio2f+0x242>
 80273de:	2800      	cmp	r0, #0
 80273e0:	f040 8094 	bne.w	802750c <__kernel_rem_pio2f+0x37c>
 80273e4:	9b03      	ldr	r3, [sp, #12]
 80273e6:	3b01      	subs	r3, #1
 80273e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	f040 81d3 	bne.w	8027798 <__kernel_rem_pio2f+0x608>
 80273f2:	9b07      	ldr	r3, [sp, #28]
 80273f4:	f04f 0c01 	mov.w	ip, #1
 80273f8:	f853 2904 	ldr.w	r2, [r3], #-4
 80273fc:	f10c 0c01 	add.w	ip, ip, #1
 8027400:	2a00      	cmp	r2, #0
 8027402:	d0f9      	beq.n	80273f8 <__kernel_rem_pio2f+0x268>
 8027404:	44dc      	add	ip, fp
 8027406:	f10b 0e01 	add.w	lr, fp, #1
 802740a:	45e6      	cmp	lr, ip
 802740c:	dc2f      	bgt.n	802746e <__kernel_rem_pio2f+0x2de>
 802740e:	9a06      	ldr	r2, [sp, #24]
 8027410:	9b04      	ldr	r3, [sp, #16]
 8027412:	eb0e 0102 	add.w	r1, lr, r2
 8027416:	eb03 000b 	add.w	r0, r3, fp
 802741a:	eb0c 0302 	add.w	r3, ip, r2
 802741e:	aa1c      	add	r2, sp, #112	; 0x70
 8027420:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027424:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8027428:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 802742a:	3901      	subs	r1, #1
 802742c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8027430:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
 8027434:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 8027438:	f851 3f04 	ldr.w	r3, [r1, #4]!
 802743c:	ee07 3a90 	vmov	s15, r3
 8027440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027444:	f1ba 0f00 	cmp.w	sl, #0
 8027448:	ece0 7a01 	vstmia	r0!, {s15}
 802744c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80274fc <__kernel_rem_pio2f+0x36c>
 8027450:	db09      	blt.n	8027466 <__kernel_rem_pio2f+0x2d6>
 8027452:	464b      	mov	r3, r9
 8027454:	4602      	mov	r2, r0
 8027456:	ecf3 6a01 	vldmia	r3!, {s13}
 802745a:	ed32 7a01 	vldmdb	r2!, {s14}
 802745e:	42a3      	cmp	r3, r4
 8027460:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027464:	d1f7      	bne.n	8027456 <__kernel_rem_pio2f+0x2c6>
 8027466:	4559      	cmp	r1, fp
 8027468:	ecee 7a01 	vstmia	lr!, {s15}
 802746c:	d1e4      	bne.n	8027438 <__kernel_rem_pio2f+0x2a8>
 802746e:	46e3      	mov	fp, ip
 8027470:	e6fa      	b.n	8027268 <__kernel_rem_pio2f+0xd8>
 8027472:	d105      	bne.n	8027480 <__kernel_rem_pio2f+0x2f0>
 8027474:	f10b 32ff 	add.w	r2, fp, #4294967295
 8027478:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 802747c:	1209      	asrs	r1, r1, #8
 802747e:	e744      	b.n	802730a <__kernel_rem_pio2f+0x17a>
 8027480:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027484:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8027488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802748c:	f280 8146 	bge.w	802771c <__kernel_rem_pio2f+0x58c>
 8027490:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8027494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027498:	f04f 0100 	mov.w	r1, #0
 802749c:	d08e      	beq.n	80273bc <__kernel_rem_pio2f+0x22c>
 802749e:	9c01      	ldr	r4, [sp, #4]
 80274a0:	9e03      	ldr	r6, [sp, #12]
 80274a2:	eeb0 0a49 	vmov.f32	s0, s18
 80274a6:	4260      	negs	r0, r4
 80274a8:	4688      	mov	r8, r1
 80274aa:	f7fd ff69 	bl	8025380 <scalbnf>
 80274ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8027500 <__kernel_rem_pio2f+0x370>
 80274b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80274b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80274ba:	f2c0 8185 	blt.w	80277c8 <__kernel_rem_pio2f+0x638>
 80274be:	eddf 7a11 	vldr	s15, [pc, #68]	; 8027504 <__kernel_rem_pio2f+0x374>
 80274c2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80274c6:	4623      	mov	r3, r4
 80274c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80274cc:	3308      	adds	r3, #8
 80274ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80274d2:	9301      	str	r3, [sp, #4]
 80274d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80274d8:	f10b 0301 	add.w	r3, fp, #1
 80274dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80274e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80274e4:	ee10 2a10 	vmov	r2, s0
 80274e8:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 80274ec:	ee17 2a90 	vmov	r2, s15
 80274f0:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 80274f4:	e01f      	b.n	8027536 <__kernel_rem_pio2f+0x3a6>
 80274f6:	bf00      	nop
 80274f8:	08030c30 	.word	0x08030c30
 80274fc:	00000000 	.word	0x00000000
 8027500:	43800000 	.word	0x43800000
 8027504:	3b800000 	.word	0x3b800000
 8027508:	3fc90000 	.word	0x3fc90000
 802750c:	4688      	mov	r8, r1
 802750e:	9901      	ldr	r1, [sp, #4]
 8027510:	f855 202e 	ldr.w	r2, [r5, lr, lsl #2]
 8027514:	9e03      	ldr	r6, [sp, #12]
 8027516:	3908      	subs	r1, #8
 8027518:	4673      	mov	r3, lr
 802751a:	9101      	str	r1, [sp, #4]
 802751c:	b95a      	cbnz	r2, 8027536 <__kernel_rem_pio2f+0x3a6>
 802751e:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
 8027522:	3a01      	subs	r2, #1
 8027524:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8027528:	f852 0904 	ldr.w	r0, [r2], #-4
 802752c:	3b01      	subs	r3, #1
 802752e:	3908      	subs	r1, #8
 8027530:	2800      	cmp	r0, #0
 8027532:	d0f9      	beq.n	8027528 <__kernel_rem_pio2f+0x398>
 8027534:	9101      	str	r1, [sp, #4]
 8027536:	9801      	ldr	r0, [sp, #4]
 8027538:	9303      	str	r3, [sp, #12]
 802753a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802753e:	f7fd ff1f 	bl	8025380 <scalbnf>
 8027542:	9b03      	ldr	r3, [sp, #12]
 8027544:	2b00      	cmp	r3, #0
 8027546:	f2c0 814a 	blt.w	80277de <__kernel_rem_pio2f+0x64e>
 802754a:	009f      	lsls	r7, r3, #2
 802754c:	aa44      	add	r2, sp, #272	; 0x110
 802754e:	19d0      	adds	r0, r2, r7
 8027550:	f107 0e04 	add.w	lr, r7, #4
 8027554:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8027504 <__kernel_rem_pio2f+0x374>
 8027558:	eb05 020e 	add.w	r2, r5, lr
 802755c:	1d01      	adds	r1, r0, #4
 802755e:	ed72 7a01 	vldmdb	r2!, {s15}
 8027562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027566:	42aa      	cmp	r2, r5
 8027568:	ee67 7a80 	vmul.f32	s15, s15, s0
 802756c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8027570:	ed61 7a01 	vstmdb	r1!, {s15}
 8027574:	d1f3      	bne.n	802755e <__kernel_rem_pio2f+0x3ce>
 8027576:	ed1f 6a1c 	vldr	s12, [pc, #-112]	; 8027508 <__kernel_rem_pio2f+0x378>
 802757a:	4605      	mov	r5, r0
 802757c:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 8027580:	2400      	movs	r4, #0
 8027582:	2e00      	cmp	r6, #0
 8027584:	f2c0 80dc 	blt.w	8027740 <__kernel_rem_pio2f+0x5b0>
 8027588:	48a3      	ldr	r0, [pc, #652]	; (8027818 <__kernel_rem_pio2f+0x688>)
 802758a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 802781c <__kernel_rem_pio2f+0x68c>
 802758e:	4629      	mov	r1, r5
 8027590:	eeb0 7a46 	vmov.f32	s14, s12
 8027594:	2200      	movs	r2, #0
 8027596:	e003      	b.n	80275a0 <__kernel_rem_pio2f+0x410>
 8027598:	42a2      	cmp	r2, r4
 802759a:	dc08      	bgt.n	80275ae <__kernel_rem_pio2f+0x41e>
 802759c:	ecb0 7a01 	vldmia	r0!, {s14}
 80275a0:	ecf1 6a01 	vldmia	r1!, {s13}
 80275a4:	3201      	adds	r2, #1
 80275a6:	4296      	cmp	r6, r2
 80275a8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80275ac:	daf4      	bge.n	8027598 <__kernel_rem_pio2f+0x408>
 80275ae:	3d04      	subs	r5, #4
 80275b0:	aa58      	add	r2, sp, #352	; 0x160
 80275b2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80275b6:	4565      	cmp	r5, ip
 80275b8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80275bc:	f104 0401 	add.w	r4, r4, #1
 80275c0:	d1df      	bne.n	8027582 <__kernel_rem_pio2f+0x3f2>
 80275c2:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80275c4:	2a03      	cmp	r2, #3
 80275c6:	d85a      	bhi.n	802767e <__kernel_rem_pio2f+0x4ee>
 80275c8:	e8df f002 	tbb	[pc, r2]
 80275cc:	0262628c 	.word	0x0262628c
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	f340 8101 	ble.w	80277d8 <__kernel_rem_pio2f+0x648>
 80275d6:	aa58      	add	r2, sp, #352	; 0x160
 80275d8:	443a      	add	r2, r7
 80275da:	a930      	add	r1, sp, #192	; 0xc0
 80275dc:	ed12 7a28 	vldr	s14, [r2, #-160]	; 0xffffff60
 80275e0:	1d3a      	adds	r2, r7, #4
 80275e2:	440a      	add	r2, r1
 80275e4:	a831      	add	r0, sp, #196	; 0xc4
 80275e6:	4439      	add	r1, r7
 80275e8:	ed51 7a01 	vldr	s15, [r1, #-4]
 80275ec:	ee77 6a87 	vadd.f32	s13, s15, s14
 80275f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80275f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80275f8:	eeb0 7a66 	vmov.f32	s14, s13
 80275fc:	ed62 7a01 	vstmdb	r2!, {s15}
 8027600:	4282      	cmp	r2, r0
 8027602:	ed61 6a01 	vstmdb	r1!, {s13}
 8027606:	d1ef      	bne.n	80275e8 <__kernel_rem_pio2f+0x458>
 8027608:	2b01      	cmp	r3, #1
 802760a:	f340 80e5 	ble.w	80277d8 <__kernel_rem_pio2f+0x648>
 802760e:	ab58      	add	r3, sp, #352	; 0x160
 8027610:	443b      	add	r3, r7
 8027612:	aa30      	add	r2, sp, #192	; 0xc0
 8027614:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8027618:	1d3b      	adds	r3, r7, #4
 802761a:	a932      	add	r1, sp, #200	; 0xc8
 802761c:	4417      	add	r7, r2
 802761e:	441a      	add	r2, r3
 8027620:	ed57 7a01 	vldr	s15, [r7, #-4]
 8027624:	ee77 6a87 	vadd.f32	s13, s15, s14
 8027628:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802762c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027630:	eeb0 7a66 	vmov.f32	s14, s13
 8027634:	ed62 7a01 	vstmdb	r2!, {s15}
 8027638:	4291      	cmp	r1, r2
 802763a:	ed67 6a01 	vstmdb	r7!, {s13}
 802763e:	d1ef      	bne.n	8027620 <__kernel_rem_pio2f+0x490>
 8027640:	a930      	add	r1, sp, #192	; 0xc0
 8027642:	eddf 7a76 	vldr	s15, [pc, #472]	; 802781c <__kernel_rem_pio2f+0x68c>
 8027646:	440b      	add	r3, r1
 8027648:	ed33 7a01 	vldmdb	r3!, {s14}
 802764c:	429a      	cmp	r2, r3
 802764e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027652:	d1f9      	bne.n	8027648 <__kernel_rem_pio2f+0x4b8>
 8027654:	4643      	mov	r3, r8
 8027656:	2b00      	cmp	r3, #0
 8027658:	f000 80ae 	beq.w	80277b8 <__kernel_rem_pio2f+0x628>
 802765c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8027660:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8027664:	9a02      	ldr	r2, [sp, #8]
 8027666:	eef1 7a67 	vneg.f32	s15, s15
 802766a:	eef1 6a66 	vneg.f32	s13, s13
 802766e:	eeb1 7a47 	vneg.f32	s14, s14
 8027672:	edc2 7a02 	vstr	s15, [r2, #8]
 8027676:	edc2 6a00 	vstr	s13, [r2]
 802767a:	ed82 7a01 	vstr	s14, [r2, #4]
 802767e:	ee19 3a90 	vmov	r3, s19
 8027682:	f003 0007 	and.w	r0, r3, #7
 8027686:	b059      	add	sp, #356	; 0x164
 8027688:	ecbd 8b04 	vpop	{d8-d9}
 802768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027690:	1d3a      	adds	r2, r7, #4
 8027692:	a930      	add	r1, sp, #192	; 0xc0
 8027694:	eddf 7a61 	vldr	s15, [pc, #388]	; 802781c <__kernel_rem_pio2f+0x68c>
 8027698:	440a      	add	r2, r1
 802769a:	ed32 7a01 	vldmdb	r2!, {s14}
 802769e:	428a      	cmp	r2, r1
 80276a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80276a4:	d1f9      	bne.n	802769a <__kernel_rem_pio2f+0x50a>
 80276a6:	4642      	mov	r2, r8
 80276a8:	2a00      	cmp	r2, #0
 80276aa:	d078      	beq.n	802779e <__kernel_rem_pio2f+0x60e>
 80276ac:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80276b0:	9a02      	ldr	r2, [sp, #8]
 80276b2:	eeb1 7a67 	vneg.f32	s14, s15
 80276b6:	2b00      	cmp	r3, #0
 80276b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80276bc:	ed82 7a00 	vstr	s14, [r2]
 80276c0:	dd0a      	ble.n	80276d8 <__kernel_rem_pio2f+0x548>
 80276c2:	a931      	add	r1, sp, #196	; 0xc4
 80276c4:	2201      	movs	r2, #1
 80276c6:	ecb1 7a01 	vldmia	r1!, {s14}
 80276ca:	3201      	adds	r2, #1
 80276cc:	4293      	cmp	r3, r2
 80276ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80276d2:	daf8      	bge.n	80276c6 <__kernel_rem_pio2f+0x536>
 80276d4:	4643      	mov	r3, r8
 80276d6:	b10b      	cbz	r3, 80276dc <__kernel_rem_pio2f+0x54c>
 80276d8:	eef1 7a67 	vneg.f32	s15, s15
 80276dc:	9b02      	ldr	r3, [sp, #8]
 80276de:	edc3 7a01 	vstr	s15, [r3, #4]
 80276e2:	e7cc      	b.n	802767e <__kernel_rem_pio2f+0x4ee>
 80276e4:	ab30      	add	r3, sp, #192	; 0xc0
 80276e6:	eddf 7a4d 	vldr	s15, [pc, #308]	; 802781c <__kernel_rem_pio2f+0x68c>
 80276ea:	449e      	add	lr, r3
 80276ec:	ed3e 7a01 	vldmdb	lr!, {s14}
 80276f0:	4573      	cmp	r3, lr
 80276f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80276f6:	d1f9      	bne.n	80276ec <__kernel_rem_pio2f+0x55c>
 80276f8:	4643      	mov	r3, r8
 80276fa:	b10b      	cbz	r3, 8027700 <__kernel_rem_pio2f+0x570>
 80276fc:	eef1 7a67 	vneg.f32	s15, s15
 8027700:	9b02      	ldr	r3, [sp, #8]
 8027702:	edc3 7a00 	vstr	s15, [r3]
 8027706:	e7ba      	b.n	802767e <__kernel_rem_pio2f+0x4ee>
 8027708:	eddf 7a44 	vldr	s15, [pc, #272]	; 802781c <__kernel_rem_pio2f+0x68c>
 802770c:	ece5 7a01 	vstmia	r5!, {s15}
 8027710:	42bd      	cmp	r5, r7
 8027712:	f100 0004 	add.w	r0, r0, #4
 8027716:	f47f ad7e 	bne.w	8027216 <__kernel_rem_pio2f+0x86>
 802771a:	e592      	b.n	8027242 <__kernel_rem_pio2f+0xb2>
 802771c:	ee19 2a90 	vmov	r2, s19
 8027720:	f1bb 0f00 	cmp.w	fp, #0
 8027724:	f102 0201 	add.w	r2, r2, #1
 8027728:	ee09 2a90 	vmov	s19, r2
 802772c:	bfc8      	it	gt
 802772e:	2102      	movgt	r1, #2
 8027730:	f73f adf7 	bgt.w	8027322 <__kernel_rem_pio2f+0x192>
 8027734:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027738:	ee37 9ac9 	vsub.f32	s18, s15, s18
 802773c:	2102      	movs	r1, #2
 802773e:	e638      	b.n	80273b2 <__kernel_rem_pio2f+0x222>
 8027740:	eddf 7a36 	vldr	s15, [pc, #216]	; 802781c <__kernel_rem_pio2f+0x68c>
 8027744:	e733      	b.n	80275ae <__kernel_rem_pio2f+0x41e>
 8027746:	2e00      	cmp	r6, #0
 8027748:	dd1e      	ble.n	8027788 <__kernel_rem_pio2f+0x5f8>
 802774a:	2200      	movs	r2, #0
 802774c:	2e01      	cmp	r6, #1
 802774e:	f43f ae19 	beq.w	8027384 <__kernel_rem_pio2f+0x1f4>
 8027752:	2e02      	cmp	r6, #2
 8027754:	d107      	bne.n	8027766 <__kernel_rem_pio2f+0x5d6>
 8027756:	f10b 30ff 	add.w	r0, fp, #4294967295
 802775a:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 802775e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027762:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 8027766:	2902      	cmp	r1, #2
 8027768:	f47f ae23 	bne.w	80273b2 <__kernel_rem_pio2f+0x222>
 802776c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027770:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8027774:	2a00      	cmp	r2, #0
 8027776:	f43f ae1c 	beq.w	80273b2 <__kernel_rem_pio2f+0x222>
 802777a:	e612      	b.n	80273a2 <__kernel_rem_pio2f+0x212>
 802777c:	3001      	adds	r0, #1
 802777e:	4583      	cmp	fp, r0
 8027780:	f47f add9 	bne.w	8027336 <__kernel_rem_pio2f+0x1a6>
 8027784:	2e00      	cmp	r6, #0
 8027786:	dce1      	bgt.n	802774c <__kernel_rem_pio2f+0x5bc>
 8027788:	2902      	cmp	r1, #2
 802778a:	f47f ae12 	bne.w	80273b2 <__kernel_rem_pio2f+0x222>
 802778e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027792:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8027796:	e60c      	b.n	80273b2 <__kernel_rem_pio2f+0x222>
 8027798:	f04f 0c01 	mov.w	ip, #1
 802779c:	e632      	b.n	8027404 <__kernel_rem_pio2f+0x274>
 802779e:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80277a2:	9a02      	ldr	r2, [sp, #8]
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	edc2 7a00 	vstr	s15, [r2]
 80277aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80277ae:	dc88      	bgt.n	80276c2 <__kernel_rem_pio2f+0x532>
 80277b0:	9b02      	ldr	r3, [sp, #8]
 80277b2:	edc3 7a01 	vstr	s15, [r3, #4]
 80277b6:	e762      	b.n	802767e <__kernel_rem_pio2f+0x4ee>
 80277b8:	9802      	ldr	r0, [sp, #8]
 80277ba:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80277bc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80277be:	edc0 7a02 	vstr	s15, [r0, #8]
 80277c2:	6002      	str	r2, [r0, #0]
 80277c4:	6043      	str	r3, [r0, #4]
 80277c6:	e75a      	b.n	802767e <__kernel_rem_pio2f+0x4ee>
 80277c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80277cc:	465b      	mov	r3, fp
 80277ce:	ee10 2a10 	vmov	r2, s0
 80277d2:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 80277d6:	e6ae      	b.n	8027536 <__kernel_rem_pio2f+0x3a6>
 80277d8:	eddf 7a10 	vldr	s15, [pc, #64]	; 802781c <__kernel_rem_pio2f+0x68c>
 80277dc:	e73a      	b.n	8027654 <__kernel_rem_pio2f+0x4c4>
 80277de:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80277e0:	2a03      	cmp	r2, #3
 80277e2:	f63f af4c 	bhi.w	802767e <__kernel_rem_pio2f+0x4ee>
 80277e6:	a101      	add	r1, pc, #4	; (adr r1, 80277ec <__kernel_rem_pio2f+0x65c>)
 80277e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80277ec:	0802780b 	.word	0x0802780b
 80277f0:	08027805 	.word	0x08027805
 80277f4:	08027805 	.word	0x08027805
 80277f8:	080277d9 	.word	0x080277d9
 80277fc:	f04f 0e01 	mov.w	lr, #1
 8027800:	2000      	movs	r0, #0
 8027802:	e59f      	b.n	8027344 <__kernel_rem_pio2f+0x1b4>
 8027804:	eddf 7a05 	vldr	s15, [pc, #20]	; 802781c <__kernel_rem_pio2f+0x68c>
 8027808:	e74d      	b.n	80276a6 <__kernel_rem_pio2f+0x516>
 802780a:	eddf 7a04 	vldr	s15, [pc, #16]	; 802781c <__kernel_rem_pio2f+0x68c>
 802780e:	e773      	b.n	80276f8 <__kernel_rem_pio2f+0x568>
 8027810:	9b04      	ldr	r3, [sp, #16]
 8027812:	009c      	lsls	r4, r3, #2
 8027814:	e515      	b.n	8027242 <__kernel_rem_pio2f+0xb2>
 8027816:	bf00      	nop
 8027818:	08030c04 	.word	0x08030c04
 802781c:	00000000 	.word	0x00000000

08027820 <__kernel_sinf>:
 8027820:	ee10 3a10 	vmov	r3, s0
 8027824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027828:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802782c:	da04      	bge.n	8027838 <__kernel_sinf+0x18>
 802782e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027832:	ee17 3a90 	vmov	r3, s15
 8027836:	b323      	cbz	r3, 8027882 <__kernel_sinf+0x62>
 8027838:	ee60 7a00 	vmul.f32	s15, s0, s0
 802783c:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8027894 <__kernel_sinf+0x74>
 8027840:	eddf 5a15 	vldr	s11, [pc, #84]	; 8027898 <__kernel_sinf+0x78>
 8027844:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802789c <__kernel_sinf+0x7c>
 8027848:	eddf 6a15 	vldr	s13, [pc, #84]	; 80278a0 <__kernel_sinf+0x80>
 802784c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80278a4 <__kernel_sinf+0x84>
 8027850:	eee7 5a85 	vfma.f32	s11, s15, s10
 8027854:	ee20 5a27 	vmul.f32	s10, s0, s15
 8027858:	eea7 6aa5 	vfma.f32	s12, s15, s11
 802785c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8027860:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8027864:	b170      	cbz	r0, 8027884 <__kernel_sinf+0x64>
 8027866:	ee27 7a45 	vnmul.f32	s14, s14, s10
 802786a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802786e:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8027872:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80278a8 <__kernel_sinf+0x88>
 8027876:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802787a:	eee5 0a26 	vfma.f32	s1, s10, s13
 802787e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027882:	4770      	bx	lr
 8027884:	eddf 6a09 	vldr	s13, [pc, #36]	; 80278ac <__kernel_sinf+0x8c>
 8027888:	eee7 6a87 	vfma.f32	s13, s15, s14
 802788c:	eea5 0a26 	vfma.f32	s0, s10, s13
 8027890:	4770      	bx	lr
 8027892:	bf00      	nop
 8027894:	2f2ec9d3 	.word	0x2f2ec9d3
 8027898:	b2d72f34 	.word	0xb2d72f34
 802789c:	3638ef1b 	.word	0x3638ef1b
 80278a0:	b9500d01 	.word	0xb9500d01
 80278a4:	3c088889 	.word	0x3c088889
 80278a8:	3e2aaaab 	.word	0x3e2aaaab
 80278ac:	be2aaaab 	.word	0xbe2aaaab

080278b0 <matherr>:
 80278b0:	2000      	movs	r0, #0
 80278b2:	4770      	bx	lr
	...

080278c0 <nan>:
 80278c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80278c8 <nan+0x8>
 80278c4:	4770      	bx	lr
 80278c6:	bf00      	nop
 80278c8:	00000000 	.word	0x00000000
 80278cc:	7ff80000 	.word	0x7ff80000

080278d0 <rint>:
 80278d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80278d2:	ec53 2b10 	vmov	r2, r3, d0
 80278d6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80278da:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 80278de:	2813      	cmp	r0, #19
 80278e0:	b083      	sub	sp, #12
 80278e2:	4619      	mov	r1, r3
 80278e4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80278e8:	ee10 5a10 	vmov	r5, s0
 80278ec:	dc2f      	bgt.n	802794e <rint+0x7e>
 80278ee:	2800      	cmp	r0, #0
 80278f0:	db49      	blt.n	8027986 <rint+0xb6>
 80278f2:	4e3e      	ldr	r6, [pc, #248]	; (80279ec <rint+0x11c>)
 80278f4:	4106      	asrs	r6, r0
 80278f6:	ea03 0706 	and.w	r7, r3, r6
 80278fa:	4317      	orrs	r7, r2
 80278fc:	d02c      	beq.n	8027958 <rint+0x88>
 80278fe:	0876      	lsrs	r6, r6, #1
 8027900:	4033      	ands	r3, r6
 8027902:	431d      	orrs	r5, r3
 8027904:	d00c      	beq.n	8027920 <rint+0x50>
 8027906:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802790a:	2813      	cmp	r0, #19
 802790c:	ea21 0606 	bic.w	r6, r1, r6
 8027910:	fa43 f100 	asr.w	r1, r3, r0
 8027914:	ea41 0106 	orr.w	r1, r1, r6
 8027918:	bf0c      	ite	eq
 802791a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 802791e:	2500      	movne	r5, #0
 8027920:	4833      	ldr	r0, [pc, #204]	; (80279f0 <rint+0x120>)
 8027922:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8027926:	462a      	mov	r2, r5
 8027928:	e9d4 4500 	ldrd	r4, r5, [r4]
 802792c:	4610      	mov	r0, r2
 802792e:	462b      	mov	r3, r5
 8027930:	4622      	mov	r2, r4
 8027932:	f7e4 fc0b 	bl	800c14c <__adddf3>
 8027936:	e9cd 0100 	strd	r0, r1, [sp]
 802793a:	4622      	mov	r2, r4
 802793c:	462b      	mov	r3, r5
 802793e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027942:	f7e4 fc01 	bl	800c148 <__aeabi_dsub>
 8027946:	ec41 0b10 	vmov	d0, r0, r1
 802794a:	b003      	add	sp, #12
 802794c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802794e:	2833      	cmp	r0, #51	; 0x33
 8027950:	dd06      	ble.n	8027960 <rint+0x90>
 8027952:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8027956:	d040      	beq.n	80279da <rint+0x10a>
 8027958:	ec43 2b10 	vmov	d0, r2, r3
 802795c:	b003      	add	sp, #12
 802795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027960:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8027964:	f04f 30ff 	mov.w	r0, #4294967295
 8027968:	40f0      	lsrs	r0, r6
 802796a:	4202      	tst	r2, r0
 802796c:	d0f4      	beq.n	8027958 <rint+0x88>
 802796e:	0840      	lsrs	r0, r0, #1
 8027970:	4202      	tst	r2, r0
 8027972:	d0d5      	beq.n	8027920 <rint+0x50>
 8027974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8027978:	ea25 0000 	bic.w	r0, r5, r0
 802797c:	fa43 f606 	asr.w	r6, r3, r6
 8027980:	ea46 0500 	orr.w	r5, r6, r0
 8027984:	e7cc      	b.n	8027920 <rint+0x50>
 8027986:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 802798a:	4310      	orrs	r0, r2
 802798c:	d0e4      	beq.n	8027958 <rint+0x88>
 802798e:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8027992:	4310      	orrs	r0, r2
 8027994:	4247      	negs	r7, r0
 8027996:	4307      	orrs	r7, r0
 8027998:	4d15      	ldr	r5, [pc, #84]	; (80279f0 <rint+0x120>)
 802799a:	0c5e      	lsrs	r6, r3, #17
 802799c:	0b3f      	lsrs	r7, r7, #12
 802799e:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
 80279a2:	0476      	lsls	r6, r6, #17
 80279a4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 80279a8:	ea43 0106 	orr.w	r1, r3, r6
 80279ac:	e9d2 6700 	ldrd	r6, r7, [r2]
 80279b0:	ee10 0a10 	vmov	r0, s0
 80279b4:	4632      	mov	r2, r6
 80279b6:	463b      	mov	r3, r7
 80279b8:	f7e4 fbc8 	bl	800c14c <__adddf3>
 80279bc:	e9cd 0100 	strd	r0, r1, [sp]
 80279c0:	463b      	mov	r3, r7
 80279c2:	4632      	mov	r2, r6
 80279c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80279c8:	f7e4 fbbe 	bl	800c148 <__aeabi_dsub>
 80279cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80279d0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 80279d4:	ec41 0b10 	vmov	d0, r0, r1
 80279d8:	e7c0      	b.n	802795c <rint+0x8c>
 80279da:	ee10 0a10 	vmov	r0, s0
 80279de:	4619      	mov	r1, r3
 80279e0:	f7e4 fbb4 	bl	800c14c <__adddf3>
 80279e4:	ec41 0b10 	vmov	d0, r0, r1
 80279e8:	e7b8      	b.n	802795c <rint+0x8c>
 80279ea:	bf00      	nop
 80279ec:	000fffff 	.word	0x000fffff
 80279f0:	08030c40 	.word	0x08030c40
	...

08027a00 <atanf>:
 8027a00:	b538      	push	{r3, r4, r5, lr}
 8027a02:	ee10 5a10 	vmov	r5, s0
 8027a06:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8027a0a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8027a0e:	eef0 7a40 	vmov.f32	s15, s0
 8027a12:	db0b      	blt.n	8027a2c <atanf+0x2c>
 8027a14:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8027a18:	dc56      	bgt.n	8027ac8 <atanf+0xc8>
 8027a1a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8027b64 <atanf+0x164>
 8027a1e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8027b68 <atanf+0x168>
 8027a22:	2d00      	cmp	r5, #0
 8027a24:	bfc8      	it	gt
 8027a26:	eeb0 0a67 	vmovgt.f32	s0, s15
 8027a2a:	bd38      	pop	{r3, r4, r5, pc}
 8027a2c:	4b4f      	ldr	r3, [pc, #316]	; (8027b6c <atanf+0x16c>)
 8027a2e:	429c      	cmp	r4, r3
 8027a30:	dc59      	bgt.n	8027ae6 <atanf+0xe6>
 8027a32:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8027a36:	db4a      	blt.n	8027ace <atanf+0xce>
 8027a38:	f04f 33ff 	mov.w	r3, #4294967295
 8027a3c:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8027a40:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8027b70 <atanf+0x170>
 8027a44:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8027b74 <atanf+0x174>
 8027a48:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8027b78 <atanf+0x178>
 8027a4c:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8027b7c <atanf+0x17c>
 8027a50:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8027b80 <atanf+0x180>
 8027a54:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 8027b84 <atanf+0x184>
 8027a58:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8027b88 <atanf+0x188>
 8027a5c:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 8027b8c <atanf+0x18c>
 8027a60:	eddf 4a4b 	vldr	s9, [pc, #300]	; 8027b90 <atanf+0x190>
 8027a64:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8027b94 <atanf+0x194>
 8027a68:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8027b98 <atanf+0x198>
 8027a6c:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8027a70:	1c5a      	adds	r2, r3, #1
 8027a72:	eea7 2a01 	vfma.f32	s4, s14, s2
 8027a76:	eee7 2a21 	vfma.f32	s5, s14, s3
 8027a7a:	eea7 3a02 	vfma.f32	s6, s14, s4
 8027a7e:	eee7 3a22 	vfma.f32	s7, s14, s5
 8027a82:	eea7 4a03 	vfma.f32	s8, s14, s6
 8027a86:	eee7 4a23 	vfma.f32	s9, s14, s7
 8027a8a:	eea7 5a04 	vfma.f32	s10, s14, s8
 8027a8e:	eea7 6a24 	vfma.f32	s12, s14, s9
 8027a92:	eee7 6a05 	vfma.f32	s13, s14, s10
 8027a96:	ee26 7a07 	vmul.f32	s14, s12, s14
 8027a9a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8027a9e:	d03a      	beq.n	8027b16 <atanf+0x116>
 8027aa0:	493e      	ldr	r1, [pc, #248]	; (8027b9c <atanf+0x19c>)
 8027aa2:	4a3f      	ldr	r2, [pc, #252]	; (8027ba0 <atanf+0x1a0>)
 8027aa4:	009b      	lsls	r3, r3, #2
 8027aa6:	4419      	add	r1, r3
 8027aa8:	ee76 6a87 	vadd.f32	s13, s13, s14
 8027aac:	ed91 0a00 	vldr	s0, [r1]
 8027ab0:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8027ab4:	4413      	add	r3, r2
 8027ab6:	2d00      	cmp	r5, #0
 8027ab8:	ed93 7a00 	vldr	s14, [r3]
 8027abc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8027ac0:	ee37 0a67 	vsub.f32	s0, s14, s15
 8027ac4:	db24      	blt.n	8027b10 <atanf+0x110>
 8027ac6:	bd38      	pop	{r3, r4, r5, pc}
 8027ac8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027acc:	bd38      	pop	{r3, r4, r5, pc}
 8027ace:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8027ba4 <atanf+0x1a4>
 8027ad2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8027ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027ada:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8027ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ae2:	dda9      	ble.n	8027a38 <atanf+0x38>
 8027ae4:	bd38      	pop	{r3, r4, r5, pc}
 8027ae6:	f000 f873 	bl	8027bd0 <fabsf>
 8027aea:	4b2f      	ldr	r3, [pc, #188]	; (8027ba8 <atanf+0x1a8>)
 8027aec:	429c      	cmp	r4, r3
 8027aee:	dc19      	bgt.n	8027b24 <atanf+0x124>
 8027af0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8027af4:	429c      	cmp	r4, r3
 8027af6:	dc2a      	bgt.n	8027b4e <atanf+0x14e>
 8027af8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8027afc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027b00:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027b04:	2300      	movs	r3, #0
 8027b06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027b0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027b0e:	e795      	b.n	8027a3c <atanf+0x3c>
 8027b10:	eeb1 0a40 	vneg.f32	s0, s0
 8027b14:	bd38      	pop	{r3, r4, r5, pc}
 8027b16:	ee76 6a87 	vadd.f32	s13, s13, s14
 8027b1a:	eee7 7ae6 	vfms.f32	s15, s15, s13
 8027b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8027b22:	bd38      	pop	{r3, r4, r5, pc}
 8027b24:	4b21      	ldr	r3, [pc, #132]	; (8027bac <atanf+0x1ac>)
 8027b26:	429c      	cmp	r4, r3
 8027b28:	dc0b      	bgt.n	8027b42 <atanf+0x142>
 8027b2a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8027b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b32:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027b36:	2302      	movs	r3, #2
 8027b38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027b3c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8027b40:	e77c      	b.n	8027a3c <atanf+0x3c>
 8027b42:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027b46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027b4a:	2303      	movs	r3, #3
 8027b4c:	e776      	b.n	8027a3c <atanf+0x3c>
 8027b4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027b52:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027b56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027b5a:	2301      	movs	r3, #1
 8027b5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027b60:	e76c      	b.n	8027a3c <atanf+0x3c>
 8027b62:	bf00      	nop
 8027b64:	3fc90fdb 	.word	0x3fc90fdb
 8027b68:	bfc90fdb 	.word	0xbfc90fdb
 8027b6c:	3edfffff 	.word	0x3edfffff
 8027b70:	3c8569d7 	.word	0x3c8569d7
 8027b74:	3d4bda59 	.word	0x3d4bda59
 8027b78:	3d886b35 	.word	0x3d886b35
 8027b7c:	bd15a221 	.word	0xbd15a221
 8027b80:	bd6ef16b 	.word	0xbd6ef16b
 8027b84:	3dba2e6e 	.word	0x3dba2e6e
 8027b88:	bd9d8795 	.word	0xbd9d8795
 8027b8c:	3e124925 	.word	0x3e124925
 8027b90:	bde38e38 	.word	0xbde38e38
 8027b94:	3eaaaaab 	.word	0x3eaaaaab
 8027b98:	be4ccccd 	.word	0xbe4ccccd
 8027b9c:	08030c60 	.word	0x08030c60
 8027ba0:	08030c50 	.word	0x08030c50
 8027ba4:	7149f2ca 	.word	0x7149f2ca
 8027ba8:	3f97ffff 	.word	0x3f97ffff
 8027bac:	401bffff 	.word	0x401bffff

08027bb0 <copysignf>:
 8027bb0:	ee10 3a10 	vmov	r3, s0
 8027bb4:	ee10 2a90 	vmov	r2, s1
 8027bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027bbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8027bc0:	4313      	orrs	r3, r2
 8027bc2:	ee00 3a10 	vmov	s0, r3
 8027bc6:	4770      	bx	lr
	...

08027bd0 <fabsf>:
 8027bd0:	ee10 3a10 	vmov	r3, s0
 8027bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027bd8:	ee00 3a10 	vmov	s0, r3
 8027bdc:	4770      	bx	lr
 8027bde:	bf00      	nop

08027be0 <finitef>:
 8027be0:	ee10 3a10 	vmov	r3, s0
 8027be4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8027be8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8027bec:	bfac      	ite	ge
 8027bee:	2000      	movge	r0, #0
 8027bf0:	2001      	movlt	r0, #1
 8027bf2:	4770      	bx	lr
	...

08027c00 <nanf>:
 8027c00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027c08 <nanf+0x8>
 8027c04:	4770      	bx	lr
 8027c06:	bf00      	nop
 8027c08:	7fc00000 	.word	0x7fc00000
 8027c0c:	00000000 	.word	0x00000000

08027c10 <__errno>:
 8027c10:	4b01      	ldr	r3, [pc, #4]	; (8027c18 <__errno+0x8>)
 8027c12:	6818      	ldr	r0, [r3, #0]
 8027c14:	4770      	bx	lr
 8027c16:	bf00      	nop
 8027c18:	20001090 	.word	0x20001090
 8027c1c:	00000000 	.word	0x00000000

08027c20 <memcmp>:
 8027c20:	2a03      	cmp	r2, #3
 8027c22:	b470      	push	{r4, r5, r6}
 8027c24:	d922      	bls.n	8027c6c <memcmp+0x4c>
 8027c26:	ea40 0301 	orr.w	r3, r0, r1
 8027c2a:	079b      	lsls	r3, r3, #30
 8027c2c:	d011      	beq.n	8027c52 <memcmp+0x32>
 8027c2e:	7803      	ldrb	r3, [r0, #0]
 8027c30:	780c      	ldrb	r4, [r1, #0]
 8027c32:	42a3      	cmp	r3, r4
 8027c34:	d11d      	bne.n	8027c72 <memcmp+0x52>
 8027c36:	440a      	add	r2, r1
 8027c38:	3101      	adds	r1, #1
 8027c3a:	e005      	b.n	8027c48 <memcmp+0x28>
 8027c3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8027c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027c44:	42a3      	cmp	r3, r4
 8027c46:	d114      	bne.n	8027c72 <memcmp+0x52>
 8027c48:	4291      	cmp	r1, r2
 8027c4a:	d1f7      	bne.n	8027c3c <memcmp+0x1c>
 8027c4c:	2000      	movs	r0, #0
 8027c4e:	bc70      	pop	{r4, r5, r6}
 8027c50:	4770      	bx	lr
 8027c52:	680d      	ldr	r5, [r1, #0]
 8027c54:	6806      	ldr	r6, [r0, #0]
 8027c56:	42ae      	cmp	r6, r5
 8027c58:	460c      	mov	r4, r1
 8027c5a:	4603      	mov	r3, r0
 8027c5c:	f101 0104 	add.w	r1, r1, #4
 8027c60:	f100 0004 	add.w	r0, r0, #4
 8027c64:	d108      	bne.n	8027c78 <memcmp+0x58>
 8027c66:	3a04      	subs	r2, #4
 8027c68:	2a03      	cmp	r2, #3
 8027c6a:	d8f2      	bhi.n	8027c52 <memcmp+0x32>
 8027c6c:	2a00      	cmp	r2, #0
 8027c6e:	d1de      	bne.n	8027c2e <memcmp+0xe>
 8027c70:	e7ec      	b.n	8027c4c <memcmp+0x2c>
 8027c72:	1b18      	subs	r0, r3, r4
 8027c74:	bc70      	pop	{r4, r5, r6}
 8027c76:	4770      	bx	lr
 8027c78:	4621      	mov	r1, r4
 8027c7a:	4618      	mov	r0, r3
 8027c7c:	e7d7      	b.n	8027c2e <memcmp+0xe>
 8027c7e:	bf00      	nop

08027c80 <memset>:
 8027c80:	b470      	push	{r4, r5, r6}
 8027c82:	0786      	lsls	r6, r0, #30
 8027c84:	d046      	beq.n	8027d14 <memset+0x94>
 8027c86:	1e54      	subs	r4, r2, #1
 8027c88:	2a00      	cmp	r2, #0
 8027c8a:	d041      	beq.n	8027d10 <memset+0x90>
 8027c8c:	b2ca      	uxtb	r2, r1
 8027c8e:	4603      	mov	r3, r0
 8027c90:	e002      	b.n	8027c98 <memset+0x18>
 8027c92:	f114 34ff 	adds.w	r4, r4, #4294967295
 8027c96:	d33b      	bcc.n	8027d10 <memset+0x90>
 8027c98:	f803 2b01 	strb.w	r2, [r3], #1
 8027c9c:	079d      	lsls	r5, r3, #30
 8027c9e:	d1f8      	bne.n	8027c92 <memset+0x12>
 8027ca0:	2c03      	cmp	r4, #3
 8027ca2:	d92e      	bls.n	8027d02 <memset+0x82>
 8027ca4:	b2cd      	uxtb	r5, r1
 8027ca6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8027caa:	2c0f      	cmp	r4, #15
 8027cac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8027cb0:	d919      	bls.n	8027ce6 <memset+0x66>
 8027cb2:	f103 0210 	add.w	r2, r3, #16
 8027cb6:	4626      	mov	r6, r4
 8027cb8:	3e10      	subs	r6, #16
 8027cba:	2e0f      	cmp	r6, #15
 8027cbc:	f842 5c10 	str.w	r5, [r2, #-16]
 8027cc0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8027cc4:	f842 5c08 	str.w	r5, [r2, #-8]
 8027cc8:	f842 5c04 	str.w	r5, [r2, #-4]
 8027ccc:	f102 0210 	add.w	r2, r2, #16
 8027cd0:	d8f2      	bhi.n	8027cb8 <memset+0x38>
 8027cd2:	f1a4 0210 	sub.w	r2, r4, #16
 8027cd6:	f022 020f 	bic.w	r2, r2, #15
 8027cda:	f004 040f 	and.w	r4, r4, #15
 8027cde:	3210      	adds	r2, #16
 8027ce0:	2c03      	cmp	r4, #3
 8027ce2:	4413      	add	r3, r2
 8027ce4:	d90d      	bls.n	8027d02 <memset+0x82>
 8027ce6:	461e      	mov	r6, r3
 8027ce8:	4622      	mov	r2, r4
 8027cea:	3a04      	subs	r2, #4
 8027cec:	2a03      	cmp	r2, #3
 8027cee:	f846 5b04 	str.w	r5, [r6], #4
 8027cf2:	d8fa      	bhi.n	8027cea <memset+0x6a>
 8027cf4:	1f22      	subs	r2, r4, #4
 8027cf6:	f022 0203 	bic.w	r2, r2, #3
 8027cfa:	3204      	adds	r2, #4
 8027cfc:	4413      	add	r3, r2
 8027cfe:	f004 0403 	and.w	r4, r4, #3
 8027d02:	b12c      	cbz	r4, 8027d10 <memset+0x90>
 8027d04:	b2c9      	uxtb	r1, r1
 8027d06:	441c      	add	r4, r3
 8027d08:	f803 1b01 	strb.w	r1, [r3], #1
 8027d0c:	429c      	cmp	r4, r3
 8027d0e:	d1fb      	bne.n	8027d08 <memset+0x88>
 8027d10:	bc70      	pop	{r4, r5, r6}
 8027d12:	4770      	bx	lr
 8027d14:	4614      	mov	r4, r2
 8027d16:	4603      	mov	r3, r0
 8027d18:	e7c2      	b.n	8027ca0 <memset+0x20>
 8027d1a:	bf00      	nop
 8027d1c:	0000      	movs	r0, r0
	...

08027d20 <sscanf>:
 8027d20:	b40e      	push	{r1, r2, r3}
 8027d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d24:	b09c      	sub	sp, #112	; 0x70
 8027d26:	ac21      	add	r4, sp, #132	; 0x84
 8027d28:	f44f 7201 	mov.w	r2, #516	; 0x204
 8027d2c:	f854 6b04 	ldr.w	r6, [r4], #4
 8027d30:	f8ad 2014 	strh.w	r2, [sp, #20]
 8027d34:	9002      	str	r0, [sp, #8]
 8027d36:	9006      	str	r0, [sp, #24]
 8027d38:	f7e5 f8fa 	bl	800cf30 <strlen>
 8027d3c:	4b0c      	ldr	r3, [pc, #48]	; (8027d70 <sscanf+0x50>)
 8027d3e:	9401      	str	r4, [sp, #4]
 8027d40:	4605      	mov	r5, r0
 8027d42:	4632      	mov	r2, r6
 8027d44:	4f0b      	ldr	r7, [pc, #44]	; (8027d74 <sscanf+0x54>)
 8027d46:	6818      	ldr	r0, [r3, #0]
 8027d48:	9503      	str	r5, [sp, #12]
 8027d4a:	4623      	mov	r3, r4
 8027d4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8027d50:	2400      	movs	r4, #0
 8027d52:	a902      	add	r1, sp, #8
 8027d54:	9507      	str	r5, [sp, #28]
 8027d56:	970a      	str	r7, [sp, #40]	; 0x28
 8027d58:	940e      	str	r4, [sp, #56]	; 0x38
 8027d5a:	9413      	str	r4, [sp, #76]	; 0x4c
 8027d5c:	f8ad 6016 	strh.w	r6, [sp, #22]
 8027d60:	f000 f856 	bl	8027e10 <__ssvfscanf_r>
 8027d64:	b01c      	add	sp, #112	; 0x70
 8027d66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027d6a:	b003      	add	sp, #12
 8027d6c:	4770      	bx	lr
 8027d6e:	bf00      	nop
 8027d70:	20001090 	.word	0x20001090
 8027d74:	08027d81 	.word	0x08027d81
	...

08027d80 <__seofread>:
 8027d80:	2000      	movs	r0, #0
 8027d82:	4770      	bx	lr
	...

08027d90 <strtok>:
 8027d90:	4b02      	ldr	r3, [pc, #8]	; (8027d9c <strtok+0xc>)
 8027d92:	681a      	ldr	r2, [r3, #0]
 8027d94:	2301      	movs	r3, #1
 8027d96:	325c      	adds	r2, #92	; 0x5c
 8027d98:	f000 b802 	b.w	8027da0 <__strtok_r>
 8027d9c:	20001090 	.word	0x20001090

08027da0 <__strtok_r>:
 8027da0:	b4f0      	push	{r4, r5, r6, r7}
 8027da2:	b318      	cbz	r0, 8027dec <__strtok_r+0x4c>
 8027da4:	4607      	mov	r7, r0
 8027da6:	460d      	mov	r5, r1
 8027da8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8027dac:	e001      	b.n	8027db2 <__strtok_r+0x12>
 8027dae:	42a6      	cmp	r6, r4
 8027db0:	d017      	beq.n	8027de2 <__strtok_r+0x42>
 8027db2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027db6:	2c00      	cmp	r4, #0
 8027db8:	d1f9      	bne.n	8027dae <__strtok_r+0xe>
 8027dba:	b1e6      	cbz	r6, 8027df6 <__strtok_r+0x56>
 8027dbc:	f817 5b01 	ldrb.w	r5, [r7], #1
 8027dc0:	460c      	mov	r4, r1
 8027dc2:	e001      	b.n	8027dc8 <__strtok_r+0x28>
 8027dc4:	2b00      	cmp	r3, #0
 8027dc6:	d0f9      	beq.n	8027dbc <__strtok_r+0x1c>
 8027dc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8027dcc:	429d      	cmp	r5, r3
 8027dce:	d1f9      	bne.n	8027dc4 <__strtok_r+0x24>
 8027dd0:	b155      	cbz	r5, 8027de8 <__strtok_r+0x48>
 8027dd2:	2300      	movs	r3, #0
 8027dd4:	f807 3c01 	strb.w	r3, [r7, #-1]
 8027dd8:	6017      	str	r7, [r2, #0]
 8027dda:	4606      	mov	r6, r0
 8027ddc:	4630      	mov	r0, r6
 8027dde:	bcf0      	pop	{r4, r5, r6, r7}
 8027de0:	4770      	bx	lr
 8027de2:	b153      	cbz	r3, 8027dfa <__strtok_r+0x5a>
 8027de4:	4638      	mov	r0, r7
 8027de6:	e7dd      	b.n	8027da4 <__strtok_r+0x4>
 8027de8:	462f      	mov	r7, r5
 8027dea:	e7f5      	b.n	8027dd8 <__strtok_r+0x38>
 8027dec:	6810      	ldr	r0, [r2, #0]
 8027dee:	2800      	cmp	r0, #0
 8027df0:	d1d8      	bne.n	8027da4 <__strtok_r+0x4>
 8027df2:	4606      	mov	r6, r0
 8027df4:	e7f2      	b.n	8027ddc <__strtok_r+0x3c>
 8027df6:	6016      	str	r6, [r2, #0]
 8027df8:	e7f0      	b.n	8027ddc <__strtok_r+0x3c>
 8027dfa:	6017      	str	r7, [r2, #0]
 8027dfc:	4606      	mov	r6, r0
 8027dfe:	7003      	strb	r3, [r0, #0]
 8027e00:	e7ec      	b.n	8027ddc <__strtok_r+0x3c>
 8027e02:	bf00      	nop
	...

08027e10 <__ssvfscanf_r>:
 8027e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e14:	468b      	mov	fp, r1
 8027e16:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8027e1a:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 8027e1e:	048e      	lsls	r6, r1, #18
 8027e20:	4682      	mov	sl, r0
 8027e22:	9306      	str	r3, [sp, #24]
 8027e24:	d409      	bmi.n	8027e3a <__ssvfscanf_r+0x2a>
 8027e26:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8027e2a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8027e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027e32:	f8ab 100c 	strh.w	r1, [fp, #12]
 8027e36:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 8027e3a:	4614      	mov	r4, r2
 8027e3c:	46a0      	mov	r8, r4
 8027e3e:	2300      	movs	r3, #0
 8027e40:	9307      	str	r3, [sp, #28]
 8027e42:	9304      	str	r3, [sp, #16]
 8027e44:	461f      	mov	r7, r3
 8027e46:	9305      	str	r3, [sp, #20]
 8027e48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8027e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8027e4e:	b35b      	cbz	r3, 8027ea8 <__ssvfscanf_r+0x98>
 8027e50:	f000 ff66 	bl	8028d20 <__locale_ctype_ptr>
 8027e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027e56:	4418      	add	r0, r3
 8027e58:	7845      	ldrb	r5, [r0, #1]
 8027e5a:	f015 0508 	ands.w	r5, r5, #8
 8027e5e:	d028      	beq.n	8027eb2 <__ssvfscanf_r+0xa2>
 8027e60:	f8db 2004 	ldr.w	r2, [fp, #4]
 8027e64:	e011      	b.n	8027e8a <__ssvfscanf_r+0x7a>
 8027e66:	f000 ff5b 	bl	8028d20 <__locale_ctype_ptr>
 8027e6a:	f8db 3000 	ldr.w	r3, [fp]
 8027e6e:	781a      	ldrb	r2, [r3, #0]
 8027e70:	4410      	add	r0, r2
 8027e72:	3301      	adds	r3, #1
 8027e74:	7842      	ldrb	r2, [r0, #1]
 8027e76:	0715      	lsls	r5, r2, #28
 8027e78:	d50f      	bpl.n	8027e9a <__ssvfscanf_r+0x8a>
 8027e7a:	f8db 2004 	ldr.w	r2, [fp, #4]
 8027e7e:	f8cb 3000 	str.w	r3, [fp]
 8027e82:	3a01      	subs	r2, #1
 8027e84:	3701      	adds	r7, #1
 8027e86:	f8cb 2004 	str.w	r2, [fp, #4]
 8027e8a:	2a00      	cmp	r2, #0
 8027e8c:	dceb      	bgt.n	8027e66 <__ssvfscanf_r+0x56>
 8027e8e:	4659      	mov	r1, fp
 8027e90:	4650      	mov	r0, sl
 8027e92:	f002 fb75 	bl	802a580 <__ssrefill_r>
 8027e96:	2800      	cmp	r0, #0
 8027e98:	d0e5      	beq.n	8027e66 <__ssvfscanf_r+0x56>
 8027e9a:	4644      	mov	r4, r8
 8027e9c:	46a0      	mov	r8, r4
 8027e9e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8027ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8027ea4:	2b00      	cmp	r3, #0
 8027ea6:	d1d3      	bne.n	8027e50 <__ssvfscanf_r+0x40>
 8027ea8:	9805      	ldr	r0, [sp, #20]
 8027eaa:	f50d 7d2d 	add.w	sp, sp, #692	; 0x2b4
 8027eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027eb2:	2b25      	cmp	r3, #37	; 0x25
 8027eb4:	f040 8086 	bne.w	8027fc4 <__ssvfscanf_r+0x1b4>
 8027eb8:	f894 9001 	ldrb.w	r9, [r4, #1]
 8027ebc:	462e      	mov	r6, r5
 8027ebe:	462c      	mov	r4, r5
 8027ec0:	f108 0301 	add.w	r3, r8, #1
 8027ec4:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8027ec8:	f200 82fe 	bhi.w	80284c8 <__ssvfscanf_r+0x6b8>
 8027ecc:	e8df f019 	tbh	[pc, r9, lsl #1]
 8027ed0:	02fc0092 	.word	0x02fc0092
 8027ed4:	02fc02fc 	.word	0x02fc02fc
 8027ed8:	02fc02fc 	.word	0x02fc02fc
 8027edc:	02fc02fc 	.word	0x02fc02fc
 8027ee0:	02fc02fc 	.word	0x02fc02fc
 8027ee4:	02fc02fc 	.word	0x02fc02fc
 8027ee8:	02fc02fc 	.word	0x02fc02fc
 8027eec:	02fc02fc 	.word	0x02fc02fc
 8027ef0:	02fc02fc 	.word	0x02fc02fc
 8027ef4:	02fc02fc 	.word	0x02fc02fc
 8027ef8:	02fc02fc 	.word	0x02fc02fc
 8027efc:	02fc02fc 	.word	0x02fc02fc
 8027f00:	02fc02fc 	.word	0x02fc02fc
 8027f04:	02fc02fc 	.word	0x02fc02fc
 8027f08:	02fc02fc 	.word	0x02fc02fc
 8027f0c:	02fc02fc 	.word	0x02fc02fc
 8027f10:	02fc02fc 	.word	0x02fc02fc
 8027f14:	02fc02fc 	.word	0x02fc02fc
 8027f18:	007902fc 	.word	0x007902fc
 8027f1c:	02fc02fc 	.word	0x02fc02fc
 8027f20:	02fc02fc 	.word	0x02fc02fc
 8027f24:	02fc0245 	.word	0x02fc0245
 8027f28:	02fc02fc 	.word	0x02fc02fc
 8027f2c:	02fc02fc 	.word	0x02fc02fc
 8027f30:	02610261 	.word	0x02610261
 8027f34:	02610261 	.word	0x02610261
 8027f38:	02610261 	.word	0x02610261
 8027f3c:	02610261 	.word	0x02610261
 8027f40:	02610261 	.word	0x02610261
 8027f44:	02fc02fc 	.word	0x02fc02fc
 8027f48:	02fc02fc 	.word	0x02fc02fc
 8027f4c:	02fc02fc 	.word	0x02fc02fc
 8027f50:	02fc02fc 	.word	0x02fc02fc
 8027f54:	02fc02fc 	.word	0x02fc02fc
 8027f58:	0294024b 	.word	0x0294024b
 8027f5c:	029402fc 	.word	0x029402fc
 8027f60:	02fc02fc 	.word	0x02fc02fc
 8027f64:	02fc02fc 	.word	0x02fc02fc
 8027f68:	02fc028e 	.word	0x02fc028e
 8027f6c:	028402fc 	.word	0x028402fc
 8027f70:	02fc02fc 	.word	0x02fc02fc
 8027f74:	02fc02fc 	.word	0x02fc02fc
 8027f78:	02fc02fc 	.word	0x02fc02fc
 8027f7c:	02fc02fc 	.word	0x02fc02fc
 8027f80:	02fc0280 	.word	0x02fc0280
 8027f84:	02c802fc 	.word	0x02c802fc
 8027f88:	02fc02fc 	.word	0x02fc02fc
 8027f8c:	02fc02fc 	.word	0x02fc02fc
 8027f90:	02fc02fc 	.word	0x02fc02fc
 8027f94:	02c202fc 	.word	0x02c202fc
 8027f98:	029402d2 	.word	0x029402d2
 8027f9c:	02940294 	.word	0x02940294
 8027fa0:	009a02bc 	.word	0x009a02bc
 8027fa4:	02fc02fc 	.word	0x02fc02fc
 8027fa8:	02fc0298 	.word	0x02fc0298
 8027fac:	02a202a4 	.word	0x02a202a4
 8027fb0:	02fc0276 	.word	0x02fc0276
 8027fb4:	027202fc 	.word	0x027202fc
 8027fb8:	026a02fc 	.word	0x026a02fc
 8027fbc:	02fc02fc 	.word	0x02fc02fc
 8027fc0:	0280      	.short	0x0280
 8027fc2:	4698      	mov	r8, r3
 8027fc4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8027fc8:	2b00      	cmp	r3, #0
 8027fca:	f340 8551 	ble.w	8028a70 <__ssvfscanf_r+0xc60>
 8027fce:	f8db 3000 	ldr.w	r3, [fp]
 8027fd2:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8027fd6:	781a      	ldrb	r2, [r3, #0]
 8027fd8:	4291      	cmp	r1, r2
 8027fda:	f47f af65 	bne.w	8027ea8 <__ssvfscanf_r+0x98>
 8027fde:	f8db 2004 	ldr.w	r2, [fp, #4]
 8027fe2:	3301      	adds	r3, #1
 8027fe4:	3a01      	subs	r2, #1
 8027fe6:	f8cb 3000 	str.w	r3, [fp]
 8027fea:	3701      	adds	r7, #1
 8027fec:	f8cb 2004 	str.w	r2, [fp, #4]
 8027ff0:	4644      	mov	r4, r8
 8027ff2:	e753      	b.n	8027e9c <__ssvfscanf_r+0x8c>
 8027ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8027ff8:	9305      	str	r3, [sp, #20]
 8027ffa:	9805      	ldr	r0, [sp, #20]
 8027ffc:	f50d 7d2d 	add.w	sp, sp, #692	; 0x2b4
 8028000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028004:	9303      	str	r3, [sp, #12]
 8028006:	4b9c      	ldr	r3, [pc, #624]	; (8028278 <__ssvfscanf_r+0x468>)
 8028008:	9307      	str	r3, [sp, #28]
 802800a:	2300      	movs	r3, #0
 802800c:	9304      	str	r3, [sp, #16]
 802800e:	f04f 0803 	mov.w	r8, #3
 8028012:	f8db 3004 	ldr.w	r3, [fp, #4]
 8028016:	2b00      	cmp	r3, #0
 8028018:	f340 81b3 	ble.w	8028382 <__ssvfscanf_r+0x572>
 802801c:	0673      	lsls	r3, r6, #25
 802801e:	d50d      	bpl.n	802803c <__ssvfscanf_r+0x22c>
 8028020:	f108 38ff 	add.w	r8, r8, #4294967295
 8028024:	f1b8 0f03 	cmp.w	r8, #3
 8028028:	f200 80ce 	bhi.w	80281c8 <__ssvfscanf_r+0x3b8>
 802802c:	e8df f018 	tbh	[pc, r8, lsl #1]
 8028030:	00a000f4 	.word	0x00a000f4
 8028034:	02600030 	.word	0x02600030
 8028038:	f8cb 3000 	str.w	r3, [fp]
 802803c:	f000 fe70 	bl	8028d20 <__locale_ctype_ptr>
 8028040:	f8db 3000 	ldr.w	r3, [fp]
 8028044:	781a      	ldrb	r2, [r3, #0]
 8028046:	4410      	add	r0, r2
 8028048:	3301      	adds	r3, #1
 802804a:	7842      	ldrb	r2, [r0, #1]
 802804c:	0710      	lsls	r0, r2, #28
 802804e:	d5e7      	bpl.n	8028020 <__ssvfscanf_r+0x210>
 8028050:	f8db 2004 	ldr.w	r2, [fp, #4]
 8028054:	3a01      	subs	r2, #1
 8028056:	2a00      	cmp	r2, #0
 8028058:	f107 0701 	add.w	r7, r7, #1
 802805c:	f8cb 2004 	str.w	r2, [fp, #4]
 8028060:	dcea      	bgt.n	8028038 <__ssvfscanf_r+0x228>
 8028062:	4659      	mov	r1, fp
 8028064:	4650      	mov	r0, sl
 8028066:	f002 fa8b 	bl	802a580 <__ssrefill_r>
 802806a:	2800      	cmp	r0, #0
 802806c:	d0e6      	beq.n	802803c <__ssvfscanf_r+0x22c>
 802806e:	9a05      	ldr	r2, [sp, #20]
 8028070:	2a00      	cmp	r2, #0
 8028072:	d0bf      	beq.n	8027ff4 <__ssvfscanf_r+0x1e4>
 8028074:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8028078:	f013 0f40 	tst.w	r3, #64	; 0x40
 802807c:	4613      	mov	r3, r2
 802807e:	bf18      	it	ne
 8028080:	f04f 33ff 	movne.w	r3, #4294967295
 8028084:	9305      	str	r3, [sp, #20]
 8028086:	9805      	ldr	r0, [sp, #20]
 8028088:	f50d 7d2d 	add.w	sp, sp, #692	; 0x2b4
 802808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028090:	1e63      	subs	r3, r4, #1
 8028092:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8028096:	bf86      	itte	hi
 8028098:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 802809c:	eb04 0900 	addhi.w	r9, r4, r0
 80280a0:	f04f 0900 	movls.w	r9, #0
 80280a4:	ab54      	add	r3, sp, #336	; 0x150
 80280a6:	463a      	mov	r2, r7
 80280a8:	464f      	mov	r7, r9
 80280aa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80280ae:	930a      	str	r3, [sp, #40]	; 0x28
 80280b0:	bf88      	it	hi
 80280b2:	f240 145d 	movwhi	r4, #349	; 0x15d
 80280b6:	f446 6658 	orr.w	r6, r6, #3456	; 0xd80
 80280ba:	461d      	mov	r5, r3
 80280bc:	f04f 0800 	mov.w	r8, #0
 80280c0:	f8db 3000 	ldr.w	r3, [fp]
 80280c4:	7818      	ldrb	r0, [r3, #0]
 80280c6:	f1a0 012b 	sub.w	r1, r0, #43	; 0x2b
 80280ca:	294d      	cmp	r1, #77	; 0x4d
 80280cc:	f200 80f1 	bhi.w	80282b2 <__ssvfscanf_r+0x4a2>
 80280d0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80280d4:	00ef013e 	.word	0x00ef013e
 80280d8:	00ef013e 	.word	0x00ef013e
 80280dc:	011b00ef 	.word	0x011b00ef
 80280e0:	01150115 	.word	0x01150115
 80280e4:	01150115 	.word	0x01150115
 80280e8:	01150115 	.word	0x01150115
 80280ec:	010e0115 	.word	0x010e0115
 80280f0:	00ef010e 	.word	0x00ef010e
 80280f4:	00ef00ef 	.word	0x00ef00ef
 80280f8:	00ef00ef 	.word	0x00ef00ef
 80280fc:	00ef00ef 	.word	0x00ef00ef
 8028100:	01080108 	.word	0x01080108
 8028104:	01080108 	.word	0x01080108
 8028108:	01080108 	.word	0x01080108
 802810c:	00ef00ef 	.word	0x00ef00ef
 8028110:	00ef00ef 	.word	0x00ef00ef
 8028114:	00ef00ef 	.word	0x00ef00ef
 8028118:	00ef00ef 	.word	0x00ef00ef
 802811c:	00ef00ef 	.word	0x00ef00ef
 8028120:	00ef00ef 	.word	0x00ef00ef
 8028124:	00ef00ef 	.word	0x00ef00ef
 8028128:	00ef00ef 	.word	0x00ef00ef
 802812c:	00d400ef 	.word	0x00d400ef
 8028130:	00ef00ef 	.word	0x00ef00ef
 8028134:	00ef00ef 	.word	0x00ef00ef
 8028138:	00ef00ef 	.word	0x00ef00ef
 802813c:	00ef00ef 	.word	0x00ef00ef
 8028140:	01080108 	.word	0x01080108
 8028144:	01080108 	.word	0x01080108
 8028148:	01080108 	.word	0x01080108
 802814c:	00ef00ef 	.word	0x00ef00ef
 8028150:	00ef00ef 	.word	0x00ef00ef
 8028154:	00ef00ef 	.word	0x00ef00ef
 8028158:	00ef00ef 	.word	0x00ef00ef
 802815c:	00ef00ef 	.word	0x00ef00ef
 8028160:	00ef00ef 	.word	0x00ef00ef
 8028164:	00ef00ef 	.word	0x00ef00ef
 8028168:	00ef00ef 	.word	0x00ef00ef
 802816c:	00d400ef 	.word	0x00d400ef
 8028170:	2c00      	cmp	r4, #0
 8028172:	bf08      	it	eq
 8028174:	f04f 34ff 	moveq.w	r4, #4294967295
 8028178:	f016 0501 	ands.w	r5, r6, #1
 802817c:	f040 817c 	bne.w	8028478 <__ssvfscanf_r+0x668>
 8028180:	06f1      	lsls	r1, r6, #27
 8028182:	f140 842a 	bpl.w	80289da <__ssvfscanf_r+0xbca>
 8028186:	f000 fdcb 	bl	8028d20 <__locale_ctype_ptr>
 802818a:	f8db 3000 	ldr.w	r3, [fp]
 802818e:	781a      	ldrb	r2, [r3, #0]
 8028190:	4410      	add	r0, r2
 8028192:	3301      	adds	r3, #1
 8028194:	7842      	ldrb	r2, [r0, #1]
 8028196:	0712      	lsls	r2, r2, #28
 8028198:	d411      	bmi.n	80281be <__ssvfscanf_r+0x3ae>
 802819a:	f8db 2004 	ldr.w	r2, [fp, #4]
 802819e:	f8cb 3000 	str.w	r3, [fp]
 80281a2:	3501      	adds	r5, #1
 80281a4:	3a01      	subs	r2, #1
 80281a6:	42ac      	cmp	r4, r5
 80281a8:	f8cb 2004 	str.w	r2, [fp, #4]
 80281ac:	d007      	beq.n	80281be <__ssvfscanf_r+0x3ae>
 80281ae:	2a00      	cmp	r2, #0
 80281b0:	dce9      	bgt.n	8028186 <__ssvfscanf_r+0x376>
 80281b2:	4659      	mov	r1, fp
 80281b4:	4650      	mov	r0, sl
 80281b6:	f002 f9e3 	bl	802a580 <__ssrefill_r>
 80281ba:	2800      	cmp	r0, #0
 80281bc:	d0e3      	beq.n	8028186 <__ssvfscanf_r+0x376>
 80281be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80281c2:	442f      	add	r7, r5
 80281c4:	4644      	mov	r4, r8
 80281c6:	e669      	b.n	8027e9c <__ssvfscanf_r+0x8c>
 80281c8:	2c00      	cmp	r4, #0
 80281ca:	bf08      	it	eq
 80281cc:	2401      	moveq	r4, #1
 80281ce:	f016 0501 	ands.w	r5, r6, #1
 80281d2:	f040 8345 	bne.w	8028860 <__ssvfscanf_r+0xa50>
 80281d6:	06f2      	lsls	r2, r6, #27
 80281d8:	f140 8432 	bpl.w	8028a40 <__ssvfscanf_r+0xc30>
 80281dc:	e009      	b.n	80281f2 <__ssvfscanf_r+0x3e2>
 80281de:	4413      	add	r3, r2
 80281e0:	f8cb 3000 	str.w	r3, [fp]
 80281e4:	4415      	add	r5, r2
 80281e6:	1aa4      	subs	r4, r4, r2
 80281e8:	f002 f9ca 	bl	802a580 <__ssrefill_r>
 80281ec:	2800      	cmp	r0, #0
 80281ee:	f040 83ec 	bne.w	80289ca <__ssvfscanf_r+0xbba>
 80281f2:	f8db 2004 	ldr.w	r2, [fp, #4]
 80281f6:	f8db 3000 	ldr.w	r3, [fp]
 80281fa:	42a2      	cmp	r2, r4
 80281fc:	4659      	mov	r1, fp
 80281fe:	4650      	mov	r0, sl
 8028200:	dbed      	blt.n	80281de <__ssvfscanf_r+0x3ce>
 8028202:	1b12      	subs	r2, r2, r4
 8028204:	4423      	add	r3, r4
 8028206:	4425      	add	r5, r4
 8028208:	f8cb 2004 	str.w	r2, [fp, #4]
 802820c:	f8cb 3000 	str.w	r3, [fp]
 8028210:	442f      	add	r7, r5
 8028212:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028216:	e7d5      	b.n	80281c4 <__ssvfscanf_r+0x3b4>
 8028218:	2c00      	cmp	r4, #0
 802821a:	bf08      	it	eq
 802821c:	f04f 34ff 	moveq.w	r4, #4294967295
 8028220:	06f3      	lsls	r3, r6, #27
 8028222:	f140 837b 	bpl.w	802891c <__ssvfscanf_r+0xb0c>
 8028226:	f8db 2000 	ldr.w	r2, [fp]
 802822a:	2500      	movs	r5, #0
 802822c:	ae14      	add	r6, sp, #80	; 0x50
 802822e:	7813      	ldrb	r3, [r2, #0]
 8028230:	5cf3      	ldrb	r3, [r6, r3]
 8028232:	3201      	adds	r2, #1
 8028234:	b1c3      	cbz	r3, 8028268 <__ssvfscanf_r+0x458>
 8028236:	f8db 3004 	ldr.w	r3, [fp, #4]
 802823a:	f8cb 2000 	str.w	r2, [fp]
 802823e:	3501      	adds	r5, #1
 8028240:	3b01      	subs	r3, #1
 8028242:	42ac      	cmp	r4, r5
 8028244:	f8cb 3004 	str.w	r3, [fp, #4]
 8028248:	d0b9      	beq.n	80281be <__ssvfscanf_r+0x3ae>
 802824a:	2b00      	cmp	r3, #0
 802824c:	dcef      	bgt.n	802822e <__ssvfscanf_r+0x41e>
 802824e:	4659      	mov	r1, fp
 8028250:	4650      	mov	r0, sl
 8028252:	f002 f995 	bl	802a580 <__ssrefill_r>
 8028256:	2800      	cmp	r0, #0
 8028258:	d1b1      	bne.n	80281be <__ssvfscanf_r+0x3ae>
 802825a:	f8db 2000 	ldr.w	r2, [fp]
 802825e:	7813      	ldrb	r3, [r2, #0]
 8028260:	5cf3      	ldrb	r3, [r6, r3]
 8028262:	3201      	adds	r2, #1
 8028264:	2b00      	cmp	r3, #0
 8028266:	d1e6      	bne.n	8028236 <__ssvfscanf_r+0x426>
 8028268:	2d00      	cmp	r5, #0
 802826a:	f43f ae1d 	beq.w	8027ea8 <__ssvfscanf_r+0x98>
 802826e:	442f      	add	r7, r5
 8028270:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028274:	e7a6      	b.n	80281c4 <__ssvfscanf_r+0x3b4>
 8028276:	bf00      	nop
 8028278:	08029f91 	.word	0x08029f91
 802827c:	f406 61c0 	and.w	r1, r6, #1536	; 0x600
 8028280:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028284:	d115      	bne.n	80282b2 <__ssvfscanf_r+0x4a2>
 8028286:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 802828a:	f446 66a0 	orr.w	r6, r6, #1280	; 0x500
 802828e:	f04f 0910 	mov.w	r9, #16
 8028292:	f8db 1004 	ldr.w	r1, [fp, #4]
 8028296:	7028      	strb	r0, [r5, #0]
 8028298:	3901      	subs	r1, #1
 802829a:	2900      	cmp	r1, #0
 802829c:	f105 0501 	add.w	r5, r5, #1
 80282a0:	f8cb 1004 	str.w	r1, [fp, #4]
 80282a4:	dd4b      	ble.n	802833e <__ssvfscanf_r+0x52e>
 80282a6:	3301      	adds	r3, #1
 80282a8:	f8cb 3000 	str.w	r3, [fp]
 80282ac:	3c01      	subs	r4, #1
 80282ae:	f47f af07 	bne.w	80280c0 <__ssvfscanf_r+0x2b0>
 80282b2:	05f1      	lsls	r1, r6, #23
 80282b4:	4617      	mov	r7, r2
 80282b6:	f8cd 9010 	str.w	r9, [sp, #16]
 80282ba:	d507      	bpl.n	80282cc <__ssvfscanf_r+0x4bc>
 80282bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282be:	429d      	cmp	r5, r3
 80282c0:	f200 83f0 	bhi.w	8028aa4 <__ssvfscanf_r+0xc94>
 80282c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282c6:	429d      	cmp	r5, r3
 80282c8:	f43f adee 	beq.w	8027ea8 <__ssvfscanf_r+0x98>
 80282cc:	f016 0410 	ands.w	r4, r6, #16
 80282d0:	f000 8359 	beq.w	8028986 <__ssvfscanf_r+0xb76>
 80282d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282d6:	1aed      	subs	r5, r5, r3
 80282d8:	44a8      	add	r8, r5
 80282da:	4447      	add	r7, r8
 80282dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80282e0:	4644      	mov	r4, r8
 80282e2:	e5db      	b.n	8027e9c <__ssvfscanf_r+0x8c>
 80282e4:	f1b9 0f0a 	cmp.w	r9, #10
 80282e8:	dde3      	ble.n	80282b2 <__ssvfscanf_r+0x4a2>
 80282ea:	f426 6638 	bic.w	r6, r6, #2944	; 0xb80
 80282ee:	e7d0      	b.n	8028292 <__ssvfscanf_r+0x482>
 80282f0:	497c      	ldr	r1, [pc, #496]	; (80284e4 <__ssvfscanf_r+0x6d4>)
 80282f2:	f931 9019 	ldrsh.w	r9, [r1, r9, lsl #1]
 80282f6:	f1b9 0f08 	cmp.w	r9, #8
 80282fa:	dcf6      	bgt.n	80282ea <__ssvfscanf_r+0x4da>
 80282fc:	e7d9      	b.n	80282b2 <__ssvfscanf_r+0x4a2>
 80282fe:	4979      	ldr	r1, [pc, #484]	; (80284e4 <__ssvfscanf_r+0x6d4>)
 8028300:	f426 6638 	bic.w	r6, r6, #2944	; 0xb80
 8028304:	f931 9019 	ldrsh.w	r9, [r1, r9, lsl #1]
 8028308:	e7c3      	b.n	8028292 <__ssvfscanf_r+0x482>
 802830a:	0531      	lsls	r1, r6, #20
 802830c:	d5c1      	bpl.n	8028292 <__ssvfscanf_r+0x482>
 802830e:	f1b9 0f00 	cmp.w	r9, #0
 8028312:	d103      	bne.n	802831c <__ssvfscanf_r+0x50c>
 8028314:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 8028318:	f04f 0908 	mov.w	r9, #8
 802831c:	0571      	lsls	r1, r6, #21
 802831e:	f100 8265 	bmi.w	80287ec <__ssvfscanf_r+0x9dc>
 8028322:	f426 7660 	bic.w	r6, r6, #896	; 0x380
 8028326:	b10f      	cbz	r7, 802832c <__ssvfscanf_r+0x51c>
 8028328:	3f01      	subs	r7, #1
 802832a:	3401      	adds	r4, #1
 802832c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8028330:	3901      	subs	r1, #1
 8028332:	2900      	cmp	r1, #0
 8028334:	f108 0801 	add.w	r8, r8, #1
 8028338:	f8cb 1004 	str.w	r1, [fp, #4]
 802833c:	dcb3      	bgt.n	80282a6 <__ssvfscanf_r+0x496>
 802833e:	4659      	mov	r1, fp
 8028340:	4650      	mov	r0, sl
 8028342:	9204      	str	r2, [sp, #16]
 8028344:	f002 f91c 	bl	802a580 <__ssrefill_r>
 8028348:	9a04      	ldr	r2, [sp, #16]
 802834a:	2800      	cmp	r0, #0
 802834c:	d0ae      	beq.n	80282ac <__ssvfscanf_r+0x49c>
 802834e:	e7b0      	b.n	80282b2 <__ssvfscanf_r+0x4a2>
 8028350:	0631      	lsls	r1, r6, #24
 8028352:	d5ae      	bpl.n	80282b2 <__ssvfscanf_r+0x4a2>
 8028354:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8028358:	e79b      	b.n	8028292 <__ssvfscanf_r+0x482>
 802835a:	f898 9001 	ldrb.w	r9, [r8, #1]
 802835e:	f046 0610 	orr.w	r6, r6, #16
 8028362:	4698      	mov	r8, r3
 8028364:	e5ac      	b.n	8027ec0 <__ssvfscanf_r+0xb0>
 8028366:	9303      	str	r3, [sp, #12]
 8028368:	f046 0601 	orr.w	r6, r6, #1
 802836c:	4b5e      	ldr	r3, [pc, #376]	; (80284e8 <__ssvfscanf_r+0x6d8>)
 802836e:	9307      	str	r3, [sp, #28]
 8028370:	230a      	movs	r3, #10
 8028372:	9304      	str	r3, [sp, #16]
 8028374:	f8db 3004 	ldr.w	r3, [fp, #4]
 8028378:	2b00      	cmp	r3, #0
 802837a:	f04f 0803 	mov.w	r8, #3
 802837e:	f73f ae4d 	bgt.w	802801c <__ssvfscanf_r+0x20c>
 8028382:	4659      	mov	r1, fp
 8028384:	4650      	mov	r0, sl
 8028386:	f002 f8fb 	bl	802a580 <__ssrefill_r>
 802838a:	2800      	cmp	r0, #0
 802838c:	f43f ae46 	beq.w	802801c <__ssvfscanf_r+0x20c>
 8028390:	e66d      	b.n	802806e <__ssvfscanf_r+0x25e>
 8028392:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8028396:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802839a:	3c30      	subs	r4, #48	; 0x30
 802839c:	f898 9001 	ldrb.w	r9, [r8, #1]
 80283a0:	4698      	mov	r8, r3
 80283a2:	e58d      	b.n	8027ec0 <__ssvfscanf_r+0xb0>
 80283a4:	9303      	str	r3, [sp, #12]
 80283a6:	4b51      	ldr	r3, [pc, #324]	; (80284ec <__ssvfscanf_r+0x6dc>)
 80283a8:	9307      	str	r3, [sp, #28]
 80283aa:	230a      	movs	r3, #10
 80283ac:	9304      	str	r3, [sp, #16]
 80283ae:	f04f 0803 	mov.w	r8, #3
 80283b2:	e62e      	b.n	8028012 <__ssvfscanf_r+0x202>
 80283b4:	9303      	str	r3, [sp, #12]
 80283b6:	f04f 0802 	mov.w	r8, #2
 80283ba:	e62a      	b.n	8028012 <__ssvfscanf_r+0x202>
 80283bc:	9303      	str	r3, [sp, #12]
 80283be:	f446 7608 	orr.w	r6, r6, #544	; 0x220
 80283c2:	4b4a      	ldr	r3, [pc, #296]	; (80284ec <__ssvfscanf_r+0x6dc>)
 80283c4:	9307      	str	r3, [sp, #28]
 80283c6:	2310      	movs	r3, #16
 80283c8:	9304      	str	r3, [sp, #16]
 80283ca:	f04f 0803 	mov.w	r8, #3
 80283ce:	e620      	b.n	8028012 <__ssvfscanf_r+0x202>
 80283d0:	9303      	str	r3, [sp, #12]
 80283d2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80283d6:	e7f4      	b.n	80283c2 <__ssvfscanf_r+0x5b2>
 80283d8:	9303      	str	r3, [sp, #12]
 80283da:	f046 0601 	orr.w	r6, r6, #1
 80283de:	4b43      	ldr	r3, [pc, #268]	; (80284ec <__ssvfscanf_r+0x6dc>)
 80283e0:	9307      	str	r3, [sp, #28]
 80283e2:	2308      	movs	r3, #8
 80283e4:	9304      	str	r3, [sp, #16]
 80283e6:	f04f 0803 	mov.w	r8, #3
 80283ea:	e612      	b.n	8028012 <__ssvfscanf_r+0x202>
 80283ec:	f898 9001 	ldrb.w	r9, [r8, #1]
 80283f0:	f046 0602 	orr.w	r6, r6, #2
 80283f4:	4698      	mov	r8, r3
 80283f6:	e563      	b.n	8027ec0 <__ssvfscanf_r+0xb0>
 80283f8:	9303      	str	r3, [sp, #12]
 80283fa:	f04f 0804 	mov.w	r8, #4
 80283fe:	e608      	b.n	8028012 <__ssvfscanf_r+0x202>
 8028400:	f898 9001 	ldrb.w	r9, [r8, #1]
 8028404:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
 8028408:	f000 835d 	beq.w	8028ac6 <__ssvfscanf_r+0xcb6>
 802840c:	f046 0601 	orr.w	r6, r6, #1
 8028410:	4698      	mov	r8, r3
 8028412:	e555      	b.n	8027ec0 <__ssvfscanf_r+0xb0>
 8028414:	9303      	str	r3, [sp, #12]
 8028416:	e7e2      	b.n	80283de <__ssvfscanf_r+0x5ce>
 8028418:	06f4      	lsls	r4, r6, #27
 802841a:	9303      	str	r3, [sp, #12]
 802841c:	d450      	bmi.n	80284c0 <__ssvfscanf_r+0x6b0>
 802841e:	0770      	lsls	r0, r6, #29
 8028420:	f100 836a 	bmi.w	8028af8 <__ssvfscanf_r+0xce8>
 8028424:	07f1      	lsls	r1, r6, #31
 8028426:	f100 8210 	bmi.w	802884a <__ssvfscanf_r+0xa3a>
 802842a:	07b2      	lsls	r2, r6, #30
 802842c:	f140 820d 	bpl.w	802884a <__ssvfscanf_r+0xa3a>
 8028430:	9a06      	ldr	r2, [sp, #24]
 8028432:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028436:	6813      	ldr	r3, [r2, #0]
 8028438:	4638      	mov	r0, r7
 802843a:	17f9      	asrs	r1, r7, #31
 802843c:	3204      	adds	r2, #4
 802843e:	9206      	str	r2, [sp, #24]
 8028440:	e9c3 0100 	strd	r0, r1, [r3]
 8028444:	4644      	mov	r4, r8
 8028446:	e529      	b.n	8027e9c <__ssvfscanf_r+0x8c>
 8028448:	f898 9001 	ldrb.w	r9, [r8, #1]
 802844c:	f046 0604 	orr.w	r6, r6, #4
 8028450:	4698      	mov	r8, r3
 8028452:	e535      	b.n	8027ec0 <__ssvfscanf_r+0xb0>
 8028454:	9303      	str	r3, [sp, #12]
 8028456:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 802845a:	f04f 0800 	mov.w	r8, #0
 802845e:	e5d8      	b.n	8028012 <__ssvfscanf_r+0x202>
 8028460:	4619      	mov	r1, r3
 8028462:	a814      	add	r0, sp, #80	; 0x50
 8028464:	f000 fccc 	bl	8028e00 <__sccl>
 8028468:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 802846c:	9003      	str	r0, [sp, #12]
 802846e:	f04f 0801 	mov.w	r8, #1
 8028472:	e5ce      	b.n	8028012 <__ssvfscanf_r+0x202>
 8028474:	9303      	str	r3, [sp, #12]
 8028476:	e779      	b.n	802836c <__ssvfscanf_r+0x55c>
 8028478:	ab12      	add	r3, sp, #72	; 0x48
 802847a:	4618      	mov	r0, r3
 802847c:	2208      	movs	r2, #8
 802847e:	2100      	movs	r1, #0
 8028480:	9308      	str	r3, [sp, #32]
 8028482:	f7ff fbfd 	bl	8027c80 <memset>
 8028486:	f016 0310 	ands.w	r3, r6, #16
 802848a:	930a      	str	r3, [sp, #40]	; 0x28
 802848c:	f000 8323 	beq.w	8028ad6 <__ssvfscanf_r+0xcc6>
 8028490:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8028494:	2600      	movs	r6, #0
 8028496:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 802849a:	f000 fc41 	bl	8028d20 <__locale_ctype_ptr>
 802849e:	f8db 3000 	ldr.w	r3, [fp]
 80284a2:	781b      	ldrb	r3, [r3, #0]
 80284a4:	4403      	add	r3, r0
 80284a6:	785b      	ldrb	r3, [r3, #1]
 80284a8:	0718      	lsls	r0, r3, #28
 80284aa:	d402      	bmi.n	80284b2 <__ssvfscanf_r+0x6a2>
 80284ac:	2c00      	cmp	r4, #0
 80284ae:	f040 833b 	bne.w	8028b28 <__ssvfscanf_r+0xd18>
 80284b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80284b4:	b923      	cbnz	r3, 80284c0 <__ssvfscanf_r+0x6b0>
 80284b6:	f8c9 3000 	str.w	r3, [r9]
 80284ba:	9b05      	ldr	r3, [sp, #20]
 80284bc:	3301      	adds	r3, #1
 80284be:	9305      	str	r3, [sp, #20]
 80284c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80284c4:	4644      	mov	r4, r8
 80284c6:	e4e9      	b.n	8027e9c <__ssvfscanf_r+0x8c>
 80284c8:	9303      	str	r3, [sp, #12]
 80284ca:	f000 fc29 	bl	8028d20 <__locale_ctype_ptr>
 80284ce:	4448      	add	r0, r9
 80284d0:	7843      	ldrb	r3, [r0, #1]
 80284d2:	f003 0303 	and.w	r3, r3, #3
 80284d6:	2b01      	cmp	r3, #1
 80284d8:	f47f af48 	bne.w	802836c <__ssvfscanf_r+0x55c>
 80284dc:	f046 0601 	orr.w	r6, r6, #1
 80284e0:	e744      	b.n	802836c <__ssvfscanf_r+0x55c>
 80284e2:	bf00      	nop
 80284e4:	08030c80 	.word	0x08030c80
 80284e8:	08029f91 	.word	0x08029f91
 80284ec:	0802a2e1 	.word	0x0802a2e1
 80284f0:	4650      	mov	r0, sl
 80284f2:	f000 fc2d 	bl	8028d50 <_localeconv_r>
 80284f6:	1e63      	subs	r3, r4, #1
 80284f8:	6802      	ldr	r2, [r0, #0]
 80284fa:	920c      	str	r2, [sp, #48]	; 0x30
 80284fc:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8028500:	f240 8171 	bls.w	80287e6 <__ssvfscanf_r+0x9d6>
 8028504:	f46f 71ae 	mvn.w	r1, #348	; 0x15c
 8028508:	1863      	adds	r3, r4, r1
 802850a:	930f      	str	r3, [sp, #60]	; 0x3c
 802850c:	f240 145d 	movw	r4, #349	; 0x15d
 8028510:	2300      	movs	r3, #0
 8028512:	aa54      	add	r2, sp, #336	; 0x150
 8028514:	920a      	str	r2, [sp, #40]	; 0x28
 8028516:	f446 66f0 	orr.w	r6, r6, #1920	; 0x780
 802851a:	930d      	str	r3, [sp, #52]	; 0x34
 802851c:	930e      	str	r3, [sp, #56]	; 0x38
 802851e:	4698      	mov	r8, r3
 8028520:	930b      	str	r3, [sp, #44]	; 0x2c
 8028522:	4691      	mov	r9, r2
 8028524:	f8db 0000 	ldr.w	r0, [fp]
 8028528:	7801      	ldrb	r1, [r0, #0]
 802852a:	f1a1 0e2b 	sub.w	lr, r1, #43	; 0x2b
 802852e:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
 8028532:	f200 812d 	bhi.w	8028790 <__ssvfscanf_r+0x980>
 8028536:	e8df f01e 	tbh	[pc, lr, lsl #1]
 802853a:	007b      	.short	0x007b
 802853c:	007b012b 	.word	0x007b012b
 8028540:	012b012b 	.word	0x012b012b
 8028544:	004f006e 	.word	0x004f006e
 8028548:	004f004f 	.word	0x004f004f
 802854c:	004f004f 	.word	0x004f004f
 8028550:	004f004f 	.word	0x004f004f
 8028554:	004f004f 	.word	0x004f004f
 8028558:	012b012b 	.word	0x012b012b
 802855c:	012b012b 	.word	0x012b012b
 8028560:	012b012b 	.word	0x012b012b
 8028564:	0126012b 	.word	0x0126012b
 8028568:	012b012b 	.word	0x012b012b
 802856c:	010c012b 	.word	0x010c012b
 8028570:	012b0107 	.word	0x012b0107
 8028574:	009b012b 	.word	0x009b012b
 8028578:	012b012b 	.word	0x012b012b
 802857c:	012b012b 	.word	0x012b012b
 8028580:	012b0088 	.word	0x012b0088
 8028584:	012b012b 	.word	0x012b012b
 8028588:	012b012b 	.word	0x012b012b
 802858c:	012b0084 	.word	0x012b0084
 8028590:	012b012b 	.word	0x012b012b
 8028594:	0080012b 	.word	0x0080012b
 8028598:	012b012b 	.word	0x012b012b
 802859c:	012b012b 	.word	0x012b012b
 80285a0:	012b012b 	.word	0x012b012b
 80285a4:	0126012b 	.word	0x0126012b
 80285a8:	012b012b 	.word	0x012b012b
 80285ac:	010c012b 	.word	0x010c012b
 80285b0:	012b0107 	.word	0x012b0107
 80285b4:	009b012b 	.word	0x009b012b
 80285b8:	012b012b 	.word	0x012b012b
 80285bc:	012b012b 	.word	0x012b012b
 80285c0:	012b0088 	.word	0x012b0088
 80285c4:	012b012b 	.word	0x012b012b
 80285c8:	012b012b 	.word	0x012b012b
 80285cc:	012b0084 	.word	0x012b0084
 80285d0:	012b012b 	.word	0x012b012b
 80285d4:	0080012b 	.word	0x0080012b
 80285d8:	42eb      	cmn	r3, r5
 80285da:	d116      	bne.n	802860a <__ssvfscanf_r+0x7fa>
 80285dc:	f426 76c0 	bic.w	r6, r6, #384	; 0x180
 80285e0:	f889 1000 	strb.w	r1, [r9]
 80285e4:	f109 0901 	add.w	r9, r9, #1
 80285e8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80285ec:	3901      	subs	r1, #1
 80285ee:	2900      	cmp	r1, #0
 80285f0:	f104 34ff 	add.w	r4, r4, #4294967295
 80285f4:	f107 0701 	add.w	r7, r7, #1
 80285f8:	f8cb 1004 	str.w	r1, [fp, #4]
 80285fc:	f340 80d6 	ble.w	80287ac <__ssvfscanf_r+0x99c>
 8028600:	3001      	adds	r0, #1
 8028602:	f8cb 0000 	str.w	r0, [fp]
 8028606:	2c00      	cmp	r4, #0
 8028608:	d18c      	bne.n	8028524 <__ssvfscanf_r+0x714>
 802860a:	f1b8 0f00 	cmp.w	r8, #0
 802860e:	d03b      	beq.n	8028688 <__ssvfscanf_r+0x878>
 8028610:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 8028614:	e038      	b.n	8028688 <__ssvfscanf_r+0x878>
 8028616:	05f2      	lsls	r2, r6, #23
 8028618:	d5de      	bpl.n	80285d8 <__ssvfscanf_r+0x7c8>
 802861a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802861c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8028620:	f108 0801 	add.w	r8, r8, #1
 8028624:	2a00      	cmp	r2, #0
 8028626:	d0df      	beq.n	80285e8 <__ssvfscanf_r+0x7d8>
 8028628:	3a01      	subs	r2, #1
 802862a:	920f      	str	r2, [sp, #60]	; 0x3c
 802862c:	3401      	adds	r4, #1
 802862e:	e7db      	b.n	80285e8 <__ssvfscanf_r+0x7d8>
 8028630:	0632      	lsls	r2, r6, #24
 8028632:	d5ea      	bpl.n	802860a <__ssvfscanf_r+0x7fa>
 8028634:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8028638:	e7d2      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 802863a:	2d07      	cmp	r5, #7
 802863c:	d1e5      	bne.n	802860a <__ssvfscanf_r+0x7fa>
 802863e:	2508      	movs	r5, #8
 8028640:	e7ce      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028642:	2d06      	cmp	r5, #6
 8028644:	d1e1      	bne.n	802860a <__ssvfscanf_r+0x7fa>
 8028646:	2507      	movs	r5, #7
 8028648:	e7ca      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 802864a:	2b00      	cmp	r3, #0
 802864c:	f040 80bb 	bne.w	80287c6 <__ssvfscanf_r+0x9b6>
 8028650:	f1b8 0f00 	cmp.w	r8, #0
 8028654:	d105      	bne.n	8028662 <__ssvfscanf_r+0x852>
 8028656:	f406 6ee0 	and.w	lr, r6, #1792	; 0x700
 802865a:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 802865e:	f000 8214 	beq.w	8028a8a <__ssvfscanf_r+0xc7a>
 8028662:	2d01      	cmp	r5, #1
 8028664:	d001      	beq.n	802866a <__ssvfscanf_r+0x85a>
 8028666:	2d04      	cmp	r5, #4
 8028668:	d1cf      	bne.n	802860a <__ssvfscanf_r+0x7fa>
 802866a:	3501      	adds	r5, #1
 802866c:	b2ed      	uxtb	r5, r5
 802866e:	e7b7      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028670:	2d00      	cmp	r5, #0
 8028672:	f040 80ad 	bne.w	80287d0 <__ssvfscanf_r+0x9c0>
 8028676:	f1b8 0f00 	cmp.w	r8, #0
 802867a:	d1c9      	bne.n	8028610 <__ssvfscanf_r+0x800>
 802867c:	f406 6ee0 	and.w	lr, r6, #1792	; 0x700
 8028680:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8028684:	f000 81fd 	beq.w	8028a82 <__ssvfscanf_r+0xc72>
 8028688:	3b01      	subs	r3, #1
 802868a:	2b01      	cmp	r3, #1
 802868c:	f240 82aa 	bls.w	8028be4 <__ssvfscanf_r+0xdd4>
 8028690:	1e6b      	subs	r3, r5, #1
 8028692:	2b06      	cmp	r3, #6
 8028694:	d812      	bhi.n	80286bc <__ssvfscanf_r+0x8ac>
 8028696:	2d02      	cmp	r5, #2
 8028698:	f240 82b3 	bls.w	8028c02 <__ssvfscanf_r+0xdf2>
 802869c:	2d03      	cmp	r5, #3
 802869e:	d00d      	beq.n	80286bc <__ssvfscanf_r+0x8ac>
 80286a0:	1f2c      	subs	r4, r5, #4
 80286a2:	b2e4      	uxtb	r4, r4
 80286a4:	43e5      	mvns	r5, r4
 80286a6:	444d      	add	r5, r9
 80286a8:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80286ac:	465a      	mov	r2, fp
 80286ae:	4650      	mov	r0, sl
 80286b0:	f001 ff26 	bl	802a500 <_sungetc_r>
 80286b4:	454d      	cmp	r5, r9
 80286b6:	d1f7      	bne.n	80286a8 <__ssvfscanf_r+0x898>
 80286b8:	3f01      	subs	r7, #1
 80286ba:	1b3f      	subs	r7, r7, r4
 80286bc:	05f1      	lsls	r1, r6, #23
 80286be:	d51b      	bpl.n	80286f8 <__ssvfscanf_r+0x8e8>
 80286c0:	0572      	lsls	r2, r6, #21
 80286c2:	f100 8280 	bmi.w	8028bc6 <__ssvfscanf_r+0xdb6>
 80286c6:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80286ca:	2965      	cmp	r1, #101	; 0x65
 80286cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80286d0:	f107 35ff 	add.w	r5, r7, #4294967295
 80286d4:	d00a      	beq.n	80286ec <__ssvfscanf_r+0x8dc>
 80286d6:	2945      	cmp	r1, #69	; 0x45
 80286d8:	d008      	beq.n	80286ec <__ssvfscanf_r+0x8dc>
 80286da:	465a      	mov	r2, fp
 80286dc:	4650      	mov	r0, sl
 80286de:	f001 ff0f 	bl	802a500 <_sungetc_r>
 80286e2:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80286e6:	1ebd      	subs	r5, r7, #2
 80286e8:	f1a9 0402 	sub.w	r4, r9, #2
 80286ec:	465a      	mov	r2, fp
 80286ee:	4650      	mov	r0, sl
 80286f0:	f001 ff06 	bl	802a500 <_sungetc_r>
 80286f4:	462f      	mov	r7, r5
 80286f6:	46a1      	mov	r9, r4
 80286f8:	f016 0210 	ands.w	r2, r6, #16
 80286fc:	f47f aee0 	bne.w	80284c0 <__ssvfscanf_r+0x6b0>
 8028700:	f406 63c0 	and.w	r3, r6, #1536	; 0x600
 8028704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028708:	f889 2000 	strb.w	r2, [r9]
 802870c:	f000 81d2 	beq.w	8028ab4 <__ssvfscanf_r+0xca4>
 8028710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028712:	2b00      	cmp	r3, #0
 8028714:	f040 8084 	bne.w	8028820 <__ssvfscanf_r+0xa10>
 8028718:	990a      	ldr	r1, [sp, #40]	; 0x28
 802871a:	2200      	movs	r2, #0
 802871c:	4650      	mov	r0, sl
 802871e:	f001 fb8f 	bl	8029e40 <_strtod_r>
 8028722:	07f3      	lsls	r3, r6, #31
 8028724:	d402      	bmi.n	802872c <__ssvfscanf_r+0x91c>
 8028726:	f016 0602 	ands.w	r6, r6, #2
 802872a:	d062      	beq.n	80287f2 <__ssvfscanf_r+0x9e2>
 802872c:	9a06      	ldr	r2, [sp, #24]
 802872e:	6813      	ldr	r3, [r2, #0]
 8028730:	3204      	adds	r2, #4
 8028732:	9206      	str	r2, [sp, #24]
 8028734:	ed83 0b00 	vstr	d0, [r3]
 8028738:	9b05      	ldr	r3, [sp, #20]
 802873a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802873e:	3301      	adds	r3, #1
 8028740:	9305      	str	r3, [sp, #20]
 8028742:	4644      	mov	r4, r8
 8028744:	f7ff bbaa 	b.w	8027e9c <__ssvfscanf_r+0x8c>
 8028748:	2d02      	cmp	r5, #2
 802874a:	f47f af5e 	bne.w	802860a <__ssvfscanf_r+0x7fa>
 802874e:	2503      	movs	r5, #3
 8028750:	e746      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028752:	f406 6ea0 	and.w	lr, r6, #1280	; 0x500
 8028756:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 802875a:	d005      	beq.n	8028768 <__ssvfscanf_r+0x958>
 802875c:	0572      	lsls	r2, r6, #21
 802875e:	f57f af54 	bpl.w	802860a <__ssvfscanf_r+0x7fa>
 8028762:	f1b8 0f00 	cmp.w	r8, #0
 8028766:	d08f      	beq.n	8028688 <__ssvfscanf_r+0x878>
 8028768:	05b2      	lsls	r2, r6, #22
 802876a:	d405      	bmi.n	8028778 <__ssvfscanf_r+0x968>
 802876c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802876e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8028772:	eba8 0202 	sub.w	r2, r8, r2
 8028776:	920e      	str	r2, [sp, #56]	; 0x38
 8028778:	f426 66f0 	bic.w	r6, r6, #1920	; 0x780
 802877c:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
 8028780:	f04f 0800 	mov.w	r8, #0
 8028784:	e72c      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028786:	2b01      	cmp	r3, #1
 8028788:	f47f af3f 	bne.w	802860a <__ssvfscanf_r+0x7fa>
 802878c:	2302      	movs	r3, #2
 802878e:	e727      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028792:	f892 e000 	ldrb.w	lr, [r2]
 8028796:	458e      	cmp	lr, r1
 8028798:	f47f af37 	bne.w	802860a <__ssvfscanf_r+0x7fa>
 802879c:	05b2      	lsls	r2, r6, #22
 802879e:	f57f af34 	bpl.w	802860a <__ssvfscanf_r+0x7fa>
 80287a2:	f426 7620 	bic.w	r6, r6, #640	; 0x280
 80287a6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80287aa:	e719      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 80287ac:	4659      	mov	r1, fp
 80287ae:	4650      	mov	r0, sl
 80287b0:	9308      	str	r3, [sp, #32]
 80287b2:	f001 fee5 	bl	802a580 <__ssrefill_r>
 80287b6:	9b08      	ldr	r3, [sp, #32]
 80287b8:	2800      	cmp	r0, #0
 80287ba:	f47f af26 	bne.w	802860a <__ssvfscanf_r+0x7fa>
 80287be:	2c00      	cmp	r4, #0
 80287c0:	f47f aeb0 	bne.w	8028524 <__ssvfscanf_r+0x714>
 80287c4:	e721      	b.n	802860a <__ssvfscanf_r+0x7fa>
 80287c6:	2b02      	cmp	r3, #2
 80287c8:	f47f af4b 	bne.w	8028662 <__ssvfscanf_r+0x852>
 80287cc:	2303      	movs	r3, #3
 80287ce:	e707      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 80287d0:	2d03      	cmp	r5, #3
 80287d2:	f43f af4a 	beq.w	802866a <__ssvfscanf_r+0x85a>
 80287d6:	2d05      	cmp	r5, #5
 80287d8:	f43f af47 	beq.w	802866a <__ssvfscanf_r+0x85a>
 80287dc:	f1b8 0f00 	cmp.w	r8, #0
 80287e0:	f43f af52 	beq.w	8028688 <__ssvfscanf_r+0x878>
 80287e4:	e714      	b.n	8028610 <__ssvfscanf_r+0x800>
 80287e6:	2300      	movs	r3, #0
 80287e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80287ea:	e691      	b.n	8028510 <__ssvfscanf_r+0x700>
 80287ec:	f426 66b0 	bic.w	r6, r6, #1408	; 0x580
 80287f0:	e54f      	b.n	8028292 <__ssvfscanf_r+0x482>
 80287f2:	ec53 2b10 	vmov	r2, r3, d0
 80287f6:	ec51 0b10 	vmov	r0, r1, d0
 80287fa:	ed8d 0b08 	vstr	d0, [sp, #32]
 80287fe:	f7e4 f8f7 	bl	800c9f0 <__aeabi_dcmpun>
 8028802:	9c06      	ldr	r4, [sp, #24]
 8028804:	ed9d 0b08 	vldr	d0, [sp, #32]
 8028808:	1d25      	adds	r5, r4, #4
 802880a:	6824      	ldr	r4, [r4, #0]
 802880c:	2800      	cmp	r0, #0
 802880e:	f040 8207 	bne.w	8028c20 <__ssvfscanf_r+0xe10>
 8028812:	ec51 0b10 	vmov	r0, r1, d0
 8028816:	f7e4 f92b 	bl	800ca70 <__aeabi_d2f>
 802881a:	9506      	str	r5, [sp, #24]
 802881c:	6020      	str	r0, [r4, #0]
 802881e:	e78b      	b.n	8028738 <__ssvfscanf_r+0x928>
 8028820:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028822:	230a      	movs	r3, #10
 8028824:	3101      	adds	r1, #1
 8028826:	4650      	mov	r0, sl
 8028828:	f001 fbb2 	bl	8029f90 <_strtol_r>
 802882c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802882e:	1ac2      	subs	r2, r0, r3
 8028830:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028832:	f20d 23a3 	addw	r3, sp, #675	; 0x2a3
 8028836:	4299      	cmp	r1, r3
 8028838:	bf24      	itt	cs
 802883a:	f20d 23a2 	addwcs	r3, sp, #674	; 0x2a2
 802883e:	930d      	strcs	r3, [sp, #52]	; 0x34
 8028840:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028842:	49b7      	ldr	r1, [pc, #732]	; (8028b20 <__ssvfscanf_r+0xd10>)
 8028844:	f000 fb1c 	bl	8028e80 <sprintf>
 8028848:	e766      	b.n	8028718 <__ssvfscanf_r+0x908>
 802884a:	9a06      	ldr	r2, [sp, #24]
 802884c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028850:	6813      	ldr	r3, [r2, #0]
 8028852:	601f      	str	r7, [r3, #0]
 8028854:	4613      	mov	r3, r2
 8028856:	3304      	adds	r3, #4
 8028858:	9306      	str	r3, [sp, #24]
 802885a:	4644      	mov	r4, r8
 802885c:	f7ff bb1e 	b.w	8027e9c <__ssvfscanf_r+0x8c>
 8028860:	ab12      	add	r3, sp, #72	; 0x48
 8028862:	4618      	mov	r0, r3
 8028864:	2208      	movs	r2, #8
 8028866:	2100      	movs	r1, #0
 8028868:	9308      	str	r3, [sp, #32]
 802886a:	f7ff fa09 	bl	8027c80 <memset>
 802886e:	f016 0310 	ands.w	r3, r6, #16
 8028872:	930a      	str	r3, [sp, #40]	; 0x28
 8028874:	f000 8136 	beq.w	8028ae4 <__ssvfscanf_r+0xcd4>
 8028878:	f04f 0900 	mov.w	r9, #0
 802887c:	2c00      	cmp	r4, #0
 802887e:	f43f ae1f 	beq.w	80284c0 <__ssvfscanf_r+0x6b0>
 8028882:	2500      	movs	r5, #0
 8028884:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8028888:	f000 fa32 	bl	8028cf0 <__locale_mb_cur_max>
 802888c:	42a8      	cmp	r0, r5
 802888e:	f43f abee 	beq.w	802806e <__ssvfscanf_r+0x25e>
 8028892:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8028896:	f812 0b01 	ldrb.w	r0, [r2], #1
 802889a:	f8cb 2000 	str.w	r2, [fp]
 802889e:	3b01      	subs	r3, #1
 80288a0:	9a08      	ldr	r2, [sp, #32]
 80288a2:	9200      	str	r2, [sp, #0]
 80288a4:	1c6e      	adds	r6, r5, #1
 80288a6:	f8cb 3004 	str.w	r3, [fp, #4]
 80288aa:	4649      	mov	r1, r9
 80288ac:	f808 0005 	strb.w	r0, [r8, r5]
 80288b0:	4633      	mov	r3, r6
 80288b2:	4642      	mov	r2, r8
 80288b4:	4650      	mov	r0, sl
 80288b6:	f000 fa5b 	bl	8028d70 <_mbrtowc_r>
 80288ba:	1c41      	adds	r1, r0, #1
 80288bc:	f43f abd7 	beq.w	802806e <__ssvfscanf_r+0x25e>
 80288c0:	b9e8      	cbnz	r0, 80288fe <__ssvfscanf_r+0xaee>
 80288c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80288c4:	b9fb      	cbnz	r3, 8028906 <__ssvfscanf_r+0xaf6>
 80288c6:	f8c9 3000 	str.w	r3, [r9]
 80288ca:	4437      	add	r7, r6
 80288cc:	3c01      	subs	r4, #1
 80288ce:	f109 0904 	add.w	r9, r9, #4
 80288d2:	2500      	movs	r5, #0
 80288d4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80288d8:	2b00      	cmp	r3, #0
 80288da:	dd06      	ble.n	80288ea <__ssvfscanf_r+0xada>
 80288dc:	2c00      	cmp	r4, #0
 80288de:	d1d3      	bne.n	8028888 <__ssvfscanf_r+0xa78>
 80288e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80288e2:	2b00      	cmp	r3, #0
 80288e4:	f43f ade9 	beq.w	80284ba <__ssvfscanf_r+0x6aa>
 80288e8:	e5ea      	b.n	80284c0 <__ssvfscanf_r+0x6b0>
 80288ea:	4659      	mov	r1, fp
 80288ec:	4650      	mov	r0, sl
 80288ee:	f001 fe47 	bl	802a580 <__ssrefill_r>
 80288f2:	2800      	cmp	r0, #0
 80288f4:	d0f2      	beq.n	80288dc <__ssvfscanf_r+0xacc>
 80288f6:	2d00      	cmp	r5, #0
 80288f8:	d0f2      	beq.n	80288e0 <__ssvfscanf_r+0xad0>
 80288fa:	f7ff bbb8 	b.w	802806e <__ssvfscanf_r+0x25e>
 80288fe:	3002      	adds	r0, #2
 8028900:	d105      	bne.n	802890e <__ssvfscanf_r+0xafe>
 8028902:	4635      	mov	r5, r6
 8028904:	e7e6      	b.n	80288d4 <__ssvfscanf_r+0xac4>
 8028906:	4437      	add	r7, r6
 8028908:	3c01      	subs	r4, #1
 802890a:	4605      	mov	r5, r0
 802890c:	e7e2      	b.n	80288d4 <__ssvfscanf_r+0xac4>
 802890e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028910:	4437      	add	r7, r6
 8028912:	3c01      	subs	r4, #1
 8028914:	2b00      	cmp	r3, #0
 8028916:	d0da      	beq.n	80288ce <__ssvfscanf_r+0xabe>
 8028918:	2500      	movs	r5, #0
 802891a:	e7db      	b.n	80288d4 <__ssvfscanf_r+0xac4>
 802891c:	9a06      	ldr	r2, [sp, #24]
 802891e:	6815      	ldr	r5, [r2, #0]
 8028920:	f102 0904 	add.w	r9, r2, #4
 8028924:	46a8      	mov	r8, r5
 8028926:	ae14      	add	r6, sp, #80	; 0x50
 8028928:	f8db 3000 	ldr.w	r3, [fp]
 802892c:	781a      	ldrb	r2, [r3, #0]
 802892e:	5cb2      	ldrb	r2, [r6, r2]
 8028930:	1c59      	adds	r1, r3, #1
 8028932:	b1c2      	cbz	r2, 8028966 <__ssvfscanf_r+0xb56>
 8028934:	f8db 2004 	ldr.w	r2, [fp, #4]
 8028938:	f8cb 1000 	str.w	r1, [fp]
 802893c:	3a01      	subs	r2, #1
 802893e:	f8cb 2004 	str.w	r2, [fp, #4]
 8028942:	781b      	ldrb	r3, [r3, #0]
 8028944:	f808 3b01 	strb.w	r3, [r8], #1
 8028948:	3c01      	subs	r4, #1
 802894a:	d00c      	beq.n	8028966 <__ssvfscanf_r+0xb56>
 802894c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8028950:	2b00      	cmp	r3, #0
 8028952:	dce9      	bgt.n	8028928 <__ssvfscanf_r+0xb18>
 8028954:	4659      	mov	r1, fp
 8028956:	4650      	mov	r0, sl
 8028958:	f001 fe12 	bl	802a580 <__ssrefill_r>
 802895c:	2800      	cmp	r0, #0
 802895e:	d0e3      	beq.n	8028928 <__ssvfscanf_r+0xb18>
 8028960:	4545      	cmp	r5, r8
 8028962:	f43f ab84 	beq.w	802806e <__ssvfscanf_r+0x25e>
 8028966:	ebb8 0505 	subs.w	r5, r8, r5
 802896a:	f43f aa9d 	beq.w	8027ea8 <__ssvfscanf_r+0x98>
 802896e:	9a05      	ldr	r2, [sp, #20]
 8028970:	f8cd 9018 	str.w	r9, [sp, #24]
 8028974:	2300      	movs	r3, #0
 8028976:	3201      	adds	r2, #1
 8028978:	f888 3000 	strb.w	r3, [r8]
 802897c:	9205      	str	r2, [sp, #20]
 802897e:	442f      	add	r7, r5
 8028980:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028984:	e41e      	b.n	80281c4 <__ssvfscanf_r+0x3b4>
 8028986:	4622      	mov	r2, r4
 8028988:	702c      	strb	r4, [r5, #0]
 802898a:	9b04      	ldr	r3, [sp, #16]
 802898c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802898e:	9c07      	ldr	r4, [sp, #28]
 8028990:	4650      	mov	r0, sl
 8028992:	47a0      	blx	r4
 8028994:	06b2      	lsls	r2, r6, #26
 8028996:	d47c      	bmi.n	8028a92 <__ssvfscanf_r+0xc82>
 8028998:	0773      	lsls	r3, r6, #29
 802899a:	f100 80bb 	bmi.w	8028b14 <__ssvfscanf_r+0xd04>
 802899e:	f016 0201 	ands.w	r2, r6, #1
 80289a2:	d176      	bne.n	8028a92 <__ssvfscanf_r+0xc82>
 80289a4:	07b4      	lsls	r4, r6, #30
 80289a6:	d574      	bpl.n	8028a92 <__ssvfscanf_r+0xc82>
 80289a8:	4b5e      	ldr	r3, [pc, #376]	; (8028b24 <__ssvfscanf_r+0xd14>)
 80289aa:	9907      	ldr	r1, [sp, #28]
 80289ac:	4299      	cmp	r1, r3
 80289ae:	4650      	mov	r0, sl
 80289b0:	9b04      	ldr	r3, [sp, #16]
 80289b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80289b4:	f000 80ab 	beq.w	8028b0e <__ssvfscanf_r+0xcfe>
 80289b8:	f001 fbd2 	bl	802a160 <_strtoll_r>
 80289bc:	9a06      	ldr	r2, [sp, #24]
 80289be:	6813      	ldr	r3, [r2, #0]
 80289c0:	3204      	adds	r2, #4
 80289c2:	9206      	str	r2, [sp, #24]
 80289c4:	e9c3 0100 	strd	r0, r1, [r3]
 80289c8:	e068      	b.n	8028a9c <__ssvfscanf_r+0xc8c>
 80289ca:	2d00      	cmp	r5, #0
 80289cc:	f43f ab4f 	beq.w	802806e <__ssvfscanf_r+0x25e>
 80289d0:	442f      	add	r7, r5
 80289d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80289d6:	f7ff bbf5 	b.w	80281c4 <__ssvfscanf_r+0x3b4>
 80289da:	9a06      	ldr	r2, [sp, #24]
 80289dc:	6816      	ldr	r6, [r2, #0]
 80289de:	f102 0804 	add.w	r8, r2, #4
 80289e2:	4635      	mov	r5, r6
 80289e4:	f000 f99c 	bl	8028d20 <__locale_ctype_ptr>
 80289e8:	f8db 2000 	ldr.w	r2, [fp]
 80289ec:	7813      	ldrb	r3, [r2, #0]
 80289ee:	4418      	add	r0, r3
 80289f0:	1c51      	adds	r1, r2, #1
 80289f2:	7843      	ldrb	r3, [r0, #1]
 80289f4:	071b      	lsls	r3, r3, #28
 80289f6:	d415      	bmi.n	8028a24 <__ssvfscanf_r+0xc14>
 80289f8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80289fc:	f8cb 1000 	str.w	r1, [fp]
 8028a00:	3b01      	subs	r3, #1
 8028a02:	f8cb 3004 	str.w	r3, [fp, #4]
 8028a06:	7813      	ldrb	r3, [r2, #0]
 8028a08:	f805 3b01 	strb.w	r3, [r5], #1
 8028a0c:	3c01      	subs	r4, #1
 8028a0e:	d009      	beq.n	8028a24 <__ssvfscanf_r+0xc14>
 8028a10:	f8db 3004 	ldr.w	r3, [fp, #4]
 8028a14:	2b00      	cmp	r3, #0
 8028a16:	dce5      	bgt.n	80289e4 <__ssvfscanf_r+0xbd4>
 8028a18:	4659      	mov	r1, fp
 8028a1a:	4650      	mov	r0, sl
 8028a1c:	f001 fdb0 	bl	802a580 <__ssrefill_r>
 8028a20:	2800      	cmp	r0, #0
 8028a22:	d0df      	beq.n	80289e4 <__ssvfscanf_r+0xbd4>
 8028a24:	9a05      	ldr	r2, [sp, #20]
 8028a26:	f8cd 8018 	str.w	r8, [sp, #24]
 8028a2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028a2e:	1bae      	subs	r6, r5, r6
 8028a30:	2300      	movs	r3, #0
 8028a32:	3201      	adds	r2, #1
 8028a34:	4437      	add	r7, r6
 8028a36:	9205      	str	r2, [sp, #20]
 8028a38:	702b      	strb	r3, [r5, #0]
 8028a3a:	4644      	mov	r4, r8
 8028a3c:	f7ff ba2e 	b.w	8027e9c <__ssvfscanf_r+0x8c>
 8028a40:	9d06      	ldr	r5, [sp, #24]
 8028a42:	4623      	mov	r3, r4
 8028a44:	6829      	ldr	r1, [r5, #0]
 8028a46:	f8cd b000 	str.w	fp, [sp]
 8028a4a:	2201      	movs	r2, #1
 8028a4c:	4650      	mov	r0, sl
 8028a4e:	f001 fdb7 	bl	802a5c0 <_sfread_r>
 8028a52:	462b      	mov	r3, r5
 8028a54:	3304      	adds	r3, #4
 8028a56:	2800      	cmp	r0, #0
 8028a58:	f43f ab09 	beq.w	802806e <__ssvfscanf_r+0x25e>
 8028a5c:	9a05      	ldr	r2, [sp, #20]
 8028a5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028a62:	9306      	str	r3, [sp, #24]
 8028a64:	3201      	adds	r2, #1
 8028a66:	4407      	add	r7, r0
 8028a68:	9205      	str	r2, [sp, #20]
 8028a6a:	4644      	mov	r4, r8
 8028a6c:	f7ff ba16 	b.w	8027e9c <__ssvfscanf_r+0x8c>
 8028a70:	4659      	mov	r1, fp
 8028a72:	4650      	mov	r0, sl
 8028a74:	f001 fd84 	bl	802a580 <__ssrefill_r>
 8028a78:	2800      	cmp	r0, #0
 8028a7a:	f43f aaa8 	beq.w	8027fce <__ssvfscanf_r+0x1be>
 8028a7e:	f7ff baf6 	b.w	802806e <__ssvfscanf_r+0x25e>
 8028a82:	f426 66f0 	bic.w	r6, r6, #1920	; 0x780
 8028a86:	2501      	movs	r5, #1
 8028a88:	e5aa      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028a8a:	f426 66f0 	bic.w	r6, r6, #1920	; 0x780
 8028a8e:	2301      	movs	r3, #1
 8028a90:	e5a6      	b.n	80285e0 <__ssvfscanf_r+0x7d0>
 8028a92:	9a06      	ldr	r2, [sp, #24]
 8028a94:	6813      	ldr	r3, [r2, #0]
 8028a96:	3204      	adds	r2, #4
 8028a98:	9206      	str	r2, [sp, #24]
 8028a9a:	6018      	str	r0, [r3, #0]
 8028a9c:	9b05      	ldr	r3, [sp, #20]
 8028a9e:	3301      	adds	r3, #1
 8028aa0:	9305      	str	r3, [sp, #20]
 8028aa2:	e417      	b.n	80282d4 <__ssvfscanf_r+0x4c4>
 8028aa4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028aa8:	465a      	mov	r2, fp
 8028aaa:	4650      	mov	r0, sl
 8028aac:	f001 fd28 	bl	802a500 <_sungetc_r>
 8028ab0:	3d01      	subs	r5, #1
 8028ab2:	e407      	b.n	80282c4 <__ssvfscanf_r+0x4b4>
 8028ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028ab6:	ebb8 0203 	subs.w	r2, r8, r3
 8028aba:	f43f ae2d 	beq.w	8028718 <__ssvfscanf_r+0x908>
 8028abe:	4252      	negs	r2, r2
 8028ac0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8028ac4:	e6b4      	b.n	8028830 <__ssvfscanf_r+0xa20>
 8028ac6:	f898 9002 	ldrb.w	r9, [r8, #2]
 8028aca:	f046 0602 	orr.w	r6, r6, #2
 8028ace:	f108 0802 	add.w	r8, r8, #2
 8028ad2:	f7ff b9f5 	b.w	8027ec0 <__ssvfscanf_r+0xb0>
 8028ad6:	9a06      	ldr	r2, [sp, #24]
 8028ad8:	4613      	mov	r3, r2
 8028ada:	3304      	adds	r3, #4
 8028adc:	f8d2 9000 	ldr.w	r9, [r2]
 8028ae0:	9306      	str	r3, [sp, #24]
 8028ae2:	e4d7      	b.n	8028494 <__ssvfscanf_r+0x684>
 8028ae4:	9a06      	ldr	r2, [sp, #24]
 8028ae6:	4613      	mov	r3, r2
 8028ae8:	3304      	adds	r3, #4
 8028aea:	f8d2 9000 	ldr.w	r9, [r2]
 8028aee:	9306      	str	r3, [sp, #24]
 8028af0:	2c00      	cmp	r4, #0
 8028af2:	f47f aec6 	bne.w	8028882 <__ssvfscanf_r+0xa72>
 8028af6:	e4e0      	b.n	80284ba <__ssvfscanf_r+0x6aa>
 8028af8:	9a06      	ldr	r2, [sp, #24]
 8028afa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028afe:	6813      	ldr	r3, [r2, #0]
 8028b00:	801f      	strh	r7, [r3, #0]
 8028b02:	4613      	mov	r3, r2
 8028b04:	3304      	adds	r3, #4
 8028b06:	9306      	str	r3, [sp, #24]
 8028b08:	4644      	mov	r4, r8
 8028b0a:	f7ff b9c7 	b.w	8027e9c <__ssvfscanf_r+0x8c>
 8028b0e:	f001 fcdf 	bl	802a4d0 <_strtoull_r>
 8028b12:	e753      	b.n	80289bc <__ssvfscanf_r+0xbac>
 8028b14:	9a06      	ldr	r2, [sp, #24]
 8028b16:	6813      	ldr	r3, [r2, #0]
 8028b18:	3204      	adds	r2, #4
 8028b1a:	9206      	str	r2, [sp, #24]
 8028b1c:	8018      	strh	r0, [r3, #0]
 8028b1e:	e7bd      	b.n	8028a9c <__ssvfscanf_r+0xc8c>
 8028b20:	08030c70 	.word	0x08030c70
 8028b24:	0802a2e1 	.word	0x0802a2e1
 8028b28:	f000 f8e2 	bl	8028cf0 <__locale_mb_cur_max>
 8028b2c:	4286      	cmp	r6, r0
 8028b2e:	f43f aa9e 	beq.w	802806e <__ssvfscanf_r+0x25e>
 8028b32:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8028b36:	f812 0b01 	ldrb.w	r0, [r2], #1
 8028b3a:	f8cb 2000 	str.w	r2, [fp]
 8028b3e:	1c75      	adds	r5, r6, #1
 8028b40:	9a08      	ldr	r2, [sp, #32]
 8028b42:	9200      	str	r2, [sp, #0]
 8028b44:	3b01      	subs	r3, #1
 8028b46:	f808 0006 	strb.w	r0, [r8, r6]
 8028b4a:	f8cb 3004 	str.w	r3, [fp, #4]
 8028b4e:	4642      	mov	r2, r8
 8028b50:	462b      	mov	r3, r5
 8028b52:	4649      	mov	r1, r9
 8028b54:	4650      	mov	r0, sl
 8028b56:	f000 f90b 	bl	8028d70 <_mbrtowc_r>
 8028b5a:	1c46      	adds	r6, r0, #1
 8028b5c:	f43f aa87 	beq.w	802806e <__ssvfscanf_r+0x25e>
 8028b60:	b990      	cbnz	r0, 8028b88 <__ssvfscanf_r+0xd78>
 8028b62:	f8c9 0000 	str.w	r0, [r9]
 8028b66:	f000 f8b3 	bl	8028cd0 <iswspace>
 8028b6a:	4606      	mov	r6, r0
 8028b6c:	b1f8      	cbz	r0, 8028bae <__ssvfscanf_r+0xd9e>
 8028b6e:	2d00      	cmp	r5, #0
 8028b70:	f43f ac9f 	beq.w	80284b2 <__ssvfscanf_r+0x6a2>
 8028b74:	4445      	add	r5, r8
 8028b76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8028b7a:	465a      	mov	r2, fp
 8028b7c:	4650      	mov	r0, sl
 8028b7e:	f001 fcbf 	bl	802a500 <_sungetc_r>
 8028b82:	45a8      	cmp	r8, r5
 8028b84:	d1f7      	bne.n	8028b76 <__ssvfscanf_r+0xd66>
 8028b86:	e494      	b.n	80284b2 <__ssvfscanf_r+0x6a2>
 8028b88:	3002      	adds	r0, #2
 8028b8a:	d119      	bne.n	8028bc0 <__ssvfscanf_r+0xdb0>
 8028b8c:	462e      	mov	r6, r5
 8028b8e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8028b92:	2b00      	cmp	r3, #0
 8028b94:	f73f ac81 	bgt.w	802849a <__ssvfscanf_r+0x68a>
 8028b98:	4659      	mov	r1, fp
 8028b9a:	4650      	mov	r0, sl
 8028b9c:	f001 fcf0 	bl	802a580 <__ssrefill_r>
 8028ba0:	2800      	cmp	r0, #0
 8028ba2:	f43f ac7a 	beq.w	802849a <__ssvfscanf_r+0x68a>
 8028ba6:	2e00      	cmp	r6, #0
 8028ba8:	f47f aa61 	bne.w	802806e <__ssvfscanf_r+0x25e>
 8028bac:	e481      	b.n	80284b2 <__ssvfscanf_r+0x6a2>
 8028bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028bb0:	442f      	add	r7, r5
 8028bb2:	3c01      	subs	r4, #1
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	d1ea      	bne.n	8028b8e <__ssvfscanf_r+0xd7e>
 8028bb8:	f109 0904 	add.w	r9, r9, #4
 8028bbc:	461e      	mov	r6, r3
 8028bbe:	e7e6      	b.n	8028b8e <__ssvfscanf_r+0xd7e>
 8028bc0:	f8d9 0000 	ldr.w	r0, [r9]
 8028bc4:	e7cf      	b.n	8028b66 <__ssvfscanf_r+0xd56>
 8028bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028bc8:	4599      	cmp	r9, r3
 8028bca:	f67f a96d 	bls.w	8027ea8 <__ssvfscanf_r+0x98>
 8028bce:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8028bd2:	465a      	mov	r2, fp
 8028bd4:	4650      	mov	r0, sl
 8028bd6:	f001 fc93 	bl	802a500 <_sungetc_r>
 8028bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028bdc:	4599      	cmp	r9, r3
 8028bde:	d1f6      	bne.n	8028bce <__ssvfscanf_r+0xdbe>
 8028be0:	f7ff b962 	b.w	8027ea8 <__ssvfscanf_r+0x98>
 8028be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028be6:	4599      	cmp	r9, r3
 8028be8:	f67f a95e 	bls.w	8027ea8 <__ssvfscanf_r+0x98>
 8028bec:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8028bf0:	465a      	mov	r2, fp
 8028bf2:	4650      	mov	r0, sl
 8028bf4:	f001 fc84 	bl	802a500 <_sungetc_r>
 8028bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028bfa:	4599      	cmp	r9, r3
 8028bfc:	d1f6      	bne.n	8028bec <__ssvfscanf_r+0xddc>
 8028bfe:	f7ff b953 	b.w	8027ea8 <__ssvfscanf_r+0x98>
 8028c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c04:	4599      	cmp	r9, r3
 8028c06:	f67f a94f 	bls.w	8027ea8 <__ssvfscanf_r+0x98>
 8028c0a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8028c0e:	465a      	mov	r2, fp
 8028c10:	4650      	mov	r0, sl
 8028c12:	f001 fc75 	bl	802a500 <_sungetc_r>
 8028c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c18:	4599      	cmp	r9, r3
 8028c1a:	d1f6      	bne.n	8028c0a <__ssvfscanf_r+0xdfa>
 8028c1c:	f7ff b944 	b.w	8027ea8 <__ssvfscanf_r+0x98>
 8028c20:	4630      	mov	r0, r6
 8028c22:	f7fe ffed 	bl	8027c00 <nanf>
 8028c26:	9506      	str	r5, [sp, #24]
 8028c28:	ed84 0a00 	vstr	s0, [r4]
 8028c2c:	e584      	b.n	8028738 <__ssvfscanf_r+0x928>
 8028c2e:	bf00      	nop

08028c30 <_vsnprintf_r>:
 8028c30:	b570      	push	{r4, r5, r6, lr}
 8028c32:	1e14      	subs	r4, r2, #0
 8028c34:	b09a      	sub	sp, #104	; 0x68
 8028c36:	4605      	mov	r5, r0
 8028c38:	db2e      	blt.n	8028c98 <_vsnprintf_r+0x68>
 8028c3a:	461a      	mov	r2, r3
 8028c3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8028c40:	9100      	str	r1, [sp, #0]
 8028c42:	9104      	str	r1, [sp, #16]
 8028c44:	f8ad 300c 	strh.w	r3, [sp, #12]
 8028c48:	d011      	beq.n	8028c6e <_vsnprintf_r+0x3e>
 8028c4a:	3c01      	subs	r4, #1
 8028c4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8028c50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028c52:	9402      	str	r4, [sp, #8]
 8028c54:	4669      	mov	r1, sp
 8028c56:	9405      	str	r4, [sp, #20]
 8028c58:	f8ad 600e 	strh.w	r6, [sp, #14]
 8028c5c:	f001 fcf0 	bl	802a640 <_svfprintf_r>
 8028c60:	1c42      	adds	r2, r0, #1
 8028c62:	db12      	blt.n	8028c8a <_vsnprintf_r+0x5a>
 8028c64:	9b00      	ldr	r3, [sp, #0]
 8028c66:	2200      	movs	r2, #0
 8028c68:	701a      	strb	r2, [r3, #0]
 8028c6a:	b01a      	add	sp, #104	; 0x68
 8028c6c:	bd70      	pop	{r4, r5, r6, pc}
 8028c6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028c70:	9402      	str	r4, [sp, #8]
 8028c72:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8028c76:	4669      	mov	r1, sp
 8028c78:	9405      	str	r4, [sp, #20]
 8028c7a:	f8ad 600e 	strh.w	r6, [sp, #14]
 8028c7e:	f001 fcdf 	bl	802a640 <_svfprintf_r>
 8028c82:	1c43      	adds	r3, r0, #1
 8028c84:	db04      	blt.n	8028c90 <_vsnprintf_r+0x60>
 8028c86:	b01a      	add	sp, #104	; 0x68
 8028c88:	bd70      	pop	{r4, r5, r6, pc}
 8028c8a:	238b      	movs	r3, #139	; 0x8b
 8028c8c:	602b      	str	r3, [r5, #0]
 8028c8e:	e7e9      	b.n	8028c64 <_vsnprintf_r+0x34>
 8028c90:	238b      	movs	r3, #139	; 0x8b
 8028c92:	602b      	str	r3, [r5, #0]
 8028c94:	b01a      	add	sp, #104	; 0x68
 8028c96:	bd70      	pop	{r4, r5, r6, pc}
 8028c98:	238b      	movs	r3, #139	; 0x8b
 8028c9a:	6003      	str	r3, [r0, #0]
 8028c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8028ca0:	e7f1      	b.n	8028c86 <_vsnprintf_r+0x56>
 8028ca2:	bf00      	nop
	...

08028cb0 <vsnprintf>:
 8028cb0:	b510      	push	{r4, lr}
 8028cb2:	b082      	sub	sp, #8
 8028cb4:	4c05      	ldr	r4, [pc, #20]	; (8028ccc <vsnprintf+0x1c>)
 8028cb6:	9300      	str	r3, [sp, #0]
 8028cb8:	6824      	ldr	r4, [r4, #0]
 8028cba:	4613      	mov	r3, r2
 8028cbc:	460a      	mov	r2, r1
 8028cbe:	4601      	mov	r1, r0
 8028cc0:	4620      	mov	r0, r4
 8028cc2:	f7ff ffb5 	bl	8028c30 <_vsnprintf_r>
 8028cc6:	b002      	add	sp, #8
 8028cc8:	bd10      	pop	{r4, pc}
 8028cca:	bf00      	nop
 8028ccc:	20001090 	.word	0x20001090

08028cd0 <iswspace>:
 8028cd0:	28ff      	cmp	r0, #255	; 0xff
 8028cd2:	d901      	bls.n	8028cd8 <iswspace+0x8>
 8028cd4:	2000      	movs	r0, #0
 8028cd6:	4770      	bx	lr
 8028cd8:	b510      	push	{r4, lr}
 8028cda:	4604      	mov	r4, r0
 8028cdc:	f000 f820 	bl	8028d20 <__locale_ctype_ptr>
 8028ce0:	4420      	add	r0, r4
 8028ce2:	7840      	ldrb	r0, [r0, #1]
 8028ce4:	f000 0008 	and.w	r0, r0, #8
 8028ce8:	bd10      	pop	{r4, pc}
 8028cea:	bf00      	nop
 8028cec:	0000      	movs	r0, r0
	...

08028cf0 <__locale_mb_cur_max>:
 8028cf0:	4b04      	ldr	r3, [pc, #16]	; (8028d04 <__locale_mb_cur_max+0x14>)
 8028cf2:	4a05      	ldr	r2, [pc, #20]	; (8028d08 <__locale_mb_cur_max+0x18>)
 8028cf4:	681b      	ldr	r3, [r3, #0]
 8028cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028cf8:	2b00      	cmp	r3, #0
 8028cfa:	bf08      	it	eq
 8028cfc:	4613      	moveq	r3, r2
 8028cfe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8028d02:	4770      	bx	lr
 8028d04:	20001090 	.word	0x20001090
 8028d08:	200014c0 	.word	0x200014c0
 8028d0c:	00000000 	.word	0x00000000

08028d10 <__locale_ctype_ptr_l>:
 8028d10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8028d14:	4770      	bx	lr
 8028d16:	bf00      	nop
	...

08028d20 <__locale_ctype_ptr>:
 8028d20:	4b04      	ldr	r3, [pc, #16]	; (8028d34 <__locale_ctype_ptr+0x14>)
 8028d22:	4a05      	ldr	r2, [pc, #20]	; (8028d38 <__locale_ctype_ptr+0x18>)
 8028d24:	681b      	ldr	r3, [r3, #0]
 8028d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	bf08      	it	eq
 8028d2c:	4613      	moveq	r3, r2
 8028d2e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8028d32:	4770      	bx	lr
 8028d34:	20001090 	.word	0x20001090
 8028d38:	200014c0 	.word	0x200014c0
 8028d3c:	00000000 	.word	0x00000000

08028d40 <__localeconv_l>:
 8028d40:	30f0      	adds	r0, #240	; 0xf0
 8028d42:	4770      	bx	lr
	...

08028d50 <_localeconv_r>:
 8028d50:	4a04      	ldr	r2, [pc, #16]	; (8028d64 <_localeconv_r+0x14>)
 8028d52:	4b05      	ldr	r3, [pc, #20]	; (8028d68 <_localeconv_r+0x18>)
 8028d54:	6812      	ldr	r2, [r2, #0]
 8028d56:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8028d58:	2800      	cmp	r0, #0
 8028d5a:	bf08      	it	eq
 8028d5c:	4618      	moveq	r0, r3
 8028d5e:	30f0      	adds	r0, #240	; 0xf0
 8028d60:	4770      	bx	lr
 8028d62:	bf00      	nop
 8028d64:	20001090 	.word	0x20001090
 8028d68:	200014c0 	.word	0x200014c0
 8028d6c:	00000000 	.word	0x00000000

08028d70 <_mbrtowc_r>:
 8028d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028d72:	b083      	sub	sp, #12
 8028d74:	4607      	mov	r7, r0
 8028d76:	9d08      	ldr	r5, [sp, #32]
 8028d78:	b192      	cbz	r2, 8028da0 <_mbrtowc_r+0x30>
 8028d7a:	4c11      	ldr	r4, [pc, #68]	; (8028dc0 <_mbrtowc_r+0x50>)
 8028d7c:	4e11      	ldr	r6, [pc, #68]	; (8028dc4 <_mbrtowc_r+0x54>)
 8028d7e:	6824      	ldr	r4, [r4, #0]
 8028d80:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8028d82:	9500      	str	r5, [sp, #0]
 8028d84:	2c00      	cmp	r4, #0
 8028d86:	bf08      	it	eq
 8028d88:	4634      	moveq	r4, r6
 8028d8a:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8028d8e:	47a0      	blx	r4
 8028d90:	1c43      	adds	r3, r0, #1
 8028d92:	d103      	bne.n	8028d9c <_mbrtowc_r+0x2c>
 8028d94:	2200      	movs	r2, #0
 8028d96:	238a      	movs	r3, #138	; 0x8a
 8028d98:	602a      	str	r2, [r5, #0]
 8028d9a:	603b      	str	r3, [r7, #0]
 8028d9c:	b003      	add	sp, #12
 8028d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028da0:	4b07      	ldr	r3, [pc, #28]	; (8028dc0 <_mbrtowc_r+0x50>)
 8028da2:	4908      	ldr	r1, [pc, #32]	; (8028dc4 <_mbrtowc_r+0x54>)
 8028da4:	681b      	ldr	r3, [r3, #0]
 8028da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028da8:	9500      	str	r5, [sp, #0]
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	bf08      	it	eq
 8028dae:	460b      	moveq	r3, r1
 8028db0:	4614      	mov	r4, r2
 8028db2:	4621      	mov	r1, r4
 8028db4:	4a04      	ldr	r2, [pc, #16]	; (8028dc8 <_mbrtowc_r+0x58>)
 8028db6:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 8028dba:	2301      	movs	r3, #1
 8028dbc:	47a0      	blx	r4
 8028dbe:	e7e7      	b.n	8028d90 <_mbrtowc_r+0x20>
 8028dc0:	20001090 	.word	0x20001090
 8028dc4:	200014c0 	.word	0x200014c0
 8028dc8:	0802f9b0 	.word	0x0802f9b0
 8028dcc:	00000000 	.word	0x00000000

08028dd0 <__ascii_mbtowc>:
 8028dd0:	b082      	sub	sp, #8
 8028dd2:	b149      	cbz	r1, 8028de8 <__ascii_mbtowc+0x18>
 8028dd4:	b15a      	cbz	r2, 8028dee <__ascii_mbtowc+0x1e>
 8028dd6:	b16b      	cbz	r3, 8028df4 <__ascii_mbtowc+0x24>
 8028dd8:	7813      	ldrb	r3, [r2, #0]
 8028dda:	600b      	str	r3, [r1, #0]
 8028ddc:	7812      	ldrb	r2, [r2, #0]
 8028dde:	1c10      	adds	r0, r2, #0
 8028de0:	bf18      	it	ne
 8028de2:	2001      	movne	r0, #1
 8028de4:	b002      	add	sp, #8
 8028de6:	4770      	bx	lr
 8028de8:	a901      	add	r1, sp, #4
 8028dea:	2a00      	cmp	r2, #0
 8028dec:	d1f3      	bne.n	8028dd6 <__ascii_mbtowc+0x6>
 8028dee:	4610      	mov	r0, r2
 8028df0:	b002      	add	sp, #8
 8028df2:	4770      	bx	lr
 8028df4:	f06f 0001 	mvn.w	r0, #1
 8028df8:	e7f4      	b.n	8028de4 <__ascii_mbtowc+0x14>
 8028dfa:	bf00      	nop
 8028dfc:	0000      	movs	r0, r0
	...

08028e00 <__sccl>:
 8028e00:	b470      	push	{r4, r5, r6}
 8028e02:	780c      	ldrb	r4, [r1, #0]
 8028e04:	2c5e      	cmp	r4, #94	; 0x5e
 8028e06:	d02f      	beq.n	8028e68 <__sccl+0x68>
 8028e08:	2200      	movs	r2, #0
 8028e0a:	1c4d      	adds	r5, r1, #1
 8028e0c:	4616      	mov	r6, r2
 8028e0e:	1e43      	subs	r3, r0, #1
 8028e10:	f100 01ff 	add.w	r1, r0, #255	; 0xff
 8028e14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8028e18:	428b      	cmp	r3, r1
 8028e1a:	d1fb      	bne.n	8028e14 <__sccl+0x14>
 8028e1c:	b174      	cbz	r4, 8028e3c <__sccl+0x3c>
 8028e1e:	f086 0201 	eor.w	r2, r6, #1
 8028e22:	5502      	strb	r2, [r0, r4]
 8028e24:	1c6e      	adds	r6, r5, #1
 8028e26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8028e2a:	2b2d      	cmp	r3, #45	; 0x2d
 8028e2c:	4631      	mov	r1, r6
 8028e2e:	d00d      	beq.n	8028e4c <__sccl+0x4c>
 8028e30:	2b5d      	cmp	r3, #93	; 0x5d
 8028e32:	d004      	beq.n	8028e3e <__sccl+0x3e>
 8028e34:	b133      	cbz	r3, 8028e44 <__sccl+0x44>
 8028e36:	461c      	mov	r4, r3
 8028e38:	4635      	mov	r5, r6
 8028e3a:	e7f2      	b.n	8028e22 <__sccl+0x22>
 8028e3c:	1e69      	subs	r1, r5, #1
 8028e3e:	4608      	mov	r0, r1
 8028e40:	bc70      	pop	{r4, r5, r6}
 8028e42:	4770      	bx	lr
 8028e44:	4629      	mov	r1, r5
 8028e46:	4608      	mov	r0, r1
 8028e48:	bc70      	pop	{r4, r5, r6}
 8028e4a:	4770      	bx	lr
 8028e4c:	7869      	ldrb	r1, [r5, #1]
 8028e4e:	295d      	cmp	r1, #93	; 0x5d
 8028e50:	d0f1      	beq.n	8028e36 <__sccl+0x36>
 8028e52:	428c      	cmp	r4, r1
 8028e54:	dcef      	bgt.n	8028e36 <__sccl+0x36>
 8028e56:	3502      	adds	r5, #2
 8028e58:	1903      	adds	r3, r0, r4
 8028e5a:	3401      	adds	r4, #1
 8028e5c:	42a1      	cmp	r1, r4
 8028e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8028e62:	dcfa      	bgt.n	8028e5a <__sccl+0x5a>
 8028e64:	3602      	adds	r6, #2
 8028e66:	e7de      	b.n	8028e26 <__sccl+0x26>
 8028e68:	2201      	movs	r2, #1
 8028e6a:	784c      	ldrb	r4, [r1, #1]
 8028e6c:	4616      	mov	r6, r2
 8028e6e:	1c8d      	adds	r5, r1, #2
 8028e70:	e7cd      	b.n	8028e0e <__sccl+0xe>
 8028e72:	bf00      	nop
	...

08028e80 <sprintf>:
 8028e80:	b40e      	push	{r1, r2, r3}
 8028e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e84:	b09c      	sub	sp, #112	; 0x70
 8028e86:	ab21      	add	r3, sp, #132	; 0x84
 8028e88:	490f      	ldr	r1, [pc, #60]	; (8028ec8 <sprintf+0x48>)
 8028e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e8e:	9301      	str	r3, [sp, #4]
 8028e90:	4605      	mov	r5, r0
 8028e92:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8028e96:	6808      	ldr	r0, [r1, #0]
 8028e98:	9502      	str	r5, [sp, #8]
 8028e9a:	f44f 7702 	mov.w	r7, #520	; 0x208
 8028e9e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8028ea2:	a902      	add	r1, sp, #8
 8028ea4:	9506      	str	r5, [sp, #24]
 8028ea6:	f8ad 7014 	strh.w	r7, [sp, #20]
 8028eaa:	9404      	str	r4, [sp, #16]
 8028eac:	9407      	str	r4, [sp, #28]
 8028eae:	f8ad 6016 	strh.w	r6, [sp, #22]
 8028eb2:	f001 fbc5 	bl	802a640 <_svfprintf_r>
 8028eb6:	9b02      	ldr	r3, [sp, #8]
 8028eb8:	2200      	movs	r2, #0
 8028eba:	701a      	strb	r2, [r3, #0]
 8028ebc:	b01c      	add	sp, #112	; 0x70
 8028ebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028ec2:	b003      	add	sp, #12
 8028ec4:	4770      	bx	lr
 8028ec6:	bf00      	nop
 8028ec8:	20001090 	.word	0x20001090
 8028ecc:	00000000 	.word	0x00000000

08028ed0 <sulp>:
 8028ed0:	b570      	push	{r4, r5, r6, lr}
 8028ed2:	4604      	mov	r4, r0
 8028ed4:	460d      	mov	r5, r1
 8028ed6:	ec45 4b10 	vmov	d0, r4, r5
 8028eda:	4616      	mov	r6, r2
 8028edc:	f005 f8e0 	bl	802e0a0 <__ulp>
 8028ee0:	ec51 0b10 	vmov	r0, r1, d0
 8028ee4:	b17e      	cbz	r6, 8028f06 <sulp+0x36>
 8028ee6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8028eea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8028eee:	2b00      	cmp	r3, #0
 8028ef0:	dd09      	ble.n	8028f06 <sulp+0x36>
 8028ef2:	051b      	lsls	r3, r3, #20
 8028ef4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8028ef8:	2400      	movs	r4, #0
 8028efa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8028efe:	4622      	mov	r2, r4
 8028f00:	462b      	mov	r3, r5
 8028f02:	f7e3 fad5 	bl	800c4b0 <__aeabi_dmul>
 8028f06:	bd70      	pop	{r4, r5, r6, pc}
	...

08028f10 <_strtod_l>:
 8028f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f14:	b0a3      	sub	sp, #140	; 0x8c
 8028f16:	461c      	mov	r4, r3
 8028f18:	9009      	str	r0, [sp, #36]	; 0x24
 8028f1a:	2300      	movs	r3, #0
 8028f1c:	4620      	mov	r0, r4
 8028f1e:	460e      	mov	r6, r1
 8028f20:	9205      	str	r2, [sp, #20]
 8028f22:	931e      	str	r3, [sp, #120]	; 0x78
 8028f24:	f7ff ff0c 	bl	8028d40 <__localeconv_l>
 8028f28:	2300      	movs	r3, #0
 8028f2a:	2200      	movs	r2, #0
 8028f2c:	4683      	mov	fp, r0
 8028f2e:	6800      	ldr	r0, [r0, #0]
 8028f30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028f34:	f7e3 fffc 	bl	800cf30 <strlen>
 8028f38:	961d      	str	r6, [sp, #116]	; 0x74
 8028f3a:	4682      	mov	sl, r0
 8028f3c:	4633      	mov	r3, r6
 8028f3e:	461a      	mov	r2, r3
 8028f40:	f813 7b01 	ldrb.w	r7, [r3], #1
 8028f44:	2f2d      	cmp	r7, #45	; 0x2d
 8028f46:	f200 80b0 	bhi.w	80290aa <_strtod_l+0x19a>
 8028f4a:	e8df f007 	tbb	[pc, r7]
 8028f4e:	ae17      	.short	0xae17
 8028f50:	aeaeaeae 	.word	0xaeaeaeae
 8028f54:	81aeaeae 	.word	0x81aeaeae
 8028f58:	81818181 	.word	0x81818181
 8028f5c:	aeaeaeae 	.word	0xaeaeaeae
 8028f60:	aeaeaeae 	.word	0xaeaeaeae
 8028f64:	aeaeaeae 	.word	0xaeaeaeae
 8028f68:	aeaeaeae 	.word	0xaeaeaeae
 8028f6c:	ae81aeae 	.word	0xae81aeae
 8028f70:	aeaeaeae 	.word	0xaeaeaeae
 8028f74:	aeaeaeae 	.word	0xaeaeaeae
 8028f78:	7eae2bae 	.word	0x7eae2bae
 8028f7c:	9b05      	ldr	r3, [sp, #20]
 8028f7e:	f04f 0a00 	mov.w	sl, #0
 8028f82:	f04f 0b00 	mov.w	fp, #0
 8028f86:	b143      	cbz	r3, 8028f9a <_strtod_l+0x8a>
 8028f88:	2300      	movs	r3, #0
 8028f8a:	9308      	str	r3, [sp, #32]
 8028f8c:	9b05      	ldr	r3, [sp, #20]
 8028f8e:	601e      	str	r6, [r3, #0]
 8028f90:	9b08      	ldr	r3, [sp, #32]
 8028f92:	b113      	cbz	r3, 8028f9a <_strtod_l+0x8a>
 8028f94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8028f98:	469b      	mov	fp, r3
 8028f9a:	ec4b ab10 	vmov	d0, sl, fp
 8028f9e:	b023      	add	sp, #140	; 0x8c
 8028fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028fa4:	2300      	movs	r3, #0
 8028fa6:	9308      	str	r3, [sp, #32]
 8028fa8:	f102 0901 	add.w	r9, r2, #1
 8028fac:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 8028fb0:	7857      	ldrb	r7, [r2, #1]
 8028fb2:	2f00      	cmp	r7, #0
 8028fb4:	d0e2      	beq.n	8028f7c <_strtod_l+0x6c>
 8028fb6:	2f30      	cmp	r7, #48	; 0x30
 8028fb8:	d07c      	beq.n	80290b4 <_strtod_l+0x1a4>
 8028fba:	2300      	movs	r3, #0
 8028fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8028fbe:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8028fc2:	2b09      	cmp	r3, #9
 8028fc4:	f200 8422 	bhi.w	802980c <_strtod_l+0x8fc>
 8028fc8:	f04f 0800 	mov.w	r8, #0
 8028fcc:	4645      	mov	r5, r8
 8028fce:	4644      	mov	r4, r8
 8028fd0:	4648      	mov	r0, r9
 8028fd2:	2c08      	cmp	r4, #8
 8028fd4:	bfc8      	it	gt
 8028fd6:	eb08 0888 	addgt.w	r8, r8, r8, lsl #2
 8028fda:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8028fde:	f100 0001 	add.w	r0, r0, #1
 8028fe2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8028fe6:	901d      	str	r0, [sp, #116]	; 0x74
 8028fe8:	bfc4      	itt	gt
 8028fea:	eb07 0748 	addgt.w	r7, r7, r8, lsl #1
 8028fee:	f1a7 0830 	subgt.w	r8, r7, #48	; 0x30
 8028ff2:	7807      	ldrb	r7, [r0, #0]
 8028ff4:	bfd8      	it	le
 8028ff6:	f1a3 0530 	suble.w	r5, r3, #48	; 0x30
 8028ffa:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8028ffe:	2b09      	cmp	r3, #9
 8029000:	f104 0401 	add.w	r4, r4, #1
 8029004:	d9e5      	bls.n	8028fd2 <_strtod_l+0xc2>
 8029006:	f8db 1000 	ldr.w	r1, [fp]
 802900a:	4652      	mov	r2, sl
 802900c:	f005 fb70 	bl	802e6f0 <strncmp>
 8029010:	4601      	mov	r1, r0
 8029012:	b1f8      	cbz	r0, 8029054 <_strtod_l+0x144>
 8029014:	2300      	movs	r3, #0
 8029016:	4619      	mov	r1, r3
 8029018:	469a      	mov	sl, r3
 802901a:	46a3      	mov	fp, r4
 802901c:	2f65      	cmp	r7, #101	; 0x65
 802901e:	f000 80b6 	beq.w	802918e <_strtod_l+0x27e>
 8029022:	2f45      	cmp	r7, #69	; 0x45
 8029024:	f000 80b3 	beq.w	802918e <_strtod_l+0x27e>
 8029028:	2200      	movs	r2, #0
 802902a:	2c00      	cmp	r4, #0
 802902c:	d156      	bne.n	80290dc <_strtod_l+0x1cc>
 802902e:	b91b      	cbnz	r3, 8029038 <_strtod_l+0x128>
 8029030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029032:	2b00      	cmp	r3, #0
 8029034:	f000 830b 	beq.w	802964e <_strtod_l+0x73e>
 8029038:	f04f 0a00 	mov.w	sl, #0
 802903c:	f04f 0b00 	mov.w	fp, #0
 8029040:	9b05      	ldr	r3, [sp, #20]
 8029042:	2b00      	cmp	r3, #0
 8029044:	d0a4      	beq.n	8028f90 <_strtod_l+0x80>
 8029046:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8029048:	e7a0      	b.n	8028f8c <_strtod_l+0x7c>
 802904a:	2301      	movs	r3, #1
 802904c:	9308      	str	r3, [sp, #32]
 802904e:	e7ab      	b.n	8028fa8 <_strtod_l+0x98>
 8029050:	931d      	str	r3, [sp, #116]	; 0x74
 8029052:	e774      	b.n	8028f3e <_strtod_l+0x2e>
 8029054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029056:	eb03 020a 	add.w	r2, r3, sl
 802905a:	921d      	str	r2, [sp, #116]	; 0x74
 802905c:	f813 700a 	ldrb.w	r7, [r3, sl]
 8029060:	46a3      	mov	fp, r4
 8029062:	4603      	mov	r3, r0
 8029064:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
 8029068:	2a09      	cmp	r2, #9
 802906a:	f200 82b1 	bhi.w	80295d0 <_strtod_l+0x6c0>
 802906e:	1c58      	adds	r0, r3, #1
 8029070:	4696      	mov	lr, r2
 8029072:	2a00      	cmp	r2, #0
 8029074:	f000 86c9 	beq.w	8029e0a <_strtod_l+0xefa>
 8029078:	2801      	cmp	r0, #1
 802907a:	4401      	add	r1, r0
 802907c:	bf18      	it	ne
 802907e:	191b      	addne	r3, r3, r4
 8029080:	d106      	bne.n	8029090 <_strtod_l+0x180>
 8029082:	f000 beb0 	b.w	8029de6 <_strtod_l+0xed6>
 8029086:	0045      	lsls	r5, r0, #1
 8029088:	429f      	cmp	r7, r3
 802908a:	f000 84cc 	beq.w	8029a26 <_strtod_l+0xb16>
 802908e:	463c      	mov	r4, r7
 8029090:	2c08      	cmp	r4, #8
 8029092:	f104 0701 	add.w	r7, r4, #1
 8029096:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 802909a:	ddf4      	ble.n	8029086 <_strtod_l+0x176>
 802909c:	2f10      	cmp	r7, #16
 802909e:	bfdc      	itt	le
 80290a0:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
 80290a4:	ea4f 0848 	movle.w	r8, r8, lsl #1
 80290a8:	e7ee      	b.n	8029088 <_strtod_l+0x178>
 80290aa:	2300      	movs	r3, #0
 80290ac:	2f30      	cmp	r7, #48	; 0x30
 80290ae:	4691      	mov	r9, r2
 80290b0:	9308      	str	r3, [sp, #32]
 80290b2:	d182      	bne.n	8028fba <_strtod_l+0xaa>
 80290b4:	f899 3001 	ldrb.w	r3, [r9, #1]
 80290b8:	2b58      	cmp	r3, #88	; 0x58
 80290ba:	f000 838a 	beq.w	80297d2 <_strtod_l+0x8c2>
 80290be:	2b78      	cmp	r3, #120	; 0x78
 80290c0:	f000 8387 	beq.w	80297d2 <_strtod_l+0x8c2>
 80290c4:	464b      	mov	r3, r9
 80290c6:	3301      	adds	r3, #1
 80290c8:	931d      	str	r3, [sp, #116]	; 0x74
 80290ca:	781f      	ldrb	r7, [r3, #0]
 80290cc:	2f30      	cmp	r7, #48	; 0x30
 80290ce:	d0fa      	beq.n	80290c6 <_strtod_l+0x1b6>
 80290d0:	4699      	mov	r9, r3
 80290d2:	2f00      	cmp	r7, #0
 80290d4:	d0b0      	beq.n	8029038 <_strtod_l+0x128>
 80290d6:	2301      	movs	r3, #1
 80290d8:	930c      	str	r3, [sp, #48]	; 0x30
 80290da:	e770      	b.n	8028fbe <_strtod_l+0xae>
 80290dc:	2c10      	cmp	r4, #16
 80290de:	eba2 0301 	sub.w	r3, r2, r1
 80290e2:	4628      	mov	r0, r5
 80290e4:	46a2      	mov	sl, r4
 80290e6:	930a      	str	r3, [sp, #40]	; 0x28
 80290e8:	bfa8      	it	ge
 80290ea:	f04f 0a10 	movge.w	sl, #16
 80290ee:	f7e3 f969 	bl	800c3c4 <__aeabi_ui2d>
 80290f2:	f1bb 0f00 	cmp.w	fp, #0
 80290f6:	bf08      	it	eq
 80290f8:	46a3      	moveq	fp, r4
 80290fa:	f1ba 0f09 	cmp.w	sl, #9
 80290fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029102:	dd13      	ble.n	802912c <_strtod_l+0x21c>
 8029104:	4b49      	ldr	r3, [pc, #292]	; (802922c <_strtod_l+0x31c>)
 8029106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802910a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802910e:	f7e3 f9cf 	bl	800c4b0 <__aeabi_dmul>
 8029112:	4606      	mov	r6, r0
 8029114:	4640      	mov	r0, r8
 8029116:	460f      	mov	r7, r1
 8029118:	f7e3 f954 	bl	800c3c4 <__aeabi_ui2d>
 802911c:	4602      	mov	r2, r0
 802911e:	460b      	mov	r3, r1
 8029120:	4630      	mov	r0, r6
 8029122:	4639      	mov	r1, r7
 8029124:	f7e3 f812 	bl	800c14c <__adddf3>
 8029128:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802912c:	2c0f      	cmp	r4, #15
 802912e:	f300 8085 	bgt.w	802923c <_strtod_l+0x32c>
 8029132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029134:	2b00      	cmp	r3, #0
 8029136:	d027      	beq.n	8029188 <_strtod_l+0x278>
 8029138:	f340 8524 	ble.w	8029b84 <_strtod_l+0xc74>
 802913c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802913e:	2b16      	cmp	r3, #22
 8029140:	f300 848a 	bgt.w	8029a58 <_strtod_l+0xb48>
 8029144:	4939      	ldr	r1, [pc, #228]	; (802922c <_strtod_l+0x31c>)
 8029146:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802914a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802914e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8029152:	f7e3 f9ad 	bl	800c4b0 <__aeabi_dmul>
 8029156:	4682      	mov	sl, r0
 8029158:	468b      	mov	fp, r1
 802915a:	e771      	b.n	8029040 <_strtod_l+0x130>
 802915c:	a81d      	add	r0, sp, #116	; 0x74
 802915e:	4934      	ldr	r1, [pc, #208]	; (8029230 <_strtod_l+0x320>)
 8029160:	f004 f8de 	bl	802d320 <__match>
 8029164:	2800      	cmp	r0, #0
 8029166:	f43f af09 	beq.w	8028f7c <_strtod_l+0x6c>
 802916a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802916c:	4931      	ldr	r1, [pc, #196]	; (8029234 <_strtod_l+0x324>)
 802916e:	3b01      	subs	r3, #1
 8029170:	a81d      	add	r0, sp, #116	; 0x74
 8029172:	931d      	str	r3, [sp, #116]	; 0x74
 8029174:	f004 f8d4 	bl	802d320 <__match>
 8029178:	b910      	cbnz	r0, 8029180 <_strtod_l+0x270>
 802917a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802917c:	3301      	adds	r3, #1
 802917e:	931d      	str	r3, [sp, #116]	; 0x74
 8029180:	4b2d      	ldr	r3, [pc, #180]	; (8029238 <_strtod_l+0x328>)
 8029182:	9307      	str	r3, [sp, #28]
 8029184:	2300      	movs	r3, #0
 8029186:	9306      	str	r3, [sp, #24]
 8029188:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 802918c:	e758      	b.n	8029040 <_strtod_l+0x130>
 802918e:	2c00      	cmp	r4, #0
 8029190:	f000 8211 	beq.w	80295b6 <_strtod_l+0x6a6>
 8029194:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8029196:	1c72      	adds	r2, r6, #1
 8029198:	921d      	str	r2, [sp, #116]	; 0x74
 802919a:	7877      	ldrb	r7, [r6, #1]
 802919c:	2f2b      	cmp	r7, #43	; 0x2b
 802919e:	f000 8315 	beq.w	80297cc <_strtod_l+0x8bc>
 80291a2:	2f2d      	cmp	r7, #45	; 0x2d
 80291a4:	f000 824b 	beq.w	802963e <_strtod_l+0x72e>
 80291a8:	f04f 0c00 	mov.w	ip, #0
 80291ac:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
 80291b0:	2a09      	cmp	r2, #9
 80291b2:	f200 8308 	bhi.w	80297c6 <_strtod_l+0x8b6>
 80291b6:	2f30      	cmp	r7, #48	; 0x30
 80291b8:	d105      	bne.n	80291c6 <_strtod_l+0x2b6>
 80291ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80291bc:	3201      	adds	r2, #1
 80291be:	921d      	str	r2, [sp, #116]	; 0x74
 80291c0:	7817      	ldrb	r7, [r2, #0]
 80291c2:	2f30      	cmp	r7, #48	; 0x30
 80291c4:	d0fa      	beq.n	80291bc <_strtod_l+0x2ac>
 80291c6:	f1a7 0231 	sub.w	r2, r7, #49	; 0x31
 80291ca:	2a08      	cmp	r2, #8
 80291cc:	f63f af2c 	bhi.w	8029028 <_strtod_l+0x118>
 80291d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80291d2:	920d      	str	r2, [sp, #52]	; 0x34
 80291d4:	1c50      	adds	r0, r2, #1
 80291d6:	3f30      	subs	r7, #48	; 0x30
 80291d8:	901d      	str	r0, [sp, #116]	; 0x74
 80291da:	970a      	str	r7, [sp, #40]	; 0x28
 80291dc:	7857      	ldrb	r7, [r2, #1]
 80291de:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
 80291e2:	f1be 0f09 	cmp.w	lr, #9
 80291e6:	d80f      	bhi.n	8029208 <_strtod_l+0x2f8>
 80291e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80291ea:	3001      	adds	r0, #1
 80291ec:	901d      	str	r0, [sp, #116]	; 0x74
 80291ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80291f2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80291f6:	7807      	ldrb	r7, [r0, #0]
 80291f8:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
 80291fc:	f1be 0f09 	cmp.w	lr, #9
 8029200:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 8029204:	d9f1      	bls.n	80291ea <_strtod_l+0x2da>
 8029206:	920a      	str	r2, [sp, #40]	; 0x28
 8029208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802920a:	1a80      	subs	r0, r0, r2
 802920c:	2808      	cmp	r0, #8
 802920e:	f300 841b 	bgt.w	8029a48 <_strtod_l+0xb38>
 8029212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029214:	f644 601f 	movw	r0, #19999	; 0x4e1f
 8029218:	4282      	cmp	r2, r0
 802921a:	bfa8      	it	ge
 802921c:	4602      	movge	r2, r0
 802921e:	f1bc 0f00 	cmp.w	ip, #0
 8029222:	f43f af02 	beq.w	802902a <_strtod_l+0x11a>
 8029226:	4252      	negs	r2, r2
 8029228:	e6ff      	b.n	802902a <_strtod_l+0x11a>
 802922a:	bf00      	nop
 802922c:	08031000 	.word	0x08031000
 8029230:	08030cc0 	.word	0x08030cc0
 8029234:	08030cc4 	.word	0x08030cc4
 8029238:	7ff00000 	.word	0x7ff00000
 802923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802923e:	eba4 0a0a 	sub.w	sl, r4, sl
 8029242:	449a      	add	sl, r3
 8029244:	f1ba 0f00 	cmp.w	sl, #0
 8029248:	f340 83a4 	ble.w	8029994 <_strtod_l+0xa84>
 802924c:	f01a 030f 	ands.w	r3, sl, #15
 8029250:	d00a      	beq.n	8029268 <_strtod_l+0x358>
 8029252:	49b9      	ldr	r1, [pc, #740]	; (8029538 <_strtod_l+0x628>)
 8029254:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8029258:	e9d1 0100 	ldrd	r0, r1, [r1]
 802925c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8029260:	f7e3 f926 	bl	800c4b0 <__aeabi_dmul>
 8029264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029268:	f03a 060f 	bics.w	r6, sl, #15
 802926c:	f040 8246 	bne.w	80296fc <_strtod_l+0x7ec>
 8029270:	2300      	movs	r3, #0
 8029272:	930c      	str	r3, [sp, #48]	; 0x30
 8029274:	4623      	mov	r3, r4
 8029276:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8029278:	9500      	str	r5, [sp, #0]
 802927a:	465a      	mov	r2, fp
 802927c:	4649      	mov	r1, r9
 802927e:	4620      	mov	r0, r4
 8029280:	f004 fc76 	bl	802db70 <__s2b>
 8029284:	9013      	str	r0, [sp, #76]	; 0x4c
 8029286:	2800      	cmp	r0, #0
 8029288:	f000 8317 	beq.w	80298ba <_strtod_l+0x9aa>
 802928c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802928e:	2100      	movs	r1, #0
 8029290:	2a00      	cmp	r2, #0
 8029292:	f1c2 0300 	rsb	r3, r2, #0
 8029296:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 802929a:	bfa8      	it	ge
 802929c:	460b      	movge	r3, r1
 802929e:	930e      	str	r3, [sp, #56]	; 0x38
 80292a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80292a4:	930d      	str	r3, [sp, #52]	; 0x34
 80292a6:	460e      	mov	r6, r1
 80292a8:	468b      	mov	fp, r1
 80292aa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80292ac:	4620      	mov	r0, r4
 80292ae:	6879      	ldr	r1, [r7, #4]
 80292b0:	f004 fbe6 	bl	802da80 <_Balloc>
 80292b4:	4605      	mov	r5, r0
 80292b6:	2800      	cmp	r0, #0
 80292b8:	f000 830d 	beq.w	80298d6 <_strtod_l+0x9c6>
 80292bc:	693a      	ldr	r2, [r7, #16]
 80292be:	463b      	mov	r3, r7
 80292c0:	3202      	adds	r2, #2
 80292c2:	f103 010c 	add.w	r1, r3, #12
 80292c6:	464f      	mov	r7, r9
 80292c8:	46d0      	mov	r8, sl
 80292ca:	0092      	lsls	r2, r2, #2
 80292cc:	300c      	adds	r0, #12
 80292ce:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
 80292d2:	f7e3 fc1d 	bl	800cb10 <memcpy>
 80292d6:	ec48 7b10 	vmov	d0, r7, r8
 80292da:	aa20      	add	r2, sp, #128	; 0x80
 80292dc:	a91f      	add	r1, sp, #124	; 0x7c
 80292de:	4620      	mov	r0, r4
 80292e0:	f004 ff76 	bl	802e1d0 <__d2b>
 80292e4:	901e      	str	r0, [sp, #120]	; 0x78
 80292e6:	2800      	cmp	r0, #0
 80292e8:	f000 845e 	beq.w	8029ba8 <_strtod_l+0xc98>
 80292ec:	2101      	movs	r1, #1
 80292ee:	4620      	mov	r0, r4
 80292f0:	f004 fcde 	bl	802dcb0 <__i2b>
 80292f4:	4606      	mov	r6, r0
 80292f6:	2800      	cmp	r0, #0
 80292f8:	f000 82ed 	beq.w	80298d6 <_strtod_l+0x9c6>
 80292fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80292fe:	2a00      	cmp	r2, #0
 8029300:	f2c0 8161 	blt.w	80295c6 <_strtod_l+0x6b6>
 8029304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029306:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8029308:	eb03 0802 	add.w	r8, r3, r2
 802930c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802930e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029310:	498a      	ldr	r1, [pc, #552]	; (802953c <_strtod_l+0x62c>)
 8029312:	1a12      	subs	r2, r2, r0
 8029314:	441a      	add	r2, r3
 8029316:	3a01      	subs	r2, #1
 8029318:	428a      	cmp	r2, r1
 802931a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802931e:	f280 80fe 	bge.w	802951e <_strtod_l+0x60e>
 8029322:	1a89      	subs	r1, r1, r2
 8029324:	291f      	cmp	r1, #31
 8029326:	eba3 0301 	sub.w	r3, r3, r1
 802932a:	f300 8154 	bgt.w	80295d6 <_strtod_l+0x6c6>
 802932e:	2201      	movs	r2, #1
 8029330:	408a      	lsls	r2, r1
 8029332:	9212      	str	r2, [sp, #72]	; 0x48
 8029334:	2200      	movs	r2, #0
 8029336:	9210      	str	r2, [sp, #64]	; 0x40
 8029338:	441f      	add	r7, r3
 802933a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802933c:	4443      	add	r3, r8
 802933e:	4598      	cmp	r8, r3
 8029340:	4417      	add	r7, r2
 8029342:	4642      	mov	r2, r8
 8029344:	bfa8      	it	ge
 8029346:	461a      	movge	r2, r3
 8029348:	42ba      	cmp	r2, r7
 802934a:	bfa8      	it	ge
 802934c:	463a      	movge	r2, r7
 802934e:	2a00      	cmp	r2, #0
 8029350:	dd03      	ble.n	802935a <_strtod_l+0x44a>
 8029352:	1a9b      	subs	r3, r3, r2
 8029354:	1abf      	subs	r7, r7, r2
 8029356:	eba8 0802 	sub.w	r8, r8, r2
 802935a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802935c:	b1e2      	cbz	r2, 8029398 <_strtod_l+0x488>
 802935e:	4631      	mov	r1, r6
 8029360:	4620      	mov	r0, r4
 8029362:	9306      	str	r3, [sp, #24]
 8029364:	f004 fd4c 	bl	802de00 <__pow5mult>
 8029368:	9b06      	ldr	r3, [sp, #24]
 802936a:	4606      	mov	r6, r0
 802936c:	2800      	cmp	r0, #0
 802936e:	f000 82b2 	beq.w	80298d6 <_strtod_l+0x9c6>
 8029372:	4601      	mov	r1, r0
 8029374:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8029376:	9306      	str	r3, [sp, #24]
 8029378:	4620      	mov	r0, r4
 802937a:	f004 fca9 	bl	802dcd0 <__multiply>
 802937e:	9b06      	ldr	r3, [sp, #24]
 8029380:	2800      	cmp	r0, #0
 8029382:	f000 82a8 	beq.w	80298d6 <_strtod_l+0x9c6>
 8029386:	900f      	str	r0, [sp, #60]	; 0x3c
 8029388:	991e      	ldr	r1, [sp, #120]	; 0x78
 802938a:	9306      	str	r3, [sp, #24]
 802938c:	4620      	mov	r0, r4
 802938e:	f004 fb9f 	bl	802dad0 <_Bfree>
 8029392:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029394:	9b06      	ldr	r3, [sp, #24]
 8029396:	921e      	str	r2, [sp, #120]	; 0x78
 8029398:	2b00      	cmp	r3, #0
 802939a:	dd08      	ble.n	80293ae <_strtod_l+0x49e>
 802939c:	461a      	mov	r2, r3
 802939e:	991e      	ldr	r1, [sp, #120]	; 0x78
 80293a0:	4620      	mov	r0, r4
 80293a2:	f004 fd7d 	bl	802dea0 <__lshift>
 80293a6:	901e      	str	r0, [sp, #120]	; 0x78
 80293a8:	2800      	cmp	r0, #0
 80293aa:	f000 83fd 	beq.w	8029ba8 <_strtod_l+0xc98>
 80293ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80293b0:	b143      	cbz	r3, 80293c4 <_strtod_l+0x4b4>
 80293b2:	4629      	mov	r1, r5
 80293b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80293b6:	4620      	mov	r0, r4
 80293b8:	f004 fd22 	bl	802de00 <__pow5mult>
 80293bc:	4605      	mov	r5, r0
 80293be:	2800      	cmp	r0, #0
 80293c0:	f000 8289 	beq.w	80298d6 <_strtod_l+0x9c6>
 80293c4:	2f00      	cmp	r7, #0
 80293c6:	dd08      	ble.n	80293da <_strtod_l+0x4ca>
 80293c8:	4629      	mov	r1, r5
 80293ca:	463a      	mov	r2, r7
 80293cc:	4620      	mov	r0, r4
 80293ce:	f004 fd67 	bl	802dea0 <__lshift>
 80293d2:	4605      	mov	r5, r0
 80293d4:	2800      	cmp	r0, #0
 80293d6:	f000 827e 	beq.w	80298d6 <_strtod_l+0x9c6>
 80293da:	f1b8 0f00 	cmp.w	r8, #0
 80293de:	dd08      	ble.n	80293f2 <_strtod_l+0x4e2>
 80293e0:	4631      	mov	r1, r6
 80293e2:	4642      	mov	r2, r8
 80293e4:	4620      	mov	r0, r4
 80293e6:	f004 fd5b 	bl	802dea0 <__lshift>
 80293ea:	4606      	mov	r6, r0
 80293ec:	2800      	cmp	r0, #0
 80293ee:	f000 8272 	beq.w	80298d6 <_strtod_l+0x9c6>
 80293f2:	462a      	mov	r2, r5
 80293f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80293f6:	4620      	mov	r0, r4
 80293f8:	f004 fdca 	bl	802df90 <__mdiff>
 80293fc:	4683      	mov	fp, r0
 80293fe:	2800      	cmp	r0, #0
 8029400:	f000 8269 	beq.w	80298d6 <_strtod_l+0x9c6>
 8029404:	2300      	movs	r3, #0
 8029406:	68c2      	ldr	r2, [r0, #12]
 8029408:	60c3      	str	r3, [r0, #12]
 802940a:	4631      	mov	r1, r6
 802940c:	920f      	str	r2, [sp, #60]	; 0x3c
 802940e:	f004 fd9f 	bl	802df50 <__mcmp>
 8029412:	2800      	cmp	r0, #0
 8029414:	f2c0 8412 	blt.w	8029c3c <_strtod_l+0xd2c>
 8029418:	f000 83cb 	beq.w	8029bb2 <_strtod_l+0xca2>
 802941c:	4631      	mov	r1, r6
 802941e:	4658      	mov	r0, fp
 8029420:	f004 ff36 	bl	802e290 <__ratio>
 8029424:	ec58 7b10 	vmov	r7, r8, d0
 8029428:	2200      	movs	r2, #0
 802942a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802942e:	ee10 0a10 	vmov	r0, s0
 8029432:	4641      	mov	r1, r8
 8029434:	f7e3 fabe 	bl	800c9b4 <__aeabi_dcmple>
 8029438:	2800      	cmp	r0, #0
 802943a:	f000 8087 	beq.w	802954c <_strtod_l+0x63c>
 802943e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029440:	2b00      	cmp	r3, #0
 8029442:	f000 80d0 	beq.w	80295e6 <_strtod_l+0x6d6>
 8029446:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8029528 <_strtod_l+0x618>
 802944a:	4b3d      	ldr	r3, [pc, #244]	; (8029540 <_strtod_l+0x630>)
 802944c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8029450:	2200      	movs	r2, #0
 8029452:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029456:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802945a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8029548 <_strtod_l+0x638>
 802945e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8029460:	4b38      	ldr	r3, [pc, #224]	; (8029544 <_strtod_l+0x634>)
 8029462:	ea02 0708 	and.w	r7, r2, r8
 8029466:	429f      	cmp	r7, r3
 8029468:	f000 81fe 	beq.w	8029868 <_strtod_l+0x958>
 802946c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802946e:	b353      	cbz	r3, 80294c6 <_strtod_l+0x5b6>
 8029470:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
 8029474:	d827      	bhi.n	80294c6 <_strtod_l+0x5b6>
 8029476:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 802947a:	a32d      	add	r3, pc, #180	; (adr r3, 8029530 <_strtod_l+0x620>)
 802947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029480:	4640      	mov	r0, r8
 8029482:	4649      	mov	r1, r9
 8029484:	f7e3 fa96 	bl	800c9b4 <__aeabi_dcmple>
 8029488:	b1c0      	cbz	r0, 80294bc <_strtod_l+0x5ac>
 802948a:	4640      	mov	r0, r8
 802948c:	4649      	mov	r1, r9
 802948e:	f7e3 fe0f 	bl	800d0b0 <__aeabi_d2uiz>
 8029492:	2800      	cmp	r0, #0
 8029494:	f000 8336 	beq.w	8029b04 <_strtod_l+0xbf4>
 8029498:	f7e2 ff94 	bl	800c3c4 <__aeabi_ui2d>
 802949c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80294a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80294a2:	2b00      	cmp	r3, #0
 80294a4:	f040 8329 	bne.w	8029afa <_strtod_l+0xbea>
 80294a8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 80294ac:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80294b0:	9116      	str	r1, [sp, #88]	; 0x58
 80294b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80294b4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80294b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80294bc:	9b07      	ldr	r3, [sp, #28]
 80294be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80294c2:	1bdb      	subs	r3, r3, r7
 80294c4:	9307      	str	r3, [sp, #28]
 80294c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80294ca:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80294ce:	f004 fde7 	bl	802e0a0 <__ulp>
 80294d2:	4640      	mov	r0, r8
 80294d4:	ec53 2b10 	vmov	r2, r3, d0
 80294d8:	4649      	mov	r1, r9
 80294da:	f7e2 ffe9 	bl	800c4b0 <__aeabi_dmul>
 80294de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80294e2:	f7e2 fe33 	bl	800c14c <__adddf3>
 80294e6:	4681      	mov	r9, r0
 80294e8:	468a      	mov	sl, r1
 80294ea:	4688      	mov	r8, r1
 80294ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80294ee:	b92b      	cbnz	r3, 80294fc <_strtod_l+0x5ec>
 80294f0:	4b15      	ldr	r3, [pc, #84]	; (8029548 <_strtod_l+0x638>)
 80294f2:	ea08 0303 	and.w	r3, r8, r3
 80294f6:	429f      	cmp	r7, r3
 80294f8:	f000 8212 	beq.w	8029920 <_strtod_l+0xa10>
 80294fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80294fe:	4620      	mov	r0, r4
 8029500:	f004 fae6 	bl	802dad0 <_Bfree>
 8029504:	4629      	mov	r1, r5
 8029506:	4620      	mov	r0, r4
 8029508:	f004 fae2 	bl	802dad0 <_Bfree>
 802950c:	4631      	mov	r1, r6
 802950e:	4620      	mov	r0, r4
 8029510:	f004 fade 	bl	802dad0 <_Bfree>
 8029514:	4659      	mov	r1, fp
 8029516:	4620      	mov	r0, r4
 8029518:	f004 fada 	bl	802dad0 <_Bfree>
 802951c:	e6c5      	b.n	80292aa <_strtod_l+0x39a>
 802951e:	2200      	movs	r2, #0
 8029520:	9210      	str	r2, [sp, #64]	; 0x40
 8029522:	2201      	movs	r2, #1
 8029524:	9212      	str	r2, [sp, #72]	; 0x48
 8029526:	e707      	b.n	8029338 <_strtod_l+0x428>
 8029528:	00000000 	.word	0x00000000
 802952c:	3ff00000 	.word	0x3ff00000
 8029530:	ffc00000 	.word	0xffc00000
 8029534:	41dfffff 	.word	0x41dfffff
 8029538:	08031000 	.word	0x08031000
 802953c:	fffffc02 	.word	0xfffffc02
 8029540:	3ff00000 	.word	0x3ff00000
 8029544:	7fe00000 	.word	0x7fe00000
 8029548:	7ff00000 	.word	0x7ff00000
 802954c:	4bbc      	ldr	r3, [pc, #752]	; (8029840 <_strtod_l+0x930>)
 802954e:	4638      	mov	r0, r7
 8029550:	4641      	mov	r1, r8
 8029552:	2200      	movs	r2, #0
 8029554:	f7e2 ffac 	bl	800c4b0 <__aeabi_dmul>
 8029558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802955a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802955e:	2b00      	cmp	r3, #0
 8029560:	d168      	bne.n	8029634 <_strtod_l+0x724>
 8029562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8029566:	9014      	str	r0, [sp, #80]	; 0x50
 8029568:	9315      	str	r3, [sp, #84]	; 0x54
 802956a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 802956e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8029572:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029576:	e770      	b.n	802945a <_strtod_l+0x54a>
 8029578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802957a:	eb03 020a 	add.w	r2, r3, sl
 802957e:	921d      	str	r2, [sp, #116]	; 0x74
 8029580:	f813 700a 	ldrb.w	r7, [r3, sl]
 8029584:	2f30      	cmp	r7, #48	; 0x30
 8029586:	4623      	mov	r3, r4
 8029588:	d106      	bne.n	8029598 <_strtod_l+0x688>
 802958a:	3201      	adds	r2, #1
 802958c:	921d      	str	r2, [sp, #116]	; 0x74
 802958e:	7817      	ldrb	r7, [r2, #0]
 8029590:	2f30      	cmp	r7, #48	; 0x30
 8029592:	f103 0301 	add.w	r3, r3, #1
 8029596:	d0f8      	beq.n	802958a <_strtod_l+0x67a>
 8029598:	f1a7 0231 	sub.w	r2, r7, #49	; 0x31
 802959c:	2a08      	cmp	r2, #8
 802959e:	f240 82e1 	bls.w	8029b64 <_strtod_l+0xc54>
 80295a2:	f04f 0b00 	mov.w	fp, #0
 80295a6:	2f65      	cmp	r7, #101	; 0x65
 80295a8:	4659      	mov	r1, fp
 80295aa:	46d8      	mov	r8, fp
 80295ac:	465d      	mov	r5, fp
 80295ae:	f04f 0a01 	mov.w	sl, #1
 80295b2:	f47f ad36 	bne.w	8029022 <_strtod_l+0x112>
 80295b6:	2b00      	cmp	r3, #0
 80295b8:	d147      	bne.n	802964a <_strtod_l+0x73a>
 80295ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80295bc:	2a00      	cmp	r2, #0
 80295be:	f43f acdd 	beq.w	8028f7c <_strtod_l+0x6c>
 80295c2:	461c      	mov	r4, r3
 80295c4:	e5e6      	b.n	8029194 <_strtod_l+0x284>
 80295c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80295c8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80295cc:	1a9f      	subs	r7, r3, r2
 80295ce:	e69d      	b.n	802930c <_strtod_l+0x3fc>
 80295d0:	f04f 0a01 	mov.w	sl, #1
 80295d4:	e522      	b.n	802901c <_strtod_l+0x10c>
 80295d6:	499b      	ldr	r1, [pc, #620]	; (8029844 <_strtod_l+0x934>)
 80295d8:	1a8a      	subs	r2, r1, r2
 80295da:	2101      	movs	r1, #1
 80295dc:	fa01 f202 	lsl.w	r2, r1, r2
 80295e0:	9210      	str	r2, [sp, #64]	; 0x40
 80295e2:	9112      	str	r1, [sp, #72]	; 0x48
 80295e4:	e6a8      	b.n	8029338 <_strtod_l+0x428>
 80295e6:	f1b9 0f00 	cmp.w	r9, #0
 80295ea:	f040 80cc 	bne.w	8029786 <_strtod_l+0x876>
 80295ee:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80295f2:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 80295f6:	2b00      	cmp	r3, #0
 80295f8:	f040 80cb 	bne.w	8029792 <_strtod_l+0x882>
 80295fc:	2200      	movs	r2, #0
 80295fe:	4b92      	ldr	r3, [pc, #584]	; (8029848 <_strtod_l+0x938>)
 8029600:	4638      	mov	r0, r7
 8029602:	4641      	mov	r1, r8
 8029604:	f7e3 f9cc 	bl	800c9a0 <__aeabi_dcmplt>
 8029608:	2800      	cmp	r0, #0
 802960a:	f040 8355 	bne.w	8029cb8 <_strtod_l+0xda8>
 802960e:	2200      	movs	r2, #0
 8029610:	4b8b      	ldr	r3, [pc, #556]	; (8029840 <_strtod_l+0x930>)
 8029612:	4638      	mov	r0, r7
 8029614:	4641      	mov	r1, r8
 8029616:	f7e2 ff4b 	bl	800c4b0 <__aeabi_dmul>
 802961a:	460a      	mov	r2, r1
 802961c:	4601      	mov	r1, r0
 802961e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8029622:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8029626:	901a      	str	r0, [sp, #104]	; 0x68
 8029628:	931b      	str	r3, [sp, #108]	; 0x6c
 802962a:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 802962e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029632:	e712      	b.n	802945a <_strtod_l+0x54a>
 8029634:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8029638:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 802963c:	e795      	b.n	802956a <_strtod_l+0x65a>
 802963e:	f04f 0c01 	mov.w	ip, #1
 8029642:	1cb2      	adds	r2, r6, #2
 8029644:	921d      	str	r2, [sp, #116]	; 0x74
 8029646:	78b7      	ldrb	r7, [r6, #2]
 8029648:	e5b0      	b.n	80291ac <_strtod_l+0x29c>
 802964a:	2400      	movs	r4, #0
 802964c:	e5a2      	b.n	8029194 <_strtod_l+0x284>
 802964e:	f1ba 0f00 	cmp.w	sl, #0
 8029652:	f47f ac93 	bne.w	8028f7c <_strtod_l+0x6c>
 8029656:	3f49      	subs	r7, #73	; 0x49
 8029658:	2f25      	cmp	r7, #37	; 0x25
 802965a:	f63f ac8f 	bhi.w	8028f7c <_strtod_l+0x6c>
 802965e:	a301      	add	r3, pc, #4	; (adr r3, 8029664 <_strtod_l+0x754>)
 8029660:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8029664:	0802915d 	.word	0x0802915d
 8029668:	08028f7d 	.word	0x08028f7d
 802966c:	08028f7d 	.word	0x08028f7d
 8029670:	08028f7d 	.word	0x08028f7d
 8029674:	08028f7d 	.word	0x08028f7d
 8029678:	080297a5 	.word	0x080297a5
 802967c:	08028f7d 	.word	0x08028f7d
 8029680:	08028f7d 	.word	0x08028f7d
 8029684:	08028f7d 	.word	0x08028f7d
 8029688:	08028f7d 	.word	0x08028f7d
 802968c:	08028f7d 	.word	0x08028f7d
 8029690:	08028f7d 	.word	0x08028f7d
 8029694:	08028f7d 	.word	0x08028f7d
 8029698:	08028f7d 	.word	0x08028f7d
 802969c:	08028f7d 	.word	0x08028f7d
 80296a0:	08028f7d 	.word	0x08028f7d
 80296a4:	08028f7d 	.word	0x08028f7d
 80296a8:	08028f7d 	.word	0x08028f7d
 80296ac:	08028f7d 	.word	0x08028f7d
 80296b0:	08028f7d 	.word	0x08028f7d
 80296b4:	08028f7d 	.word	0x08028f7d
 80296b8:	08028f7d 	.word	0x08028f7d
 80296bc:	08028f7d 	.word	0x08028f7d
 80296c0:	08028f7d 	.word	0x08028f7d
 80296c4:	08028f7d 	.word	0x08028f7d
 80296c8:	08028f7d 	.word	0x08028f7d
 80296cc:	08028f7d 	.word	0x08028f7d
 80296d0:	08028f7d 	.word	0x08028f7d
 80296d4:	08028f7d 	.word	0x08028f7d
 80296d8:	08028f7d 	.word	0x08028f7d
 80296dc:	08028f7d 	.word	0x08028f7d
 80296e0:	08028f7d 	.word	0x08028f7d
 80296e4:	0802915d 	.word	0x0802915d
 80296e8:	08028f7d 	.word	0x08028f7d
 80296ec:	08028f7d 	.word	0x08028f7d
 80296f0:	08028f7d 	.word	0x08028f7d
 80296f4:	08028f7d 	.word	0x08028f7d
 80296f8:	080297a5 	.word	0x080297a5
 80296fc:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8029700:	f300 80db 	bgt.w	80298ba <_strtod_l+0x9aa>
 8029704:	1136      	asrs	r6, r6, #4
 8029706:	2e01      	cmp	r6, #1
 8029708:	f8df a158 	ldr.w	sl, [pc, #344]	; 8029864 <_strtod_l+0x954>
 802970c:	f340 82f3 	ble.w	8029cf6 <_strtod_l+0xde6>
 8029710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029714:	2300      	movs	r3, #0
 8029716:	4657      	mov	r7, sl
 8029718:	4698      	mov	r8, r3
 802971a:	f016 0f01 	tst.w	r6, #1
 802971e:	f108 0801 	add.w	r8, r8, #1
 8029722:	ea4f 0666 	mov.w	r6, r6, asr #1
 8029726:	d004      	beq.n	8029732 <_strtod_l+0x822>
 8029728:	e9d7 2300 	ldrd	r2, r3, [r7]
 802972c:	f7e2 fec0 	bl	800c4b0 <__aeabi_dmul>
 8029730:	2301      	movs	r3, #1
 8029732:	2e01      	cmp	r6, #1
 8029734:	f107 0708 	add.w	r7, r7, #8
 8029738:	d1ef      	bne.n	802971a <_strtod_l+0x80a>
 802973a:	2b00      	cmp	r3, #0
 802973c:	f040 8357 	bne.w	8029dee <_strtod_l+0xede>
 8029740:	9b07      	ldr	r3, [sp, #28]
 8029742:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8029746:	9307      	str	r3, [sp, #28]
 8029748:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
 802974c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8029750:	e9d8 0100 	ldrd	r0, r1, [r8]
 8029754:	f7e2 feac 	bl	800c4b0 <__aeabi_dmul>
 8029758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802975c:	0d1b      	lsrs	r3, r3, #20
 802975e:	4a3b      	ldr	r2, [pc, #236]	; (802984c <_strtod_l+0x93c>)
 8029760:	051b      	lsls	r3, r3, #20
 8029762:	4293      	cmp	r3, r2
 8029764:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029768:	f200 80a7 	bhi.w	80298ba <_strtod_l+0x9aa>
 802976c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8029770:	4293      	cmp	r3, r2
 8029772:	f240 82aa 	bls.w	8029cca <_strtod_l+0xdba>
 8029776:	4b36      	ldr	r3, [pc, #216]	; (8029850 <_strtod_l+0x940>)
 8029778:	9307      	str	r3, [sp, #28]
 802977a:	2300      	movs	r3, #0
 802977c:	930c      	str	r3, [sp, #48]	; 0x30
 802977e:	f04f 33ff 	mov.w	r3, #4294967295
 8029782:	9306      	str	r3, [sp, #24]
 8029784:	e576      	b.n	8029274 <_strtod_l+0x364>
 8029786:	f1b9 0f01 	cmp.w	r9, #1
 802978a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 802978e:	f000 81be 	beq.w	8029b0e <_strtod_l+0xbfe>
 8029792:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8029838 <_strtod_l+0x928>
 8029796:	4b2f      	ldr	r3, [pc, #188]	; (8029854 <_strtod_l+0x944>)
 8029798:	2200      	movs	r2, #0
 802979a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802979e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80297a2:	e65a      	b.n	802945a <_strtod_l+0x54a>
 80297a4:	a81d      	add	r0, sp, #116	; 0x74
 80297a6:	492c      	ldr	r1, [pc, #176]	; (8029858 <_strtod_l+0x948>)
 80297a8:	f003 fdba 	bl	802d320 <__match>
 80297ac:	2800      	cmp	r0, #0
 80297ae:	f43f abe5 	beq.w	8028f7c <_strtod_l+0x6c>
 80297b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80297b4:	781b      	ldrb	r3, [r3, #0]
 80297b6:	2b28      	cmp	r3, #40	; 0x28
 80297b8:	f000 82f8 	beq.w	8029dac <_strtod_l+0xe9c>
 80297bc:	4b27      	ldr	r3, [pc, #156]	; (802985c <_strtod_l+0x94c>)
 80297be:	9307      	str	r3, [sp, #28]
 80297c0:	2300      	movs	r3, #0
 80297c2:	9306      	str	r3, [sp, #24]
 80297c4:	e4e0      	b.n	8029188 <_strtod_l+0x278>
 80297c6:	961d      	str	r6, [sp, #116]	; 0x74
 80297c8:	2200      	movs	r2, #0
 80297ca:	e42e      	b.n	802902a <_strtod_l+0x11a>
 80297cc:	f04f 0c00 	mov.w	ip, #0
 80297d0:	e737      	b.n	8029642 <_strtod_l+0x732>
 80297d2:	9a08      	ldr	r2, [sp, #32]
 80297d4:	9402      	str	r4, [sp, #8]
 80297d6:	ab1e      	add	r3, sp, #120	; 0x78
 80297d8:	9201      	str	r2, [sp, #4]
 80297da:	9300      	str	r3, [sp, #0]
 80297dc:	4a20      	ldr	r2, [pc, #128]	; (8029860 <_strtod_l+0x950>)
 80297de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80297e0:	ab1f      	add	r3, sp, #124	; 0x7c
 80297e2:	a91d      	add	r1, sp, #116	; 0x74
 80297e4:	f003 fb0c 	bl	802ce00 <__gethex>
 80297e8:	f010 0507 	ands.w	r5, r0, #7
 80297ec:	4604      	mov	r4, r0
 80297ee:	f43f ac23 	beq.w	8029038 <_strtod_l+0x128>
 80297f2:	2d06      	cmp	r5, #6
 80297f4:	f040 814c 	bne.w	8029a90 <_strtod_l+0xb80>
 80297f8:	f109 0301 	add.w	r3, r9, #1
 80297fc:	931d      	str	r3, [sp, #116]	; 0x74
 80297fe:	2300      	movs	r3, #0
 8029800:	f04f 0a00 	mov.w	sl, #0
 8029804:	f04f 0b00 	mov.w	fp, #0
 8029808:	9308      	str	r3, [sp, #32]
 802980a:	e419      	b.n	8029040 <_strtod_l+0x130>
 802980c:	f8db 1000 	ldr.w	r1, [fp]
 8029810:	4652      	mov	r2, sl
 8029812:	4648      	mov	r0, r9
 8029814:	f004 ff6c 	bl	802e6f0 <strncmp>
 8029818:	4604      	mov	r4, r0
 802981a:	2800      	cmp	r0, #0
 802981c:	f43f aeac 	beq.w	8029578 <_strtod_l+0x668>
 8029820:	f04f 0b00 	mov.w	fp, #0
 8029824:	46d8      	mov	r8, fp
 8029826:	465d      	mov	r5, fp
 8029828:	465b      	mov	r3, fp
 802982a:	4659      	mov	r1, fp
 802982c:	465c      	mov	r4, fp
 802982e:	46da      	mov	sl, fp
 8029830:	f7ff bbf4 	b.w	802901c <_strtod_l+0x10c>
 8029834:	f3af 8000 	nop.w
 8029838:	00000000 	.word	0x00000000
 802983c:	3ff00000 	.word	0x3ff00000
 8029840:	3fe00000 	.word	0x3fe00000
 8029844:	fffffbe2 	.word	0xfffffbe2
 8029848:	3ff00000 	.word	0x3ff00000
 802984c:	7ca00000 	.word	0x7ca00000
 8029850:	7fefffff 	.word	0x7fefffff
 8029854:	bff00000 	.word	0xbff00000
 8029858:	08030ccc 	.word	0x08030ccc
 802985c:	fff80000 	.word	0xfff80000
 8029860:	08030cd0 	.word	0x08030cd0
 8029864:	08030fd0 	.word	0x08030fd0
 8029868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802986c:	f1a2 7a54 	sub.w	sl, r2, #55574528	; 0x3500000
 8029870:	ec4a 9b10 	vmov	d0, r9, sl
 8029874:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029878:	f004 fc12 	bl	802e0a0 <__ulp>
 802987c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029880:	ec53 2b10 	vmov	r2, r3, d0
 8029884:	f7e2 fe14 	bl	800c4b0 <__aeabi_dmul>
 8029888:	464a      	mov	r2, r9
 802988a:	4653      	mov	r3, sl
 802988c:	f7e2 fc5e 	bl	800c14c <__adddf3>
 8029890:	4baf      	ldr	r3, [pc, #700]	; (8029b50 <_strtod_l+0xc40>)
 8029892:	ea08 0801 	and.w	r8, r8, r1
 8029896:	468a      	mov	sl, r1
 8029898:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802989c:	4598      	cmp	r8, r3
 802989e:	4681      	mov	r9, r0
 80298a0:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
 80298a4:	f240 80d4 	bls.w	8029a50 <_strtod_l+0xb40>
 80298a8:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80298ac:	429a      	cmp	r2, r3
 80298ae:	d00f      	beq.n	80298d0 <_strtod_l+0x9c0>
 80298b0:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8029b60 <_strtod_l+0xc50>
 80298b4:	f04f 39ff 	mov.w	r9, #4294967295
 80298b8:	e620      	b.n	80294fc <_strtod_l+0x5ec>
 80298ba:	2200      	movs	r2, #0
 80298bc:	4ba5      	ldr	r3, [pc, #660]	; (8029b54 <_strtod_l+0xc44>)
 80298be:	9206      	str	r2, [sp, #24]
 80298c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80298c2:	9307      	str	r3, [sp, #28]
 80298c4:	2322      	movs	r3, #34	; 0x22
 80298c6:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80298ca:	6013      	str	r3, [r2, #0]
 80298cc:	f7ff bbb8 	b.w	8029040 <_strtod_l+0x130>
 80298d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80298d2:	3301      	adds	r3, #1
 80298d4:	d1ec      	bne.n	80298b0 <_strtod_l+0x9a0>
 80298d6:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 80298da:	46d8      	mov	r8, fp
 80298dc:	46a9      	mov	r9, r5
 80298de:	981e      	ldr	r0, [sp, #120]	; 0x78
 80298e0:	4b9c      	ldr	r3, [pc, #624]	; (8029b54 <_strtod_l+0xc44>)
 80298e2:	9307      	str	r3, [sp, #28]
 80298e4:	2200      	movs	r2, #0
 80298e6:	9206      	str	r2, [sp, #24]
 80298e8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80298ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80298ee:	2322      	movs	r3, #34	; 0x22
 80298f0:	6013      	str	r3, [r2, #0]
 80298f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80298f4:	4601      	mov	r1, r0
 80298f6:	4620      	mov	r0, r4
 80298f8:	f004 f8ea 	bl	802dad0 <_Bfree>
 80298fc:	4649      	mov	r1, r9
 80298fe:	4620      	mov	r0, r4
 8029900:	f004 f8e6 	bl	802dad0 <_Bfree>
 8029904:	4631      	mov	r1, r6
 8029906:	4620      	mov	r0, r4
 8029908:	f004 f8e2 	bl	802dad0 <_Bfree>
 802990c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802990e:	4620      	mov	r0, r4
 8029910:	f004 f8de 	bl	802dad0 <_Bfree>
 8029914:	4641      	mov	r1, r8
 8029916:	4620      	mov	r0, r4
 8029918:	f004 f8da 	bl	802dad0 <_Bfree>
 802991c:	f7ff bb90 	b.w	8029040 <_strtod_l+0x130>
 8029920:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8029924:	f7e3 f87c 	bl	800ca20 <__aeabi_d2iz>
 8029928:	f7e2 fd5c 	bl	800c3e4 <__aeabi_i2d>
 802992c:	460b      	mov	r3, r1
 802992e:	4602      	mov	r2, r0
 8029930:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8029934:	f7e2 fc08 	bl	800c148 <__aeabi_dsub>
 8029938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802993a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802993e:	b9ab      	cbnz	r3, 802996c <_strtod_l+0xa5c>
 8029940:	f1b9 0f00 	cmp.w	r9, #0
 8029944:	d112      	bne.n	802996c <_strtod_l+0xa5c>
 8029946:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802994a:	b97b      	cbnz	r3, 802996c <_strtod_l+0xa5c>
 802994c:	a378      	add	r3, pc, #480	; (adr r3, 8029b30 <_strtod_l+0xc20>)
 802994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029952:	f7e3 f825 	bl	800c9a0 <__aeabi_dcmplt>
 8029956:	2800      	cmp	r0, #0
 8029958:	f43f add0 	beq.w	80294fc <_strtod_l+0x5ec>
 802995c:	464b      	mov	r3, r9
 802995e:	4654      	mov	r4, sl
 8029960:	46d8      	mov	r8, fp
 8029962:	46a9      	mov	r9, r5
 8029964:	469a      	mov	sl, r3
 8029966:	46a3      	mov	fp, r4
 8029968:	981e      	ldr	r0, [sp, #120]	; 0x78
 802996a:	e7c2      	b.n	80298f2 <_strtod_l+0x9e2>
 802996c:	a372      	add	r3, pc, #456	; (adr r3, 8029b38 <_strtod_l+0xc28>)
 802996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029976:	f7e3 f813 	bl	800c9a0 <__aeabi_dcmplt>
 802997a:	2800      	cmp	r0, #0
 802997c:	d1ee      	bne.n	802995c <_strtod_l+0xa4c>
 802997e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029982:	a36f      	add	r3, pc, #444	; (adr r3, 8029b40 <_strtod_l+0xc30>)
 8029984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029988:	f7e3 f828 	bl	800c9dc <__aeabi_dcmpgt>
 802998c:	2800      	cmp	r0, #0
 802998e:	f43f adb5 	beq.w	80294fc <_strtod_l+0x5ec>
 8029992:	e7e3      	b.n	802995c <_strtod_l+0xa4c>
 8029994:	f43f ac6c 	beq.w	8029270 <_strtod_l+0x360>
 8029998:	f1ca 0600 	rsb	r6, sl, #0
 802999c:	f016 020f 	ands.w	r2, r6, #15
 80299a0:	d00a      	beq.n	80299b8 <_strtod_l+0xaa8>
 80299a2:	4b6d      	ldr	r3, [pc, #436]	; (8029b58 <_strtod_l+0xc48>)
 80299a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80299a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80299ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80299b0:	f7e2 fea8 	bl	800c704 <__aeabi_ddiv>
 80299b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80299b8:	1136      	asrs	r6, r6, #4
 80299ba:	f43f ac59 	beq.w	8029270 <_strtod_l+0x360>
 80299be:	2e1f      	cmp	r6, #31
 80299c0:	dc28      	bgt.n	8029a14 <_strtod_l+0xb04>
 80299c2:	f016 0310 	ands.w	r3, r6, #16
 80299c6:	930c      	str	r3, [sp, #48]	; 0x30
 80299c8:	f000 8198 	beq.w	8029cfc <_strtod_l+0xdec>
 80299cc:	236a      	movs	r3, #106	; 0x6a
 80299ce:	2e00      	cmp	r6, #0
 80299d0:	930c      	str	r3, [sp, #48]	; 0x30
 80299d2:	f340 81c9 	ble.w	8029d68 <_strtod_l+0xe58>
 80299d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80299da:	4f60      	ldr	r7, [pc, #384]	; (8029b5c <_strtod_l+0xc4c>)
 80299dc:	2300      	movs	r3, #0
 80299de:	07f2      	lsls	r2, r6, #31
 80299e0:	d504      	bpl.n	80299ec <_strtod_l+0xadc>
 80299e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80299e6:	f7e2 fd63 	bl	800c4b0 <__aeabi_dmul>
 80299ea:	2301      	movs	r3, #1
 80299ec:	1076      	asrs	r6, r6, #1
 80299ee:	f107 0708 	add.w	r7, r7, #8
 80299f2:	d1f4      	bne.n	80299de <_strtod_l+0xace>
 80299f4:	2b00      	cmp	r3, #0
 80299f6:	f040 8205 	bne.w	8029e04 <_strtod_l+0xef4>
 80299fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80299fc:	2b00      	cmp	r3, #0
 80299fe:	f040 81b3 	bne.w	8029d68 <_strtod_l+0xe58>
 8029a02:	2200      	movs	r2, #0
 8029a04:	2300      	movs	r3, #0
 8029a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029a0a:	f7e2 ffbf 	bl	800c98c <__aeabi_dcmpeq>
 8029a0e:	2800      	cmp	r0, #0
 8029a10:	f43f ac30 	beq.w	8029274 <_strtod_l+0x364>
 8029a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029a16:	2322      	movs	r3, #34	; 0x22
 8029a18:	6013      	str	r3, [r2, #0]
 8029a1a:	f04f 0a00 	mov.w	sl, #0
 8029a1e:	f04f 0b00 	mov.w	fp, #0
 8029a22:	f7ff bb0d 	b.w	8029040 <_strtod_l+0x130>
 8029a26:	981d      	ldr	r0, [sp, #116]	; 0x74
 8029a28:	3402      	adds	r4, #2
 8029a2a:	2f08      	cmp	r7, #8
 8029a2c:	f340 80a4 	ble.w	8029b78 <_strtod_l+0xc68>
 8029a30:	2c10      	cmp	r4, #16
 8029a32:	bfdc      	itt	le
 8029a34:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
 8029a38:	eb02 0848 	addle.w	r8, r2, r8, lsl #1
 8029a3c:	2300      	movs	r3, #0
 8029a3e:	1c42      	adds	r2, r0, #1
 8029a40:	921d      	str	r2, [sp, #116]	; 0x74
 8029a42:	7847      	ldrb	r7, [r0, #1]
 8029a44:	f7ff bb0e 	b.w	8029064 <_strtod_l+0x154>
 8029a48:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8029a4c:	f7ff bbe7 	b.w	802921e <_strtod_l+0x30e>
 8029a50:	f10a 7854 	add.w	r8, sl, #55574528	; 0x3500000
 8029a54:	46c2      	mov	sl, r8
 8029a56:	e549      	b.n	80294ec <_strtod_l+0x5dc>
 8029a58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8029a5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8029a5e:	429e      	cmp	r6, r3
 8029a60:	f73f abec 	bgt.w	802923c <_strtod_l+0x32c>
 8029a64:	4d3c      	ldr	r5, [pc, #240]	; (8029b58 <_strtod_l+0xc48>)
 8029a66:	f1c4 040f 	rsb	r4, r4, #15
 8029a6a:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8029a6e:	1b34      	subs	r4, r6, r4
 8029a70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8029a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029a78:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8029a7c:	f7e2 fd18 	bl	800c4b0 <__aeabi_dmul>
 8029a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8029a84:	f7e2 fd14 	bl	800c4b0 <__aeabi_dmul>
 8029a88:	4682      	mov	sl, r0
 8029a8a:	468b      	mov	fp, r1
 8029a8c:	f7ff bad8 	b.w	8029040 <_strtod_l+0x130>
 8029a90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8029a92:	b13a      	cbz	r2, 8029aa4 <_strtod_l+0xb94>
 8029a94:	2135      	movs	r1, #53	; 0x35
 8029a96:	a820      	add	r0, sp, #128	; 0x80
 8029a98:	f004 fc2a 	bl	802e2f0 <__copybits>
 8029a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029a9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8029aa0:	f004 f816 	bl	802dad0 <_Bfree>
 8029aa4:	3d01      	subs	r5, #1
 8029aa6:	2d04      	cmp	r5, #4
 8029aa8:	d806      	bhi.n	8029ab8 <_strtod_l+0xba8>
 8029aaa:	e8df f005 	tbb	[pc, r5]
 8029aae:	0e1a      	.short	0x0e1a
 8029ab0:	1303      	.short	0x1303
 8029ab2:	1a          	.byte	0x1a
 8029ab3:	00          	.byte	0x00
 8029ab4:	4b27      	ldr	r3, [pc, #156]	; (8029b54 <_strtod_l+0xc44>)
 8029ab6:	9307      	str	r3, [sp, #28]
 8029ab8:	0721      	lsls	r1, r4, #28
 8029aba:	f57f ab65 	bpl.w	8029188 <_strtod_l+0x278>
 8029abe:	9b07      	ldr	r3, [sp, #28]
 8029ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029ac4:	9307      	str	r3, [sp, #28]
 8029ac6:	f7ff bb5f 	b.w	8029188 <_strtod_l+0x278>
 8029aca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029acc:	9306      	str	r3, [sp, #24]
 8029ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029ad0:	9307      	str	r3, [sp, #28]
 8029ad2:	e7f1      	b.n	8029ab8 <_strtod_l+0xba8>
 8029ad4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8029ad8:	9307      	str	r3, [sp, #28]
 8029ada:	f04f 33ff 	mov.w	r3, #4294967295
 8029ade:	9306      	str	r3, [sp, #24]
 8029ae0:	e7ea      	b.n	8029ab8 <_strtod_l+0xba8>
 8029ae2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8029ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029ae6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8029ae8:	9106      	str	r1, [sp, #24]
 8029aea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8029aee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8029af2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8029af6:	9307      	str	r3, [sp, #28]
 8029af8:	e7de      	b.n	8029ab8 <_strtod_l+0xba8>
 8029afa:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8029afe:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8029b02:	e4d7      	b.n	80294b4 <_strtod_l+0x5a4>
 8029b04:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8029b48 <_strtod_l+0xc38>
 8029b08:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8029b0c:	e4c8      	b.n	80294a0 <_strtod_l+0x590>
 8029b0e:	f1ba 0f00 	cmp.w	sl, #0
 8029b12:	f47f ae3e 	bne.w	8029792 <_strtod_l+0x882>
 8029b16:	46a9      	mov	r9, r5
 8029b18:	46d8      	mov	r8, fp
 8029b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029b1c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8029b1e:	2322      	movs	r3, #34	; 0x22
 8029b20:	6013      	str	r3, [r2, #0]
 8029b22:	f04f 0a00 	mov.w	sl, #0
 8029b26:	f04f 0b00 	mov.w	fp, #0
 8029b2a:	e6e2      	b.n	80298f2 <_strtod_l+0x9e2>
 8029b2c:	f3af 8000 	nop.w
 8029b30:	94a03595 	.word	0x94a03595
 8029b34:	3fcfffff 	.word	0x3fcfffff
 8029b38:	94a03595 	.word	0x94a03595
 8029b3c:	3fdfffff 	.word	0x3fdfffff
 8029b40:	35afe535 	.word	0x35afe535
 8029b44:	3fe00000 	.word	0x3fe00000
 8029b48:	00000000 	.word	0x00000000
 8029b4c:	3ff00000 	.word	0x3ff00000
 8029b50:	7c9fffff 	.word	0x7c9fffff
 8029b54:	7ff00000 	.word	0x7ff00000
 8029b58:	08031000 	.word	0x08031000
 8029b5c:	08030d10 	.word	0x08030d10
 8029b60:	7fefffff 	.word	0x7fefffff
 8029b64:	981d      	ldr	r0, [sp, #116]	; 0x74
 8029b66:	f04f 0b00 	mov.w	fp, #0
 8029b6a:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
 8029b6e:	1c59      	adds	r1, r3, #1
 8029b70:	4681      	mov	r9, r0
 8029b72:	465d      	mov	r5, fp
 8029b74:	46d8      	mov	r8, fp
 8029b76:	2401      	movs	r4, #1
 8029b78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8029b7c:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
 8029b80:	2300      	movs	r3, #0
 8029b82:	e75c      	b.n	8029a3e <_strtod_l+0xb2e>
 8029b84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029b86:	f111 0f16 	cmn.w	r1, #22
 8029b8a:	f6ff ab57 	blt.w	802923c <_strtod_l+0x32c>
 8029b8e:	4aa4      	ldr	r2, [pc, #656]	; (8029e20 <_strtod_l+0xf10>)
 8029b90:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
 8029b94:	e9d2 2300 	ldrd	r2, r3, [r2]
 8029b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029b9c:	f7e2 fdb2 	bl	800c704 <__aeabi_ddiv>
 8029ba0:	4682      	mov	sl, r0
 8029ba2:	468b      	mov	fp, r1
 8029ba4:	f7ff ba4c 	b.w	8029040 <_strtod_l+0x130>
 8029ba8:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 8029bac:	46d8      	mov	r8, fp
 8029bae:	46a9      	mov	r9, r5
 8029bb0:	e696      	b.n	80298e0 <_strtod_l+0x9d0>
 8029bb2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8029bb4:	4649      	mov	r1, r9
 8029bb6:	4652      	mov	r2, sl
 8029bb8:	46d8      	mov	r8, fp
 8029bba:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8029bbe:	46a9      	mov	r9, r5
 8029bc0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8029bc4:	2f00      	cmp	r7, #0
 8029bc6:	f000 8085 	beq.w	8029cd4 <_strtod_l+0xdc4>
 8029bca:	4b96      	ldr	r3, [pc, #600]	; (8029e24 <_strtod_l+0xf14>)
 8029bcc:	f3c2 0113 	ubfx	r1, r2, #0, #20
 8029bd0:	4299      	cmp	r1, r3
 8029bd2:	f000 8097 	beq.w	8029d04 <_strtod_l+0xdf4>
 8029bd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029bd8:	2b00      	cmp	r3, #0
 8029bda:	f000 8087 	beq.w	8029cec <_strtod_l+0xddc>
 8029bde:	9a07      	ldr	r2, [sp, #28]
 8029be0:	4213      	tst	r3, r2
 8029be2:	d00f      	beq.n	8029c04 <_strtod_l+0xcf4>
 8029be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029bea:	2f00      	cmp	r7, #0
 8029bec:	f000 80aa 	beq.w	8029d44 <_strtod_l+0xe34>
 8029bf0:	f7ff f96e 	bl	8028ed0 <sulp>
 8029bf4:	4602      	mov	r2, r0
 8029bf6:	460b      	mov	r3, r1
 8029bf8:	4650      	mov	r0, sl
 8029bfa:	4659      	mov	r1, fp
 8029bfc:	f7e2 faa6 	bl	800c14c <__adddf3>
 8029c00:	4682      	mov	sl, r0
 8029c02:	468b      	mov	fp, r1
 8029c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029c06:	b1bb      	cbz	r3, 8029c38 <_strtod_l+0xd28>
 8029c08:	4b87      	ldr	r3, [pc, #540]	; (8029e28 <_strtod_l+0xf18>)
 8029c0a:	9319      	str	r3, [sp, #100]	; 0x64
 8029c0c:	2300      	movs	r3, #0
 8029c0e:	9318      	str	r3, [sp, #96]	; 0x60
 8029c10:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8029c14:	4650      	mov	r0, sl
 8029c16:	4659      	mov	r1, fp
 8029c18:	f7e2 fc4a 	bl	800c4b0 <__aeabi_dmul>
 8029c1c:	4603      	mov	r3, r0
 8029c1e:	460c      	mov	r4, r1
 8029c20:	4682      	mov	sl, r0
 8029c22:	468b      	mov	fp, r1
 8029c24:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8029c28:	b931      	cbnz	r1, 8029c38 <_strtod_l+0xd28>
 8029c2a:	9b06      	ldr	r3, [sp, #24]
 8029c2c:	b923      	cbnz	r3, 8029c38 <_strtod_l+0xd28>
 8029c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029c30:	981e      	ldr	r0, [sp, #120]	; 0x78
 8029c32:	2322      	movs	r3, #34	; 0x22
 8029c34:	6013      	str	r3, [r2, #0]
 8029c36:	e65c      	b.n	80298f2 <_strtod_l+0x9e2>
 8029c38:	981e      	ldr	r0, [sp, #120]	; 0x78
 8029c3a:	e65a      	b.n	80298f2 <_strtod_l+0x9e2>
 8029c3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8029c3e:	4648      	mov	r0, r9
 8029c40:	4651      	mov	r1, sl
 8029c42:	46de      	mov	lr, fp
 8029c44:	46d8      	mov	r8, fp
 8029c46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029c4a:	46a9      	mov	r9, r5
 8029c4c:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8029c50:	2f00      	cmp	r7, #0
 8029c52:	d1d7      	bne.n	8029c04 <_strtod_l+0xcf4>
 8029c54:	2800      	cmp	r0, #0
 8029c56:	d1d5      	bne.n	8029c04 <_strtod_l+0xcf4>
 8029c58:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8029c5c:	460c      	mov	r4, r1
 8029c5e:	2b00      	cmp	r3, #0
 8029c60:	d1d0      	bne.n	8029c04 <_strtod_l+0xcf4>
 8029c62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8029c66:	0d1b      	lsrs	r3, r3, #20
 8029c68:	051b      	lsls	r3, r3, #20
 8029c6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8029c6e:	d9c9      	bls.n	8029c04 <_strtod_l+0xcf4>
 8029c70:	f8de 3014 	ldr.w	r3, [lr, #20]
 8029c74:	b91b      	cbnz	r3, 8029c7e <_strtod_l+0xd6e>
 8029c76:	f8de 3010 	ldr.w	r3, [lr, #16]
 8029c7a:	2b01      	cmp	r3, #1
 8029c7c:	ddc2      	ble.n	8029c04 <_strtod_l+0xcf4>
 8029c7e:	4641      	mov	r1, r8
 8029c80:	2201      	movs	r2, #1
 8029c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029c84:	f004 f90c 	bl	802dea0 <__lshift>
 8029c88:	4631      	mov	r1, r6
 8029c8a:	4680      	mov	r8, r0
 8029c8c:	f004 f960 	bl	802df50 <__mcmp>
 8029c90:	2800      	cmp	r0, #0
 8029c92:	ddb7      	ble.n	8029c04 <_strtod_l+0xcf4>
 8029c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029c96:	2b00      	cmp	r3, #0
 8029c98:	d17d      	bne.n	8029d96 <_strtod_l+0xe86>
 8029c9a:	4b64      	ldr	r3, [pc, #400]	; (8029e2c <_strtod_l+0xf1c>)
 8029c9c:	4023      	ands	r3, r4
 8029c9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8029ca2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8029ca6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8029caa:	9307      	str	r3, [sp, #28]
 8029cac:	f04f 33ff 	mov.w	r3, #4294967295
 8029cb0:	9306      	str	r3, [sp, #24]
 8029cb2:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8029cb6:	e7a5      	b.n	8029c04 <_strtod_l+0xcf4>
 8029cb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8029e10 <_strtod_l+0xf00>
 8029cbc:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8029cc0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8029e18 <_strtod_l+0xf08>
 8029cc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8029cc8:	e4af      	b.n	802962a <_strtod_l+0x71a>
 8029cca:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
 8029cce:	9307      	str	r3, [sp, #28]
 8029cd0:	f7ff bace 	b.w	8029270 <_strtod_l+0x360>
 8029cd4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029cd8:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8029cdc:	4614      	mov	r4, r2
 8029cde:	2b00      	cmp	r3, #0
 8029ce0:	f47f af79 	bne.w	8029bd6 <_strtod_l+0xcc6>
 8029ce4:	2900      	cmp	r1, #0
 8029ce6:	f47f af76 	bne.w	8029bd6 <_strtod_l+0xcc6>
 8029cea:	e7d3      	b.n	8029c94 <_strtod_l+0xd84>
 8029cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8029cee:	9a06      	ldr	r2, [sp, #24]
 8029cf0:	4213      	tst	r3, r2
 8029cf2:	d087      	beq.n	8029c04 <_strtod_l+0xcf4>
 8029cf4:	e776      	b.n	8029be4 <_strtod_l+0xcd4>
 8029cf6:	f04f 0800 	mov.w	r8, #0
 8029cfa:	e521      	b.n	8029740 <_strtod_l+0x830>
 8029cfc:	2e00      	cmp	r6, #0
 8029cfe:	f73f ae6a 	bgt.w	80299d6 <_strtod_l+0xac6>
 8029d02:	e67e      	b.n	8029a02 <_strtod_l+0xaf2>
 8029d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029d06:	9906      	ldr	r1, [sp, #24]
 8029d08:	2b00      	cmp	r3, #0
 8029d0a:	d041      	beq.n	8029d90 <_strtod_l+0xe80>
 8029d0c:	4b47      	ldr	r3, [pc, #284]	; (8029e2c <_strtod_l+0xf1c>)
 8029d0e:	4013      	ands	r3, r2
 8029d10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8029d14:	d83c      	bhi.n	8029d90 <_strtod_l+0xe80>
 8029d16:	0d1b      	lsrs	r3, r3, #20
 8029d18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8029d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8029d20:	fa00 f303 	lsl.w	r3, r0, r3
 8029d24:	428b      	cmp	r3, r1
 8029d26:	f47f af56 	bne.w	8029bd6 <_strtod_l+0xcc6>
 8029d2a:	4941      	ldr	r1, [pc, #260]	; (8029e30 <_strtod_l+0xf20>)
 8029d2c:	428a      	cmp	r2, r1
 8029d2e:	d057      	beq.n	8029de0 <_strtod_l+0xed0>
 8029d30:	4b3e      	ldr	r3, [pc, #248]	; (8029e2c <_strtod_l+0xf1c>)
 8029d32:	4013      	ands	r3, r2
 8029d34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8029d38:	9307      	str	r3, [sp, #28]
 8029d3a:	2300      	movs	r3, #0
 8029d3c:	9306      	str	r3, [sp, #24]
 8029d3e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8029d42:	e75f      	b.n	8029c04 <_strtod_l+0xcf4>
 8029d44:	f7ff f8c4 	bl	8028ed0 <sulp>
 8029d48:	4602      	mov	r2, r0
 8029d4a:	460b      	mov	r3, r1
 8029d4c:	4650      	mov	r0, sl
 8029d4e:	4659      	mov	r1, fp
 8029d50:	f7e2 f9fa 	bl	800c148 <__aeabi_dsub>
 8029d54:	2200      	movs	r2, #0
 8029d56:	2300      	movs	r3, #0
 8029d58:	4682      	mov	sl, r0
 8029d5a:	468b      	mov	fp, r1
 8029d5c:	f7e2 fe16 	bl	800c98c <__aeabi_dcmpeq>
 8029d60:	2800      	cmp	r0, #0
 8029d62:	f47f aeda 	bne.w	8029b1a <_strtod_l+0xc0a>
 8029d66:	e74d      	b.n	8029c04 <_strtod_l+0xcf4>
 8029d68:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029d6c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8029d70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8029d74:	2b00      	cmp	r3, #0
 8029d76:	4611      	mov	r1, r2
 8029d78:	f77f ae43 	ble.w	8029a02 <_strtod_l+0xaf2>
 8029d7c:	2b1f      	cmp	r3, #31
 8029d7e:	dd27      	ble.n	8029dd0 <_strtod_l+0xec0>
 8029d80:	2200      	movs	r2, #0
 8029d82:	2b34      	cmp	r3, #52	; 0x34
 8029d84:	9206      	str	r2, [sp, #24]
 8029d86:	dd35      	ble.n	8029df4 <_strtod_l+0xee4>
 8029d88:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 8029d8c:	9307      	str	r3, [sp, #28]
 8029d8e:	e638      	b.n	8029a02 <_strtod_l+0xaf2>
 8029d90:	f04f 33ff 	mov.w	r3, #4294967295
 8029d94:	e7c6      	b.n	8029d24 <_strtod_l+0xe14>
 8029d96:	4b25      	ldr	r3, [pc, #148]	; (8029e2c <_strtod_l+0xf1c>)
 8029d98:	4023      	ands	r3, r4
 8029d9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8029d9e:	f73f af7e 	bgt.w	8029c9e <_strtod_l+0xd8e>
 8029da2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8029da6:	f73f af2f 	bgt.w	8029c08 <_strtod_l+0xcf8>
 8029daa:	e6b6      	b.n	8029b1a <_strtod_l+0xc0a>
 8029dac:	a81d      	add	r0, sp, #116	; 0x74
 8029dae:	aa20      	add	r2, sp, #128	; 0x80
 8029db0:	4920      	ldr	r1, [pc, #128]	; (8029e34 <_strtod_l+0xf24>)
 8029db2:	f003 facd 	bl	802d350 <__hexnan>
 8029db6:	2805      	cmp	r0, #5
 8029db8:	f47f ad00 	bne.w	80297bc <_strtod_l+0x8ac>
 8029dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029dbe:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8029dc2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8029dc6:	9307      	str	r3, [sp, #28]
 8029dc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029dca:	9306      	str	r3, [sp, #24]
 8029dcc:	f7ff b9dc 	b.w	8029188 <_strtod_l+0x278>
 8029dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8029dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8029dd8:	9a06      	ldr	r2, [sp, #24]
 8029dda:	401a      	ands	r2, r3
 8029ddc:	9206      	str	r2, [sp, #24]
 8029dde:	e610      	b.n	8029a02 <_strtod_l+0xaf2>
 8029de0:	3301      	adds	r3, #1
 8029de2:	d1a5      	bne.n	8029d30 <_strtod_l+0xe20>
 8029de4:	e57b      	b.n	80298de <_strtod_l+0x9ce>
 8029de6:	4627      	mov	r7, r4
 8029de8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8029dea:	3401      	adds	r4, #1
 8029dec:	e61d      	b.n	8029a2a <_strtod_l+0xb1a>
 8029dee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029df2:	e4a5      	b.n	8029740 <_strtod_l+0x830>
 8029df4:	3b20      	subs	r3, #32
 8029df6:	f04f 32ff 	mov.w	r2, #4294967295
 8029dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8029dfe:	400b      	ands	r3, r1
 8029e00:	9307      	str	r3, [sp, #28]
 8029e02:	e5fe      	b.n	8029a02 <_strtod_l+0xaf2>
 8029e04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8029e08:	e5f7      	b.n	80299fa <_strtod_l+0xaea>
 8029e0a:	4603      	mov	r3, r0
 8029e0c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8029e0e:	e616      	b.n	8029a3e <_strtod_l+0xb2e>
 8029e10:	00000000 	.word	0x00000000
 8029e14:	bfe00000 	.word	0xbfe00000
 8029e18:	00000000 	.word	0x00000000
 8029e1c:	3fe00000 	.word	0x3fe00000
 8029e20:	08031000 	.word	0x08031000
 8029e24:	000fffff 	.word	0x000fffff
 8029e28:	39500000 	.word	0x39500000
 8029e2c:	7ff00000 	.word	0x7ff00000
 8029e30:	7fefffff 	.word	0x7fefffff
 8029e34:	08030cf0 	.word	0x08030cf0
	...

08029e40 <_strtod_r>:
 8029e40:	4b05      	ldr	r3, [pc, #20]	; (8029e58 <_strtod_r+0x18>)
 8029e42:	681b      	ldr	r3, [r3, #0]
 8029e44:	b410      	push	{r4}
 8029e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029e48:	4c04      	ldr	r4, [pc, #16]	; (8029e5c <_strtod_r+0x1c>)
 8029e4a:	2b00      	cmp	r3, #0
 8029e4c:	bf08      	it	eq
 8029e4e:	4623      	moveq	r3, r4
 8029e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029e54:	f7ff b85c 	b.w	8028f10 <_strtod_l>
 8029e58:	20001090 	.word	0x20001090
 8029e5c:	200014c0 	.word	0x200014c0

08029e60 <_strtol_l.isra.0>:
 8029e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e64:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029e68:	460f      	mov	r7, r1
 8029e6a:	4680      	mov	r8, r0
 8029e6c:	4616      	mov	r6, r2
 8029e6e:	461d      	mov	r5, r3
 8029e70:	468a      	mov	sl, r1
 8029e72:	e000      	b.n	8029e76 <_strtol_l.isra.0+0x16>
 8029e74:	46a2      	mov	sl, r4
 8029e76:	4654      	mov	r4, sl
 8029e78:	4648      	mov	r0, r9
 8029e7a:	f814 bb01 	ldrb.w	fp, [r4], #1
 8029e7e:	f7fe ff47 	bl	8028d10 <__locale_ctype_ptr_l>
 8029e82:	4458      	add	r0, fp
 8029e84:	7842      	ldrb	r2, [r0, #1]
 8029e86:	f012 0208 	ands.w	r2, r2, #8
 8029e8a:	d1f3      	bne.n	8029e74 <_strtol_l.isra.0+0x14>
 8029e8c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
 8029e90:	d04f      	beq.n	8029f32 <_strtol_l.isra.0+0xd2>
 8029e92:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8029e96:	bf04      	itt	eq
 8029e98:	f894 b000 	ldrbeq.w	fp, [r4]
 8029e9c:	f10a 0402 	addeq.w	r4, sl, #2
 8029ea0:	b11d      	cbz	r5, 8029eaa <_strtol_l.isra.0+0x4a>
 8029ea2:	2d10      	cmp	r5, #16
 8029ea4:	d056      	beq.n	8029f54 <_strtol_l.isra.0+0xf4>
 8029ea6:	46ac      	mov	ip, r5
 8029ea8:	e004      	b.n	8029eb4 <_strtol_l.isra.0+0x54>
 8029eaa:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8029eae:	d060      	beq.n	8029f72 <_strtol_l.isra.0+0x112>
 8029eb0:	250a      	movs	r5, #10
 8029eb2:	46ac      	mov	ip, r5
 8029eb4:	2a00      	cmp	r2, #0
 8029eb6:	bf0c      	ite	eq
 8029eb8:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 8029ebc:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 8029ec0:	2100      	movs	r1, #0
 8029ec2:	fbb9 fefc 	udiv	lr, r9, ip
 8029ec6:	4608      	mov	r0, r1
 8029ec8:	fb0c 9a1e 	mls	sl, ip, lr, r9
 8029ecc:	e005      	b.n	8029eda <_strtol_l.isra.0+0x7a>
 8029ece:	d029      	beq.n	8029f24 <_strtol_l.isra.0+0xc4>
 8029ed0:	fb0c 3000 	mla	r0, ip, r0, r3
 8029ed4:	2101      	movs	r1, #1
 8029ed6:	f814 bb01 	ldrb.w	fp, [r4], #1
 8029eda:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8029ede:	2b09      	cmp	r3, #9
 8029ee0:	d905      	bls.n	8029eee <_strtol_l.isra.0+0x8e>
 8029ee2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
 8029ee6:	2b19      	cmp	r3, #25
 8029ee8:	d80b      	bhi.n	8029f02 <_strtol_l.isra.0+0xa2>
 8029eea:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
 8029eee:	429d      	cmp	r5, r3
 8029ef0:	dd0f      	ble.n	8029f12 <_strtol_l.isra.0+0xb2>
 8029ef2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8029ef6:	d0ee      	beq.n	8029ed6 <_strtol_l.isra.0+0x76>
 8029ef8:	4586      	cmp	lr, r0
 8029efa:	d2e8      	bcs.n	8029ece <_strtol_l.isra.0+0x6e>
 8029efc:	f04f 31ff 	mov.w	r1, #4294967295
 8029f00:	e7e9      	b.n	8029ed6 <_strtol_l.isra.0+0x76>
 8029f02:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
 8029f06:	2b19      	cmp	r3, #25
 8029f08:	d803      	bhi.n	8029f12 <_strtol_l.isra.0+0xb2>
 8029f0a:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
 8029f0e:	429d      	cmp	r5, r3
 8029f10:	dcef      	bgt.n	8029ef2 <_strtol_l.isra.0+0x92>
 8029f12:	1c4b      	adds	r3, r1, #1
 8029f14:	d013      	beq.n	8029f3e <_strtol_l.isra.0+0xde>
 8029f16:	b102      	cbz	r2, 8029f1a <_strtol_l.isra.0+0xba>
 8029f18:	4240      	negs	r0, r0
 8029f1a:	b146      	cbz	r6, 8029f2e <_strtol_l.isra.0+0xce>
 8029f1c:	b9c1      	cbnz	r1, 8029f50 <_strtol_l.isra.0+0xf0>
 8029f1e:	6037      	str	r7, [r6, #0]
 8029f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f24:	459a      	cmp	sl, r3
 8029f26:	dad3      	bge.n	8029ed0 <_strtol_l.isra.0+0x70>
 8029f28:	f04f 31ff 	mov.w	r1, #4294967295
 8029f2c:	e7d3      	b.n	8029ed6 <_strtol_l.isra.0+0x76>
 8029f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f32:	f894 b000 	ldrb.w	fp, [r4]
 8029f36:	2201      	movs	r2, #1
 8029f38:	f10a 0402 	add.w	r4, sl, #2
 8029f3c:	e7b0      	b.n	8029ea0 <_strtol_l.isra.0+0x40>
 8029f3e:	2322      	movs	r3, #34	; 0x22
 8029f40:	f8c8 3000 	str.w	r3, [r8]
 8029f44:	b1ee      	cbz	r6, 8029f82 <_strtol_l.isra.0+0x122>
 8029f46:	1e67      	subs	r7, r4, #1
 8029f48:	4648      	mov	r0, r9
 8029f4a:	6037      	str	r7, [r6, #0]
 8029f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f50:	4681      	mov	r9, r0
 8029f52:	e7f8      	b.n	8029f46 <_strtol_l.isra.0+0xe6>
 8029f54:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8029f58:	d1a5      	bne.n	8029ea6 <_strtol_l.isra.0+0x46>
 8029f5a:	7823      	ldrb	r3, [r4, #0]
 8029f5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029f60:	2b58      	cmp	r3, #88	; 0x58
 8029f62:	d1a0      	bne.n	8029ea6 <_strtol_l.isra.0+0x46>
 8029f64:	f04f 0c10 	mov.w	ip, #16
 8029f68:	f894 b001 	ldrb.w	fp, [r4, #1]
 8029f6c:	4665      	mov	r5, ip
 8029f6e:	3402      	adds	r4, #2
 8029f70:	e7a0      	b.n	8029eb4 <_strtol_l.isra.0+0x54>
 8029f72:	7823      	ldrb	r3, [r4, #0]
 8029f74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029f78:	2b58      	cmp	r3, #88	; 0x58
 8029f7a:	d0f3      	beq.n	8029f64 <_strtol_l.isra.0+0x104>
 8029f7c:	2508      	movs	r5, #8
 8029f7e:	46ac      	mov	ip, r5
 8029f80:	e798      	b.n	8029eb4 <_strtol_l.isra.0+0x54>
 8029f82:	4648      	mov	r0, r9
 8029f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029f90 <_strtol_r>:
 8029f90:	b530      	push	{r4, r5, lr}
 8029f92:	4c06      	ldr	r4, [pc, #24]	; (8029fac <_strtol_r+0x1c>)
 8029f94:	4d06      	ldr	r5, [pc, #24]	; (8029fb0 <_strtol_r+0x20>)
 8029f96:	6824      	ldr	r4, [r4, #0]
 8029f98:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8029f9a:	b083      	sub	sp, #12
 8029f9c:	2c00      	cmp	r4, #0
 8029f9e:	bf08      	it	eq
 8029fa0:	462c      	moveq	r4, r5
 8029fa2:	9400      	str	r4, [sp, #0]
 8029fa4:	f7ff ff5c 	bl	8029e60 <_strtol_l.isra.0>
 8029fa8:	b003      	add	sp, #12
 8029faa:	bd30      	pop	{r4, r5, pc}
 8029fac:	20001090 	.word	0x20001090
 8029fb0:	200014c0 	.word	0x200014c0
	...

08029fc0 <_strtoll_l.isra.0>:
 8029fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029fc4:	b085      	sub	sp, #20
 8029fc6:	461e      	mov	r6, r3
 8029fc8:	9102      	str	r1, [sp, #8]
 8029fca:	9003      	str	r0, [sp, #12]
 8029fcc:	9200      	str	r2, [sp, #0]
 8029fce:	4688      	mov	r8, r1
 8029fd0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8029fd2:	e000      	b.n	8029fd6 <_strtoll_l.isra.0+0x16>
 8029fd4:	46a8      	mov	r8, r5
 8029fd6:	4645      	mov	r5, r8
 8029fd8:	4638      	mov	r0, r7
 8029fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029fde:	f7fe fe97 	bl	8028d10 <__locale_ctype_ptr_l>
 8029fe2:	4420      	add	r0, r4
 8029fe4:	7843      	ldrb	r3, [r0, #1]
 8029fe6:	f013 0308 	ands.w	r3, r3, #8
 8029fea:	d1f3      	bne.n	8029fd4 <_strtoll_l.isra.0+0x14>
 8029fec:	2c2d      	cmp	r4, #45	; 0x2d
 8029fee:	f000 8081 	beq.w	802a0f4 <_strtoll_l.isra.0+0x134>
 8029ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8029ff4:	bf03      	ittte	eq
 8029ff6:	782c      	ldrbeq	r4, [r5, #0]
 8029ff8:	9301      	streq	r3, [sp, #4]
 8029ffa:	f108 0502 	addeq.w	r5, r8, #2
 8029ffe:	9301      	strne	r3, [sp, #4]
 802a000:	b166      	cbz	r6, 802a01c <_strtoll_l.isra.0+0x5c>
 802a002:	2e10      	cmp	r6, #16
 802a004:	f000 8088 	beq.w	802a118 <_strtoll_l.isra.0+0x158>
 802a008:	9b01      	ldr	r3, [sp, #4]
 802a00a:	46b0      	mov	r8, r6
 802a00c:	ea4f 79e6 	mov.w	r9, r6, asr #31
 802a010:	b97b      	cbnz	r3, 802a032 <_strtoll_l.isra.0+0x72>
 802a012:	f04f 3aff 	mov.w	sl, #4294967295
 802a016:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 802a01a:	e00e      	b.n	802a03a <_strtoll_l.isra.0+0x7a>
 802a01c:	2c30      	cmp	r4, #48	; 0x30
 802a01e:	f000 808a 	beq.w	802a136 <_strtoll_l.isra.0+0x176>
 802a022:	f04f 080a 	mov.w	r8, #10
 802a026:	f04f 0900 	mov.w	r9, #0
 802a02a:	260a      	movs	r6, #10
 802a02c:	9b01      	ldr	r3, [sp, #4]
 802a02e:	2b00      	cmp	r3, #0
 802a030:	d0ef      	beq.n	802a012 <_strtoll_l.isra.0+0x52>
 802a032:	f04f 0a00 	mov.w	sl, #0
 802a036:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 802a03a:	4642      	mov	r2, r8
 802a03c:	464b      	mov	r3, r9
 802a03e:	4650      	mov	r0, sl
 802a040:	4639      	mov	r1, r7
 802a042:	f7e3 f855 	bl	800d0f0 <__aeabi_uldivmod>
 802a046:	464b      	mov	r3, r9
 802a048:	4693      	mov	fp, r2
 802a04a:	4650      	mov	r0, sl
 802a04c:	4642      	mov	r2, r8
 802a04e:	4639      	mov	r1, r7
 802a050:	f7e3 f84e 	bl	800d0f0 <__aeabi_uldivmod>
 802a054:	f04f 0e00 	mov.w	lr, #0
 802a058:	2200      	movs	r2, #0
 802a05a:	2300      	movs	r3, #0
 802a05c:	e00f      	b.n	802a07e <_strtoll_l.isra.0+0xbe>
 802a05e:	d044      	beq.n	802a0ea <_strtoll_l.isra.0+0x12a>
 802a060:	fb02 f409 	mul.w	r4, r2, r9
 802a064:	fb08 4403 	mla	r4, r8, r3, r4
 802a068:	fba2 2308 	umull	r2, r3, r2, r8
 802a06c:	4423      	add	r3, r4
 802a06e:	eb12 020c 	adds.w	r2, r2, ip
 802a072:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802a076:	f04f 0e01 	mov.w	lr, #1
 802a07a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a07e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802a082:	f1bc 0f09 	cmp.w	ip, #9
 802a086:	d906      	bls.n	802a096 <_strtoll_l.isra.0+0xd6>
 802a088:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802a08c:	f1bc 0f19 	cmp.w	ip, #25
 802a090:	d80d      	bhi.n	802a0ae <_strtoll_l.isra.0+0xee>
 802a092:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
 802a096:	4566      	cmp	r6, ip
 802a098:	dd12      	ble.n	802a0c0 <_strtoll_l.isra.0+0x100>
 802a09a:	f1be 3fff 	cmp.w	lr, #4294967295
 802a09e:	d0ec      	beq.n	802a07a <_strtoll_l.isra.0+0xba>
 802a0a0:	4299      	cmp	r1, r3
 802a0a2:	bf08      	it	eq
 802a0a4:	4290      	cmpeq	r0, r2
 802a0a6:	d2da      	bcs.n	802a05e <_strtoll_l.isra.0+0x9e>
 802a0a8:	f04f 3eff 	mov.w	lr, #4294967295
 802a0ac:	e7e5      	b.n	802a07a <_strtoll_l.isra.0+0xba>
 802a0ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802a0b2:	f1bc 0f19 	cmp.w	ip, #25
 802a0b6:	d803      	bhi.n	802a0c0 <_strtoll_l.isra.0+0x100>
 802a0b8:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
 802a0bc:	4566      	cmp	r6, ip
 802a0be:	dcec      	bgt.n	802a09a <_strtoll_l.isra.0+0xda>
 802a0c0:	f1be 3fff 	cmp.w	lr, #4294967295
 802a0c4:	d01c      	beq.n	802a100 <_strtoll_l.isra.0+0x140>
 802a0c6:	9901      	ldr	r1, [sp, #4]
 802a0c8:	b111      	cbz	r1, 802a0d0 <_strtoll_l.isra.0+0x110>
 802a0ca:	4252      	negs	r2, r2
 802a0cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 802a0d0:	9900      	ldr	r1, [sp, #0]
 802a0d2:	b129      	cbz	r1, 802a0e0 <_strtoll_l.isra.0+0x120>
 802a0d4:	f1be 0f00 	cmp.w	lr, #0
 802a0d8:	d11b      	bne.n	802a112 <_strtoll_l.isra.0+0x152>
 802a0da:	9d02      	ldr	r5, [sp, #8]
 802a0dc:	9900      	ldr	r1, [sp, #0]
 802a0de:	600d      	str	r5, [r1, #0]
 802a0e0:	4610      	mov	r0, r2
 802a0e2:	4619      	mov	r1, r3
 802a0e4:	b005      	add	sp, #20
 802a0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a0ea:	45e3      	cmp	fp, ip
 802a0ec:	dab8      	bge.n	802a060 <_strtoll_l.isra.0+0xa0>
 802a0ee:	f04f 3eff 	mov.w	lr, #4294967295
 802a0f2:	e7c2      	b.n	802a07a <_strtoll_l.isra.0+0xba>
 802a0f4:	2301      	movs	r3, #1
 802a0f6:	782c      	ldrb	r4, [r5, #0]
 802a0f8:	9301      	str	r3, [sp, #4]
 802a0fa:	f108 0502 	add.w	r5, r8, #2
 802a0fe:	e77f      	b.n	802a000 <_strtoll_l.isra.0+0x40>
 802a100:	9a03      	ldr	r2, [sp, #12]
 802a102:	2322      	movs	r3, #34	; 0x22
 802a104:	6013      	str	r3, [r2, #0]
 802a106:	9b00      	ldr	r3, [sp, #0]
 802a108:	b32b      	cbz	r3, 802a156 <_strtoll_l.isra.0+0x196>
 802a10a:	4652      	mov	r2, sl
 802a10c:	463b      	mov	r3, r7
 802a10e:	3d01      	subs	r5, #1
 802a110:	e7e4      	b.n	802a0dc <_strtoll_l.isra.0+0x11c>
 802a112:	4692      	mov	sl, r2
 802a114:	461f      	mov	r7, r3
 802a116:	e7f8      	b.n	802a10a <_strtoll_l.isra.0+0x14a>
 802a118:	2c30      	cmp	r4, #48	; 0x30
 802a11a:	d117      	bne.n	802a14c <_strtoll_l.isra.0+0x18c>
 802a11c:	782b      	ldrb	r3, [r5, #0]
 802a11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a122:	2b58      	cmp	r3, #88	; 0x58
 802a124:	d112      	bne.n	802a14c <_strtoll_l.isra.0+0x18c>
 802a126:	786c      	ldrb	r4, [r5, #1]
 802a128:	f04f 0810 	mov.w	r8, #16
 802a12c:	f04f 0900 	mov.w	r9, #0
 802a130:	3502      	adds	r5, #2
 802a132:	2610      	movs	r6, #16
 802a134:	e77a      	b.n	802a02c <_strtoll_l.isra.0+0x6c>
 802a136:	782b      	ldrb	r3, [r5, #0]
 802a138:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a13c:	2b58      	cmp	r3, #88	; 0x58
 802a13e:	d0f2      	beq.n	802a126 <_strtoll_l.isra.0+0x166>
 802a140:	f04f 0808 	mov.w	r8, #8
 802a144:	f04f 0900 	mov.w	r9, #0
 802a148:	2608      	movs	r6, #8
 802a14a:	e76f      	b.n	802a02c <_strtoll_l.isra.0+0x6c>
 802a14c:	f04f 0810 	mov.w	r8, #16
 802a150:	f04f 0900 	mov.w	r9, #0
 802a154:	e76a      	b.n	802a02c <_strtoll_l.isra.0+0x6c>
 802a156:	4652      	mov	r2, sl
 802a158:	463b      	mov	r3, r7
 802a15a:	e7c1      	b.n	802a0e0 <_strtoll_l.isra.0+0x120>
 802a15c:	0000      	movs	r0, r0
	...

0802a160 <_strtoll_r>:
 802a160:	b530      	push	{r4, r5, lr}
 802a162:	4c06      	ldr	r4, [pc, #24]	; (802a17c <_strtoll_r+0x1c>)
 802a164:	4d06      	ldr	r5, [pc, #24]	; (802a180 <_strtoll_r+0x20>)
 802a166:	6824      	ldr	r4, [r4, #0]
 802a168:	6b64      	ldr	r4, [r4, #52]	; 0x34
 802a16a:	b083      	sub	sp, #12
 802a16c:	2c00      	cmp	r4, #0
 802a16e:	bf08      	it	eq
 802a170:	462c      	moveq	r4, r5
 802a172:	9400      	str	r4, [sp, #0]
 802a174:	f7ff ff24 	bl	8029fc0 <_strtoll_l.isra.0>
 802a178:	b003      	add	sp, #12
 802a17a:	bd30      	pop	{r4, r5, pc}
 802a17c:	20001090 	.word	0x20001090
 802a180:	200014c0 	.word	0x200014c0
	...

0802a190 <_strtoul_l.isra.0>:
 802a190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a194:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802a198:	460e      	mov	r6, r1
 802a19a:	4607      	mov	r7, r0
 802a19c:	4615      	mov	r5, r2
 802a19e:	4698      	mov	r8, r3
 802a1a0:	468a      	mov	sl, r1
 802a1a2:	e000      	b.n	802a1a6 <_strtoul_l.isra.0+0x16>
 802a1a4:	46a2      	mov	sl, r4
 802a1a6:	4654      	mov	r4, sl
 802a1a8:	4648      	mov	r0, r9
 802a1aa:	f814 bb01 	ldrb.w	fp, [r4], #1
 802a1ae:	f7fe fdaf 	bl	8028d10 <__locale_ctype_ptr_l>
 802a1b2:	4458      	add	r0, fp
 802a1b4:	7840      	ldrb	r0, [r0, #1]
 802a1b6:	f010 0008 	ands.w	r0, r0, #8
 802a1ba:	d1f3      	bne.n	802a1a4 <_strtoul_l.isra.0+0x14>
 802a1bc:	4659      	mov	r1, fp
 802a1be:	292d      	cmp	r1, #45	; 0x2d
 802a1c0:	d059      	beq.n	802a276 <_strtoul_l.isra.0+0xe6>
 802a1c2:	292b      	cmp	r1, #43	; 0x2b
 802a1c4:	bf04      	itt	eq
 802a1c6:	7821      	ldrbeq	r1, [r4, #0]
 802a1c8:	f10a 0402 	addeq.w	r4, sl, #2
 802a1cc:	f1b8 0f00 	cmp.w	r8, #0
 802a1d0:	d00c      	beq.n	802a1ec <_strtoul_l.isra.0+0x5c>
 802a1d2:	f1b8 0f10 	cmp.w	r8, #16
 802a1d6:	d053      	beq.n	802a280 <_strtoul_l.isra.0+0xf0>
 802a1d8:	f04f 3cff 	mov.w	ip, #4294967295
 802a1dc:	fbbc fcf8 	udiv	ip, ip, r8
 802a1e0:	fb08 fa0c 	mul.w	sl, r8, ip
 802a1e4:	ea6f 0a0a 	mvn.w	sl, sl
 802a1e8:	46c1      	mov	r9, r8
 802a1ea:	e008      	b.n	802a1fe <_strtoul_l.isra.0+0x6e>
 802a1ec:	2930      	cmp	r1, #48	; 0x30
 802a1ee:	d058      	beq.n	802a2a2 <_strtoul_l.isra.0+0x112>
 802a1f0:	f04f 080a 	mov.w	r8, #10
 802a1f4:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802a2d4 <_strtoul_l.isra.0+0x144>
 802a1f8:	46c1      	mov	r9, r8
 802a1fa:	f04f 0a05 	mov.w	sl, #5
 802a1fe:	2300      	movs	r3, #0
 802a200:	469e      	mov	lr, r3
 802a202:	e005      	b.n	802a210 <_strtoul_l.isra.0+0x80>
 802a204:	d02a      	beq.n	802a25c <_strtoul_l.isra.0+0xcc>
 802a206:	fb09 2e0e 	mla	lr, r9, lr, r2
 802a20a:	2301      	movs	r3, #1
 802a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a210:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802a214:	2a09      	cmp	r2, #9
 802a216:	d905      	bls.n	802a224 <_strtoul_l.isra.0+0x94>
 802a218:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 802a21c:	2a19      	cmp	r2, #25
 802a21e:	d80a      	bhi.n	802a236 <_strtoul_l.isra.0+0xa6>
 802a220:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 802a224:	4590      	cmp	r8, r2
 802a226:	dd0e      	ble.n	802a246 <_strtoul_l.isra.0+0xb6>
 802a228:	2b00      	cmp	r3, #0
 802a22a:	db01      	blt.n	802a230 <_strtoul_l.isra.0+0xa0>
 802a22c:	45e6      	cmp	lr, ip
 802a22e:	d9e9      	bls.n	802a204 <_strtoul_l.isra.0+0x74>
 802a230:	f04f 33ff 	mov.w	r3, #4294967295
 802a234:	e7ea      	b.n	802a20c <_strtoul_l.isra.0+0x7c>
 802a236:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 802a23a:	2a19      	cmp	r2, #25
 802a23c:	d803      	bhi.n	802a246 <_strtoul_l.isra.0+0xb6>
 802a23e:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
 802a242:	4590      	cmp	r8, r2
 802a244:	dcf0      	bgt.n	802a228 <_strtoul_l.isra.0+0x98>
 802a246:	2b00      	cmp	r3, #0
 802a248:	db0d      	blt.n	802a266 <_strtoul_l.isra.0+0xd6>
 802a24a:	b108      	cbz	r0, 802a250 <_strtoul_l.isra.0+0xc0>
 802a24c:	f1ce 0e00 	rsb	lr, lr, #0
 802a250:	b10d      	cbz	r5, 802a256 <_strtoul_l.isra.0+0xc6>
 802a252:	b973      	cbnz	r3, 802a272 <_strtoul_l.isra.0+0xe2>
 802a254:	602e      	str	r6, [r5, #0]
 802a256:	4670      	mov	r0, lr
 802a258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a25c:	4552      	cmp	r2, sl
 802a25e:	ddd2      	ble.n	802a206 <_strtoul_l.isra.0+0x76>
 802a260:	f04f 33ff 	mov.w	r3, #4294967295
 802a264:	e7d2      	b.n	802a20c <_strtoul_l.isra.0+0x7c>
 802a266:	2322      	movs	r3, #34	; 0x22
 802a268:	603b      	str	r3, [r7, #0]
 802a26a:	f04f 3eff 	mov.w	lr, #4294967295
 802a26e:	2d00      	cmp	r5, #0
 802a270:	d0f1      	beq.n	802a256 <_strtoul_l.isra.0+0xc6>
 802a272:	1e66      	subs	r6, r4, #1
 802a274:	e7ee      	b.n	802a254 <_strtoul_l.isra.0+0xc4>
 802a276:	7821      	ldrb	r1, [r4, #0]
 802a278:	2001      	movs	r0, #1
 802a27a:	f10a 0402 	add.w	r4, sl, #2
 802a27e:	e7a5      	b.n	802a1cc <_strtoul_l.isra.0+0x3c>
 802a280:	2930      	cmp	r1, #48	; 0x30
 802a282:	d11b      	bne.n	802a2bc <_strtoul_l.isra.0+0x12c>
 802a284:	7823      	ldrb	r3, [r4, #0]
 802a286:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a28a:	2b58      	cmp	r3, #88	; 0x58
 802a28c:	d11c      	bne.n	802a2c8 <_strtoul_l.isra.0+0x138>
 802a28e:	f04f 0910 	mov.w	r9, #16
 802a292:	7861      	ldrb	r1, [r4, #1]
 802a294:	46c8      	mov	r8, r9
 802a296:	f04f 0a0f 	mov.w	sl, #15
 802a29a:	3402      	adds	r4, #2
 802a29c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
 802a2a0:	e7ad      	b.n	802a1fe <_strtoul_l.isra.0+0x6e>
 802a2a2:	7823      	ldrb	r3, [r4, #0]
 802a2a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a2a8:	2b58      	cmp	r3, #88	; 0x58
 802a2aa:	d0f0      	beq.n	802a28e <_strtoul_l.isra.0+0xfe>
 802a2ac:	f04f 0808 	mov.w	r8, #8
 802a2b0:	46c1      	mov	r9, r8
 802a2b2:	f04f 0a07 	mov.w	sl, #7
 802a2b6:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
 802a2ba:	e7a0      	b.n	802a1fe <_strtoul_l.isra.0+0x6e>
 802a2bc:	f04f 0a0f 	mov.w	sl, #15
 802a2c0:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
 802a2c4:	46c1      	mov	r9, r8
 802a2c6:	e79a      	b.n	802a1fe <_strtoul_l.isra.0+0x6e>
 802a2c8:	46c1      	mov	r9, r8
 802a2ca:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
 802a2ce:	f04f 0a0f 	mov.w	sl, #15
 802a2d2:	e794      	b.n	802a1fe <_strtoul_l.isra.0+0x6e>
 802a2d4:	19999999 	.word	0x19999999
	...

0802a2e0 <_strtoul_r>:
 802a2e0:	b530      	push	{r4, r5, lr}
 802a2e2:	4c06      	ldr	r4, [pc, #24]	; (802a2fc <_strtoul_r+0x1c>)
 802a2e4:	4d06      	ldr	r5, [pc, #24]	; (802a300 <_strtoul_r+0x20>)
 802a2e6:	6824      	ldr	r4, [r4, #0]
 802a2e8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 802a2ea:	b083      	sub	sp, #12
 802a2ec:	2c00      	cmp	r4, #0
 802a2ee:	bf08      	it	eq
 802a2f0:	462c      	moveq	r4, r5
 802a2f2:	9400      	str	r4, [sp, #0]
 802a2f4:	f7ff ff4c 	bl	802a190 <_strtoul_l.isra.0>
 802a2f8:	b003      	add	sp, #12
 802a2fa:	bd30      	pop	{r4, r5, pc}
 802a2fc:	20001090 	.word	0x20001090
 802a300:	200014c0 	.word	0x200014c0
	...

0802a310 <_strtoull_l.isra.0>:
 802a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a314:	b085      	sub	sp, #20
 802a316:	4693      	mov	fp, r2
 802a318:	9102      	str	r1, [sp, #8]
 802a31a:	9003      	str	r0, [sp, #12]
 802a31c:	469a      	mov	sl, r3
 802a31e:	460f      	mov	r7, r1
 802a320:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802a322:	e000      	b.n	802a326 <_strtoull_l.isra.0+0x16>
 802a324:	462f      	mov	r7, r5
 802a326:	463d      	mov	r5, r7
 802a328:	4630      	mov	r0, r6
 802a32a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a32e:	f7fe fcef 	bl	8028d10 <__locale_ctype_ptr_l>
 802a332:	4420      	add	r0, r4
 802a334:	7843      	ldrb	r3, [r0, #1]
 802a336:	f013 0308 	ands.w	r3, r3, #8
 802a33a:	d1f3      	bne.n	802a324 <_strtoull_l.isra.0+0x14>
 802a33c:	2c2d      	cmp	r4, #45	; 0x2d
 802a33e:	f000 8089 	beq.w	802a454 <_strtoull_l.isra.0+0x144>
 802a342:	2c2b      	cmp	r4, #43	; 0x2b
 802a344:	bf03      	ittte	eq
 802a346:	782c      	ldrbeq	r4, [r5, #0]
 802a348:	9301      	streq	r3, [sp, #4]
 802a34a:	1cbd      	addeq	r5, r7, #2
 802a34c:	9301      	strne	r3, [sp, #4]
 802a34e:	f1ba 0f00 	cmp.w	sl, #0
 802a352:	d019      	beq.n	802a388 <_strtoull_l.isra.0+0x78>
 802a354:	f1ba 0f10 	cmp.w	sl, #16
 802a358:	f000 8081 	beq.w	802a45e <_strtoull_l.isra.0+0x14e>
 802a35c:	46d0      	mov	r8, sl
 802a35e:	ea4f 79ea 	mov.w	r9, sl, asr #31
 802a362:	4642      	mov	r2, r8
 802a364:	464b      	mov	r3, r9
 802a366:	f04f 30ff 	mov.w	r0, #4294967295
 802a36a:	f04f 31ff 	mov.w	r1, #4294967295
 802a36e:	f7e2 febf 	bl	800d0f0 <__aeabi_uldivmod>
 802a372:	4642      	mov	r2, r8
 802a374:	4606      	mov	r6, r0
 802a376:	460f      	mov	r7, r1
 802a378:	464b      	mov	r3, r9
 802a37a:	f04f 30ff 	mov.w	r0, #4294967295
 802a37e:	f04f 31ff 	mov.w	r1, #4294967295
 802a382:	f7e2 feb5 	bl	800d0f0 <__aeabi_uldivmod>
 802a386:	e00b      	b.n	802a3a0 <_strtoull_l.isra.0+0x90>
 802a388:	2c30      	cmp	r4, #48	; 0x30
 802a38a:	d07d      	beq.n	802a488 <_strtoull_l.isra.0+0x178>
 802a38c:	4f4e      	ldr	r7, [pc, #312]	; (802a4c8 <_strtoull_l.isra.0+0x1b8>)
 802a38e:	2205      	movs	r2, #5
 802a390:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
 802a394:	f04f 080a 	mov.w	r8, #10
 802a398:	f04f 0900 	mov.w	r9, #0
 802a39c:	f04f 0a0a 	mov.w	sl, #10
 802a3a0:	f04f 0e00 	mov.w	lr, #0
 802a3a4:	2000      	movs	r0, #0
 802a3a6:	2100      	movs	r1, #0
 802a3a8:	e011      	b.n	802a3ce <_strtoull_l.isra.0+0xbe>
 802a3aa:	42b9      	cmp	r1, r7
 802a3ac:	bf08      	it	eq
 802a3ae:	42b0      	cmpeq	r0, r6
 802a3b0:	d03f      	beq.n	802a432 <_strtoull_l.isra.0+0x122>
 802a3b2:	fb00 f409 	mul.w	r4, r0, r9
 802a3b6:	fb08 4401 	mla	r4, r8, r1, r4
 802a3ba:	fba0 0108 	umull	r0, r1, r0, r8
 802a3be:	4421      	add	r1, r4
 802a3c0:	18c0      	adds	r0, r0, r3
 802a3c2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 802a3c6:	f04f 0e01 	mov.w	lr, #1
 802a3ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a3ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802a3d2:	2b09      	cmp	r3, #9
 802a3d4:	d905      	bls.n	802a3e2 <_strtoull_l.isra.0+0xd2>
 802a3d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802a3da:	2b19      	cmp	r3, #25
 802a3dc:	d80d      	bhi.n	802a3fa <_strtoull_l.isra.0+0xea>
 802a3de:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 802a3e2:	459a      	cmp	sl, r3
 802a3e4:	dd11      	ble.n	802a40a <_strtoull_l.isra.0+0xfa>
 802a3e6:	f1be 0f00 	cmp.w	lr, #0
 802a3ea:	db03      	blt.n	802a3f4 <_strtoull_l.isra.0+0xe4>
 802a3ec:	428f      	cmp	r7, r1
 802a3ee:	bf08      	it	eq
 802a3f0:	4286      	cmpeq	r6, r0
 802a3f2:	d2da      	bcs.n	802a3aa <_strtoull_l.isra.0+0x9a>
 802a3f4:	f04f 3eff 	mov.w	lr, #4294967295
 802a3f8:	e7e7      	b.n	802a3ca <_strtoull_l.isra.0+0xba>
 802a3fa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802a3fe:	2b19      	cmp	r3, #25
 802a400:	d803      	bhi.n	802a40a <_strtoull_l.isra.0+0xfa>
 802a402:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 802a406:	459a      	cmp	sl, r3
 802a408:	dced      	bgt.n	802a3e6 <_strtoull_l.isra.0+0xd6>
 802a40a:	f1be 0f00 	cmp.w	lr, #0
 802a40e:	db15      	blt.n	802a43c <_strtoull_l.isra.0+0x12c>
 802a410:	9b01      	ldr	r3, [sp, #4]
 802a412:	b113      	cbz	r3, 802a41a <_strtoull_l.isra.0+0x10a>
 802a414:	4240      	negs	r0, r0
 802a416:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802a41a:	f1bb 0f00 	cmp.w	fp, #0
 802a41e:	d005      	beq.n	802a42c <_strtoull_l.isra.0+0x11c>
 802a420:	f1be 0f00 	cmp.w	lr, #0
 802a424:	d114      	bne.n	802a450 <_strtoull_l.isra.0+0x140>
 802a426:	9d02      	ldr	r5, [sp, #8]
 802a428:	f8cb 5000 	str.w	r5, [fp]
 802a42c:	b005      	add	sp, #20
 802a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a432:	4293      	cmp	r3, r2
 802a434:	ddbd      	ble.n	802a3b2 <_strtoull_l.isra.0+0xa2>
 802a436:	f04f 3eff 	mov.w	lr, #4294967295
 802a43a:	e7c6      	b.n	802a3ca <_strtoull_l.isra.0+0xba>
 802a43c:	9a03      	ldr	r2, [sp, #12]
 802a43e:	2322      	movs	r3, #34	; 0x22
 802a440:	6013      	str	r3, [r2, #0]
 802a442:	f04f 30ff 	mov.w	r0, #4294967295
 802a446:	f04f 31ff 	mov.w	r1, #4294967295
 802a44a:	f1bb 0f00 	cmp.w	fp, #0
 802a44e:	d0ed      	beq.n	802a42c <_strtoull_l.isra.0+0x11c>
 802a450:	3d01      	subs	r5, #1
 802a452:	e7e9      	b.n	802a428 <_strtoull_l.isra.0+0x118>
 802a454:	2301      	movs	r3, #1
 802a456:	782c      	ldrb	r4, [r5, #0]
 802a458:	9301      	str	r3, [sp, #4]
 802a45a:	1cbd      	adds	r5, r7, #2
 802a45c:	e777      	b.n	802a34e <_strtoull_l.isra.0+0x3e>
 802a45e:	2c30      	cmp	r4, #48	; 0x30
 802a460:	d123      	bne.n	802a4aa <_strtoull_l.isra.0+0x19a>
 802a462:	782b      	ldrb	r3, [r5, #0]
 802a464:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a468:	2b58      	cmp	r3, #88	; 0x58
 802a46a:	d128      	bne.n	802a4be <_strtoull_l.isra.0+0x1ae>
 802a46c:	786c      	ldrb	r4, [r5, #1]
 802a46e:	220f      	movs	r2, #15
 802a470:	3502      	adds	r5, #2
 802a472:	f04f 36ff 	mov.w	r6, #4294967295
 802a476:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
 802a47a:	f04f 0810 	mov.w	r8, #16
 802a47e:	f04f 0900 	mov.w	r9, #0
 802a482:	f04f 0a10 	mov.w	sl, #16
 802a486:	e78b      	b.n	802a3a0 <_strtoull_l.isra.0+0x90>
 802a488:	782b      	ldrb	r3, [r5, #0]
 802a48a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a48e:	2b58      	cmp	r3, #88	; 0x58
 802a490:	d0ec      	beq.n	802a46c <_strtoull_l.isra.0+0x15c>
 802a492:	2207      	movs	r2, #7
 802a494:	f04f 36ff 	mov.w	r6, #4294967295
 802a498:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
 802a49c:	f04f 0808 	mov.w	r8, #8
 802a4a0:	f04f 0900 	mov.w	r9, #0
 802a4a4:	f04f 0a08 	mov.w	sl, #8
 802a4a8:	e77a      	b.n	802a3a0 <_strtoull_l.isra.0+0x90>
 802a4aa:	220f      	movs	r2, #15
 802a4ac:	f04f 36ff 	mov.w	r6, #4294967295
 802a4b0:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
 802a4b4:	f04f 0810 	mov.w	r8, #16
 802a4b8:	f04f 0900 	mov.w	r9, #0
 802a4bc:	e770      	b.n	802a3a0 <_strtoull_l.isra.0+0x90>
 802a4be:	f04f 0810 	mov.w	r8, #16
 802a4c2:	f04f 0900 	mov.w	r9, #0
 802a4c6:	e74c      	b.n	802a362 <_strtoull_l.isra.0+0x52>
 802a4c8:	19999999 	.word	0x19999999
 802a4cc:	00000000 	.word	0x00000000

0802a4d0 <_strtoull_r>:
 802a4d0:	b530      	push	{r4, r5, lr}
 802a4d2:	4c06      	ldr	r4, [pc, #24]	; (802a4ec <_strtoull_r+0x1c>)
 802a4d4:	4d06      	ldr	r5, [pc, #24]	; (802a4f0 <_strtoull_r+0x20>)
 802a4d6:	6824      	ldr	r4, [r4, #0]
 802a4d8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 802a4da:	b083      	sub	sp, #12
 802a4dc:	2c00      	cmp	r4, #0
 802a4de:	bf08      	it	eq
 802a4e0:	462c      	moveq	r4, r5
 802a4e2:	9400      	str	r4, [sp, #0]
 802a4e4:	f7ff ff14 	bl	802a310 <_strtoull_l.isra.0>
 802a4e8:	b003      	add	sp, #12
 802a4ea:	bd30      	pop	{r4, r5, pc}
 802a4ec:	20001090 	.word	0x20001090
 802a4f0:	200014c0 	.word	0x200014c0
	...

0802a500 <_sungetc_r>:
 802a500:	b538      	push	{r3, r4, r5, lr}
 802a502:	1c4b      	adds	r3, r1, #1
 802a504:	d01a      	beq.n	802a53c <_sungetc_r+0x3c>
 802a506:	8993      	ldrh	r3, [r2, #12]
 802a508:	6b14      	ldr	r4, [r2, #48]	; 0x30
 802a50a:	f023 0320 	bic.w	r3, r3, #32
 802a50e:	b2cd      	uxtb	r5, r1
 802a510:	8193      	strh	r3, [r2, #12]
 802a512:	b1b4      	cbz	r4, 802a542 <_sungetc_r+0x42>
 802a514:	4614      	mov	r4, r2
 802a516:	6852      	ldr	r2, [r2, #4]
 802a518:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a51a:	429a      	cmp	r2, r3
 802a51c:	da09      	bge.n	802a532 <_sungetc_r+0x32>
 802a51e:	6823      	ldr	r3, [r4, #0]
 802a520:	1e5a      	subs	r2, r3, #1
 802a522:	6022      	str	r2, [r4, #0]
 802a524:	f803 5c01 	strb.w	r5, [r3, #-1]
 802a528:	6863      	ldr	r3, [r4, #4]
 802a52a:	3301      	adds	r3, #1
 802a52c:	6063      	str	r3, [r4, #4]
 802a52e:	4628      	mov	r0, r5
 802a530:	bd38      	pop	{r3, r4, r5, pc}
 802a532:	4621      	mov	r1, r4
 802a534:	f001 facc 	bl	802bad0 <__submore>
 802a538:	2800      	cmp	r0, #0
 802a53a:	d0f0      	beq.n	802a51e <_sungetc_r+0x1e>
 802a53c:	f04f 35ff 	mov.w	r5, #4294967295
 802a540:	e7f5      	b.n	802a52e <_sungetc_r+0x2e>
 802a542:	6911      	ldr	r1, [r2, #16]
 802a544:	6813      	ldr	r3, [r2, #0]
 802a546:	b129      	cbz	r1, 802a554 <_sungetc_r+0x54>
 802a548:	4299      	cmp	r1, r3
 802a54a:	d203      	bcs.n	802a554 <_sungetc_r+0x54>
 802a54c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802a550:	428d      	cmp	r5, r1
 802a552:	d00f      	beq.n	802a574 <_sungetc_r+0x74>
 802a554:	6393      	str	r3, [r2, #56]	; 0x38
 802a556:	4613      	mov	r3, r2
 802a558:	6854      	ldr	r4, [r2, #4]
 802a55a:	63d4      	str	r4, [r2, #60]	; 0x3c
 802a55c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 802a560:	2103      	movs	r1, #3
 802a562:	6310      	str	r0, [r2, #48]	; 0x30
 802a564:	6351      	str	r1, [r2, #52]	; 0x34
 802a566:	f803 5f42 	strb.w	r5, [r3, #66]!
 802a56a:	2101      	movs	r1, #1
 802a56c:	6013      	str	r3, [r2, #0]
 802a56e:	6051      	str	r1, [r2, #4]
 802a570:	4628      	mov	r0, r5
 802a572:	bd38      	pop	{r3, r4, r5, pc}
 802a574:	6851      	ldr	r1, [r2, #4]
 802a576:	3b01      	subs	r3, #1
 802a578:	3101      	adds	r1, #1
 802a57a:	6013      	str	r3, [r2, #0]
 802a57c:	6051      	str	r1, [r2, #4]
 802a57e:	e7d6      	b.n	802a52e <_sungetc_r+0x2e>

0802a580 <__ssrefill_r>:
 802a580:	b510      	push	{r4, lr}
 802a582:	460c      	mov	r4, r1
 802a584:	6b09      	ldr	r1, [r1, #48]	; 0x30
 802a586:	b169      	cbz	r1, 802a5a4 <__ssrefill_r+0x24>
 802a588:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802a58c:	4299      	cmp	r1, r3
 802a58e:	d001      	beq.n	802a594 <__ssrefill_r+0x14>
 802a590:	f002 fafe 	bl	802cb90 <_free_r>
 802a594:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a596:	6063      	str	r3, [r4, #4]
 802a598:	2000      	movs	r0, #0
 802a59a:	6320      	str	r0, [r4, #48]	; 0x30
 802a59c:	b113      	cbz	r3, 802a5a4 <__ssrefill_r+0x24>
 802a59e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a5a0:	6023      	str	r3, [r4, #0]
 802a5a2:	bd10      	pop	{r4, pc}
 802a5a4:	89a3      	ldrh	r3, [r4, #12]
 802a5a6:	6922      	ldr	r2, [r4, #16]
 802a5a8:	6022      	str	r2, [r4, #0]
 802a5aa:	f043 0320 	orr.w	r3, r3, #32
 802a5ae:	2200      	movs	r2, #0
 802a5b0:	81a3      	strh	r3, [r4, #12]
 802a5b2:	6062      	str	r2, [r4, #4]
 802a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 802a5b8:	bd10      	pop	{r4, pc}
 802a5ba:	bf00      	nop
 802a5bc:	0000      	movs	r0, r0
	...

0802a5c0 <_sfread_r>:
 802a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5c4:	b083      	sub	sp, #12
 802a5c6:	fb02 f903 	mul.w	r9, r2, r3
 802a5ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802a5cc:	f1b9 0f00 	cmp.w	r9, #0
 802a5d0:	d028      	beq.n	802a624 <_sfread_r+0x64>
 802a5d2:	4607      	mov	r7, r0
 802a5d4:	469a      	mov	sl, r3
 802a5d6:	9201      	str	r2, [sp, #4]
 802a5d8:	460d      	mov	r5, r1
 802a5da:	464e      	mov	r6, r9
 802a5dc:	f04f 0800 	mov.w	r8, #0
 802a5e0:	e00f      	b.n	802a602 <_sfread_r+0x42>
 802a5e2:	6821      	ldr	r1, [r4, #0]
 802a5e4:	f7e2 fa94 	bl	800cb10 <memcpy>
 802a5e8:	6822      	ldr	r2, [r4, #0]
 802a5ea:	f8c4 8004 	str.w	r8, [r4, #4]
 802a5ee:	445a      	add	r2, fp
 802a5f0:	6022      	str	r2, [r4, #0]
 802a5f2:	4621      	mov	r1, r4
 802a5f4:	4638      	mov	r0, r7
 802a5f6:	445d      	add	r5, fp
 802a5f8:	eba6 060b 	sub.w	r6, r6, fp
 802a5fc:	f7ff ffc0 	bl	802a580 <__ssrefill_r>
 802a600:	b9a0      	cbnz	r0, 802a62c <_sfread_r+0x6c>
 802a602:	f8d4 b004 	ldr.w	fp, [r4, #4]
 802a606:	455e      	cmp	r6, fp
 802a608:	4628      	mov	r0, r5
 802a60a:	465a      	mov	r2, fp
 802a60c:	d8e9      	bhi.n	802a5e2 <_sfread_r+0x22>
 802a60e:	4632      	mov	r2, r6
 802a610:	6821      	ldr	r1, [r4, #0]
 802a612:	f7e2 fa7d 	bl	800cb10 <memcpy>
 802a616:	6862      	ldr	r2, [r4, #4]
 802a618:	6823      	ldr	r3, [r4, #0]
 802a61a:	1b92      	subs	r2, r2, r6
 802a61c:	441e      	add	r6, r3
 802a61e:	46d1      	mov	r9, sl
 802a620:	6062      	str	r2, [r4, #4]
 802a622:	6026      	str	r6, [r4, #0]
 802a624:	4648      	mov	r0, r9
 802a626:	b003      	add	sp, #12
 802a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a62c:	9b01      	ldr	r3, [sp, #4]
 802a62e:	eba9 0906 	sub.w	r9, r9, r6
 802a632:	fbb9 f9f3 	udiv	r9, r9, r3
 802a636:	4648      	mov	r0, r9
 802a638:	b003      	add	sp, #12
 802a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a63e:	bf00      	nop

0802a640 <_svfprintf_r>:
 802a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a644:	b0c1      	sub	sp, #260	; 0x104
 802a646:	460c      	mov	r4, r1
 802a648:	9107      	str	r1, [sp, #28]
 802a64a:	4692      	mov	sl, r2
 802a64c:	930b      	str	r3, [sp, #44]	; 0x2c
 802a64e:	9008      	str	r0, [sp, #32]
 802a650:	f7fe fb7e 	bl	8028d50 <_localeconv_r>
 802a654:	6803      	ldr	r3, [r0, #0]
 802a656:	9314      	str	r3, [sp, #80]	; 0x50
 802a658:	4618      	mov	r0, r3
 802a65a:	f7e2 fc69 	bl	800cf30 <strlen>
 802a65e:	89a3      	ldrh	r3, [r4, #12]
 802a660:	9013      	str	r0, [sp, #76]	; 0x4c
 802a662:	0619      	lsls	r1, r3, #24
 802a664:	d503      	bpl.n	802a66e <_svfprintf_r+0x2e>
 802a666:	6923      	ldr	r3, [r4, #16]
 802a668:	2b00      	cmp	r3, #0
 802a66a:	f001 801b 	beq.w	802b6a4 <_svfprintf_r+0x1064>
 802a66e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 802a8c0 <_svfprintf_r+0x280>
 802a672:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802a676:	2300      	movs	r3, #0
 802a678:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 802a67c:	930f      	str	r3, [sp, #60]	; 0x3c
 802a67e:	9325      	str	r3, [sp, #148]	; 0x94
 802a680:	9324      	str	r3, [sp, #144]	; 0x90
 802a682:	9312      	str	r3, [sp, #72]	; 0x48
 802a684:	9315      	str	r3, [sp, #84]	; 0x54
 802a686:	9305      	str	r3, [sp, #20]
 802a688:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 802a68c:	46c8      	mov	r8, r9
 802a68e:	f89a 3000 	ldrb.w	r3, [sl]
 802a692:	4654      	mov	r4, sl
 802a694:	b1e3      	cbz	r3, 802a6d0 <_svfprintf_r+0x90>
 802a696:	2b25      	cmp	r3, #37	; 0x25
 802a698:	d102      	bne.n	802a6a0 <_svfprintf_r+0x60>
 802a69a:	e019      	b.n	802a6d0 <_svfprintf_r+0x90>
 802a69c:	2b25      	cmp	r3, #37	; 0x25
 802a69e:	d003      	beq.n	802a6a8 <_svfprintf_r+0x68>
 802a6a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802a6a4:	2b00      	cmp	r3, #0
 802a6a6:	d1f9      	bne.n	802a69c <_svfprintf_r+0x5c>
 802a6a8:	eba4 050a 	sub.w	r5, r4, sl
 802a6ac:	b185      	cbz	r5, 802a6d0 <_svfprintf_r+0x90>
 802a6ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a6b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802a6b2:	f8c8 a000 	str.w	sl, [r8]
 802a6b6:	3301      	adds	r3, #1
 802a6b8:	442a      	add	r2, r5
 802a6ba:	2b07      	cmp	r3, #7
 802a6bc:	f8c8 5004 	str.w	r5, [r8, #4]
 802a6c0:	9225      	str	r2, [sp, #148]	; 0x94
 802a6c2:	9324      	str	r3, [sp, #144]	; 0x90
 802a6c4:	dc7f      	bgt.n	802a7c6 <_svfprintf_r+0x186>
 802a6c6:	f108 0808 	add.w	r8, r8, #8
 802a6ca:	9b05      	ldr	r3, [sp, #20]
 802a6cc:	442b      	add	r3, r5
 802a6ce:	9305      	str	r3, [sp, #20]
 802a6d0:	7823      	ldrb	r3, [r4, #0]
 802a6d2:	2b00      	cmp	r3, #0
 802a6d4:	d07f      	beq.n	802a7d6 <_svfprintf_r+0x196>
 802a6d6:	2300      	movs	r3, #0
 802a6d8:	461a      	mov	r2, r3
 802a6da:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 802a6de:	4619      	mov	r1, r3
 802a6e0:	9309      	str	r3, [sp, #36]	; 0x24
 802a6e2:	469b      	mov	fp, r3
 802a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 802a6e8:	7863      	ldrb	r3, [r4, #1]
 802a6ea:	9006      	str	r0, [sp, #24]
 802a6ec:	f104 0a01 	add.w	sl, r4, #1
 802a6f0:	f10a 0a01 	add.w	sl, sl, #1
 802a6f4:	f1a3 0020 	sub.w	r0, r3, #32
 802a6f8:	2858      	cmp	r0, #88	; 0x58
 802a6fa:	f200 83d3 	bhi.w	802aea4 <_svfprintf_r+0x864>
 802a6fe:	e8df f010 	tbh	[pc, r0, lsl #1]
 802a702:	023f      	.short	0x023f
 802a704:	03d103d1 	.word	0x03d103d1
 802a708:	03d10247 	.word	0x03d10247
 802a70c:	03d103d1 	.word	0x03d103d1
 802a710:	03d103d1 	.word	0x03d103d1
 802a714:	024c03d1 	.word	0x024c03d1
 802a718:	03d1020a 	.word	0x03d1020a
 802a71c:	0273005d 	.word	0x0273005d
 802a720:	028e03d1 	.word	0x028e03d1
 802a724:	03c103c1 	.word	0x03c103c1
 802a728:	03c103c1 	.word	0x03c103c1
 802a72c:	03c103c1 	.word	0x03c103c1
 802a730:	03c103c1 	.word	0x03c103c1
 802a734:	03d103c1 	.word	0x03d103c1
 802a738:	03d103d1 	.word	0x03d103d1
 802a73c:	03d103d1 	.word	0x03d103d1
 802a740:	03d103d1 	.word	0x03d103d1
 802a744:	03d103d1 	.word	0x03d103d1
 802a748:	033f03d1 	.word	0x033f03d1
 802a74c:	03d1035f 	.word	0x03d1035f
 802a750:	03d1035f 	.word	0x03d1035f
 802a754:	03d103d1 	.word	0x03d103d1
 802a758:	03aa03d1 	.word	0x03aa03d1
 802a75c:	03d103d1 	.word	0x03d103d1
 802a760:	03d103af 	.word	0x03d103af
 802a764:	03d103d1 	.word	0x03d103d1
 802a768:	03d103d1 	.word	0x03d103d1
 802a76c:	03d10261 	.word	0x03d10261
 802a770:	032603d1 	.word	0x032603d1
 802a774:	03d103d1 	.word	0x03d103d1
 802a778:	03d103d1 	.word	0x03d103d1
 802a77c:	03d103d1 	.word	0x03d103d1
 802a780:	03d103d1 	.word	0x03d103d1
 802a784:	03d103d1 	.word	0x03d103d1
 802a788:	02e302ce 	.word	0x02e302ce
 802a78c:	035f035f 	.word	0x035f035f
 802a790:	0293035f 	.word	0x0293035f
 802a794:	03d102e3 	.word	0x03d102e3
 802a798:	029803d1 	.word	0x029803d1
 802a79c:	02a503d1 	.word	0x02a503d1
 802a7a0:	02bc01d3 	.word	0x02bc01d3
 802a7a4:	03d1020f 	.word	0x03d1020f
 802a7a8:	03d101e8 	.word	0x03d101e8
 802a7ac:	03d1007e 	.word	0x03d1007e
 802a7b0:	021403d1 	.word	0x021403d1
 802a7b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a7b6:	930b      	str	r3, [sp, #44]	; 0x2c
 802a7b8:	4240      	negs	r0, r0
 802a7ba:	9009      	str	r0, [sp, #36]	; 0x24
 802a7bc:	f04b 0b04 	orr.w	fp, fp, #4
 802a7c0:	f89a 3000 	ldrb.w	r3, [sl]
 802a7c4:	e794      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802a7c6:	aa23      	add	r2, sp, #140	; 0x8c
 802a7c8:	9907      	ldr	r1, [sp, #28]
 802a7ca:	9808      	ldr	r0, [sp, #32]
 802a7cc:	f003 ffe8 	bl	802e7a0 <__ssprint_r>
 802a7d0:	b940      	cbnz	r0, 802a7e4 <_svfprintf_r+0x1a4>
 802a7d2:	46c8      	mov	r8, r9
 802a7d4:	e779      	b.n	802a6ca <_svfprintf_r+0x8a>
 802a7d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802a7d8:	b123      	cbz	r3, 802a7e4 <_svfprintf_r+0x1a4>
 802a7da:	9808      	ldr	r0, [sp, #32]
 802a7dc:	9907      	ldr	r1, [sp, #28]
 802a7de:	aa23      	add	r2, sp, #140	; 0x8c
 802a7e0:	f003 ffde 	bl	802e7a0 <__ssprint_r>
 802a7e4:	9b07      	ldr	r3, [sp, #28]
 802a7e6:	899b      	ldrh	r3, [r3, #12]
 802a7e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 802a7ec:	9b05      	ldr	r3, [sp, #20]
 802a7ee:	bf18      	it	ne
 802a7f0:	f04f 33ff 	movne.w	r3, #4294967295
 802a7f4:	9305      	str	r3, [sp, #20]
 802a7f6:	9805      	ldr	r0, [sp, #20]
 802a7f8:	b041      	add	sp, #260	; 0x104
 802a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7fe:	f01b 0f20 	tst.w	fp, #32
 802a802:	930d      	str	r3, [sp, #52]	; 0x34
 802a804:	f040 81e5 	bne.w	802abd2 <_svfprintf_r+0x592>
 802a808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a80a:	f01b 0f10 	tst.w	fp, #16
 802a80e:	4613      	mov	r3, r2
 802a810:	f040 8588 	bne.w	802b324 <_svfprintf_r+0xce4>
 802a814:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802a818:	f000 8584 	beq.w	802b324 <_svfprintf_r+0xce4>
 802a81c:	8814      	ldrh	r4, [r2, #0]
 802a81e:	3204      	adds	r2, #4
 802a820:	2500      	movs	r5, #0
 802a822:	2301      	movs	r3, #1
 802a824:	920b      	str	r2, [sp, #44]	; 0x2c
 802a826:	2700      	movs	r7, #0
 802a828:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 802a82c:	9906      	ldr	r1, [sp, #24]
 802a82e:	1c4a      	adds	r2, r1, #1
 802a830:	f000 826d 	beq.w	802ad0e <_svfprintf_r+0x6ce>
 802a834:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 802a838:	9203      	str	r2, [sp, #12]
 802a83a:	ea54 0205 	orrs.w	r2, r4, r5
 802a83e:	f040 826c 	bne.w	802ad1a <_svfprintf_r+0x6da>
 802a842:	2900      	cmp	r1, #0
 802a844:	f040 8451 	bne.w	802b0ea <_svfprintf_r+0xaaa>
 802a848:	2b00      	cmp	r3, #0
 802a84a:	f040 850b 	bne.w	802b264 <_svfprintf_r+0xc24>
 802a84e:	f01b 0301 	ands.w	r3, fp, #1
 802a852:	930a      	str	r3, [sp, #40]	; 0x28
 802a854:	f000 861a 	beq.w	802b48c <_svfprintf_r+0xe4c>
 802a858:	ae40      	add	r6, sp, #256	; 0x100
 802a85a:	2330      	movs	r3, #48	; 0x30
 802a85c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 802a860:	9b06      	ldr	r3, [sp, #24]
 802a862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a864:	4293      	cmp	r3, r2
 802a866:	bfb8      	it	lt
 802a868:	4613      	movlt	r3, r2
 802a86a:	9304      	str	r3, [sp, #16]
 802a86c:	2300      	movs	r3, #0
 802a86e:	930e      	str	r3, [sp, #56]	; 0x38
 802a870:	b117      	cbz	r7, 802a878 <_svfprintf_r+0x238>
 802a872:	9b04      	ldr	r3, [sp, #16]
 802a874:	3301      	adds	r3, #1
 802a876:	9304      	str	r3, [sp, #16]
 802a878:	9b03      	ldr	r3, [sp, #12]
 802a87a:	f013 0302 	ands.w	r3, r3, #2
 802a87e:	930c      	str	r3, [sp, #48]	; 0x30
 802a880:	d002      	beq.n	802a888 <_svfprintf_r+0x248>
 802a882:	9b04      	ldr	r3, [sp, #16]
 802a884:	3302      	adds	r3, #2
 802a886:	9304      	str	r3, [sp, #16]
 802a888:	9b03      	ldr	r3, [sp, #12]
 802a88a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
 802a88e:	f040 8320 	bne.w	802aed2 <_svfprintf_r+0x892>
 802a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a894:	9a04      	ldr	r2, [sp, #16]
 802a896:	eba3 0b02 	sub.w	fp, r3, r2
 802a89a:	f1bb 0f00 	cmp.w	fp, #0
 802a89e:	f340 8318 	ble.w	802aed2 <_svfprintf_r+0x892>
 802a8a2:	f1bb 0f10 	cmp.w	fp, #16
 802a8a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802a8a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802a8aa:	dd30      	ble.n	802a90e <_svfprintf_r+0x2ce>
 802a8ac:	4643      	mov	r3, r8
 802a8ae:	4621      	mov	r1, r4
 802a8b0:	46a8      	mov	r8, r5
 802a8b2:	2710      	movs	r7, #16
 802a8b4:	9c08      	ldr	r4, [sp, #32]
 802a8b6:	9d07      	ldr	r5, [sp, #28]
 802a8b8:	e00d      	b.n	802a8d6 <_svfprintf_r+0x296>
 802a8ba:	bf00      	nop
 802a8bc:	f3af 8000 	nop.w
	...
 802a8c8:	f1ab 0b10 	sub.w	fp, fp, #16
 802a8cc:	f1bb 0f10 	cmp.w	fp, #16
 802a8d0:	f103 0308 	add.w	r3, r3, #8
 802a8d4:	dd18      	ble.n	802a908 <_svfprintf_r+0x2c8>
 802a8d6:	3201      	adds	r2, #1
 802a8d8:	48b7      	ldr	r0, [pc, #732]	; (802abb8 <_svfprintf_r+0x578>)
 802a8da:	9224      	str	r2, [sp, #144]	; 0x90
 802a8dc:	3110      	adds	r1, #16
 802a8de:	2a07      	cmp	r2, #7
 802a8e0:	9125      	str	r1, [sp, #148]	; 0x94
 802a8e2:	e883 0081 	stmia.w	r3, {r0, r7}
 802a8e6:	ddef      	ble.n	802a8c8 <_svfprintf_r+0x288>
 802a8e8:	aa23      	add	r2, sp, #140	; 0x8c
 802a8ea:	4629      	mov	r1, r5
 802a8ec:	4620      	mov	r0, r4
 802a8ee:	f003 ff57 	bl	802e7a0 <__ssprint_r>
 802a8f2:	2800      	cmp	r0, #0
 802a8f4:	f47f af76 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802a8f8:	f1ab 0b10 	sub.w	fp, fp, #16
 802a8fc:	f1bb 0f10 	cmp.w	fp, #16
 802a900:	9925      	ldr	r1, [sp, #148]	; 0x94
 802a902:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802a904:	464b      	mov	r3, r9
 802a906:	dce6      	bgt.n	802a8d6 <_svfprintf_r+0x296>
 802a908:	4645      	mov	r5, r8
 802a90a:	460c      	mov	r4, r1
 802a90c:	4698      	mov	r8, r3
 802a90e:	3201      	adds	r2, #1
 802a910:	4ba9      	ldr	r3, [pc, #676]	; (802abb8 <_svfprintf_r+0x578>)
 802a912:	9224      	str	r2, [sp, #144]	; 0x90
 802a914:	445c      	add	r4, fp
 802a916:	2a07      	cmp	r2, #7
 802a918:	9425      	str	r4, [sp, #148]	; 0x94
 802a91a:	e888 0808 	stmia.w	r8, {r3, fp}
 802a91e:	f300 84a6 	bgt.w	802b26e <_svfprintf_r+0xc2e>
 802a922:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802a926:	f108 0808 	add.w	r8, r8, #8
 802a92a:	b177      	cbz	r7, 802a94a <_svfprintf_r+0x30a>
 802a92c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a92e:	3301      	adds	r3, #1
 802a930:	3401      	adds	r4, #1
 802a932:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 802a936:	2201      	movs	r2, #1
 802a938:	2b07      	cmp	r3, #7
 802a93a:	9425      	str	r4, [sp, #148]	; 0x94
 802a93c:	9324      	str	r3, [sp, #144]	; 0x90
 802a93e:	e888 0006 	stmia.w	r8, {r1, r2}
 802a942:	f300 83f4 	bgt.w	802b12e <_svfprintf_r+0xaee>
 802a946:	f108 0808 	add.w	r8, r8, #8
 802a94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a94c:	b16b      	cbz	r3, 802a96a <_svfprintf_r+0x32a>
 802a94e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a950:	3301      	adds	r3, #1
 802a952:	3402      	adds	r4, #2
 802a954:	a91c      	add	r1, sp, #112	; 0x70
 802a956:	2202      	movs	r2, #2
 802a958:	2b07      	cmp	r3, #7
 802a95a:	9425      	str	r4, [sp, #148]	; 0x94
 802a95c:	9324      	str	r3, [sp, #144]	; 0x90
 802a95e:	e888 0006 	stmia.w	r8, {r1, r2}
 802a962:	f300 83d9 	bgt.w	802b118 <_svfprintf_r+0xad8>
 802a966:	f108 0808 	add.w	r8, r8, #8
 802a96a:	2d80      	cmp	r5, #128	; 0x80
 802a96c:	f000 8322 	beq.w	802afb4 <_svfprintf_r+0x974>
 802a970:	9b06      	ldr	r3, [sp, #24]
 802a972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a974:	1a9f      	subs	r7, r3, r2
 802a976:	2f00      	cmp	r7, #0
 802a978:	dd36      	ble.n	802a9e8 <_svfprintf_r+0x3a8>
 802a97a:	2f10      	cmp	r7, #16
 802a97c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a97e:	4d8f      	ldr	r5, [pc, #572]	; (802abbc <_svfprintf_r+0x57c>)
 802a980:	dd27      	ble.n	802a9d2 <_svfprintf_r+0x392>
 802a982:	4642      	mov	r2, r8
 802a984:	4621      	mov	r1, r4
 802a986:	46b0      	mov	r8, r6
 802a988:	f04f 0b10 	mov.w	fp, #16
 802a98c:	462e      	mov	r6, r5
 802a98e:	9c08      	ldr	r4, [sp, #32]
 802a990:	9d07      	ldr	r5, [sp, #28]
 802a992:	e004      	b.n	802a99e <_svfprintf_r+0x35e>
 802a994:	3f10      	subs	r7, #16
 802a996:	2f10      	cmp	r7, #16
 802a998:	f102 0208 	add.w	r2, r2, #8
 802a99c:	dd15      	ble.n	802a9ca <_svfprintf_r+0x38a>
 802a99e:	3301      	adds	r3, #1
 802a9a0:	3110      	adds	r1, #16
 802a9a2:	2b07      	cmp	r3, #7
 802a9a4:	9125      	str	r1, [sp, #148]	; 0x94
 802a9a6:	9324      	str	r3, [sp, #144]	; 0x90
 802a9a8:	e882 0840 	stmia.w	r2, {r6, fp}
 802a9ac:	ddf2      	ble.n	802a994 <_svfprintf_r+0x354>
 802a9ae:	aa23      	add	r2, sp, #140	; 0x8c
 802a9b0:	4629      	mov	r1, r5
 802a9b2:	4620      	mov	r0, r4
 802a9b4:	f003 fef4 	bl	802e7a0 <__ssprint_r>
 802a9b8:	2800      	cmp	r0, #0
 802a9ba:	f47f af13 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802a9be:	3f10      	subs	r7, #16
 802a9c0:	2f10      	cmp	r7, #16
 802a9c2:	9925      	ldr	r1, [sp, #148]	; 0x94
 802a9c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a9c6:	464a      	mov	r2, r9
 802a9c8:	dce9      	bgt.n	802a99e <_svfprintf_r+0x35e>
 802a9ca:	4635      	mov	r5, r6
 802a9cc:	460c      	mov	r4, r1
 802a9ce:	4646      	mov	r6, r8
 802a9d0:	4690      	mov	r8, r2
 802a9d2:	3301      	adds	r3, #1
 802a9d4:	443c      	add	r4, r7
 802a9d6:	2b07      	cmp	r3, #7
 802a9d8:	9425      	str	r4, [sp, #148]	; 0x94
 802a9da:	9324      	str	r3, [sp, #144]	; 0x90
 802a9dc:	e888 00a0 	stmia.w	r8, {r5, r7}
 802a9e0:	f300 838f 	bgt.w	802b102 <_svfprintf_r+0xac2>
 802a9e4:	f108 0808 	add.w	r8, r8, #8
 802a9e8:	9b03      	ldr	r3, [sp, #12]
 802a9ea:	05df      	lsls	r7, r3, #23
 802a9ec:	f100 8273 	bmi.w	802aed6 <_svfprintf_r+0x896>
 802a9f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a9f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 802a9f4:	f8c8 6000 	str.w	r6, [r8]
 802a9f8:	3301      	adds	r3, #1
 802a9fa:	440c      	add	r4, r1
 802a9fc:	2b07      	cmp	r3, #7
 802a9fe:	9425      	str	r4, [sp, #148]	; 0x94
 802aa00:	f8c8 1004 	str.w	r1, [r8, #4]
 802aa04:	9324      	str	r3, [sp, #144]	; 0x90
 802aa06:	f300 835b 	bgt.w	802b0c0 <_svfprintf_r+0xa80>
 802aa0a:	f108 0808 	add.w	r8, r8, #8
 802aa0e:	9b03      	ldr	r3, [sp, #12]
 802aa10:	075b      	lsls	r3, r3, #29
 802aa12:	d53a      	bpl.n	802aa8a <_svfprintf_r+0x44a>
 802aa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa16:	9a04      	ldr	r2, [sp, #16]
 802aa18:	1a9d      	subs	r5, r3, r2
 802aa1a:	2d00      	cmp	r5, #0
 802aa1c:	dd35      	ble.n	802aa8a <_svfprintf_r+0x44a>
 802aa1e:	2d10      	cmp	r5, #16
 802aa20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa22:	dd20      	ble.n	802aa66 <_svfprintf_r+0x426>
 802aa24:	2610      	movs	r6, #16
 802aa26:	9f08      	ldr	r7, [sp, #32]
 802aa28:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802aa2c:	e004      	b.n	802aa38 <_svfprintf_r+0x3f8>
 802aa2e:	3d10      	subs	r5, #16
 802aa30:	2d10      	cmp	r5, #16
 802aa32:	f108 0808 	add.w	r8, r8, #8
 802aa36:	dd16      	ble.n	802aa66 <_svfprintf_r+0x426>
 802aa38:	3301      	adds	r3, #1
 802aa3a:	4a5f      	ldr	r2, [pc, #380]	; (802abb8 <_svfprintf_r+0x578>)
 802aa3c:	9324      	str	r3, [sp, #144]	; 0x90
 802aa3e:	3410      	adds	r4, #16
 802aa40:	2b07      	cmp	r3, #7
 802aa42:	9425      	str	r4, [sp, #148]	; 0x94
 802aa44:	e888 0044 	stmia.w	r8, {r2, r6}
 802aa48:	ddf1      	ble.n	802aa2e <_svfprintf_r+0x3ee>
 802aa4a:	aa23      	add	r2, sp, #140	; 0x8c
 802aa4c:	4659      	mov	r1, fp
 802aa4e:	4638      	mov	r0, r7
 802aa50:	f003 fea6 	bl	802e7a0 <__ssprint_r>
 802aa54:	2800      	cmp	r0, #0
 802aa56:	f47f aec5 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802aa5a:	3d10      	subs	r5, #16
 802aa5c:	2d10      	cmp	r5, #16
 802aa5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802aa60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa62:	46c8      	mov	r8, r9
 802aa64:	dce8      	bgt.n	802aa38 <_svfprintf_r+0x3f8>
 802aa66:	3301      	adds	r3, #1
 802aa68:	4a53      	ldr	r2, [pc, #332]	; (802abb8 <_svfprintf_r+0x578>)
 802aa6a:	9324      	str	r3, [sp, #144]	; 0x90
 802aa6c:	442c      	add	r4, r5
 802aa6e:	2b07      	cmp	r3, #7
 802aa70:	9425      	str	r4, [sp, #148]	; 0x94
 802aa72:	e888 0024 	stmia.w	r8, {r2, r5}
 802aa76:	dd08      	ble.n	802aa8a <_svfprintf_r+0x44a>
 802aa78:	aa23      	add	r2, sp, #140	; 0x8c
 802aa7a:	9907      	ldr	r1, [sp, #28]
 802aa7c:	9808      	ldr	r0, [sp, #32]
 802aa7e:	f003 fe8f 	bl	802e7a0 <__ssprint_r>
 802aa82:	2800      	cmp	r0, #0
 802aa84:	f47f aeae 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802aa88:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802aa8a:	9b05      	ldr	r3, [sp, #20]
 802aa8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802aa8e:	9904      	ldr	r1, [sp, #16]
 802aa90:	428a      	cmp	r2, r1
 802aa92:	bfac      	ite	ge
 802aa94:	189b      	addge	r3, r3, r2
 802aa96:	185b      	addlt	r3, r3, r1
 802aa98:	9305      	str	r3, [sp, #20]
 802aa9a:	2c00      	cmp	r4, #0
 802aa9c:	f040 831b 	bne.w	802b0d6 <_svfprintf_r+0xa96>
 802aaa0:	2300      	movs	r3, #0
 802aaa2:	9324      	str	r3, [sp, #144]	; 0x90
 802aaa4:	46c8      	mov	r8, r9
 802aaa6:	e5f2      	b.n	802a68e <_svfprintf_r+0x4e>
 802aaa8:	930d      	str	r3, [sp, #52]	; 0x34
 802aaaa:	f01b 0320 	ands.w	r3, fp, #32
 802aaae:	f040 81de 	bne.w	802ae6e <_svfprintf_r+0x82e>
 802aab2:	f01b 0210 	ands.w	r2, fp, #16
 802aab6:	f040 842d 	bne.w	802b314 <_svfprintf_r+0xcd4>
 802aaba:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 802aabe:	f000 8429 	beq.w	802b314 <_svfprintf_r+0xcd4>
 802aac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802aac4:	4613      	mov	r3, r2
 802aac6:	460a      	mov	r2, r1
 802aac8:	3204      	adds	r2, #4
 802aaca:	880c      	ldrh	r4, [r1, #0]
 802aacc:	920b      	str	r2, [sp, #44]	; 0x2c
 802aace:	2500      	movs	r5, #0
 802aad0:	e6a9      	b.n	802a826 <_svfprintf_r+0x1e6>
 802aad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802aad4:	930d      	str	r3, [sp, #52]	; 0x34
 802aad6:	6816      	ldr	r6, [r2, #0]
 802aad8:	2400      	movs	r4, #0
 802aada:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 802aade:	1d15      	adds	r5, r2, #4
 802aae0:	2e00      	cmp	r6, #0
 802aae2:	f000 86b5 	beq.w	802b850 <_svfprintf_r+0x1210>
 802aae6:	9a06      	ldr	r2, [sp, #24]
 802aae8:	1c53      	adds	r3, r2, #1
 802aaea:	f000 8617 	beq.w	802b71c <_svfprintf_r+0x10dc>
 802aaee:	4621      	mov	r1, r4
 802aaf0:	4630      	mov	r0, r6
 802aaf2:	f7e2 fa8d 	bl	800d010 <memchr>
 802aaf6:	2800      	cmp	r0, #0
 802aaf8:	f000 8708 	beq.w	802b90c <_svfprintf_r+0x12cc>
 802aafc:	1b83      	subs	r3, r0, r6
 802aafe:	930a      	str	r3, [sp, #40]	; 0x28
 802ab00:	9406      	str	r4, [sp, #24]
 802ab02:	950b      	str	r5, [sp, #44]	; 0x2c
 802ab04:	f8cd b00c 	str.w	fp, [sp, #12]
 802ab08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802ab0c:	9304      	str	r3, [sp, #16]
 802ab0e:	940e      	str	r4, [sp, #56]	; 0x38
 802ab10:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802ab14:	e6ac      	b.n	802a870 <_svfprintf_r+0x230>
 802ab16:	f89a 3000 	ldrb.w	r3, [sl]
 802ab1a:	2201      	movs	r2, #1
 802ab1c:	212b      	movs	r1, #43	; 0x2b
 802ab1e:	e5e7      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ab20:	f04b 0b20 	orr.w	fp, fp, #32
 802ab24:	f89a 3000 	ldrb.w	r3, [sl]
 802ab28:	e5e2      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ab2a:	930d      	str	r3, [sp, #52]	; 0x34
 802ab2c:	2a00      	cmp	r2, #0
 802ab2e:	f040 87a4 	bne.w	802ba7a <_svfprintf_r+0x143a>
 802ab32:	4b23      	ldr	r3, [pc, #140]	; (802abc0 <_svfprintf_r+0x580>)
 802ab34:	9312      	str	r3, [sp, #72]	; 0x48
 802ab36:	f01b 0f20 	tst.w	fp, #32
 802ab3a:	f040 8112 	bne.w	802ad62 <_svfprintf_r+0x722>
 802ab3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ab40:	f01b 0f10 	tst.w	fp, #16
 802ab44:	4613      	mov	r3, r2
 802ab46:	f040 83e0 	bne.w	802b30a <_svfprintf_r+0xcca>
 802ab4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802ab4e:	f000 83dc 	beq.w	802b30a <_svfprintf_r+0xcca>
 802ab52:	3304      	adds	r3, #4
 802ab54:	8814      	ldrh	r4, [r2, #0]
 802ab56:	930b      	str	r3, [sp, #44]	; 0x2c
 802ab58:	2500      	movs	r5, #0
 802ab5a:	f01b 0f01 	tst.w	fp, #1
 802ab5e:	f000 810d 	beq.w	802ad7c <_svfprintf_r+0x73c>
 802ab62:	ea54 0305 	orrs.w	r3, r4, r5
 802ab66:	f000 8109 	beq.w	802ad7c <_svfprintf_r+0x73c>
 802ab6a:	2330      	movs	r3, #48	; 0x30
 802ab6c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 802ab70:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 802ab74:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 802ab78:	f04b 0b02 	orr.w	fp, fp, #2
 802ab7c:	2302      	movs	r3, #2
 802ab7e:	e652      	b.n	802a826 <_svfprintf_r+0x1e6>
 802ab80:	f89a 3000 	ldrb.w	r3, [sl]
 802ab84:	2900      	cmp	r1, #0
 802ab86:	f47f adb3 	bne.w	802a6f0 <_svfprintf_r+0xb0>
 802ab8a:	2201      	movs	r2, #1
 802ab8c:	2120      	movs	r1, #32
 802ab8e:	e5af      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ab90:	f04b 0b01 	orr.w	fp, fp, #1
 802ab94:	f89a 3000 	ldrb.w	r3, [sl]
 802ab98:	e5aa      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ab9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802ab9c:	6823      	ldr	r3, [r4, #0]
 802ab9e:	9309      	str	r3, [sp, #36]	; 0x24
 802aba0:	4618      	mov	r0, r3
 802aba2:	2800      	cmp	r0, #0
 802aba4:	4623      	mov	r3, r4
 802aba6:	f103 0304 	add.w	r3, r3, #4
 802abaa:	f6ff ae03 	blt.w	802a7b4 <_svfprintf_r+0x174>
 802abae:	930b      	str	r3, [sp, #44]	; 0x2c
 802abb0:	f89a 3000 	ldrb.w	r3, [sl]
 802abb4:	e59c      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802abb6:	bf00      	nop
 802abb8:	08030d90 	.word	0x08030d90
 802abbc:	08030da0 	.word	0x08030da0
 802abc0:	08030d64 	.word	0x08030d64
 802abc4:	f04b 0b10 	orr.w	fp, fp, #16
 802abc8:	f01b 0f20 	tst.w	fp, #32
 802abcc:	930d      	str	r3, [sp, #52]	; 0x34
 802abce:	f43f ae1b 	beq.w	802a808 <_svfprintf_r+0x1c8>
 802abd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802abd4:	3507      	adds	r5, #7
 802abd6:	f025 0307 	bic.w	r3, r5, #7
 802abda:	f103 0208 	add.w	r2, r3, #8
 802abde:	e9d3 4500 	ldrd	r4, r5, [r3]
 802abe2:	920b      	str	r2, [sp, #44]	; 0x2c
 802abe4:	2301      	movs	r3, #1
 802abe6:	e61e      	b.n	802a826 <_svfprintf_r+0x1e6>
 802abe8:	f89a 3000 	ldrb.w	r3, [sl]
 802abec:	2b2a      	cmp	r3, #42	; 0x2a
 802abee:	f10a 0401 	add.w	r4, sl, #1
 802abf2:	f000 8735 	beq.w	802ba60 <_svfprintf_r+0x1420>
 802abf6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 802abfa:	2809      	cmp	r0, #9
 802abfc:	46a2      	mov	sl, r4
 802abfe:	f200 8691 	bhi.w	802b924 <_svfprintf_r+0x12e4>
 802ac02:	2300      	movs	r3, #0
 802ac04:	461c      	mov	r4, r3
 802ac06:	f81a 3b01 	ldrb.w	r3, [sl], #1
 802ac0a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802ac0e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ac12:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 802ac16:	2809      	cmp	r0, #9
 802ac18:	d9f5      	bls.n	802ac06 <_svfprintf_r+0x5c6>
 802ac1a:	9406      	str	r4, [sp, #24]
 802ac1c:	e56a      	b.n	802a6f4 <_svfprintf_r+0xb4>
 802ac1e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 802ac22:	f89a 3000 	ldrb.w	r3, [sl]
 802ac26:	e563      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ac28:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 802ac2c:	f89a 3000 	ldrb.w	r3, [sl]
 802ac30:	e55e      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ac32:	f89a 3000 	ldrb.w	r3, [sl]
 802ac36:	2b6c      	cmp	r3, #108	; 0x6c
 802ac38:	bf03      	ittte	eq
 802ac3a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 802ac3e:	f04b 0b20 	orreq.w	fp, fp, #32
 802ac42:	f10a 0a01 	addeq.w	sl, sl, #1
 802ac46:	f04b 0b10 	orrne.w	fp, fp, #16
 802ac4a:	e551      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ac4c:	2a00      	cmp	r2, #0
 802ac4e:	f040 8718 	bne.w	802ba82 <_svfprintf_r+0x1442>
 802ac52:	f01b 0f20 	tst.w	fp, #32
 802ac56:	f040 8509 	bne.w	802b66c <_svfprintf_r+0x102c>
 802ac5a:	f01b 0f10 	tst.w	fp, #16
 802ac5e:	f040 84bc 	bne.w	802b5da <_svfprintf_r+0xf9a>
 802ac62:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802ac66:	f000 84b8 	beq.w	802b5da <_svfprintf_r+0xf9a>
 802ac6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ac6c:	6813      	ldr	r3, [r2, #0]
 802ac6e:	3204      	adds	r2, #4
 802ac70:	920b      	str	r2, [sp, #44]	; 0x2c
 802ac72:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802ac76:	801a      	strh	r2, [r3, #0]
 802ac78:	e509      	b.n	802a68e <_svfprintf_r+0x4e>
 802ac7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ac7c:	4bb9      	ldr	r3, [pc, #740]	; (802af64 <_svfprintf_r+0x924>)
 802ac7e:	680c      	ldr	r4, [r1, #0]
 802ac80:	9312      	str	r3, [sp, #72]	; 0x48
 802ac82:	2230      	movs	r2, #48	; 0x30
 802ac84:	2378      	movs	r3, #120	; 0x78
 802ac86:	3104      	adds	r1, #4
 802ac88:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 802ac8c:	930d      	str	r3, [sp, #52]	; 0x34
 802ac8e:	f04b 0b02 	orr.w	fp, fp, #2
 802ac92:	910b      	str	r1, [sp, #44]	; 0x2c
 802ac94:	2500      	movs	r5, #0
 802ac96:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
 802ac9a:	2302      	movs	r3, #2
 802ac9c:	e5c3      	b.n	802a826 <_svfprintf_r+0x1e6>
 802ac9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802aca0:	930d      	str	r3, [sp, #52]	; 0x34
 802aca2:	680a      	ldr	r2, [r1, #0]
 802aca4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 802aca8:	2300      	movs	r3, #0
 802acaa:	460a      	mov	r2, r1
 802acac:	461f      	mov	r7, r3
 802acae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 802acb2:	3204      	adds	r2, #4
 802acb4:	2301      	movs	r3, #1
 802acb6:	9304      	str	r3, [sp, #16]
 802acb8:	f8cd b00c 	str.w	fp, [sp, #12]
 802acbc:	9706      	str	r7, [sp, #24]
 802acbe:	970e      	str	r7, [sp, #56]	; 0x38
 802acc0:	920b      	str	r2, [sp, #44]	; 0x2c
 802acc2:	930a      	str	r3, [sp, #40]	; 0x28
 802acc4:	ae26      	add	r6, sp, #152	; 0x98
 802acc6:	e5d7      	b.n	802a878 <_svfprintf_r+0x238>
 802acc8:	930d      	str	r3, [sp, #52]	; 0x34
 802acca:	2a00      	cmp	r2, #0
 802accc:	f040 86f8 	bne.w	802bac0 <_svfprintf_r+0x1480>
 802acd0:	f01b 0f20 	tst.w	fp, #32
 802acd4:	d15d      	bne.n	802ad92 <_svfprintf_r+0x752>
 802acd6:	f01b 0f10 	tst.w	fp, #16
 802acda:	f040 8335 	bne.w	802b348 <_svfprintf_r+0xd08>
 802acde:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802ace2:	f000 8331 	beq.w	802b348 <_svfprintf_r+0xd08>
 802ace6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ace8:	f9b1 4000 	ldrsh.w	r4, [r1]
 802acec:	3104      	adds	r1, #4
 802acee:	17e5      	asrs	r5, r4, #31
 802acf0:	4622      	mov	r2, r4
 802acf2:	462b      	mov	r3, r5
 802acf4:	910b      	str	r1, [sp, #44]	; 0x2c
 802acf6:	2a00      	cmp	r2, #0
 802acf8:	f173 0300 	sbcs.w	r3, r3, #0
 802acfc:	db58      	blt.n	802adb0 <_svfprintf_r+0x770>
 802acfe:	9906      	ldr	r1, [sp, #24]
 802ad00:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802ad04:	1c4a      	adds	r2, r1, #1
 802ad06:	f04f 0301 	mov.w	r3, #1
 802ad0a:	f47f ad93 	bne.w	802a834 <_svfprintf_r+0x1f4>
 802ad0e:	ea54 0205 	orrs.w	r2, r4, r5
 802ad12:	f000 81ec 	beq.w	802b0ee <_svfprintf_r+0xaae>
 802ad16:	f8cd b00c 	str.w	fp, [sp, #12]
 802ad1a:	2b01      	cmp	r3, #1
 802ad1c:	f000 8283 	beq.w	802b226 <_svfprintf_r+0xbe6>
 802ad20:	2b02      	cmp	r3, #2
 802ad22:	f040 8213 	bne.w	802b14c <_svfprintf_r+0xb0c>
 802ad26:	9812      	ldr	r0, [sp, #72]	; 0x48
 802ad28:	464e      	mov	r6, r9
 802ad2a:	0923      	lsrs	r3, r4, #4
 802ad2c:	f004 010f 	and.w	r1, r4, #15
 802ad30:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 802ad34:	092a      	lsrs	r2, r5, #4
 802ad36:	461c      	mov	r4, r3
 802ad38:	4615      	mov	r5, r2
 802ad3a:	5c43      	ldrb	r3, [r0, r1]
 802ad3c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 802ad40:	ea54 0305 	orrs.w	r3, r4, r5
 802ad44:	d1f1      	bne.n	802ad2a <_svfprintf_r+0x6ea>
 802ad46:	eba9 0306 	sub.w	r3, r9, r6
 802ad4a:	930a      	str	r3, [sp, #40]	; 0x28
 802ad4c:	e588      	b.n	802a860 <_svfprintf_r+0x220>
 802ad4e:	930d      	str	r3, [sp, #52]	; 0x34
 802ad50:	2a00      	cmp	r2, #0
 802ad52:	f040 86b1 	bne.w	802bab8 <_svfprintf_r+0x1478>
 802ad56:	4b84      	ldr	r3, [pc, #528]	; (802af68 <_svfprintf_r+0x928>)
 802ad58:	9312      	str	r3, [sp, #72]	; 0x48
 802ad5a:	f01b 0f20 	tst.w	fp, #32
 802ad5e:	f43f aeee 	beq.w	802ab3e <_svfprintf_r+0x4fe>
 802ad62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802ad64:	3507      	adds	r5, #7
 802ad66:	f025 0307 	bic.w	r3, r5, #7
 802ad6a:	f103 0208 	add.w	r2, r3, #8
 802ad6e:	f01b 0f01 	tst.w	fp, #1
 802ad72:	920b      	str	r2, [sp, #44]	; 0x2c
 802ad74:	e9d3 4500 	ldrd	r4, r5, [r3]
 802ad78:	f47f aef3 	bne.w	802ab62 <_svfprintf_r+0x522>
 802ad7c:	2302      	movs	r3, #2
 802ad7e:	e552      	b.n	802a826 <_svfprintf_r+0x1e6>
 802ad80:	930d      	str	r3, [sp, #52]	; 0x34
 802ad82:	2a00      	cmp	r2, #0
 802ad84:	f040 8694 	bne.w	802bab0 <_svfprintf_r+0x1470>
 802ad88:	f04b 0b10 	orr.w	fp, fp, #16
 802ad8c:	f01b 0f20 	tst.w	fp, #32
 802ad90:	d0a1      	beq.n	802acd6 <_svfprintf_r+0x696>
 802ad92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802ad94:	3507      	adds	r5, #7
 802ad96:	f025 0507 	bic.w	r5, r5, #7
 802ad9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ad9e:	2a00      	cmp	r2, #0
 802ada0:	f105 0108 	add.w	r1, r5, #8
 802ada4:	461d      	mov	r5, r3
 802ada6:	f173 0300 	sbcs.w	r3, r3, #0
 802adaa:	910b      	str	r1, [sp, #44]	; 0x2c
 802adac:	4614      	mov	r4, r2
 802adae:	daa6      	bge.n	802acfe <_svfprintf_r+0x6be>
 802adb0:	272d      	movs	r7, #45	; 0x2d
 802adb2:	4264      	negs	r4, r4
 802adb4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802adb8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 802adbc:	2301      	movs	r3, #1
 802adbe:	e535      	b.n	802a82c <_svfprintf_r+0x1ec>
 802adc0:	930d      	str	r3, [sp, #52]	; 0x34
 802adc2:	2a00      	cmp	r2, #0
 802adc4:	f040 8670 	bne.w	802baa8 <_svfprintf_r+0x1468>
 802adc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802adca:	f01b 0f08 	tst.w	fp, #8
 802adce:	f105 0507 	add.w	r5, r5, #7
 802add2:	f000 83e8 	beq.w	802b5a6 <_svfprintf_r+0xf66>
 802add6:	f025 0307 	bic.w	r3, r5, #7
 802adda:	ed93 7b00 	vldr	d7, [r3]
 802adde:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802ade2:	f103 0208 	add.w	r2, r3, #8
 802ade6:	920b      	str	r2, [sp, #44]	; 0x2c
 802ade8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 802adec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 802adf0:	9116      	str	r1, [sp, #88]	; 0x58
 802adf2:	9317      	str	r3, [sp, #92]	; 0x5c
 802adf4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 802adf8:	f04f 32ff 	mov.w	r2, #4294967295
 802adfc:	4620      	mov	r0, r4
 802adfe:	4629      	mov	r1, r5
 802ae00:	4b5a      	ldr	r3, [pc, #360]	; (802af6c <_svfprintf_r+0x92c>)
 802ae02:	f7e1 fdf5 	bl	800c9f0 <__aeabi_dcmpun>
 802ae06:	2800      	cmp	r0, #0
 802ae08:	f040 834f 	bne.w	802b4aa <_svfprintf_r+0xe6a>
 802ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 802ae10:	4b56      	ldr	r3, [pc, #344]	; (802af6c <_svfprintf_r+0x92c>)
 802ae12:	4620      	mov	r0, r4
 802ae14:	4629      	mov	r1, r5
 802ae16:	f7e1 fdcd 	bl	800c9b4 <__aeabi_dcmple>
 802ae1a:	2800      	cmp	r0, #0
 802ae1c:	f040 8345 	bne.w	802b4aa <_svfprintf_r+0xe6a>
 802ae20:	2200      	movs	r2, #0
 802ae22:	2300      	movs	r3, #0
 802ae24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802ae28:	f7e1 fdba 	bl	800c9a0 <__aeabi_dcmplt>
 802ae2c:	2800      	cmp	r0, #0
 802ae2e:	f040 8533 	bne.w	802b898 <_svfprintf_r+0x1258>
 802ae32:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802ae36:	4e4e      	ldr	r6, [pc, #312]	; (802af70 <_svfprintf_r+0x930>)
 802ae38:	4b4e      	ldr	r3, [pc, #312]	; (802af74 <_svfprintf_r+0x934>)
 802ae3a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
 802ae3e:	9003      	str	r0, [sp, #12]
 802ae40:	980d      	ldr	r0, [sp, #52]	; 0x34
 802ae42:	2203      	movs	r2, #3
 802ae44:	2100      	movs	r1, #0
 802ae46:	9204      	str	r2, [sp, #16]
 802ae48:	9106      	str	r1, [sp, #24]
 802ae4a:	2847      	cmp	r0, #71	; 0x47
 802ae4c:	bfd8      	it	le
 802ae4e:	461e      	movle	r6, r3
 802ae50:	920a      	str	r2, [sp, #40]	; 0x28
 802ae52:	910e      	str	r1, [sp, #56]	; 0x38
 802ae54:	e50c      	b.n	802a870 <_svfprintf_r+0x230>
 802ae56:	f04b 0b08 	orr.w	fp, fp, #8
 802ae5a:	f89a 3000 	ldrb.w	r3, [sl]
 802ae5e:	e447      	b.n	802a6f0 <_svfprintf_r+0xb0>
 802ae60:	f04b 0b10 	orr.w	fp, fp, #16
 802ae64:	930d      	str	r3, [sp, #52]	; 0x34
 802ae66:	f01b 0320 	ands.w	r3, fp, #32
 802ae6a:	f43f ae22 	beq.w	802aab2 <_svfprintf_r+0x472>
 802ae6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802ae70:	3507      	adds	r5, #7
 802ae72:	f025 0307 	bic.w	r3, r5, #7
 802ae76:	f103 0208 	add.w	r2, r3, #8
 802ae7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802ae7e:	920b      	str	r2, [sp, #44]	; 0x2c
 802ae80:	2300      	movs	r3, #0
 802ae82:	e4d0      	b.n	802a826 <_svfprintf_r+0x1e6>
 802ae84:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 802ae88:	2300      	movs	r3, #0
 802ae8a:	461c      	mov	r4, r3
 802ae8c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 802ae90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802ae94:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ae98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 802ae9c:	2809      	cmp	r0, #9
 802ae9e:	d9f5      	bls.n	802ae8c <_svfprintf_r+0x84c>
 802aea0:	9409      	str	r4, [sp, #36]	; 0x24
 802aea2:	e427      	b.n	802a6f4 <_svfprintf_r+0xb4>
 802aea4:	930d      	str	r3, [sp, #52]	; 0x34
 802aea6:	2a00      	cmp	r2, #0
 802aea8:	f040 85ef 	bne.w	802ba8a <_svfprintf_r+0x144a>
 802aeac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802aeae:	2a00      	cmp	r2, #0
 802aeb0:	f43f ac91 	beq.w	802a7d6 <_svfprintf_r+0x196>
 802aeb4:	2300      	movs	r3, #0
 802aeb6:	2101      	movs	r1, #1
 802aeb8:	461f      	mov	r7, r3
 802aeba:	9104      	str	r1, [sp, #16]
 802aebc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 802aec0:	f8cd b00c 	str.w	fp, [sp, #12]
 802aec4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 802aec8:	9306      	str	r3, [sp, #24]
 802aeca:	930e      	str	r3, [sp, #56]	; 0x38
 802aecc:	910a      	str	r1, [sp, #40]	; 0x28
 802aece:	ae26      	add	r6, sp, #152	; 0x98
 802aed0:	e4d2      	b.n	802a878 <_svfprintf_r+0x238>
 802aed2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802aed4:	e529      	b.n	802a92a <_svfprintf_r+0x2ea>
 802aed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aed8:	2b65      	cmp	r3, #101	; 0x65
 802aeda:	f340 80a9 	ble.w	802b030 <_svfprintf_r+0x9f0>
 802aede:	2200      	movs	r2, #0
 802aee0:	2300      	movs	r3, #0
 802aee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802aee6:	f7e1 fd51 	bl	800c98c <__aeabi_dcmpeq>
 802aeea:	2800      	cmp	r0, #0
 802aeec:	f000 8152 	beq.w	802b194 <_svfprintf_r+0xb54>
 802aef0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aef2:	4a21      	ldr	r2, [pc, #132]	; (802af78 <_svfprintf_r+0x938>)
 802aef4:	f8c8 2000 	str.w	r2, [r8]
 802aef8:	3301      	adds	r3, #1
 802aefa:	3401      	adds	r4, #1
 802aefc:	2201      	movs	r2, #1
 802aefe:	2b07      	cmp	r3, #7
 802af00:	9425      	str	r4, [sp, #148]	; 0x94
 802af02:	9324      	str	r3, [sp, #144]	; 0x90
 802af04:	f8c8 2004 	str.w	r2, [r8, #4]
 802af08:	f300 836f 	bgt.w	802b5ea <_svfprintf_r+0xfaa>
 802af0c:	f108 0808 	add.w	r8, r8, #8
 802af10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802af12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802af14:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802af16:	4293      	cmp	r3, r2
 802af18:	db03      	blt.n	802af22 <_svfprintf_r+0x8e2>
 802af1a:	9b03      	ldr	r3, [sp, #12]
 802af1c:	07dd      	lsls	r5, r3, #31
 802af1e:	f57f ad76 	bpl.w	802aa0e <_svfprintf_r+0x3ce>
 802af22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802af24:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802af26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802af28:	f8c8 2000 	str.w	r2, [r8]
 802af2c:	3301      	adds	r3, #1
 802af2e:	440c      	add	r4, r1
 802af30:	2b07      	cmp	r3, #7
 802af32:	f8c8 1004 	str.w	r1, [r8, #4]
 802af36:	9425      	str	r4, [sp, #148]	; 0x94
 802af38:	9324      	str	r3, [sp, #144]	; 0x90
 802af3a:	f300 83a3 	bgt.w	802b684 <_svfprintf_r+0x1044>
 802af3e:	f108 0808 	add.w	r8, r8, #8
 802af42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802af44:	1e5e      	subs	r6, r3, #1
 802af46:	2e00      	cmp	r6, #0
 802af48:	f77f ad61 	ble.w	802aa0e <_svfprintf_r+0x3ce>
 802af4c:	2e10      	cmp	r6, #16
 802af4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802af50:	4d0a      	ldr	r5, [pc, #40]	; (802af7c <_svfprintf_r+0x93c>)
 802af52:	f340 81ef 	ble.w	802b334 <_svfprintf_r+0xcf4>
 802af56:	4622      	mov	r2, r4
 802af58:	2710      	movs	r7, #16
 802af5a:	f8dd b020 	ldr.w	fp, [sp, #32]
 802af5e:	9c07      	ldr	r4, [sp, #28]
 802af60:	e014      	b.n	802af8c <_svfprintf_r+0x94c>
 802af62:	bf00      	nop
 802af64:	08030d64 	.word	0x08030d64
 802af68:	08030d50 	.word	0x08030d50
 802af6c:	7fefffff 	.word	0x7fefffff
 802af70:	08030d44 	.word	0x08030d44
 802af74:	08030d40 	.word	0x08030d40
 802af78:	08030d80 	.word	0x08030d80
 802af7c:	08030da0 	.word	0x08030da0
 802af80:	f108 0808 	add.w	r8, r8, #8
 802af84:	3e10      	subs	r6, #16
 802af86:	2e10      	cmp	r6, #16
 802af88:	f340 81d3 	ble.w	802b332 <_svfprintf_r+0xcf2>
 802af8c:	3301      	adds	r3, #1
 802af8e:	3210      	adds	r2, #16
 802af90:	2b07      	cmp	r3, #7
 802af92:	9225      	str	r2, [sp, #148]	; 0x94
 802af94:	9324      	str	r3, [sp, #144]	; 0x90
 802af96:	e888 00a0 	stmia.w	r8, {r5, r7}
 802af9a:	ddf1      	ble.n	802af80 <_svfprintf_r+0x940>
 802af9c:	aa23      	add	r2, sp, #140	; 0x8c
 802af9e:	4621      	mov	r1, r4
 802afa0:	4658      	mov	r0, fp
 802afa2:	f003 fbfd 	bl	802e7a0 <__ssprint_r>
 802afa6:	2800      	cmp	r0, #0
 802afa8:	f47f ac1c 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802afac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802afae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802afb0:	46c8      	mov	r8, r9
 802afb2:	e7e7      	b.n	802af84 <_svfprintf_r+0x944>
 802afb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802afb6:	9a04      	ldr	r2, [sp, #16]
 802afb8:	1a9f      	subs	r7, r3, r2
 802afba:	2f00      	cmp	r7, #0
 802afbc:	f77f acd8 	ble.w	802a970 <_svfprintf_r+0x330>
 802afc0:	2f10      	cmp	r7, #16
 802afc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802afc4:	4db7      	ldr	r5, [pc, #732]	; (802b2a4 <_svfprintf_r+0xc64>)
 802afc6:	dd27      	ble.n	802b018 <_svfprintf_r+0x9d8>
 802afc8:	4642      	mov	r2, r8
 802afca:	4621      	mov	r1, r4
 802afcc:	46b0      	mov	r8, r6
 802afce:	f04f 0b10 	mov.w	fp, #16
 802afd2:	462e      	mov	r6, r5
 802afd4:	9c08      	ldr	r4, [sp, #32]
 802afd6:	9d07      	ldr	r5, [sp, #28]
 802afd8:	e004      	b.n	802afe4 <_svfprintf_r+0x9a4>
 802afda:	3f10      	subs	r7, #16
 802afdc:	2f10      	cmp	r7, #16
 802afde:	f102 0208 	add.w	r2, r2, #8
 802afe2:	dd15      	ble.n	802b010 <_svfprintf_r+0x9d0>
 802afe4:	3301      	adds	r3, #1
 802afe6:	3110      	adds	r1, #16
 802afe8:	2b07      	cmp	r3, #7
 802afea:	9125      	str	r1, [sp, #148]	; 0x94
 802afec:	9324      	str	r3, [sp, #144]	; 0x90
 802afee:	e882 0840 	stmia.w	r2, {r6, fp}
 802aff2:	ddf2      	ble.n	802afda <_svfprintf_r+0x99a>
 802aff4:	aa23      	add	r2, sp, #140	; 0x8c
 802aff6:	4629      	mov	r1, r5
 802aff8:	4620      	mov	r0, r4
 802affa:	f003 fbd1 	bl	802e7a0 <__ssprint_r>
 802affe:	2800      	cmp	r0, #0
 802b000:	f47f abf0 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b004:	3f10      	subs	r7, #16
 802b006:	2f10      	cmp	r7, #16
 802b008:	9925      	ldr	r1, [sp, #148]	; 0x94
 802b00a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b00c:	464a      	mov	r2, r9
 802b00e:	dce9      	bgt.n	802afe4 <_svfprintf_r+0x9a4>
 802b010:	4635      	mov	r5, r6
 802b012:	460c      	mov	r4, r1
 802b014:	4646      	mov	r6, r8
 802b016:	4690      	mov	r8, r2
 802b018:	3301      	adds	r3, #1
 802b01a:	443c      	add	r4, r7
 802b01c:	2b07      	cmp	r3, #7
 802b01e:	9425      	str	r4, [sp, #148]	; 0x94
 802b020:	9324      	str	r3, [sp, #144]	; 0x90
 802b022:	e888 00a0 	stmia.w	r8, {r5, r7}
 802b026:	f300 8234 	bgt.w	802b492 <_svfprintf_r+0xe52>
 802b02a:	f108 0808 	add.w	r8, r8, #8
 802b02e:	e49f      	b.n	802a970 <_svfprintf_r+0x330>
 802b030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b032:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802b034:	2b01      	cmp	r3, #1
 802b036:	f340 8200 	ble.w	802b43a <_svfprintf_r+0xdfa>
 802b03a:	3701      	adds	r7, #1
 802b03c:	3401      	adds	r4, #1
 802b03e:	2301      	movs	r3, #1
 802b040:	2f07      	cmp	r7, #7
 802b042:	9425      	str	r4, [sp, #148]	; 0x94
 802b044:	9724      	str	r7, [sp, #144]	; 0x90
 802b046:	f8c8 6000 	str.w	r6, [r8]
 802b04a:	f8c8 3004 	str.w	r3, [r8, #4]
 802b04e:	f300 8205 	bgt.w	802b45c <_svfprintf_r+0xe1c>
 802b052:	f108 0808 	add.w	r8, r8, #8
 802b056:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b058:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b05a:	f8c8 3000 	str.w	r3, [r8]
 802b05e:	3701      	adds	r7, #1
 802b060:	4414      	add	r4, r2
 802b062:	2f07      	cmp	r7, #7
 802b064:	9425      	str	r4, [sp, #148]	; 0x94
 802b066:	9724      	str	r7, [sp, #144]	; 0x90
 802b068:	f8c8 2004 	str.w	r2, [r8, #4]
 802b06c:	f300 8202 	bgt.w	802b474 <_svfprintf_r+0xe34>
 802b070:	f108 0808 	add.w	r8, r8, #8
 802b074:	2300      	movs	r3, #0
 802b076:	2200      	movs	r2, #0
 802b078:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b07c:	f7e1 fc86 	bl	800c98c <__aeabi_dcmpeq>
 802b080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b082:	2800      	cmp	r0, #0
 802b084:	f040 8101 	bne.w	802b28a <_svfprintf_r+0xc4a>
 802b088:	3b01      	subs	r3, #1
 802b08a:	3701      	adds	r7, #1
 802b08c:	3601      	adds	r6, #1
 802b08e:	441c      	add	r4, r3
 802b090:	2f07      	cmp	r7, #7
 802b092:	9724      	str	r7, [sp, #144]	; 0x90
 802b094:	9425      	str	r4, [sp, #148]	; 0x94
 802b096:	f8c8 6000 	str.w	r6, [r8]
 802b09a:	f8c8 3004 	str.w	r3, [r8, #4]
 802b09e:	f300 8128 	bgt.w	802b2f2 <_svfprintf_r+0xcb2>
 802b0a2:	f108 0808 	add.w	r8, r8, #8
 802b0a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802b0a8:	f8c8 2004 	str.w	r2, [r8, #4]
 802b0ac:	3701      	adds	r7, #1
 802b0ae:	4414      	add	r4, r2
 802b0b0:	ab1f      	add	r3, sp, #124	; 0x7c
 802b0b2:	2f07      	cmp	r7, #7
 802b0b4:	9425      	str	r4, [sp, #148]	; 0x94
 802b0b6:	9724      	str	r7, [sp, #144]	; 0x90
 802b0b8:	f8c8 3000 	str.w	r3, [r8]
 802b0bc:	f77f aca5 	ble.w	802aa0a <_svfprintf_r+0x3ca>
 802b0c0:	aa23      	add	r2, sp, #140	; 0x8c
 802b0c2:	9907      	ldr	r1, [sp, #28]
 802b0c4:	9808      	ldr	r0, [sp, #32]
 802b0c6:	f003 fb6b 	bl	802e7a0 <__ssprint_r>
 802b0ca:	2800      	cmp	r0, #0
 802b0cc:	f47f ab8a 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b0d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b0d2:	46c8      	mov	r8, r9
 802b0d4:	e49b      	b.n	802aa0e <_svfprintf_r+0x3ce>
 802b0d6:	aa23      	add	r2, sp, #140	; 0x8c
 802b0d8:	9907      	ldr	r1, [sp, #28]
 802b0da:	9808      	ldr	r0, [sp, #32]
 802b0dc:	f003 fb60 	bl	802e7a0 <__ssprint_r>
 802b0e0:	2800      	cmp	r0, #0
 802b0e2:	f43f acdd 	beq.w	802aaa0 <_svfprintf_r+0x460>
 802b0e6:	f7ff bb7d 	b.w	802a7e4 <_svfprintf_r+0x1a4>
 802b0ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b0ee:	2b01      	cmp	r3, #1
 802b0f0:	f000 8135 	beq.w	802b35e <_svfprintf_r+0xd1e>
 802b0f4:	2b02      	cmp	r3, #2
 802b0f6:	d125      	bne.n	802b144 <_svfprintf_r+0xb04>
 802b0f8:	f8cd b00c 	str.w	fp, [sp, #12]
 802b0fc:	2400      	movs	r4, #0
 802b0fe:	2500      	movs	r5, #0
 802b100:	e611      	b.n	802ad26 <_svfprintf_r+0x6e6>
 802b102:	aa23      	add	r2, sp, #140	; 0x8c
 802b104:	9907      	ldr	r1, [sp, #28]
 802b106:	9808      	ldr	r0, [sp, #32]
 802b108:	f003 fb4a 	bl	802e7a0 <__ssprint_r>
 802b10c:	2800      	cmp	r0, #0
 802b10e:	f47f ab69 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b112:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b114:	46c8      	mov	r8, r9
 802b116:	e467      	b.n	802a9e8 <_svfprintf_r+0x3a8>
 802b118:	aa23      	add	r2, sp, #140	; 0x8c
 802b11a:	9907      	ldr	r1, [sp, #28]
 802b11c:	9808      	ldr	r0, [sp, #32]
 802b11e:	f003 fb3f 	bl	802e7a0 <__ssprint_r>
 802b122:	2800      	cmp	r0, #0
 802b124:	f47f ab5e 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b128:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b12a:	46c8      	mov	r8, r9
 802b12c:	e41d      	b.n	802a96a <_svfprintf_r+0x32a>
 802b12e:	aa23      	add	r2, sp, #140	; 0x8c
 802b130:	9907      	ldr	r1, [sp, #28]
 802b132:	9808      	ldr	r0, [sp, #32]
 802b134:	f003 fb34 	bl	802e7a0 <__ssprint_r>
 802b138:	2800      	cmp	r0, #0
 802b13a:	f47f ab53 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b13e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b140:	46c8      	mov	r8, r9
 802b142:	e402      	b.n	802a94a <_svfprintf_r+0x30a>
 802b144:	f8cd b00c 	str.w	fp, [sp, #12]
 802b148:	2400      	movs	r4, #0
 802b14a:	2500      	movs	r5, #0
 802b14c:	4649      	mov	r1, r9
 802b14e:	e000      	b.n	802b152 <_svfprintf_r+0xb12>
 802b150:	4631      	mov	r1, r6
 802b152:	08e2      	lsrs	r2, r4, #3
 802b154:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 802b158:	08e8      	lsrs	r0, r5, #3
 802b15a:	f004 0307 	and.w	r3, r4, #7
 802b15e:	4605      	mov	r5, r0
 802b160:	4614      	mov	r4, r2
 802b162:	3330      	adds	r3, #48	; 0x30
 802b164:	ea54 0205 	orrs.w	r2, r4, r5
 802b168:	f801 3c01 	strb.w	r3, [r1, #-1]
 802b16c:	f101 36ff 	add.w	r6, r1, #4294967295
 802b170:	d1ee      	bne.n	802b150 <_svfprintf_r+0xb10>
 802b172:	9a03      	ldr	r2, [sp, #12]
 802b174:	07d2      	lsls	r2, r2, #31
 802b176:	f57f ade6 	bpl.w	802ad46 <_svfprintf_r+0x706>
 802b17a:	2b30      	cmp	r3, #48	; 0x30
 802b17c:	f43f ade3 	beq.w	802ad46 <_svfprintf_r+0x706>
 802b180:	3902      	subs	r1, #2
 802b182:	2330      	movs	r3, #48	; 0x30
 802b184:	f806 3c01 	strb.w	r3, [r6, #-1]
 802b188:	eba9 0301 	sub.w	r3, r9, r1
 802b18c:	930a      	str	r3, [sp, #40]	; 0x28
 802b18e:	460e      	mov	r6, r1
 802b190:	f7ff bb66 	b.w	802a860 <_svfprintf_r+0x220>
 802b194:	991d      	ldr	r1, [sp, #116]	; 0x74
 802b196:	2900      	cmp	r1, #0
 802b198:	f340 8231 	ble.w	802b5fe <_svfprintf_r+0xfbe>
 802b19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b1a0:	4293      	cmp	r3, r2
 802b1a2:	bfa8      	it	ge
 802b1a4:	4613      	movge	r3, r2
 802b1a6:	2b00      	cmp	r3, #0
 802b1a8:	461f      	mov	r7, r3
 802b1aa:	dd0d      	ble.n	802b1c8 <_svfprintf_r+0xb88>
 802b1ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b1ae:	f8c8 6000 	str.w	r6, [r8]
 802b1b2:	3301      	adds	r3, #1
 802b1b4:	443c      	add	r4, r7
 802b1b6:	2b07      	cmp	r3, #7
 802b1b8:	9425      	str	r4, [sp, #148]	; 0x94
 802b1ba:	f8c8 7004 	str.w	r7, [r8, #4]
 802b1be:	9324      	str	r3, [sp, #144]	; 0x90
 802b1c0:	f300 8321 	bgt.w	802b806 <_svfprintf_r+0x11c6>
 802b1c4:	f108 0808 	add.w	r8, r8, #8
 802b1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b1ca:	2f00      	cmp	r7, #0
 802b1cc:	bfa8      	it	ge
 802b1ce:	1bdb      	subge	r3, r3, r7
 802b1d0:	2b00      	cmp	r3, #0
 802b1d2:	461f      	mov	r7, r3
 802b1d4:	f340 80d7 	ble.w	802b386 <_svfprintf_r+0xd46>
 802b1d8:	2f10      	cmp	r7, #16
 802b1da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b1dc:	4d31      	ldr	r5, [pc, #196]	; (802b2a4 <_svfprintf_r+0xc64>)
 802b1de:	f340 81f0 	ble.w	802b5c2 <_svfprintf_r+0xf82>
 802b1e2:	4642      	mov	r2, r8
 802b1e4:	4621      	mov	r1, r4
 802b1e6:	46b0      	mov	r8, r6
 802b1e8:	f04f 0b10 	mov.w	fp, #16
 802b1ec:	462e      	mov	r6, r5
 802b1ee:	9c08      	ldr	r4, [sp, #32]
 802b1f0:	9d07      	ldr	r5, [sp, #28]
 802b1f2:	e004      	b.n	802b1fe <_svfprintf_r+0xbbe>
 802b1f4:	3208      	adds	r2, #8
 802b1f6:	3f10      	subs	r7, #16
 802b1f8:	2f10      	cmp	r7, #16
 802b1fa:	f340 81de 	ble.w	802b5ba <_svfprintf_r+0xf7a>
 802b1fe:	3301      	adds	r3, #1
 802b200:	3110      	adds	r1, #16
 802b202:	2b07      	cmp	r3, #7
 802b204:	9125      	str	r1, [sp, #148]	; 0x94
 802b206:	9324      	str	r3, [sp, #144]	; 0x90
 802b208:	e882 0840 	stmia.w	r2, {r6, fp}
 802b20c:	ddf2      	ble.n	802b1f4 <_svfprintf_r+0xbb4>
 802b20e:	aa23      	add	r2, sp, #140	; 0x8c
 802b210:	4629      	mov	r1, r5
 802b212:	4620      	mov	r0, r4
 802b214:	f003 fac4 	bl	802e7a0 <__ssprint_r>
 802b218:	2800      	cmp	r0, #0
 802b21a:	f47f aae3 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b21e:	9925      	ldr	r1, [sp, #148]	; 0x94
 802b220:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b222:	464a      	mov	r2, r9
 802b224:	e7e7      	b.n	802b1f6 <_svfprintf_r+0xbb6>
 802b226:	2d00      	cmp	r5, #0
 802b228:	bf08      	it	eq
 802b22a:	2c0a      	cmpeq	r4, #10
 802b22c:	f0c0 8095 	bcc.w	802b35a <_svfprintf_r+0xd1a>
 802b230:	464e      	mov	r6, r9
 802b232:	4620      	mov	r0, r4
 802b234:	4629      	mov	r1, r5
 802b236:	220a      	movs	r2, #10
 802b238:	2300      	movs	r3, #0
 802b23a:	f7e1 ff59 	bl	800d0f0 <__aeabi_uldivmod>
 802b23e:	3230      	adds	r2, #48	; 0x30
 802b240:	f806 2d01 	strb.w	r2, [r6, #-1]!
 802b244:	4620      	mov	r0, r4
 802b246:	4629      	mov	r1, r5
 802b248:	2300      	movs	r3, #0
 802b24a:	220a      	movs	r2, #10
 802b24c:	f7e1 ff50 	bl	800d0f0 <__aeabi_uldivmod>
 802b250:	4604      	mov	r4, r0
 802b252:	460d      	mov	r5, r1
 802b254:	ea54 0305 	orrs.w	r3, r4, r5
 802b258:	d1eb      	bne.n	802b232 <_svfprintf_r+0xbf2>
 802b25a:	eba9 0306 	sub.w	r3, r9, r6
 802b25e:	930a      	str	r3, [sp, #40]	; 0x28
 802b260:	f7ff bafe 	b.w	802a860 <_svfprintf_r+0x220>
 802b264:	9b06      	ldr	r3, [sp, #24]
 802b266:	930a      	str	r3, [sp, #40]	; 0x28
 802b268:	464e      	mov	r6, r9
 802b26a:	f7ff baf9 	b.w	802a860 <_svfprintf_r+0x220>
 802b26e:	aa23      	add	r2, sp, #140	; 0x8c
 802b270:	9907      	ldr	r1, [sp, #28]
 802b272:	9808      	ldr	r0, [sp, #32]
 802b274:	f003 fa94 	bl	802e7a0 <__ssprint_r>
 802b278:	2800      	cmp	r0, #0
 802b27a:	f47f aab3 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b27e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802b282:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b284:	46c8      	mov	r8, r9
 802b286:	f7ff bb50 	b.w	802a92a <_svfprintf_r+0x2ea>
 802b28a:	1e5e      	subs	r6, r3, #1
 802b28c:	2e00      	cmp	r6, #0
 802b28e:	f77f af0a 	ble.w	802b0a6 <_svfprintf_r+0xa66>
 802b292:	2e10      	cmp	r6, #16
 802b294:	4d03      	ldr	r5, [pc, #12]	; (802b2a4 <_svfprintf_r+0xc64>)
 802b296:	dd23      	ble.n	802b2e0 <_svfprintf_r+0xca0>
 802b298:	4622      	mov	r2, r4
 802b29a:	f04f 0b10 	mov.w	fp, #16
 802b29e:	9c08      	ldr	r4, [sp, #32]
 802b2a0:	e007      	b.n	802b2b2 <_svfprintf_r+0xc72>
 802b2a2:	bf00      	nop
 802b2a4:	08030da0 	.word	0x08030da0
 802b2a8:	3e10      	subs	r6, #16
 802b2aa:	2e10      	cmp	r6, #16
 802b2ac:	f108 0808 	add.w	r8, r8, #8
 802b2b0:	dd15      	ble.n	802b2de <_svfprintf_r+0xc9e>
 802b2b2:	3701      	adds	r7, #1
 802b2b4:	3210      	adds	r2, #16
 802b2b6:	2f07      	cmp	r7, #7
 802b2b8:	9225      	str	r2, [sp, #148]	; 0x94
 802b2ba:	9724      	str	r7, [sp, #144]	; 0x90
 802b2bc:	e888 0820 	stmia.w	r8, {r5, fp}
 802b2c0:	ddf2      	ble.n	802b2a8 <_svfprintf_r+0xc68>
 802b2c2:	aa23      	add	r2, sp, #140	; 0x8c
 802b2c4:	9907      	ldr	r1, [sp, #28]
 802b2c6:	4620      	mov	r0, r4
 802b2c8:	f003 fa6a 	bl	802e7a0 <__ssprint_r>
 802b2cc:	2800      	cmp	r0, #0
 802b2ce:	f47f aa89 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b2d2:	3e10      	subs	r6, #16
 802b2d4:	2e10      	cmp	r6, #16
 802b2d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b2d8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802b2da:	46c8      	mov	r8, r9
 802b2dc:	dce9      	bgt.n	802b2b2 <_svfprintf_r+0xc72>
 802b2de:	4614      	mov	r4, r2
 802b2e0:	3701      	adds	r7, #1
 802b2e2:	4434      	add	r4, r6
 802b2e4:	2f07      	cmp	r7, #7
 802b2e6:	9425      	str	r4, [sp, #148]	; 0x94
 802b2e8:	9724      	str	r7, [sp, #144]	; 0x90
 802b2ea:	e888 0060 	stmia.w	r8, {r5, r6}
 802b2ee:	f77f aed8 	ble.w	802b0a2 <_svfprintf_r+0xa62>
 802b2f2:	aa23      	add	r2, sp, #140	; 0x8c
 802b2f4:	9907      	ldr	r1, [sp, #28]
 802b2f6:	9808      	ldr	r0, [sp, #32]
 802b2f8:	f003 fa52 	bl	802e7a0 <__ssprint_r>
 802b2fc:	2800      	cmp	r0, #0
 802b2fe:	f47f aa71 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b302:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b304:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802b306:	46c8      	mov	r8, r9
 802b308:	e6cd      	b.n	802b0a6 <_svfprintf_r+0xa66>
 802b30a:	681c      	ldr	r4, [r3, #0]
 802b30c:	3304      	adds	r3, #4
 802b30e:	930b      	str	r3, [sp, #44]	; 0x2c
 802b310:	2500      	movs	r5, #0
 802b312:	e422      	b.n	802ab5a <_svfprintf_r+0x51a>
 802b314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b316:	460a      	mov	r2, r1
 802b318:	3204      	adds	r2, #4
 802b31a:	680c      	ldr	r4, [r1, #0]
 802b31c:	920b      	str	r2, [sp, #44]	; 0x2c
 802b31e:	2500      	movs	r5, #0
 802b320:	f7ff ba81 	b.w	802a826 <_svfprintf_r+0x1e6>
 802b324:	3204      	adds	r2, #4
 802b326:	681c      	ldr	r4, [r3, #0]
 802b328:	920b      	str	r2, [sp, #44]	; 0x2c
 802b32a:	2301      	movs	r3, #1
 802b32c:	2500      	movs	r5, #0
 802b32e:	f7ff ba7a 	b.w	802a826 <_svfprintf_r+0x1e6>
 802b332:	4614      	mov	r4, r2
 802b334:	3301      	adds	r3, #1
 802b336:	4434      	add	r4, r6
 802b338:	2b07      	cmp	r3, #7
 802b33a:	9425      	str	r4, [sp, #148]	; 0x94
 802b33c:	9324      	str	r3, [sp, #144]	; 0x90
 802b33e:	e888 0060 	stmia.w	r8, {r5, r6}
 802b342:	f77f ab62 	ble.w	802aa0a <_svfprintf_r+0x3ca>
 802b346:	e6bb      	b.n	802b0c0 <_svfprintf_r+0xa80>
 802b348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b34a:	6814      	ldr	r4, [r2, #0]
 802b34c:	4613      	mov	r3, r2
 802b34e:	3304      	adds	r3, #4
 802b350:	17e5      	asrs	r5, r4, #31
 802b352:	930b      	str	r3, [sp, #44]	; 0x2c
 802b354:	4622      	mov	r2, r4
 802b356:	462b      	mov	r3, r5
 802b358:	e4cd      	b.n	802acf6 <_svfprintf_r+0x6b6>
 802b35a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b35e:	f8cd b00c 	str.w	fp, [sp, #12]
 802b362:	ae40      	add	r6, sp, #256	; 0x100
 802b364:	3430      	adds	r4, #48	; 0x30
 802b366:	2301      	movs	r3, #1
 802b368:	f806 4d41 	strb.w	r4, [r6, #-65]!
 802b36c:	930a      	str	r3, [sp, #40]	; 0x28
 802b36e:	f7ff ba77 	b.w	802a860 <_svfprintf_r+0x220>
 802b372:	aa23      	add	r2, sp, #140	; 0x8c
 802b374:	9907      	ldr	r1, [sp, #28]
 802b376:	9808      	ldr	r0, [sp, #32]
 802b378:	f003 fa12 	bl	802e7a0 <__ssprint_r>
 802b37c:	2800      	cmp	r0, #0
 802b37e:	f47f aa31 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b382:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b384:	46c8      	mov	r8, r9
 802b386:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802b388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b38a:	429a      	cmp	r2, r3
 802b38c:	db44      	blt.n	802b418 <_svfprintf_r+0xdd8>
 802b38e:	9b03      	ldr	r3, [sp, #12]
 802b390:	07d9      	lsls	r1, r3, #31
 802b392:	d441      	bmi.n	802b418 <_svfprintf_r+0xdd8>
 802b394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b396:	980e      	ldr	r0, [sp, #56]	; 0x38
 802b398:	1a9a      	subs	r2, r3, r2
 802b39a:	1a1d      	subs	r5, r3, r0
 802b39c:	4295      	cmp	r5, r2
 802b39e:	bfa8      	it	ge
 802b3a0:	4615      	movge	r5, r2
 802b3a2:	2d00      	cmp	r5, #0
 802b3a4:	dd0e      	ble.n	802b3c4 <_svfprintf_r+0xd84>
 802b3a6:	9924      	ldr	r1, [sp, #144]	; 0x90
 802b3a8:	f8c8 5004 	str.w	r5, [r8, #4]
 802b3ac:	3101      	adds	r1, #1
 802b3ae:	4406      	add	r6, r0
 802b3b0:	442c      	add	r4, r5
 802b3b2:	2907      	cmp	r1, #7
 802b3b4:	f8c8 6000 	str.w	r6, [r8]
 802b3b8:	9425      	str	r4, [sp, #148]	; 0x94
 802b3ba:	9124      	str	r1, [sp, #144]	; 0x90
 802b3bc:	f300 823a 	bgt.w	802b834 <_svfprintf_r+0x11f4>
 802b3c0:	f108 0808 	add.w	r8, r8, #8
 802b3c4:	2d00      	cmp	r5, #0
 802b3c6:	bfac      	ite	ge
 802b3c8:	1b56      	subge	r6, r2, r5
 802b3ca:	4616      	movlt	r6, r2
 802b3cc:	2e00      	cmp	r6, #0
 802b3ce:	f77f ab1e 	ble.w	802aa0e <_svfprintf_r+0x3ce>
 802b3d2:	2e10      	cmp	r6, #16
 802b3d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b3d6:	4db1      	ldr	r5, [pc, #708]	; (802b69c <_svfprintf_r+0x105c>)
 802b3d8:	ddac      	ble.n	802b334 <_svfprintf_r+0xcf4>
 802b3da:	4622      	mov	r2, r4
 802b3dc:	2710      	movs	r7, #16
 802b3de:	f8dd b020 	ldr.w	fp, [sp, #32]
 802b3e2:	9c07      	ldr	r4, [sp, #28]
 802b3e4:	e004      	b.n	802b3f0 <_svfprintf_r+0xdb0>
 802b3e6:	f108 0808 	add.w	r8, r8, #8
 802b3ea:	3e10      	subs	r6, #16
 802b3ec:	2e10      	cmp	r6, #16
 802b3ee:	dda0      	ble.n	802b332 <_svfprintf_r+0xcf2>
 802b3f0:	3301      	adds	r3, #1
 802b3f2:	3210      	adds	r2, #16
 802b3f4:	2b07      	cmp	r3, #7
 802b3f6:	9225      	str	r2, [sp, #148]	; 0x94
 802b3f8:	9324      	str	r3, [sp, #144]	; 0x90
 802b3fa:	e888 00a0 	stmia.w	r8, {r5, r7}
 802b3fe:	ddf2      	ble.n	802b3e6 <_svfprintf_r+0xda6>
 802b400:	aa23      	add	r2, sp, #140	; 0x8c
 802b402:	4621      	mov	r1, r4
 802b404:	4658      	mov	r0, fp
 802b406:	f003 f9cb 	bl	802e7a0 <__ssprint_r>
 802b40a:	2800      	cmp	r0, #0
 802b40c:	f47f a9ea 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b410:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b412:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b414:	46c8      	mov	r8, r9
 802b416:	e7e8      	b.n	802b3ea <_svfprintf_r+0xdaa>
 802b418:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b41a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802b41c:	9914      	ldr	r1, [sp, #80]	; 0x50
 802b41e:	f8c8 1000 	str.w	r1, [r8]
 802b422:	3301      	adds	r3, #1
 802b424:	4404      	add	r4, r0
 802b426:	2b07      	cmp	r3, #7
 802b428:	9425      	str	r4, [sp, #148]	; 0x94
 802b42a:	f8c8 0004 	str.w	r0, [r8, #4]
 802b42e:	9324      	str	r3, [sp, #144]	; 0x90
 802b430:	f300 81f4 	bgt.w	802b81c <_svfprintf_r+0x11dc>
 802b434:	f108 0808 	add.w	r8, r8, #8
 802b438:	e7ac      	b.n	802b394 <_svfprintf_r+0xd54>
 802b43a:	9b03      	ldr	r3, [sp, #12]
 802b43c:	07da      	lsls	r2, r3, #31
 802b43e:	f53f adfc 	bmi.w	802b03a <_svfprintf_r+0x9fa>
 802b442:	3701      	adds	r7, #1
 802b444:	3401      	adds	r4, #1
 802b446:	2301      	movs	r3, #1
 802b448:	2f07      	cmp	r7, #7
 802b44a:	9425      	str	r4, [sp, #148]	; 0x94
 802b44c:	9724      	str	r7, [sp, #144]	; 0x90
 802b44e:	f8c8 6000 	str.w	r6, [r8]
 802b452:	f8c8 3004 	str.w	r3, [r8, #4]
 802b456:	f77f ae24 	ble.w	802b0a2 <_svfprintf_r+0xa62>
 802b45a:	e74a      	b.n	802b2f2 <_svfprintf_r+0xcb2>
 802b45c:	aa23      	add	r2, sp, #140	; 0x8c
 802b45e:	9907      	ldr	r1, [sp, #28]
 802b460:	9808      	ldr	r0, [sp, #32]
 802b462:	f003 f99d 	bl	802e7a0 <__ssprint_r>
 802b466:	2800      	cmp	r0, #0
 802b468:	f47f a9bc 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b46c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b46e:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802b470:	46c8      	mov	r8, r9
 802b472:	e5f0      	b.n	802b056 <_svfprintf_r+0xa16>
 802b474:	aa23      	add	r2, sp, #140	; 0x8c
 802b476:	9907      	ldr	r1, [sp, #28]
 802b478:	9808      	ldr	r0, [sp, #32]
 802b47a:	f003 f991 	bl	802e7a0 <__ssprint_r>
 802b47e:	2800      	cmp	r0, #0
 802b480:	f47f a9b0 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b484:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b486:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802b488:	46c8      	mov	r8, r9
 802b48a:	e5f3      	b.n	802b074 <_svfprintf_r+0xa34>
 802b48c:	464e      	mov	r6, r9
 802b48e:	f7ff b9e7 	b.w	802a860 <_svfprintf_r+0x220>
 802b492:	aa23      	add	r2, sp, #140	; 0x8c
 802b494:	9907      	ldr	r1, [sp, #28]
 802b496:	9808      	ldr	r0, [sp, #32]
 802b498:	f003 f982 	bl	802e7a0 <__ssprint_r>
 802b49c:	2800      	cmp	r0, #0
 802b49e:	f47f a9a1 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b4a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b4a4:	46c8      	mov	r8, r9
 802b4a6:	f7ff ba63 	b.w	802a970 <_svfprintf_r+0x330>
 802b4aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b4ae:	4602      	mov	r2, r0
 802b4b0:	460b      	mov	r3, r1
 802b4b2:	f7e1 fa9d 	bl	800c9f0 <__aeabi_dcmpun>
 802b4b6:	2800      	cmp	r0, #0
 802b4b8:	f040 8298 	bne.w	802b9ec <_svfprintf_r+0x13ac>
 802b4bc:	9b06      	ldr	r3, [sp, #24]
 802b4be:	3301      	adds	r3, #1
 802b4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b4c2:	f023 0720 	bic.w	r7, r3, #32
 802b4c6:	f000 81d2 	beq.w	802b86e <_svfprintf_r+0x122e>
 802b4ca:	2f47      	cmp	r7, #71	; 0x47
 802b4cc:	f000 8120 	beq.w	802b710 <_svfprintf_r+0x10d0>
 802b4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b4d2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 802b4d6:	2b00      	cmp	r3, #0
 802b4d8:	9203      	str	r2, [sp, #12]
 802b4da:	f2c0 81f0 	blt.w	802b8be <_svfprintf_r+0x127e>
 802b4de:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 802b4e2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 802b4e6:	2300      	movs	r3, #0
 802b4e8:	930c      	str	r3, [sp, #48]	; 0x30
 802b4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b4ec:	2b66      	cmp	r3, #102	; 0x66
 802b4ee:	f000 81c1 	beq.w	802b874 <_svfprintf_r+0x1234>
 802b4f2:	2b46      	cmp	r3, #70	; 0x46
 802b4f4:	f000 80f1 	beq.w	802b6da <_svfprintf_r+0x109a>
 802b4f8:	2f45      	cmp	r7, #69	; 0x45
 802b4fa:	bf0c      	ite	eq
 802b4fc:	9b06      	ldreq	r3, [sp, #24]
 802b4fe:	9d06      	ldrne	r5, [sp, #24]
 802b500:	9808      	ldr	r0, [sp, #32]
 802b502:	bf08      	it	eq
 802b504:	1c5d      	addeq	r5, r3, #1
 802b506:	aa21      	add	r2, sp, #132	; 0x84
 802b508:	ab1e      	add	r3, sp, #120	; 0x78
 802b50a:	9201      	str	r2, [sp, #4]
 802b50c:	9300      	str	r3, [sp, #0]
 802b50e:	462a      	mov	r2, r5
 802b510:	ab1d      	add	r3, sp, #116	; 0x74
 802b512:	2102      	movs	r1, #2
 802b514:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 802b518:	f000 fbc2 	bl	802bca0 <_dtoa_r>
 802b51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b51e:	2b67      	cmp	r3, #103	; 0x67
 802b520:	4606      	mov	r6, r0
 802b522:	f040 81d5 	bne.w	802b8d0 <_svfprintf_r+0x1290>
 802b526:	f01b 0f01 	tst.w	fp, #1
 802b52a:	f000 824e 	beq.w	802b9ca <_svfprintf_r+0x138a>
 802b52e:	1974      	adds	r4, r6, r5
 802b530:	2200      	movs	r2, #0
 802b532:	2300      	movs	r3, #0
 802b534:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 802b538:	f7e1 fa28 	bl	800c98c <__aeabi_dcmpeq>
 802b53c:	2800      	cmp	r0, #0
 802b53e:	f040 8160 	bne.w	802b802 <_svfprintf_r+0x11c2>
 802b542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b544:	42a3      	cmp	r3, r4
 802b546:	d206      	bcs.n	802b556 <_svfprintf_r+0xf16>
 802b548:	2130      	movs	r1, #48	; 0x30
 802b54a:	1c5a      	adds	r2, r3, #1
 802b54c:	9221      	str	r2, [sp, #132]	; 0x84
 802b54e:	7019      	strb	r1, [r3, #0]
 802b550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b552:	429c      	cmp	r4, r3
 802b554:	d8f9      	bhi.n	802b54a <_svfprintf_r+0xf0a>
 802b556:	1b9b      	subs	r3, r3, r6
 802b558:	2f47      	cmp	r7, #71	; 0x47
 802b55a:	930f      	str	r3, [sp, #60]	; 0x3c
 802b55c:	f000 80f0 	beq.w	802b740 <_svfprintf_r+0x1100>
 802b560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b562:	2b65      	cmp	r3, #101	; 0x65
 802b564:	f340 81c3 	ble.w	802b8ee <_svfprintf_r+0x12ae>
 802b568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b56a:	2b66      	cmp	r3, #102	; 0x66
 802b56c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802b56e:	930e      	str	r3, [sp, #56]	; 0x38
 802b570:	f000 81c0 	beq.w	802b8f4 <_svfprintf_r+0x12b4>
 802b574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b578:	4619      	mov	r1, r3
 802b57a:	4291      	cmp	r1, r2
 802b57c:	f300 8191 	bgt.w	802b8a2 <_svfprintf_r+0x1262>
 802b580:	f01b 0f01 	tst.w	fp, #1
 802b584:	f040 8223 	bne.w	802b9ce <_svfprintf_r+0x138e>
 802b588:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802b58c:	9304      	str	r3, [sp, #16]
 802b58e:	2367      	movs	r3, #103	; 0x67
 802b590:	920a      	str	r2, [sp, #40]	; 0x28
 802b592:	930d      	str	r3, [sp, #52]	; 0x34
 802b594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b596:	2b00      	cmp	r3, #0
 802b598:	f040 80cb 	bne.w	802b732 <_svfprintf_r+0x10f2>
 802b59c:	9306      	str	r3, [sp, #24]
 802b59e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802b5a2:	f7ff b965 	b.w	802a870 <_svfprintf_r+0x230>
 802b5a6:	f025 0507 	bic.w	r5, r5, #7
 802b5aa:	ed95 7b00 	vldr	d7, [r5]
 802b5ae:	f105 0308 	add.w	r3, r5, #8
 802b5b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802b5b6:	930b      	str	r3, [sp, #44]	; 0x2c
 802b5b8:	e416      	b.n	802ade8 <_svfprintf_r+0x7a8>
 802b5ba:	4635      	mov	r5, r6
 802b5bc:	460c      	mov	r4, r1
 802b5be:	4646      	mov	r6, r8
 802b5c0:	4690      	mov	r8, r2
 802b5c2:	3301      	adds	r3, #1
 802b5c4:	443c      	add	r4, r7
 802b5c6:	2b07      	cmp	r3, #7
 802b5c8:	9425      	str	r4, [sp, #148]	; 0x94
 802b5ca:	9324      	str	r3, [sp, #144]	; 0x90
 802b5cc:	e888 00a0 	stmia.w	r8, {r5, r7}
 802b5d0:	f73f aecf 	bgt.w	802b372 <_svfprintf_r+0xd32>
 802b5d4:	f108 0808 	add.w	r8, r8, #8
 802b5d8:	e6d5      	b.n	802b386 <_svfprintf_r+0xd46>
 802b5da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b5dc:	6813      	ldr	r3, [r2, #0]
 802b5de:	3204      	adds	r2, #4
 802b5e0:	920b      	str	r2, [sp, #44]	; 0x2c
 802b5e2:	9a05      	ldr	r2, [sp, #20]
 802b5e4:	601a      	str	r2, [r3, #0]
 802b5e6:	f7ff b852 	b.w	802a68e <_svfprintf_r+0x4e>
 802b5ea:	aa23      	add	r2, sp, #140	; 0x8c
 802b5ec:	9907      	ldr	r1, [sp, #28]
 802b5ee:	9808      	ldr	r0, [sp, #32]
 802b5f0:	f003 f8d6 	bl	802e7a0 <__ssprint_r>
 802b5f4:	2800      	cmp	r0, #0
 802b5f6:	f47f a8f5 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b5fa:	46c8      	mov	r8, r9
 802b5fc:	e488      	b.n	802af10 <_svfprintf_r+0x8d0>
 802b5fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b600:	4a27      	ldr	r2, [pc, #156]	; (802b6a0 <_svfprintf_r+0x1060>)
 802b602:	f8c8 2000 	str.w	r2, [r8]
 802b606:	3301      	adds	r3, #1
 802b608:	3401      	adds	r4, #1
 802b60a:	2201      	movs	r2, #1
 802b60c:	2b07      	cmp	r3, #7
 802b60e:	9425      	str	r4, [sp, #148]	; 0x94
 802b610:	9324      	str	r3, [sp, #144]	; 0x90
 802b612:	f8c8 2004 	str.w	r2, [r8, #4]
 802b616:	dc54      	bgt.n	802b6c2 <_svfprintf_r+0x1082>
 802b618:	f108 0808 	add.w	r8, r8, #8
 802b61c:	b929      	cbnz	r1, 802b62a <_svfprintf_r+0xfea>
 802b61e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b620:	b91b      	cbnz	r3, 802b62a <_svfprintf_r+0xfea>
 802b622:	9b03      	ldr	r3, [sp, #12]
 802b624:	07d8      	lsls	r0, r3, #31
 802b626:	f57f a9f2 	bpl.w	802aa0e <_svfprintf_r+0x3ce>
 802b62a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b62c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802b62e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802b630:	f8c8 2000 	str.w	r2, [r8]
 802b634:	3301      	adds	r3, #1
 802b636:	4602      	mov	r2, r0
 802b638:	4422      	add	r2, r4
 802b63a:	2b07      	cmp	r3, #7
 802b63c:	9225      	str	r2, [sp, #148]	; 0x94
 802b63e:	f8c8 0004 	str.w	r0, [r8, #4]
 802b642:	9324      	str	r3, [sp, #144]	; 0x90
 802b644:	f300 8195 	bgt.w	802b972 <_svfprintf_r+0x1332>
 802b648:	f108 0808 	add.w	r8, r8, #8
 802b64c:	2900      	cmp	r1, #0
 802b64e:	f2c0 816d 	blt.w	802b92c <_svfprintf_r+0x12ec>
 802b652:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b654:	f8c8 6000 	str.w	r6, [r8]
 802b658:	3301      	adds	r3, #1
 802b65a:	188c      	adds	r4, r1, r2
 802b65c:	2b07      	cmp	r3, #7
 802b65e:	9425      	str	r4, [sp, #148]	; 0x94
 802b660:	9324      	str	r3, [sp, #144]	; 0x90
 802b662:	f8c8 1004 	str.w	r1, [r8, #4]
 802b666:	f77f a9d0 	ble.w	802aa0a <_svfprintf_r+0x3ca>
 802b66a:	e529      	b.n	802b0c0 <_svfprintf_r+0xa80>
 802b66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b66e:	9905      	ldr	r1, [sp, #20]
 802b670:	6813      	ldr	r3, [r2, #0]
 802b672:	17cd      	asrs	r5, r1, #31
 802b674:	4608      	mov	r0, r1
 802b676:	3204      	adds	r2, #4
 802b678:	4629      	mov	r1, r5
 802b67a:	920b      	str	r2, [sp, #44]	; 0x2c
 802b67c:	e9c3 0100 	strd	r0, r1, [r3]
 802b680:	f7ff b805 	b.w	802a68e <_svfprintf_r+0x4e>
 802b684:	aa23      	add	r2, sp, #140	; 0x8c
 802b686:	9907      	ldr	r1, [sp, #28]
 802b688:	9808      	ldr	r0, [sp, #32]
 802b68a:	f003 f889 	bl	802e7a0 <__ssprint_r>
 802b68e:	2800      	cmp	r0, #0
 802b690:	f47f a8a8 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b694:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b696:	46c8      	mov	r8, r9
 802b698:	e453      	b.n	802af42 <_svfprintf_r+0x902>
 802b69a:	bf00      	nop
 802b69c:	08030da0 	.word	0x08030da0
 802b6a0:	08030d80 	.word	0x08030d80
 802b6a4:	2140      	movs	r1, #64	; 0x40
 802b6a6:	9808      	ldr	r0, [sp, #32]
 802b6a8:	f001 ff2a 	bl	802d500 <_malloc_r>
 802b6ac:	9a07      	ldr	r2, [sp, #28]
 802b6ae:	6010      	str	r0, [r2, #0]
 802b6b0:	6110      	str	r0, [r2, #16]
 802b6b2:	2800      	cmp	r0, #0
 802b6b4:	f000 81f0 	beq.w	802ba98 <_svfprintf_r+0x1458>
 802b6b8:	9a07      	ldr	r2, [sp, #28]
 802b6ba:	2340      	movs	r3, #64	; 0x40
 802b6bc:	6153      	str	r3, [r2, #20]
 802b6be:	f7fe bfd6 	b.w	802a66e <_svfprintf_r+0x2e>
 802b6c2:	aa23      	add	r2, sp, #140	; 0x8c
 802b6c4:	9907      	ldr	r1, [sp, #28]
 802b6c6:	9808      	ldr	r0, [sp, #32]
 802b6c8:	f003 f86a 	bl	802e7a0 <__ssprint_r>
 802b6cc:	2800      	cmp	r0, #0
 802b6ce:	f47f a889 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b6d2:	991d      	ldr	r1, [sp, #116]	; 0x74
 802b6d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b6d6:	46c8      	mov	r8, r9
 802b6d8:	e7a0      	b.n	802b61c <_svfprintf_r+0xfdc>
 802b6da:	9d06      	ldr	r5, [sp, #24]
 802b6dc:	9808      	ldr	r0, [sp, #32]
 802b6de:	aa21      	add	r2, sp, #132	; 0x84
 802b6e0:	ab1e      	add	r3, sp, #120	; 0x78
 802b6e2:	9201      	str	r2, [sp, #4]
 802b6e4:	9300      	str	r3, [sp, #0]
 802b6e6:	462a      	mov	r2, r5
 802b6e8:	ab1d      	add	r3, sp, #116	; 0x74
 802b6ea:	2103      	movs	r1, #3
 802b6ec:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 802b6f0:	f000 fad6 	bl	802bca0 <_dtoa_r>
 802b6f4:	4606      	mov	r6, r0
 802b6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b6f8:	2b46      	cmp	r3, #70	; 0x46
 802b6fa:	eb06 0405 	add.w	r4, r6, r5
 802b6fe:	f47f af17 	bne.w	802b530 <_svfprintf_r+0xef0>
 802b702:	7833      	ldrb	r3, [r6, #0]
 802b704:	2b30      	cmp	r3, #48	; 0x30
 802b706:	f000 8177 	beq.w	802b9f8 <_svfprintf_r+0x13b8>
 802b70a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802b70c:	442c      	add	r4, r5
 802b70e:	e70f      	b.n	802b530 <_svfprintf_r+0xef0>
 802b710:	9b06      	ldr	r3, [sp, #24]
 802b712:	2b00      	cmp	r3, #0
 802b714:	bf08      	it	eq
 802b716:	2301      	moveq	r3, #1
 802b718:	9306      	str	r3, [sp, #24]
 802b71a:	e6d9      	b.n	802b4d0 <_svfprintf_r+0xe90>
 802b71c:	4630      	mov	r0, r6
 802b71e:	9406      	str	r4, [sp, #24]
 802b720:	f7e1 fc06 	bl	800cf30 <strlen>
 802b724:	950b      	str	r5, [sp, #44]	; 0x2c
 802b726:	900a      	str	r0, [sp, #40]	; 0x28
 802b728:	f8cd b00c 	str.w	fp, [sp, #12]
 802b72c:	4603      	mov	r3, r0
 802b72e:	f7ff b9eb 	b.w	802ab08 <_svfprintf_r+0x4c8>
 802b732:	272d      	movs	r7, #45	; 0x2d
 802b734:	2300      	movs	r3, #0
 802b736:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 802b73a:	9306      	str	r3, [sp, #24]
 802b73c:	f7ff b899 	b.w	802a872 <_svfprintf_r+0x232>
 802b740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802b742:	930e      	str	r3, [sp, #56]	; 0x38
 802b744:	461a      	mov	r2, r3
 802b746:	3303      	adds	r3, #3
 802b748:	db04      	blt.n	802b754 <_svfprintf_r+0x1114>
 802b74a:	9b06      	ldr	r3, [sp, #24]
 802b74c:	4619      	mov	r1, r3
 802b74e:	4291      	cmp	r1, r2
 802b750:	f6bf af10 	bge.w	802b574 <_svfprintf_r+0xf34>
 802b754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b756:	3b02      	subs	r3, #2
 802b758:	930d      	str	r3, [sp, #52]	; 0x34
 802b75a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 802b75e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 802b762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b764:	3b01      	subs	r3, #1
 802b766:	2b00      	cmp	r3, #0
 802b768:	931d      	str	r3, [sp, #116]	; 0x74
 802b76a:	bfbd      	ittte	lt
 802b76c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b76e:	f1c3 0301 	rsblt	r3, r3, #1
 802b772:	222d      	movlt	r2, #45	; 0x2d
 802b774:	222b      	movge	r2, #43	; 0x2b
 802b776:	2b09      	cmp	r3, #9
 802b778:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 802b77c:	f340 811d 	ble.w	802b9ba <_svfprintf_r+0x137a>
 802b780:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
 802b784:	4620      	mov	r0, r4
 802b786:	4dac      	ldr	r5, [pc, #688]	; (802ba38 <_svfprintf_r+0x13f8>)
 802b788:	e000      	b.n	802b78c <_svfprintf_r+0x114c>
 802b78a:	4610      	mov	r0, r2
 802b78c:	fb85 1203 	smull	r1, r2, r5, r3
 802b790:	17d9      	asrs	r1, r3, #31
 802b792:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
 802b796:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 802b79a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 802b79e:	3230      	adds	r2, #48	; 0x30
 802b7a0:	2909      	cmp	r1, #9
 802b7a2:	f800 2c01 	strb.w	r2, [r0, #-1]
 802b7a6:	460b      	mov	r3, r1
 802b7a8:	f100 32ff 	add.w	r2, r0, #4294967295
 802b7ac:	dced      	bgt.n	802b78a <_svfprintf_r+0x114a>
 802b7ae:	3330      	adds	r3, #48	; 0x30
 802b7b0:	3802      	subs	r0, #2
 802b7b2:	b2d9      	uxtb	r1, r3
 802b7b4:	4284      	cmp	r4, r0
 802b7b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 802b7ba:	f240 816a 	bls.w	802ba92 <_svfprintf_r+0x1452>
 802b7be:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 802b7c2:	4613      	mov	r3, r2
 802b7c4:	e001      	b.n	802b7ca <_svfprintf_r+0x118a>
 802b7c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 802b7ca:	f800 1b01 	strb.w	r1, [r0], #1
 802b7ce:	42a3      	cmp	r3, r4
 802b7d0:	d1f9      	bne.n	802b7c6 <_svfprintf_r+0x1186>
 802b7d2:	3301      	adds	r3, #1
 802b7d4:	1a9b      	subs	r3, r3, r2
 802b7d6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 802b7da:	4413      	add	r3, r2
 802b7dc:	aa1f      	add	r2, sp, #124	; 0x7c
 802b7de:	1a9b      	subs	r3, r3, r2
 802b7e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b7e2:	9315      	str	r3, [sp, #84]	; 0x54
 802b7e4:	2a01      	cmp	r2, #1
 802b7e6:	4413      	add	r3, r2
 802b7e8:	930a      	str	r3, [sp, #40]	; 0x28
 802b7ea:	f340 811a 	ble.w	802ba22 <_svfprintf_r+0x13e2>
 802b7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b7f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b7f2:	4413      	add	r3, r2
 802b7f4:	930a      	str	r3, [sp, #40]	; 0x28
 802b7f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802b7fa:	9304      	str	r3, [sp, #16]
 802b7fc:	2300      	movs	r3, #0
 802b7fe:	930e      	str	r3, [sp, #56]	; 0x38
 802b800:	e6c8      	b.n	802b594 <_svfprintf_r+0xf54>
 802b802:	4623      	mov	r3, r4
 802b804:	e6a7      	b.n	802b556 <_svfprintf_r+0xf16>
 802b806:	aa23      	add	r2, sp, #140	; 0x8c
 802b808:	9907      	ldr	r1, [sp, #28]
 802b80a:	9808      	ldr	r0, [sp, #32]
 802b80c:	f002 ffc8 	bl	802e7a0 <__ssprint_r>
 802b810:	2800      	cmp	r0, #0
 802b812:	f47e afe7 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b816:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b818:	46c8      	mov	r8, r9
 802b81a:	e4d5      	b.n	802b1c8 <_svfprintf_r+0xb88>
 802b81c:	aa23      	add	r2, sp, #140	; 0x8c
 802b81e:	9907      	ldr	r1, [sp, #28]
 802b820:	9808      	ldr	r0, [sp, #32]
 802b822:	f002 ffbd 	bl	802e7a0 <__ssprint_r>
 802b826:	2800      	cmp	r0, #0
 802b828:	f47e afdc 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b82c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802b82e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b830:	46c8      	mov	r8, r9
 802b832:	e5af      	b.n	802b394 <_svfprintf_r+0xd54>
 802b834:	aa23      	add	r2, sp, #140	; 0x8c
 802b836:	9907      	ldr	r1, [sp, #28]
 802b838:	9808      	ldr	r0, [sp, #32]
 802b83a:	f002 ffb1 	bl	802e7a0 <__ssprint_r>
 802b83e:	2800      	cmp	r0, #0
 802b840:	f47e afd0 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b844:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802b846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b848:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802b84a:	1a9a      	subs	r2, r3, r2
 802b84c:	46c8      	mov	r8, r9
 802b84e:	e5b9      	b.n	802b3c4 <_svfprintf_r+0xd84>
 802b850:	9b06      	ldr	r3, [sp, #24]
 802b852:	960e      	str	r6, [sp, #56]	; 0x38
 802b854:	2b06      	cmp	r3, #6
 802b856:	bf28      	it	cs
 802b858:	2306      	movcs	r3, #6
 802b85a:	9606      	str	r6, [sp, #24]
 802b85c:	4637      	mov	r7, r6
 802b85e:	9304      	str	r3, [sp, #16]
 802b860:	950b      	str	r5, [sp, #44]	; 0x2c
 802b862:	f8cd b00c 	str.w	fp, [sp, #12]
 802b866:	930a      	str	r3, [sp, #40]	; 0x28
 802b868:	4e74      	ldr	r6, [pc, #464]	; (802ba3c <_svfprintf_r+0x13fc>)
 802b86a:	f7ff b801 	b.w	802a870 <_svfprintf_r+0x230>
 802b86e:	2306      	movs	r3, #6
 802b870:	9306      	str	r3, [sp, #24]
 802b872:	e62d      	b.n	802b4d0 <_svfprintf_r+0xe90>
 802b874:	9c06      	ldr	r4, [sp, #24]
 802b876:	9808      	ldr	r0, [sp, #32]
 802b878:	aa21      	add	r2, sp, #132	; 0x84
 802b87a:	ab1e      	add	r3, sp, #120	; 0x78
 802b87c:	9201      	str	r2, [sp, #4]
 802b87e:	9300      	str	r3, [sp, #0]
 802b880:	4622      	mov	r2, r4
 802b882:	ab1d      	add	r3, sp, #116	; 0x74
 802b884:	2103      	movs	r1, #3
 802b886:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 802b88a:	f000 fa09 	bl	802bca0 <_dtoa_r>
 802b88e:	4623      	mov	r3, r4
 802b890:	4606      	mov	r6, r0
 802b892:	1904      	adds	r4, r0, r4
 802b894:	461d      	mov	r5, r3
 802b896:	e734      	b.n	802b702 <_svfprintf_r+0x10c2>
 802b898:	272d      	movs	r7, #45	; 0x2d
 802b89a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 802b89e:	f7ff baca 	b.w	802ae36 <_svfprintf_r+0x7f6>
 802b8a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b8a6:	4413      	add	r3, r2
 802b8a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b8aa:	930a      	str	r3, [sp, #40]	; 0x28
 802b8ac:	2a00      	cmp	r2, #0
 802b8ae:	f340 80b1 	ble.w	802ba14 <_svfprintf_r+0x13d4>
 802b8b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802b8b6:	9304      	str	r3, [sp, #16]
 802b8b8:	2367      	movs	r3, #103	; 0x67
 802b8ba:	930d      	str	r3, [sp, #52]	; 0x34
 802b8bc:	e66a      	b.n	802b594 <_svfprintf_r+0xf54>
 802b8be:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 802b8c2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 802b8c6:	9319      	str	r3, [sp, #100]	; 0x64
 802b8c8:	232d      	movs	r3, #45	; 0x2d
 802b8ca:	9118      	str	r1, [sp, #96]	; 0x60
 802b8cc:	930c      	str	r3, [sp, #48]	; 0x30
 802b8ce:	e60c      	b.n	802b4ea <_svfprintf_r+0xeaa>
 802b8d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b8d2:	2b47      	cmp	r3, #71	; 0x47
 802b8d4:	f47f ae2b 	bne.w	802b52e <_svfprintf_r+0xeee>
 802b8d8:	f01b 0f01 	tst.w	fp, #1
 802b8dc:	f47f af0b 	bne.w	802b6f6 <_svfprintf_r+0x10b6>
 802b8e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b8e2:	2f47      	cmp	r7, #71	; 0x47
 802b8e4:	eba3 0306 	sub.w	r3, r3, r6
 802b8e8:	930f      	str	r3, [sp, #60]	; 0x3c
 802b8ea:	f43f af29 	beq.w	802b740 <_svfprintf_r+0x1100>
 802b8ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802b8f0:	930e      	str	r3, [sp, #56]	; 0x38
 802b8f2:	e732      	b.n	802b75a <_svfprintf_r+0x111a>
 802b8f4:	2b00      	cmp	r3, #0
 802b8f6:	f340 80a9 	ble.w	802ba4c <_svfprintf_r+0x140c>
 802b8fa:	9a06      	ldr	r2, [sp, #24]
 802b8fc:	2a00      	cmp	r2, #0
 802b8fe:	d16b      	bne.n	802b9d8 <_svfprintf_r+0x1398>
 802b900:	f01b 0f01 	tst.w	fp, #1
 802b904:	d168      	bne.n	802b9d8 <_svfprintf_r+0x1398>
 802b906:	9304      	str	r3, [sp, #16]
 802b908:	930a      	str	r3, [sp, #40]	; 0x28
 802b90a:	e643      	b.n	802b594 <_svfprintf_r+0xf54>
 802b90c:	9b06      	ldr	r3, [sp, #24]
 802b90e:	9304      	str	r3, [sp, #16]
 802b910:	930a      	str	r3, [sp, #40]	; 0x28
 802b912:	9006      	str	r0, [sp, #24]
 802b914:	950b      	str	r5, [sp, #44]	; 0x2c
 802b916:	f8cd b00c 	str.w	fp, [sp, #12]
 802b91a:	900e      	str	r0, [sp, #56]	; 0x38
 802b91c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802b920:	f7fe bfa6 	b.w	802a870 <_svfprintf_r+0x230>
 802b924:	2000      	movs	r0, #0
 802b926:	9006      	str	r0, [sp, #24]
 802b928:	f7fe bee4 	b.w	802a6f4 <_svfprintf_r+0xb4>
 802b92c:	424f      	negs	r7, r1
 802b92e:	3110      	adds	r1, #16
 802b930:	4d43      	ldr	r5, [pc, #268]	; (802ba40 <_svfprintf_r+0x1400>)
 802b932:	da2b      	bge.n	802b98c <_svfprintf_r+0x134c>
 802b934:	2410      	movs	r4, #16
 802b936:	f8dd b020 	ldr.w	fp, [sp, #32]
 802b93a:	e004      	b.n	802b946 <_svfprintf_r+0x1306>
 802b93c:	f108 0808 	add.w	r8, r8, #8
 802b940:	3f10      	subs	r7, #16
 802b942:	2f10      	cmp	r7, #16
 802b944:	dd22      	ble.n	802b98c <_svfprintf_r+0x134c>
 802b946:	3301      	adds	r3, #1
 802b948:	3210      	adds	r2, #16
 802b94a:	2b07      	cmp	r3, #7
 802b94c:	9225      	str	r2, [sp, #148]	; 0x94
 802b94e:	9324      	str	r3, [sp, #144]	; 0x90
 802b950:	f8c8 5000 	str.w	r5, [r8]
 802b954:	f8c8 4004 	str.w	r4, [r8, #4]
 802b958:	ddf0      	ble.n	802b93c <_svfprintf_r+0x12fc>
 802b95a:	aa23      	add	r2, sp, #140	; 0x8c
 802b95c:	9907      	ldr	r1, [sp, #28]
 802b95e:	4658      	mov	r0, fp
 802b960:	f002 ff1e 	bl	802e7a0 <__ssprint_r>
 802b964:	2800      	cmp	r0, #0
 802b966:	f47e af3d 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b96a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b96c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b96e:	46c8      	mov	r8, r9
 802b970:	e7e6      	b.n	802b940 <_svfprintf_r+0x1300>
 802b972:	aa23      	add	r2, sp, #140	; 0x8c
 802b974:	9907      	ldr	r1, [sp, #28]
 802b976:	9808      	ldr	r0, [sp, #32]
 802b978:	f002 ff12 	bl	802e7a0 <__ssprint_r>
 802b97c:	2800      	cmp	r0, #0
 802b97e:	f47e af31 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b982:	991d      	ldr	r1, [sp, #116]	; 0x74
 802b984:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b986:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b988:	46c8      	mov	r8, r9
 802b98a:	e65f      	b.n	802b64c <_svfprintf_r+0x100c>
 802b98c:	3301      	adds	r3, #1
 802b98e:	443a      	add	r2, r7
 802b990:	2b07      	cmp	r3, #7
 802b992:	e888 00a0 	stmia.w	r8, {r5, r7}
 802b996:	9225      	str	r2, [sp, #148]	; 0x94
 802b998:	9324      	str	r3, [sp, #144]	; 0x90
 802b99a:	f108 0808 	add.w	r8, r8, #8
 802b99e:	f77f ae58 	ble.w	802b652 <_svfprintf_r+0x1012>
 802b9a2:	aa23      	add	r2, sp, #140	; 0x8c
 802b9a4:	9907      	ldr	r1, [sp, #28]
 802b9a6:	9808      	ldr	r0, [sp, #32]
 802b9a8:	f002 fefa 	bl	802e7a0 <__ssprint_r>
 802b9ac:	2800      	cmp	r0, #0
 802b9ae:	f47e af19 	bne.w	802a7e4 <_svfprintf_r+0x1a4>
 802b9b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b9b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b9b6:	46c8      	mov	r8, r9
 802b9b8:	e64b      	b.n	802b652 <_svfprintf_r+0x1012>
 802b9ba:	3330      	adds	r3, #48	; 0x30
 802b9bc:	2230      	movs	r2, #48	; 0x30
 802b9be:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 802b9c2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 802b9c6:	ab20      	add	r3, sp, #128	; 0x80
 802b9c8:	e708      	b.n	802b7dc <_svfprintf_r+0x119c>
 802b9ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b9cc:	e5c3      	b.n	802b556 <_svfprintf_r+0xf16>
 802b9ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b9d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b9d2:	4413      	add	r3, r2
 802b9d4:	930a      	str	r3, [sp, #40]	; 0x28
 802b9d6:	e76c      	b.n	802b8b2 <_svfprintf_r+0x1272>
 802b9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b9da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b9dc:	4413      	add	r3, r2
 802b9de:	9a06      	ldr	r2, [sp, #24]
 802b9e0:	441a      	add	r2, r3
 802b9e2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802b9e6:	920a      	str	r2, [sp, #40]	; 0x28
 802b9e8:	9304      	str	r3, [sp, #16]
 802b9ea:	e5d3      	b.n	802b594 <_svfprintf_r+0xf54>
 802b9ec:	4e15      	ldr	r6, [pc, #84]	; (802ba44 <_svfprintf_r+0x1404>)
 802b9ee:	4b16      	ldr	r3, [pc, #88]	; (802ba48 <_svfprintf_r+0x1408>)
 802b9f0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 802b9f4:	f7ff ba21 	b.w	802ae3a <_svfprintf_r+0x7fa>
 802b9f8:	2200      	movs	r2, #0
 802b9fa:	2300      	movs	r3, #0
 802b9fc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 802ba00:	f7e0 ffc4 	bl	800c98c <__aeabi_dcmpeq>
 802ba04:	2800      	cmp	r0, #0
 802ba06:	f47f ae80 	bne.w	802b70a <_svfprintf_r+0x10ca>
 802ba0a:	f1c5 0501 	rsb	r5, r5, #1
 802ba0e:	951d      	str	r5, [sp, #116]	; 0x74
 802ba10:	442c      	add	r4, r5
 802ba12:	e58d      	b.n	802b530 <_svfprintf_r+0xef0>
 802ba14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ba16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ba18:	f1c3 0301 	rsb	r3, r3, #1
 802ba1c:	441a      	add	r2, r3
 802ba1e:	4613      	mov	r3, r2
 802ba20:	e7d8      	b.n	802b9d4 <_svfprintf_r+0x1394>
 802ba22:	f01b 0301 	ands.w	r3, fp, #1
 802ba26:	930e      	str	r3, [sp, #56]	; 0x38
 802ba28:	f47f aee1 	bne.w	802b7ee <_svfprintf_r+0x11ae>
 802ba2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ba2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802ba32:	9304      	str	r3, [sp, #16]
 802ba34:	e5ae      	b.n	802b594 <_svfprintf_r+0xf54>
 802ba36:	bf00      	nop
 802ba38:	66666667 	.word	0x66666667
 802ba3c:	08030d78 	.word	0x08030d78
 802ba40:	08030da0 	.word	0x08030da0
 802ba44:	08030d4c 	.word	0x08030d4c
 802ba48:	08030d48 	.word	0x08030d48
 802ba4c:	9b06      	ldr	r3, [sp, #24]
 802ba4e:	b913      	cbnz	r3, 802ba56 <_svfprintf_r+0x1416>
 802ba50:	f01b 0f01 	tst.w	fp, #1
 802ba54:	d002      	beq.n	802ba5c <_svfprintf_r+0x141c>
 802ba56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802ba58:	3301      	adds	r3, #1
 802ba5a:	e7c0      	b.n	802b9de <_svfprintf_r+0x139e>
 802ba5c:	2301      	movs	r3, #1
 802ba5e:	e752      	b.n	802b906 <_svfprintf_r+0x12c6>
 802ba60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802ba62:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802ba66:	6828      	ldr	r0, [r5, #0]
 802ba68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 802ba6c:	9006      	str	r0, [sp, #24]
 802ba6e:	4628      	mov	r0, r5
 802ba70:	3004      	adds	r0, #4
 802ba72:	46a2      	mov	sl, r4
 802ba74:	900b      	str	r0, [sp, #44]	; 0x2c
 802ba76:	f7fe be3b 	b.w	802a6f0 <_svfprintf_r+0xb0>
 802ba7a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802ba7e:	f7ff b858 	b.w	802ab32 <_svfprintf_r+0x4f2>
 802ba82:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802ba86:	f7ff b8e4 	b.w	802ac52 <_svfprintf_r+0x612>
 802ba8a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802ba8e:	f7ff ba0d 	b.w	802aeac <_svfprintf_r+0x86c>
 802ba92:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 802ba96:	e6a1      	b.n	802b7dc <_svfprintf_r+0x119c>
 802ba98:	9a08      	ldr	r2, [sp, #32]
 802ba9a:	230c      	movs	r3, #12
 802ba9c:	6013      	str	r3, [r2, #0]
 802ba9e:	f04f 33ff 	mov.w	r3, #4294967295
 802baa2:	9305      	str	r3, [sp, #20]
 802baa4:	f7fe bea7 	b.w	802a7f6 <_svfprintf_r+0x1b6>
 802baa8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802baac:	f7ff b98c 	b.w	802adc8 <_svfprintf_r+0x788>
 802bab0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802bab4:	f7ff b968 	b.w	802ad88 <_svfprintf_r+0x748>
 802bab8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802babc:	f7ff b94b 	b.w	802ad56 <_svfprintf_r+0x716>
 802bac0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 802bac4:	f7ff b904 	b.w	802acd0 <_svfprintf_r+0x690>
	...

0802bad0 <__submore>:
 802bad0:	f101 0340 	add.w	r3, r1, #64	; 0x40
 802bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bad8:	460c      	mov	r4, r1
 802bada:	6b09      	ldr	r1, [r1, #48]	; 0x30
 802badc:	4299      	cmp	r1, r3
 802bade:	d014      	beq.n	802bb0a <__submore+0x3a>
 802bae0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 802bae2:	0077      	lsls	r7, r6, #1
 802bae4:	463a      	mov	r2, r7
 802bae6:	f002 fc5b 	bl	802e3a0 <_realloc_r>
 802baea:	4605      	mov	r5, r0
 802baec:	b340      	cbz	r0, 802bb40 <__submore+0x70>
 802baee:	eb00 0806 	add.w	r8, r0, r6
 802baf2:	4632      	mov	r2, r6
 802baf4:	4640      	mov	r0, r8
 802baf6:	4629      	mov	r1, r5
 802baf8:	f7e1 f80a 	bl	800cb10 <memcpy>
 802bafc:	f8c4 8000 	str.w	r8, [r4]
 802bb00:	6325      	str	r5, [r4, #48]	; 0x30
 802bb02:	6367      	str	r7, [r4, #52]	; 0x34
 802bb04:	2000      	movs	r0, #0
 802bb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802bb0e:	f001 fcf7 	bl	802d500 <_malloc_r>
 802bb12:	b1a8      	cbz	r0, 802bb40 <__submore+0x70>
 802bb14:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 802bb18:	6320      	str	r0, [r4, #48]	; 0x30
 802bb1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bb1e:	6362      	str	r2, [r4, #52]	; 0x34
 802bb20:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802bb24:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 802bb28:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802bb2c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 802bb30:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802bb34:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802bb38:	6020      	str	r0, [r4, #0]
 802bb3a:	2000      	movs	r0, #0
 802bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb40:	f04f 30ff 	mov.w	r0, #4294967295
 802bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0802bb50 <__ascii_wctomb>:
 802bb50:	b121      	cbz	r1, 802bb5c <__ascii_wctomb+0xc>
 802bb52:	2aff      	cmp	r2, #255	; 0xff
 802bb54:	d804      	bhi.n	802bb60 <__ascii_wctomb+0x10>
 802bb56:	700a      	strb	r2, [r1, #0]
 802bb58:	2001      	movs	r0, #1
 802bb5a:	4770      	bx	lr
 802bb5c:	4608      	mov	r0, r1
 802bb5e:	4770      	bx	lr
 802bb60:	238a      	movs	r3, #138	; 0x8a
 802bb62:	6003      	str	r3, [r0, #0]
 802bb64:	f04f 30ff 	mov.w	r0, #4294967295
 802bb68:	4770      	bx	lr
 802bb6a:	bf00      	nop
 802bb6c:	0000      	movs	r0, r0
	...

0802bb70 <quorem>:
 802bb70:	6902      	ldr	r2, [r0, #16]
 802bb72:	690b      	ldr	r3, [r1, #16]
 802bb74:	4293      	cmp	r3, r2
 802bb76:	f300 808d 	bgt.w	802bc94 <quorem+0x124>
 802bb7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb7e:	f103 38ff 	add.w	r8, r3, #4294967295
 802bb82:	f101 0714 	add.w	r7, r1, #20
 802bb86:	f100 0b14 	add.w	fp, r0, #20
 802bb8a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 802bb8e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 802bb92:	ea4f 0488 	mov.w	r4, r8, lsl #2
 802bb96:	b083      	sub	sp, #12
 802bb98:	3201      	adds	r2, #1
 802bb9a:	fbb3 f9f2 	udiv	r9, r3, r2
 802bb9e:	eb0b 0304 	add.w	r3, fp, r4
 802bba2:	9400      	str	r4, [sp, #0]
 802bba4:	eb07 0a04 	add.w	sl, r7, r4
 802bba8:	9301      	str	r3, [sp, #4]
 802bbaa:	f1b9 0f00 	cmp.w	r9, #0
 802bbae:	d039      	beq.n	802bc24 <quorem+0xb4>
 802bbb0:	2500      	movs	r5, #0
 802bbb2:	462e      	mov	r6, r5
 802bbb4:	46bc      	mov	ip, r7
 802bbb6:	46de      	mov	lr, fp
 802bbb8:	f85c 4b04 	ldr.w	r4, [ip], #4
 802bbbc:	f8de 3000 	ldr.w	r3, [lr]
 802bbc0:	b2a2      	uxth	r2, r4
 802bbc2:	fb09 5502 	mla	r5, r9, r2, r5
 802bbc6:	0c22      	lsrs	r2, r4, #16
 802bbc8:	0c2c      	lsrs	r4, r5, #16
 802bbca:	fb09 4202 	mla	r2, r9, r2, r4
 802bbce:	b2ad      	uxth	r5, r5
 802bbd0:	1b75      	subs	r5, r6, r5
 802bbd2:	b296      	uxth	r6, r2
 802bbd4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 802bbd8:	fa15 f383 	uxtah	r3, r5, r3
 802bbdc:	eb06 4623 	add.w	r6, r6, r3, asr #16
 802bbe0:	b29b      	uxth	r3, r3
 802bbe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 802bbe6:	45e2      	cmp	sl, ip
 802bbe8:	ea4f 4512 	mov.w	r5, r2, lsr #16
 802bbec:	f84e 3b04 	str.w	r3, [lr], #4
 802bbf0:	ea4f 4626 	mov.w	r6, r6, asr #16
 802bbf4:	d2e0      	bcs.n	802bbb8 <quorem+0x48>
 802bbf6:	9b00      	ldr	r3, [sp, #0]
 802bbf8:	f85b 3003 	ldr.w	r3, [fp, r3]
 802bbfc:	b993      	cbnz	r3, 802bc24 <quorem+0xb4>
 802bbfe:	9c01      	ldr	r4, [sp, #4]
 802bc00:	1f23      	subs	r3, r4, #4
 802bc02:	459b      	cmp	fp, r3
 802bc04:	d20c      	bcs.n	802bc20 <quorem+0xb0>
 802bc06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802bc0a:	b94b      	cbnz	r3, 802bc20 <quorem+0xb0>
 802bc0c:	f1a4 0308 	sub.w	r3, r4, #8
 802bc10:	e002      	b.n	802bc18 <quorem+0xa8>
 802bc12:	681a      	ldr	r2, [r3, #0]
 802bc14:	3b04      	subs	r3, #4
 802bc16:	b91a      	cbnz	r2, 802bc20 <quorem+0xb0>
 802bc18:	459b      	cmp	fp, r3
 802bc1a:	f108 38ff 	add.w	r8, r8, #4294967295
 802bc1e:	d3f8      	bcc.n	802bc12 <quorem+0xa2>
 802bc20:	f8c0 8010 	str.w	r8, [r0, #16]
 802bc24:	4604      	mov	r4, r0
 802bc26:	f002 f993 	bl	802df50 <__mcmp>
 802bc2a:	2800      	cmp	r0, #0
 802bc2c:	db2e      	blt.n	802bc8c <quorem+0x11c>
 802bc2e:	f109 0901 	add.w	r9, r9, #1
 802bc32:	465d      	mov	r5, fp
 802bc34:	2300      	movs	r3, #0
 802bc36:	f857 1b04 	ldr.w	r1, [r7], #4
 802bc3a:	6828      	ldr	r0, [r5, #0]
 802bc3c:	b28a      	uxth	r2, r1
 802bc3e:	1a9a      	subs	r2, r3, r2
 802bc40:	0c0b      	lsrs	r3, r1, #16
 802bc42:	fa12 f280 	uxtah	r2, r2, r0
 802bc46:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 802bc4a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 802bc4e:	b292      	uxth	r2, r2
 802bc50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802bc54:	45ba      	cmp	sl, r7
 802bc56:	f845 2b04 	str.w	r2, [r5], #4
 802bc5a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802bc5e:	d2ea      	bcs.n	802bc36 <quorem+0xc6>
 802bc60:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 802bc64:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 802bc68:	b982      	cbnz	r2, 802bc8c <quorem+0x11c>
 802bc6a:	1f1a      	subs	r2, r3, #4
 802bc6c:	4593      	cmp	fp, r2
 802bc6e:	d20b      	bcs.n	802bc88 <quorem+0x118>
 802bc70:	f853 2c04 	ldr.w	r2, [r3, #-4]
 802bc74:	b942      	cbnz	r2, 802bc88 <quorem+0x118>
 802bc76:	3b08      	subs	r3, #8
 802bc78:	e002      	b.n	802bc80 <quorem+0x110>
 802bc7a:	681a      	ldr	r2, [r3, #0]
 802bc7c:	3b04      	subs	r3, #4
 802bc7e:	b91a      	cbnz	r2, 802bc88 <quorem+0x118>
 802bc80:	459b      	cmp	fp, r3
 802bc82:	f108 38ff 	add.w	r8, r8, #4294967295
 802bc86:	d3f8      	bcc.n	802bc7a <quorem+0x10a>
 802bc88:	f8c4 8010 	str.w	r8, [r4, #16]
 802bc8c:	4648      	mov	r0, r9
 802bc8e:	b003      	add	sp, #12
 802bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc94:	2000      	movs	r0, #0
 802bc96:	4770      	bx	lr
	...

0802bca0 <_dtoa_r>:
 802bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bca4:	ec57 6b10 	vmov	r6, r7, d0
 802bca8:	b097      	sub	sp, #92	; 0x5c
 802bcaa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 802bcac:	9102      	str	r1, [sp, #8]
 802bcae:	4604      	mov	r4, r0
 802bcb0:	4693      	mov	fp, r2
 802bcb2:	9303      	str	r3, [sp, #12]
 802bcb4:	e9cd 6700 	strd	r6, r7, [sp]
 802bcb8:	b14d      	cbz	r5, 802bcce <_dtoa_r+0x2e>
 802bcba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802bcbc:	606a      	str	r2, [r5, #4]
 802bcbe:	2301      	movs	r3, #1
 802bcc0:	4093      	lsls	r3, r2
 802bcc2:	60ab      	str	r3, [r5, #8]
 802bcc4:	4629      	mov	r1, r5
 802bcc6:	f001 ff03 	bl	802dad0 <_Bfree>
 802bcca:	2300      	movs	r3, #0
 802bccc:	6423      	str	r3, [r4, #64]	; 0x40
 802bcce:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bcd2:	2b00      	cmp	r3, #0
 802bcd4:	4699      	mov	r9, r3
 802bcd6:	db38      	blt.n	802bd4a <_dtoa_r+0xaa>
 802bcd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802bcda:	2300      	movs	r3, #0
 802bcdc:	6013      	str	r3, [r2, #0]
 802bcde:	4ba0      	ldr	r3, [pc, #640]	; (802bf60 <_dtoa_r+0x2c0>)
 802bce0:	ea33 0309 	bics.w	r3, r3, r9
 802bce4:	d017      	beq.n	802bd16 <_dtoa_r+0x76>
 802bce6:	e9dd 6700 	ldrd	r6, r7, [sp]
 802bcea:	2200      	movs	r2, #0
 802bcec:	2300      	movs	r3, #0
 802bcee:	4630      	mov	r0, r6
 802bcf0:	4639      	mov	r1, r7
 802bcf2:	f7e0 fe4b 	bl	800c98c <__aeabi_dcmpeq>
 802bcf6:	4680      	mov	r8, r0
 802bcf8:	2800      	cmp	r0, #0
 802bcfa:	d02f      	beq.n	802bd5c <_dtoa_r+0xbc>
 802bcfc:	9a03      	ldr	r2, [sp, #12]
 802bcfe:	2301      	movs	r3, #1
 802bd00:	6013      	str	r3, [r2, #0]
 802bd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bd04:	2b00      	cmp	r3, #0
 802bd06:	f000 80c4 	beq.w	802be92 <_dtoa_r+0x1f2>
 802bd0a:	4896      	ldr	r0, [pc, #600]	; (802bf64 <_dtoa_r+0x2c4>)
 802bd0c:	6018      	str	r0, [r3, #0]
 802bd0e:	3801      	subs	r0, #1
 802bd10:	b017      	add	sp, #92	; 0x5c
 802bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bd16:	9a03      	ldr	r2, [sp, #12]
 802bd18:	f242 730f 	movw	r3, #9999	; 0x270f
 802bd1c:	6013      	str	r3, [r2, #0]
 802bd1e:	9b00      	ldr	r3, [sp, #0]
 802bd20:	b96b      	cbnz	r3, 802bd3e <_dtoa_r+0x9e>
 802bd22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802bd26:	b953      	cbnz	r3, 802bd3e <_dtoa_r+0x9e>
 802bd28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bd2a:	488f      	ldr	r0, [pc, #572]	; (802bf68 <_dtoa_r+0x2c8>)
 802bd2c:	2b00      	cmp	r3, #0
 802bd2e:	d0ef      	beq.n	802bd10 <_dtoa_r+0x70>
 802bd30:	f100 0308 	add.w	r3, r0, #8
 802bd34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802bd36:	6013      	str	r3, [r2, #0]
 802bd38:	b017      	add	sp, #92	; 0x5c
 802bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bd3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bd40:	488a      	ldr	r0, [pc, #552]	; (802bf6c <_dtoa_r+0x2cc>)
 802bd42:	2b00      	cmp	r3, #0
 802bd44:	d0e4      	beq.n	802bd10 <_dtoa_r+0x70>
 802bd46:	1cc3      	adds	r3, r0, #3
 802bd48:	e7f4      	b.n	802bd34 <_dtoa_r+0x94>
 802bd4a:	9a01      	ldr	r2, [sp, #4]
 802bd4c:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 802bd50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802bd52:	f8cd 9004 	str.w	r9, [sp, #4]
 802bd56:	2301      	movs	r3, #1
 802bd58:	6013      	str	r3, [r2, #0]
 802bd5a:	e7c0      	b.n	802bcde <_dtoa_r+0x3e>
 802bd5c:	aa14      	add	r2, sp, #80	; 0x50
 802bd5e:	a915      	add	r1, sp, #84	; 0x54
 802bd60:	ec47 6b10 	vmov	d0, r6, r7
 802bd64:	4620      	mov	r0, r4
 802bd66:	f002 fa33 	bl	802e1d0 <__d2b>
 802bd6a:	ea5f 5519 	movs.w	r5, r9, lsr #20
 802bd6e:	4682      	mov	sl, r0
 802bd70:	d073      	beq.n	802be5a <_dtoa_r+0x1ba>
 802bd72:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802bd76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 802bd7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802bd7e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802bd82:	4630      	mov	r0, r6
 802bd84:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802bd88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 802bd8c:	2200      	movs	r2, #0
 802bd8e:	4b78      	ldr	r3, [pc, #480]	; (802bf70 <_dtoa_r+0x2d0>)
 802bd90:	f7e0 f9da 	bl	800c148 <__aeabi_dsub>
 802bd94:	a36c      	add	r3, pc, #432	; (adr r3, 802bf48 <_dtoa_r+0x2a8>)
 802bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd9a:	f7e0 fb89 	bl	800c4b0 <__aeabi_dmul>
 802bd9e:	a36c      	add	r3, pc, #432	; (adr r3, 802bf50 <_dtoa_r+0x2b0>)
 802bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bda4:	f7e0 f9d2 	bl	800c14c <__adddf3>
 802bda8:	4606      	mov	r6, r0
 802bdaa:	4628      	mov	r0, r5
 802bdac:	460f      	mov	r7, r1
 802bdae:	f7e0 fb19 	bl	800c3e4 <__aeabi_i2d>
 802bdb2:	a369      	add	r3, pc, #420	; (adr r3, 802bf58 <_dtoa_r+0x2b8>)
 802bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdb8:	f7e0 fb7a 	bl	800c4b0 <__aeabi_dmul>
 802bdbc:	4602      	mov	r2, r0
 802bdbe:	460b      	mov	r3, r1
 802bdc0:	4630      	mov	r0, r6
 802bdc2:	4639      	mov	r1, r7
 802bdc4:	f7e0 f9c2 	bl	800c14c <__adddf3>
 802bdc8:	4606      	mov	r6, r0
 802bdca:	460f      	mov	r7, r1
 802bdcc:	f7e0 fe28 	bl	800ca20 <__aeabi_d2iz>
 802bdd0:	2200      	movs	r2, #0
 802bdd2:	9004      	str	r0, [sp, #16]
 802bdd4:	2300      	movs	r3, #0
 802bdd6:	4630      	mov	r0, r6
 802bdd8:	4639      	mov	r1, r7
 802bdda:	f7e0 fde1 	bl	800c9a0 <__aeabi_dcmplt>
 802bdde:	2800      	cmp	r0, #0
 802bde0:	f040 816f 	bne.w	802c0c2 <_dtoa_r+0x422>
 802bde4:	9e04      	ldr	r6, [sp, #16]
 802bde6:	2e16      	cmp	r6, #22
 802bde8:	f200 8159 	bhi.w	802c09e <_dtoa_r+0x3fe>
 802bdec:	4b61      	ldr	r3, [pc, #388]	; (802bf74 <_dtoa_r+0x2d4>)
 802bdee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802bdf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 802bdf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bdfa:	f7e0 fdef 	bl	800c9dc <__aeabi_dcmpgt>
 802bdfe:	2800      	cmp	r0, #0
 802be00:	f000 81c4 	beq.w	802c18c <_dtoa_r+0x4ec>
 802be04:	1e73      	subs	r3, r6, #1
 802be06:	9304      	str	r3, [sp, #16]
 802be08:	2300      	movs	r3, #0
 802be0a:	930c      	str	r3, [sp, #48]	; 0x30
 802be0c:	eba8 0505 	sub.w	r5, r8, r5
 802be10:	1e6b      	subs	r3, r5, #1
 802be12:	9305      	str	r3, [sp, #20]
 802be14:	f100 814f 	bmi.w	802c0b6 <_dtoa_r+0x416>
 802be18:	2300      	movs	r3, #0
 802be1a:	9306      	str	r3, [sp, #24]
 802be1c:	9b04      	ldr	r3, [sp, #16]
 802be1e:	2b00      	cmp	r3, #0
 802be20:	f2c0 8140 	blt.w	802c0a4 <_dtoa_r+0x404>
 802be24:	9a05      	ldr	r2, [sp, #20]
 802be26:	930b      	str	r3, [sp, #44]	; 0x2c
 802be28:	4611      	mov	r1, r2
 802be2a:	4419      	add	r1, r3
 802be2c:	2300      	movs	r3, #0
 802be2e:	9105      	str	r1, [sp, #20]
 802be30:	930a      	str	r3, [sp, #40]	; 0x28
 802be32:	9b02      	ldr	r3, [sp, #8]
 802be34:	2b09      	cmp	r3, #9
 802be36:	d82e      	bhi.n	802be96 <_dtoa_r+0x1f6>
 802be38:	2b05      	cmp	r3, #5
 802be3a:	f340 8651 	ble.w	802cae0 <_dtoa_r+0xe40>
 802be3e:	3b04      	subs	r3, #4
 802be40:	9302      	str	r3, [sp, #8]
 802be42:	2700      	movs	r7, #0
 802be44:	9b02      	ldr	r3, [sp, #8]
 802be46:	3b02      	subs	r3, #2
 802be48:	2b03      	cmp	r3, #3
 802be4a:	f200 8633 	bhi.w	802cab4 <_dtoa_r+0xe14>
 802be4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802be52:	03d6      	.short	0x03d6
 802be54:	03e302cb 	.word	0x03e302cb
 802be58:	0464      	.short	0x0464
 802be5a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802be5e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802be60:	4445      	add	r5, r8
 802be62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802be66:	2b20      	cmp	r3, #32
 802be68:	f340 818a 	ble.w	802c180 <_dtoa_r+0x4e0>
 802be6c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802be70:	fa09 f903 	lsl.w	r9, r9, r3
 802be74:	9b00      	ldr	r3, [sp, #0]
 802be76:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802be7a:	fa23 f000 	lsr.w	r0, r3, r0
 802be7e:	ea40 0009 	orr.w	r0, r0, r9
 802be82:	f7e0 fa9f 	bl	800c3c4 <__aeabi_ui2d>
 802be86:	2301      	movs	r3, #1
 802be88:	3d01      	subs	r5, #1
 802be8a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 802be8e:	9310      	str	r3, [sp, #64]	; 0x40
 802be90:	e77c      	b.n	802bd8c <_dtoa_r+0xec>
 802be92:	4839      	ldr	r0, [pc, #228]	; (802bf78 <_dtoa_r+0x2d8>)
 802be94:	e73c      	b.n	802bd10 <_dtoa_r+0x70>
 802be96:	2100      	movs	r1, #0
 802be98:	6461      	str	r1, [r4, #68]	; 0x44
 802be9a:	4620      	mov	r0, r4
 802be9c:	468b      	mov	fp, r1
 802be9e:	f001 fdef 	bl	802da80 <_Balloc>
 802bea2:	f04f 33ff 	mov.w	r3, #4294967295
 802bea6:	9308      	str	r3, [sp, #32]
 802bea8:	930d      	str	r3, [sp, #52]	; 0x34
 802beaa:	2301      	movs	r3, #1
 802beac:	9007      	str	r0, [sp, #28]
 802beae:	6420      	str	r0, [r4, #64]	; 0x40
 802beb0:	f8cd b008 	str.w	fp, [sp, #8]
 802beb4:	9309      	str	r3, [sp, #36]	; 0x24
 802beb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802beb8:	2b00      	cmp	r3, #0
 802beba:	f2c0 80d0 	blt.w	802c05e <_dtoa_r+0x3be>
 802bebe:	9a04      	ldr	r2, [sp, #16]
 802bec0:	2a0e      	cmp	r2, #14
 802bec2:	f300 80cc 	bgt.w	802c05e <_dtoa_r+0x3be>
 802bec6:	4b2b      	ldr	r3, [pc, #172]	; (802bf74 <_dtoa_r+0x2d4>)
 802bec8:	f1bb 0f00 	cmp.w	fp, #0
 802becc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802bed0:	e9d3 8900 	ldrd	r8, r9, [r3]
 802bed4:	f2c0 83be 	blt.w	802c654 <_dtoa_r+0x9b4>
 802bed8:	e9dd 6700 	ldrd	r6, r7, [sp]
 802bedc:	4642      	mov	r2, r8
 802bede:	464b      	mov	r3, r9
 802bee0:	4630      	mov	r0, r6
 802bee2:	4639      	mov	r1, r7
 802bee4:	f7e0 fc0e 	bl	800c704 <__aeabi_ddiv>
 802bee8:	f7e0 fd9a 	bl	800ca20 <__aeabi_d2iz>
 802beec:	4683      	mov	fp, r0
 802beee:	f7e0 fa79 	bl	800c3e4 <__aeabi_i2d>
 802bef2:	4642      	mov	r2, r8
 802bef4:	464b      	mov	r3, r9
 802bef6:	f7e0 fadb 	bl	800c4b0 <__aeabi_dmul>
 802befa:	460b      	mov	r3, r1
 802befc:	4602      	mov	r2, r0
 802befe:	4639      	mov	r1, r7
 802bf00:	4630      	mov	r0, r6
 802bf02:	f7e0 f921 	bl	800c148 <__aeabi_dsub>
 802bf06:	9d07      	ldr	r5, [sp, #28]
 802bf08:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 802bf0c:	702b      	strb	r3, [r5, #0]
 802bf0e:	9b08      	ldr	r3, [sp, #32]
 802bf10:	2b01      	cmp	r3, #1
 802bf12:	4606      	mov	r6, r0
 802bf14:	460f      	mov	r7, r1
 802bf16:	f105 0501 	add.w	r5, r5, #1
 802bf1a:	d061      	beq.n	802bfe0 <_dtoa_r+0x340>
 802bf1c:	2200      	movs	r2, #0
 802bf1e:	4b17      	ldr	r3, [pc, #92]	; (802bf7c <_dtoa_r+0x2dc>)
 802bf20:	f7e0 fac6 	bl	800c4b0 <__aeabi_dmul>
 802bf24:	2200      	movs	r2, #0
 802bf26:	2300      	movs	r3, #0
 802bf28:	4606      	mov	r6, r0
 802bf2a:	460f      	mov	r7, r1
 802bf2c:	f7e0 fd2e 	bl	800c98c <__aeabi_dcmpeq>
 802bf30:	2800      	cmp	r0, #0
 802bf32:	f040 8081 	bne.w	802c038 <_dtoa_r+0x398>
 802bf36:	f8cd a000 	str.w	sl, [sp]
 802bf3a:	9402      	str	r4, [sp, #8]
 802bf3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802bf40:	9c08      	ldr	r4, [sp, #32]
 802bf42:	e028      	b.n	802bf96 <_dtoa_r+0x2f6>
 802bf44:	f3af 8000 	nop.w
 802bf48:	636f4361 	.word	0x636f4361
 802bf4c:	3fd287a7 	.word	0x3fd287a7
 802bf50:	8b60c8b3 	.word	0x8b60c8b3
 802bf54:	3fc68a28 	.word	0x3fc68a28
 802bf58:	509f79fb 	.word	0x509f79fb
 802bf5c:	3fd34413 	.word	0x3fd34413
 802bf60:	7ff00000 	.word	0x7ff00000
 802bf64:	08030d81 	.word	0x08030d81
 802bf68:	08030ec0 	.word	0x08030ec0
 802bf6c:	08030ecc 	.word	0x08030ecc
 802bf70:	3ff80000 	.word	0x3ff80000
 802bf74:	08031000 	.word	0x08031000
 802bf78:	08030d80 	.word	0x08030d80
 802bf7c:	40240000 	.word	0x40240000
 802bf80:	f7e0 fa96 	bl	800c4b0 <__aeabi_dmul>
 802bf84:	2200      	movs	r2, #0
 802bf86:	2300      	movs	r3, #0
 802bf88:	4606      	mov	r6, r0
 802bf8a:	460f      	mov	r7, r1
 802bf8c:	f7e0 fcfe 	bl	800c98c <__aeabi_dcmpeq>
 802bf90:	2800      	cmp	r0, #0
 802bf92:	f040 83c5 	bne.w	802c720 <_dtoa_r+0xa80>
 802bf96:	4642      	mov	r2, r8
 802bf98:	464b      	mov	r3, r9
 802bf9a:	4630      	mov	r0, r6
 802bf9c:	4639      	mov	r1, r7
 802bf9e:	f7e0 fbb1 	bl	800c704 <__aeabi_ddiv>
 802bfa2:	f7e0 fd3d 	bl	800ca20 <__aeabi_d2iz>
 802bfa6:	4683      	mov	fp, r0
 802bfa8:	f7e0 fa1c 	bl	800c3e4 <__aeabi_i2d>
 802bfac:	4642      	mov	r2, r8
 802bfae:	464b      	mov	r3, r9
 802bfb0:	f7e0 fa7e 	bl	800c4b0 <__aeabi_dmul>
 802bfb4:	4602      	mov	r2, r0
 802bfb6:	460b      	mov	r3, r1
 802bfb8:	4630      	mov	r0, r6
 802bfba:	4639      	mov	r1, r7
 802bfbc:	f7e0 f8c4 	bl	800c148 <__aeabi_dsub>
 802bfc0:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 802bfc4:	f805 eb01 	strb.w	lr, [r5], #1
 802bfc8:	eba5 0e0a 	sub.w	lr, r5, sl
 802bfcc:	45a6      	cmp	lr, r4
 802bfce:	4606      	mov	r6, r0
 802bfd0:	460f      	mov	r7, r1
 802bfd2:	f04f 0200 	mov.w	r2, #0
 802bfd6:	4b6e      	ldr	r3, [pc, #440]	; (802c190 <_dtoa_r+0x4f0>)
 802bfd8:	d1d2      	bne.n	802bf80 <_dtoa_r+0x2e0>
 802bfda:	f8dd a000 	ldr.w	sl, [sp]
 802bfde:	9c02      	ldr	r4, [sp, #8]
 802bfe0:	4632      	mov	r2, r6
 802bfe2:	463b      	mov	r3, r7
 802bfe4:	4630      	mov	r0, r6
 802bfe6:	4639      	mov	r1, r7
 802bfe8:	f7e0 f8b0 	bl	800c14c <__adddf3>
 802bfec:	4606      	mov	r6, r0
 802bfee:	460f      	mov	r7, r1
 802bff0:	4602      	mov	r2, r0
 802bff2:	460b      	mov	r3, r1
 802bff4:	4640      	mov	r0, r8
 802bff6:	4649      	mov	r1, r9
 802bff8:	f7e0 fcd2 	bl	800c9a0 <__aeabi_dcmplt>
 802bffc:	b948      	cbnz	r0, 802c012 <_dtoa_r+0x372>
 802bffe:	4632      	mov	r2, r6
 802c000:	463b      	mov	r3, r7
 802c002:	4640      	mov	r0, r8
 802c004:	4649      	mov	r1, r9
 802c006:	f7e0 fcc1 	bl	800c98c <__aeabi_dcmpeq>
 802c00a:	b1a8      	cbz	r0, 802c038 <_dtoa_r+0x398>
 802c00c:	f01b 0f01 	tst.w	fp, #1
 802c010:	d012      	beq.n	802c038 <_dtoa_r+0x398>
 802c012:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 802c016:	9a07      	ldr	r2, [sp, #28]
 802c018:	1e6b      	subs	r3, r5, #1
 802c01a:	e004      	b.n	802c026 <_dtoa_r+0x386>
 802c01c:	429a      	cmp	r2, r3
 802c01e:	f000 842d 	beq.w	802c87c <_dtoa_r+0xbdc>
 802c022:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 802c026:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802c02a:	f103 0501 	add.w	r5, r3, #1
 802c02e:	d0f5      	beq.n	802c01c <_dtoa_r+0x37c>
 802c030:	f108 0801 	add.w	r8, r8, #1
 802c034:	f883 8000 	strb.w	r8, [r3]
 802c038:	4651      	mov	r1, sl
 802c03a:	4620      	mov	r0, r4
 802c03c:	f001 fd48 	bl	802dad0 <_Bfree>
 802c040:	2200      	movs	r2, #0
 802c042:	9b04      	ldr	r3, [sp, #16]
 802c044:	702a      	strb	r2, [r5, #0]
 802c046:	9a03      	ldr	r2, [sp, #12]
 802c048:	3301      	adds	r3, #1
 802c04a:	6013      	str	r3, [r2, #0]
 802c04c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802c04e:	2b00      	cmp	r3, #0
 802c050:	f000 83a3 	beq.w	802c79a <_dtoa_r+0xafa>
 802c054:	9807      	ldr	r0, [sp, #28]
 802c056:	601d      	str	r5, [r3, #0]
 802c058:	b017      	add	sp, #92	; 0x5c
 802c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c060:	2a00      	cmp	r2, #0
 802c062:	d040      	beq.n	802c0e6 <_dtoa_r+0x446>
 802c064:	9a02      	ldr	r2, [sp, #8]
 802c066:	2a01      	cmp	r2, #1
 802c068:	f340 831c 	ble.w	802c6a4 <_dtoa_r+0xa04>
 802c06c:	9b08      	ldr	r3, [sp, #32]
 802c06e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c070:	1e5f      	subs	r7, r3, #1
 802c072:	42ba      	cmp	r2, r7
 802c074:	f2c0 8394 	blt.w	802c7a0 <_dtoa_r+0xb00>
 802c078:	1bd7      	subs	r7, r2, r7
 802c07a:	9b08      	ldr	r3, [sp, #32]
 802c07c:	2b00      	cmp	r3, #0
 802c07e:	f2c0 847e 	blt.w	802c97e <_dtoa_r+0xcde>
 802c082:	9d06      	ldr	r5, [sp, #24]
 802c084:	9b08      	ldr	r3, [sp, #32]
 802c086:	9a06      	ldr	r2, [sp, #24]
 802c088:	441a      	add	r2, r3
 802c08a:	9206      	str	r2, [sp, #24]
 802c08c:	9a05      	ldr	r2, [sp, #20]
 802c08e:	2101      	movs	r1, #1
 802c090:	441a      	add	r2, r3
 802c092:	4620      	mov	r0, r4
 802c094:	9205      	str	r2, [sp, #20]
 802c096:	f001 fe0b 	bl	802dcb0 <__i2b>
 802c09a:	4606      	mov	r6, r0
 802c09c:	e026      	b.n	802c0ec <_dtoa_r+0x44c>
 802c09e:	2301      	movs	r3, #1
 802c0a0:	930c      	str	r3, [sp, #48]	; 0x30
 802c0a2:	e6b3      	b.n	802be0c <_dtoa_r+0x16c>
 802c0a4:	9a06      	ldr	r2, [sp, #24]
 802c0a6:	9b04      	ldr	r3, [sp, #16]
 802c0a8:	1ad2      	subs	r2, r2, r3
 802c0aa:	425b      	negs	r3, r3
 802c0ac:	930a      	str	r3, [sp, #40]	; 0x28
 802c0ae:	2300      	movs	r3, #0
 802c0b0:	9206      	str	r2, [sp, #24]
 802c0b2:	930b      	str	r3, [sp, #44]	; 0x2c
 802c0b4:	e6bd      	b.n	802be32 <_dtoa_r+0x192>
 802c0b6:	f1c5 0301 	rsb	r3, r5, #1
 802c0ba:	9306      	str	r3, [sp, #24]
 802c0bc:	2300      	movs	r3, #0
 802c0be:	9305      	str	r3, [sp, #20]
 802c0c0:	e6ac      	b.n	802be1c <_dtoa_r+0x17c>
 802c0c2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 802c0c6:	4648      	mov	r0, r9
 802c0c8:	f7e0 f98c 	bl	800c3e4 <__aeabi_i2d>
 802c0cc:	4602      	mov	r2, r0
 802c0ce:	460b      	mov	r3, r1
 802c0d0:	4630      	mov	r0, r6
 802c0d2:	4639      	mov	r1, r7
 802c0d4:	f7e0 fc5a 	bl	800c98c <__aeabi_dcmpeq>
 802c0d8:	2800      	cmp	r0, #0
 802c0da:	f47f ae83 	bne.w	802bde4 <_dtoa_r+0x144>
 802c0de:	f109 33ff 	add.w	r3, r9, #4294967295
 802c0e2:	9304      	str	r3, [sp, #16]
 802c0e4:	e67e      	b.n	802bde4 <_dtoa_r+0x144>
 802c0e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802c0e8:	9d06      	ldr	r5, [sp, #24]
 802c0ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802c0ec:	2d00      	cmp	r5, #0
 802c0ee:	dd0c      	ble.n	802c10a <_dtoa_r+0x46a>
 802c0f0:	9905      	ldr	r1, [sp, #20]
 802c0f2:	2900      	cmp	r1, #0
 802c0f4:	460b      	mov	r3, r1
 802c0f6:	dd08      	ble.n	802c10a <_dtoa_r+0x46a>
 802c0f8:	42a9      	cmp	r1, r5
 802c0fa:	9a06      	ldr	r2, [sp, #24]
 802c0fc:	bfa8      	it	ge
 802c0fe:	462b      	movge	r3, r5
 802c100:	1ad2      	subs	r2, r2, r3
 802c102:	1aed      	subs	r5, r5, r3
 802c104:	1acb      	subs	r3, r1, r3
 802c106:	9206      	str	r2, [sp, #24]
 802c108:	9305      	str	r3, [sp, #20]
 802c10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c10c:	b1d3      	cbz	r3, 802c144 <_dtoa_r+0x4a4>
 802c10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c110:	2b00      	cmp	r3, #0
 802c112:	f000 82c0 	beq.w	802c696 <_dtoa_r+0x9f6>
 802c116:	2f00      	cmp	r7, #0
 802c118:	dd10      	ble.n	802c13c <_dtoa_r+0x49c>
 802c11a:	4631      	mov	r1, r6
 802c11c:	463a      	mov	r2, r7
 802c11e:	4620      	mov	r0, r4
 802c120:	f001 fe6e 	bl	802de00 <__pow5mult>
 802c124:	4652      	mov	r2, sl
 802c126:	4601      	mov	r1, r0
 802c128:	4606      	mov	r6, r0
 802c12a:	4620      	mov	r0, r4
 802c12c:	f001 fdd0 	bl	802dcd0 <__multiply>
 802c130:	4651      	mov	r1, sl
 802c132:	4680      	mov	r8, r0
 802c134:	4620      	mov	r0, r4
 802c136:	f001 fccb 	bl	802dad0 <_Bfree>
 802c13a:	46c2      	mov	sl, r8
 802c13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c13e:	1bda      	subs	r2, r3, r7
 802c140:	f040 82aa 	bne.w	802c698 <_dtoa_r+0x9f8>
 802c144:	2101      	movs	r1, #1
 802c146:	4620      	mov	r0, r4
 802c148:	f001 fdb2 	bl	802dcb0 <__i2b>
 802c14c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c14e:	2b00      	cmp	r3, #0
 802c150:	4681      	mov	r9, r0
 802c152:	dd1f      	ble.n	802c194 <_dtoa_r+0x4f4>
 802c154:	4601      	mov	r1, r0
 802c156:	461a      	mov	r2, r3
 802c158:	4620      	mov	r0, r4
 802c15a:	f001 fe51 	bl	802de00 <__pow5mult>
 802c15e:	9b02      	ldr	r3, [sp, #8]
 802c160:	2b01      	cmp	r3, #1
 802c162:	4681      	mov	r9, r0
 802c164:	f340 825b 	ble.w	802c61e <_dtoa_r+0x97e>
 802c168:	f04f 0800 	mov.w	r8, #0
 802c16c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802c170:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 802c174:	6918      	ldr	r0, [r3, #16]
 802c176:	f001 fd4b 	bl	802dc10 <__hi0bits>
 802c17a:	f1c0 0020 	rsb	r0, r0, #32
 802c17e:	e013      	b.n	802c1a8 <_dtoa_r+0x508>
 802c180:	f1c3 0920 	rsb	r9, r3, #32
 802c184:	9b00      	ldr	r3, [sp, #0]
 802c186:	fa03 f009 	lsl.w	r0, r3, r9
 802c18a:	e67a      	b.n	802be82 <_dtoa_r+0x1e2>
 802c18c:	900c      	str	r0, [sp, #48]	; 0x30
 802c18e:	e63d      	b.n	802be0c <_dtoa_r+0x16c>
 802c190:	40240000 	.word	0x40240000
 802c194:	9b02      	ldr	r3, [sp, #8]
 802c196:	2b01      	cmp	r3, #1
 802c198:	f340 828d 	ble.w	802c6b6 <_dtoa_r+0xa16>
 802c19c:	f04f 0800 	mov.w	r8, #0
 802c1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c1a2:	2001      	movs	r0, #1
 802c1a4:	2b00      	cmp	r3, #0
 802c1a6:	d1e1      	bne.n	802c16c <_dtoa_r+0x4cc>
 802c1a8:	9a05      	ldr	r2, [sp, #20]
 802c1aa:	4410      	add	r0, r2
 802c1ac:	f010 001f 	ands.w	r0, r0, #31
 802c1b0:	f000 80a1 	beq.w	802c2f6 <_dtoa_r+0x656>
 802c1b4:	f1c0 0320 	rsb	r3, r0, #32
 802c1b8:	2b04      	cmp	r3, #4
 802c1ba:	f340 848c 	ble.w	802cad6 <_dtoa_r+0xe36>
 802c1be:	9b06      	ldr	r3, [sp, #24]
 802c1c0:	f1c0 001c 	rsb	r0, r0, #28
 802c1c4:	4403      	add	r3, r0
 802c1c6:	9306      	str	r3, [sp, #24]
 802c1c8:	4613      	mov	r3, r2
 802c1ca:	4403      	add	r3, r0
 802c1cc:	4405      	add	r5, r0
 802c1ce:	9305      	str	r3, [sp, #20]
 802c1d0:	9b06      	ldr	r3, [sp, #24]
 802c1d2:	2b00      	cmp	r3, #0
 802c1d4:	dd05      	ble.n	802c1e2 <_dtoa_r+0x542>
 802c1d6:	4651      	mov	r1, sl
 802c1d8:	461a      	mov	r2, r3
 802c1da:	4620      	mov	r0, r4
 802c1dc:	f001 fe60 	bl	802dea0 <__lshift>
 802c1e0:	4682      	mov	sl, r0
 802c1e2:	9b05      	ldr	r3, [sp, #20]
 802c1e4:	2b00      	cmp	r3, #0
 802c1e6:	dd05      	ble.n	802c1f4 <_dtoa_r+0x554>
 802c1e8:	4649      	mov	r1, r9
 802c1ea:	461a      	mov	r2, r3
 802c1ec:	4620      	mov	r0, r4
 802c1ee:	f001 fe57 	bl	802dea0 <__lshift>
 802c1f2:	4681      	mov	r9, r0
 802c1f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c1f6:	2b00      	cmp	r3, #0
 802c1f8:	f040 8086 	bne.w	802c308 <_dtoa_r+0x668>
 802c1fc:	9b08      	ldr	r3, [sp, #32]
 802c1fe:	2b00      	cmp	r3, #0
 802c200:	f340 8269 	ble.w	802c6d6 <_dtoa_r+0xa36>
 802c204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c206:	2b00      	cmp	r3, #0
 802c208:	f000 8098 	beq.w	802c33c <_dtoa_r+0x69c>
 802c20c:	2d00      	cmp	r5, #0
 802c20e:	dd05      	ble.n	802c21c <_dtoa_r+0x57c>
 802c210:	4631      	mov	r1, r6
 802c212:	462a      	mov	r2, r5
 802c214:	4620      	mov	r0, r4
 802c216:	f001 fe43 	bl	802dea0 <__lshift>
 802c21a:	4606      	mov	r6, r0
 802c21c:	f1b8 0f00 	cmp.w	r8, #0
 802c220:	f040 8336 	bne.w	802c890 <_dtoa_r+0xbf0>
 802c224:	46b0      	mov	r8, r6
 802c226:	9b08      	ldr	r3, [sp, #32]
 802c228:	9a07      	ldr	r2, [sp, #28]
 802c22a:	3b01      	subs	r3, #1
 802c22c:	18d3      	adds	r3, r2, r3
 802c22e:	9308      	str	r3, [sp, #32]
 802c230:	9b00      	ldr	r3, [sp, #0]
 802c232:	f003 0301 	and.w	r3, r3, #1
 802c236:	9309      	str	r3, [sp, #36]	; 0x24
 802c238:	4617      	mov	r7, r2
 802c23a:	4649      	mov	r1, r9
 802c23c:	4650      	mov	r0, sl
 802c23e:	f7ff fc97 	bl	802bb70 <quorem>
 802c242:	4631      	mov	r1, r6
 802c244:	4605      	mov	r5, r0
 802c246:	4650      	mov	r0, sl
 802c248:	f001 fe82 	bl	802df50 <__mcmp>
 802c24c:	4642      	mov	r2, r8
 802c24e:	4649      	mov	r1, r9
 802c250:	4683      	mov	fp, r0
 802c252:	4620      	mov	r0, r4
 802c254:	f001 fe9c 	bl	802df90 <__mdiff>
 802c258:	f105 0230 	add.w	r2, r5, #48	; 0x30
 802c25c:	9200      	str	r2, [sp, #0]
 802c25e:	68c2      	ldr	r2, [r0, #12]
 802c260:	4601      	mov	r1, r0
 802c262:	2a00      	cmp	r2, #0
 802c264:	f040 8232 	bne.w	802c6cc <_dtoa_r+0xa2c>
 802c268:	9006      	str	r0, [sp, #24]
 802c26a:	4650      	mov	r0, sl
 802c26c:	f001 fe70 	bl	802df50 <__mcmp>
 802c270:	9b06      	ldr	r3, [sp, #24]
 802c272:	9005      	str	r0, [sp, #20]
 802c274:	4619      	mov	r1, r3
 802c276:	4620      	mov	r0, r4
 802c278:	f001 fc2a 	bl	802dad0 <_Bfree>
 802c27c:	9a05      	ldr	r2, [sp, #20]
 802c27e:	b932      	cbnz	r2, 802c28e <_dtoa_r+0x5ee>
 802c280:	9b02      	ldr	r3, [sp, #8]
 802c282:	b923      	cbnz	r3, 802c28e <_dtoa_r+0x5ee>
 802c284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c286:	2b00      	cmp	r3, #0
 802c288:	f000 83de 	beq.w	802ca48 <_dtoa_r+0xda8>
 802c28c:	9a02      	ldr	r2, [sp, #8]
 802c28e:	f1bb 0f00 	cmp.w	fp, #0
 802c292:	f2c0 82a2 	blt.w	802c7da <_dtoa_r+0xb3a>
 802c296:	d105      	bne.n	802c2a4 <_dtoa_r+0x604>
 802c298:	9b02      	ldr	r3, [sp, #8]
 802c29a:	b91b      	cbnz	r3, 802c2a4 <_dtoa_r+0x604>
 802c29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c29e:	2b00      	cmp	r3, #0
 802c2a0:	f000 829b 	beq.w	802c7da <_dtoa_r+0xb3a>
 802c2a4:	2a00      	cmp	r2, #0
 802c2a6:	f300 8307 	bgt.w	802c8b8 <_dtoa_r+0xc18>
 802c2aa:	f89d 3000 	ldrb.w	r3, [sp]
 802c2ae:	703b      	strb	r3, [r7, #0]
 802c2b0:	9b08      	ldr	r3, [sp, #32]
 802c2b2:	f107 0b01 	add.w	fp, r7, #1
 802c2b6:	429f      	cmp	r7, r3
 802c2b8:	465d      	mov	r5, fp
 802c2ba:	f000 8308 	beq.w	802c8ce <_dtoa_r+0xc2e>
 802c2be:	4651      	mov	r1, sl
 802c2c0:	2300      	movs	r3, #0
 802c2c2:	220a      	movs	r2, #10
 802c2c4:	4620      	mov	r0, r4
 802c2c6:	f001 fc13 	bl	802daf0 <__multadd>
 802c2ca:	4546      	cmp	r6, r8
 802c2cc:	4682      	mov	sl, r0
 802c2ce:	4631      	mov	r1, r6
 802c2d0:	f04f 0300 	mov.w	r3, #0
 802c2d4:	f04f 020a 	mov.w	r2, #10
 802c2d8:	4620      	mov	r0, r4
 802c2da:	f000 81f1 	beq.w	802c6c0 <_dtoa_r+0xa20>
 802c2de:	f001 fc07 	bl	802daf0 <__multadd>
 802c2e2:	4641      	mov	r1, r8
 802c2e4:	4606      	mov	r6, r0
 802c2e6:	2300      	movs	r3, #0
 802c2e8:	220a      	movs	r2, #10
 802c2ea:	4620      	mov	r0, r4
 802c2ec:	f001 fc00 	bl	802daf0 <__multadd>
 802c2f0:	465f      	mov	r7, fp
 802c2f2:	4680      	mov	r8, r0
 802c2f4:	e7a1      	b.n	802c23a <_dtoa_r+0x59a>
 802c2f6:	201c      	movs	r0, #28
 802c2f8:	9b06      	ldr	r3, [sp, #24]
 802c2fa:	4403      	add	r3, r0
 802c2fc:	9306      	str	r3, [sp, #24]
 802c2fe:	9b05      	ldr	r3, [sp, #20]
 802c300:	4403      	add	r3, r0
 802c302:	4405      	add	r5, r0
 802c304:	9305      	str	r3, [sp, #20]
 802c306:	e763      	b.n	802c1d0 <_dtoa_r+0x530>
 802c308:	4649      	mov	r1, r9
 802c30a:	4650      	mov	r0, sl
 802c30c:	f001 fe20 	bl	802df50 <__mcmp>
 802c310:	2800      	cmp	r0, #0
 802c312:	f6bf af73 	bge.w	802c1fc <_dtoa_r+0x55c>
 802c316:	9f04      	ldr	r7, [sp, #16]
 802c318:	4651      	mov	r1, sl
 802c31a:	2300      	movs	r3, #0
 802c31c:	220a      	movs	r2, #10
 802c31e:	4620      	mov	r0, r4
 802c320:	3f01      	subs	r7, #1
 802c322:	9704      	str	r7, [sp, #16]
 802c324:	f001 fbe4 	bl	802daf0 <__multadd>
 802c328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c32a:	4682      	mov	sl, r0
 802c32c:	2b00      	cmp	r3, #0
 802c32e:	f040 83a7 	bne.w	802ca80 <_dtoa_r+0xde0>
 802c332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c334:	2b00      	cmp	r3, #0
 802c336:	f340 83b0 	ble.w	802ca9a <_dtoa_r+0xdfa>
 802c33a:	9308      	str	r3, [sp, #32]
 802c33c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802c340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802c344:	465d      	mov	r5, fp
 802c346:	e002      	b.n	802c34e <_dtoa_r+0x6ae>
 802c348:	f001 fbd2 	bl	802daf0 <__multadd>
 802c34c:	4682      	mov	sl, r0
 802c34e:	4649      	mov	r1, r9
 802c350:	4650      	mov	r0, sl
 802c352:	f7ff fc0d 	bl	802bb70 <quorem>
 802c356:	f100 0730 	add.w	r7, r0, #48	; 0x30
 802c35a:	f805 7b01 	strb.w	r7, [r5], #1
 802c35e:	eba5 030b 	sub.w	r3, r5, fp
 802c362:	4543      	cmp	r3, r8
 802c364:	f04f 020a 	mov.w	r2, #10
 802c368:	f04f 0300 	mov.w	r3, #0
 802c36c:	4651      	mov	r1, sl
 802c36e:	4620      	mov	r0, r4
 802c370:	dbea      	blt.n	802c348 <_dtoa_r+0x6a8>
 802c372:	9b07      	ldr	r3, [sp, #28]
 802c374:	9a08      	ldr	r2, [sp, #32]
 802c376:	9700      	str	r7, [sp, #0]
 802c378:	2a01      	cmp	r2, #1
 802c37a:	bfac      	ite	ge
 802c37c:	189b      	addge	r3, r3, r2
 802c37e:	3301      	addlt	r3, #1
 802c380:	461d      	mov	r5, r3
 802c382:	f04f 0b00 	mov.w	fp, #0
 802c386:	4651      	mov	r1, sl
 802c388:	2201      	movs	r2, #1
 802c38a:	4620      	mov	r0, r4
 802c38c:	f001 fd88 	bl	802dea0 <__lshift>
 802c390:	4649      	mov	r1, r9
 802c392:	4682      	mov	sl, r0
 802c394:	f001 fddc 	bl	802df50 <__mcmp>
 802c398:	2800      	cmp	r0, #0
 802c39a:	f340 823a 	ble.w	802c812 <_dtoa_r+0xb72>
 802c39e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802c3a2:	9907      	ldr	r1, [sp, #28]
 802c3a4:	1e6b      	subs	r3, r5, #1
 802c3a6:	e004      	b.n	802c3b2 <_dtoa_r+0x712>
 802c3a8:	428b      	cmp	r3, r1
 802c3aa:	f000 81af 	beq.w	802c70c <_dtoa_r+0xa6c>
 802c3ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c3b2:	2a39      	cmp	r2, #57	; 0x39
 802c3b4:	f103 0501 	add.w	r5, r3, #1
 802c3b8:	d0f6      	beq.n	802c3a8 <_dtoa_r+0x708>
 802c3ba:	3201      	adds	r2, #1
 802c3bc:	701a      	strb	r2, [r3, #0]
 802c3be:	4649      	mov	r1, r9
 802c3c0:	4620      	mov	r0, r4
 802c3c2:	f001 fb85 	bl	802dad0 <_Bfree>
 802c3c6:	2e00      	cmp	r6, #0
 802c3c8:	f43f ae36 	beq.w	802c038 <_dtoa_r+0x398>
 802c3cc:	f1bb 0f00 	cmp.w	fp, #0
 802c3d0:	d005      	beq.n	802c3de <_dtoa_r+0x73e>
 802c3d2:	45b3      	cmp	fp, r6
 802c3d4:	d003      	beq.n	802c3de <_dtoa_r+0x73e>
 802c3d6:	4659      	mov	r1, fp
 802c3d8:	4620      	mov	r0, r4
 802c3da:	f001 fb79 	bl	802dad0 <_Bfree>
 802c3de:	4631      	mov	r1, r6
 802c3e0:	4620      	mov	r0, r4
 802c3e2:	f001 fb75 	bl	802dad0 <_Bfree>
 802c3e6:	e627      	b.n	802c038 <_dtoa_r+0x398>
 802c3e8:	2300      	movs	r3, #0
 802c3ea:	9309      	str	r3, [sp, #36]	; 0x24
 802c3ec:	9b04      	ldr	r3, [sp, #16]
 802c3ee:	445b      	add	r3, fp
 802c3f0:	930d      	str	r3, [sp, #52]	; 0x34
 802c3f2:	3301      	adds	r3, #1
 802c3f4:	2b01      	cmp	r3, #1
 802c3f6:	461e      	mov	r6, r3
 802c3f8:	461d      	mov	r5, r3
 802c3fa:	9308      	str	r3, [sp, #32]
 802c3fc:	bfb8      	it	lt
 802c3fe:	2601      	movlt	r6, #1
 802c400:	2100      	movs	r1, #0
 802c402:	2e17      	cmp	r6, #23
 802c404:	6461      	str	r1, [r4, #68]	; 0x44
 802c406:	d90a      	bls.n	802c41e <_dtoa_r+0x77e>
 802c408:	2201      	movs	r2, #1
 802c40a:	2304      	movs	r3, #4
 802c40c:	005b      	lsls	r3, r3, #1
 802c40e:	f103 0014 	add.w	r0, r3, #20
 802c412:	4286      	cmp	r6, r0
 802c414:	4611      	mov	r1, r2
 802c416:	f102 0201 	add.w	r2, r2, #1
 802c41a:	d2f7      	bcs.n	802c40c <_dtoa_r+0x76c>
 802c41c:	6461      	str	r1, [r4, #68]	; 0x44
 802c41e:	4620      	mov	r0, r4
 802c420:	f001 fb2e 	bl	802da80 <_Balloc>
 802c424:	2d0e      	cmp	r5, #14
 802c426:	9007      	str	r0, [sp, #28]
 802c428:	6420      	str	r0, [r4, #64]	; 0x40
 802c42a:	f63f ad44 	bhi.w	802beb6 <_dtoa_r+0x216>
 802c42e:	2f00      	cmp	r7, #0
 802c430:	f43f ad41 	beq.w	802beb6 <_dtoa_r+0x216>
 802c434:	9904      	ldr	r1, [sp, #16]
 802c436:	2900      	cmp	r1, #0
 802c438:	ed9d 7b00 	vldr	d7, [sp]
 802c43c:	f340 81f6 	ble.w	802c82c <_dtoa_r+0xb8c>
 802c440:	4bb9      	ldr	r3, [pc, #740]	; (802c728 <_dtoa_r+0xa88>)
 802c442:	f001 020f 	and.w	r2, r1, #15
 802c446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802c44a:	110d      	asrs	r5, r1, #4
 802c44c:	e9d3 6700 	ldrd	r6, r7, [r3]
 802c450:	06eb      	lsls	r3, r5, #27
 802c452:	f140 81ad 	bpl.w	802c7b0 <_dtoa_r+0xb10>
 802c456:	4bb5      	ldr	r3, [pc, #724]	; (802c72c <_dtoa_r+0xa8c>)
 802c458:	ec51 0b17 	vmov	r0, r1, d7
 802c45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802c460:	f7e0 f950 	bl	800c704 <__aeabi_ddiv>
 802c464:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802c468:	f005 050f 	and.w	r5, r5, #15
 802c46c:	f04f 0903 	mov.w	r9, #3
 802c470:	b18d      	cbz	r5, 802c496 <_dtoa_r+0x7f6>
 802c472:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 802c72c <_dtoa_r+0xa8c>
 802c476:	07e8      	lsls	r0, r5, #31
 802c478:	d509      	bpl.n	802c48e <_dtoa_r+0x7ee>
 802c47a:	4630      	mov	r0, r6
 802c47c:	4639      	mov	r1, r7
 802c47e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802c482:	f7e0 f815 	bl	800c4b0 <__aeabi_dmul>
 802c486:	f109 0901 	add.w	r9, r9, #1
 802c48a:	4606      	mov	r6, r0
 802c48c:	460f      	mov	r7, r1
 802c48e:	106d      	asrs	r5, r5, #1
 802c490:	f108 0808 	add.w	r8, r8, #8
 802c494:	d1ef      	bne.n	802c476 <_dtoa_r+0x7d6>
 802c496:	463b      	mov	r3, r7
 802c498:	4632      	mov	r2, r6
 802c49a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802c49e:	f7e0 f931 	bl	800c704 <__aeabi_ddiv>
 802c4a2:	4607      	mov	r7, r0
 802c4a4:	4688      	mov	r8, r1
 802c4a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c4a8:	b143      	cbz	r3, 802c4bc <_dtoa_r+0x81c>
 802c4aa:	2200      	movs	r2, #0
 802c4ac:	4ba0      	ldr	r3, [pc, #640]	; (802c730 <_dtoa_r+0xa90>)
 802c4ae:	4638      	mov	r0, r7
 802c4b0:	4641      	mov	r1, r8
 802c4b2:	f7e0 fa75 	bl	800c9a0 <__aeabi_dcmplt>
 802c4b6:	2800      	cmp	r0, #0
 802c4b8:	f040 8273 	bne.w	802c9a2 <_dtoa_r+0xd02>
 802c4bc:	4648      	mov	r0, r9
 802c4be:	f7df ff91 	bl	800c3e4 <__aeabi_i2d>
 802c4c2:	463a      	mov	r2, r7
 802c4c4:	4643      	mov	r3, r8
 802c4c6:	f7df fff3 	bl	800c4b0 <__aeabi_dmul>
 802c4ca:	4b9a      	ldr	r3, [pc, #616]	; (802c734 <_dtoa_r+0xa94>)
 802c4cc:	2200      	movs	r2, #0
 802c4ce:	f7df fe3d 	bl	800c14c <__adddf3>
 802c4d2:	9b08      	ldr	r3, [sp, #32]
 802c4d4:	4605      	mov	r5, r0
 802c4d6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802c4da:	2b00      	cmp	r3, #0
 802c4dc:	f000 8140 	beq.w	802c760 <_dtoa_r+0xac0>
 802c4e0:	9b04      	ldr	r3, [sp, #16]
 802c4e2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c4e6:	9311      	str	r3, [sp, #68]	; 0x44
 802c4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c4ea:	2b00      	cmp	r3, #0
 802c4ec:	f000 81f6 	beq.w	802c8dc <_dtoa_r+0xc3c>
 802c4f0:	4b8d      	ldr	r3, [pc, #564]	; (802c728 <_dtoa_r+0xa88>)
 802c4f2:	4991      	ldr	r1, [pc, #580]	; (802c738 <_dtoa_r+0xa98>)
 802c4f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 802c4f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802c4fc:	2000      	movs	r0, #0
 802c4fe:	f7e0 f901 	bl	800c704 <__aeabi_ddiv>
 802c502:	462a      	mov	r2, r5
 802c504:	4633      	mov	r3, r6
 802c506:	f7df fe1f 	bl	800c148 <__aeabi_dsub>
 802c50a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802c50e:	4641      	mov	r1, r8
 802c510:	4638      	mov	r0, r7
 802c512:	f7e0 fa85 	bl	800ca20 <__aeabi_d2iz>
 802c516:	4605      	mov	r5, r0
 802c518:	f7df ff64 	bl	800c3e4 <__aeabi_i2d>
 802c51c:	4602      	mov	r2, r0
 802c51e:	460b      	mov	r3, r1
 802c520:	4638      	mov	r0, r7
 802c522:	4641      	mov	r1, r8
 802c524:	f7df fe10 	bl	800c148 <__aeabi_dsub>
 802c528:	3530      	adds	r5, #48	; 0x30
 802c52a:	fa5f f885 	uxtb.w	r8, r5
 802c52e:	9d07      	ldr	r5, [sp, #28]
 802c530:	4606      	mov	r6, r0
 802c532:	460f      	mov	r7, r1
 802c534:	f885 8000 	strb.w	r8, [r5]
 802c538:	4602      	mov	r2, r0
 802c53a:	460b      	mov	r3, r1
 802c53c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802c540:	3501      	adds	r5, #1
 802c542:	f7e0 fa4b 	bl	800c9dc <__aeabi_dcmpgt>
 802c546:	2800      	cmp	r0, #0
 802c548:	d156      	bne.n	802c5f8 <_dtoa_r+0x958>
 802c54a:	4632      	mov	r2, r6
 802c54c:	463b      	mov	r3, r7
 802c54e:	2000      	movs	r0, #0
 802c550:	4977      	ldr	r1, [pc, #476]	; (802c730 <_dtoa_r+0xa90>)
 802c552:	f7df fdf9 	bl	800c148 <__aeabi_dsub>
 802c556:	4602      	mov	r2, r0
 802c558:	460b      	mov	r3, r1
 802c55a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802c55e:	f7e0 fa3d 	bl	800c9dc <__aeabi_dcmpgt>
 802c562:	2800      	cmp	r0, #0
 802c564:	f040 8262 	bne.w	802ca2c <_dtoa_r+0xd8c>
 802c568:	f1b9 0f01 	cmp.w	r9, #1
 802c56c:	f43f aca3 	beq.w	802beb6 <_dtoa_r+0x216>
 802c570:	9b07      	ldr	r3, [sp, #28]
 802c572:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 802c576:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 802c57a:	4499      	add	r9, r3
 802c57c:	46a0      	mov	r8, r4
 802c57e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 802c582:	e00d      	b.n	802c5a0 <_dtoa_r+0x900>
 802c584:	2000      	movs	r0, #0
 802c586:	496a      	ldr	r1, [pc, #424]	; (802c730 <_dtoa_r+0xa90>)
 802c588:	f7df fdde 	bl	800c148 <__aeabi_dsub>
 802c58c:	4652      	mov	r2, sl
 802c58e:	465b      	mov	r3, fp
 802c590:	f7e0 fa06 	bl	800c9a0 <__aeabi_dcmplt>
 802c594:	2800      	cmp	r0, #0
 802c596:	f040 8244 	bne.w	802ca22 <_dtoa_r+0xd82>
 802c59a:	454d      	cmp	r5, r9
 802c59c:	f000 824a 	beq.w	802ca34 <_dtoa_r+0xd94>
 802c5a0:	4650      	mov	r0, sl
 802c5a2:	4659      	mov	r1, fp
 802c5a4:	2200      	movs	r2, #0
 802c5a6:	4b65      	ldr	r3, [pc, #404]	; (802c73c <_dtoa_r+0xa9c>)
 802c5a8:	f7df ff82 	bl	800c4b0 <__aeabi_dmul>
 802c5ac:	2200      	movs	r2, #0
 802c5ae:	4b63      	ldr	r3, [pc, #396]	; (802c73c <_dtoa_r+0xa9c>)
 802c5b0:	4682      	mov	sl, r0
 802c5b2:	468b      	mov	fp, r1
 802c5b4:	4630      	mov	r0, r6
 802c5b6:	4639      	mov	r1, r7
 802c5b8:	f7df ff7a 	bl	800c4b0 <__aeabi_dmul>
 802c5bc:	460f      	mov	r7, r1
 802c5be:	4606      	mov	r6, r0
 802c5c0:	f7e0 fa2e 	bl	800ca20 <__aeabi_d2iz>
 802c5c4:	4604      	mov	r4, r0
 802c5c6:	f7df ff0d 	bl	800c3e4 <__aeabi_i2d>
 802c5ca:	4602      	mov	r2, r0
 802c5cc:	460b      	mov	r3, r1
 802c5ce:	4630      	mov	r0, r6
 802c5d0:	4639      	mov	r1, r7
 802c5d2:	f7df fdb9 	bl	800c148 <__aeabi_dsub>
 802c5d6:	3430      	adds	r4, #48	; 0x30
 802c5d8:	b2e4      	uxtb	r4, r4
 802c5da:	4652      	mov	r2, sl
 802c5dc:	465b      	mov	r3, fp
 802c5de:	f805 4b01 	strb.w	r4, [r5], #1
 802c5e2:	4606      	mov	r6, r0
 802c5e4:	460f      	mov	r7, r1
 802c5e6:	f7e0 f9db 	bl	800c9a0 <__aeabi_dcmplt>
 802c5ea:	4632      	mov	r2, r6
 802c5ec:	463b      	mov	r3, r7
 802c5ee:	2800      	cmp	r0, #0
 802c5f0:	d0c8      	beq.n	802c584 <_dtoa_r+0x8e4>
 802c5f2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 802c5f6:	4644      	mov	r4, r8
 802c5f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c5fa:	9304      	str	r3, [sp, #16]
 802c5fc:	e51c      	b.n	802c038 <_dtoa_r+0x398>
 802c5fe:	2300      	movs	r3, #0
 802c600:	9309      	str	r3, [sp, #36]	; 0x24
 802c602:	f1bb 0f00 	cmp.w	fp, #0
 802c606:	f340 80da 	ble.w	802c7be <_dtoa_r+0xb1e>
 802c60a:	465e      	mov	r6, fp
 802c60c:	465d      	mov	r5, fp
 802c60e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 802c612:	f8cd b020 	str.w	fp, [sp, #32]
 802c616:	e6f3      	b.n	802c400 <_dtoa_r+0x760>
 802c618:	2301      	movs	r3, #1
 802c61a:	9309      	str	r3, [sp, #36]	; 0x24
 802c61c:	e7f1      	b.n	802c602 <_dtoa_r+0x962>
 802c61e:	9b00      	ldr	r3, [sp, #0]
 802c620:	2b00      	cmp	r3, #0
 802c622:	f47f ada1 	bne.w	802c168 <_dtoa_r+0x4c8>
 802c626:	e9dd 1200 	ldrd	r1, r2, [sp]
 802c62a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 802c62e:	2b00      	cmp	r3, #0
 802c630:	f47f adb4 	bne.w	802c19c <_dtoa_r+0x4fc>
 802c634:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 802c638:	0d3f      	lsrs	r7, r7, #20
 802c63a:	053f      	lsls	r7, r7, #20
 802c63c:	2f00      	cmp	r7, #0
 802c63e:	f000 8200 	beq.w	802ca42 <_dtoa_r+0xda2>
 802c642:	9b06      	ldr	r3, [sp, #24]
 802c644:	3301      	adds	r3, #1
 802c646:	9306      	str	r3, [sp, #24]
 802c648:	9b05      	ldr	r3, [sp, #20]
 802c64a:	3301      	adds	r3, #1
 802c64c:	9305      	str	r3, [sp, #20]
 802c64e:	f04f 0801 	mov.w	r8, #1
 802c652:	e5a5      	b.n	802c1a0 <_dtoa_r+0x500>
 802c654:	9b08      	ldr	r3, [sp, #32]
 802c656:	2b00      	cmp	r3, #0
 802c658:	f73f ac3e 	bgt.w	802bed8 <_dtoa_r+0x238>
 802c65c:	f040 8099 	bne.w	802c792 <_dtoa_r+0xaf2>
 802c660:	4649      	mov	r1, r9
 802c662:	2200      	movs	r2, #0
 802c664:	4b36      	ldr	r3, [pc, #216]	; (802c740 <_dtoa_r+0xaa0>)
 802c666:	4640      	mov	r0, r8
 802c668:	f7df ff22 	bl	800c4b0 <__aeabi_dmul>
 802c66c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c670:	f7e0 f9aa 	bl	800c9c8 <__aeabi_dcmpge>
 802c674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c678:	464e      	mov	r6, r9
 802c67a:	2800      	cmp	r0, #0
 802c67c:	d03e      	beq.n	802c6fc <_dtoa_r+0xa5c>
 802c67e:	ea6f 030b 	mvn.w	r3, fp
 802c682:	9d07      	ldr	r5, [sp, #28]
 802c684:	9304      	str	r3, [sp, #16]
 802c686:	4649      	mov	r1, r9
 802c688:	4620      	mov	r0, r4
 802c68a:	f001 fa21 	bl	802dad0 <_Bfree>
 802c68e:	2e00      	cmp	r6, #0
 802c690:	f43f acd2 	beq.w	802c038 <_dtoa_r+0x398>
 802c694:	e6a3      	b.n	802c3de <_dtoa_r+0x73e>
 802c696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c698:	4651      	mov	r1, sl
 802c69a:	4620      	mov	r0, r4
 802c69c:	f001 fbb0 	bl	802de00 <__pow5mult>
 802c6a0:	4682      	mov	sl, r0
 802c6a2:	e54f      	b.n	802c144 <_dtoa_r+0x4a4>
 802c6a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802c6a6:	2a00      	cmp	r2, #0
 802c6a8:	f000 816f 	beq.w	802c98a <_dtoa_r+0xcea>
 802c6ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802c6b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802c6b2:	9d06      	ldr	r5, [sp, #24]
 802c6b4:	e4e7      	b.n	802c086 <_dtoa_r+0x3e6>
 802c6b6:	9b00      	ldr	r3, [sp, #0]
 802c6b8:	2b00      	cmp	r3, #0
 802c6ba:	f47f ad6f 	bne.w	802c19c <_dtoa_r+0x4fc>
 802c6be:	e7b2      	b.n	802c626 <_dtoa_r+0x986>
 802c6c0:	f001 fa16 	bl	802daf0 <__multadd>
 802c6c4:	465f      	mov	r7, fp
 802c6c6:	4606      	mov	r6, r0
 802c6c8:	4680      	mov	r8, r0
 802c6ca:	e5b6      	b.n	802c23a <_dtoa_r+0x59a>
 802c6cc:	4620      	mov	r0, r4
 802c6ce:	f001 f9ff 	bl	802dad0 <_Bfree>
 802c6d2:	2201      	movs	r2, #1
 802c6d4:	e5db      	b.n	802c28e <_dtoa_r+0x5ee>
 802c6d6:	9b02      	ldr	r3, [sp, #8]
 802c6d8:	2b02      	cmp	r3, #2
 802c6da:	f77f ad93 	ble.w	802c204 <_dtoa_r+0x564>
 802c6de:	9b08      	ldr	r3, [sp, #32]
 802c6e0:	2b00      	cmp	r3, #0
 802c6e2:	d1cc      	bne.n	802c67e <_dtoa_r+0x9de>
 802c6e4:	4649      	mov	r1, r9
 802c6e6:	2205      	movs	r2, #5
 802c6e8:	4620      	mov	r0, r4
 802c6ea:	f001 fa01 	bl	802daf0 <__multadd>
 802c6ee:	4601      	mov	r1, r0
 802c6f0:	4681      	mov	r9, r0
 802c6f2:	4650      	mov	r0, sl
 802c6f4:	f001 fc2c 	bl	802df50 <__mcmp>
 802c6f8:	2800      	cmp	r0, #0
 802c6fa:	ddc0      	ble.n	802c67e <_dtoa_r+0x9de>
 802c6fc:	9a04      	ldr	r2, [sp, #16]
 802c6fe:	9907      	ldr	r1, [sp, #28]
 802c700:	2331      	movs	r3, #49	; 0x31
 802c702:	3201      	adds	r2, #1
 802c704:	9204      	str	r2, [sp, #16]
 802c706:	700b      	strb	r3, [r1, #0]
 802c708:	1c4d      	adds	r5, r1, #1
 802c70a:	e7bc      	b.n	802c686 <_dtoa_r+0x9e6>
 802c70c:	9a04      	ldr	r2, [sp, #16]
 802c70e:	3201      	adds	r2, #1
 802c710:	9204      	str	r2, [sp, #16]
 802c712:	9a07      	ldr	r2, [sp, #28]
 802c714:	2331      	movs	r3, #49	; 0x31
 802c716:	7013      	strb	r3, [r2, #0]
 802c718:	e651      	b.n	802c3be <_dtoa_r+0x71e>
 802c71a:	2301      	movs	r3, #1
 802c71c:	9309      	str	r3, [sp, #36]	; 0x24
 802c71e:	e665      	b.n	802c3ec <_dtoa_r+0x74c>
 802c720:	f8dd a000 	ldr.w	sl, [sp]
 802c724:	9c02      	ldr	r4, [sp, #8]
 802c726:	e487      	b.n	802c038 <_dtoa_r+0x398>
 802c728:	08031000 	.word	0x08031000
 802c72c:	08030fd0 	.word	0x08030fd0
 802c730:	3ff00000 	.word	0x3ff00000
 802c734:	401c0000 	.word	0x401c0000
 802c738:	3fe00000 	.word	0x3fe00000
 802c73c:	40240000 	.word	0x40240000
 802c740:	40140000 	.word	0x40140000
 802c744:	4648      	mov	r0, r9
 802c746:	f7df fe4d 	bl	800c3e4 <__aeabi_i2d>
 802c74a:	463a      	mov	r2, r7
 802c74c:	4643      	mov	r3, r8
 802c74e:	f7df feaf 	bl	800c4b0 <__aeabi_dmul>
 802c752:	2200      	movs	r2, #0
 802c754:	4bc4      	ldr	r3, [pc, #784]	; (802ca68 <_dtoa_r+0xdc8>)
 802c756:	f7df fcf9 	bl	800c14c <__adddf3>
 802c75a:	4605      	mov	r5, r0
 802c75c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802c760:	4641      	mov	r1, r8
 802c762:	2200      	movs	r2, #0
 802c764:	4bc1      	ldr	r3, [pc, #772]	; (802ca6c <_dtoa_r+0xdcc>)
 802c766:	4638      	mov	r0, r7
 802c768:	f7df fcee 	bl	800c148 <__aeabi_dsub>
 802c76c:	462a      	mov	r2, r5
 802c76e:	4633      	mov	r3, r6
 802c770:	4680      	mov	r8, r0
 802c772:	4689      	mov	r9, r1
 802c774:	f7e0 f932 	bl	800c9dc <__aeabi_dcmpgt>
 802c778:	2800      	cmp	r0, #0
 802c77a:	f040 80ab 	bne.w	802c8d4 <_dtoa_r+0xc34>
 802c77e:	462a      	mov	r2, r5
 802c780:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802c784:	4640      	mov	r0, r8
 802c786:	4649      	mov	r1, r9
 802c788:	f7e0 f90a 	bl	800c9a0 <__aeabi_dcmplt>
 802c78c:	2800      	cmp	r0, #0
 802c78e:	f43f ab92 	beq.w	802beb6 <_dtoa_r+0x216>
 802c792:	f04f 0900 	mov.w	r9, #0
 802c796:	464e      	mov	r6, r9
 802c798:	e771      	b.n	802c67e <_dtoa_r+0x9de>
 802c79a:	9807      	ldr	r0, [sp, #28]
 802c79c:	f7ff bab8 	b.w	802bd10 <_dtoa_r+0x70>
 802c7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c7a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c7a4:	970a      	str	r7, [sp, #40]	; 0x28
 802c7a6:	1afb      	subs	r3, r7, r3
 802c7a8:	441a      	add	r2, r3
 802c7aa:	920b      	str	r2, [sp, #44]	; 0x2c
 802c7ac:	2700      	movs	r7, #0
 802c7ae:	e464      	b.n	802c07a <_dtoa_r+0x3da>
 802c7b0:	ed9d 7b00 	vldr	d7, [sp]
 802c7b4:	f04f 0902 	mov.w	r9, #2
 802c7b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 802c7bc:	e658      	b.n	802c470 <_dtoa_r+0x7d0>
 802c7be:	2100      	movs	r1, #0
 802c7c0:	6461      	str	r1, [r4, #68]	; 0x44
 802c7c2:	4620      	mov	r0, r4
 802c7c4:	f001 f95c 	bl	802da80 <_Balloc>
 802c7c8:	f04f 0b01 	mov.w	fp, #1
 802c7cc:	9007      	str	r0, [sp, #28]
 802c7ce:	6420      	str	r0, [r4, #64]	; 0x40
 802c7d0:	f8cd b020 	str.w	fp, [sp, #32]
 802c7d4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 802c7d8:	e629      	b.n	802c42e <_dtoa_r+0x78e>
 802c7da:	2a00      	cmp	r2, #0
 802c7dc:	dd12      	ble.n	802c804 <_dtoa_r+0xb64>
 802c7de:	4651      	mov	r1, sl
 802c7e0:	2201      	movs	r2, #1
 802c7e2:	4620      	mov	r0, r4
 802c7e4:	f001 fb5c 	bl	802dea0 <__lshift>
 802c7e8:	4649      	mov	r1, r9
 802c7ea:	4682      	mov	sl, r0
 802c7ec:	f001 fbb0 	bl	802df50 <__mcmp>
 802c7f0:	2800      	cmp	r0, #0
 802c7f2:	f340 8131 	ble.w	802ca58 <_dtoa_r+0xdb8>
 802c7f6:	9b00      	ldr	r3, [sp, #0]
 802c7f8:	2b39      	cmp	r3, #57	; 0x39
 802c7fa:	f000 80f7 	beq.w	802c9ec <_dtoa_r+0xd4c>
 802c7fe:	f105 0331 	add.w	r3, r5, #49	; 0x31
 802c802:	9300      	str	r3, [sp, #0]
 802c804:	f89d 3000 	ldrb.w	r3, [sp]
 802c808:	703b      	strb	r3, [r7, #0]
 802c80a:	46b3      	mov	fp, r6
 802c80c:	1c7d      	adds	r5, r7, #1
 802c80e:	4646      	mov	r6, r8
 802c810:	e5d5      	b.n	802c3be <_dtoa_r+0x71e>
 802c812:	d104      	bne.n	802c81e <_dtoa_r+0xb7e>
 802c814:	9b00      	ldr	r3, [sp, #0]
 802c816:	07db      	lsls	r3, r3, #31
 802c818:	d501      	bpl.n	802c81e <_dtoa_r+0xb7e>
 802c81a:	e5c0      	b.n	802c39e <_dtoa_r+0x6fe>
 802c81c:	4615      	mov	r5, r2
 802c81e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802c822:	2b30      	cmp	r3, #48	; 0x30
 802c824:	f105 32ff 	add.w	r2, r5, #4294967295
 802c828:	d0f8      	beq.n	802c81c <_dtoa_r+0xb7c>
 802c82a:	e5c8      	b.n	802c3be <_dtoa_r+0x71e>
 802c82c:	f000 80b4 	beq.w	802c998 <_dtoa_r+0xcf8>
 802c830:	9b04      	ldr	r3, [sp, #16]
 802c832:	425d      	negs	r5, r3
 802c834:	4b8e      	ldr	r3, [pc, #568]	; (802ca70 <_dtoa_r+0xdd0>)
 802c836:	f005 020f 	and.w	r2, r5, #15
 802c83a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c842:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c846:	f7df fe33 	bl	800c4b0 <__aeabi_dmul>
 802c84a:	112d      	asrs	r5, r5, #4
 802c84c:	4607      	mov	r7, r0
 802c84e:	4688      	mov	r8, r1
 802c850:	f000 8128 	beq.w	802caa4 <_dtoa_r+0xe04>
 802c854:	4e87      	ldr	r6, [pc, #540]	; (802ca74 <_dtoa_r+0xdd4>)
 802c856:	f04f 0902 	mov.w	r9, #2
 802c85a:	07e9      	lsls	r1, r5, #31
 802c85c:	d509      	bpl.n	802c872 <_dtoa_r+0xbd2>
 802c85e:	4638      	mov	r0, r7
 802c860:	4641      	mov	r1, r8
 802c862:	e9d6 2300 	ldrd	r2, r3, [r6]
 802c866:	f7df fe23 	bl	800c4b0 <__aeabi_dmul>
 802c86a:	f109 0901 	add.w	r9, r9, #1
 802c86e:	4607      	mov	r7, r0
 802c870:	4688      	mov	r8, r1
 802c872:	106d      	asrs	r5, r5, #1
 802c874:	f106 0608 	add.w	r6, r6, #8
 802c878:	d1ef      	bne.n	802c85a <_dtoa_r+0xbba>
 802c87a:	e614      	b.n	802c4a6 <_dtoa_r+0x806>
 802c87c:	9907      	ldr	r1, [sp, #28]
 802c87e:	2230      	movs	r2, #48	; 0x30
 802c880:	700a      	strb	r2, [r1, #0]
 802c882:	9a04      	ldr	r2, [sp, #16]
 802c884:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 802c888:	3201      	adds	r2, #1
 802c88a:	9204      	str	r2, [sp, #16]
 802c88c:	f7ff bbd0 	b.w	802c030 <_dtoa_r+0x390>
 802c890:	6871      	ldr	r1, [r6, #4]
 802c892:	4620      	mov	r0, r4
 802c894:	f001 f8f4 	bl	802da80 <_Balloc>
 802c898:	6933      	ldr	r3, [r6, #16]
 802c89a:	3302      	adds	r3, #2
 802c89c:	009a      	lsls	r2, r3, #2
 802c89e:	4605      	mov	r5, r0
 802c8a0:	f106 010c 	add.w	r1, r6, #12
 802c8a4:	300c      	adds	r0, #12
 802c8a6:	f7e0 f933 	bl	800cb10 <memcpy>
 802c8aa:	4629      	mov	r1, r5
 802c8ac:	2201      	movs	r2, #1
 802c8ae:	4620      	mov	r0, r4
 802c8b0:	f001 faf6 	bl	802dea0 <__lshift>
 802c8b4:	4680      	mov	r8, r0
 802c8b6:	e4b6      	b.n	802c226 <_dtoa_r+0x586>
 802c8b8:	9b00      	ldr	r3, [sp, #0]
 802c8ba:	2b39      	cmp	r3, #57	; 0x39
 802c8bc:	f000 8096 	beq.w	802c9ec <_dtoa_r+0xd4c>
 802c8c0:	9b00      	ldr	r3, [sp, #0]
 802c8c2:	3301      	adds	r3, #1
 802c8c4:	46b3      	mov	fp, r6
 802c8c6:	703b      	strb	r3, [r7, #0]
 802c8c8:	1c7d      	adds	r5, r7, #1
 802c8ca:	4646      	mov	r6, r8
 802c8cc:	e577      	b.n	802c3be <_dtoa_r+0x71e>
 802c8ce:	46b3      	mov	fp, r6
 802c8d0:	4646      	mov	r6, r8
 802c8d2:	e558      	b.n	802c386 <_dtoa_r+0x6e6>
 802c8d4:	f04f 0900 	mov.w	r9, #0
 802c8d8:	464e      	mov	r6, r9
 802c8da:	e70f      	b.n	802c6fc <_dtoa_r+0xa5c>
 802c8dc:	4964      	ldr	r1, [pc, #400]	; (802ca70 <_dtoa_r+0xdd0>)
 802c8de:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 802c8e2:	462a      	mov	r2, r5
 802c8e4:	4633      	mov	r3, r6
 802c8e6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 802c8ea:	f7df fde1 	bl	800c4b0 <__aeabi_dmul>
 802c8ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802c8f2:	4638      	mov	r0, r7
 802c8f4:	4641      	mov	r1, r8
 802c8f6:	f7e0 f893 	bl	800ca20 <__aeabi_d2iz>
 802c8fa:	4605      	mov	r5, r0
 802c8fc:	f7df fd72 	bl	800c3e4 <__aeabi_i2d>
 802c900:	4602      	mov	r2, r0
 802c902:	460b      	mov	r3, r1
 802c904:	4638      	mov	r0, r7
 802c906:	4641      	mov	r1, r8
 802c908:	f7df fc1e 	bl	800c148 <__aeabi_dsub>
 802c90c:	9a07      	ldr	r2, [sp, #28]
 802c90e:	3530      	adds	r5, #48	; 0x30
 802c910:	f1b9 0f01 	cmp.w	r9, #1
 802c914:	7015      	strb	r5, [r2, #0]
 802c916:	4606      	mov	r6, r0
 802c918:	460f      	mov	r7, r1
 802c91a:	f102 0501 	add.w	r5, r2, #1
 802c91e:	d01c      	beq.n	802c95a <_dtoa_r+0xcba>
 802c920:	9b07      	ldr	r3, [sp, #28]
 802c922:	4499      	add	r9, r3
 802c924:	2200      	movs	r2, #0
 802c926:	4b54      	ldr	r3, [pc, #336]	; (802ca78 <_dtoa_r+0xdd8>)
 802c928:	4630      	mov	r0, r6
 802c92a:	4639      	mov	r1, r7
 802c92c:	f7df fdc0 	bl	800c4b0 <__aeabi_dmul>
 802c930:	460f      	mov	r7, r1
 802c932:	4606      	mov	r6, r0
 802c934:	f7e0 f874 	bl	800ca20 <__aeabi_d2iz>
 802c938:	4680      	mov	r8, r0
 802c93a:	f7df fd53 	bl	800c3e4 <__aeabi_i2d>
 802c93e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 802c942:	4602      	mov	r2, r0
 802c944:	460b      	mov	r3, r1
 802c946:	4630      	mov	r0, r6
 802c948:	4639      	mov	r1, r7
 802c94a:	f7df fbfd 	bl	800c148 <__aeabi_dsub>
 802c94e:	f805 8b01 	strb.w	r8, [r5], #1
 802c952:	454d      	cmp	r5, r9
 802c954:	4606      	mov	r6, r0
 802c956:	460f      	mov	r7, r1
 802c958:	d1e4      	bne.n	802c924 <_dtoa_r+0xc84>
 802c95a:	2200      	movs	r2, #0
 802c95c:	4b47      	ldr	r3, [pc, #284]	; (802ca7c <_dtoa_r+0xddc>)
 802c95e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802c962:	f7df fbf3 	bl	800c14c <__adddf3>
 802c966:	4632      	mov	r2, r6
 802c968:	463b      	mov	r3, r7
 802c96a:	f7e0 f819 	bl	800c9a0 <__aeabi_dcmplt>
 802c96e:	2800      	cmp	r0, #0
 802c970:	d042      	beq.n	802c9f8 <_dtoa_r+0xd58>
 802c972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c974:	9304      	str	r3, [sp, #16]
 802c976:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 802c97a:	f7ff bb4c 	b.w	802c016 <_dtoa_r+0x376>
 802c97e:	9b06      	ldr	r3, [sp, #24]
 802c980:	9a08      	ldr	r2, [sp, #32]
 802c982:	1a9d      	subs	r5, r3, r2
 802c984:	2300      	movs	r3, #0
 802c986:	f7ff bb7e 	b.w	802c086 <_dtoa_r+0x3e6>
 802c98a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802c98c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802c98e:	9d06      	ldr	r5, [sp, #24]
 802c990:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802c994:	f7ff bb77 	b.w	802c086 <_dtoa_r+0x3e6>
 802c998:	e9dd 7800 	ldrd	r7, r8, [sp]
 802c99c:	f04f 0902 	mov.w	r9, #2
 802c9a0:	e581      	b.n	802c4a6 <_dtoa_r+0x806>
 802c9a2:	9b08      	ldr	r3, [sp, #32]
 802c9a4:	2b00      	cmp	r3, #0
 802c9a6:	f43f aecd 	beq.w	802c744 <_dtoa_r+0xaa4>
 802c9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c9ac:	2b00      	cmp	r3, #0
 802c9ae:	f77f aa82 	ble.w	802beb6 <_dtoa_r+0x216>
 802c9b2:	2200      	movs	r2, #0
 802c9b4:	4b30      	ldr	r3, [pc, #192]	; (802ca78 <_dtoa_r+0xdd8>)
 802c9b6:	4638      	mov	r0, r7
 802c9b8:	4641      	mov	r1, r8
 802c9ba:	f7df fd79 	bl	800c4b0 <__aeabi_dmul>
 802c9be:	4607      	mov	r7, r0
 802c9c0:	4688      	mov	r8, r1
 802c9c2:	f109 0001 	add.w	r0, r9, #1
 802c9c6:	f7df fd0d 	bl	800c3e4 <__aeabi_i2d>
 802c9ca:	463a      	mov	r2, r7
 802c9cc:	4643      	mov	r3, r8
 802c9ce:	f7df fd6f 	bl	800c4b0 <__aeabi_dmul>
 802c9d2:	2200      	movs	r2, #0
 802c9d4:	4b24      	ldr	r3, [pc, #144]	; (802ca68 <_dtoa_r+0xdc8>)
 802c9d6:	f7df fbb9 	bl	800c14c <__adddf3>
 802c9da:	9a04      	ldr	r2, [sp, #16]
 802c9dc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 802c9e0:	3a01      	subs	r2, #1
 802c9e2:	4605      	mov	r5, r0
 802c9e4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802c9e8:	9211      	str	r2, [sp, #68]	; 0x44
 802c9ea:	e57d      	b.n	802c4e8 <_dtoa_r+0x848>
 802c9ec:	2239      	movs	r2, #57	; 0x39
 802c9ee:	46b3      	mov	fp, r6
 802c9f0:	703a      	strb	r2, [r7, #0]
 802c9f2:	4646      	mov	r6, r8
 802c9f4:	1c7d      	adds	r5, r7, #1
 802c9f6:	e4d4      	b.n	802c3a2 <_dtoa_r+0x702>
 802c9f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802c9fc:	2000      	movs	r0, #0
 802c9fe:	491f      	ldr	r1, [pc, #124]	; (802ca7c <_dtoa_r+0xddc>)
 802ca00:	f7df fba2 	bl	800c148 <__aeabi_dsub>
 802ca04:	4632      	mov	r2, r6
 802ca06:	463b      	mov	r3, r7
 802ca08:	f7df ffe8 	bl	800c9dc <__aeabi_dcmpgt>
 802ca0c:	b910      	cbnz	r0, 802ca14 <_dtoa_r+0xd74>
 802ca0e:	f7ff ba52 	b.w	802beb6 <_dtoa_r+0x216>
 802ca12:	4615      	mov	r5, r2
 802ca14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802ca18:	2b30      	cmp	r3, #48	; 0x30
 802ca1a:	f105 32ff 	add.w	r2, r5, #4294967295
 802ca1e:	d0f8      	beq.n	802ca12 <_dtoa_r+0xd72>
 802ca20:	e5ea      	b.n	802c5f8 <_dtoa_r+0x958>
 802ca22:	4643      	mov	r3, r8
 802ca24:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 802ca28:	46a0      	mov	r8, r4
 802ca2a:	461c      	mov	r4, r3
 802ca2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802ca2e:	9304      	str	r3, [sp, #16]
 802ca30:	f7ff baf1 	b.w	802c016 <_dtoa_r+0x376>
 802ca34:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 802ca38:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 802ca3c:	4644      	mov	r4, r8
 802ca3e:	f7ff ba3a 	b.w	802beb6 <_dtoa_r+0x216>
 802ca42:	46b8      	mov	r8, r7
 802ca44:	f7ff bbac 	b.w	802c1a0 <_dtoa_r+0x500>
 802ca48:	9b00      	ldr	r3, [sp, #0]
 802ca4a:	2b39      	cmp	r3, #57	; 0x39
 802ca4c:	d0ce      	beq.n	802c9ec <_dtoa_r+0xd4c>
 802ca4e:	f1bb 0f00 	cmp.w	fp, #0
 802ca52:	f73f aed4 	bgt.w	802c7fe <_dtoa_r+0xb5e>
 802ca56:	e6d5      	b.n	802c804 <_dtoa_r+0xb64>
 802ca58:	f47f aed4 	bne.w	802c804 <_dtoa_r+0xb64>
 802ca5c:	9b00      	ldr	r3, [sp, #0]
 802ca5e:	07da      	lsls	r2, r3, #31
 802ca60:	f57f aed0 	bpl.w	802c804 <_dtoa_r+0xb64>
 802ca64:	e6c7      	b.n	802c7f6 <_dtoa_r+0xb56>
 802ca66:	bf00      	nop
 802ca68:	401c0000 	.word	0x401c0000
 802ca6c:	40140000 	.word	0x40140000
 802ca70:	08031000 	.word	0x08031000
 802ca74:	08030fd0 	.word	0x08030fd0
 802ca78:	40240000 	.word	0x40240000
 802ca7c:	3fe00000 	.word	0x3fe00000
 802ca80:	4631      	mov	r1, r6
 802ca82:	2300      	movs	r3, #0
 802ca84:	220a      	movs	r2, #10
 802ca86:	4620      	mov	r0, r4
 802ca88:	f001 f832 	bl	802daf0 <__multadd>
 802ca8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ca8e:	2b00      	cmp	r3, #0
 802ca90:	4606      	mov	r6, r0
 802ca92:	dd0a      	ble.n	802caaa <_dtoa_r+0xe0a>
 802ca94:	9308      	str	r3, [sp, #32]
 802ca96:	f7ff bbb9 	b.w	802c20c <_dtoa_r+0x56c>
 802ca9a:	9b02      	ldr	r3, [sp, #8]
 802ca9c:	2b02      	cmp	r3, #2
 802ca9e:	dc22      	bgt.n	802cae6 <_dtoa_r+0xe46>
 802caa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802caa2:	e44a      	b.n	802c33a <_dtoa_r+0x69a>
 802caa4:	f04f 0902 	mov.w	r9, #2
 802caa8:	e4fd      	b.n	802c4a6 <_dtoa_r+0x806>
 802caaa:	9b02      	ldr	r3, [sp, #8]
 802caac:	2b02      	cmp	r3, #2
 802caae:	dc1a      	bgt.n	802cae6 <_dtoa_r+0xe46>
 802cab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cab2:	e7ef      	b.n	802ca94 <_dtoa_r+0xdf4>
 802cab4:	2500      	movs	r5, #0
 802cab6:	6465      	str	r5, [r4, #68]	; 0x44
 802cab8:	4629      	mov	r1, r5
 802caba:	4620      	mov	r0, r4
 802cabc:	f000 ffe0 	bl	802da80 <_Balloc>
 802cac0:	f04f 33ff 	mov.w	r3, #4294967295
 802cac4:	9308      	str	r3, [sp, #32]
 802cac6:	930d      	str	r3, [sp, #52]	; 0x34
 802cac8:	2301      	movs	r3, #1
 802caca:	9007      	str	r0, [sp, #28]
 802cacc:	46ab      	mov	fp, r5
 802cace:	6420      	str	r0, [r4, #64]	; 0x40
 802cad0:	9309      	str	r3, [sp, #36]	; 0x24
 802cad2:	f7ff b9f0 	b.w	802beb6 <_dtoa_r+0x216>
 802cad6:	f43f ab7b 	beq.w	802c1d0 <_dtoa_r+0x530>
 802cada:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 802cade:	e40b      	b.n	802c2f8 <_dtoa_r+0x658>
 802cae0:	2701      	movs	r7, #1
 802cae2:	f7ff b9af 	b.w	802be44 <_dtoa_r+0x1a4>
 802cae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cae8:	9308      	str	r3, [sp, #32]
 802caea:	e5f8      	b.n	802c6de <_dtoa_r+0xa3e>
 802caec:	0000      	movs	r0, r0
	...

0802caf0 <_malloc_trim_r>:
 802caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802caf2:	4f24      	ldr	r7, [pc, #144]	; (802cb84 <_malloc_trim_r+0x94>)
 802caf4:	460c      	mov	r4, r1
 802caf6:	4606      	mov	r6, r0
 802caf8:	f000 ffb2 	bl	802da60 <__malloc_lock>
 802cafc:	68bb      	ldr	r3, [r7, #8]
 802cafe:	685d      	ldr	r5, [r3, #4]
 802cb00:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 802cb04:	310f      	adds	r1, #15
 802cb06:	f025 0503 	bic.w	r5, r5, #3
 802cb0a:	4429      	add	r1, r5
 802cb0c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 802cb10:	f021 010f 	bic.w	r1, r1, #15
 802cb14:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 802cb18:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 802cb1c:	db07      	blt.n	802cb2e <_malloc_trim_r+0x3e>
 802cb1e:	2100      	movs	r1, #0
 802cb20:	4630      	mov	r0, r6
 802cb22:	f7e4 fe1d 	bl	8011760 <_sbrk_r>
 802cb26:	68bb      	ldr	r3, [r7, #8]
 802cb28:	442b      	add	r3, r5
 802cb2a:	4298      	cmp	r0, r3
 802cb2c:	d004      	beq.n	802cb38 <_malloc_trim_r+0x48>
 802cb2e:	4630      	mov	r0, r6
 802cb30:	f000 ff9e 	bl	802da70 <__malloc_unlock>
 802cb34:	2000      	movs	r0, #0
 802cb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cb38:	4261      	negs	r1, r4
 802cb3a:	4630      	mov	r0, r6
 802cb3c:	f7e4 fe10 	bl	8011760 <_sbrk_r>
 802cb40:	3001      	adds	r0, #1
 802cb42:	d00d      	beq.n	802cb60 <_malloc_trim_r+0x70>
 802cb44:	4b10      	ldr	r3, [pc, #64]	; (802cb88 <_malloc_trim_r+0x98>)
 802cb46:	68ba      	ldr	r2, [r7, #8]
 802cb48:	6819      	ldr	r1, [r3, #0]
 802cb4a:	1b2d      	subs	r5, r5, r4
 802cb4c:	f045 0501 	orr.w	r5, r5, #1
 802cb50:	4630      	mov	r0, r6
 802cb52:	1b09      	subs	r1, r1, r4
 802cb54:	6055      	str	r5, [r2, #4]
 802cb56:	6019      	str	r1, [r3, #0]
 802cb58:	f000 ff8a 	bl	802da70 <__malloc_unlock>
 802cb5c:	2001      	movs	r0, #1
 802cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cb60:	2100      	movs	r1, #0
 802cb62:	4630      	mov	r0, r6
 802cb64:	f7e4 fdfc 	bl	8011760 <_sbrk_r>
 802cb68:	68ba      	ldr	r2, [r7, #8]
 802cb6a:	1a83      	subs	r3, r0, r2
 802cb6c:	2b0f      	cmp	r3, #15
 802cb6e:	ddde      	ble.n	802cb2e <_malloc_trim_r+0x3e>
 802cb70:	4c06      	ldr	r4, [pc, #24]	; (802cb8c <_malloc_trim_r+0x9c>)
 802cb72:	4905      	ldr	r1, [pc, #20]	; (802cb88 <_malloc_trim_r+0x98>)
 802cb74:	6824      	ldr	r4, [r4, #0]
 802cb76:	f043 0301 	orr.w	r3, r3, #1
 802cb7a:	1b00      	subs	r0, r0, r4
 802cb7c:	6053      	str	r3, [r2, #4]
 802cb7e:	6008      	str	r0, [r1, #0]
 802cb80:	e7d5      	b.n	802cb2e <_malloc_trim_r+0x3e>
 802cb82:	bf00      	nop
 802cb84:	2000162c 	.word	0x2000162c
 802cb88:	20012678 	.word	0x20012678
 802cb8c:	20001a34 	.word	0x20001a34

0802cb90 <_free_r>:
 802cb90:	2900      	cmp	r1, #0
 802cb92:	d044      	beq.n	802cc1e <_free_r+0x8e>
 802cb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cb98:	460d      	mov	r5, r1
 802cb9a:	4680      	mov	r8, r0
 802cb9c:	f000 ff60 	bl	802da60 <__malloc_lock>
 802cba0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 802cba4:	4969      	ldr	r1, [pc, #420]	; (802cd4c <_free_r+0x1bc>)
 802cba6:	f027 0301 	bic.w	r3, r7, #1
 802cbaa:	f1a5 0408 	sub.w	r4, r5, #8
 802cbae:	18e2      	adds	r2, r4, r3
 802cbb0:	688e      	ldr	r6, [r1, #8]
 802cbb2:	6850      	ldr	r0, [r2, #4]
 802cbb4:	42b2      	cmp	r2, r6
 802cbb6:	f020 0003 	bic.w	r0, r0, #3
 802cbba:	d05e      	beq.n	802cc7a <_free_r+0xea>
 802cbbc:	07fe      	lsls	r6, r7, #31
 802cbbe:	6050      	str	r0, [r2, #4]
 802cbc0:	d40b      	bmi.n	802cbda <_free_r+0x4a>
 802cbc2:	f855 7c08 	ldr.w	r7, [r5, #-8]
 802cbc6:	1be4      	subs	r4, r4, r7
 802cbc8:	f101 0e08 	add.w	lr, r1, #8
 802cbcc:	68a5      	ldr	r5, [r4, #8]
 802cbce:	4575      	cmp	r5, lr
 802cbd0:	443b      	add	r3, r7
 802cbd2:	d06d      	beq.n	802ccb0 <_free_r+0x120>
 802cbd4:	68e7      	ldr	r7, [r4, #12]
 802cbd6:	60ef      	str	r7, [r5, #12]
 802cbd8:	60bd      	str	r5, [r7, #8]
 802cbda:	1815      	adds	r5, r2, r0
 802cbdc:	686d      	ldr	r5, [r5, #4]
 802cbde:	07ed      	lsls	r5, r5, #31
 802cbe0:	d53e      	bpl.n	802cc60 <_free_r+0xd0>
 802cbe2:	f043 0201 	orr.w	r2, r3, #1
 802cbe6:	6062      	str	r2, [r4, #4]
 802cbe8:	50e3      	str	r3, [r4, r3]
 802cbea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802cbee:	d217      	bcs.n	802cc20 <_free_r+0x90>
 802cbf0:	08db      	lsrs	r3, r3, #3
 802cbf2:	1c58      	adds	r0, r3, #1
 802cbf4:	109a      	asrs	r2, r3, #2
 802cbf6:	684d      	ldr	r5, [r1, #4]
 802cbf8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 802cbfc:	60a7      	str	r7, [r4, #8]
 802cbfe:	2301      	movs	r3, #1
 802cc00:	4093      	lsls	r3, r2
 802cc02:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 802cc06:	432b      	orrs	r3, r5
 802cc08:	3a08      	subs	r2, #8
 802cc0a:	60e2      	str	r2, [r4, #12]
 802cc0c:	604b      	str	r3, [r1, #4]
 802cc0e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 802cc12:	60fc      	str	r4, [r7, #12]
 802cc14:	4640      	mov	r0, r8
 802cc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cc1a:	f000 bf29 	b.w	802da70 <__malloc_unlock>
 802cc1e:	4770      	bx	lr
 802cc20:	0a5a      	lsrs	r2, r3, #9
 802cc22:	2a04      	cmp	r2, #4
 802cc24:	d852      	bhi.n	802cccc <_free_r+0x13c>
 802cc26:	099a      	lsrs	r2, r3, #6
 802cc28:	f102 0739 	add.w	r7, r2, #57	; 0x39
 802cc2c:	00ff      	lsls	r7, r7, #3
 802cc2e:	f102 0538 	add.w	r5, r2, #56	; 0x38
 802cc32:	19c8      	adds	r0, r1, r7
 802cc34:	59ca      	ldr	r2, [r1, r7]
 802cc36:	3808      	subs	r0, #8
 802cc38:	4290      	cmp	r0, r2
 802cc3a:	d04f      	beq.n	802ccdc <_free_r+0x14c>
 802cc3c:	6851      	ldr	r1, [r2, #4]
 802cc3e:	f021 0103 	bic.w	r1, r1, #3
 802cc42:	428b      	cmp	r3, r1
 802cc44:	d232      	bcs.n	802ccac <_free_r+0x11c>
 802cc46:	6892      	ldr	r2, [r2, #8]
 802cc48:	4290      	cmp	r0, r2
 802cc4a:	d1f7      	bne.n	802cc3c <_free_r+0xac>
 802cc4c:	68c3      	ldr	r3, [r0, #12]
 802cc4e:	60a0      	str	r0, [r4, #8]
 802cc50:	60e3      	str	r3, [r4, #12]
 802cc52:	609c      	str	r4, [r3, #8]
 802cc54:	60c4      	str	r4, [r0, #12]
 802cc56:	4640      	mov	r0, r8
 802cc58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cc5c:	f000 bf08 	b.w	802da70 <__malloc_unlock>
 802cc60:	6895      	ldr	r5, [r2, #8]
 802cc62:	4f3b      	ldr	r7, [pc, #236]	; (802cd50 <_free_r+0x1c0>)
 802cc64:	42bd      	cmp	r5, r7
 802cc66:	4403      	add	r3, r0
 802cc68:	d040      	beq.n	802ccec <_free_r+0x15c>
 802cc6a:	68d0      	ldr	r0, [r2, #12]
 802cc6c:	60e8      	str	r0, [r5, #12]
 802cc6e:	f043 0201 	orr.w	r2, r3, #1
 802cc72:	6085      	str	r5, [r0, #8]
 802cc74:	6062      	str	r2, [r4, #4]
 802cc76:	50e3      	str	r3, [r4, r3]
 802cc78:	e7b7      	b.n	802cbea <_free_r+0x5a>
 802cc7a:	07ff      	lsls	r7, r7, #31
 802cc7c:	4403      	add	r3, r0
 802cc7e:	d407      	bmi.n	802cc90 <_free_r+0x100>
 802cc80:	f855 2c08 	ldr.w	r2, [r5, #-8]
 802cc84:	1aa4      	subs	r4, r4, r2
 802cc86:	4413      	add	r3, r2
 802cc88:	68a0      	ldr	r0, [r4, #8]
 802cc8a:	68e2      	ldr	r2, [r4, #12]
 802cc8c:	60c2      	str	r2, [r0, #12]
 802cc8e:	6090      	str	r0, [r2, #8]
 802cc90:	4a30      	ldr	r2, [pc, #192]	; (802cd54 <_free_r+0x1c4>)
 802cc92:	6812      	ldr	r2, [r2, #0]
 802cc94:	f043 0001 	orr.w	r0, r3, #1
 802cc98:	4293      	cmp	r3, r2
 802cc9a:	6060      	str	r0, [r4, #4]
 802cc9c:	608c      	str	r4, [r1, #8]
 802cc9e:	d3b9      	bcc.n	802cc14 <_free_r+0x84>
 802cca0:	4b2d      	ldr	r3, [pc, #180]	; (802cd58 <_free_r+0x1c8>)
 802cca2:	4640      	mov	r0, r8
 802cca4:	6819      	ldr	r1, [r3, #0]
 802cca6:	f7ff ff23 	bl	802caf0 <_malloc_trim_r>
 802ccaa:	e7b3      	b.n	802cc14 <_free_r+0x84>
 802ccac:	4610      	mov	r0, r2
 802ccae:	e7cd      	b.n	802cc4c <_free_r+0xbc>
 802ccb0:	1811      	adds	r1, r2, r0
 802ccb2:	6849      	ldr	r1, [r1, #4]
 802ccb4:	07c9      	lsls	r1, r1, #31
 802ccb6:	d444      	bmi.n	802cd42 <_free_r+0x1b2>
 802ccb8:	6891      	ldr	r1, [r2, #8]
 802ccba:	68d2      	ldr	r2, [r2, #12]
 802ccbc:	60ca      	str	r2, [r1, #12]
 802ccbe:	4403      	add	r3, r0
 802ccc0:	f043 0001 	orr.w	r0, r3, #1
 802ccc4:	6091      	str	r1, [r2, #8]
 802ccc6:	6060      	str	r0, [r4, #4]
 802ccc8:	50e3      	str	r3, [r4, r3]
 802ccca:	e7a3      	b.n	802cc14 <_free_r+0x84>
 802cccc:	2a14      	cmp	r2, #20
 802ccce:	d816      	bhi.n	802ccfe <_free_r+0x16e>
 802ccd0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 802ccd4:	00ff      	lsls	r7, r7, #3
 802ccd6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 802ccda:	e7aa      	b.n	802cc32 <_free_r+0xa2>
 802ccdc:	10aa      	asrs	r2, r5, #2
 802ccde:	2301      	movs	r3, #1
 802cce0:	684d      	ldr	r5, [r1, #4]
 802cce2:	4093      	lsls	r3, r2
 802cce4:	432b      	orrs	r3, r5
 802cce6:	604b      	str	r3, [r1, #4]
 802cce8:	4603      	mov	r3, r0
 802ccea:	e7b0      	b.n	802cc4e <_free_r+0xbe>
 802ccec:	f043 0201 	orr.w	r2, r3, #1
 802ccf0:	614c      	str	r4, [r1, #20]
 802ccf2:	610c      	str	r4, [r1, #16]
 802ccf4:	60e5      	str	r5, [r4, #12]
 802ccf6:	60a5      	str	r5, [r4, #8]
 802ccf8:	6062      	str	r2, [r4, #4]
 802ccfa:	50e3      	str	r3, [r4, r3]
 802ccfc:	e78a      	b.n	802cc14 <_free_r+0x84>
 802ccfe:	2a54      	cmp	r2, #84	; 0x54
 802cd00:	d806      	bhi.n	802cd10 <_free_r+0x180>
 802cd02:	0b1a      	lsrs	r2, r3, #12
 802cd04:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 802cd08:	00ff      	lsls	r7, r7, #3
 802cd0a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 802cd0e:	e790      	b.n	802cc32 <_free_r+0xa2>
 802cd10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802cd14:	d806      	bhi.n	802cd24 <_free_r+0x194>
 802cd16:	0bda      	lsrs	r2, r3, #15
 802cd18:	f102 0778 	add.w	r7, r2, #120	; 0x78
 802cd1c:	00ff      	lsls	r7, r7, #3
 802cd1e:	f102 0577 	add.w	r5, r2, #119	; 0x77
 802cd22:	e786      	b.n	802cc32 <_free_r+0xa2>
 802cd24:	f240 5054 	movw	r0, #1364	; 0x554
 802cd28:	4282      	cmp	r2, r0
 802cd2a:	d806      	bhi.n	802cd3a <_free_r+0x1aa>
 802cd2c:	0c9a      	lsrs	r2, r3, #18
 802cd2e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 802cd32:	00ff      	lsls	r7, r7, #3
 802cd34:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 802cd38:	e77b      	b.n	802cc32 <_free_r+0xa2>
 802cd3a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 802cd3e:	257e      	movs	r5, #126	; 0x7e
 802cd40:	e777      	b.n	802cc32 <_free_r+0xa2>
 802cd42:	f043 0101 	orr.w	r1, r3, #1
 802cd46:	6061      	str	r1, [r4, #4]
 802cd48:	6013      	str	r3, [r2, #0]
 802cd4a:	e763      	b.n	802cc14 <_free_r+0x84>
 802cd4c:	2000162c 	.word	0x2000162c
 802cd50:	20001634 	.word	0x20001634
 802cd54:	20001a38 	.word	0x20001a38
 802cd58:	200126a8 	.word	0x200126a8
 802cd5c:	00000000 	.word	0x00000000

0802cd60 <rshift>:
 802cd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 802cd62:	6905      	ldr	r5, [r0, #16]
 802cd64:	114b      	asrs	r3, r1, #5
 802cd66:	42ab      	cmp	r3, r5
 802cd68:	da2a      	bge.n	802cdc0 <rshift+0x60>
 802cd6a:	f100 0714 	add.w	r7, r0, #20
 802cd6e:	f011 011f 	ands.w	r1, r1, #31
 802cd72:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802cd76:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 802cd7a:	d026      	beq.n	802cdca <rshift+0x6a>
 802cd7c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 802cd80:	1d34      	adds	r4, r6, #4
 802cd82:	42a5      	cmp	r5, r4
 802cd84:	fa22 f201 	lsr.w	r2, r2, r1
 802cd88:	f1c1 0c20 	rsb	ip, r1, #32
 802cd8c:	d932      	bls.n	802cdf4 <rshift+0x94>
 802cd8e:	46be      	mov	lr, r7
 802cd90:	6823      	ldr	r3, [r4, #0]
 802cd92:	fa03 f30c 	lsl.w	r3, r3, ip
 802cd96:	4313      	orrs	r3, r2
 802cd98:	f84e 3b04 	str.w	r3, [lr], #4
 802cd9c:	f854 2b04 	ldr.w	r2, [r4], #4
 802cda0:	42a5      	cmp	r5, r4
 802cda2:	fa22 f201 	lsr.w	r2, r2, r1
 802cda6:	d8f3      	bhi.n	802cd90 <rshift+0x30>
 802cda8:	1bab      	subs	r3, r5, r6
 802cdaa:	3b05      	subs	r3, #5
 802cdac:	f023 0303 	bic.w	r3, r3, #3
 802cdb0:	3304      	adds	r3, #4
 802cdb2:	443b      	add	r3, r7
 802cdb4:	601a      	str	r2, [r3, #0]
 802cdb6:	b102      	cbz	r2, 802cdba <rshift+0x5a>
 802cdb8:	3304      	adds	r3, #4
 802cdba:	1bdb      	subs	r3, r3, r7
 802cdbc:	109b      	asrs	r3, r3, #2
 802cdbe:	e015      	b.n	802cdec <rshift+0x8c>
 802cdc0:	2300      	movs	r3, #0
 802cdc2:	6103      	str	r3, [r0, #16]
 802cdc4:	2300      	movs	r3, #0
 802cdc6:	6143      	str	r3, [r0, #20]
 802cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cdca:	42b5      	cmp	r5, r6
 802cdcc:	d9f8      	bls.n	802cdc0 <rshift+0x60>
 802cdce:	f100 0210 	add.w	r2, r0, #16
 802cdd2:	4633      	mov	r3, r6
 802cdd4:	f853 1b04 	ldr.w	r1, [r3], #4
 802cdd8:	f842 1f04 	str.w	r1, [r2, #4]!
 802cddc:	429d      	cmp	r5, r3
 802cdde:	d8f9      	bhi.n	802cdd4 <rshift+0x74>
 802cde0:	43f3      	mvns	r3, r6
 802cde2:	442b      	add	r3, r5
 802cde4:	f023 0303 	bic.w	r3, r3, #3
 802cde8:	3304      	adds	r3, #4
 802cdea:	109b      	asrs	r3, r3, #2
 802cdec:	6103      	str	r3, [r0, #16]
 802cdee:	2b00      	cmp	r3, #0
 802cdf0:	d0e8      	beq.n	802cdc4 <rshift+0x64>
 802cdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cdf4:	463b      	mov	r3, r7
 802cdf6:	e7dd      	b.n	802cdb4 <rshift+0x54>
	...

0802ce00 <__gethex>:
 802ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce04:	b08b      	sub	sp, #44	; 0x2c
 802ce06:	4689      	mov	r9, r1
 802ce08:	9005      	str	r0, [sp, #20]
 802ce0a:	9816      	ldr	r0, [sp, #88]	; 0x58
 802ce0c:	9203      	str	r2, [sp, #12]
 802ce0e:	9308      	str	r3, [sp, #32]
 802ce10:	f7fb ff96 	bl	8028d40 <__localeconv_l>
 802ce14:	6803      	ldr	r3, [r0, #0]
 802ce16:	9302      	str	r3, [sp, #8]
 802ce18:	4618      	mov	r0, r3
 802ce1a:	461c      	mov	r4, r3
 802ce1c:	f7e0 f888 	bl	800cf30 <strlen>
 802ce20:	f8d9 3000 	ldr.w	r3, [r9]
 802ce24:	9000      	str	r0, [sp, #0]
 802ce26:	789a      	ldrb	r2, [r3, #2]
 802ce28:	1821      	adds	r1, r4, r0
 802ce2a:	2a30      	cmp	r2, #48	; 0x30
 802ce2c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 802ce30:	f040 81ab 	bne.w	802d18a <__gethex+0x38a>
 802ce34:	3303      	adds	r3, #3
 802ce36:	f04f 0800 	mov.w	r8, #0
 802ce3a:	461c      	mov	r4, r3
 802ce3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ce40:	2a30      	cmp	r2, #48	; 0x30
 802ce42:	f108 0801 	add.w	r8, r8, #1
 802ce46:	d0f8      	beq.n	802ce3a <__gethex+0x3a>
 802ce48:	4eb3      	ldr	r6, [pc, #716]	; (802d118 <__gethex+0x318>)
 802ce4a:	5cb3      	ldrb	r3, [r6, r2]
 802ce4c:	2b00      	cmp	r3, #0
 802ce4e:	f000 80ed 	beq.w	802d02c <__gethex+0x22c>
 802ce52:	7823      	ldrb	r3, [r4, #0]
 802ce54:	f04f 0a00 	mov.w	sl, #0
 802ce58:	5cf3      	ldrb	r3, [r6, r3]
 802ce5a:	4655      	mov	r5, sl
 802ce5c:	4627      	mov	r7, r4
 802ce5e:	b123      	cbz	r3, 802ce6a <__gethex+0x6a>
 802ce60:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 802ce64:	5cf3      	ldrb	r3, [r6, r3]
 802ce66:	2b00      	cmp	r3, #0
 802ce68:	d1fa      	bne.n	802ce60 <__gethex+0x60>
 802ce6a:	9a00      	ldr	r2, [sp, #0]
 802ce6c:	9902      	ldr	r1, [sp, #8]
 802ce6e:	4638      	mov	r0, r7
 802ce70:	f001 fc3e 	bl	802e6f0 <strncmp>
 802ce74:	2800      	cmp	r0, #0
 802ce76:	f000 8091 	beq.w	802cf9c <__gethex+0x19c>
 802ce7a:	783b      	ldrb	r3, [r7, #0]
 802ce7c:	2d00      	cmp	r5, #0
 802ce7e:	f000 8173 	beq.w	802d168 <__gethex+0x368>
 802ce82:	1bed      	subs	r5, r5, r7
 802ce84:	00aa      	lsls	r2, r5, #2
 802ce86:	9201      	str	r2, [sp, #4]
 802ce88:	2b50      	cmp	r3, #80	; 0x50
 802ce8a:	f000 8090 	beq.w	802cfae <__gethex+0x1ae>
 802ce8e:	2b70      	cmp	r3, #112	; 0x70
 802ce90:	f000 808d 	beq.w	802cfae <__gethex+0x1ae>
 802ce94:	463d      	mov	r5, r7
 802ce96:	f8c9 7000 	str.w	r7, [r9]
 802ce9a:	f1ba 0f00 	cmp.w	sl, #0
 802ce9e:	f040 80b5 	bne.w	802d00c <__gethex+0x20c>
 802cea2:	1b2b      	subs	r3, r5, r4
 802cea4:	3b01      	subs	r3, #1
 802cea6:	2b07      	cmp	r3, #7
 802cea8:	4651      	mov	r1, sl
 802ceaa:	dd04      	ble.n	802ceb6 <__gethex+0xb6>
 802ceac:	105b      	asrs	r3, r3, #1
 802ceae:	2b07      	cmp	r3, #7
 802ceb0:	f101 0101 	add.w	r1, r1, #1
 802ceb4:	dcfa      	bgt.n	802ceac <__gethex+0xac>
 802ceb6:	9805      	ldr	r0, [sp, #20]
 802ceb8:	f000 fde2 	bl	802da80 <_Balloc>
 802cebc:	4603      	mov	r3, r0
 802cebe:	3314      	adds	r3, #20
 802cec0:	42ac      	cmp	r4, r5
 802cec2:	9004      	str	r0, [sp, #16]
 802cec4:	9307      	str	r3, [sp, #28]
 802cec6:	f080 81d1 	bcs.w	802d26c <__gethex+0x46c>
 802ceca:	4699      	mov	r9, r3
 802cecc:	9b00      	ldr	r3, [sp, #0]
 802cece:	2700      	movs	r7, #0
 802ced0:	f1c3 0301 	rsb	r3, r3, #1
 802ced4:	46b8      	mov	r8, r7
 802ced6:	9306      	str	r3, [sp, #24]
 802ced8:	e00f      	b.n	802cefa <__gethex+0xfa>
 802ceda:	2f20      	cmp	r7, #32
 802cedc:	f000 809f 	beq.w	802d01e <__gethex+0x21e>
 802cee0:	463a      	mov	r2, r7
 802cee2:	3704      	adds	r7, #4
 802cee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802cee8:	5cf3      	ldrb	r3, [r6, r3]
 802ceea:	4655      	mov	r5, sl
 802ceec:	f003 030f 	and.w	r3, r3, #15
 802cef0:	4093      	lsls	r3, r2
 802cef2:	42a5      	cmp	r5, r4
 802cef4:	ea48 0803 	orr.w	r8, r8, r3
 802cef8:	d915      	bls.n	802cf26 <__gethex+0x126>
 802cefa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802cefe:	455b      	cmp	r3, fp
 802cf00:	f105 3aff 	add.w	sl, r5, #4294967295
 802cf04:	d1e9      	bne.n	802ceda <__gethex+0xda>
 802cf06:	9b06      	ldr	r3, [sp, #24]
 802cf08:	4453      	add	r3, sl
 802cf0a:	42a3      	cmp	r3, r4
 802cf0c:	d3e5      	bcc.n	802ceda <__gethex+0xda>
 802cf0e:	4618      	mov	r0, r3
 802cf10:	9a00      	ldr	r2, [sp, #0]
 802cf12:	9902      	ldr	r1, [sp, #8]
 802cf14:	9309      	str	r3, [sp, #36]	; 0x24
 802cf16:	f001 fbeb 	bl	802e6f0 <strncmp>
 802cf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cf1c:	2800      	cmp	r0, #0
 802cf1e:	d1dc      	bne.n	802ceda <__gethex+0xda>
 802cf20:	461d      	mov	r5, r3
 802cf22:	42a5      	cmp	r5, r4
 802cf24:	d8e9      	bhi.n	802cefa <__gethex+0xfa>
 802cf26:	f849 8b04 	str.w	r8, [r9], #4
 802cf2a:	9b07      	ldr	r3, [sp, #28]
 802cf2c:	9a04      	ldr	r2, [sp, #16]
 802cf2e:	eba9 0903 	sub.w	r9, r9, r3
 802cf32:	ea4f 03a9 	mov.w	r3, r9, asr #2
 802cf36:	6113      	str	r3, [r2, #16]
 802cf38:	4640      	mov	r0, r8
 802cf3a:	ea4f 1943 	mov.w	r9, r3, lsl #5
 802cf3e:	f000 fe67 	bl	802dc10 <__hi0bits>
 802cf42:	9b03      	ldr	r3, [sp, #12]
 802cf44:	681d      	ldr	r5, [r3, #0]
 802cf46:	eba9 0000 	sub.w	r0, r9, r0
 802cf4a:	42a8      	cmp	r0, r5
 802cf4c:	f300 80e6 	bgt.w	802d11c <__gethex+0x31c>
 802cf50:	f2c0 810c 	blt.w	802d16c <__gethex+0x36c>
 802cf54:	2600      	movs	r6, #0
 802cf56:	9b03      	ldr	r3, [sp, #12]
 802cf58:	9a01      	ldr	r2, [sp, #4]
 802cf5a:	689b      	ldr	r3, [r3, #8]
 802cf5c:	429a      	cmp	r2, r3
 802cf5e:	f300 8098 	bgt.w	802d092 <__gethex+0x292>
 802cf62:	9803      	ldr	r0, [sp, #12]
 802cf64:	9901      	ldr	r1, [sp, #4]
 802cf66:	6843      	ldr	r3, [r0, #4]
 802cf68:	4299      	cmp	r1, r3
 802cf6a:	f280 80b7 	bge.w	802d0dc <__gethex+0x2dc>
 802cf6e:	1a5c      	subs	r4, r3, r1
 802cf70:	42a5      	cmp	r5, r4
 802cf72:	f300 810e 	bgt.w	802d192 <__gethex+0x392>
 802cf76:	68c2      	ldr	r2, [r0, #12]
 802cf78:	2a02      	cmp	r2, #2
 802cf7a:	f000 817e 	beq.w	802d27a <__gethex+0x47a>
 802cf7e:	2a03      	cmp	r2, #3
 802cf80:	f000 815b 	beq.w	802d23a <__gethex+0x43a>
 802cf84:	2a01      	cmp	r2, #1
 802cf86:	f000 817c 	beq.w	802d282 <__gethex+0x482>
 802cf8a:	9904      	ldr	r1, [sp, #16]
 802cf8c:	9805      	ldr	r0, [sp, #20]
 802cf8e:	f000 fd9f 	bl	802dad0 <_Bfree>
 802cf92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802cf94:	2300      	movs	r3, #0
 802cf96:	6013      	str	r3, [r2, #0]
 802cf98:	2450      	movs	r4, #80	; 0x50
 802cf9a:	e03c      	b.n	802d016 <__gethex+0x216>
 802cf9c:	2d00      	cmp	r5, #0
 802cf9e:	f000 8118 	beq.w	802d1d2 <__gethex+0x3d2>
 802cfa2:	783b      	ldrb	r3, [r7, #0]
 802cfa4:	e76d      	b.n	802ce82 <__gethex+0x82>
 802cfa6:	2300      	movs	r3, #0
 802cfa8:	9301      	str	r3, [sp, #4]
 802cfaa:	f04f 0a01 	mov.w	sl, #1
 802cfae:	787b      	ldrb	r3, [r7, #1]
 802cfb0:	2b2b      	cmp	r3, #43	; 0x2b
 802cfb2:	f000 80ae 	beq.w	802d112 <__gethex+0x312>
 802cfb6:	2b2d      	cmp	r3, #45	; 0x2d
 802cfb8:	d077      	beq.n	802d0aa <__gethex+0x2aa>
 802cfba:	1c79      	adds	r1, r7, #1
 802cfbc:	2500      	movs	r5, #0
 802cfbe:	5cf3      	ldrb	r3, [r6, r3]
 802cfc0:	1e5a      	subs	r2, r3, #1
 802cfc2:	2a18      	cmp	r2, #24
 802cfc4:	f63f af66 	bhi.w	802ce94 <__gethex+0x94>
 802cfc8:	784a      	ldrb	r2, [r1, #1]
 802cfca:	5cb2      	ldrb	r2, [r6, r2]
 802cfcc:	1e50      	subs	r0, r2, #1
 802cfce:	2818      	cmp	r0, #24
 802cfd0:	f1a3 0310 	sub.w	r3, r3, #16
 802cfd4:	f101 0101 	add.w	r1, r1, #1
 802cfd8:	d80b      	bhi.n	802cff2 <__gethex+0x1f2>
 802cfda:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802cfde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802cfe2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802cfe6:	5c32      	ldrb	r2, [r6, r0]
 802cfe8:	1e50      	subs	r0, r2, #1
 802cfea:	2818      	cmp	r0, #24
 802cfec:	f1a3 0310 	sub.w	r3, r3, #16
 802cff0:	d9f3      	bls.n	802cfda <__gethex+0x1da>
 802cff2:	b105      	cbz	r5, 802cff6 <__gethex+0x1f6>
 802cff4:	425b      	negs	r3, r3
 802cff6:	9a01      	ldr	r2, [sp, #4]
 802cff8:	463d      	mov	r5, r7
 802cffa:	441a      	add	r2, r3
 802cffc:	460f      	mov	r7, r1
 802cffe:	9201      	str	r2, [sp, #4]
 802d000:	f8c9 7000 	str.w	r7, [r9]
 802d004:	f1ba 0f00 	cmp.w	sl, #0
 802d008:	f43f af4b 	beq.w	802cea2 <__gethex+0xa2>
 802d00c:	f1b8 0f00 	cmp.w	r8, #0
 802d010:	bf0c      	ite	eq
 802d012:	2406      	moveq	r4, #6
 802d014:	2400      	movne	r4, #0
 802d016:	4620      	mov	r0, r4
 802d018:	b00b      	add	sp, #44	; 0x2c
 802d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d01e:	2200      	movs	r2, #0
 802d020:	2704      	movs	r7, #4
 802d022:	f8c9 8000 	str.w	r8, [r9]
 802d026:	44b9      	add	r9, r7
 802d028:	4690      	mov	r8, r2
 802d02a:	e75b      	b.n	802cee4 <__gethex+0xe4>
 802d02c:	9d00      	ldr	r5, [sp, #0]
 802d02e:	9902      	ldr	r1, [sp, #8]
 802d030:	462a      	mov	r2, r5
 802d032:	4620      	mov	r0, r4
 802d034:	f001 fb5c 	bl	802e6f0 <strncmp>
 802d038:	2800      	cmp	r0, #0
 802d03a:	d03a      	beq.n	802d0b2 <__gethex+0x2b2>
 802d03c:	7822      	ldrb	r2, [r4, #0]
 802d03e:	4627      	mov	r7, r4
 802d040:	2a50      	cmp	r2, #80	; 0x50
 802d042:	d0b0      	beq.n	802cfa6 <__gethex+0x1a6>
 802d044:	2a70      	cmp	r2, #112	; 0x70
 802d046:	d0ae      	beq.n	802cfa6 <__gethex+0x1a6>
 802d048:	f8c9 7000 	str.w	r7, [r9]
 802d04c:	e7de      	b.n	802d00c <__gethex+0x20c>
 802d04e:	9b04      	ldr	r3, [sp, #16]
 802d050:	689b      	ldr	r3, [r3, #8]
 802d052:	429e      	cmp	r6, r3
 802d054:	f280 8136 	bge.w	802d2c4 <__gethex+0x4c4>
 802d058:	9b07      	ldr	r3, [sp, #28]
 802d05a:	4632      	mov	r2, r6
 802d05c:	9804      	ldr	r0, [sp, #16]
 802d05e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802d062:	f04f 0e01 	mov.w	lr, #1
 802d066:	3201      	adds	r2, #1
 802d068:	2c02      	cmp	r4, #2
 802d06a:	6102      	str	r2, [r0, #16]
 802d06c:	f8c1 e014 	str.w	lr, [r1, #20]
 802d070:	f000 8116 	beq.w	802d2a0 <__gethex+0x4a0>
 802d074:	4296      	cmp	r6, r2
 802d076:	f280 8141 	bge.w	802d2fc <__gethex+0x4fc>
 802d07a:	2101      	movs	r1, #1
 802d07c:	9804      	ldr	r0, [sp, #16]
 802d07e:	f7ff fe6f 	bl	802cd60 <rshift>
 802d082:	9b03      	ldr	r3, [sp, #12]
 802d084:	9a01      	ldr	r2, [sp, #4]
 802d086:	689b      	ldr	r3, [r3, #8]
 802d088:	3201      	adds	r2, #1
 802d08a:	429a      	cmp	r2, r3
 802d08c:	9201      	str	r2, [sp, #4]
 802d08e:	f340 80d0 	ble.w	802d232 <__gethex+0x432>
 802d092:	9805      	ldr	r0, [sp, #20]
 802d094:	9904      	ldr	r1, [sp, #16]
 802d096:	f000 fd1b 	bl	802dad0 <_Bfree>
 802d09a:	24a3      	movs	r4, #163	; 0xa3
 802d09c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802d09e:	2300      	movs	r3, #0
 802d0a0:	4620      	mov	r0, r4
 802d0a2:	6013      	str	r3, [r2, #0]
 802d0a4:	b00b      	add	sp, #44	; 0x2c
 802d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0aa:	2501      	movs	r5, #1
 802d0ac:	78bb      	ldrb	r3, [r7, #2]
 802d0ae:	1cb9      	adds	r1, r7, #2
 802d0b0:	e785      	b.n	802cfbe <__gethex+0x1be>
 802d0b2:	5d62      	ldrb	r2, [r4, r5]
 802d0b4:	5cb3      	ldrb	r3, [r6, r2]
 802d0b6:	1967      	adds	r7, r4, r5
 802d0b8:	2b00      	cmp	r3, #0
 802d0ba:	d0c1      	beq.n	802d040 <__gethex+0x240>
 802d0bc:	2a30      	cmp	r2, #48	; 0x30
 802d0be:	463c      	mov	r4, r7
 802d0c0:	d104      	bne.n	802d0cc <__gethex+0x2cc>
 802d0c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d0c6:	2b30      	cmp	r3, #48	; 0x30
 802d0c8:	d0fb      	beq.n	802d0c2 <__gethex+0x2c2>
 802d0ca:	5cf3      	ldrb	r3, [r6, r3]
 802d0cc:	fab3 fa83 	clz	sl, r3
 802d0d0:	463d      	mov	r5, r7
 802d0d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802d0d6:	f04f 0801 	mov.w	r8, #1
 802d0da:	e6bf      	b.n	802ce5c <__gethex+0x5c>
 802d0dc:	2401      	movs	r4, #1
 802d0de:	b166      	cbz	r6, 802d0fa <__gethex+0x2fa>
 802d0e0:	9b03      	ldr	r3, [sp, #12]
 802d0e2:	68db      	ldr	r3, [r3, #12]
 802d0e4:	2b02      	cmp	r3, #2
 802d0e6:	f000 8082 	beq.w	802d1ee <__gethex+0x3ee>
 802d0ea:	2b03      	cmp	r3, #3
 802d0ec:	f000 8083 	beq.w	802d1f6 <__gethex+0x3f6>
 802d0f0:	2b01      	cmp	r3, #1
 802d0f2:	f000 80b2 	beq.w	802d25a <__gethex+0x45a>
 802d0f6:	f044 0410 	orr.w	r4, r4, #16
 802d0fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802d0fc:	461a      	mov	r2, r3
 802d0fe:	9b04      	ldr	r3, [sp, #16]
 802d100:	6013      	str	r3, [r2, #0]
 802d102:	9b08      	ldr	r3, [sp, #32]
 802d104:	461a      	mov	r2, r3
 802d106:	9b01      	ldr	r3, [sp, #4]
 802d108:	6013      	str	r3, [r2, #0]
 802d10a:	4620      	mov	r0, r4
 802d10c:	b00b      	add	sp, #44	; 0x2c
 802d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d112:	2500      	movs	r5, #0
 802d114:	e7ca      	b.n	802d0ac <__gethex+0x2ac>
 802d116:	bf00      	nop
 802d118:	08030ed0 	.word	0x08030ed0
 802d11c:	1b44      	subs	r4, r0, r5
 802d11e:	4621      	mov	r1, r4
 802d120:	9804      	ldr	r0, [sp, #16]
 802d122:	f001 f90d 	bl	802e340 <__any_on>
 802d126:	4606      	mov	r6, r0
 802d128:	b1b0      	cbz	r0, 802d158 <__gethex+0x358>
 802d12a:	1e62      	subs	r2, r4, #1
 802d12c:	1151      	asrs	r1, r2, #5
 802d12e:	9807      	ldr	r0, [sp, #28]
 802d130:	f002 031f 	and.w	r3, r2, #31
 802d134:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 802d138:	2601      	movs	r6, #1
 802d13a:	fa06 f303 	lsl.w	r3, r6, r3
 802d13e:	420b      	tst	r3, r1
 802d140:	d00a      	beq.n	802d158 <__gethex+0x358>
 802d142:	42b2      	cmp	r2, r6
 802d144:	f340 8097 	ble.w	802d276 <__gethex+0x476>
 802d148:	1ea1      	subs	r1, r4, #2
 802d14a:	9804      	ldr	r0, [sp, #16]
 802d14c:	f001 f8f8 	bl	802e340 <__any_on>
 802d150:	2800      	cmp	r0, #0
 802d152:	f000 8090 	beq.w	802d276 <__gethex+0x476>
 802d156:	2603      	movs	r6, #3
 802d158:	9b01      	ldr	r3, [sp, #4]
 802d15a:	9804      	ldr	r0, [sp, #16]
 802d15c:	4423      	add	r3, r4
 802d15e:	4621      	mov	r1, r4
 802d160:	9301      	str	r3, [sp, #4]
 802d162:	f7ff fdfd 	bl	802cd60 <rshift>
 802d166:	e6f6      	b.n	802cf56 <__gethex+0x156>
 802d168:	9501      	str	r5, [sp, #4]
 802d16a:	e68d      	b.n	802ce88 <__gethex+0x88>
 802d16c:	1a2c      	subs	r4, r5, r0
 802d16e:	9904      	ldr	r1, [sp, #16]
 802d170:	9805      	ldr	r0, [sp, #20]
 802d172:	4622      	mov	r2, r4
 802d174:	f000 fe94 	bl	802dea0 <__lshift>
 802d178:	9b01      	ldr	r3, [sp, #4]
 802d17a:	9004      	str	r0, [sp, #16]
 802d17c:	1b1b      	subs	r3, r3, r4
 802d17e:	9301      	str	r3, [sp, #4]
 802d180:	4603      	mov	r3, r0
 802d182:	3314      	adds	r3, #20
 802d184:	9307      	str	r3, [sp, #28]
 802d186:	2600      	movs	r6, #0
 802d188:	e6e5      	b.n	802cf56 <__gethex+0x156>
 802d18a:	1c9c      	adds	r4, r3, #2
 802d18c:	f04f 0800 	mov.w	r8, #0
 802d190:	e65a      	b.n	802ce48 <__gethex+0x48>
 802d192:	1e67      	subs	r7, r4, #1
 802d194:	2e00      	cmp	r6, #0
 802d196:	d14e      	bne.n	802d236 <__gethex+0x436>
 802d198:	b127      	cbz	r7, 802d1a4 <__gethex+0x3a4>
 802d19a:	4639      	mov	r1, r7
 802d19c:	9804      	ldr	r0, [sp, #16]
 802d19e:	f001 f8cf 	bl	802e340 <__any_on>
 802d1a2:	4606      	mov	r6, r0
 802d1a4:	117b      	asrs	r3, r7, #5
 802d1a6:	9a07      	ldr	r2, [sp, #28]
 802d1a8:	9804      	ldr	r0, [sp, #16]
 802d1aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802d1ae:	f007 071f 	and.w	r7, r7, #31
 802d1b2:	2301      	movs	r3, #1
 802d1b4:	fa03 f707 	lsl.w	r7, r3, r7
 802d1b8:	4217      	tst	r7, r2
 802d1ba:	4621      	mov	r1, r4
 802d1bc:	bf18      	it	ne
 802d1be:	f046 0602 	orrne.w	r6, r6, #2
 802d1c2:	f7ff fdcd 	bl	802cd60 <rshift>
 802d1c6:	9b03      	ldr	r3, [sp, #12]
 802d1c8:	685b      	ldr	r3, [r3, #4]
 802d1ca:	9301      	str	r3, [sp, #4]
 802d1cc:	1b2d      	subs	r5, r5, r4
 802d1ce:	2402      	movs	r4, #2
 802d1d0:	e785      	b.n	802d0de <__gethex+0x2de>
 802d1d2:	9900      	ldr	r1, [sp, #0]
 802d1d4:	5c7b      	ldrb	r3, [r7, r1]
 802d1d6:	5cf2      	ldrb	r2, [r6, r3]
 802d1d8:	187d      	adds	r5, r7, r1
 802d1da:	462f      	mov	r7, r5
 802d1dc:	2a00      	cmp	r2, #0
 802d1de:	f43f ae50 	beq.w	802ce82 <__gethex+0x82>
 802d1e2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 802d1e6:	5cf2      	ldrb	r2, [r6, r3]
 802d1e8:	2a00      	cmp	r2, #0
 802d1ea:	d1fa      	bne.n	802d1e2 <__gethex+0x3e2>
 802d1ec:	e649      	b.n	802ce82 <__gethex+0x82>
 802d1ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802d1f0:	f1c3 0301 	rsb	r3, r3, #1
 802d1f4:	9315      	str	r3, [sp, #84]	; 0x54
 802d1f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802d1f8:	2b00      	cmp	r3, #0
 802d1fa:	f43f af7c 	beq.w	802d0f6 <__gethex+0x2f6>
 802d1fe:	9b04      	ldr	r3, [sp, #16]
 802d200:	9a07      	ldr	r2, [sp, #28]
 802d202:	691e      	ldr	r6, [r3, #16]
 802d204:	00b7      	lsls	r7, r6, #2
 802d206:	4613      	mov	r3, r2
 802d208:	eb02 0e07 	add.w	lr, r2, r7
 802d20c:	4611      	mov	r1, r2
 802d20e:	2000      	movs	r0, #0
 802d210:	e004      	b.n	802d21c <__gethex+0x41c>
 802d212:	f843 0b04 	str.w	r0, [r3], #4
 802d216:	459e      	cmp	lr, r3
 802d218:	f67f af19 	bls.w	802d04e <__gethex+0x24e>
 802d21c:	681a      	ldr	r2, [r3, #0]
 802d21e:	f1b2 3fff 	cmp.w	r2, #4294967295
 802d222:	d0f6      	beq.n	802d212 <__gethex+0x412>
 802d224:	3201      	adds	r2, #1
 802d226:	2c02      	cmp	r4, #2
 802d228:	601a      	str	r2, [r3, #0]
 802d22a:	d03a      	beq.n	802d2a2 <__gethex+0x4a2>
 802d22c:	f015 051f 	ands.w	r5, r5, #31
 802d230:	d13e      	bne.n	802d2b0 <__gethex+0x4b0>
 802d232:	2421      	movs	r4, #33	; 0x21
 802d234:	e761      	b.n	802d0fa <__gethex+0x2fa>
 802d236:	2601      	movs	r6, #1
 802d238:	e7b4      	b.n	802d1a4 <__gethex+0x3a4>
 802d23a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802d23c:	2a00      	cmp	r2, #0
 802d23e:	f43f aea4 	beq.w	802cf8a <__gethex+0x18a>
 802d242:	9908      	ldr	r1, [sp, #32]
 802d244:	600b      	str	r3, [r1, #0]
 802d246:	9b07      	ldr	r3, [sp, #28]
 802d248:	9904      	ldr	r1, [sp, #16]
 802d24a:	2201      	movs	r2, #1
 802d24c:	610a      	str	r2, [r1, #16]
 802d24e:	601a      	str	r2, [r3, #0]
 802d250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802d252:	461a      	mov	r2, r3
 802d254:	2462      	movs	r4, #98	; 0x62
 802d256:	6011      	str	r1, [r2, #0]
 802d258:	e6dd      	b.n	802d016 <__gethex+0x216>
 802d25a:	07b2      	lsls	r2, r6, #30
 802d25c:	f57f af4b 	bpl.w	802d0f6 <__gethex+0x2f6>
 802d260:	9b07      	ldr	r3, [sp, #28]
 802d262:	681b      	ldr	r3, [r3, #0]
 802d264:	431e      	orrs	r6, r3
 802d266:	07f3      	lsls	r3, r6, #31
 802d268:	d4c9      	bmi.n	802d1fe <__gethex+0x3fe>
 802d26a:	e744      	b.n	802d0f6 <__gethex+0x2f6>
 802d26c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802d270:	f04f 0800 	mov.w	r8, #0
 802d274:	e657      	b.n	802cf26 <__gethex+0x126>
 802d276:	2602      	movs	r6, #2
 802d278:	e76e      	b.n	802d158 <__gethex+0x358>
 802d27a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802d27c:	2a00      	cmp	r2, #0
 802d27e:	d0e0      	beq.n	802d242 <__gethex+0x442>
 802d280:	e683      	b.n	802cf8a <__gethex+0x18a>
 802d282:	42a5      	cmp	r5, r4
 802d284:	f47f ae81 	bne.w	802cf8a <__gethex+0x18a>
 802d288:	2d01      	cmp	r5, #1
 802d28a:	ddda      	ble.n	802d242 <__gethex+0x442>
 802d28c:	1e69      	subs	r1, r5, #1
 802d28e:	9804      	ldr	r0, [sp, #16]
 802d290:	f001 f856 	bl	802e340 <__any_on>
 802d294:	2800      	cmp	r0, #0
 802d296:	f43f ae78 	beq.w	802cf8a <__gethex+0x18a>
 802d29a:	9b03      	ldr	r3, [sp, #12]
 802d29c:	685b      	ldr	r3, [r3, #4]
 802d29e:	e7d0      	b.n	802d242 <__gethex+0x442>
 802d2a0:	4619      	mov	r1, r3
 802d2a2:	9b03      	ldr	r3, [sp, #12]
 802d2a4:	681b      	ldr	r3, [r3, #0]
 802d2a6:	3b01      	subs	r3, #1
 802d2a8:	429d      	cmp	r5, r3
 802d2aa:	d029      	beq.n	802d300 <__gethex+0x500>
 802d2ac:	2422      	movs	r4, #34	; 0x22
 802d2ae:	e724      	b.n	802d0fa <__gethex+0x2fa>
 802d2b0:	19cb      	adds	r3, r1, r7
 802d2b2:	f1c5 0520 	rsb	r5, r5, #32
 802d2b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802d2ba:	f000 fca9 	bl	802dc10 <__hi0bits>
 802d2be:	42a8      	cmp	r0, r5
 802d2c0:	dab7      	bge.n	802d232 <__gethex+0x432>
 802d2c2:	e6da      	b.n	802d07a <__gethex+0x27a>
 802d2c4:	9b04      	ldr	r3, [sp, #16]
 802d2c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 802d2ca:	6859      	ldr	r1, [r3, #4]
 802d2cc:	4648      	mov	r0, r9
 802d2ce:	3101      	adds	r1, #1
 802d2d0:	f000 fbd6 	bl	802da80 <_Balloc>
 802d2d4:	9904      	ldr	r1, [sp, #16]
 802d2d6:	690b      	ldr	r3, [r1, #16]
 802d2d8:	3302      	adds	r3, #2
 802d2da:	4680      	mov	r8, r0
 802d2dc:	009a      	lsls	r2, r3, #2
 802d2de:	310c      	adds	r1, #12
 802d2e0:	300c      	adds	r0, #12
 802d2e2:	f7df fc15 	bl	800cb10 <memcpy>
 802d2e6:	9904      	ldr	r1, [sp, #16]
 802d2e8:	4648      	mov	r0, r9
 802d2ea:	f000 fbf1 	bl	802dad0 <_Bfree>
 802d2ee:	f8cd 8010 	str.w	r8, [sp, #16]
 802d2f2:	f108 0314 	add.w	r3, r8, #20
 802d2f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802d2fa:	e6af      	b.n	802d05c <__gethex+0x25c>
 802d2fc:	4619      	mov	r1, r3
 802d2fe:	e795      	b.n	802d22c <__gethex+0x42c>
 802d300:	116b      	asrs	r3, r5, #5
 802d302:	f005 051f 	and.w	r5, r5, #31
 802d306:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 802d30a:	2301      	movs	r3, #1
 802d30c:	40ab      	lsls	r3, r5
 802d30e:	4213      	tst	r3, r2
 802d310:	bf14      	ite	ne
 802d312:	2421      	movne	r4, #33	; 0x21
 802d314:	2422      	moveq	r4, #34	; 0x22
 802d316:	e6f0      	b.n	802d0fa <__gethex+0x2fa>
	...

0802d320 <__match>:
 802d320:	b430      	push	{r4, r5}
 802d322:	6804      	ldr	r4, [r0, #0]
 802d324:	e008      	b.n	802d338 <__match+0x18>
 802d326:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d32a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 802d32e:	2d19      	cmp	r5, #25
 802d330:	bf98      	it	ls
 802d332:	3320      	addls	r3, #32
 802d334:	4293      	cmp	r3, r2
 802d336:	d108      	bne.n	802d34a <__match+0x2a>
 802d338:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d33c:	2a00      	cmp	r2, #0
 802d33e:	d1f2      	bne.n	802d326 <__match+0x6>
 802d340:	3401      	adds	r4, #1
 802d342:	6004      	str	r4, [r0, #0]
 802d344:	2001      	movs	r0, #1
 802d346:	bc30      	pop	{r4, r5}
 802d348:	4770      	bx	lr
 802d34a:	2000      	movs	r0, #0
 802d34c:	bc30      	pop	{r4, r5}
 802d34e:	4770      	bx	lr

0802d350 <__hexnan>:
 802d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d354:	680b      	ldr	r3, [r1, #0]
 802d356:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802d4d0 <__hexnan+0x180>
 802d35a:	b085      	sub	sp, #20
 802d35c:	1159      	asrs	r1, r3, #5
 802d35e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 802d362:	f013 031f 	ands.w	r3, r3, #31
 802d366:	9101      	str	r1, [sp, #4]
 802d368:	bf1c      	itt	ne
 802d36a:	3104      	addne	r1, #4
 802d36c:	9101      	strne	r1, [sp, #4]
 802d36e:	9c01      	ldr	r4, [sp, #4]
 802d370:	9002      	str	r0, [sp, #8]
 802d372:	9303      	str	r3, [sp, #12]
 802d374:	2300      	movs	r3, #0
 802d376:	f844 3c04 	str.w	r3, [r4, #-4]
 802d37a:	4619      	mov	r1, r3
 802d37c:	469a      	mov	sl, r3
 802d37e:	469e      	mov	lr, r3
 802d380:	9b02      	ldr	r3, [sp, #8]
 802d382:	681d      	ldr	r5, [r3, #0]
 802d384:	786b      	ldrb	r3, [r5, #1]
 802d386:	f1a4 0c04 	sub.w	ip, r4, #4
 802d38a:	46e0      	mov	r8, ip
 802d38c:	4660      	mov	r0, ip
 802d38e:	1c6e      	adds	r6, r5, #1
 802d390:	b32b      	cbz	r3, 802d3de <__hexnan+0x8e>
 802d392:	f819 4003 	ldrb.w	r4, [r9, r3]
 802d396:	2c00      	cmp	r4, #0
 802d398:	d144      	bne.n	802d424 <__hexnan+0xd4>
 802d39a:	2b20      	cmp	r3, #32
 802d39c:	d860      	bhi.n	802d460 <__hexnan+0x110>
 802d39e:	45d6      	cmp	lr, sl
 802d3a0:	dd18      	ble.n	802d3d4 <__hexnan+0x84>
 802d3a2:	4540      	cmp	r0, r8
 802d3a4:	d213      	bcs.n	802d3ce <__hexnan+0x7e>
 802d3a6:	2907      	cmp	r1, #7
 802d3a8:	dc11      	bgt.n	802d3ce <__hexnan+0x7e>
 802d3aa:	f1c1 0108 	rsb	r1, r1, #8
 802d3ae:	0089      	lsls	r1, r1, #2
 802d3b0:	6805      	ldr	r5, [r0, #0]
 802d3b2:	f1c1 0b20 	rsb	fp, r1, #32
 802d3b6:	4603      	mov	r3, r0
 802d3b8:	685f      	ldr	r7, [r3, #4]
 802d3ba:	fa07 f40b 	lsl.w	r4, r7, fp
 802d3be:	432c      	orrs	r4, r5
 802d3c0:	fa27 f501 	lsr.w	r5, r7, r1
 802d3c4:	601c      	str	r4, [r3, #0]
 802d3c6:	f843 5f04 	str.w	r5, [r3, #4]!
 802d3ca:	4598      	cmp	r8, r3
 802d3cc:	d8f4      	bhi.n	802d3b8 <__hexnan+0x68>
 802d3ce:	4290      	cmp	r0, r2
 802d3d0:	d83c      	bhi.n	802d44c <__hexnan+0xfc>
 802d3d2:	2108      	movs	r1, #8
 802d3d4:	4635      	mov	r5, r6
 802d3d6:	786b      	ldrb	r3, [r5, #1]
 802d3d8:	1c6e      	adds	r6, r5, #1
 802d3da:	2b00      	cmp	r3, #0
 802d3dc:	d1d9      	bne.n	802d392 <__hexnan+0x42>
 802d3de:	f1be 0f00 	cmp.w	lr, #0
 802d3e2:	d03f      	beq.n	802d464 <__hexnan+0x114>
 802d3e4:	4540      	cmp	r0, r8
 802d3e6:	d201      	bcs.n	802d3ec <__hexnan+0x9c>
 802d3e8:	2907      	cmp	r1, #7
 802d3ea:	dd5d      	ble.n	802d4a8 <__hexnan+0x158>
 802d3ec:	4290      	cmp	r0, r2
 802d3ee:	d93d      	bls.n	802d46c <__hexnan+0x11c>
 802d3f0:	4613      	mov	r3, r2
 802d3f2:	f850 1b04 	ldr.w	r1, [r0], #4
 802d3f6:	f843 1b04 	str.w	r1, [r3], #4
 802d3fa:	4584      	cmp	ip, r0
 802d3fc:	d2f9      	bcs.n	802d3f2 <__hexnan+0xa2>
 802d3fe:	2100      	movs	r1, #0
 802d400:	f843 1b04 	str.w	r1, [r3], #4
 802d404:	459c      	cmp	ip, r3
 802d406:	d2fb      	bcs.n	802d400 <__hexnan+0xb0>
 802d408:	9b01      	ldr	r3, [sp, #4]
 802d40a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802d40e:	b92b      	cbnz	r3, 802d41c <__hexnan+0xcc>
 802d410:	4562      	cmp	r2, ip
 802d412:	d03c      	beq.n	802d48e <__hexnan+0x13e>
 802d414:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 802d418:	2b00      	cmp	r3, #0
 802d41a:	d0f9      	beq.n	802d410 <__hexnan+0xc0>
 802d41c:	2005      	movs	r0, #5
 802d41e:	b005      	add	sp, #20
 802d420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d424:	3101      	adds	r1, #1
 802d426:	2908      	cmp	r1, #8
 802d428:	f10e 0e01 	add.w	lr, lr, #1
 802d42c:	dd06      	ble.n	802d43c <__hexnan+0xec>
 802d42e:	4290      	cmp	r0, r2
 802d430:	d9d0      	bls.n	802d3d4 <__hexnan+0x84>
 802d432:	2300      	movs	r3, #0
 802d434:	f840 3c04 	str.w	r3, [r0, #-4]
 802d438:	2101      	movs	r1, #1
 802d43a:	3804      	subs	r0, #4
 802d43c:	6803      	ldr	r3, [r0, #0]
 802d43e:	f004 040f 	and.w	r4, r4, #15
 802d442:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 802d446:	6004      	str	r4, [r0, #0]
 802d448:	4635      	mov	r5, r6
 802d44a:	e7c4      	b.n	802d3d6 <__hexnan+0x86>
 802d44c:	2300      	movs	r3, #0
 802d44e:	f1a0 0804 	sub.w	r8, r0, #4
 802d452:	f840 3c04 	str.w	r3, [r0, #-4]
 802d456:	46f2      	mov	sl, lr
 802d458:	4640      	mov	r0, r8
 802d45a:	4619      	mov	r1, r3
 802d45c:	4635      	mov	r5, r6
 802d45e:	e7ba      	b.n	802d3d6 <__hexnan+0x86>
 802d460:	2b29      	cmp	r3, #41	; 0x29
 802d462:	d01a      	beq.n	802d49a <__hexnan+0x14a>
 802d464:	2004      	movs	r0, #4
 802d466:	b005      	add	sp, #20
 802d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d46c:	9b03      	ldr	r3, [sp, #12]
 802d46e:	2b00      	cmp	r3, #0
 802d470:	d0ca      	beq.n	802d408 <__hexnan+0xb8>
 802d472:	9c01      	ldr	r4, [sp, #4]
 802d474:	9b03      	ldr	r3, [sp, #12]
 802d476:	f854 0c04 	ldr.w	r0, [r4, #-4]
 802d47a:	f1c3 0320 	rsb	r3, r3, #32
 802d47e:	f04f 31ff 	mov.w	r1, #4294967295
 802d482:	fa21 f303 	lsr.w	r3, r1, r3
 802d486:	4003      	ands	r3, r0
 802d488:	f844 3c04 	str.w	r3, [r4, #-4]
 802d48c:	e7bf      	b.n	802d40e <__hexnan+0xbe>
 802d48e:	2301      	movs	r3, #1
 802d490:	2005      	movs	r0, #5
 802d492:	6013      	str	r3, [r2, #0]
 802d494:	b005      	add	sp, #20
 802d496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d49a:	9b02      	ldr	r3, [sp, #8]
 802d49c:	3502      	adds	r5, #2
 802d49e:	601d      	str	r5, [r3, #0]
 802d4a0:	f1be 0f00 	cmp.w	lr, #0
 802d4a4:	d19e      	bne.n	802d3e4 <__hexnan+0x94>
 802d4a6:	e7dd      	b.n	802d464 <__hexnan+0x114>
 802d4a8:	f1c1 0308 	rsb	r3, r1, #8
 802d4ac:	009b      	lsls	r3, r3, #2
 802d4ae:	6805      	ldr	r5, [r0, #0]
 802d4b0:	f1c3 0720 	rsb	r7, r3, #32
 802d4b4:	4601      	mov	r1, r0
 802d4b6:	684e      	ldr	r6, [r1, #4]
 802d4b8:	fa06 f407 	lsl.w	r4, r6, r7
 802d4bc:	432c      	orrs	r4, r5
 802d4be:	fa26 f503 	lsr.w	r5, r6, r3
 802d4c2:	600c      	str	r4, [r1, #0]
 802d4c4:	f841 5f04 	str.w	r5, [r1, #4]!
 802d4c8:	4588      	cmp	r8, r1
 802d4ca:	d8f4      	bhi.n	802d4b6 <__hexnan+0x166>
 802d4cc:	e78e      	b.n	802d3ec <__hexnan+0x9c>
 802d4ce:	bf00      	nop
 802d4d0:	08030ed0 	.word	0x08030ed0
	...

0802d4e0 <__retarget_lock_acquire_recursive>:
 802d4e0:	4770      	bx	lr
 802d4e2:	bf00      	nop
	...

0802d4f0 <__retarget_lock_release_recursive>:
 802d4f0:	4770      	bx	lr
 802d4f2:	bf00      	nop
	...

0802d500 <_malloc_r>:
 802d500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d504:	f101 060b 	add.w	r6, r1, #11
 802d508:	2e16      	cmp	r6, #22
 802d50a:	b083      	sub	sp, #12
 802d50c:	4605      	mov	r5, r0
 802d50e:	f240 809e 	bls.w	802d64e <_malloc_r+0x14e>
 802d512:	f036 0607 	bics.w	r6, r6, #7
 802d516:	f100 80bd 	bmi.w	802d694 <_malloc_r+0x194>
 802d51a:	42b1      	cmp	r1, r6
 802d51c:	f200 80ba 	bhi.w	802d694 <_malloc_r+0x194>
 802d520:	f000 fa9e 	bl	802da60 <__malloc_lock>
 802d524:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 802d528:	f0c0 8293 	bcc.w	802da52 <_malloc_r+0x552>
 802d52c:	0a73      	lsrs	r3, r6, #9
 802d52e:	f000 80b8 	beq.w	802d6a2 <_malloc_r+0x1a2>
 802d532:	2b04      	cmp	r3, #4
 802d534:	f200 8179 	bhi.w	802d82a <_malloc_r+0x32a>
 802d538:	09b3      	lsrs	r3, r6, #6
 802d53a:	f103 0039 	add.w	r0, r3, #57	; 0x39
 802d53e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 802d542:	00c3      	lsls	r3, r0, #3
 802d544:	4fbf      	ldr	r7, [pc, #764]	; (802d844 <_malloc_r+0x344>)
 802d546:	443b      	add	r3, r7
 802d548:	f1a3 0108 	sub.w	r1, r3, #8
 802d54c:	685c      	ldr	r4, [r3, #4]
 802d54e:	42a1      	cmp	r1, r4
 802d550:	d106      	bne.n	802d560 <_malloc_r+0x60>
 802d552:	e00c      	b.n	802d56e <_malloc_r+0x6e>
 802d554:	2a00      	cmp	r2, #0
 802d556:	f280 80aa 	bge.w	802d6ae <_malloc_r+0x1ae>
 802d55a:	68e4      	ldr	r4, [r4, #12]
 802d55c:	42a1      	cmp	r1, r4
 802d55e:	d006      	beq.n	802d56e <_malloc_r+0x6e>
 802d560:	6863      	ldr	r3, [r4, #4]
 802d562:	f023 0303 	bic.w	r3, r3, #3
 802d566:	1b9a      	subs	r2, r3, r6
 802d568:	2a0f      	cmp	r2, #15
 802d56a:	ddf3      	ble.n	802d554 <_malloc_r+0x54>
 802d56c:	4670      	mov	r0, lr
 802d56e:	693c      	ldr	r4, [r7, #16]
 802d570:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 802d858 <_malloc_r+0x358>
 802d574:	4574      	cmp	r4, lr
 802d576:	f000 81ab 	beq.w	802d8d0 <_malloc_r+0x3d0>
 802d57a:	6863      	ldr	r3, [r4, #4]
 802d57c:	f023 0303 	bic.w	r3, r3, #3
 802d580:	1b9a      	subs	r2, r3, r6
 802d582:	2a0f      	cmp	r2, #15
 802d584:	f300 8190 	bgt.w	802d8a8 <_malloc_r+0x3a8>
 802d588:	2a00      	cmp	r2, #0
 802d58a:	f8c7 e014 	str.w	lr, [r7, #20]
 802d58e:	f8c7 e010 	str.w	lr, [r7, #16]
 802d592:	f280 809d 	bge.w	802d6d0 <_malloc_r+0x1d0>
 802d596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d59a:	f080 8161 	bcs.w	802d860 <_malloc_r+0x360>
 802d59e:	08db      	lsrs	r3, r3, #3
 802d5a0:	f103 0c01 	add.w	ip, r3, #1
 802d5a4:	1099      	asrs	r1, r3, #2
 802d5a6:	687a      	ldr	r2, [r7, #4]
 802d5a8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 802d5ac:	f8c4 8008 	str.w	r8, [r4, #8]
 802d5b0:	2301      	movs	r3, #1
 802d5b2:	408b      	lsls	r3, r1
 802d5b4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 802d5b8:	4313      	orrs	r3, r2
 802d5ba:	3908      	subs	r1, #8
 802d5bc:	60e1      	str	r1, [r4, #12]
 802d5be:	607b      	str	r3, [r7, #4]
 802d5c0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 802d5c4:	f8c8 400c 	str.w	r4, [r8, #12]
 802d5c8:	1082      	asrs	r2, r0, #2
 802d5ca:	2401      	movs	r4, #1
 802d5cc:	4094      	lsls	r4, r2
 802d5ce:	429c      	cmp	r4, r3
 802d5d0:	f200 808b 	bhi.w	802d6ea <_malloc_r+0x1ea>
 802d5d4:	421c      	tst	r4, r3
 802d5d6:	d106      	bne.n	802d5e6 <_malloc_r+0xe6>
 802d5d8:	f020 0003 	bic.w	r0, r0, #3
 802d5dc:	0064      	lsls	r4, r4, #1
 802d5de:	421c      	tst	r4, r3
 802d5e0:	f100 0004 	add.w	r0, r0, #4
 802d5e4:	d0fa      	beq.n	802d5dc <_malloc_r+0xdc>
 802d5e6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 802d5ea:	46cc      	mov	ip, r9
 802d5ec:	4680      	mov	r8, r0
 802d5ee:	f8dc 300c 	ldr.w	r3, [ip, #12]
 802d5f2:	459c      	cmp	ip, r3
 802d5f4:	d107      	bne.n	802d606 <_malloc_r+0x106>
 802d5f6:	e16d      	b.n	802d8d4 <_malloc_r+0x3d4>
 802d5f8:	2a00      	cmp	r2, #0
 802d5fa:	f280 817b 	bge.w	802d8f4 <_malloc_r+0x3f4>
 802d5fe:	68db      	ldr	r3, [r3, #12]
 802d600:	459c      	cmp	ip, r3
 802d602:	f000 8167 	beq.w	802d8d4 <_malloc_r+0x3d4>
 802d606:	6859      	ldr	r1, [r3, #4]
 802d608:	f021 0103 	bic.w	r1, r1, #3
 802d60c:	1b8a      	subs	r2, r1, r6
 802d60e:	2a0f      	cmp	r2, #15
 802d610:	ddf2      	ble.n	802d5f8 <_malloc_r+0xf8>
 802d612:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 802d616:	f8d3 8008 	ldr.w	r8, [r3, #8]
 802d61a:	9300      	str	r3, [sp, #0]
 802d61c:	199c      	adds	r4, r3, r6
 802d61e:	4628      	mov	r0, r5
 802d620:	f046 0601 	orr.w	r6, r6, #1
 802d624:	f042 0501 	orr.w	r5, r2, #1
 802d628:	605e      	str	r6, [r3, #4]
 802d62a:	f8c8 c00c 	str.w	ip, [r8, #12]
 802d62e:	f8cc 8008 	str.w	r8, [ip, #8]
 802d632:	617c      	str	r4, [r7, #20]
 802d634:	613c      	str	r4, [r7, #16]
 802d636:	f8c4 e00c 	str.w	lr, [r4, #12]
 802d63a:	f8c4 e008 	str.w	lr, [r4, #8]
 802d63e:	6065      	str	r5, [r4, #4]
 802d640:	505a      	str	r2, [r3, r1]
 802d642:	f000 fa15 	bl	802da70 <__malloc_unlock>
 802d646:	9b00      	ldr	r3, [sp, #0]
 802d648:	f103 0408 	add.w	r4, r3, #8
 802d64c:	e01e      	b.n	802d68c <_malloc_r+0x18c>
 802d64e:	2910      	cmp	r1, #16
 802d650:	d820      	bhi.n	802d694 <_malloc_r+0x194>
 802d652:	f000 fa05 	bl	802da60 <__malloc_lock>
 802d656:	2610      	movs	r6, #16
 802d658:	2318      	movs	r3, #24
 802d65a:	2002      	movs	r0, #2
 802d65c:	4f79      	ldr	r7, [pc, #484]	; (802d844 <_malloc_r+0x344>)
 802d65e:	443b      	add	r3, r7
 802d660:	f1a3 0208 	sub.w	r2, r3, #8
 802d664:	685c      	ldr	r4, [r3, #4]
 802d666:	4294      	cmp	r4, r2
 802d668:	f000 813d 	beq.w	802d8e6 <_malloc_r+0x3e6>
 802d66c:	6863      	ldr	r3, [r4, #4]
 802d66e:	68e1      	ldr	r1, [r4, #12]
 802d670:	68a6      	ldr	r6, [r4, #8]
 802d672:	f023 0303 	bic.w	r3, r3, #3
 802d676:	4423      	add	r3, r4
 802d678:	4628      	mov	r0, r5
 802d67a:	685a      	ldr	r2, [r3, #4]
 802d67c:	60f1      	str	r1, [r6, #12]
 802d67e:	f042 0201 	orr.w	r2, r2, #1
 802d682:	608e      	str	r6, [r1, #8]
 802d684:	605a      	str	r2, [r3, #4]
 802d686:	f000 f9f3 	bl	802da70 <__malloc_unlock>
 802d68a:	3408      	adds	r4, #8
 802d68c:	4620      	mov	r0, r4
 802d68e:	b003      	add	sp, #12
 802d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d694:	2400      	movs	r4, #0
 802d696:	230c      	movs	r3, #12
 802d698:	4620      	mov	r0, r4
 802d69a:	602b      	str	r3, [r5, #0]
 802d69c:	b003      	add	sp, #12
 802d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d6a2:	2040      	movs	r0, #64	; 0x40
 802d6a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d6a8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 802d6ac:	e74a      	b.n	802d544 <_malloc_r+0x44>
 802d6ae:	4423      	add	r3, r4
 802d6b0:	68e1      	ldr	r1, [r4, #12]
 802d6b2:	685a      	ldr	r2, [r3, #4]
 802d6b4:	68a6      	ldr	r6, [r4, #8]
 802d6b6:	f042 0201 	orr.w	r2, r2, #1
 802d6ba:	60f1      	str	r1, [r6, #12]
 802d6bc:	4628      	mov	r0, r5
 802d6be:	608e      	str	r6, [r1, #8]
 802d6c0:	605a      	str	r2, [r3, #4]
 802d6c2:	f000 f9d5 	bl	802da70 <__malloc_unlock>
 802d6c6:	3408      	adds	r4, #8
 802d6c8:	4620      	mov	r0, r4
 802d6ca:	b003      	add	sp, #12
 802d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d6d0:	4423      	add	r3, r4
 802d6d2:	4628      	mov	r0, r5
 802d6d4:	685a      	ldr	r2, [r3, #4]
 802d6d6:	f042 0201 	orr.w	r2, r2, #1
 802d6da:	605a      	str	r2, [r3, #4]
 802d6dc:	f000 f9c8 	bl	802da70 <__malloc_unlock>
 802d6e0:	3408      	adds	r4, #8
 802d6e2:	4620      	mov	r0, r4
 802d6e4:	b003      	add	sp, #12
 802d6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d6ea:	68bc      	ldr	r4, [r7, #8]
 802d6ec:	6863      	ldr	r3, [r4, #4]
 802d6ee:	f023 0803 	bic.w	r8, r3, #3
 802d6f2:	45b0      	cmp	r8, r6
 802d6f4:	d304      	bcc.n	802d700 <_malloc_r+0x200>
 802d6f6:	eba8 0306 	sub.w	r3, r8, r6
 802d6fa:	2b0f      	cmp	r3, #15
 802d6fc:	f300 8085 	bgt.w	802d80a <_malloc_r+0x30a>
 802d700:	f8df 9158 	ldr.w	r9, [pc, #344]	; 802d85c <_malloc_r+0x35c>
 802d704:	4b50      	ldr	r3, [pc, #320]	; (802d848 <_malloc_r+0x348>)
 802d706:	f8d9 2000 	ldr.w	r2, [r9]
 802d70a:	681b      	ldr	r3, [r3, #0]
 802d70c:	3201      	adds	r2, #1
 802d70e:	4433      	add	r3, r6
 802d710:	eb04 0a08 	add.w	sl, r4, r8
 802d714:	f000 8155 	beq.w	802d9c2 <_malloc_r+0x4c2>
 802d718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802d71c:	330f      	adds	r3, #15
 802d71e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 802d722:	f02b 0b0f 	bic.w	fp, fp, #15
 802d726:	4659      	mov	r1, fp
 802d728:	4628      	mov	r0, r5
 802d72a:	f7e4 f819 	bl	8011760 <_sbrk_r>
 802d72e:	1c41      	adds	r1, r0, #1
 802d730:	4602      	mov	r2, r0
 802d732:	f000 80fc 	beq.w	802d92e <_malloc_r+0x42e>
 802d736:	4582      	cmp	sl, r0
 802d738:	f200 80f7 	bhi.w	802d92a <_malloc_r+0x42a>
 802d73c:	4b43      	ldr	r3, [pc, #268]	; (802d84c <_malloc_r+0x34c>)
 802d73e:	6819      	ldr	r1, [r3, #0]
 802d740:	4459      	add	r1, fp
 802d742:	6019      	str	r1, [r3, #0]
 802d744:	f000 814d 	beq.w	802d9e2 <_malloc_r+0x4e2>
 802d748:	f8d9 0000 	ldr.w	r0, [r9]
 802d74c:	3001      	adds	r0, #1
 802d74e:	bf1b      	ittet	ne
 802d750:	eba2 0a0a 	subne.w	sl, r2, sl
 802d754:	4451      	addne	r1, sl
 802d756:	f8c9 2000 	streq.w	r2, [r9]
 802d75a:	6019      	strne	r1, [r3, #0]
 802d75c:	f012 0107 	ands.w	r1, r2, #7
 802d760:	f000 8115 	beq.w	802d98e <_malloc_r+0x48e>
 802d764:	f1c1 0008 	rsb	r0, r1, #8
 802d768:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 802d76c:	4402      	add	r2, r0
 802d76e:	3108      	adds	r1, #8
 802d770:	eb02 090b 	add.w	r9, r2, fp
 802d774:	f3c9 090b 	ubfx	r9, r9, #0, #12
 802d778:	eba1 0909 	sub.w	r9, r1, r9
 802d77c:	4649      	mov	r1, r9
 802d77e:	4628      	mov	r0, r5
 802d780:	9301      	str	r3, [sp, #4]
 802d782:	9200      	str	r2, [sp, #0]
 802d784:	f7e3 ffec 	bl	8011760 <_sbrk_r>
 802d788:	1c43      	adds	r3, r0, #1
 802d78a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 802d78e:	f000 8143 	beq.w	802da18 <_malloc_r+0x518>
 802d792:	1a80      	subs	r0, r0, r2
 802d794:	4448      	add	r0, r9
 802d796:	f040 0001 	orr.w	r0, r0, #1
 802d79a:	6819      	ldr	r1, [r3, #0]
 802d79c:	60ba      	str	r2, [r7, #8]
 802d79e:	4449      	add	r1, r9
 802d7a0:	42bc      	cmp	r4, r7
 802d7a2:	6050      	str	r0, [r2, #4]
 802d7a4:	6019      	str	r1, [r3, #0]
 802d7a6:	d017      	beq.n	802d7d8 <_malloc_r+0x2d8>
 802d7a8:	f1b8 0f0f 	cmp.w	r8, #15
 802d7ac:	f240 80fb 	bls.w	802d9a6 <_malloc_r+0x4a6>
 802d7b0:	6860      	ldr	r0, [r4, #4]
 802d7b2:	f1a8 020c 	sub.w	r2, r8, #12
 802d7b6:	f022 0207 	bic.w	r2, r2, #7
 802d7ba:	eb04 0e02 	add.w	lr, r4, r2
 802d7be:	f000 0001 	and.w	r0, r0, #1
 802d7c2:	f04f 0c05 	mov.w	ip, #5
 802d7c6:	4310      	orrs	r0, r2
 802d7c8:	2a0f      	cmp	r2, #15
 802d7ca:	6060      	str	r0, [r4, #4]
 802d7cc:	f8ce c004 	str.w	ip, [lr, #4]
 802d7d0:	f8ce c008 	str.w	ip, [lr, #8]
 802d7d4:	f200 8117 	bhi.w	802da06 <_malloc_r+0x506>
 802d7d8:	4b1d      	ldr	r3, [pc, #116]	; (802d850 <_malloc_r+0x350>)
 802d7da:	68bc      	ldr	r4, [r7, #8]
 802d7dc:	681a      	ldr	r2, [r3, #0]
 802d7de:	4291      	cmp	r1, r2
 802d7e0:	bf88      	it	hi
 802d7e2:	6019      	strhi	r1, [r3, #0]
 802d7e4:	4b1b      	ldr	r3, [pc, #108]	; (802d854 <_malloc_r+0x354>)
 802d7e6:	681a      	ldr	r2, [r3, #0]
 802d7e8:	4291      	cmp	r1, r2
 802d7ea:	6862      	ldr	r2, [r4, #4]
 802d7ec:	bf88      	it	hi
 802d7ee:	6019      	strhi	r1, [r3, #0]
 802d7f0:	f022 0203 	bic.w	r2, r2, #3
 802d7f4:	4296      	cmp	r6, r2
 802d7f6:	eba2 0306 	sub.w	r3, r2, r6
 802d7fa:	d801      	bhi.n	802d800 <_malloc_r+0x300>
 802d7fc:	2b0f      	cmp	r3, #15
 802d7fe:	dc04      	bgt.n	802d80a <_malloc_r+0x30a>
 802d800:	4628      	mov	r0, r5
 802d802:	f000 f935 	bl	802da70 <__malloc_unlock>
 802d806:	2400      	movs	r4, #0
 802d808:	e740      	b.n	802d68c <_malloc_r+0x18c>
 802d80a:	19a2      	adds	r2, r4, r6
 802d80c:	f043 0301 	orr.w	r3, r3, #1
 802d810:	f046 0601 	orr.w	r6, r6, #1
 802d814:	6066      	str	r6, [r4, #4]
 802d816:	4628      	mov	r0, r5
 802d818:	60ba      	str	r2, [r7, #8]
 802d81a:	6053      	str	r3, [r2, #4]
 802d81c:	f000 f928 	bl	802da70 <__malloc_unlock>
 802d820:	3408      	adds	r4, #8
 802d822:	4620      	mov	r0, r4
 802d824:	b003      	add	sp, #12
 802d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d82a:	2b14      	cmp	r3, #20
 802d82c:	d971      	bls.n	802d912 <_malloc_r+0x412>
 802d82e:	2b54      	cmp	r3, #84	; 0x54
 802d830:	f200 80a3 	bhi.w	802d97a <_malloc_r+0x47a>
 802d834:	0b33      	lsrs	r3, r6, #12
 802d836:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 802d83a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 802d83e:	00c3      	lsls	r3, r0, #3
 802d840:	e680      	b.n	802d544 <_malloc_r+0x44>
 802d842:	bf00      	nop
 802d844:	2000162c 	.word	0x2000162c
 802d848:	200126a8 	.word	0x200126a8
 802d84c:	20012678 	.word	0x20012678
 802d850:	200126a0 	.word	0x200126a0
 802d854:	200126a4 	.word	0x200126a4
 802d858:	20001634 	.word	0x20001634
 802d85c:	20001a34 	.word	0x20001a34
 802d860:	0a5a      	lsrs	r2, r3, #9
 802d862:	2a04      	cmp	r2, #4
 802d864:	d95b      	bls.n	802d91e <_malloc_r+0x41e>
 802d866:	2a14      	cmp	r2, #20
 802d868:	f200 80ae 	bhi.w	802d9c8 <_malloc_r+0x4c8>
 802d86c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 802d870:	00c9      	lsls	r1, r1, #3
 802d872:	325b      	adds	r2, #91	; 0x5b
 802d874:	eb07 0c01 	add.w	ip, r7, r1
 802d878:	5879      	ldr	r1, [r7, r1]
 802d87a:	f1ac 0c08 	sub.w	ip, ip, #8
 802d87e:	458c      	cmp	ip, r1
 802d880:	f000 8088 	beq.w	802d994 <_malloc_r+0x494>
 802d884:	684a      	ldr	r2, [r1, #4]
 802d886:	f022 0203 	bic.w	r2, r2, #3
 802d88a:	4293      	cmp	r3, r2
 802d88c:	d273      	bcs.n	802d976 <_malloc_r+0x476>
 802d88e:	6889      	ldr	r1, [r1, #8]
 802d890:	458c      	cmp	ip, r1
 802d892:	d1f7      	bne.n	802d884 <_malloc_r+0x384>
 802d894:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802d898:	687b      	ldr	r3, [r7, #4]
 802d89a:	60e2      	str	r2, [r4, #12]
 802d89c:	f8c4 c008 	str.w	ip, [r4, #8]
 802d8a0:	6094      	str	r4, [r2, #8]
 802d8a2:	f8cc 400c 	str.w	r4, [ip, #12]
 802d8a6:	e68f      	b.n	802d5c8 <_malloc_r+0xc8>
 802d8a8:	19a1      	adds	r1, r4, r6
 802d8aa:	f046 0c01 	orr.w	ip, r6, #1
 802d8ae:	f042 0601 	orr.w	r6, r2, #1
 802d8b2:	f8c4 c004 	str.w	ip, [r4, #4]
 802d8b6:	4628      	mov	r0, r5
 802d8b8:	6179      	str	r1, [r7, #20]
 802d8ba:	6139      	str	r1, [r7, #16]
 802d8bc:	f8c1 e00c 	str.w	lr, [r1, #12]
 802d8c0:	f8c1 e008 	str.w	lr, [r1, #8]
 802d8c4:	604e      	str	r6, [r1, #4]
 802d8c6:	50e2      	str	r2, [r4, r3]
 802d8c8:	f000 f8d2 	bl	802da70 <__malloc_unlock>
 802d8cc:	3408      	adds	r4, #8
 802d8ce:	e6dd      	b.n	802d68c <_malloc_r+0x18c>
 802d8d0:	687b      	ldr	r3, [r7, #4]
 802d8d2:	e679      	b.n	802d5c8 <_malloc_r+0xc8>
 802d8d4:	f108 0801 	add.w	r8, r8, #1
 802d8d8:	f018 0f03 	tst.w	r8, #3
 802d8dc:	f10c 0c08 	add.w	ip, ip, #8
 802d8e0:	f47f ae85 	bne.w	802d5ee <_malloc_r+0xee>
 802d8e4:	e02d      	b.n	802d942 <_malloc_r+0x442>
 802d8e6:	68dc      	ldr	r4, [r3, #12]
 802d8e8:	42a3      	cmp	r3, r4
 802d8ea:	bf08      	it	eq
 802d8ec:	3002      	addeq	r0, #2
 802d8ee:	f43f ae3e 	beq.w	802d56e <_malloc_r+0x6e>
 802d8f2:	e6bb      	b.n	802d66c <_malloc_r+0x16c>
 802d8f4:	4419      	add	r1, r3
 802d8f6:	461c      	mov	r4, r3
 802d8f8:	684a      	ldr	r2, [r1, #4]
 802d8fa:	68db      	ldr	r3, [r3, #12]
 802d8fc:	f854 6f08 	ldr.w	r6, [r4, #8]!
 802d900:	f042 0201 	orr.w	r2, r2, #1
 802d904:	604a      	str	r2, [r1, #4]
 802d906:	4628      	mov	r0, r5
 802d908:	60f3      	str	r3, [r6, #12]
 802d90a:	609e      	str	r6, [r3, #8]
 802d90c:	f000 f8b0 	bl	802da70 <__malloc_unlock>
 802d910:	e6bc      	b.n	802d68c <_malloc_r+0x18c>
 802d912:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 802d916:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 802d91a:	00c3      	lsls	r3, r0, #3
 802d91c:	e612      	b.n	802d544 <_malloc_r+0x44>
 802d91e:	099a      	lsrs	r2, r3, #6
 802d920:	f102 0139 	add.w	r1, r2, #57	; 0x39
 802d924:	00c9      	lsls	r1, r1, #3
 802d926:	3238      	adds	r2, #56	; 0x38
 802d928:	e7a4      	b.n	802d874 <_malloc_r+0x374>
 802d92a:	42bc      	cmp	r4, r7
 802d92c:	d054      	beq.n	802d9d8 <_malloc_r+0x4d8>
 802d92e:	68bc      	ldr	r4, [r7, #8]
 802d930:	6862      	ldr	r2, [r4, #4]
 802d932:	f022 0203 	bic.w	r2, r2, #3
 802d936:	e75d      	b.n	802d7f4 <_malloc_r+0x2f4>
 802d938:	f859 3908 	ldr.w	r3, [r9], #-8
 802d93c:	4599      	cmp	r9, r3
 802d93e:	f040 8086 	bne.w	802da4e <_malloc_r+0x54e>
 802d942:	f010 0f03 	tst.w	r0, #3
 802d946:	f100 30ff 	add.w	r0, r0, #4294967295
 802d94a:	d1f5      	bne.n	802d938 <_malloc_r+0x438>
 802d94c:	687b      	ldr	r3, [r7, #4]
 802d94e:	ea23 0304 	bic.w	r3, r3, r4
 802d952:	607b      	str	r3, [r7, #4]
 802d954:	0064      	lsls	r4, r4, #1
 802d956:	429c      	cmp	r4, r3
 802d958:	f63f aec7 	bhi.w	802d6ea <_malloc_r+0x1ea>
 802d95c:	2c00      	cmp	r4, #0
 802d95e:	f43f aec4 	beq.w	802d6ea <_malloc_r+0x1ea>
 802d962:	421c      	tst	r4, r3
 802d964:	4640      	mov	r0, r8
 802d966:	f47f ae3e 	bne.w	802d5e6 <_malloc_r+0xe6>
 802d96a:	0064      	lsls	r4, r4, #1
 802d96c:	421c      	tst	r4, r3
 802d96e:	f100 0004 	add.w	r0, r0, #4
 802d972:	d0fa      	beq.n	802d96a <_malloc_r+0x46a>
 802d974:	e637      	b.n	802d5e6 <_malloc_r+0xe6>
 802d976:	468c      	mov	ip, r1
 802d978:	e78c      	b.n	802d894 <_malloc_r+0x394>
 802d97a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 802d97e:	d815      	bhi.n	802d9ac <_malloc_r+0x4ac>
 802d980:	0bf3      	lsrs	r3, r6, #15
 802d982:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802d986:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 802d98a:	00c3      	lsls	r3, r0, #3
 802d98c:	e5da      	b.n	802d544 <_malloc_r+0x44>
 802d98e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802d992:	e6ed      	b.n	802d770 <_malloc_r+0x270>
 802d994:	687b      	ldr	r3, [r7, #4]
 802d996:	1092      	asrs	r2, r2, #2
 802d998:	2101      	movs	r1, #1
 802d99a:	fa01 f202 	lsl.w	r2, r1, r2
 802d99e:	4313      	orrs	r3, r2
 802d9a0:	607b      	str	r3, [r7, #4]
 802d9a2:	4662      	mov	r2, ip
 802d9a4:	e779      	b.n	802d89a <_malloc_r+0x39a>
 802d9a6:	2301      	movs	r3, #1
 802d9a8:	6053      	str	r3, [r2, #4]
 802d9aa:	e729      	b.n	802d800 <_malloc_r+0x300>
 802d9ac:	f240 5254 	movw	r2, #1364	; 0x554
 802d9b0:	4293      	cmp	r3, r2
 802d9b2:	d822      	bhi.n	802d9fa <_malloc_r+0x4fa>
 802d9b4:	0cb3      	lsrs	r3, r6, #18
 802d9b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 802d9ba:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 802d9be:	00c3      	lsls	r3, r0, #3
 802d9c0:	e5c0      	b.n	802d544 <_malloc_r+0x44>
 802d9c2:	f103 0b10 	add.w	fp, r3, #16
 802d9c6:	e6ae      	b.n	802d726 <_malloc_r+0x226>
 802d9c8:	2a54      	cmp	r2, #84	; 0x54
 802d9ca:	d829      	bhi.n	802da20 <_malloc_r+0x520>
 802d9cc:	0b1a      	lsrs	r2, r3, #12
 802d9ce:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 802d9d2:	00c9      	lsls	r1, r1, #3
 802d9d4:	326e      	adds	r2, #110	; 0x6e
 802d9d6:	e74d      	b.n	802d874 <_malloc_r+0x374>
 802d9d8:	4b20      	ldr	r3, [pc, #128]	; (802da5c <_malloc_r+0x55c>)
 802d9da:	6819      	ldr	r1, [r3, #0]
 802d9dc:	4459      	add	r1, fp
 802d9de:	6019      	str	r1, [r3, #0]
 802d9e0:	e6b2      	b.n	802d748 <_malloc_r+0x248>
 802d9e2:	f3ca 000b 	ubfx	r0, sl, #0, #12
 802d9e6:	2800      	cmp	r0, #0
 802d9e8:	f47f aeae 	bne.w	802d748 <_malloc_r+0x248>
 802d9ec:	eb08 030b 	add.w	r3, r8, fp
 802d9f0:	68ba      	ldr	r2, [r7, #8]
 802d9f2:	f043 0301 	orr.w	r3, r3, #1
 802d9f6:	6053      	str	r3, [r2, #4]
 802d9f8:	e6ee      	b.n	802d7d8 <_malloc_r+0x2d8>
 802d9fa:	207f      	movs	r0, #127	; 0x7f
 802d9fc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 802da00:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 802da04:	e59e      	b.n	802d544 <_malloc_r+0x44>
 802da06:	f104 0108 	add.w	r1, r4, #8
 802da0a:	4628      	mov	r0, r5
 802da0c:	9300      	str	r3, [sp, #0]
 802da0e:	f7ff f8bf 	bl	802cb90 <_free_r>
 802da12:	9b00      	ldr	r3, [sp, #0]
 802da14:	6819      	ldr	r1, [r3, #0]
 802da16:	e6df      	b.n	802d7d8 <_malloc_r+0x2d8>
 802da18:	2001      	movs	r0, #1
 802da1a:	f04f 0900 	mov.w	r9, #0
 802da1e:	e6bc      	b.n	802d79a <_malloc_r+0x29a>
 802da20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802da24:	d805      	bhi.n	802da32 <_malloc_r+0x532>
 802da26:	0bda      	lsrs	r2, r3, #15
 802da28:	f102 0178 	add.w	r1, r2, #120	; 0x78
 802da2c:	00c9      	lsls	r1, r1, #3
 802da2e:	3277      	adds	r2, #119	; 0x77
 802da30:	e720      	b.n	802d874 <_malloc_r+0x374>
 802da32:	f240 5154 	movw	r1, #1364	; 0x554
 802da36:	428a      	cmp	r2, r1
 802da38:	d805      	bhi.n	802da46 <_malloc_r+0x546>
 802da3a:	0c9a      	lsrs	r2, r3, #18
 802da3c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 802da40:	00c9      	lsls	r1, r1, #3
 802da42:	327c      	adds	r2, #124	; 0x7c
 802da44:	e716      	b.n	802d874 <_malloc_r+0x374>
 802da46:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 802da4a:	227e      	movs	r2, #126	; 0x7e
 802da4c:	e712      	b.n	802d874 <_malloc_r+0x374>
 802da4e:	687b      	ldr	r3, [r7, #4]
 802da50:	e780      	b.n	802d954 <_malloc_r+0x454>
 802da52:	08f0      	lsrs	r0, r6, #3
 802da54:	f106 0308 	add.w	r3, r6, #8
 802da58:	e600      	b.n	802d65c <_malloc_r+0x15c>
 802da5a:	bf00      	nop
 802da5c:	20012678 	.word	0x20012678

0802da60 <__malloc_lock>:
 802da60:	4801      	ldr	r0, [pc, #4]	; (802da68 <__malloc_lock+0x8>)
 802da62:	f7ff bd3d 	b.w	802d4e0 <__retarget_lock_acquire_recursive>
 802da66:	bf00      	nop
 802da68:	200126bc 	.word	0x200126bc
 802da6c:	00000000 	.word	0x00000000

0802da70 <__malloc_unlock>:
 802da70:	4801      	ldr	r0, [pc, #4]	; (802da78 <__malloc_unlock+0x8>)
 802da72:	f7ff bd3d 	b.w	802d4f0 <__retarget_lock_release_recursive>
 802da76:	bf00      	nop
 802da78:	200126bc 	.word	0x200126bc
 802da7c:	00000000 	.word	0x00000000

0802da80 <_Balloc>:
 802da80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802da82:	b570      	push	{r4, r5, r6, lr}
 802da84:	4605      	mov	r5, r0
 802da86:	460c      	mov	r4, r1
 802da88:	b14b      	cbz	r3, 802da9e <_Balloc+0x1e>
 802da8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802da8e:	b180      	cbz	r0, 802dab2 <_Balloc+0x32>
 802da90:	6802      	ldr	r2, [r0, #0]
 802da92:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802da96:	2300      	movs	r3, #0
 802da98:	6103      	str	r3, [r0, #16]
 802da9a:	60c3      	str	r3, [r0, #12]
 802da9c:	bd70      	pop	{r4, r5, r6, pc}
 802da9e:	2221      	movs	r2, #33	; 0x21
 802daa0:	2104      	movs	r1, #4
 802daa2:	f000 fefd 	bl	802e8a0 <_calloc_r>
 802daa6:	64e8      	str	r0, [r5, #76]	; 0x4c
 802daa8:	4603      	mov	r3, r0
 802daaa:	2800      	cmp	r0, #0
 802daac:	d1ed      	bne.n	802da8a <_Balloc+0xa>
 802daae:	2000      	movs	r0, #0
 802dab0:	bd70      	pop	{r4, r5, r6, pc}
 802dab2:	2101      	movs	r1, #1
 802dab4:	fa01 f604 	lsl.w	r6, r1, r4
 802dab8:	1d72      	adds	r2, r6, #5
 802daba:	4628      	mov	r0, r5
 802dabc:	0092      	lsls	r2, r2, #2
 802dabe:	f000 feef 	bl	802e8a0 <_calloc_r>
 802dac2:	2800      	cmp	r0, #0
 802dac4:	d0f3      	beq.n	802daae <_Balloc+0x2e>
 802dac6:	6044      	str	r4, [r0, #4]
 802dac8:	6086      	str	r6, [r0, #8]
 802daca:	e7e4      	b.n	802da96 <_Balloc+0x16>
 802dacc:	0000      	movs	r0, r0
	...

0802dad0 <_Bfree>:
 802dad0:	b131      	cbz	r1, 802dae0 <_Bfree+0x10>
 802dad2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802dad4:	684a      	ldr	r2, [r1, #4]
 802dad6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802dada:	6008      	str	r0, [r1, #0]
 802dadc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802dae0:	4770      	bx	lr
 802dae2:	bf00      	nop
	...

0802daf0 <__multadd>:
 802daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802daf2:	690c      	ldr	r4, [r1, #16]
 802daf4:	b083      	sub	sp, #12
 802daf6:	460d      	mov	r5, r1
 802daf8:	4606      	mov	r6, r0
 802dafa:	f101 0e14 	add.w	lr, r1, #20
 802dafe:	2700      	movs	r7, #0
 802db00:	f8de 0000 	ldr.w	r0, [lr]
 802db04:	b281      	uxth	r1, r0
 802db06:	fb02 3301 	mla	r3, r2, r1, r3
 802db0a:	0c01      	lsrs	r1, r0, #16
 802db0c:	0c18      	lsrs	r0, r3, #16
 802db0e:	fb02 0101 	mla	r1, r2, r1, r0
 802db12:	b29b      	uxth	r3, r3
 802db14:	3701      	adds	r7, #1
 802db16:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 802db1a:	42bc      	cmp	r4, r7
 802db1c:	f84e 3b04 	str.w	r3, [lr], #4
 802db20:	ea4f 4311 	mov.w	r3, r1, lsr #16
 802db24:	dcec      	bgt.n	802db00 <__multadd+0x10>
 802db26:	b13b      	cbz	r3, 802db38 <__multadd+0x48>
 802db28:	68aa      	ldr	r2, [r5, #8]
 802db2a:	4294      	cmp	r4, r2
 802db2c:	da07      	bge.n	802db3e <__multadd+0x4e>
 802db2e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 802db32:	3401      	adds	r4, #1
 802db34:	6153      	str	r3, [r2, #20]
 802db36:	612c      	str	r4, [r5, #16]
 802db38:	4628      	mov	r0, r5
 802db3a:	b003      	add	sp, #12
 802db3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802db3e:	6869      	ldr	r1, [r5, #4]
 802db40:	9301      	str	r3, [sp, #4]
 802db42:	3101      	adds	r1, #1
 802db44:	4630      	mov	r0, r6
 802db46:	f7ff ff9b 	bl	802da80 <_Balloc>
 802db4a:	692a      	ldr	r2, [r5, #16]
 802db4c:	3202      	adds	r2, #2
 802db4e:	f105 010c 	add.w	r1, r5, #12
 802db52:	4607      	mov	r7, r0
 802db54:	0092      	lsls	r2, r2, #2
 802db56:	300c      	adds	r0, #12
 802db58:	f7de ffda 	bl	800cb10 <memcpy>
 802db5c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 802db5e:	6869      	ldr	r1, [r5, #4]
 802db60:	9b01      	ldr	r3, [sp, #4]
 802db62:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 802db66:	6028      	str	r0, [r5, #0]
 802db68:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 802db6c:	463d      	mov	r5, r7
 802db6e:	e7de      	b.n	802db2e <__multadd+0x3e>

0802db70 <__s2b>:
 802db70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802db74:	4c24      	ldr	r4, [pc, #144]	; (802dc08 <__s2b+0x98>)
 802db76:	9e08      	ldr	r6, [sp, #32]
 802db78:	461f      	mov	r7, r3
 802db7a:	3308      	adds	r3, #8
 802db7c:	fb84 4e03 	smull	r4, lr, r4, r3
 802db80:	17db      	asrs	r3, r3, #31
 802db82:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 802db86:	f1be 0f01 	cmp.w	lr, #1
 802db8a:	4605      	mov	r5, r0
 802db8c:	460c      	mov	r4, r1
 802db8e:	4690      	mov	r8, r2
 802db90:	dd35      	ble.n	802dbfe <__s2b+0x8e>
 802db92:	2301      	movs	r3, #1
 802db94:	2100      	movs	r1, #0
 802db96:	005b      	lsls	r3, r3, #1
 802db98:	459e      	cmp	lr, r3
 802db9a:	f101 0101 	add.w	r1, r1, #1
 802db9e:	dcfa      	bgt.n	802db96 <__s2b+0x26>
 802dba0:	4628      	mov	r0, r5
 802dba2:	f7ff ff6d 	bl	802da80 <_Balloc>
 802dba6:	2301      	movs	r3, #1
 802dba8:	f1b8 0f09 	cmp.w	r8, #9
 802dbac:	6146      	str	r6, [r0, #20]
 802dbae:	6103      	str	r3, [r0, #16]
 802dbb0:	dd21      	ble.n	802dbf6 <__s2b+0x86>
 802dbb2:	f104 0909 	add.w	r9, r4, #9
 802dbb6:	464e      	mov	r6, r9
 802dbb8:	4444      	add	r4, r8
 802dbba:	f816 3b01 	ldrb.w	r3, [r6], #1
 802dbbe:	4601      	mov	r1, r0
 802dbc0:	3b30      	subs	r3, #48	; 0x30
 802dbc2:	220a      	movs	r2, #10
 802dbc4:	4628      	mov	r0, r5
 802dbc6:	f7ff ff93 	bl	802daf0 <__multadd>
 802dbca:	42a6      	cmp	r6, r4
 802dbcc:	d1f5      	bne.n	802dbba <__s2b+0x4a>
 802dbce:	f1a8 0408 	sub.w	r4, r8, #8
 802dbd2:	444c      	add	r4, r9
 802dbd4:	4547      	cmp	r7, r8
 802dbd6:	dd14      	ble.n	802dc02 <__s2b+0x92>
 802dbd8:	eba7 0708 	sub.w	r7, r7, r8
 802dbdc:	4427      	add	r7, r4
 802dbde:	f814 3b01 	ldrb.w	r3, [r4], #1
 802dbe2:	4601      	mov	r1, r0
 802dbe4:	3b30      	subs	r3, #48	; 0x30
 802dbe6:	220a      	movs	r2, #10
 802dbe8:	4628      	mov	r0, r5
 802dbea:	f7ff ff81 	bl	802daf0 <__multadd>
 802dbee:	42a7      	cmp	r7, r4
 802dbf0:	d1f5      	bne.n	802dbde <__s2b+0x6e>
 802dbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dbf6:	340a      	adds	r4, #10
 802dbf8:	f04f 0809 	mov.w	r8, #9
 802dbfc:	e7ea      	b.n	802dbd4 <__s2b+0x64>
 802dbfe:	2100      	movs	r1, #0
 802dc00:	e7ce      	b.n	802dba0 <__s2b+0x30>
 802dc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dc06:	bf00      	nop
 802dc08:	38e38e39 	.word	0x38e38e39
 802dc0c:	00000000 	.word	0x00000000

0802dc10 <__hi0bits>:
 802dc10:	0c02      	lsrs	r2, r0, #16
 802dc12:	0412      	lsls	r2, r2, #16
 802dc14:	4603      	mov	r3, r0
 802dc16:	b9b2      	cbnz	r2, 802dc46 <__hi0bits+0x36>
 802dc18:	0403      	lsls	r3, r0, #16
 802dc1a:	2010      	movs	r0, #16
 802dc1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802dc20:	bf04      	itt	eq
 802dc22:	021b      	lsleq	r3, r3, #8
 802dc24:	3008      	addeq	r0, #8
 802dc26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802dc2a:	bf04      	itt	eq
 802dc2c:	011b      	lsleq	r3, r3, #4
 802dc2e:	3004      	addeq	r0, #4
 802dc30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802dc34:	bf04      	itt	eq
 802dc36:	009b      	lsleq	r3, r3, #2
 802dc38:	3002      	addeq	r0, #2
 802dc3a:	2b00      	cmp	r3, #0
 802dc3c:	db02      	blt.n	802dc44 <__hi0bits+0x34>
 802dc3e:	005b      	lsls	r3, r3, #1
 802dc40:	d403      	bmi.n	802dc4a <__hi0bits+0x3a>
 802dc42:	2020      	movs	r0, #32
 802dc44:	4770      	bx	lr
 802dc46:	2000      	movs	r0, #0
 802dc48:	e7e8      	b.n	802dc1c <__hi0bits+0xc>
 802dc4a:	3001      	adds	r0, #1
 802dc4c:	4770      	bx	lr
 802dc4e:	bf00      	nop

0802dc50 <__lo0bits>:
 802dc50:	6803      	ldr	r3, [r0, #0]
 802dc52:	f013 0207 	ands.w	r2, r3, #7
 802dc56:	4601      	mov	r1, r0
 802dc58:	d007      	beq.n	802dc6a <__lo0bits+0x1a>
 802dc5a:	07da      	lsls	r2, r3, #31
 802dc5c:	d421      	bmi.n	802dca2 <__lo0bits+0x52>
 802dc5e:	0798      	lsls	r0, r3, #30
 802dc60:	d421      	bmi.n	802dca6 <__lo0bits+0x56>
 802dc62:	089b      	lsrs	r3, r3, #2
 802dc64:	600b      	str	r3, [r1, #0]
 802dc66:	2002      	movs	r0, #2
 802dc68:	4770      	bx	lr
 802dc6a:	b298      	uxth	r0, r3
 802dc6c:	b198      	cbz	r0, 802dc96 <__lo0bits+0x46>
 802dc6e:	4610      	mov	r0, r2
 802dc70:	f013 0fff 	tst.w	r3, #255	; 0xff
 802dc74:	bf04      	itt	eq
 802dc76:	0a1b      	lsreq	r3, r3, #8
 802dc78:	3008      	addeq	r0, #8
 802dc7a:	071a      	lsls	r2, r3, #28
 802dc7c:	bf04      	itt	eq
 802dc7e:	091b      	lsreq	r3, r3, #4
 802dc80:	3004      	addeq	r0, #4
 802dc82:	079a      	lsls	r2, r3, #30
 802dc84:	bf04      	itt	eq
 802dc86:	089b      	lsreq	r3, r3, #2
 802dc88:	3002      	addeq	r0, #2
 802dc8a:	07da      	lsls	r2, r3, #31
 802dc8c:	d407      	bmi.n	802dc9e <__lo0bits+0x4e>
 802dc8e:	085b      	lsrs	r3, r3, #1
 802dc90:	d104      	bne.n	802dc9c <__lo0bits+0x4c>
 802dc92:	2020      	movs	r0, #32
 802dc94:	4770      	bx	lr
 802dc96:	0c1b      	lsrs	r3, r3, #16
 802dc98:	2010      	movs	r0, #16
 802dc9a:	e7e9      	b.n	802dc70 <__lo0bits+0x20>
 802dc9c:	3001      	adds	r0, #1
 802dc9e:	600b      	str	r3, [r1, #0]
 802dca0:	4770      	bx	lr
 802dca2:	2000      	movs	r0, #0
 802dca4:	4770      	bx	lr
 802dca6:	085b      	lsrs	r3, r3, #1
 802dca8:	600b      	str	r3, [r1, #0]
 802dcaa:	2001      	movs	r0, #1
 802dcac:	4770      	bx	lr
 802dcae:	bf00      	nop

0802dcb0 <__i2b>:
 802dcb0:	b510      	push	{r4, lr}
 802dcb2:	460c      	mov	r4, r1
 802dcb4:	2101      	movs	r1, #1
 802dcb6:	f7ff fee3 	bl	802da80 <_Balloc>
 802dcba:	2201      	movs	r2, #1
 802dcbc:	6144      	str	r4, [r0, #20]
 802dcbe:	6102      	str	r2, [r0, #16]
 802dcc0:	bd10      	pop	{r4, pc}
 802dcc2:	bf00      	nop
	...

0802dcd0 <__multiply>:
 802dcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dcd4:	690c      	ldr	r4, [r1, #16]
 802dcd6:	6915      	ldr	r5, [r2, #16]
 802dcd8:	42ac      	cmp	r4, r5
 802dcda:	b083      	sub	sp, #12
 802dcdc:	468b      	mov	fp, r1
 802dcde:	4616      	mov	r6, r2
 802dce0:	da04      	bge.n	802dcec <__multiply+0x1c>
 802dce2:	4622      	mov	r2, r4
 802dce4:	46b3      	mov	fp, r6
 802dce6:	462c      	mov	r4, r5
 802dce8:	460e      	mov	r6, r1
 802dcea:	4615      	mov	r5, r2
 802dcec:	f8db 3008 	ldr.w	r3, [fp, #8]
 802dcf0:	f8db 1004 	ldr.w	r1, [fp, #4]
 802dcf4:	eb04 0805 	add.w	r8, r4, r5
 802dcf8:	4598      	cmp	r8, r3
 802dcfa:	bfc8      	it	gt
 802dcfc:	3101      	addgt	r1, #1
 802dcfe:	f7ff febf 	bl	802da80 <_Balloc>
 802dd02:	f100 0914 	add.w	r9, r0, #20
 802dd06:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 802dd0a:	45d1      	cmp	r9, sl
 802dd0c:	9000      	str	r0, [sp, #0]
 802dd0e:	d205      	bcs.n	802dd1c <__multiply+0x4c>
 802dd10:	464b      	mov	r3, r9
 802dd12:	2100      	movs	r1, #0
 802dd14:	f843 1b04 	str.w	r1, [r3], #4
 802dd18:	459a      	cmp	sl, r3
 802dd1a:	d8fb      	bhi.n	802dd14 <__multiply+0x44>
 802dd1c:	f106 0c14 	add.w	ip, r6, #20
 802dd20:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
 802dd24:	f10b 0b14 	add.w	fp, fp, #20
 802dd28:	459c      	cmp	ip, r3
 802dd2a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
 802dd2e:	d24c      	bcs.n	802ddca <__multiply+0xfa>
 802dd30:	f8cd a004 	str.w	sl, [sp, #4]
 802dd34:	469a      	mov	sl, r3
 802dd36:	f8dc 5000 	ldr.w	r5, [ip]
 802dd3a:	b2af      	uxth	r7, r5
 802dd3c:	b1ef      	cbz	r7, 802dd7a <__multiply+0xaa>
 802dd3e:	2100      	movs	r1, #0
 802dd40:	464d      	mov	r5, r9
 802dd42:	465e      	mov	r6, fp
 802dd44:	460c      	mov	r4, r1
 802dd46:	f856 2b04 	ldr.w	r2, [r6], #4
 802dd4a:	6828      	ldr	r0, [r5, #0]
 802dd4c:	b293      	uxth	r3, r2
 802dd4e:	b281      	uxth	r1, r0
 802dd50:	fb07 1303 	mla	r3, r7, r3, r1
 802dd54:	0c12      	lsrs	r2, r2, #16
 802dd56:	0c01      	lsrs	r1, r0, #16
 802dd58:	4423      	add	r3, r4
 802dd5a:	fb07 1102 	mla	r1, r7, r2, r1
 802dd5e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 802dd62:	b29b      	uxth	r3, r3
 802dd64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802dd68:	45b6      	cmp	lr, r6
 802dd6a:	f845 3b04 	str.w	r3, [r5], #4
 802dd6e:	ea4f 4411 	mov.w	r4, r1, lsr #16
 802dd72:	d8e8      	bhi.n	802dd46 <__multiply+0x76>
 802dd74:	602c      	str	r4, [r5, #0]
 802dd76:	f8dc 5000 	ldr.w	r5, [ip]
 802dd7a:	0c2d      	lsrs	r5, r5, #16
 802dd7c:	d01d      	beq.n	802ddba <__multiply+0xea>
 802dd7e:	f8d9 3000 	ldr.w	r3, [r9]
 802dd82:	4648      	mov	r0, r9
 802dd84:	461c      	mov	r4, r3
 802dd86:	4659      	mov	r1, fp
 802dd88:	2200      	movs	r2, #0
 802dd8a:	880e      	ldrh	r6, [r1, #0]
 802dd8c:	0c24      	lsrs	r4, r4, #16
 802dd8e:	fb05 4406 	mla	r4, r5, r6, r4
 802dd92:	4422      	add	r2, r4
 802dd94:	b29b      	uxth	r3, r3
 802dd96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802dd9a:	f840 3b04 	str.w	r3, [r0], #4
 802dd9e:	f851 3b04 	ldr.w	r3, [r1], #4
 802dda2:	6804      	ldr	r4, [r0, #0]
 802dda4:	0c1b      	lsrs	r3, r3, #16
 802dda6:	b2a6      	uxth	r6, r4
 802dda8:	fb05 6303 	mla	r3, r5, r3, r6
 802ddac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 802ddb0:	458e      	cmp	lr, r1
 802ddb2:	ea4f 4213 	mov.w	r2, r3, lsr #16
 802ddb6:	d8e8      	bhi.n	802dd8a <__multiply+0xba>
 802ddb8:	6003      	str	r3, [r0, #0]
 802ddba:	f10c 0c04 	add.w	ip, ip, #4
 802ddbe:	45e2      	cmp	sl, ip
 802ddc0:	f109 0904 	add.w	r9, r9, #4
 802ddc4:	d8b7      	bhi.n	802dd36 <__multiply+0x66>
 802ddc6:	f8dd a004 	ldr.w	sl, [sp, #4]
 802ddca:	f1b8 0f00 	cmp.w	r8, #0
 802ddce:	dd0b      	ble.n	802dde8 <__multiply+0x118>
 802ddd0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 802ddd4:	f1aa 0a04 	sub.w	sl, sl, #4
 802ddd8:	b11b      	cbz	r3, 802dde2 <__multiply+0x112>
 802ddda:	e005      	b.n	802dde8 <__multiply+0x118>
 802dddc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 802dde0:	b913      	cbnz	r3, 802dde8 <__multiply+0x118>
 802dde2:	f1b8 0801 	subs.w	r8, r8, #1
 802dde6:	d1f9      	bne.n	802dddc <__multiply+0x10c>
 802dde8:	9800      	ldr	r0, [sp, #0]
 802ddea:	f8c0 8010 	str.w	r8, [r0, #16]
 802ddee:	b003      	add	sp, #12
 802ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802de00 <__pow5mult>:
 802de00:	f012 0303 	ands.w	r3, r2, #3
 802de04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802de08:	4614      	mov	r4, r2
 802de0a:	4607      	mov	r7, r0
 802de0c:	d12e      	bne.n	802de6c <__pow5mult+0x6c>
 802de0e:	460d      	mov	r5, r1
 802de10:	10a4      	asrs	r4, r4, #2
 802de12:	d01c      	beq.n	802de4e <__pow5mult+0x4e>
 802de14:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 802de16:	b396      	cbz	r6, 802de7e <__pow5mult+0x7e>
 802de18:	07e3      	lsls	r3, r4, #31
 802de1a:	f04f 0800 	mov.w	r8, #0
 802de1e:	d406      	bmi.n	802de2e <__pow5mult+0x2e>
 802de20:	1064      	asrs	r4, r4, #1
 802de22:	d014      	beq.n	802de4e <__pow5mult+0x4e>
 802de24:	6830      	ldr	r0, [r6, #0]
 802de26:	b1a8      	cbz	r0, 802de54 <__pow5mult+0x54>
 802de28:	4606      	mov	r6, r0
 802de2a:	07e3      	lsls	r3, r4, #31
 802de2c:	d5f8      	bpl.n	802de20 <__pow5mult+0x20>
 802de2e:	4632      	mov	r2, r6
 802de30:	4629      	mov	r1, r5
 802de32:	4638      	mov	r0, r7
 802de34:	f7ff ff4c 	bl	802dcd0 <__multiply>
 802de38:	b1b5      	cbz	r5, 802de68 <__pow5mult+0x68>
 802de3a:	686a      	ldr	r2, [r5, #4]
 802de3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802de3e:	1064      	asrs	r4, r4, #1
 802de40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802de44:	6029      	str	r1, [r5, #0]
 802de46:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802de4a:	4605      	mov	r5, r0
 802de4c:	d1ea      	bne.n	802de24 <__pow5mult+0x24>
 802de4e:	4628      	mov	r0, r5
 802de50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802de54:	4632      	mov	r2, r6
 802de56:	4631      	mov	r1, r6
 802de58:	4638      	mov	r0, r7
 802de5a:	f7ff ff39 	bl	802dcd0 <__multiply>
 802de5e:	6030      	str	r0, [r6, #0]
 802de60:	f8c0 8000 	str.w	r8, [r0]
 802de64:	4606      	mov	r6, r0
 802de66:	e7e0      	b.n	802de2a <__pow5mult+0x2a>
 802de68:	4605      	mov	r5, r0
 802de6a:	e7d9      	b.n	802de20 <__pow5mult+0x20>
 802de6c:	1e5a      	subs	r2, r3, #1
 802de6e:	4d0b      	ldr	r5, [pc, #44]	; (802de9c <__pow5mult+0x9c>)
 802de70:	2300      	movs	r3, #0
 802de72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802de76:	f7ff fe3b 	bl	802daf0 <__multadd>
 802de7a:	4605      	mov	r5, r0
 802de7c:	e7c8      	b.n	802de10 <__pow5mult+0x10>
 802de7e:	2101      	movs	r1, #1
 802de80:	4638      	mov	r0, r7
 802de82:	f7ff fdfd 	bl	802da80 <_Balloc>
 802de86:	f240 2171 	movw	r1, #625	; 0x271
 802de8a:	2201      	movs	r2, #1
 802de8c:	2300      	movs	r3, #0
 802de8e:	6141      	str	r1, [r0, #20]
 802de90:	6102      	str	r2, [r0, #16]
 802de92:	4606      	mov	r6, r0
 802de94:	64b8      	str	r0, [r7, #72]	; 0x48
 802de96:	6003      	str	r3, [r0, #0]
 802de98:	e7be      	b.n	802de18 <__pow5mult+0x18>
 802de9a:	bf00      	nop
 802de9c:	080310d0 	.word	0x080310d0

0802dea0 <__lshift>:
 802dea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dea4:	4691      	mov	r9, r2
 802dea6:	690a      	ldr	r2, [r1, #16]
 802dea8:	688b      	ldr	r3, [r1, #8]
 802deaa:	ea4f 1469 	mov.w	r4, r9, asr #5
 802deae:	eb04 0802 	add.w	r8, r4, r2
 802deb2:	f108 0501 	add.w	r5, r8, #1
 802deb6:	429d      	cmp	r5, r3
 802deb8:	460e      	mov	r6, r1
 802deba:	4607      	mov	r7, r0
 802debc:	6849      	ldr	r1, [r1, #4]
 802debe:	dd04      	ble.n	802deca <__lshift+0x2a>
 802dec0:	005b      	lsls	r3, r3, #1
 802dec2:	429d      	cmp	r5, r3
 802dec4:	f101 0101 	add.w	r1, r1, #1
 802dec8:	dcfa      	bgt.n	802dec0 <__lshift+0x20>
 802deca:	4638      	mov	r0, r7
 802decc:	f7ff fdd8 	bl	802da80 <_Balloc>
 802ded0:	2c00      	cmp	r4, #0
 802ded2:	f100 0314 	add.w	r3, r0, #20
 802ded6:	dd06      	ble.n	802dee6 <__lshift+0x46>
 802ded8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 802dedc:	2100      	movs	r1, #0
 802dede:	f843 1b04 	str.w	r1, [r3], #4
 802dee2:	429a      	cmp	r2, r3
 802dee4:	d1fb      	bne.n	802dede <__lshift+0x3e>
 802dee6:	6934      	ldr	r4, [r6, #16]
 802dee8:	f106 0114 	add.w	r1, r6, #20
 802deec:	f019 091f 	ands.w	r9, r9, #31
 802def0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 802def4:	d01d      	beq.n	802df32 <__lshift+0x92>
 802def6:	f1c9 0c20 	rsb	ip, r9, #32
 802defa:	2200      	movs	r2, #0
 802defc:	680c      	ldr	r4, [r1, #0]
 802defe:	fa04 f409 	lsl.w	r4, r4, r9
 802df02:	4314      	orrs	r4, r2
 802df04:	f843 4b04 	str.w	r4, [r3], #4
 802df08:	f851 2b04 	ldr.w	r2, [r1], #4
 802df0c:	458e      	cmp	lr, r1
 802df0e:	fa22 f20c 	lsr.w	r2, r2, ip
 802df12:	d8f3      	bhi.n	802defc <__lshift+0x5c>
 802df14:	601a      	str	r2, [r3, #0]
 802df16:	b10a      	cbz	r2, 802df1c <__lshift+0x7c>
 802df18:	f108 0502 	add.w	r5, r8, #2
 802df1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802df1e:	6872      	ldr	r2, [r6, #4]
 802df20:	3d01      	subs	r5, #1
 802df22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802df26:	6105      	str	r5, [r0, #16]
 802df28:	6031      	str	r1, [r6, #0]
 802df2a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 802df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802df32:	3b04      	subs	r3, #4
 802df34:	f851 2b04 	ldr.w	r2, [r1], #4
 802df38:	f843 2f04 	str.w	r2, [r3, #4]!
 802df3c:	458e      	cmp	lr, r1
 802df3e:	d8f9      	bhi.n	802df34 <__lshift+0x94>
 802df40:	e7ec      	b.n	802df1c <__lshift+0x7c>
 802df42:	bf00      	nop
	...

0802df50 <__mcmp>:
 802df50:	b430      	push	{r4, r5}
 802df52:	690b      	ldr	r3, [r1, #16]
 802df54:	4605      	mov	r5, r0
 802df56:	6900      	ldr	r0, [r0, #16]
 802df58:	1ac0      	subs	r0, r0, r3
 802df5a:	d10f      	bne.n	802df7c <__mcmp+0x2c>
 802df5c:	009b      	lsls	r3, r3, #2
 802df5e:	3514      	adds	r5, #20
 802df60:	3114      	adds	r1, #20
 802df62:	4419      	add	r1, r3
 802df64:	442b      	add	r3, r5
 802df66:	e001      	b.n	802df6c <__mcmp+0x1c>
 802df68:	429d      	cmp	r5, r3
 802df6a:	d207      	bcs.n	802df7c <__mcmp+0x2c>
 802df6c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 802df70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802df74:	4294      	cmp	r4, r2
 802df76:	d0f7      	beq.n	802df68 <__mcmp+0x18>
 802df78:	d302      	bcc.n	802df80 <__mcmp+0x30>
 802df7a:	2001      	movs	r0, #1
 802df7c:	bc30      	pop	{r4, r5}
 802df7e:	4770      	bx	lr
 802df80:	f04f 30ff 	mov.w	r0, #4294967295
 802df84:	e7fa      	b.n	802df7c <__mcmp+0x2c>
 802df86:	bf00      	nop
	...

0802df90 <__mdiff>:
 802df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802df94:	690f      	ldr	r7, [r1, #16]
 802df96:	460e      	mov	r6, r1
 802df98:	6911      	ldr	r1, [r2, #16]
 802df9a:	1a7f      	subs	r7, r7, r1
 802df9c:	2f00      	cmp	r7, #0
 802df9e:	4690      	mov	r8, r2
 802dfa0:	d117      	bne.n	802dfd2 <__mdiff+0x42>
 802dfa2:	0089      	lsls	r1, r1, #2
 802dfa4:	f106 0514 	add.w	r5, r6, #20
 802dfa8:	f102 0e14 	add.w	lr, r2, #20
 802dfac:	186b      	adds	r3, r5, r1
 802dfae:	4471      	add	r1, lr
 802dfb0:	e001      	b.n	802dfb6 <__mdiff+0x26>
 802dfb2:	429d      	cmp	r5, r3
 802dfb4:	d25c      	bcs.n	802e070 <__mdiff+0xe0>
 802dfb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802dfba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802dfbe:	42a2      	cmp	r2, r4
 802dfc0:	d0f7      	beq.n	802dfb2 <__mdiff+0x22>
 802dfc2:	d25e      	bcs.n	802e082 <__mdiff+0xf2>
 802dfc4:	4633      	mov	r3, r6
 802dfc6:	462c      	mov	r4, r5
 802dfc8:	4646      	mov	r6, r8
 802dfca:	4675      	mov	r5, lr
 802dfcc:	4698      	mov	r8, r3
 802dfce:	2701      	movs	r7, #1
 802dfd0:	e005      	b.n	802dfde <__mdiff+0x4e>
 802dfd2:	db58      	blt.n	802e086 <__mdiff+0xf6>
 802dfd4:	f106 0514 	add.w	r5, r6, #20
 802dfd8:	f108 0414 	add.w	r4, r8, #20
 802dfdc:	2700      	movs	r7, #0
 802dfde:	6871      	ldr	r1, [r6, #4]
 802dfe0:	f7ff fd4e 	bl	802da80 <_Balloc>
 802dfe4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802dfe8:	6936      	ldr	r6, [r6, #16]
 802dfea:	60c7      	str	r7, [r0, #12]
 802dfec:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 802dff0:	46a6      	mov	lr, r4
 802dff2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 802dff6:	f100 0414 	add.w	r4, r0, #20
 802dffa:	2300      	movs	r3, #0
 802dffc:	f85e 1b04 	ldr.w	r1, [lr], #4
 802e000:	f855 8b04 	ldr.w	r8, [r5], #4
 802e004:	b28a      	uxth	r2, r1
 802e006:	fa13 f388 	uxtah	r3, r3, r8
 802e00a:	0c09      	lsrs	r1, r1, #16
 802e00c:	1a9a      	subs	r2, r3, r2
 802e00e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 802e012:	eb03 4322 	add.w	r3, r3, r2, asr #16
 802e016:	b292      	uxth	r2, r2
 802e018:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802e01c:	45f4      	cmp	ip, lr
 802e01e:	f844 2b04 	str.w	r2, [r4], #4
 802e022:	ea4f 4323 	mov.w	r3, r3, asr #16
 802e026:	d8e9      	bhi.n	802dffc <__mdiff+0x6c>
 802e028:	42af      	cmp	r7, r5
 802e02a:	d917      	bls.n	802e05c <__mdiff+0xcc>
 802e02c:	46a4      	mov	ip, r4
 802e02e:	46ae      	mov	lr, r5
 802e030:	f85e 2b04 	ldr.w	r2, [lr], #4
 802e034:	fa13 f382 	uxtah	r3, r3, r2
 802e038:	1419      	asrs	r1, r3, #16
 802e03a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802e03e:	b29b      	uxth	r3, r3
 802e040:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 802e044:	4577      	cmp	r7, lr
 802e046:	f84c 2b04 	str.w	r2, [ip], #4
 802e04a:	ea4f 4321 	mov.w	r3, r1, asr #16
 802e04e:	d8ef      	bhi.n	802e030 <__mdiff+0xa0>
 802e050:	43ed      	mvns	r5, r5
 802e052:	442f      	add	r7, r5
 802e054:	f027 0703 	bic.w	r7, r7, #3
 802e058:	3704      	adds	r7, #4
 802e05a:	443c      	add	r4, r7
 802e05c:	3c04      	subs	r4, #4
 802e05e:	b922      	cbnz	r2, 802e06a <__mdiff+0xda>
 802e060:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 802e064:	3e01      	subs	r6, #1
 802e066:	2b00      	cmp	r3, #0
 802e068:	d0fa      	beq.n	802e060 <__mdiff+0xd0>
 802e06a:	6106      	str	r6, [r0, #16]
 802e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e070:	2100      	movs	r1, #0
 802e072:	f7ff fd05 	bl	802da80 <_Balloc>
 802e076:	2201      	movs	r2, #1
 802e078:	2300      	movs	r3, #0
 802e07a:	6102      	str	r2, [r0, #16]
 802e07c:	6143      	str	r3, [r0, #20]
 802e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e082:	4674      	mov	r4, lr
 802e084:	e7ab      	b.n	802dfde <__mdiff+0x4e>
 802e086:	4633      	mov	r3, r6
 802e088:	f106 0414 	add.w	r4, r6, #20
 802e08c:	f102 0514 	add.w	r5, r2, #20
 802e090:	4616      	mov	r6, r2
 802e092:	2701      	movs	r7, #1
 802e094:	4698      	mov	r8, r3
 802e096:	e7a2      	b.n	802dfde <__mdiff+0x4e>
	...

0802e0a0 <__ulp>:
 802e0a0:	4b13      	ldr	r3, [pc, #76]	; (802e0f0 <__ulp+0x50>)
 802e0a2:	ee10 2a90 	vmov	r2, s1
 802e0a6:	401a      	ands	r2, r3
 802e0a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 802e0ac:	2b00      	cmp	r3, #0
 802e0ae:	dd04      	ble.n	802e0ba <__ulp+0x1a>
 802e0b0:	2000      	movs	r0, #0
 802e0b2:	4619      	mov	r1, r3
 802e0b4:	ec41 0b10 	vmov	d0, r0, r1
 802e0b8:	4770      	bx	lr
 802e0ba:	425b      	negs	r3, r3
 802e0bc:	151b      	asrs	r3, r3, #20
 802e0be:	2b13      	cmp	r3, #19
 802e0c0:	dd0d      	ble.n	802e0de <__ulp+0x3e>
 802e0c2:	3b14      	subs	r3, #20
 802e0c4:	2b1e      	cmp	r3, #30
 802e0c6:	bfdd      	ittte	le
 802e0c8:	f1c3 031f 	rsble	r3, r3, #31
 802e0cc:	2201      	movle	r2, #1
 802e0ce:	fa02 f303 	lslle.w	r3, r2, r3
 802e0d2:	2301      	movgt	r3, #1
 802e0d4:	2100      	movs	r1, #0
 802e0d6:	4618      	mov	r0, r3
 802e0d8:	ec41 0b10 	vmov	d0, r0, r1
 802e0dc:	4770      	bx	lr
 802e0de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802e0e2:	2000      	movs	r0, #0
 802e0e4:	fa42 f103 	asr.w	r1, r2, r3
 802e0e8:	ec41 0b10 	vmov	d0, r0, r1
 802e0ec:	4770      	bx	lr
 802e0ee:	bf00      	nop
 802e0f0:	7ff00000 	.word	0x7ff00000
	...

0802e100 <__b2d>:
 802e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e102:	6904      	ldr	r4, [r0, #16]
 802e104:	f100 0614 	add.w	r6, r0, #20
 802e108:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 802e10c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802e110:	4628      	mov	r0, r5
 802e112:	f7ff fd7d 	bl	802dc10 <__hi0bits>
 802e116:	f1c0 0320 	rsb	r3, r0, #32
 802e11a:	280a      	cmp	r0, #10
 802e11c:	600b      	str	r3, [r1, #0]
 802e11e:	f1a4 0104 	sub.w	r1, r4, #4
 802e122:	dc17      	bgt.n	802e154 <__b2d+0x54>
 802e124:	428e      	cmp	r6, r1
 802e126:	f1c0 070b 	rsb	r7, r0, #11
 802e12a:	bf38      	it	cc
 802e12c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 802e130:	fa25 fe07 	lsr.w	lr, r5, r7
 802e134:	f100 0015 	add.w	r0, r0, #21
 802e138:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
 802e13c:	bf34      	ite	cc
 802e13e:	40f9      	lsrcc	r1, r7
 802e140:	2100      	movcs	r1, #0
 802e142:	fa05 f000 	lsl.w	r0, r5, r0
 802e146:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802e14a:	ea40 0201 	orr.w	r2, r0, r1
 802e14e:	ec43 2b10 	vmov	d0, r2, r3
 802e152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e154:	428e      	cmp	r6, r1
 802e156:	d21d      	bcs.n	802e194 <__b2d+0x94>
 802e158:	380b      	subs	r0, #11
 802e15a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 802e15e:	d01c      	beq.n	802e19a <__b2d+0x9a>
 802e160:	4085      	lsls	r5, r0
 802e162:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 802e166:	f1c0 0c20 	rsb	ip, r0, #32
 802e16a:	f1a4 0e08 	sub.w	lr, r4, #8
 802e16e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802e172:	fa27 f10c 	lsr.w	r1, r7, ip
 802e176:	4576      	cmp	r6, lr
 802e178:	ea45 0301 	orr.w	r3, r5, r1
 802e17c:	d21e      	bcs.n	802e1bc <__b2d+0xbc>
 802e17e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 802e182:	fa07 f000 	lsl.w	r0, r7, r0
 802e186:	fa21 f10c 	lsr.w	r1, r1, ip
 802e18a:	4308      	orrs	r0, r1
 802e18c:	4602      	mov	r2, r0
 802e18e:	ec43 2b10 	vmov	d0, r2, r3
 802e192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e194:	380b      	subs	r0, #11
 802e196:	d108      	bne.n	802e1aa <__b2d+0xaa>
 802e198:	4607      	mov	r7, r0
 802e19a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802e19e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802e1a2:	463a      	mov	r2, r7
 802e1a4:	ec43 2b10 	vmov	d0, r2, r3
 802e1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e1aa:	fa05 f000 	lsl.w	r0, r5, r0
 802e1ae:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 802e1b2:	2000      	movs	r0, #0
 802e1b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802e1b8:	4602      	mov	r2, r0
 802e1ba:	e7e8      	b.n	802e18e <__b2d+0x8e>
 802e1bc:	fa07 f000 	lsl.w	r0, r7, r0
 802e1c0:	4602      	mov	r2, r0
 802e1c2:	e7e4      	b.n	802e18e <__b2d+0x8e>
	...

0802e1d0 <__d2b>:
 802e1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e1d4:	ec57 6b10 	vmov	r6, r7, d0
 802e1d8:	b083      	sub	sp, #12
 802e1da:	4688      	mov	r8, r1
 802e1dc:	2101      	movs	r1, #1
 802e1de:	463c      	mov	r4, r7
 802e1e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802e1e4:	4617      	mov	r7, r2
 802e1e6:	f7ff fc4b 	bl	802da80 <_Balloc>
 802e1ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802e1ee:	4681      	mov	r9, r0
 802e1f0:	b10d      	cbz	r5, 802e1f6 <__d2b+0x26>
 802e1f2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 802e1f6:	9401      	str	r4, [sp, #4]
 802e1f8:	b31e      	cbz	r6, 802e242 <__d2b+0x72>
 802e1fa:	a802      	add	r0, sp, #8
 802e1fc:	f840 6d08 	str.w	r6, [r0, #-8]!
 802e200:	f7ff fd26 	bl	802dc50 <__lo0bits>
 802e204:	2800      	cmp	r0, #0
 802e206:	d134      	bne.n	802e272 <__d2b+0xa2>
 802e208:	e89d 000c 	ldmia.w	sp, {r2, r3}
 802e20c:	f8c9 2014 	str.w	r2, [r9, #20]
 802e210:	2b00      	cmp	r3, #0
 802e212:	bf0c      	ite	eq
 802e214:	2101      	moveq	r1, #1
 802e216:	2102      	movne	r1, #2
 802e218:	f8c9 3018 	str.w	r3, [r9, #24]
 802e21c:	f8c9 1010 	str.w	r1, [r9, #16]
 802e220:	b9dd      	cbnz	r5, 802e25a <__d2b+0x8a>
 802e222:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 802e226:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802e22a:	f8c8 0000 	str.w	r0, [r8]
 802e22e:	6918      	ldr	r0, [r3, #16]
 802e230:	f7ff fcee 	bl	802dc10 <__hi0bits>
 802e234:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802e238:	6038      	str	r0, [r7, #0]
 802e23a:	4648      	mov	r0, r9
 802e23c:	b003      	add	sp, #12
 802e23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e242:	a801      	add	r0, sp, #4
 802e244:	f7ff fd04 	bl	802dc50 <__lo0bits>
 802e248:	9b01      	ldr	r3, [sp, #4]
 802e24a:	f8c9 3014 	str.w	r3, [r9, #20]
 802e24e:	2101      	movs	r1, #1
 802e250:	3020      	adds	r0, #32
 802e252:	f8c9 1010 	str.w	r1, [r9, #16]
 802e256:	2d00      	cmp	r5, #0
 802e258:	d0e3      	beq.n	802e222 <__d2b+0x52>
 802e25a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802e25e:	4405      	add	r5, r0
 802e260:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802e264:	f8c8 5000 	str.w	r5, [r8]
 802e268:	6038      	str	r0, [r7, #0]
 802e26a:	4648      	mov	r0, r9
 802e26c:	b003      	add	sp, #12
 802e26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e272:	e89d 000a 	ldmia.w	sp, {r1, r3}
 802e276:	f1c0 0220 	rsb	r2, r0, #32
 802e27a:	fa03 f202 	lsl.w	r2, r3, r2
 802e27e:	430a      	orrs	r2, r1
 802e280:	40c3      	lsrs	r3, r0
 802e282:	9301      	str	r3, [sp, #4]
 802e284:	f8c9 2014 	str.w	r2, [r9, #20]
 802e288:	e7c2      	b.n	802e210 <__d2b+0x40>
 802e28a:	bf00      	nop
 802e28c:	0000      	movs	r0, r0
	...

0802e290 <__ratio>:
 802e290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e294:	b083      	sub	sp, #12
 802e296:	4688      	mov	r8, r1
 802e298:	4669      	mov	r1, sp
 802e29a:	4681      	mov	r9, r0
 802e29c:	f7ff ff30 	bl	802e100 <__b2d>
 802e2a0:	4640      	mov	r0, r8
 802e2a2:	a901      	add	r1, sp, #4
 802e2a4:	ec55 4b10 	vmov	r4, r5, d0
 802e2a8:	f7ff ff2a 	bl	802e100 <__b2d>
 802e2ac:	e89d 000a 	ldmia.w	sp, {r1, r3}
 802e2b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 802e2b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802e2b8:	1acb      	subs	r3, r1, r3
 802e2ba:	1a80      	subs	r0, r0, r2
 802e2bc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 802e2c0:	2b00      	cmp	r3, #0
 802e2c2:	ec57 6b10 	vmov	r6, r7, d0
 802e2c6:	dd0d      	ble.n	802e2e4 <__ratio+0x54>
 802e2c8:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 802e2cc:	464d      	mov	r5, r9
 802e2ce:	4632      	mov	r2, r6
 802e2d0:	463b      	mov	r3, r7
 802e2d2:	4620      	mov	r0, r4
 802e2d4:	4629      	mov	r1, r5
 802e2d6:	f7de fa15 	bl	800c704 <__aeabi_ddiv>
 802e2da:	ec41 0b10 	vmov	d0, r0, r1
 802e2de:	b003      	add	sp, #12
 802e2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e2e4:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 802e2e8:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 802e2ec:	460f      	mov	r7, r1
 802e2ee:	e7ee      	b.n	802e2ce <__ratio+0x3e>

0802e2f0 <__copybits>:
 802e2f0:	b470      	push	{r4, r5, r6}
 802e2f2:	6914      	ldr	r4, [r2, #16]
 802e2f4:	1e4e      	subs	r6, r1, #1
 802e2f6:	f102 0314 	add.w	r3, r2, #20
 802e2fa:	1176      	asrs	r6, r6, #5
 802e2fc:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 802e300:	3601      	adds	r6, #1
 802e302:	428b      	cmp	r3, r1
 802e304:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 802e308:	d20c      	bcs.n	802e324 <__copybits+0x34>
 802e30a:	1f04      	subs	r4, r0, #4
 802e30c:	f853 5b04 	ldr.w	r5, [r3], #4
 802e310:	f844 5f04 	str.w	r5, [r4, #4]!
 802e314:	4299      	cmp	r1, r3
 802e316:	d8f9      	bhi.n	802e30c <__copybits+0x1c>
 802e318:	1a8b      	subs	r3, r1, r2
 802e31a:	3b15      	subs	r3, #21
 802e31c:	f023 0303 	bic.w	r3, r3, #3
 802e320:	3304      	adds	r3, #4
 802e322:	4418      	add	r0, r3
 802e324:	4286      	cmp	r6, r0
 802e326:	d904      	bls.n	802e332 <__copybits+0x42>
 802e328:	2300      	movs	r3, #0
 802e32a:	f840 3b04 	str.w	r3, [r0], #4
 802e32e:	4286      	cmp	r6, r0
 802e330:	d8fb      	bhi.n	802e32a <__copybits+0x3a>
 802e332:	bc70      	pop	{r4, r5, r6}
 802e334:	4770      	bx	lr
 802e336:	bf00      	nop
	...

0802e340 <__any_on>:
 802e340:	6903      	ldr	r3, [r0, #16]
 802e342:	114a      	asrs	r2, r1, #5
 802e344:	4293      	cmp	r3, r2
 802e346:	b410      	push	{r4}
 802e348:	f100 0414 	add.w	r4, r0, #20
 802e34c:	da10      	bge.n	802e370 <__any_on+0x30>
 802e34e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e352:	429c      	cmp	r4, r3
 802e354:	d221      	bcs.n	802e39a <__any_on+0x5a>
 802e356:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802e35a:	3b04      	subs	r3, #4
 802e35c:	b118      	cbz	r0, 802e366 <__any_on+0x26>
 802e35e:	e015      	b.n	802e38c <__any_on+0x4c>
 802e360:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802e364:	b992      	cbnz	r2, 802e38c <__any_on+0x4c>
 802e366:	429c      	cmp	r4, r3
 802e368:	d3fa      	bcc.n	802e360 <__any_on+0x20>
 802e36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e36e:	4770      	bx	lr
 802e370:	dd10      	ble.n	802e394 <__any_on+0x54>
 802e372:	f011 011f 	ands.w	r1, r1, #31
 802e376:	d00d      	beq.n	802e394 <__any_on+0x54>
 802e378:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 802e37c:	fa20 f301 	lsr.w	r3, r0, r1
 802e380:	fa03 f101 	lsl.w	r1, r3, r1
 802e384:	4288      	cmp	r0, r1
 802e386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802e38a:	d0e2      	beq.n	802e352 <__any_on+0x12>
 802e38c:	2001      	movs	r0, #1
 802e38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e392:	4770      	bx	lr
 802e394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802e398:	e7db      	b.n	802e352 <__any_on+0x12>
 802e39a:	2000      	movs	r0, #0
 802e39c:	e7e5      	b.n	802e36a <__any_on+0x2a>
 802e39e:	bf00      	nop

0802e3a0 <_realloc_r>:
 802e3a0:	2900      	cmp	r1, #0
 802e3a2:	f000 8095 	beq.w	802e4d0 <_realloc_r+0x130>
 802e3a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e3aa:	460d      	mov	r5, r1
 802e3ac:	4616      	mov	r6, r2
 802e3ae:	b083      	sub	sp, #12
 802e3b0:	4680      	mov	r8, r0
 802e3b2:	f106 070b 	add.w	r7, r6, #11
 802e3b6:	f7ff fb53 	bl	802da60 <__malloc_lock>
 802e3ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
 802e3be:	2f16      	cmp	r7, #22
 802e3c0:	f02e 0403 	bic.w	r4, lr, #3
 802e3c4:	f1a5 0908 	sub.w	r9, r5, #8
 802e3c8:	d83c      	bhi.n	802e444 <_realloc_r+0xa4>
 802e3ca:	2210      	movs	r2, #16
 802e3cc:	4617      	mov	r7, r2
 802e3ce:	42be      	cmp	r6, r7
 802e3d0:	d83d      	bhi.n	802e44e <_realloc_r+0xae>
 802e3d2:	4294      	cmp	r4, r2
 802e3d4:	da43      	bge.n	802e45e <_realloc_r+0xbe>
 802e3d6:	4bc4      	ldr	r3, [pc, #784]	; (802e6e8 <_realloc_r+0x348>)
 802e3d8:	6899      	ldr	r1, [r3, #8]
 802e3da:	eb09 0004 	add.w	r0, r9, r4
 802e3de:	4288      	cmp	r0, r1
 802e3e0:	f000 80b4 	beq.w	802e54c <_realloc_r+0x1ac>
 802e3e4:	6843      	ldr	r3, [r0, #4]
 802e3e6:	f023 0101 	bic.w	r1, r3, #1
 802e3ea:	4401      	add	r1, r0
 802e3ec:	6849      	ldr	r1, [r1, #4]
 802e3ee:	07c9      	lsls	r1, r1, #31
 802e3f0:	d54c      	bpl.n	802e48c <_realloc_r+0xec>
 802e3f2:	f01e 0f01 	tst.w	lr, #1
 802e3f6:	f000 809b 	beq.w	802e530 <_realloc_r+0x190>
 802e3fa:	4631      	mov	r1, r6
 802e3fc:	4640      	mov	r0, r8
 802e3fe:	f7ff f87f 	bl	802d500 <_malloc_r>
 802e402:	4606      	mov	r6, r0
 802e404:	2800      	cmp	r0, #0
 802e406:	d03a      	beq.n	802e47e <_realloc_r+0xde>
 802e408:	f855 3c04 	ldr.w	r3, [r5, #-4]
 802e40c:	f023 0301 	bic.w	r3, r3, #1
 802e410:	444b      	add	r3, r9
 802e412:	f1a0 0208 	sub.w	r2, r0, #8
 802e416:	429a      	cmp	r2, r3
 802e418:	f000 8121 	beq.w	802e65e <_realloc_r+0x2be>
 802e41c:	1f22      	subs	r2, r4, #4
 802e41e:	2a24      	cmp	r2, #36	; 0x24
 802e420:	f200 8107 	bhi.w	802e632 <_realloc_r+0x292>
 802e424:	2a13      	cmp	r2, #19
 802e426:	f200 80db 	bhi.w	802e5e0 <_realloc_r+0x240>
 802e42a:	4603      	mov	r3, r0
 802e42c:	462a      	mov	r2, r5
 802e42e:	6811      	ldr	r1, [r2, #0]
 802e430:	6019      	str	r1, [r3, #0]
 802e432:	6851      	ldr	r1, [r2, #4]
 802e434:	6059      	str	r1, [r3, #4]
 802e436:	6892      	ldr	r2, [r2, #8]
 802e438:	609a      	str	r2, [r3, #8]
 802e43a:	4629      	mov	r1, r5
 802e43c:	4640      	mov	r0, r8
 802e43e:	f7fe fba7 	bl	802cb90 <_free_r>
 802e442:	e01c      	b.n	802e47e <_realloc_r+0xde>
 802e444:	f027 0707 	bic.w	r7, r7, #7
 802e448:	2f00      	cmp	r7, #0
 802e44a:	463a      	mov	r2, r7
 802e44c:	dabf      	bge.n	802e3ce <_realloc_r+0x2e>
 802e44e:	2600      	movs	r6, #0
 802e450:	230c      	movs	r3, #12
 802e452:	4630      	mov	r0, r6
 802e454:	f8c8 3000 	str.w	r3, [r8]
 802e458:	b003      	add	sp, #12
 802e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e45e:	462e      	mov	r6, r5
 802e460:	1be3      	subs	r3, r4, r7
 802e462:	2b0f      	cmp	r3, #15
 802e464:	d81e      	bhi.n	802e4a4 <_realloc_r+0x104>
 802e466:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802e46a:	f003 0301 	and.w	r3, r3, #1
 802e46e:	4323      	orrs	r3, r4
 802e470:	444c      	add	r4, r9
 802e472:	f8c9 3004 	str.w	r3, [r9, #4]
 802e476:	6863      	ldr	r3, [r4, #4]
 802e478:	f043 0301 	orr.w	r3, r3, #1
 802e47c:	6063      	str	r3, [r4, #4]
 802e47e:	4640      	mov	r0, r8
 802e480:	f7ff faf6 	bl	802da70 <__malloc_unlock>
 802e484:	4630      	mov	r0, r6
 802e486:	b003      	add	sp, #12
 802e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e48c:	f023 0303 	bic.w	r3, r3, #3
 802e490:	18e1      	adds	r1, r4, r3
 802e492:	4291      	cmp	r1, r2
 802e494:	db1f      	blt.n	802e4d6 <_realloc_r+0x136>
 802e496:	68c3      	ldr	r3, [r0, #12]
 802e498:	6882      	ldr	r2, [r0, #8]
 802e49a:	462e      	mov	r6, r5
 802e49c:	60d3      	str	r3, [r2, #12]
 802e49e:	460c      	mov	r4, r1
 802e4a0:	609a      	str	r2, [r3, #8]
 802e4a2:	e7dd      	b.n	802e460 <_realloc_r+0xc0>
 802e4a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 802e4a8:	eb09 0107 	add.w	r1, r9, r7
 802e4ac:	f002 0201 	and.w	r2, r2, #1
 802e4b0:	444c      	add	r4, r9
 802e4b2:	f043 0301 	orr.w	r3, r3, #1
 802e4b6:	4317      	orrs	r7, r2
 802e4b8:	f8c9 7004 	str.w	r7, [r9, #4]
 802e4bc:	604b      	str	r3, [r1, #4]
 802e4be:	6863      	ldr	r3, [r4, #4]
 802e4c0:	f043 0301 	orr.w	r3, r3, #1
 802e4c4:	3108      	adds	r1, #8
 802e4c6:	6063      	str	r3, [r4, #4]
 802e4c8:	4640      	mov	r0, r8
 802e4ca:	f7fe fb61 	bl	802cb90 <_free_r>
 802e4ce:	e7d6      	b.n	802e47e <_realloc_r+0xde>
 802e4d0:	4611      	mov	r1, r2
 802e4d2:	f7ff b815 	b.w	802d500 <_malloc_r>
 802e4d6:	f01e 0f01 	tst.w	lr, #1
 802e4da:	d18e      	bne.n	802e3fa <_realloc_r+0x5a>
 802e4dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
 802e4e0:	eba9 0a01 	sub.w	sl, r9, r1
 802e4e4:	f8da 1004 	ldr.w	r1, [sl, #4]
 802e4e8:	f021 0103 	bic.w	r1, r1, #3
 802e4ec:	440b      	add	r3, r1
 802e4ee:	4423      	add	r3, r4
 802e4f0:	4293      	cmp	r3, r2
 802e4f2:	db25      	blt.n	802e540 <_realloc_r+0x1a0>
 802e4f4:	68c2      	ldr	r2, [r0, #12]
 802e4f6:	6881      	ldr	r1, [r0, #8]
 802e4f8:	4656      	mov	r6, sl
 802e4fa:	60ca      	str	r2, [r1, #12]
 802e4fc:	6091      	str	r1, [r2, #8]
 802e4fe:	f8da 100c 	ldr.w	r1, [sl, #12]
 802e502:	f856 0f08 	ldr.w	r0, [r6, #8]!
 802e506:	1f22      	subs	r2, r4, #4
 802e508:	2a24      	cmp	r2, #36	; 0x24
 802e50a:	60c1      	str	r1, [r0, #12]
 802e50c:	6088      	str	r0, [r1, #8]
 802e50e:	f200 8094 	bhi.w	802e63a <_realloc_r+0x29a>
 802e512:	2a13      	cmp	r2, #19
 802e514:	d96f      	bls.n	802e5f6 <_realloc_r+0x256>
 802e516:	6829      	ldr	r1, [r5, #0]
 802e518:	f8ca 1008 	str.w	r1, [sl, #8]
 802e51c:	6869      	ldr	r1, [r5, #4]
 802e51e:	f8ca 100c 	str.w	r1, [sl, #12]
 802e522:	2a1b      	cmp	r2, #27
 802e524:	f200 80a2 	bhi.w	802e66c <_realloc_r+0x2cc>
 802e528:	3508      	adds	r5, #8
 802e52a:	f10a 0210 	add.w	r2, sl, #16
 802e52e:	e063      	b.n	802e5f8 <_realloc_r+0x258>
 802e530:	f855 3c08 	ldr.w	r3, [r5, #-8]
 802e534:	eba9 0a03 	sub.w	sl, r9, r3
 802e538:	f8da 1004 	ldr.w	r1, [sl, #4]
 802e53c:	f021 0103 	bic.w	r1, r1, #3
 802e540:	1863      	adds	r3, r4, r1
 802e542:	4293      	cmp	r3, r2
 802e544:	f6ff af59 	blt.w	802e3fa <_realloc_r+0x5a>
 802e548:	4656      	mov	r6, sl
 802e54a:	e7d8      	b.n	802e4fe <_realloc_r+0x15e>
 802e54c:	6841      	ldr	r1, [r0, #4]
 802e54e:	f021 0b03 	bic.w	fp, r1, #3
 802e552:	44a3      	add	fp, r4
 802e554:	f107 0010 	add.w	r0, r7, #16
 802e558:	4583      	cmp	fp, r0
 802e55a:	da56      	bge.n	802e60a <_realloc_r+0x26a>
 802e55c:	f01e 0f01 	tst.w	lr, #1
 802e560:	f47f af4b 	bne.w	802e3fa <_realloc_r+0x5a>
 802e564:	f855 1c08 	ldr.w	r1, [r5, #-8]
 802e568:	eba9 0a01 	sub.w	sl, r9, r1
 802e56c:	f8da 1004 	ldr.w	r1, [sl, #4]
 802e570:	f021 0103 	bic.w	r1, r1, #3
 802e574:	448b      	add	fp, r1
 802e576:	4558      	cmp	r0, fp
 802e578:	dce2      	bgt.n	802e540 <_realloc_r+0x1a0>
 802e57a:	4656      	mov	r6, sl
 802e57c:	f8da 100c 	ldr.w	r1, [sl, #12]
 802e580:	f856 0f08 	ldr.w	r0, [r6, #8]!
 802e584:	1f22      	subs	r2, r4, #4
 802e586:	2a24      	cmp	r2, #36	; 0x24
 802e588:	60c1      	str	r1, [r0, #12]
 802e58a:	6088      	str	r0, [r1, #8]
 802e58c:	f200 808f 	bhi.w	802e6ae <_realloc_r+0x30e>
 802e590:	2a13      	cmp	r2, #19
 802e592:	f240 808a 	bls.w	802e6aa <_realloc_r+0x30a>
 802e596:	6829      	ldr	r1, [r5, #0]
 802e598:	f8ca 1008 	str.w	r1, [sl, #8]
 802e59c:	6869      	ldr	r1, [r5, #4]
 802e59e:	f8ca 100c 	str.w	r1, [sl, #12]
 802e5a2:	2a1b      	cmp	r2, #27
 802e5a4:	f200 808a 	bhi.w	802e6bc <_realloc_r+0x31c>
 802e5a8:	3508      	adds	r5, #8
 802e5aa:	f10a 0210 	add.w	r2, sl, #16
 802e5ae:	6829      	ldr	r1, [r5, #0]
 802e5b0:	6011      	str	r1, [r2, #0]
 802e5b2:	6869      	ldr	r1, [r5, #4]
 802e5b4:	6051      	str	r1, [r2, #4]
 802e5b6:	68a9      	ldr	r1, [r5, #8]
 802e5b8:	6091      	str	r1, [r2, #8]
 802e5ba:	eb0a 0107 	add.w	r1, sl, r7
 802e5be:	ebab 0207 	sub.w	r2, fp, r7
 802e5c2:	f042 0201 	orr.w	r2, r2, #1
 802e5c6:	6099      	str	r1, [r3, #8]
 802e5c8:	604a      	str	r2, [r1, #4]
 802e5ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 802e5ce:	f003 0301 	and.w	r3, r3, #1
 802e5d2:	431f      	orrs	r7, r3
 802e5d4:	4640      	mov	r0, r8
 802e5d6:	f8ca 7004 	str.w	r7, [sl, #4]
 802e5da:	f7ff fa49 	bl	802da70 <__malloc_unlock>
 802e5de:	e751      	b.n	802e484 <_realloc_r+0xe4>
 802e5e0:	682b      	ldr	r3, [r5, #0]
 802e5e2:	6003      	str	r3, [r0, #0]
 802e5e4:	686b      	ldr	r3, [r5, #4]
 802e5e6:	6043      	str	r3, [r0, #4]
 802e5e8:	2a1b      	cmp	r2, #27
 802e5ea:	d82d      	bhi.n	802e648 <_realloc_r+0x2a8>
 802e5ec:	f100 0308 	add.w	r3, r0, #8
 802e5f0:	f105 0208 	add.w	r2, r5, #8
 802e5f4:	e71b      	b.n	802e42e <_realloc_r+0x8e>
 802e5f6:	4632      	mov	r2, r6
 802e5f8:	6829      	ldr	r1, [r5, #0]
 802e5fa:	6011      	str	r1, [r2, #0]
 802e5fc:	6869      	ldr	r1, [r5, #4]
 802e5fe:	6051      	str	r1, [r2, #4]
 802e600:	68a9      	ldr	r1, [r5, #8]
 802e602:	6091      	str	r1, [r2, #8]
 802e604:	461c      	mov	r4, r3
 802e606:	46d1      	mov	r9, sl
 802e608:	e72a      	b.n	802e460 <_realloc_r+0xc0>
 802e60a:	eb09 0107 	add.w	r1, r9, r7
 802e60e:	ebab 0b07 	sub.w	fp, fp, r7
 802e612:	f04b 0201 	orr.w	r2, fp, #1
 802e616:	6099      	str	r1, [r3, #8]
 802e618:	604a      	str	r2, [r1, #4]
 802e61a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 802e61e:	f003 0301 	and.w	r3, r3, #1
 802e622:	431f      	orrs	r7, r3
 802e624:	4640      	mov	r0, r8
 802e626:	f845 7c04 	str.w	r7, [r5, #-4]
 802e62a:	f7ff fa21 	bl	802da70 <__malloc_unlock>
 802e62e:	462e      	mov	r6, r5
 802e630:	e728      	b.n	802e484 <_realloc_r+0xe4>
 802e632:	4629      	mov	r1, r5
 802e634:	f000 f964 	bl	802e900 <memmove>
 802e638:	e6ff      	b.n	802e43a <_realloc_r+0x9a>
 802e63a:	4629      	mov	r1, r5
 802e63c:	4630      	mov	r0, r6
 802e63e:	461c      	mov	r4, r3
 802e640:	46d1      	mov	r9, sl
 802e642:	f000 f95d 	bl	802e900 <memmove>
 802e646:	e70b      	b.n	802e460 <_realloc_r+0xc0>
 802e648:	68ab      	ldr	r3, [r5, #8]
 802e64a:	6083      	str	r3, [r0, #8]
 802e64c:	68eb      	ldr	r3, [r5, #12]
 802e64e:	60c3      	str	r3, [r0, #12]
 802e650:	2a24      	cmp	r2, #36	; 0x24
 802e652:	d017      	beq.n	802e684 <_realloc_r+0x2e4>
 802e654:	f100 0310 	add.w	r3, r0, #16
 802e658:	f105 0210 	add.w	r2, r5, #16
 802e65c:	e6e7      	b.n	802e42e <_realloc_r+0x8e>
 802e65e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802e662:	f023 0303 	bic.w	r3, r3, #3
 802e666:	441c      	add	r4, r3
 802e668:	462e      	mov	r6, r5
 802e66a:	e6f9      	b.n	802e460 <_realloc_r+0xc0>
 802e66c:	68a9      	ldr	r1, [r5, #8]
 802e66e:	f8ca 1010 	str.w	r1, [sl, #16]
 802e672:	68e9      	ldr	r1, [r5, #12]
 802e674:	f8ca 1014 	str.w	r1, [sl, #20]
 802e678:	2a24      	cmp	r2, #36	; 0x24
 802e67a:	d00c      	beq.n	802e696 <_realloc_r+0x2f6>
 802e67c:	3510      	adds	r5, #16
 802e67e:	f10a 0218 	add.w	r2, sl, #24
 802e682:	e7b9      	b.n	802e5f8 <_realloc_r+0x258>
 802e684:	692b      	ldr	r3, [r5, #16]
 802e686:	6103      	str	r3, [r0, #16]
 802e688:	696b      	ldr	r3, [r5, #20]
 802e68a:	6143      	str	r3, [r0, #20]
 802e68c:	f105 0218 	add.w	r2, r5, #24
 802e690:	f100 0318 	add.w	r3, r0, #24
 802e694:	e6cb      	b.n	802e42e <_realloc_r+0x8e>
 802e696:	692a      	ldr	r2, [r5, #16]
 802e698:	f8ca 2018 	str.w	r2, [sl, #24]
 802e69c:	696a      	ldr	r2, [r5, #20]
 802e69e:	f8ca 201c 	str.w	r2, [sl, #28]
 802e6a2:	3518      	adds	r5, #24
 802e6a4:	f10a 0220 	add.w	r2, sl, #32
 802e6a8:	e7a6      	b.n	802e5f8 <_realloc_r+0x258>
 802e6aa:	4632      	mov	r2, r6
 802e6ac:	e77f      	b.n	802e5ae <_realloc_r+0x20e>
 802e6ae:	4629      	mov	r1, r5
 802e6b0:	4630      	mov	r0, r6
 802e6b2:	9301      	str	r3, [sp, #4]
 802e6b4:	f000 f924 	bl	802e900 <memmove>
 802e6b8:	9b01      	ldr	r3, [sp, #4]
 802e6ba:	e77e      	b.n	802e5ba <_realloc_r+0x21a>
 802e6bc:	68a9      	ldr	r1, [r5, #8]
 802e6be:	f8ca 1010 	str.w	r1, [sl, #16]
 802e6c2:	68e9      	ldr	r1, [r5, #12]
 802e6c4:	f8ca 1014 	str.w	r1, [sl, #20]
 802e6c8:	2a24      	cmp	r2, #36	; 0x24
 802e6ca:	d003      	beq.n	802e6d4 <_realloc_r+0x334>
 802e6cc:	3510      	adds	r5, #16
 802e6ce:	f10a 0218 	add.w	r2, sl, #24
 802e6d2:	e76c      	b.n	802e5ae <_realloc_r+0x20e>
 802e6d4:	692a      	ldr	r2, [r5, #16]
 802e6d6:	f8ca 2018 	str.w	r2, [sl, #24]
 802e6da:	696a      	ldr	r2, [r5, #20]
 802e6dc:	f8ca 201c 	str.w	r2, [sl, #28]
 802e6e0:	3518      	adds	r5, #24
 802e6e2:	f10a 0220 	add.w	r2, sl, #32
 802e6e6:	e762      	b.n	802e5ae <_realloc_r+0x20e>
 802e6e8:	2000162c 	.word	0x2000162c
 802e6ec:	00000000 	.word	0x00000000

0802e6f0 <strncmp>:
 802e6f0:	2a00      	cmp	r2, #0
 802e6f2:	d041      	beq.n	802e778 <strncmp+0x88>
 802e6f4:	ea40 0301 	orr.w	r3, r0, r1
 802e6f8:	f013 0303 	ands.w	r3, r3, #3
 802e6fc:	b4f0      	push	{r4, r5, r6, r7}
 802e6fe:	d125      	bne.n	802e74c <strncmp+0x5c>
 802e700:	2a03      	cmp	r2, #3
 802e702:	d923      	bls.n	802e74c <strncmp+0x5c>
 802e704:	6804      	ldr	r4, [r0, #0]
 802e706:	680d      	ldr	r5, [r1, #0]
 802e708:	42ac      	cmp	r4, r5
 802e70a:	d11f      	bne.n	802e74c <strncmp+0x5c>
 802e70c:	3a04      	subs	r2, #4
 802e70e:	d038      	beq.n	802e782 <strncmp+0x92>
 802e710:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 802e714:	ea25 0404 	bic.w	r4, r5, r4
 802e718:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 802e71c:	d12e      	bne.n	802e77c <strncmp+0x8c>
 802e71e:	3004      	adds	r0, #4
 802e720:	3104      	adds	r1, #4
 802e722:	e00f      	b.n	802e744 <strncmp+0x54>
 802e724:	f850 3b04 	ldr.w	r3, [r0], #4
 802e728:	680e      	ldr	r6, [r1, #0]
 802e72a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 802e72e:	42b3      	cmp	r3, r6
 802e730:	ea24 0403 	bic.w	r4, r4, r3
 802e734:	f101 0104 	add.w	r1, r1, #4
 802e738:	d126      	bne.n	802e788 <strncmp+0x98>
 802e73a:	3a04      	subs	r2, #4
 802e73c:	d021      	beq.n	802e782 <strncmp+0x92>
 802e73e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 802e742:	d11b      	bne.n	802e77c <strncmp+0x8c>
 802e744:	2a03      	cmp	r2, #3
 802e746:	4607      	mov	r7, r0
 802e748:	460d      	mov	r5, r1
 802e74a:	d8eb      	bhi.n	802e724 <strncmp+0x34>
 802e74c:	7805      	ldrb	r5, [r0, #0]
 802e74e:	780c      	ldrb	r4, [r1, #0]
 802e750:	42ac      	cmp	r4, r5
 802e752:	f102 33ff 	add.w	r3, r2, #4294967295
 802e756:	d11a      	bne.n	802e78e <strncmp+0x9e>
 802e758:	b183      	cbz	r3, 802e77c <strncmp+0x8c>
 802e75a:	b914      	cbnz	r4, 802e762 <strncmp+0x72>
 802e75c:	e00e      	b.n	802e77c <strncmp+0x8c>
 802e75e:	b16b      	cbz	r3, 802e77c <strncmp+0x8c>
 802e760:	b17a      	cbz	r2, 802e782 <strncmp+0x92>
 802e762:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 802e766:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802e76a:	42a2      	cmp	r2, r4
 802e76c:	f103 33ff 	add.w	r3, r3, #4294967295
 802e770:	d0f5      	beq.n	802e75e <strncmp+0x6e>
 802e772:	1b10      	subs	r0, r2, r4
 802e774:	bcf0      	pop	{r4, r5, r6, r7}
 802e776:	4770      	bx	lr
 802e778:	4610      	mov	r0, r2
 802e77a:	4770      	bx	lr
 802e77c:	2000      	movs	r0, #0
 802e77e:	bcf0      	pop	{r4, r5, r6, r7}
 802e780:	4770      	bx	lr
 802e782:	4610      	mov	r0, r2
 802e784:	bcf0      	pop	{r4, r5, r6, r7}
 802e786:	4770      	bx	lr
 802e788:	4629      	mov	r1, r5
 802e78a:	4638      	mov	r0, r7
 802e78c:	e7de      	b.n	802e74c <strncmp+0x5c>
 802e78e:	462a      	mov	r2, r5
 802e790:	e7ef      	b.n	802e772 <strncmp+0x82>
 802e792:	bf00      	nop
	...

0802e7a0 <__ssprint_r>:
 802e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e7a4:	6893      	ldr	r3, [r2, #8]
 802e7a6:	b083      	sub	sp, #12
 802e7a8:	4690      	mov	r8, r2
 802e7aa:	2b00      	cmp	r3, #0
 802e7ac:	d070      	beq.n	802e890 <__ssprint_r+0xf0>
 802e7ae:	4682      	mov	sl, r0
 802e7b0:	460c      	mov	r4, r1
 802e7b2:	6817      	ldr	r7, [r2, #0]
 802e7b4:	688d      	ldr	r5, [r1, #8]
 802e7b6:	6808      	ldr	r0, [r1, #0]
 802e7b8:	e042      	b.n	802e840 <__ssprint_r+0xa0>
 802e7ba:	89a3      	ldrh	r3, [r4, #12]
 802e7bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 802e7c0:	d02e      	beq.n	802e820 <__ssprint_r+0x80>
 802e7c2:	6965      	ldr	r5, [r4, #20]
 802e7c4:	6921      	ldr	r1, [r4, #16]
 802e7c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e7ca:	eba0 0b01 	sub.w	fp, r0, r1
 802e7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e7d2:	f10b 0001 	add.w	r0, fp, #1
 802e7d6:	106d      	asrs	r5, r5, #1
 802e7d8:	4430      	add	r0, r6
 802e7da:	42a8      	cmp	r0, r5
 802e7dc:	462a      	mov	r2, r5
 802e7de:	bf84      	itt	hi
 802e7e0:	4605      	movhi	r5, r0
 802e7e2:	462a      	movhi	r2, r5
 802e7e4:	055b      	lsls	r3, r3, #21
 802e7e6:	d538      	bpl.n	802e85a <__ssprint_r+0xba>
 802e7e8:	4611      	mov	r1, r2
 802e7ea:	4650      	mov	r0, sl
 802e7ec:	f7fe fe88 	bl	802d500 <_malloc_r>
 802e7f0:	2800      	cmp	r0, #0
 802e7f2:	d03c      	beq.n	802e86e <__ssprint_r+0xce>
 802e7f4:	465a      	mov	r2, fp
 802e7f6:	6921      	ldr	r1, [r4, #16]
 802e7f8:	9001      	str	r0, [sp, #4]
 802e7fa:	f7de f989 	bl	800cb10 <memcpy>
 802e7fe:	89a2      	ldrh	r2, [r4, #12]
 802e800:	9b01      	ldr	r3, [sp, #4]
 802e802:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802e806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e80a:	81a2      	strh	r2, [r4, #12]
 802e80c:	eba5 020b 	sub.w	r2, r5, fp
 802e810:	eb03 000b 	add.w	r0, r3, fp
 802e814:	6165      	str	r5, [r4, #20]
 802e816:	6123      	str	r3, [r4, #16]
 802e818:	6020      	str	r0, [r4, #0]
 802e81a:	60a2      	str	r2, [r4, #8]
 802e81c:	4635      	mov	r5, r6
 802e81e:	46b3      	mov	fp, r6
 802e820:	465a      	mov	r2, fp
 802e822:	4649      	mov	r1, r9
 802e824:	f000 f86c 	bl	802e900 <memmove>
 802e828:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802e82c:	68a2      	ldr	r2, [r4, #8]
 802e82e:	6820      	ldr	r0, [r4, #0]
 802e830:	1b55      	subs	r5, r2, r5
 802e832:	4458      	add	r0, fp
 802e834:	1b9e      	subs	r6, r3, r6
 802e836:	60a5      	str	r5, [r4, #8]
 802e838:	6020      	str	r0, [r4, #0]
 802e83a:	f8c8 6008 	str.w	r6, [r8, #8]
 802e83e:	b33e      	cbz	r6, 802e890 <__ssprint_r+0xf0>
 802e840:	687e      	ldr	r6, [r7, #4]
 802e842:	463b      	mov	r3, r7
 802e844:	3708      	adds	r7, #8
 802e846:	2e00      	cmp	r6, #0
 802e848:	d0fa      	beq.n	802e840 <__ssprint_r+0xa0>
 802e84a:	42ae      	cmp	r6, r5
 802e84c:	f8d3 9000 	ldr.w	r9, [r3]
 802e850:	46ab      	mov	fp, r5
 802e852:	d2b2      	bcs.n	802e7ba <__ssprint_r+0x1a>
 802e854:	4635      	mov	r5, r6
 802e856:	46b3      	mov	fp, r6
 802e858:	e7e2      	b.n	802e820 <__ssprint_r+0x80>
 802e85a:	4650      	mov	r0, sl
 802e85c:	f7ff fda0 	bl	802e3a0 <_realloc_r>
 802e860:	4603      	mov	r3, r0
 802e862:	2800      	cmp	r0, #0
 802e864:	d1d2      	bne.n	802e80c <__ssprint_r+0x6c>
 802e866:	6921      	ldr	r1, [r4, #16]
 802e868:	4650      	mov	r0, sl
 802e86a:	f7fe f991 	bl	802cb90 <_free_r>
 802e86e:	230c      	movs	r3, #12
 802e870:	f8ca 3000 	str.w	r3, [sl]
 802e874:	89a3      	ldrh	r3, [r4, #12]
 802e876:	2200      	movs	r2, #0
 802e878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e87c:	f04f 30ff 	mov.w	r0, #4294967295
 802e880:	81a3      	strh	r3, [r4, #12]
 802e882:	f8c8 2008 	str.w	r2, [r8, #8]
 802e886:	f8c8 2004 	str.w	r2, [r8, #4]
 802e88a:	b003      	add	sp, #12
 802e88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e890:	2000      	movs	r0, #0
 802e892:	f8c8 0004 	str.w	r0, [r8, #4]
 802e896:	b003      	add	sp, #12
 802e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e89c:	0000      	movs	r0, r0
	...

0802e8a0 <_calloc_r>:
 802e8a0:	b510      	push	{r4, lr}
 802e8a2:	fb02 f101 	mul.w	r1, r2, r1
 802e8a6:	f7fe fe2b 	bl	802d500 <_malloc_r>
 802e8aa:	4604      	mov	r4, r0
 802e8ac:	b1d8      	cbz	r0, 802e8e6 <_calloc_r+0x46>
 802e8ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802e8b2:	f022 0203 	bic.w	r2, r2, #3
 802e8b6:	3a04      	subs	r2, #4
 802e8b8:	2a24      	cmp	r2, #36	; 0x24
 802e8ba:	d818      	bhi.n	802e8ee <_calloc_r+0x4e>
 802e8bc:	2a13      	cmp	r2, #19
 802e8be:	d914      	bls.n	802e8ea <_calloc_r+0x4a>
 802e8c0:	2300      	movs	r3, #0
 802e8c2:	2a1b      	cmp	r2, #27
 802e8c4:	6003      	str	r3, [r0, #0]
 802e8c6:	6043      	str	r3, [r0, #4]
 802e8c8:	d916      	bls.n	802e8f8 <_calloc_r+0x58>
 802e8ca:	2a24      	cmp	r2, #36	; 0x24
 802e8cc:	6083      	str	r3, [r0, #8]
 802e8ce:	60c3      	str	r3, [r0, #12]
 802e8d0:	bf11      	iteee	ne
 802e8d2:	f100 0210 	addne.w	r2, r0, #16
 802e8d6:	6103      	streq	r3, [r0, #16]
 802e8d8:	6143      	streq	r3, [r0, #20]
 802e8da:	f100 0218 	addeq.w	r2, r0, #24
 802e8de:	2300      	movs	r3, #0
 802e8e0:	6013      	str	r3, [r2, #0]
 802e8e2:	6053      	str	r3, [r2, #4]
 802e8e4:	6093      	str	r3, [r2, #8]
 802e8e6:	4620      	mov	r0, r4
 802e8e8:	bd10      	pop	{r4, pc}
 802e8ea:	4602      	mov	r2, r0
 802e8ec:	e7f7      	b.n	802e8de <_calloc_r+0x3e>
 802e8ee:	2100      	movs	r1, #0
 802e8f0:	f7f9 f9c6 	bl	8027c80 <memset>
 802e8f4:	4620      	mov	r0, r4
 802e8f6:	bd10      	pop	{r4, pc}
 802e8f8:	f100 0208 	add.w	r2, r0, #8
 802e8fc:	e7ef      	b.n	802e8de <_calloc_r+0x3e>
 802e8fe:	bf00      	nop

0802e900 <memmove>:
 802e900:	4288      	cmp	r0, r1
 802e902:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e904:	d90d      	bls.n	802e922 <memmove+0x22>
 802e906:	188b      	adds	r3, r1, r2
 802e908:	4298      	cmp	r0, r3
 802e90a:	d20a      	bcs.n	802e922 <memmove+0x22>
 802e90c:	1884      	adds	r4, r0, r2
 802e90e:	2a00      	cmp	r2, #0
 802e910:	d051      	beq.n	802e9b6 <memmove+0xb6>
 802e912:	4622      	mov	r2, r4
 802e914:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e918:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e91c:	4299      	cmp	r1, r3
 802e91e:	d1f9      	bne.n	802e914 <memmove+0x14>
 802e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e922:	2a0f      	cmp	r2, #15
 802e924:	d948      	bls.n	802e9b8 <memmove+0xb8>
 802e926:	ea41 0300 	orr.w	r3, r1, r0
 802e92a:	079b      	lsls	r3, r3, #30
 802e92c:	d146      	bne.n	802e9bc <memmove+0xbc>
 802e92e:	f100 0410 	add.w	r4, r0, #16
 802e932:	f101 0310 	add.w	r3, r1, #16
 802e936:	4615      	mov	r5, r2
 802e938:	f853 6c10 	ldr.w	r6, [r3, #-16]
 802e93c:	f844 6c10 	str.w	r6, [r4, #-16]
 802e940:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 802e944:	f844 6c0c 	str.w	r6, [r4, #-12]
 802e948:	f853 6c08 	ldr.w	r6, [r3, #-8]
 802e94c:	f844 6c08 	str.w	r6, [r4, #-8]
 802e950:	3d10      	subs	r5, #16
 802e952:	f853 6c04 	ldr.w	r6, [r3, #-4]
 802e956:	f844 6c04 	str.w	r6, [r4, #-4]
 802e95a:	2d0f      	cmp	r5, #15
 802e95c:	f103 0310 	add.w	r3, r3, #16
 802e960:	f104 0410 	add.w	r4, r4, #16
 802e964:	d8e8      	bhi.n	802e938 <memmove+0x38>
 802e966:	f1a2 0310 	sub.w	r3, r2, #16
 802e96a:	f023 030f 	bic.w	r3, r3, #15
 802e96e:	f002 0e0f 	and.w	lr, r2, #15
 802e972:	3310      	adds	r3, #16
 802e974:	f1be 0f03 	cmp.w	lr, #3
 802e978:	4419      	add	r1, r3
 802e97a:	4403      	add	r3, r0
 802e97c:	d921      	bls.n	802e9c2 <memmove+0xc2>
 802e97e:	1f1e      	subs	r6, r3, #4
 802e980:	460d      	mov	r5, r1
 802e982:	4674      	mov	r4, lr
 802e984:	3c04      	subs	r4, #4
 802e986:	f855 7b04 	ldr.w	r7, [r5], #4
 802e98a:	f846 7f04 	str.w	r7, [r6, #4]!
 802e98e:	2c03      	cmp	r4, #3
 802e990:	d8f8      	bhi.n	802e984 <memmove+0x84>
 802e992:	f1ae 0404 	sub.w	r4, lr, #4
 802e996:	f024 0403 	bic.w	r4, r4, #3
 802e99a:	3404      	adds	r4, #4
 802e99c:	4421      	add	r1, r4
 802e99e:	4423      	add	r3, r4
 802e9a0:	f002 0203 	and.w	r2, r2, #3
 802e9a4:	b162      	cbz	r2, 802e9c0 <memmove+0xc0>
 802e9a6:	3b01      	subs	r3, #1
 802e9a8:	440a      	add	r2, r1
 802e9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e9ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e9b2:	428a      	cmp	r2, r1
 802e9b4:	d1f9      	bne.n	802e9aa <memmove+0xaa>
 802e9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e9b8:	4603      	mov	r3, r0
 802e9ba:	e7f3      	b.n	802e9a4 <memmove+0xa4>
 802e9bc:	4603      	mov	r3, r0
 802e9be:	e7f2      	b.n	802e9a6 <memmove+0xa6>
 802e9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e9c2:	4672      	mov	r2, lr
 802e9c4:	e7ee      	b.n	802e9a4 <memmove+0xa4>
 802e9c6:	bf00      	nop
	...
 802e9d0:	ffffffff 	.word	0xffffffff
 802e9d4:	00000001 	.word	0x00000001
 802e9d8:	00000006 	.word	0x00000006
 802e9dc:	00000005 	.word	0x00000005
 802e9e0:	00000004 	.word	0x00000004
 802e9e4:	00000003 	.word	0x00000003
 802e9e8:	00000002 	.word	0x00000002
 802e9ec:	00000000 	.word	0x00000000
 802e9f0:	00f34112 	.word	0x00f34112
	...
 802ea00:	656c6469 	.word	0x656c6469
	...

0802ea10 <ch_debug>:
 802ea10:	6e69616d 18011600 08480404 1814100c     main......H.....
 802ea20:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

0802ea30 <vmt>:
 802ea30:	0800e7a1 0800e781 0800e7e1 0800e7c1     ................
 802ea40:	0800e7d1 0800e7b1 0800e791 0800e771     ............q...

0802ea50 <active_status>:
	...

0802ea60 <halted_status>:
 802ea60:	00000001 00000000 00000000 00000000     ................

0802ea70 <zero_status>:
	...

0802ea80 <_stm32_dma_streams>:
 802ea80:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 802ea90:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 802eaa0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 802eab0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 802eac0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 802ead0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 802eae0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 802eaf0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 802eb00:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 802eb10:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 802eb20:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 802eb30:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.
 802eb40:	20414d44 6c696166 00657275 00000000     DMA failure.....

0802eb50 <ep0config>:
 802eb50:	00000000 0800ec31 0800ef71 0800f061     ....1...q...a...
 802eb60:	00400040 20002030 20002030 00000001     @.@.0 . 0 . ....
 802eb70:	20002044 00000000 00000000 00000000     D . ............

0802eb80 <fsparams>:
 802eb80:	00000080 00000140 00000003 00000000     ....@...........
 802eb90:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

0802eba0 <pal_default_config>:
 802eba0:	28000000 00000000 ffffffff 00000000     ...(............
 802ebb0:	0000ffff 55560000 000aaa00 00000000     ......VU........
 802ebc0:	00000240 ffffffff 00000000 0000ffff     @...............
 802ebd0:	04000000 00000040 00000000 00000000     ....@...........
 802ebe0:	ffffffff 00000000 0000ffff 60000000     ...............`
 802ebf0:	00060600 00000000 00000000 ffffffff     ................
 802ec00:	00000000 0000ffff 00000000 00000000     ................
	...
 802ec18:	ffffffff 00000000 0000ffff 00000000     ................
	...
 802ec34:	ffffffff 00000000 0000ffff 00000000     ................
	...
 802ec50:	ffffffff 00000000 0000ffff 00000000     ................
	...
 802ec6c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 802ec88:	ffffffff 00000000 0000ffff 00000000     ................
	...
 802eca0:	6e69614d 72657020 69646f69 00000063     Main periodic...
 802ecb0:	6365736d 6d69745f 00007265 00000000     msec_timer......

0802ecc0 <ep1config>:
 802ecc0:	00000002 00000000 0800e921 0800e991     ........!.......
 802ecd0:	00400040 20002ad8 20002aec 00000002     @.@..*. .*. ....
	...

0802ecf0 <ep2config>:
 802ecf0:	00000003 00000000 0800ea01 00000000     ................
 802ed00:	00000010 20002b00 00000000 00000001     .....+. ........
	...

0802ed20 <serusbcfg>:
 802ed20:	20001db0 00020101 00000000 00000000     ... ............

0802ed30 <usbcfg>:
 802ed30:	080119c1 08011991 0800e8e1 00000000     ................

0802ed40 <vcom_configuration_descriptor>:
 802ed40:	00000043 0802ed50 00000000 00000000     C...P...........

0802ed50 <vcom_configuration_descriptor_data>:
 802ed50:	00430209 c0000102 00040932 02020100     ..C.....2.......
 802ed60:	24050001 05011000 01000124 02022404     ...$....$....$..
 802ed70:	00062405 82050701 ff000803 00010409     .$..............
 802ed80:	00000a02 01050700 00004002 02810507     .........@......
 802ed90:	00000040 00000000 00000000 00000000     @...............

0802eda0 <vcom_device_descriptor>:
 802eda0:	00000012 0802edb0 00000000 00000000     ................

0802edb0 <vcom_device_descriptor_data>:
 802edb0:	01100112 40000002 57400483 02010200     .......@..@W....
 802edc0:	00000103 00000000 00000000 00000000     ................

0802edd0 <vcom_string0>:
 802edd0:	04090304 00000000 00000000 00000000     ................

0802ede0 <vcom_string1>:
 802ede0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 802edf0:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 802ee00:	00630069 00000073 00000000 00000000     i.c.s...........

0802ee10 <vcom_string2>:
 802ee10:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 802ee20:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 802ee30:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 802ee40:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0802ee50 <vcom_string3>:
 802ee50:	00330308 00310030 00000000 00000000     ..3.0.1.........

0802ee60 <vcom_strings>:
 802ee60:	00000004 0802edd0 00000026 0802ede0     ........&.......
 802ee70:	00000038 0802ee10 00000008 0802ee50     8...........P...
 802ee80:	2d425355 69726553 70206c61 65636f72     USB-Serial proce
 802ee90:	00007373 00000000 00000000 00000000     ss..............
 802eea0:	2d425355 69726553 72206c61 00646165     USB-Serial read.

0802eeb0 <crc16_tab>:
 802eeb0:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
 802eec0:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
 802eed0:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
 802eee0:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
 802eef0:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
 802ef00:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
 802ef10:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
 802ef20:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
 802ef30:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
 802ef40:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
 802ef50:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
 802ef60:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
 802ef70:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
 802ef80:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
 802ef90:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
 802efa0:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
 802efb0:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
 802efc0:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
 802efd0:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
 802efe0:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
 802eff0:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
 802f000:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
 802f010:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
 802f020:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
 802f030:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
 802f040:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
 802f050:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
 802f060:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
 802f070:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
 802f080:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
 802f090:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
 802f0a0:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
 802f0b0:	206d7072 656d6974 00000072 00000000     rpm timer.......
 802f0c0:	7770636d 6974206d 0072656d 00000000     mcpwm timer.....

0802f0d0 <states.12627>:
 802f0d0:	0802f110 08030458 0802f118 0802f120     ....X....... ...
 802f0e0:	0802f12c 0802f134 0802f13c 0802f144     ,...4...<...D...
 802f0f0:	0802f14c 0802f158 0802f160 0802f168     L...X...`...h...
 802f100:	0802f174 0802f17c 0802f184 0802f18c     t...|...........
 802f110:	44414552 00000059 54535457 00545241     READY...WTSTART.
 802f120:	50535553 45444e45 00000044 55455551     SUSPENDED...QUEU
 802f130:	00004445 45535457 0000004d 544d5457     ED..WTSEM...WTMT
 802f140:	00000058 4f435457 0000444e 45454c53     X...WTCOND..SLEE
 802f150:	474e4950 00000000 58455457 00005449     PING....WTEXIT..
 802f160:	524f5457 00545645 4e415457 54564544     WTOREVT.WTANDEVT
 802f170:	00000000 4d444e53 00514753 4d444e53     ....SNDMSGQ.SNDM
 802f180:	00004753 534d5457 00000047 414e4946     SG..WTMSG...FINA
 802f190:	0000004c 00000000 00000000 00000000     L...............
 802f1a0:	65757274 00000000 736c6166 00000065     true....false...
 802f1b0:	00736559 00006f4e 63206f4e 616d6d6f     Yes.No..No comma
 802f1c0:	7220646e 69656365 0a646576 00000000     nd received.....
 802f1d0:	676e6970 00000000 676e6f70 0000000a     ping....pong....
 802f1e0:	706f7473 00000000 6f746f4d 74732072     stop....Motor st
 802f1f0:	6570706f 00000a64 7473616c 6364615f     opped...last_adc
 802f200:	7275645f 6f697461 0000006e 6574614c     _duration...Late
 802f210:	41207473 64204344 74617275 3a6e6f69     st ADC duration:
 802f220:	342e2520 736d2066 00000000 6574614c      %.4f ms....Late
 802f230:	69207473 63656a6e 20646574 20434441     st injected ADC 
 802f240:	61727564 6e6f6974 2e25203a 6d206634     duration: %.4f m
 802f250:	00000073 6574614c 73207473 6c706d61     s...Latest sampl
 802f260:	44412065 75642043 69746172 203a6e6f     e ADC duration: 
 802f270:	66342e25 0a736d20 00000000 0000766b     %.4f ms.....kv..
 802f280:	636c6143 74616c75 4b206465 25203a56     Calculated KV: %
 802f290:	2066322e 2f6d7072 746c6f76 0000000a     .2f rpm/volt....
 802f2a0:	006d656d 65726f63 65726620 656d2065     mem.core free me
 802f2b0:	79726f6d 25203a20 79622075 00736574     mory : %u bytes.
 802f2c0:	70616568 61726620 6e656d67 20207374     heap fragments  
 802f2d0:	25203a20 00000075 70616568 65726620      : %u...heap fre
 802f2e0:	6f742065 206c6174 25203a20 79622075     e total  : %u by
 802f2f0:	0a736574 00000000 65726874 00736461     tes.....threads.
 802f300:	20202020 72646461 20202020 63617473         addr    stac
 802f310:	7270206b 72206f69 20736665 20202020     k prio refs     
 802f320:	74617473 20202065 20202020 20202020     state           
 802f330:	656d616e 6d697420 20202065 00000020     name time    ...
 802f340:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
 802f350:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
 802f360:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
 802f370:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0000002d     -------------...
 802f380:	6c382e25 2e252078 20786c38 756c3425     %.8lx %.8lx %4lu
 802f390:	6c342520 39252075 31252073 25207334      %4lu %9s %14s %
 802f3a0:	0000756c 6c756166 00000074 000a7325     lu..fault...%s..
 802f3b0:	6c756166 00007374 66206f4e 746c7561     faults..No fault
 802f3c0:	65722073 74736967 64657265 6e697320     s registered sin
 802f3d0:	73206563 74726174 000a7075 20656854     ce startup..The 
 802f3e0:	6c6c6f66 6e69776f 61662067 73746c75     following faults
 802f3f0:	72657720 65722065 74736967 64657265      were registered
 802f400:	6e697320 73206563 74726174 00000a3a      since start:...
 802f410:	6c756146 20202074 20202020 20202020     Fault           
 802f420:	25203a20 00000073 72727543 20746e65      : %s...Current 
 802f430:	20202020 20202020 25203a20 0066312e              : %.1f.
 802f440:	72727543 20746e65 746c6966 64657265     Current filtered
 802f450:	25203a20 0066312e 746c6f56 20656761      : %.1f.Voltage 
 802f460:	20202020 20202020 25203a20 0066322e              : %.2f.
 802f470:	79747544 20202020 20202020 20202020     Duty            
 802f480:	25203a20 0066332e 204d5052 20202020      : %.3f.RPM     
 802f490:	20202020 20202020 25203a20 0066312e              : %.1f.
 802f4a0:	68636154 2020206f 20202020 20202020     Tacho           
 802f4b0:	25203a20 00000064 6c637943 72207365      : %d...Cycles r
 802f4c0:	696e6e75 2020676e 25203a20 00000064     unning   : %d...
 802f4d0:	204d4954 79747564 20202020 20202020     TIM duty        
 802f4e0:	25203a20 00000064 204d4954 206c6176      : %d...TIM val 
 802f4f0:	706d6173 20202020 25203a20 00000064     samp     : %d...
 802f500:	204d4954 72727563 20746e65 706d6173     TIM current samp
 802f510:	25203a20 00000064 204d4954 20706f74      : %d...TIM top 
 802f520:	20202020 20202020 25203a20 00000064              : %d...
 802f530:	6d6d6f43 65747320 20202070 20202020     Comm step       
 802f540:	25203a20 00000064 706d6554 74617265      : %d...Temperat
 802f550:	20657275 20202020 25203a20 0066322e     ure      : %.2f.
 802f560:	006d7072 63656c45 63697274 52206c61     rpm.Electrical R
 802f570:	203a4d50 66322e25 6d707220 0000000a     PM: %.2f rpm....
 802f580:	68636174 0000006f 68636154 74656d6f     tacho...Tachomet
 802f590:	63207265 746e756f 25203a73 00000a69     er counts: %i...
 802f5a0:	006d6974 316d6954 544e4320 6925203a     tim.Tim1 CNT: %i
 802f5b0:	00000000 386d6954 544e4320 7525203a     ....Tim8 CNT: %u
 802f5c0:	00000000 79747544 63796320 3a31656c     ....Duty cycle1:
 802f5d0:	00752520 79747544 63796320 3a32656c      %u.Duty cycle2:
 802f5e0:	00752520 79747544 63796320 3a33656c      %u.Duty cycle3:
 802f5f0:	00752520 3a706f54 00752520 31726944      %u.Top: %u.Dir1
 802f600:	7525203a 00000000 38726944 7525203a     : %u....Dir8: %u
 802f610:	00000000 746c6f56 20656761 706d6173     ....Voltage samp
 802f620:	203a656c 00007525 72727543 20746e65     le: %u..Current 
 802f630:	61732031 656c706d 7525203a 00000000     1 sample: %u....
 802f640:	72727543 20746e65 61732032 656c706d     Current 2 sample
 802f650:	7525203a 0000000a 746c6f76 00000000     : %u....volt....
 802f660:	75706e49 6f762074 6761746c 25203a65     Input voltage: %
 802f670:	0a66322e 00000000 61726170 65645f6d     .2f.....param_de
 802f680:	74636574 00000000 00006625 6c637943     tect....%f..Cycl
 802f690:	6e692065 72676574 726f7461 6d696c20     e integrator lim
 802f6a0:	203a7469 66322e25 00000000 70756f43     it: %.2f....Coup
 802f6b0:	676e696c 63616620 3a726f74 322e2520     ling factor: %.2
 802f6c0:	00000066 65746544 64657463 6c616820     f...Detected hal
 802f6d0:	6573206c 726f736e 62617420 003a656c     l sensor table:.
 802f6e0:	202c6925 202c6925 202c6925 202c6925     %i, %i, %i, %i, 
 802f6f0:	202c6925 202c6925 202c6925 000a6925     %i, %i, %i, %i..
 802f700:	6c6c6148 6e657320 20726f73 65746564     Hall sensor dete
 802f710:	6f697463 6166206e 64656c69 0000003a     ction failed:...
 802f720:	38325357 65203131 6c62616e 202e6465     WS2811 enabled. 
 802f730:	6c6c6148 6e657320 73726f73 6e616320     Hall sensors can
 802f740:	20746f6e 75206562 2e646573 0000000a     not be used.....
 802f750:	6f636e45 20726564 62616e65 2e64656c     Encoder enabled.
 802f760:	6c614820 6573206c 726f736e 61632073      Hall sensors ca
 802f770:	746f6e6e 20656220 64657375 00000a2e     nnot be used....
 802f780:	65746544 6f697463 6166206e 64656c69     Detection failed
 802f790:	7254202e 67612079 206e6961 68746977     . Try again with
 802f7a0:	66696420 65726566 7020746e 6d617261      different param
 802f7b0:	72657465 000a2e73 61766e49 2064696c     eters...Invalid 
 802f7c0:	75677261 746e656d 2e297328 0000000a     argument(s).....
 802f7d0:	73696854 6d6f6320 646e616d 71657220     This command req
 802f7e0:	65726975 68742073 20656572 75677261     uires three argu
 802f7f0:	746e656d 000a2e73 5f6d7072 00706564     ments...rpm_dep.
 802f800:	6c637943 6e692065 696c2074 3a74696d     Cycle int limit:
 802f810:	322e2520 00000066 6c637943 6e692065      %.2f...Cycle in
 802f820:	696c2074 2074696d 6e6e7572 3a676e69     t limit running:
 802f830:	322e2520 00000066 6c637943 6e692065      %.2f...Cycle in
 802f840:	696c2074 2074696d 3a78616d 322e2520     t limit max: %.2
 802f850:	00000a66 5f6e6163 73766564 00000000     f...can_devs....
 802f860:	204e4143 69766564 20736563 6e656573     CAN devices seen
 802f870:	206e6f20 20656874 20737562 20656874      on the bus the 
 802f880:	74736170 63657320 3a646e6f 0000000a     past second:....
 802f890:	20204449 20202020 20202020 20202020     ID              
 802f8a0:	3a202020 00692520 54205852 20656d69        : %i.RX Time 
 802f8b0:	20202020 20202020 3a202020 00692520                : %i.
 802f8c0:	20656741 6c696d28 6573696c 646e6f63     Age (millisecond
 802f8d0:	3a202973 322e2520 00000066 204d5052     s) : %.2f...RPM 
 802f8e0:	20202020 20202020 20202020 3a202020                    :
 802f8f0:	322e2520 00000066 72727543 20746e65      %.2f...Current 
 802f900:	20202020 20202020 3a202020 322e2520                : %.2
 802f910:	00000066 79747544 20202020 20202020     f...Duty        
 802f920:	20202020 3a202020 322e2520 00000a66            : %.2f...
 802f930:	5f636f66 6f636e65 5f726564 65746564     foc_encoder_dete
 802f940:	00007463 7366664f 20207465 25203a20     ct..Offset   : %
 802f950:	0066322e 69746152 2020206f 25203a20     .2f.Ratio    : %
 802f960:	0066322e 65766e49 64657472 25203a20     .2f.Inverted : %
 802f970:	00000a73 6f636e45 20726564 20746f6e     s...Encoder not 
 802f980:	62616e65 2e64656c 0000000a 73696854     enabled.....This
 802f990:	6d6f6320 646e616d 71657220 65726975      command require
 802f9a0:	6e6f2073 72612065 656d7567 0a2e746e     s one argument..
 802f9b0:	00000000 7361656d 5f657275 00736572     ....measure_res.
 802f9c0:	69736552 6e617473 203a6563 66362e25     Resistance: %.6f
 802f9d0:	6d686f20 0000000a 7361656d 5f657275      ohm....measure_
 802f9e0:	00646e69 75646e49 6e617463 203a6563     ind.Inductance: 
 802f9f0:	66322e25 63696d20 65686f72 2079726e     %.2f microhenry 
 802fa00:	322e2528 29412066 0000000a 7361656d     (%.2f A)....meas
 802fa10:	5f657275 6b6e696c 00656761 78756c46     ure_linkage.Flux
 802fa20:	6e696c20 6567616b 2e25203a 000a6637      linkage: %.7f..
 802fa30:	7361656d 5f657275 5f736572 00646e69     measure_res_ind.
 802fa40:	69736552 6e617473 203a6563 66362e25     Resistance: %.6f
 802fa50:	6d686f20 00000000 75646e49 6e617463      ohm....Inductan
 802fa60:	203a6563 66322e25 63696d20 65686f72     ce: %.2f microhe
 802fa70:	0a79726e 00000000 7361656d 5f657275     nry.....measure_
 802fa80:	6b6e696c 5f656761 00636f66 5f636f66     linkage_foc.foc_
 802fa90:	74617473 00000065 735f7768 75746174     state...hw_statu
 802faa0:	00000073 6d726946 65726177 6425203a     s...Firmware: %d
 802fab0:	0064252e 00303134 64726148 65726177     .%d.410.Hardware
 802fac0:	7325203a 00000000 44495555 3025203a     : %s....UUID: %0
 802fad0:	25205832 20583230 58323025 32302520     2X %02X %02X %02
 802fae0:	30252058 25205832 20583230 58323025     X %02X %02X %02X
 802faf0:	32302520 30252058 25205832 20583230      %02X %02X %02X 
 802fb00:	58323025 32302520 00000058 6d726550     %02X %02X...Perm
 802fb10:	6e656e61 524e2074 6f662046 3a646e75     anent NRF found:
 802fb20:	00732520 38767264 5f313033 64616572      %s.drv8301_read
 802fb30:	6765725f 00000000 73696854 72616820     _reg....This har
 802fb40:	72617764 6f642065 6e207365 6820746f     dware does not h
 802fb50:	20657661 52442061 30333856 000a2e31     ave a DRV8301...
 802fb60:	38767264 5f313033 74697277 65725f65     drv8301_write_re
 802fb70:	00000067 38767264 5f313033 5f746573     g...drv8301_set_
 802fb80:	615f636f 00006a64 38767264 5f313033     oc_adj..drv8301_
 802fb90:	6e697270 61665f74 73746c75 00000000     print_faults....
 802fba0:	38767264 5f313033 65736572 61665f74     drv8301_reset_fa
 802fbb0:	73746c75 00000000 38767264 5f353033     ults....drv8305_
 802fbc0:	64616572 6765725f 00000000 73696854     read_reg....This
 802fbd0:	72616820 72617764 6f642065 6e207365      hardware does n
 802fbe0:	6820746f 20657661 52442061 30333856     ot have a DRV830
 802fbf0:	000a2e35 38767264 5f353033 74697277     5...drv8305_writ
 802fc00:	65725f65 00000067 5f636f66 6e65706f     e_reg...foc_open
 802fc10:	706f6f6c 00000000 73696854 6d6f6320     loop....This com
 802fc20:	646e616d 71657220 65726975 77742073     mand requires tw
 802fc30:	7261206f 656d7567 2e73746e 0000000a     o arguments.....
 802fc40:	696c6156 6f632064 6e616d6d 61207364     Valid commands a
 802fc50:	003a6572 68532020 7420776f 20736968     re:.  Show this 
 802fc60:	706c6568 00000000 72502020 20746e69     help....  Print 
 802fc70:	676e6f70 72656820 6f742065 65657320     pong here to see
 802fc80:	20666920 20656874 6c706572 6f772079      if the reply wo
 802fc90:	00736b72 74532020 7420706f 6d206568     rks.  Stop the m
 802fca0:	726f746f 00000000 68542020 69742065     otor....  The ti
 802fcb0:	7420656d 6c206568 73657461 44412074     me the latest AD
 802fcc0:	6e692043 72726574 20747075 736e6f63     C interrupt cons
 802fcd0:	64656d75 00000000 68542020 61632065     umed....  The ca
 802fce0:	6c75636c 64657461 20766b20 7420666f     lculated kv of t
 802fcf0:	6d206568 726f746f 00000000 68532020     he motor....  Sh
 802fd00:	6d20776f 726f6d65 73752079 00656761     ow memory usage.
 802fd10:	694c2020 61207473 74206c6c 61657268       List all threa
 802fd20:	00007364 72502020 73746e69 65687420     ds..  Prints the
 802fd30:	72756320 746e6572 75616620 6320746c      current fault c
 802fd40:	0065646f 72502020 73746e69 6c6c6120     ode.  Prints all
 802fd50:	6f747320 20646572 6c756166 6f632074      stored fault co
 802fd60:	20736564 20646e61 646e6f63 6f697469     des and conditio
 802fd70:	7720736e 206e6568 79656874 72726120     ns when they arr
 802fd80:	64657669 00000000 72502020 73746e69     ived....  Prints
 802fd90:	65687420 72756320 746e6572 656c6520      the current ele
 802fda0:	69727463 206c6163 004d5052 72502020     ctrical RPM.  Pr
 802fdb0:	73746e69 63617420 656d6f68 20726574     ints tachometer 
 802fdc0:	756c6176 00000065 72502020 73746e69     value...  Prints
 802fdd0:	6d697420 6e612031 69742064 7320386d      tim1 and tim8 s
 802fde0:	69747465 0073676e 72502020 73746e69     ettings.  Prints
 802fdf0:	66696420 65726566 7620746e 61746c6f      different volta
 802fe00:	00736567 61726170 65645f6d 74636574     ges.param_detect
 802fe10:	75635b20 6e657272 5b205d74 5f6e696d      [current] [min_
 802fe20:	5d6d7072 6f6c5b20 75645f77 005d7974     rpm] [low_duty].
 802fe30:	70532020 75206e69 68742070 6f6d2065       Spin up the mo
 802fe40:	20726f74 43206e69 5f4d4d4f 45444f4d     tor in COMM_MODE
 802fe50:	4c45445f 61205941 6320646e 75706d6f     _DELAY and compu
 802fe60:	69206574 70207374 6d617261 72657465     te its parameter
 802fe70:	00002e73 68542020 74207369 20747365     s...  This test 
 802fe80:	756f6873 6220646c 65702065 726f6672     should be perfor
 802fe90:	2064656d 68746977 2074756f 64616f6c     med without load
 802fea0:	206e6f20 20656874 6f746f6d 00002e72      on the motor...
 802feb0:	78452020 6c706d61 70203a65 6d617261       Example: param
 802fec0:	7465645f 20746365 20302e35 20303036     _detect 5.0 600 
 802fed0:	36302e30 00000000 72502020 73746e69     0.06....  Prints
 802fee0:	6d6f7320 70722065 65642d6d 61762070      some rpm-dep va
 802fef0:	7365756c 00000000 72502020 73746e69     lues....  Prints
 802ff00:	6c6c6120 4e414320 76656420 73656369      all CAN devices
 802ff10:	65657320 6e6f206e 65687420 73756220      seen on the bus
 802ff20:	65687420 73617020 65732074 646e6f63      the past second
 802ff30:	00000000 5f636f66 6f636e65 5f726564     ....foc_encoder_
 802ff40:	65746564 5b207463 72727563 5d746e65     detect [current]
 802ff50:	00000000 75522020 6874206e 6f6d2065     ....  Run the mo
 802ff60:	20726f74 31207461 6f207a48 706f206e     tor at 1Hz on op
 802ff70:	6c206e65 20706f6f 20646e61 706d6f63     en loop and comp
 802ff80:	20657475 6f636e65 20726564 74746573     ute encoder sett
 802ff90:	73676e69 00000000 7361656d 5f657275     ings....measure_
 802ffa0:	20736572 7275635b 746e6572 0000005d     res [current]...
 802ffb0:	6f4c2020 74206b63 6d206568 726f746f       Lock the motor
 802ffc0:	74697720 20612068 72727563 20746e65      with a current 
 802ffd0:	20646e61 636c6163 74616c75 74692065     and calculate it
 802ffe0:	65722073 74736973 65636e61 00000000     s resistance....
 802fff0:	7361656d 5f657275 20646e69 7475645b     measure_ind [dut
 8030000:	00005d79 65532020 7320646e 74726f68     y]..  Send short
 8030010:	6c6f7620 65676174 6c757020 2c736573      voltage pulses,
 8030020:	61656d20 65727573 65687420 72756320      measure the cur
 8030030:	746e6572 646e6120 6c616320 616c7563     rent and calcula
 8030040:	74206574 6d206568 726f746f 646e6920     te the motor ind
 8030050:	61746375 0065636e 7361656d 5f657275     uctance.measure_
 8030060:	6b6e696c 20656761 7275635b 746e6572     linkage [current
 8030070:	645b205d 5d797475 696d5b20 70725f6e     ] [duty] [min_rp
 8030080:	5b205d6d 6f746f6d 65725f72 00005d73     m] [motor_res]..
 8030090:	75522020 6874206e 6f6d2065 20726f74       Run the motor 
 80300a0:	42206e69 2043444c 616c6564 6f6d2079     in BLDC delay mo
 80300b0:	61206564 6d20646e 75736165 74206572     de and measure t
 80300c0:	66206568 2078756c 6b6e696c 00656761     he flux linkage.
 80300d0:	78652020 6c706d61 656d2065 72757361       example measur
 80300e0:	696c5f65 67616b6e 20352065 20352e30     e_linkage 5 0.5 
 80300f0:	20303037 37302e30 00000036 69742020     700 0.076...  ti
 8030100:	6d203a70 75736165 74206572 72206568     p: measure the r
 8030110:	73697365 636e6174 69772065 6d206874     esistance with m
 8030120:	75736165 725f6572 66207365 74737269     easure_res first
 8030130:	00000000 654d2020 72757361 68742065     ....  Measure th
 8030140:	6f6d2065 20726f74 69736572 6e617473     e motor resistan
 8030150:	61206563 6920646e 6375646e 636e6174     ce and inductanc
 8030160:	69772065 61206874 6e69206e 6d657263     e with an increm
 8030170:	61746e65 6461206c 69747061 61206576     ental adaptive a
 8030180:	726f676c 6d687469 0000002e 7361656d     lgorithm....meas
 8030190:	5f657275 6b6e696c 5f656761 20636f66     ure_linkage_foc 
 80301a0:	7475645b 00005d79 75522020 6874206e     [duty]..  Run th
 80301b0:	6f6d2065 20726f74 68746977 434f4620     e motor with FOC
 80301c0:	646e6120 61656d20 65727573 65687420      and measure the
 80301d0:	756c6620 696c2078 67616b6e 00002e65      flux linkage...
 80301e0:	72502020 20746e69 656d6f73 434f4620       Print some FOC
 80301f0:	61747320 76206574 61697261 73656c62      state variables
 8030200:	0000002e 72502020 20746e69 656d6f73     ....  Print some
 8030210:	72616820 72617764 74732065 73757461      hardware status
 8030220:	666e6920 616d726f 6e6f6974 0000002e      information....
 8030230:	5f636f66 6e65706f 706f6f6c 75635b20     foc_openloop [cu
 8030240:	6e657272 5b205d74 6d707265 0000005d     rrent] [erpm]...
 8030250:	72432020 65746165 206e6120 6e65706f       Create an open
 8030260:	6f6f6c20 6f722070 69746174 6320676e      loop rotating c
 8030270:	65727275 7620746e 6f746365 00002e72     urrent vector...
 8030280:	25207325 00000073 73252020 00000000     %s %s...  %s....
 8030290:	68542020 20657265 6e207369 6568206f       There is no he
 80302a0:	6120706c 6c696176 656c6261 726f6620     lp available for
 80302b0:	69687420 6f632073 6e616d6d 00002e64      this command...
 80302c0:	61766e49 2064696c 6d6d6f63 3a646e61     Invalid command:
 80302d0:	0a732520 65707974 6c656820 6f742070      %s.type help to
 80302e0:	73696c20 6c612074 7661206c 616c6961      list all availa
 80302f0:	20656c62 6d6d6f63 73646e61 0000000a     ble commands....
 8030300:	65746544 00007463 00000000 00000000     Detect..........
 8030310:	656d6954 0074756f 00000000 00000000     Timeout.........

08030320 <cancfg>:
 8030320:	00000064 00180006 00000000 00000000     d...............
 8030330:	636e6143 70206d6f 65636f72 00007373     Cancom process..
 8030340:	004e4143 00000000 00000000 00000000     CAN.............
 8030350:	204e4143 74617473 00007375 00000000     CAN status......

08030360 <flash_addr>:
 8030360:	08000000 08004000 08008000 0800c000     .....@..........
 8030370:	08010000 08020000 08040000 08060000     ................
 8030380:	08080000 080a0000 080c0000 080e0000     ................

08030390 <flash_sector>:
 8030390:	00080000 00180010 00280020 00380030     ........ .(.0.8.
 80303a0:	00480040 00580050 00000000 00000000     @.H.P.X.........

080303b0 <CSWTCH.168>:
 80303b0:	080303f0 08030400 08030418 08030434     ............4...
 80303c0:	08030444 08030460 0803047c 00000000     D...`...|.......
 80303d0:	4c554146 4e555f54 574f4e4b 0000004e     FAULT_UNKNOWN...
 80303e0:	706d6153 6553656c 7265646e 00000000     SampleSender....
 80303f0:	4c554146 4f435f54 4e5f4544 00454e4f     FAULT_CODE_NONE.
 8030400:	4c554146 4f435f54 4f5f4544 5f524556     FAULT_CODE_OVER_
 8030410:	544c4f56 00454741 4c554146 4f435f54     VOLTAGE.FAULT_CO
 8030420:	555f4544 5245444e 4c4f565f 45474154     DE_UNDER_VOLTAGE
 8030430:	00000000 4c554146 4f435f54 445f4544     ....FAULT_CODE_D
 8030440:	00005652 4c554146 4f435f54 415f4544     RV..FAULT_CODE_A
 8030450:	4f5f5342 5f524556 52525543 00544e45     BS_OVER_CURRENT.
 8030460:	4c554146 4f435f54 4f5f4544 5f524556     FAULT_CODE_OVER_
 8030470:	504d4554 5445465f 00000000 4c554146     TEMP_FET....FAUL
 8030480:	4f435f54 4f5f4544 5f524556 504d4554     T_CODE_OVER_TEMP
 8030490:	544f4d5f 0000524f 00000000 00000000     _MOTOR..........
 80304a0:	6669636d 6d697420 00007265 00000000     mcif timer......
 80304b0:	65646e49 6f662078 00646e75 61746f52     Index found.Rota
 80304c0:	20646574 20726f66 636e7973 00000000     ted for sync....
 80304d0:	65766e49 6f697372 6e61206e 61722064     Inversion and ra
 80304e0:	206f6974 65746564 64657463 00000000     tio detected....
 80304f0:	3a636e45 322e2520 00000066 3a677641     Enc: %.2f...Avg:
 8030500:	322e2520 00000066 7366664f 64207465      %.2f...Offset d
 8030510:	63657465 00646574 00000000 00000000     etected.........
 8030520:	20646f4d 20203a64 20202020 2e252020     Mod d:        %.
 8030530:	00006632 20646f4d 20203a71 20202020     2f..Mod q:      
 8030540:	2e252020 00006632 79747544 2020203a       %.2f..Duty:   
 8030550:	20202020 2e252020 00006632 203a6456           %.2f..Vd: 
 8030560:	20202020 20202020 2e252020 00006632               %.2f..
 8030570:	203a7156 20202020 20202020 2e252020     Vq:           %.
 8030580:	00006632 73616850 20203a65 20202020     2f..Phase:      
 8030590:	2e252020 00006632 6c615f56 3a616870       %.2f..V_alpha:
 80305a0:	20202020 2e252020 00006632 65625f56           %.2f..V_be
 80305b0:	203a6174 20202020 2e252020 00006632     ta:       %.2f..
 80305c0:	203a6469 20202020 20202020 2e252020     id:           %.
 80305d0:	00006632 203a7169 20202020 20202020     2f..iq:         
 80305e0:	2e252020 00006632 665f6469 65746c69       %.2f..id_filte
 80305f0:	20203a72 2e252020 00006632 665f7169     r:    %.2f..iq_f
 8030600:	65746c69 20203a72 2e252020 00006632     ilter:    %.2f..
 8030610:	745f6469 65677261 20203a74 2e252020     id_target:    %.
 8030620:	00006632 745f7169 65677261 20203a74     2f..iq_target:  
 8030630:	2e252020 00006632 62615f69 20203a73       %.2f..i_abs:  
 8030640:	20202020 2e252020 00006632 62615f69           %.2f..i_ab
 8030650:	69665f73 7265746c 2e25203a 00006632     s_filter: %.2f..
 8030660:	5f73624f 203a3178 20202020 2e252020     Obs_x1:       %.
 8030670:	00006632 5f73624f 203a3278 20202020     2f..Obs_x2:     
 8030680:	2e252020 00006632 00000000 00000000       %.2f..........
 8030690:	7770636d 6f665f6d 69742063 0072656d     mcpwm_foc timer.

080306a0 <i2cfg>:
 80306a0:	00000001 000186a0 00000001 00000000     ................
 80306b0:	5f505041 004d5050 00000000 00000000     APP_PPM.........
 80306c0:	5f505041 00434441 00000000 00000000     APP_ADC.........
 80306d0:	74726175 6d6d6f63 6f727020 73736563     uartcomm process
	...
 80306f0:	6e697250 68742074 74732065 73757461     Print the status
 8030700:	20666f20 20656874 636e756e 206b7568      of the nunchuk 
 8030710:	00707061 636e756e 5f6b7568 74617473     app.nunchuk_stat
 8030720:	00007375 00000000 00000000 00000000     us..............
 8030730:	636e754e 206b7568 00633269 00000000     Nunchuk i2c.....
 8030740:	636e754e 206b7568 7074756f 00007475     Nunchuk output..
 8030750:	00006e4f 0066664f 636e754e 206b7568     On..Off.Nunchuk 
 8030760:	74617453 00007375 7074754f 203a7475     Status..Output: 
 8030770:	00007325 00000000 00000000 00000000     %s..............
 8030780:	5f505041 4d415845 00454c50 00000000     APP_EXAMPLE.....
 8030790:	2066724e 00005852 00000000 00000000     Nrf RX..........
 80307a0:	2066724e 00005854 00000000 00000000     Nrf TX..........
 80307b0:	74727173 00000000 00000000 00000000     sqrt............
 80307c0:	6e697361 00000066 00000000 00000000     asinf...........
 80307d0:	66707865 00000000 00000000 00000000     expf............
 80307e0:	646f6d66 00000066 00000000 00000000     fmodf...........
 80307f0:	66676f6c 00000000 00000000 00000000     logf............
 8030800:	66776f70 00000000 00000000 00000000     powf............
 8030810:	74727173 00000066 00000000 00000000     sqrtf...........

08030820 <halF>:
 8030820:	3f000000 bf000000 00000000 00000000     ...?............

08030830 <ln2HI>:
 8030830:	3f317180 bf317180 00000000 00000000     .q1?.q1.........

08030840 <ln2LO>:
 8030840:	3717f7d1 b717f7d1 00000000 00000000     ...7............

08030850 <Zero>:
 8030850:	00000000 80000000 00000000 00000000     ................

08030860 <npio2_hw>:
 8030860:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8030870:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8030880:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8030890:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80308a0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80308b0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80308c0:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80308d0:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080308e0 <two_over_pi>:
 80308e0:	000000a2 000000f9 00000083 0000006e     ............n...
 80308f0:	0000004e 00000044 00000015 00000029     N...D.......)...
 8030900:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8030910:	000000f5 00000034 000000dd 000000c0     ....4...........
 8030920:	000000db 00000062 00000095 00000099     ....b...........
 8030930:	0000003c 00000043 00000090 00000041     <...C.......A...
 8030940:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8030950:	000000de 000000bb 000000c5 00000061     ............a...
 8030960:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8030970:	00000042 0000004d 000000d2 000000e0     B...M...........
 8030980:	00000006 00000049 0000002e 000000ea     ....I...........
 8030990:	00000009 000000d1 00000092 0000001c     ................
 80309a0:	000000fe 0000001d 000000eb 0000001c     ................
 80309b0:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80309c0:	000000e8 00000082 00000035 000000f5     ........5.......
 80309d0:	0000002e 000000bb 00000044 00000084     ........D.......
 80309e0:	000000e9 0000009c 00000070 00000026     ........p...&...
 80309f0:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8030a00:	00000039 00000091 000000d6 00000039     9...........9...
 8030a10:	00000083 00000053 00000039 000000f4     ....S...9.......
 8030a20:	0000009c 00000084 0000005f 0000008b     ........_.......
 8030a30:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8030a40:	0000001f 000000f8 00000097 000000ff     ................
 8030a50:	000000de 00000005 00000098 0000000f     ................
 8030a60:	000000ef 0000002f 00000011 0000008b     ..../...........
 8030a70:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8030a80:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8030a90:	00000027 000000cb 00000009 000000b7     '...............
 8030aa0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8030ab0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8030ac0:	00000075 00000027 000000ba 000000c7     u...'...........
 8030ad0:	000000eb 000000e5 000000f1 0000007b     ............{...
 8030ae0:	0000003d 00000007 00000039 000000f7     =.......9.......
 8030af0:	0000008a 00000052 00000092 000000ea     ....R...........
 8030b00:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8030b10:	0000001f 0000008d 0000005d 00000008     ........].......
 8030b20:	00000056 00000003 00000030 00000046     V.......0...F...
 8030b30:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8030b40:	000000f0 000000cf 000000bc 00000020     ............ ...
 8030b50:	0000009a 000000f4 00000036 0000001d     ........6.......
 8030b60:	000000a9 000000e3 00000091 00000061     ............a...
 8030b70:	0000005e 000000e6 0000001b 00000008     ^...............
 8030b80:	00000065 00000099 00000085 0000005f     e..........._...
 8030b90:	00000014 000000a0 00000068 00000040     ........h...@...
 8030ba0:	0000008d 000000ff 000000d8 00000080     ................
 8030bb0:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8030bc0:	00000006 00000006 00000015 00000056     ............V...
 8030bd0:	000000ca 00000073 000000a8 000000c9     ....s...........
 8030be0:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8030bf0:	0000008c 0000006b 00000000 00000000     ....k...........

08030c00 <PIo2>:
 8030c00:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8030c10:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8030c20:	1fc40000 1bc60000 17440000 00000000     ..........D.....

08030c30 <init_jk>:
 8030c30:	00000004 00000007 00000009 00000000     ................

08030c40 <TWO52>:
 8030c40:	00000000 43300000 00000000 c3300000     ......0C......0.

08030c50 <atanhi>:
 8030c50:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

08030c60 <atanlo>:
 8030c60:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3
 8030c70:	646c2565 00000000 00000000 00000000     e%ld............

08030c80 <basefix.8422>:
 8030c80:	0001000a 00030002 00050004 00070006     ................
 8030c90:	00090008 000b000a 000d000c 000f000e     ................
 8030ca0:	00000010 00000000 00000000 00000000     ................
 8030cb0:	00000043 49534f50 00000058 00000000     C...POSIX.......
 8030cc0:	0000666e 74696e69 00000079 00006e61     nf..inity...an..

08030cd0 <fpi.7269>:
 8030cd0:	00000035 fffffbce 000003cb 00000001     5...............
	...

08030cf0 <fpinan.7305>:
 8030cf0:	00000034 fffffbce 000003cb 00000001     4...............
	...

08030d10 <tinytens>:
 8030d10:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8030d20:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8030d30:	64ac6f43 11680628 00000000 00000000     Co.d(.h.........
 8030d40:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8030d50:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8030d60:	00000000 33323130 37363534 62613938     ....0123456789ab
 8030d70:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8030d80:	00000030 00000000 00000000 00000000     0...............

08030d90 <blanks.8351>:
 8030d90:	20202020 20202020 20202020 20202020                     

08030da0 <zeroes.8352>:
 8030da0:	30303030 30303030 30303030 30303030     0000000000000000

08030db0 <_ctype_>:
 8030db0:	20202000 20202020 28282020 20282828     .         ((((( 
 8030dc0:	20202020 20202020 20202020 20202020                     
 8030dd0:	10108820 10101010 10101010 10101010      ...............
 8030de0:	04040410 04040404 10040404 10101010     ................
 8030df0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8030e00:	01010101 01010101 01010101 10101010     ................
 8030e10:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8030e20:	02020202 02020202 02020202 10101010     ................
 8030e30:	00000020 00000000 00000000 00000000      ...............
	...
 8030ec0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

08030ed0 <__hexdig>:
	...
 8030f00:	13121110 17161514 00001918 00000000     ................
 8030f10:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
 8030f30:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

08030fd0 <__mprec_bigtens>:
 8030fd0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8030fe0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8030ff0:	7f73bf3c 75154fdd 00000000 00000000     <.s..O.u........

08031000 <__mprec_tens>:
 8031000:	00000000 3ff00000 00000000 40240000     .......?......$@
 8031010:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8031020:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8031030:	00000000 412e8480 00000000 416312d0     .......A......cA
 8031040:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8031050:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8031060:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8031070:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8031080:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8031090:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80310a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 80310b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 80310c0:	79d99db4 44ea7843 00000000 00000000     ...yCx.D........

080310d0 <p05.7183>:
 80310d0:	00000005 00000019 0000007d              ........}...
